// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"go/constant"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const CONNECT = 57367
const MANAGE = 57368
const GRANTS = 57369
const OWNERSHIP = 57370
const REFERENCE = 57371
const LOWER_THAN_SET = 57372
const SET = 57373
const ALL = 57374
const DISTINCT = 57375
const DISTINCTROW = 57376
const AS = 57377
const EXISTS = 57378
const ASC = 57379
const DESC = 57380
const INTO = 57381
const DUPLICATE = 57382
const DEFAULT = 57383
const LOCK = 57384
const KEYS = 57385
const NULLS = 57386
const FIRST = 57387
const LAST = 57388
const AFTER = 57389
const INSTANT = 57390
const INPLACE = 57391
const COPY = 57392
const DISABLE = 57393
const ENABLE = 57394
const UNDEFINED = 57395
const MERGE = 57396
const TEMPTABLE = 57397
const DEFINER = 57398
const INVOKER = 57399
const SQL = 57400
const SECURITY = 57401
const CASCADED = 57402
const VALUES = 57403
const NEXT = 57404
const VALUE = 57405
const SHARE = 57406
const MODE = 57407
const SQL_NO_CACHE = 57408
const SQL_CACHE = 57409
const JOIN = 57410
const STRAIGHT_JOIN = 57411
const LEFT = 57412
const RIGHT = 57413
const INNER = 57414
const OUTER = 57415
const CROSS = 57416
const NATURAL = 57417
const USE = 57418
const FORCE = 57419
const CROSS_L2 = 57420
const LOWER_THAN_ON = 57421
const ON = 57422
const USING = 57423
const SUBQUERY_AS_EXPR = 57424
const LOWER_THAN_STRING = 57425
const ID = 57426
const AT_ID = 57427
const AT_AT_ID = 57428
const STRING = 57429
const VALUE_ARG = 57430
const LIST_ARG = 57431
const COMMENT = 57432
const COMMENT_KEYWORD = 57433
const QUOTE_ID = 57434
const STAGE = 57435
const CREDENTIALS = 57436
const STAGES = 57437
const SNAPSHOTS = 57438
const INTEGRAL = 57439
const HEX = 57440
const FLOAT = 57441
const HEXNUM = 57442
const BIT_LITERAL = 57443
const NULL = 57444
const TRUE = 57445
const FALSE = 57446
const LOWER_THAN_CHARSET = 57447
const CHARSET = 57448
const UNIQUE = 57449
const KEY = 57450
const OR = 57451
const PIPE_CONCAT = 57452
const XOR = 57453
const AND = 57454
const NOT = 57455
const BETWEEN = 57456
const CASE = 57457
const WHEN = 57458
const THEN = 57459
const ELSE = 57460
const END = 57461
const ELSEIF = 57462
const LOWER_THAN_EQ = 57463
const LE = 57464
const GE = 57465
const NE = 57466
const NULL_SAFE_EQUAL = 57467
const IS = 57468
const LIKE = 57469
const REGEXP = 57470
const IN = 57471
const ASSIGNMENT = 57472
const ILIKE = 57473
const SHIFT_LEFT = 57474
const SHIFT_RIGHT = 57475
const DIV = 57476
const MOD = 57477
const UNARY = 57478
const COLLATE = 57479
const BINARY = 57480
const UNDERSCORE_BINARY = 57481
const INTERVAL = 57482
const OUT = 57483
const INOUT = 57484
const BEGIN = 57485
const START = 57486
const TRANSACTION = 57487
const COMMIT = 57488
const ROLLBACK = 57489
const WORK = 57490
const CONSISTENT = 57491
const SNAPSHOT = 57492
const CHAIN = 57493
const NO = 57494
const RELEASE = 57495
const PRIORITY = 57496
const QUICK = 57497
const BIT = 57498
const TINYINT = 57499
const SMALLINT = 57500
const MEDIUMINT = 57501
const INT = 57502
const INTEGER = 57503
const BIGINT = 57504
const INTNUM = 57505
const REAL = 57506
const DOUBLE = 57507
const FLOAT_TYPE = 57508
const DECIMAL = 57509
const NUMERIC = 57510
const DECIMAL_VALUE = 57511
const TIME = 57512
const TIMESTAMP = 57513
const DATETIME = 57514
const YEAR = 57515
const CHAR = 57516
const VARCHAR = 57517
const BOOL = 57518
const CHARACTER = 57519
const VARBINARY = 57520
const NCHAR = 57521
const TEXT = 57522
const TINYTEXT = 57523
const MEDIUMTEXT = 57524
const LONGTEXT = 57525
const BLOB = 57526
const TINYBLOB = 57527
const MEDIUMBLOB = 57528
const LONGBLOB = 57529
const JSON = 57530
const ENUM = 57531
const UUID = 57532
const VECF32 = 57533
const VECF64 = 57534
const GEOMETRY = 57535
const POINT = 57536
const LINESTRING = 57537
const POLYGON = 57538
const GEOMETRYCOLLECTION = 57539
const MULTIPOINT = 57540
const MULTILINESTRING = 57541
const MULTIPOLYGON = 57542
const INT1 = 57543
const INT2 = 57544
const INT3 = 57545
const INT4 = 57546
const INT8 = 57547
const S3OPTION = 57548
const STAGEOPTION = 57549
const SQL_SMALL_RESULT = 57550
const SQL_BIG_RESULT = 57551
const SQL_BUFFER_RESULT = 57552
const LOW_PRIORITY = 57553
const HIGH_PRIORITY = 57554
const DELAYED = 57555
const CREATE = 57556
const ALTER = 57557
const DROP = 57558
const RENAME = 57559
const ANALYZE = 57560
const ADD = 57561
const RETURNS = 57562
const SCHEMA = 57563
const TABLE = 57564
const SEQUENCE = 57565
const INDEX = 57566
const VIEW = 57567
const TO = 57568
const IGNORE = 57569
const IF = 57570
const PRIMARY = 57571
const COLUMN = 57572
const CONSTRAINT = 57573
const SPATIAL = 57574
const FULLTEXT = 57575
const FOREIGN = 57576
const KEY_BLOCK_SIZE = 57577
const SHOW = 57578
const DESCRIBE = 57579
const EXPLAIN = 57580
const DATE = 57581
const ESCAPE = 57582
const REPAIR = 57583
const OPTIMIZE = 57584
const TRUNCATE = 57585
const MAXVALUE = 57586
const PARTITION = 57587
const REORGANIZE = 57588
const LESS = 57589
const THAN = 57590
const PROCEDURE = 57591
const TRIGGER = 57592
const STATUS = 57593
const VARIABLES = 57594
const ROLE = 57595
const PROXY = 57596
const AVG_ROW_LENGTH = 57597
const STORAGE = 57598
const DISK = 57599
const MEMORY = 57600
const CHECKSUM = 57601
const COMPRESSION = 57602
const DATA = 57603
const DIRECTORY = 57604
const DELAY_KEY_WRITE = 57605
const ENCRYPTION = 57606
const ENGINE = 57607
const MAX_ROWS = 57608
const MIN_ROWS = 57609
const PACK_KEYS = 57610
const ROW_FORMAT = 57611
const STATS_AUTO_RECALC = 57612
const STATS_PERSISTENT = 57613
const STATS_SAMPLE_PAGES = 57614
const DYNAMIC = 57615
const COMPRESSED = 57616
const REDUNDANT = 57617
const COMPACT = 57618
const FIXED = 57619
const COLUMN_FORMAT = 57620
const AUTO_RANDOM = 57621
const ENGINE_ATTRIBUTE = 57622
const SECONDARY_ENGINE_ATTRIBUTE = 57623
const INSERT_METHOD = 57624
const RESTRICT = 57625
const CASCADE = 57626
const ACTION = 57627
const PARTIAL = 57628
const SIMPLE = 57629
const CHECK = 57630
const ENFORCED = 57631
const RANGE = 57632
const LIST = 57633
const ALGORITHM = 57634
const LINEAR = 57635
const PARTITIONS = 57636
const SUBPARTITION = 57637
const SUBPARTITIONS = 57638
const CLUSTER = 57639
const TYPE = 57640
const ANY = 57641
const SOME = 57642
const EXTERNAL = 57643
const LOCALFILE = 57644
const URL = 57645
const PREPARE = 57646
const DEALLOCATE = 57647
const RESET = 57648
const EXTENSION = 57649
const INCREMENT = 57650
const CYCLE = 57651
const MINVALUE = 57652
const PUBLICATION = 57653
const SUBSCRIPTIONS = 57654
const PUBLICATIONS = 57655
const PROPERTIES = 57656
const PARSER = 57657
const VISIBLE = 57658
const INVISIBLE = 57659
const BTREE = 57660
const HASH = 57661
const RTREE = 57662
const BSI = 57663
const IVFFLAT = 57664
const MASTER = 57665
const ZONEMAP = 57666
const LEADING = 57667
const BOTH = 57668
const TRAILING = 57669
const UNKNOWN = 57670
const LISTS = 57671
const OP_TYPE = 57672
const REINDEX = 57673
const EXPIRE = 57674
const ACCOUNT = 57675
const ACCOUNTS = 57676
const UNLOCK = 57677
const DAY = 57678
const NEVER = 57679
const PUMP = 57680
const MYSQL_COMPATIBILITY_MODE = 57681
const UNIQUE_CHECK_ON_AUTOINCR = 57682
const MODIFY = 57683
const CHANGE = 57684
const SECOND = 57685
const ASCII = 57686
const COALESCE = 57687
const COLLATION = 57688
const HOUR = 57689
const MICROSECOND = 57690
const MINUTE = 57691
const MONTH = 57692
const QUARTER = 57693
const REPEAT = 57694
const REVERSE = 57695
const ROW_COUNT = 57696
const WEEK = 57697
const REVOKE = 57698
const FUNCTION = 57699
const PRIVILEGES = 57700
const TABLESPACE = 57701
const EXECUTE = 57702
const SUPER = 57703
const GRANT = 57704
const OPTION = 57705
const REFERENCES = 57706
const REPLICATION = 57707
const SLAVE = 57708
const CLIENT = 57709
const USAGE = 57710
const RELOAD = 57711
const FILE = 57712
const TEMPORARY = 57713
const ROUTINE = 57714
const EVENT = 57715
const SHUTDOWN = 57716
const NULLX = 57717
const AUTO_INCREMENT = 57718
const APPROXNUM = 57719
const SIGNED = 57720
const UNSIGNED = 57721
const ZEROFILL = 57722
const ENGINES = 57723
const LOW_CARDINALITY = 57724
const AUTOEXTEND_SIZE = 57725
const ADMIN_NAME = 57726
const RANDOM = 57727
const SUSPEND = 57728
const ATTRIBUTE = 57729
const HISTORY = 57730
const REUSE = 57731
const CURRENT = 57732
const OPTIONAL = 57733
const FAILED_LOGIN_ATTEMPTS = 57734
const PASSWORD_LOCK_TIME = 57735
const UNBOUNDED = 57736
const SECONDARY = 57737
const RESTRICTED = 57738
const USER = 57739
const IDENTIFIED = 57740
const CIPHER = 57741
const ISSUER = 57742
const X509 = 57743
const SUBJECT = 57744
const SAN = 57745
const REQUIRE = 57746
const SSL = 57747
const NONE = 57748
const PASSWORD = 57749
const SHARED = 57750
const EXCLUSIVE = 57751
const MAX_QUERIES_PER_HOUR = 57752
const MAX_UPDATES_PER_HOUR = 57753
const MAX_CONNECTIONS_PER_HOUR = 57754
const MAX_USER_CONNECTIONS = 57755
const FORMAT = 57756
const VERBOSE = 57757
const CONNECTION = 57758
const TRIGGERS = 57759
const PROFILES = 57760
const LOAD = 57761
const INLINE = 57762
const INFILE = 57763
const TERMINATED = 57764
const OPTIONALLY = 57765
const ENCLOSED = 57766
const ESCAPED = 57767
const STARTING = 57768
const LINES = 57769
const ROWS = 57770
const IMPORT = 57771
const DISCARD = 57772
const JSONTYPE = 57773
const MODUMP = 57774
const OVER = 57775
const PRECEDING = 57776
const FOLLOWING = 57777
const GROUPS = 57778
const DATABASES = 57779
const TABLES = 57780
const SEQUENCES = 57781
const EXTENDED = 57782
const FULL = 57783
const PROCESSLIST = 57784
const FIELDS = 57785
const COLUMNS = 57786
const OPEN = 57787
const ERRORS = 57788
const WARNINGS = 57789
const INDEXES = 57790
const SCHEMAS = 57791
const NODE = 57792
const LOCKS = 57793
const ROLES = 57794
const TABLE_NUMBER = 57795
const COLUMN_NUMBER = 57796
const TABLE_VALUES = 57797
const TABLE_SIZE = 57798
const NAMES = 57799
const GLOBAL = 57800
const PERSIST = 57801
const SESSION = 57802
const ISOLATION = 57803
const LEVEL = 57804
const READ = 57805
const WRITE = 57806
const ONLY = 57807
const REPEATABLE = 57808
const COMMITTED = 57809
const UNCOMMITTED = 57810
const SERIALIZABLE = 57811
const LOCAL = 57812
const EVENTS = 57813
const PLUGINS = 57814
const CURRENT_TIMESTAMP = 57815
const DATABASE = 57816
const CURRENT_TIME = 57817
const LOCALTIME = 57818
const LOCALTIMESTAMP = 57819
const UTC_DATE = 57820
const UTC_TIME = 57821
const UTC_TIMESTAMP = 57822
const REPLACE = 57823
const CONVERT = 57824
const SEPARATOR = 57825
const TIMESTAMPDIFF = 57826
const CURRENT_DATE = 57827
const CURRENT_USER = 57828
const CURRENT_ROLE = 57829
const SECOND_MICROSECOND = 57830
const MINUTE_MICROSECOND = 57831
const MINUTE_SECOND = 57832
const HOUR_MICROSECOND = 57833
const HOUR_SECOND = 57834
const HOUR_MINUTE = 57835
const DAY_MICROSECOND = 57836
const DAY_SECOND = 57837
const DAY_MINUTE = 57838
const DAY_HOUR = 57839
const YEAR_MONTH = 57840
const SQL_TSI_HOUR = 57841
const SQL_TSI_DAY = 57842
const SQL_TSI_WEEK = 57843
const SQL_TSI_MONTH = 57844
const SQL_TSI_QUARTER = 57845
const SQL_TSI_YEAR = 57846
const SQL_TSI_SECOND = 57847
const SQL_TSI_MINUTE = 57848
const RECURSIVE = 57849
const CONFIG = 57850
const DRAINER = 57851
const SOURCE = 57852
const STREAM = 57853
const HEADERS = 57854
const CONNECTOR = 57855
const CONNECTORS = 57856
const DAEMON = 57857
const PAUSE = 57858
const CANCEL = 57859
const TASK = 57860
const RESUME = 57861
const MATCH = 57862
const AGAINST = 57863
const BOOLEAN = 57864
const LANGUAGE = 57865
const WITH = 57866
const QUERY = 57867
const EXPANSION = 57868
const WITHOUT = 57869
const VALIDATION = 57870
const UPGRADE = 57871
const RETRY = 57872
const ADDDATE = 57873
const BIT_AND = 57874
const BIT_OR = 57875
const BIT_XOR = 57876
const CAST = 57877
const COUNT = 57878
const APPROX_COUNT = 57879
const APPROX_COUNT_DISTINCT = 57880
const SERIAL_EXTRACT = 57881
const APPROX_PERCENTILE = 57882
const CURDATE = 57883
const CURTIME = 57884
const DATE_ADD = 57885
const DATE_SUB = 57886
const EXTRACT = 57887
const GROUP_CONCAT = 57888
const MAX = 57889
const MID = 57890
const MIN = 57891
const NOW = 57892
const POSITION = 57893
const SESSION_USER = 57894
const STD = 57895
const STDDEV = 57896
const MEDIAN = 57897
const CLUSTER_CENTERS = 57898
const KMEANS = 57899
const STDDEV_POP = 57900
const STDDEV_SAMP = 57901
const SUBDATE = 57902
const SUBSTR = 57903
const SUBSTRING = 57904
const SUM = 57905
const SYSDATE = 57906
const SYSTEM_USER = 57907
const TRANSLATE = 57908
const TRIM = 57909
const VARIANCE = 57910
const VAR_POP = 57911
const VAR_SAMP = 57912
const AVG = 57913
const RANK = 57914
const ROW_NUMBER = 57915
const DENSE_RANK = 57916
const BIT_CAST = 57917
const BITMAP_BIT_POSITION = 57918
const BITMAP_BUCKET_NUMBER = 57919
const BITMAP_COUNT = 57920
const BITMAP_CONSTRUCT_AGG = 57921
const BITMAP_OR_AGG = 57922
const NEXTVAL = 57923
const SETVAL = 57924
const CURRVAL = 57925
const LASTVAL = 57926
const ARROW = 57927
const ROW = 57928
const OUTFILE = 57929
const HEADER = 57930
const MAX_FILE_SIZE = 57931
const FORCE_QUOTE = 57932
const PARALLEL = 57933
const STRICT = 57934
const UNUSED = 57935
const BINDINGS = 57936
const DO = 57937
const DECLARE = 57938
const LOOP = 57939
const WHILE = 57940
const LEAVE = 57941
const ITERATE = 57942
const UNTIL = 57943
const CALL = 57944
const PREV = 57945
const SLIDING = 57946
const FILL = 57947
const SPBEGIN = 57948
const BACKEND = 57949
const SERVERS = 57950
const HANDLER = 57951
const PERCENT = 57952
const SAMPLE = 57953
const MO_TS = 57954
const PITR = 57955
const CDC = 57956
const KILL = 57957
const BACKUP = 57958
const FILESYSTEM = 57959
const PARALLELISM = 57960
const RESTORE = 57961
const QUERY_RESULT = 57962

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"CROSS_L2",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"SNAPSHOTS",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"UNIQUE_CHECK_ON_AUTOINCR",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UPGRADE",
	"RETRY",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"BITMAP_BIT_POSITION",
	"BITMAP_BUCKET_NUMBER",
	"BITMAP_COUNT",
	"BITMAP_CONSTRUCT_AGG",
	"BITMAP_OR_AGG",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"STRICT",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"MO_TS",
	"PITR",
	"CDC",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"RESTORE",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:12374

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 132,
	11, 772,
	22, 772,
	-2, 765,
	-1, 155,
	239, 1177,
	241, 1076,
	-2, 1123,
	-1, 182,
	43, 595,
	241, 595,
	268, 602,
	269, 602,
	465, 595,
	-2, 630,
	-1, 221,
	641, 1934,
	-2, 505,
	-1, 523,
	641, 2054,
	-2, 391,
	-1, 581,
	641, 2113,
	-2, 389,
	-1, 582,
	641, 2114,
	-2, 390,
	-1, 583,
	641, 2115,
	-2, 392,
	-1, 716,
	320, 177,
	437, 177,
	438, 177,
	-2, 1839,
	-1, 782,
	83, 1626,
	-2, 1990,
	-1, 783,
	83, 1644,
	-2, 1961,
	-1, 787,
	83, 1645,
	-2, 1989,
	-1, 820,
	83, 1553,
	-2, 2187,
	-1, 821,
	83, 1554,
	-2, 2186,
	-1, 822,
	83, 1555,
	-2, 2176,
	-1, 823,
	83, 2148,
	-2, 2169,
	-1, 824,
	83, 2149,
	-2, 2170,
	-1, 825,
	83, 2150,
	-2, 2178,
	-1, 826,
	83, 2151,
	-2, 2158,
	-1, 827,
	83, 2152,
	-2, 2167,
	-1, 828,
	83, 2153,
	-2, 2179,
	-1, 829,
	83, 2154,
	-2, 2180,
	-1, 830,
	83, 2155,
	-2, 2185,
	-1, 831,
	83, 2156,
	-2, 2190,
	-1, 832,
	83, 2157,
	-2, 2191,
	-1, 833,
	83, 1622,
	-2, 2028,
	-1, 834,
	83, 1623,
	-2, 1823,
	-1, 835,
	83, 1624,
	-2, 2037,
	-1, 836,
	83, 1625,
	-2, 1832,
	-1, 838,
	83, 1628,
	-2, 1840,
	-1, 839,
	83, 1629,
	-2, 2061,
	-1, 841,
	83, 1632,
	-2, 1859,
	-1, 843,
	83, 1634,
	-2, 2073,
	-1, 844,
	83, 1635,
	-2, 2072,
	-1, 845,
	83, 1636,
	-2, 1903,
	-1, 846,
	83, 1637,
	-2, 1985,
	-1, 849,
	83, 1640,
	-2, 2084,
	-1, 851,
	83, 1642,
	-2, 2087,
	-1, 852,
	83, 1643,
	-2, 2089,
	-1, 853,
	83, 1646,
	-2, 2097,
	-1, 854,
	83, 1647,
	-2, 1970,
	-1, 855,
	83, 1648,
	-2, 2015,
	-1, 856,
	83, 1649,
	-2, 1980,
	-1, 857,
	83, 1650,
	-2, 2005,
	-1, 868,
	83, 1531,
	-2, 2181,
	-1, 869,
	83, 1532,
	-2, 2182,
	-1, 870,
	83, 1533,
	-2, 2183,
	-1, 969,
	460, 630,
	461, 630,
	-2, 596,
	-1, 1017,
	125, 1823,
	136, 1823,
	156, 1823,
	-2, 1797,
	-1, 1133,
	22, 799,
	-2, 748,
	-1, 1239,
	11, 772,
	22, 772,
	-2, 1411,
	-1, 1321,
	22, 799,
	-2, 748,
	-1, 1663,
	83, 1697,
	-2, 1987,
	-1, 1664,
	83, 1698,
	-2, 1988,
	-1, 1832,
	84, 952,
	-2, 958,
	-1, 2276,
	108, 1115,
	152, 1115,
	191, 1115,
	194, 1115,
	281, 1115,
	-2, 1108,
	-1, 2428,
	11, 772,
	22, 772,
	-2, 893,
	-1, 2460,
	84, 1783,
	157, 1783,
	-2, 1972,
	-1, 2461,
	84, 1783,
	157, 1783,
	-2, 1971,
	-1, 2462,
	84, 1759,
	157, 1759,
	-2, 1958,
	-1, 2463,
	84, 1760,
	157, 1760,
	-2, 1963,
	-1, 2464,
	84, 1761,
	157, 1761,
	-2, 1891,
	-1, 2465,
	84, 1762,
	157, 1762,
	-2, 1885,
	-1, 2466,
	84, 1763,
	157, 1763,
	-2, 1813,
	-1, 2467,
	84, 1764,
	157, 1764,
	-2, 1960,
	-1, 2468,
	84, 1765,
	157, 1765,
	-2, 1889,
	-1, 2469,
	84, 1766,
	157, 1766,
	-2, 1884,
	-1, 2470,
	84, 1767,
	157, 1767,
	-2, 1873,
	-1, 2471,
	84, 1783,
	157, 1783,
	-2, 1874,
	-1, 2472,
	84, 1783,
	157, 1783,
	-2, 1875,
	-1, 2474,
	84, 1772,
	157, 1772,
	-2, 2005,
	-1, 2475,
	84, 1750,
	157, 1750,
	-2, 1990,
	-1, 2476,
	84, 1781,
	157, 1781,
	-2, 1961,
	-1, 2477,
	84, 1781,
	157, 1781,
	-2, 1989,
	-1, 2478,
	84, 1781,
	157, 1781,
	-2, 1841,
	-1, 2479,
	84, 1779,
	157, 1779,
	-2, 1980,
	-1, 2480,
	84, 1776,
	157, 1776,
	-2, 1864,
	-1, 2481,
	83, 1731,
	84, 1731,
	157, 1731,
	395, 1731,
	396, 1731,
	397, 1731,
	-2, 1812,
	-1, 2482,
	83, 1732,
	84, 1732,
	157, 1732,
	395, 1732,
	396, 1732,
	397, 1732,
	-2, 1814,
	-1, 2483,
	83, 1733,
	84, 1733,
	157, 1733,
	395, 1733,
	396, 1733,
	397, 1733,
	-2, 2033,
	-1, 2484,
	83, 1735,
	84, 1735,
	157, 1735,
	395, 1735,
	396, 1735,
	397, 1735,
	-2, 1962,
	-1, 2485,
	83, 1737,
	84, 1737,
	157, 1737,
	395, 1737,
	396, 1737,
	397, 1737,
	-2, 1943,
	-1, 2486,
	83, 1739,
	84, 1739,
	157, 1739,
	395, 1739,
	396, 1739,
	397, 1739,
	-2, 1890,
	-1, 2487,
	83, 1741,
	84, 1741,
	157, 1741,
	395, 1741,
	396, 1741,
	397, 1741,
	-2, 1869,
	-1, 2488,
	83, 1742,
	84, 1742,
	157, 1742,
	395, 1742,
	396, 1742,
	397, 1742,
	-2, 1870,
	-1, 2489,
	83, 1744,
	84, 1744,
	157, 1744,
	395, 1744,
	396, 1744,
	397, 1744,
	-2, 1811,
	-1, 2490,
	84, 1786,
	157, 1786,
	395, 1786,
	396, 1786,
	397, 1786,
	-2, 1846,
	-1, 2491,
	84, 1786,
	157, 1786,
	395, 1786,
	396, 1786,
	397, 1786,
	-2, 1860,
	-1, 2492,
	84, 1789,
	157, 1789,
	395, 1789,
	396, 1789,
	397, 1789,
	-2, 1842,
	-1, 2493,
	84, 1789,
	157, 1789,
	395, 1789,
	396, 1789,
	397, 1789,
	-2, 1906,
	-1, 2494,
	84, 1786,
	157, 1786,
	395, 1786,
	396, 1786,
	397, 1786,
	-2, 1927,
	-1, 2707,
	108, 1115,
	152, 1115,
	191, 1115,
	194, 1115,
	281, 1115,
	-2, 1109,
	-1, 2725,
	81, 692,
	157, 692,
	-2, 1292,
	-1, 3137,
	194, 1115,
	305, 1379,
	-2, 1351,
	-1, 3312,
	108, 1115,
	152, 1115,
	191, 1115,
	194, 1115,
	-2, 1233,
	-1, 3314,
	108, 1115,
	152, 1115,
	191, 1115,
	194, 1115,
	-2, 1233,
	-1, 3326,
	81, 692,
	157, 692,
	-2, 1292,
	-1, 3347,
	194, 1115,
	305, 1379,
	-2, 1352,
	-1, 3493,
	108, 1115,
	152, 1115,
	191, 1115,
	194, 1115,
	-2, 1234,
	-1, 3519,
	84, 1195,
	157, 1195,
	-2, 1115,
	-1, 3657,
	84, 1195,
	157, 1195,
	-2, 1115,
	-1, 3816,
	84, 1199,
	157, 1199,
	-2, 1115,
	-1, 3864,
	84, 1200,
	157, 1200,
	-2, 1115,
}

const yyPrivate = 57344

const yyLast = 49762

var yyAct = [...]int{
	749, 726, 3910, 751, 3884, 2754, 210, 1918, 3820, 3903,
	3332, 3826, 1643, 3718, 720, 3426, 3827, 3819, 3657, 3123,
	735, 3744, 3156, 2757, 3697, 3775, 3361, 3227, 3547, 3635,
	2748, 2549, 3603, 3691, 1274, 3228, 728, 3480, 1639, 3656,
	3722, 3478, 3481, 1416, 3575, 2666, 617, 779, 1016, 2751,
	3626, 1134, 3430, 3698, 1479, 1556, 3421, 3700, 1422, 1865,
	635, 3500, 641, 641, 3299, 1128, 1690, 3490, 641, 658,
	667, 3348, 3132, 667, 2728, 2323, 1646, 3495, 3094, 3462,
	3315, 3055, 2863, 2864, 3083, 3225, 3287, 2844, 2458, 2862,
	2010, 2778, 3183, 2047, 3152, 3267, 3141, 3134, 2122, 2584,
	3317, 1704, 37, 2926, 2080, 679, 3213, 2456, 2326, 2886,
	3193, 2859, 3066, 195, 2696, 3062, 3058, 1878, 2007, 675,
	3060, 3103, 2422, 3053, 3057, 1975, 1472, 2024, 3056, 718,
	3140, 2287, 2708, 1124, 2405, 3030, 2254, 2231, 2973, 2118,
	2105, 2230, 131, 2899, 723, 2081, 1552, 2356, 2528, 2088,
	1796, 2510, 2909, 2053, 2003, 1560, 2423, 65, 942, 2410,
	2117, 1978, 36, 1976, 1557, 2684, 2679, 2780, 2759, 2324,
	2089, 664, 1897, 1908, 6, 2720, 206, 8, 2276, 1010,
	205, 7, 2286, 1841, 2454, 1388, 617, 1637, 727, 2119,
	1073, 1488, 1352, 724, 634, 1519, 2617, 1588, 2266, 2129,
	1458, 1697, 717, 1677, 1628, 2319, 2084, 764, 132, 1385,
	210, 736, 210, 132, 1064, 1065, 1147, 2087, 2069, 2152,
	1545, 641, 1058, 1059, 27, 616, 1526, 1063, 16, 1636,
	1877, 978, 23, 2043, 1571, 1009, 2430, 1840, 672, 1405,
	650, 14, 941, 1457, 15, 1455, 33, 1417, 653, 725,
	1837, 1705, 872, 1816, 1518, 1510, 108, 1642, 2616, 682,
	681, 196, 1401, 192, 188, 666, 918, 939, 964, 1425,
	924, 1319, 1275, 647, 678, 24, 132, 17, 10, 2126,
	932, 874, 933, 875, 3709, 1043, 1207, 1208, 1209, 1206,
	3620, 2652, 2652, 663, 2652, 2432, 1061, 659, 1207, 1208,
	1209, 1206, 1207, 1208, 1209, 1206, 3329, 3110, 2943, 2942,
	661, 2136, 1129, 662, 3455, 660, 637, 3302, 1130, 913,
	3220, 2572, 2516, 1060, 2514, 1062, 2513, 2511, 1567, 1809,
	646, 1529, 1022, 927, 1533, 923, 1056, 1057, 670, 194,
	636, 2229, 998, 894, 1338, 892, 1057, 1025, 193, 61,
	184, 156, 1024, 2234, 1057, 3040, 1426, 1044, 2238, 1341,
	1580, 3023, 3020, 3025, 3022, 3895, 185, 1439, 1129, 1055,
	1803, 8, 1334, 177, 1531, 7, 3419, 186, 2922, 642,
	2920, 1579, 2644, 2642, 1207, 1208, 1209, 1206, 2058, 3686,
	3582, 904, 1207, 1208, 1209, 1206, 130, 1023, 3576, 3422,
	3226, 2102, 132, 3702, 1269, 2083, 873, 3000, 2075, 2364,
	193, 118, 1169, 884, 2558, 193, 2123, 132, 189, 132,
	3463, 3316, 3467, 2278, 2646, 3642, 1566, 1347, 1038, 1033,
	1028, 1032, 1036, 2566, 193, 193, 193, 193, 61, 184,
	156, 3608, 893, 3755, 891, 1820, 1496, 193, 61, 184,
	156, 193, 61, 184, 156, 1346, 1041, 3801, 130, 193,
	1031, 193, 929, 2277, 922, 193, 61, 184, 156, 3643,
	1020, 1817, 1021, 926, 925, 1344, 894, 892, 1026, 1575,
	189, 2714, 2945, 2934, 130, 189, 993, 991, 1348, 992,
	907, 2998, 2134, 1377, 914, 138, 139, 1435, 140, 141,
	1436, 1145, 193, 1360, 189, 189, 189, 189, 2271, 1572,
	1629, 1039, 677, 1633, 921, 1597, 1177, 189, 1042, 1179,
	1586, 189, 885, 193, 61, 184, 156, 2857, 1811, 2712,
	3610, 1574, 2448, 931, 1204, 189, 2449, 1632, 920, 2892,
	1029, 1609, 919, 3024, 3021, 2668, 1987, 1180, 906, 889,
	1583, 863, 912, 862, 864, 865, 2436, 866, 867, 2435,
	2020, 1459, 2437, 1461, 1040, 2529, 155, 183, 191, 987,
	116, 1892, 1585, 1197, 910, 999, 2893, 2894, 1645, 2715,
	1202, 2669, 1988, 1989, 1822, 1823, 1438, 1142, 182, 176,
	175, 1184, 3127, 189, 1185, 67, 1413, 995, 1019, 3125,
	2681, 1421, 1423, 1424, 1030, 1420, 1423, 1424, 3830, 3831,
	2682, 3705, 930, 3443, 1018, 3704, 3798, 3705, 3788, 1532,
	1530, 1634, 1187, 3704, 3787, 3703, 3786, 1173, 3703, 2218,
	2647, 3851, 1150, 3794, 2928, 1359, 2929, 3777, 911, 641,
	641, 3715, 3229, 3888, 3889, 1631, 3777, 3780, 3579, 1568,
	641, 1138, 3689, 1175, 2927, 3229, 178, 179, 180, 2680,
	2553, 997, 1150, 1139, 2138, 1178, 1181, 3242, 2799, 667,
	667, 2004, 641, 3075, 1137, 3692, 3693, 3694, 3695, 1994,
	3288, 1037, 1624, 155, 1618, 191, 3077, 187, 1649, 2130,
	3472, 1174, 3295, 2398, 3067, 2265, 2963, 3803, 3804, 2066,
	1189, 930, 1182, 1190, 1067, 182, 1539, 1538, 126, 2671,
	3799, 3800, 181, 1392, 127, 928, 3796, 1034, 2687, 3373,
	1035, 2961, 2670, 3612, 3613, 1200, 1201, 1199, 2563, 3072,
	3073, 1192, 181, 2362, 1172, 1247, 1210, 3594, 996, 3595,
	3420, 2921, 2849, 2645, 1240, 3074, 2135, 2401, 2402, 1437,
	2400, 3442, 3617, 1250, 917, 1337, 3469, 664, 664, 3444,
	2270, 2664, 1630, 3829, 3071, 3789, 1183, 3708, 1176, 3600,
	3271, 128, 3388, 3619, 3245, 2967, 1131, 2651, 1258, 719,
	2406, 1138, 1164, 2113, 60, 1195, 1196, 1998, 1361, 1130,
	1130, 1194, 1449, 3597, 1411, 1130, 2124, 2665, 2124, 1022,
	2124, 633, 2342, 3155, 1279, 1648, 1647, 3129, 2322, 2345,
	3859, 1188, 2018, 2019, 1025, 2944, 2235, 1278, 3092, 1024,
	1045, 1027, 1581, 3104, 3596, 3153, 3154, 2941, 1152, 1151,
	3737, 2157, 3385, 62, 2125, 3647, 1057, 2721, 1057, 3639,
	1057, 713, 1057, 1186, 715, 3732, 887, 1057, 669, 714,
	1193, 1130, 1057, 2855, 905, 903, 1144, 668, 1152, 1151,
	665, 2137, 132, 132, 1023, 2273, 2344, 3641, 136, 190,
	665, 137, 1022, 719, 665, 1191, 157, 994, 3069, 663,
	663, 58, 888, 659, 659, 2512, 3378, 1025, 3031, 1340,
	1153, 1342, 1024, 1534, 3723, 3333, 661, 661, 3739, 662,
	662, 660, 660, 1141, 1143, 3802, 3745, 1357, 635, 2343,
	1655, 1658, 1659, 2700, 2703, 2704, 2705, 2701, 2702, 1133,
	3124, 1656, 62, 1317, 873, 2753, 1322, 3340, 1132, 2250,
	1021, 3280, 62, 1161, 1157, 1158, 62, 1239, 157, 2329,
	2643, 942, 3468, 157, 1400, 3389, 665, 129, 45, 1248,
	932, 1163, 933, 2567, 59, 1126, 3158, 3611, 5, 2141,
	2143, 2144, 157, 157, 157, 157, 3607, 133, 134, 1423,
	1424, 135, 3278, 3714, 1818, 157, 1423, 1424, 3044, 157,
	1243, 1244, 1245, 1246, 2396, 1619, 190, 157, 1620, 157,
	3538, 3921, 3648, 157, 641, 2374, 3640, 1451, 3078, 3279,
	2451, 2828, 1812, 617, 617, 3068, 2005, 1419, 62, 2964,
	2373, 3433, 617, 617, 1155, 3533, 1483, 1483, 1412, 641,
	2693, 2749, 2750, 890, 2753, 2394, 2395, 3527, 2686, 1468,
	157, 1467, 1162, 3130, 988, 1398, 3614, 3906, 1415, 1414,
	667, 1511, 635, 1397, 3795, 3590, 1396, 1522, 1522, 3699,
	2800, 157, 2801, 2802, 1481, 1481, 3661, 3473, 210, 3746,
	3627, 1521, 1521, 3133, 1290, 1291, 1125, 617, 1238, 3019,
	1995, 1485, 1490, 1625, 2365, 3318, 2328, 3070, 3090, 3818,
	2339, 2330, 2322, 1324, 3417, 2690, 2691, 2888, 2890, 3232,
	1353, 677, 3594, 3774, 3595, 1456, 3707, 1354, 1355, 3452,
	2689, 1169, 1358, 1364, 1365, 1366, 1367, 1368, 3149, 1370,
	3589, 3035, 2559, 2440, 1450, 1376, 2360, 990, 1564, 2127,
	989, 1369, 2656, 1569, 3153, 3154, 2966, 2332, 1540, 1814,
	1578, 1391, 1375, 3281, 1374, 2331, 1362, 1373, 1399, 1323,
	1477, 1478, 1372, 2904, 2905, 1409, 1321, 3157, 3597, 671,
	3540, 1657, 3150, 1428, 1429, 1607, 1431, 1432, 2797, 1433,
	3548, 3549, 3550, 3554, 3552, 3553, 3551, 3268, 934, 1483,
	1382, 1483, 1138, 2153, 2661, 3907, 2139, 2140, 1997, 3596,
	1363, 1826, 1463, 1465, 1587, 3660, 2243, 1168, 1351, 2975,
	2974, 1475, 1476, 2819, 2820, 1644, 1825, 1407, 1408, 3453,
	2142, 1602, 1603, 931, 936, 937, 938, 3091, 1384, 2245,
	2244, 3037, 2249, 1824, 1349, 1350, 2242, 1810, 895, 2386,
	1650, 1651, 1652, 1653, 1654, 896, 3501, 1573, 2187, 1492,
	3917, 2186, 2420, 647, 1584, 1427, 1512, 1393, 1430, 1483,
	988, 1554, 1555, 1440, 1441, 3922, 1535, 664, 3534, 3535,
	2829, 2831, 2832, 2833, 2830, 2889, 1703, 3817, 2333, 1617,
	1577, 3912, 1695, 988, 1466, 132, 1699, 1700, 1701, 1702,
	1752, 1562, 3901, 1393, 899, 1736, 3529, 1691, 1559, 3784,
	3528, 1563, 1025, 1746, 2359, 1491, 3109, 2268, 2338, 1025,
	646, 1205, 2336, 1606, 3190, 1543, 1169, 1546, 1547, 2531,
	1503, 1605, 1523, 2132, 1205, 1509, 3904, 3905, 1548, 1549,
	1641, 2726, 1402, 1406, 1406, 1406, 3186, 2818, 3233, 1524,
	2046, 3866, 3838, 990, 3832, 898, 989, 2329, 2332, 901,
	900, 1627, 132, 3284, 3913, 1798, 1138, 1402, 1402, 132,
	1135, 3244, 1813, 2223, 2657, 3867, 990, 2558, 1622, 989,
	3162, 1815, 132, 1000, 3151, 1829, 1830, 1660, 2421, 1805,
	1511, 1794, 2727, 1737, 132, 1838, 1483, 1843, 1844, 663,
	1846, 1451, 641, 659, 3814, 1595, 2421, 641, 1598, 1241,
	1483, 1615, 1590, 3160, 942, 1612, 661, 1866, 3029, 662,
	1626, 660, 1135, 1596, 3867, 3839, 1483, 3623, 1611, 3027,
	3590, 2421, 1451, 2267, 3591, 2907, 2302, 658, 1871, 3765,
	3740, 1797, 3190, 1616, 1665, 1666, 1667, 1668, 1669, 1670,
	1671, 1672, 1673, 1674, 1675, 1676, 1638, 1891, 1635, 1640,
	1688, 1689, 1614, 1887, 1613, 1610, 1898, 1898, 2673, 1451,
	1751, 1451, 1451, 1166, 1679, 641, 641, 3815, 1965, 1838,
	1969, 2727, 2257, 1483, 1972, 1973, 1985, 3728, 3680, 2333,
	2044, 1048, 1053, 1054, 2328, 2322, 2327, 1167, 2325, 2330,
	617, 1169, 1483, 3679, 1845, 2258, 2259, 3674, 1761, 3673,
	2317, 2166, 3623, 2132, 1686, 1687, 1205, 1798, 1847, 1895,
	3672, 3671, 1798, 1798, 1207, 1208, 1209, 1206, 2648, 641,
	1838, 1483, 2548, 2029, 2536, 641, 641, 641, 675, 675,
	2451, 1207, 1208, 1209, 1206, 2039, 2040, 2041, 2042, 1800,
	1167, 3651, 2048, 2331, 1920, 877, 878, 879, 880, 210,
	3729, 3681, 210, 210, 2021, 210, 2123, 3650, 1318, 1967,
	2301, 1986, 2056, 2315, 1766, 2059, 2291, 2228, 2062, 3622,
	3623, 2064, 3623, 1834, 1835, 1836, 1901, 2165, 1207, 1208,
	1209, 1206, 3394, 3623, 3623, 1849, 1850, 1851, 1852, 2222,
	1801, 1795, 2221, 2194, 1999, 1752, 1752, 2091, 3342, 1207,
	1208, 1209, 1206, 1875, 1876, 3308, 1752, 1752, 1734, 1735,
	1991, 1738, 1993, 2107, 2132, 2114, 2013, 2014, 2016, 1753,
	1885, 1886, 2011, 2012, 2996, 1383, 2106, 2028, 3260, 1899,
	2132, 2006, 1760, 3256, 1762, 1833, 1763, 1764, 1765, 1694,
	1896, 3170, 3623, 1842, 1866, 2163, 1863, 1862, 1483, 2121,
	1900, 2101, 2031, 2032, 2033, 2451, 1469, 1858, 2883, 1869,
	1870, 1867, 2057, 2623, 2093, 2060, 2061, 1880, 2063, 2615,
	1884, 3343, 2574, 1872, 1050, 1051, 1052, 3294, 3309, 1874,
	2556, 1394, 1889, 1984, 3929, 2544, 877, 878, 879, 880,
	3914, 1902, 1903, 3329, 882, 1879, 2538, 1881, 1882, 2911,
	1573, 3261, 2533, 2115, 2729, 1222, 3257, 2525, 2097, 2561,
	1971, 1888, 1974, 2523, 3171, 2521, 2519, 2560, 2552, 1966,
	2290, 2224, 664, 2201, 2200, 2000, 1990, 2185, 1992, 2156,
	1842, 2421, 2309, 2161, 2176, 897, 1205, 1022, 2182, 2167,
	2112, 3564, 1205, 2329, 2332, 1205, 2051, 2037, 1022, 1592,
	2027, 1255, 1025, 2291, 1154, 1025, 132, 1024, 2534, 132,
	132, 2175, 132, 1025, 1494, 2086, 2034, 2035, 1024, 2539,
	2026, 2023, 2054, 1402, 2173, 2534, 2086, 2052, 1638, 3114,
	2526, 2174, 2180, 1122, 1117, 3392, 2524, 1406, 2520, 2520,
	2071, 2958, 2131, 2291, 2223, 1471, 1205, 1205, 1238, 1406,
	1205, 1599, 1023, 2015, 2197, 132, 1434, 1205, 2103, 2202,
	2203, 2204, 2098, 1023, 2207, 2208, 2209, 2210, 2211, 2212,
	2213, 2214, 2215, 2216, 2100, 1741, 1740, 132, 1741, 1740,
	1403, 2233, 2092, 2236, 1205, 882, 2239, 2111, 1389, 3105,
	3923, 3892, 1390, 1022, 663, 2357, 3710, 3621, 659, 3586,
	2109, 2116, 718, 3733, 1205, 641, 641, 641, 1025, 3502,
	3321, 661, 3319, 1024, 662, 2132, 660, 3218, 2110, 3531,
	641, 641, 641, 641, 1600, 2333, 3530, 902, 3516, 2511,
	2328, 2322, 2327, 2288, 2325, 2330, 1225, 1226, 1227, 1228,
	1229, 1222, 3474, 2145, 2294, 1451, 1470, 3734, 2150, 2151,
	3301, 3191, 3182, 3503, 3322, 2147, 3320, 1389, 1239, 1473,
	3176, 1390, 1685, 1679, 3172, 3085, 2852, 3106, 2159, 2851,
	1474, 1451, 1207, 1208, 1209, 1206, 2592, 2154, 1682, 1684,
	1681, 2698, 1683, 3221, 1742, 1743, 1744, 1778, 2351, 2331,
	1771, 2653, 2571, 2055, 2537, 2442, 2096, 1758, 1404, 2095,
	1759, 2094, 2148, 2149, 1116, 1112, 1113, 1114, 1115, 1379,
	2597, 3107, 2596, 2595, 2593, 1378, 1140, 1772, 1773, 1230,
	1231, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1222, 2306,
	752, 762, 2581, 2308, 2505, 2310, 1793, 1698, 2913, 2358,
	753, 1828, 754, 758, 761, 757, 755, 756, 1698, 3785,
	2160, 2425, 2425, 1985, 2425, 3543, 2217, 2219, 2220, 1223,
	1224, 1225, 1226, 1227, 1228, 1229, 1222, 1206, 1527, 2225,
	2055, 3522, 617, 617, 1209, 1206, 1798, 3655, 1798, 2594,
	1138, 1207, 1208, 1209, 1206, 3542, 1483, 641, 2311, 2930,
	2789, 2787, 2515, 2765, 2763, 759, 1798, 1798, 2321, 3475,
	3476, 641, 3897, 1279, 2251, 1257, 2320, 1138, 2495, 635,
	1756, 2636, 2269, 2637, 3920, 1522, 1278, 1985, 1256, 3896,
	2500, 3842, 2502, 3813, 2446, 1757, 210, 760, 3470, 1521,
	2459, 1221, 1220, 1230, 1231, 1223, 1224, 1225, 1226, 1227,
	1228, 1229, 1222, 2363, 2303, 3812, 2366, 2367, 2368, 2369,
	2370, 2371, 2372, 3735, 1983, 2375, 2376, 2377, 2378, 2379,
	2380, 2381, 2382, 2383, 2384, 2385, 2541, 2387, 2388, 2389,
	2390, 2391, 1868, 2392, 2427, 2295, 2431, 3919, 2429, 2540,
	2438, 2543, 2439, 2554, 2667, 2314, 3471, 2121, 2334, 2335,
	3676, 2340, 3292, 1883, 1483, 1022, 1483, 3664, 1483, 3654,
	2443, 2444, 3644, 1138, 2840, 2307, 3577, 3505, 3504, 1890,
	1025, 2573, 1893, 1894, 3334, 1024, 640, 640, 2598, 2599,
	3323, 2977, 648, 3291, 2298, 3076, 2568, 2954, 2453, 2304,
	2925, 2924, 2305, 2823, 2564, 2838, 2822, 1483, 2601, 2506,
	2403, 2821, 2499, 2836, 2825, 2582, 2813, 2807, 2588, 2806,
	3293, 1463, 1465, 2608, 2805, 2602, 2603, 2433, 1483, 2804,
	2428, 2649, 2839, 2605, 2606, 1213, 1214, 1215, 1216, 1217,
	1218, 1219, 1211, 3300, 2527, 1481, 2227, 2074, 2447, 2611,
	2073, 1207, 1208, 1209, 1206, 1207, 1208, 1209, 1206, 2450,
	3219, 2600, 2072, 2837, 2583, 2068, 1481, 1207, 1208, 1209,
	1206, 2835, 2824, 2496, 2067, 2654, 2655, 1650, 1798, 2658,
	2498, 2022, 2609, 1821, 2989, 1819, 1593, 2612, 2613, 1336,
	2697, 2585, 1406, 2585, 1984, 3916, 3184, 1138, 3061, 713,
	3915, 1138, 715, 132, 2589, 3615, 3616, 714, 1483, 1120,
	3427, 2694, 2695, 1207, 1208, 1209, 1206, 3890, 1969, 2570,
	2674, 3858, 2507, 3857, 2459, 3854, 2725, 3792, 2565, 3791,
	3604, 3772, 2731, 1207, 1208, 1209, 1206, 3717, 2164, 2546,
	2579, 2607, 1528, 2555, 2988, 648, 2557, 3479, 3696, 3752,
	2741, 2562, 2550, 2551, 2640, 3687, 2735, 2736, 3668, 3663,
	1138, 1207, 1208, 1209, 1206, 3662, 1119, 3618, 2762, 1527,
	2146, 1207, 1208, 1209, 1206, 1138, 1138, 1138, 1898, 3606,
	3605, 1138, 3578, 2773, 2774, 2775, 2776, 1138, 2783, 3524,
	2784, 2785, 3764, 2786, 2709, 2788, 2591, 3486, 3456, 2768,
	2769, 3454, 3450, 3447, 2772, 3446, 2783, 2710, 2575, 2576,
	2779, 3425, 3423, 2722, 1207, 1208, 1209, 1206, 2425, 3402,
	2178, 1638, 2713, 2610, 3401, 3398, 1207, 1208, 1209, 1206,
	3396, 2845, 2841, 1920, 3290, 1207, 1208, 1209, 1206, 2732,
	3289, 617, 2743, 2578, 3286, 3276, 3269, 1969, 1138, 1985,
	1985, 1985, 1985, 2683, 3253, 3251, 3179, 2195, 2196, 3178,
	2198, 1138, 1985, 3173, 3168, 2425, 3167, 2205, 3086, 3048,
	3047, 2865, 3043, 3041, 2760, 2170, 3039, 1025, 2760, 2162,
	3036, 1483, 2846, 3034, 2865, 2675, 2232, 2177, 2756, 2968,
	2965, 2692, 641, 641, 2923, 3823, 2897, 2834, 2716, 2618,
	2619, 2826, 2816, 2767, 2730, 2624, 8, 2814, 2724, 2810,
	7, 2676, 3721, 2678, 1207, 1208, 1209, 1206, 2809, 2808,
	2662, 2733, 1207, 1208, 1209, 1206, 2660, 132, 2742, 2745,
	2738, 2739, 2650, 2758, 819, 818, 3748, 132, 2764, 1207,
	1208, 1209, 1206, 2879, 2547, 2246, 2795, 2796, 210, 2241,
	2771, 2240, 2237, 210, 3448, 1207, 1208, 1209, 1206, 2761,
	2077, 2811, 2812, 2070, 1827, 1842, 2917, 3436, 2919, 1207,
	1208, 1209, 1206, 2803, 2815, 1752, 1808, 1752, 3435, 1807,
	2940, 1207, 1208, 1209, 1206, 1594, 2848, 1798, 2908, 3513,
	1497, 1387, 1798, 2953, 1207, 1208, 1209, 1206, 3382, 1483,
	1345, 1343, 2960, 2106, 2847, 1207, 1208, 1209, 1206, 2853,
	1286, 1282, 2866, 2867, 2868, 2869, 1281, 2740, 1123, 2878,
	2850, 2882, 886, 2880, 3599, 1207, 1208, 1209, 1206, 2296,
	2297, 1207, 1208, 1209, 1206, 3598, 3587, 2898, 2971, 2299,
	2300, 2895, 3449, 1221, 1220, 1230, 1231, 1223, 1224, 1225,
	1226, 1227, 1228, 1229, 1222, 3248, 1984, 1984, 1984, 1984,
	3434, 2914, 2993, 1797, 1554, 1555, 2918, 3314, 2939, 1984,
	3313, 193, 2881, 184, 156, 3312, 2935, 3283, 3265, 3263,
	2937, 3262, 1207, 1208, 1209, 1206, 2992, 2946, 3259, 1562,
	2947, 2982, 3258, 2984, 3252, 3250, 1559, 2912, 3038, 1563,
	3234, 2916, 2915, 1739, 2962, 2957, 3042, 3224, 3223, 3209,
	3045, 3046, 3208, 1207, 1208, 1209, 1206, 2931, 1138, 2991,
	3115, 3051, 1547, 2933, 3064, 3026, 2938, 2994, 2987, 2950,
	2948, 1025, 1548, 1549, 3080, 2979, 2949, 2978, 2956, 2972,
	641, 189, 1025, 2906, 2672, 2936, 1207, 1208, 1209, 1206,
	2522, 2518, 3095, 1138, 2969, 132, 641, 2990, 1138, 1138,
	132, 2517, 2970, 640, 1127, 2206, 2976, 1985, 2288, 2199,
	3113, 2193, 2192, 2191, 1136, 2190, 2188, 2985, 2986, 2184,
	2183, 132, 2181, 2983, 1207, 1208, 1209, 1206, 2351, 2172,
	3028, 2169, 132, 2168, 2076, 1791, 1160, 2497, 3089, 1790,
	3139, 2891, 3142, 3050, 3142, 3142, 2504, 1789, 1755, 1138,
	1220, 1230, 1231, 1223, 1224, 1225, 1226, 1227, 1228, 1229,
	1222, 3146, 1754, 1745, 193, 2709, 1495, 3032, 3163, 1493,
	3033, 2634, 2755, 3841, 1276, 3747, 1483, 1483, 2633, 3159,
	3682, 3670, 3665, 3117, 1542, 3558, 3541, 3537, 3126, 3128,
	3049, 3161, 3515, 2980, 2981, 3499, 3410, 3098, 1207, 1208,
	1209, 1206, 3102, 3408, 3380, 1207, 1208, 1209, 1206, 3081,
	3082, 3379, 3376, 3375, 1481, 1481, 3097, 3341, 3762, 2632,
	3088, 3100, 3101, 641, 3338, 3336, 3137, 3122, 3303, 3064,
	3164, 3165, 3111, 1553, 189, 1022, 3138, 3108, 1451, 3112,
	1544, 1969, 1969, 2321, 3121, 3147, 1207, 1208, 1209, 1206,
	1025, 2320, 1025, 3001, 3002, 1024, 2631, 1025, 1558, 3003,
	3004, 3005, 3006, 1561, 3007, 3008, 3009, 3010, 3011, 3012,
	3013, 3014, 3015, 3016, 3143, 3144, 1550, 3148, 1386, 2842,
	2766, 2718, 1025, 1207, 1208, 1209, 1206, 2717, 1138, 2711,
	2677, 2635, 2601, 2532, 2441, 2393, 2289, 2260, 2226, 1680,
	1023, 3222, 132, 189, 2036, 1832, 3120, 132, 3511, 1804,
	1623, 2459, 2630, 1576, 1984, 1221, 1220, 1230, 1231, 1223,
	1224, 1225, 1226, 1227, 1228, 1229, 1222, 1551, 1335, 1320,
	1316, 1315, 132, 1314, 2189, 1313, 676, 1312, 3145, 1207,
	1208, 1209, 1206, 1311, 3175, 1310, 3180, 641, 3174, 3181,
	3169, 2995, 3187, 3188, 1309, 3185, 1308, 3177, 2629, 3198,
	1307, 1306, 1221, 1220, 1230, 1231, 1223, 1224, 1225, 1226,
	1227, 1228, 1229, 1222, 2628, 3202, 1305, 3205, 3206, 3207,
	1304, 1303, 1302, 1301, 3247, 1207, 1208, 1209, 1206, 1300,
	1299, 3249, 2734, 1298, 1297, 3211, 2627, 2737, 1296, 3217,
	1295, 1207, 1208, 1209, 1206, 1221, 1220, 1230, 1231, 1223,
	1224, 1225, 1226, 1227, 1228, 1229, 1222, 2048, 3273, 3235,
	1294, 3275, 3264, 1207, 1208, 1209, 1206, 1293, 1292, 1289,
	3236, 3760, 2626, 3237, 1288, 1287, 3241, 2625, 1285, 1284,
	1283, 3240, 1280, 1273, 1272, 1270, 2585, 2622, 1269, 3254,
	3200, 2621, 1268, 1267, 1266, 1265, 1264, 3246, 1446, 1207,
	1208, 1209, 1206, 1263, 1207, 1208, 1209, 1206, 2577, 1262,
	3277, 1261, 1260, 3307, 1207, 1208, 1209, 1206, 1207, 1208,
	1209, 1206, 1259, 1489, 1254, 1253, 1252, 1251, 1171, 2425,
	1985, 3326, 1221, 1220, 1230, 1231, 1223, 1224, 1225, 1226,
	1227, 1228, 1229, 1222, 2620, 1121, 3194, 3195, 3270, 2614,
	3272, 3266, 3758, 3377, 3344, 2293, 3872, 1138, 2412, 2416,
	2417, 2418, 2413, 2275, 2414, 2419, 3139, 1159, 2415, 2604,
	1138, 1207, 1208, 1209, 1206, 3282, 1207, 1208, 1209, 1206,
	3345, 1138, 3285, 3391, 3870, 3828, 3197, 1483, 2699, 2155,
	2452, 2079, 1170, 3384, 3297, 3298, 1207, 1208, 1209, 1206,
	2875, 117, 3199, 2872, 2779, 2876, 2871, 1969, 3328, 2870,
	3520, 1138, 1798, 1221, 1220, 1230, 1231, 1223, 1224, 1225,
	1226, 1227, 1228, 1229, 1222, 1481, 1798, 64, 2545, 3407,
	1025, 2873, 3409, 3374, 2865, 3367, 2874, 1025, 63, 2535,
	210, 3393, 3331, 2877, 1380, 2417, 2418, 1860, 1861, 3415,
	3084, 3324, 3135, 1138, 3136, 3325, 2952, 3304, 3305, 3306,
	3412, 3404, 3381, 3310, 3311, 3386, 3383, 643, 3413, 3414,
	2580, 2361, 3390, 1855, 1856, 1857, 2865, 3238, 3239, 3395,
	132, 1693, 3397, 3387, 3212, 1957, 3400, 132, 1536, 2247,
	2530, 2569, 3451, 644, 3405, 1589, 3403, 1207, 1208, 1209,
	1206, 3459, 3406, 1570, 645, 1138, 2791, 2038, 1207, 1208,
	1209, 1206, 3432, 2792, 2793, 2794, 3399, 3411, 2550, 2551,
	1165, 3059, 3052, 1725, 1138, 1483, 1483, 2744, 2719, 2313,
	3095, 2284, 1864, 1831, 3881, 3428, 3667, 1984, 3166, 3335,
	3494, 3337, 3494, 3429, 3457, 3458, 2404, 3482, 1198, 1741,
	1740, 1331, 1332, 3418, 1329, 1330, 2399, 1138, 3509, 1138,
	1327, 1328, 1970, 1481, 1691, 1325, 1326, 3488, 3489, 3512,
	1443, 3514, 1442, 3204, 2900, 2248, 1483, 2108, 1395, 3484,
	1644, 1371, 1644, 1418, 3464, 3466, 3465, 3848, 3846, 3806,
	3461, 3782, 3485, 3781, 641, 3779, 1138, 1138, 3724, 3683,
	1138, 1138, 3498, 3572, 3571, 3510, 3424, 3255, 3487, 3231,
	3497, 3230, 2093, 3508, 1691, 3215, 2346, 2316, 1591, 3482,
	3482, 3328, 3214, 3482, 3482, 3560, 2910, 3555, 1393, 1866,
	3274, 3569, 2955, 3545, 3546, 3491, 3518, 3556, 3557, 3521,
	3573, 3574, 3525, 3374, 2659, 3367, 2277, 132, 3874, 3873,
	1135, 2171, 1339, 1483, 1221, 1220, 1230, 1231, 1223, 1224,
	1225, 1226, 1227, 1228, 1229, 1222, 1156, 3116, 3566, 3873,
	3874, 3539, 3118, 3119, 3601, 3210, 1848, 197, 3, 1410,
	72, 1853, 3593, 2, 3893, 3565, 1721, 3894, 3567, 1,
	1025, 1481, 2641, 1718, 1802, 1333, 881, 1720, 1717, 1719,
	1723, 1724, 876, 1460, 2434, 1722, 3580, 3585, 2017, 1487,
	3584, 877, 878, 879, 880, 3588, 1135, 1806, 3625, 3592,
	3636, 3630, 883, 2884, 2885, 3203, 2887, 2663, 2128, 3437,
	2854, 3438, 2397, 2264, 3079, 1381, 1138, 935, 1747, 1604,
	132, 1047, 1149, 1601, 1148, 1146, 1696, 3659, 3653, 1904,
	1905, 2407, 766, 2082, 2843, 3517, 3562, 2817, 3624, 1644,
	3563, 3568, 3880, 3909, 3631, 3523, 3432, 3840, 3883, 3633,
	3632, 1621, 750, 3773, 3688, 3844, 3690, 3583, 3645, 1138,
	3649, 2133, 1203, 2932, 1483, 960, 807, 777, 2412, 2416,
	2417, 2418, 2413, 1271, 2414, 2419, 1582, 3189, 2415, 3561,
	2999, 2997, 3482, 2025, 1049, 776, 3296, 3666, 2688, 2025,
	2025, 2025, 2903, 3201, 3638, 3628, 3675, 1046, 961, 2065,
	3685, 3706, 1481, 3581, 1537, 1541, 2312, 3646, 3743, 3713,
	3701, 3519, 1258, 3131, 2752, 1565, 3738, 3339, 3677, 3441,
	3439, 3440, 683, 1996, 1138, 3684, 615, 1007, 3559, 1728,
	1729, 1730, 1731, 1732, 1733, 1726, 1727, 3725, 2078, 684,
	2292, 3797, 3669, 915, 2274, 916, 908, 3482, 2707, 2706,
	1025, 1661, 1212, 3711, 1678, 3017, 3720, 3018, 1249, 722,
	2158, 2685, 3716, 3362, 2896, 3742, 3719, 71, 70, 69,
	68, 1138, 218, 768, 3727, 217, 3602, 3477, 3769, 1483,
	3749, 3885, 3767, 3770, 748, 3757, 3759, 3761, 3763, 3736,
	747, 746, 745, 744, 3482, 743, 2411, 3741, 2409, 3771,
	132, 3750, 2408, 1980, 1979, 2045, 3093, 2782, 3756, 2777,
	1909, 1907, 3678, 2770, 2341, 2348, 1906, 1481, 3825, 3753,
	3754, 3536, 2827, 3431, 3778, 3776, 1854, 1483, 2337, 1926,
	3636, 2798, 1923, 3766, 1922, 2790, 3532, 3526, 1954, 3634,
	3493, 3346, 3790, 3347, 3353, 2283, 3816, 1072, 1068, 1070,
	1071, 1069, 3824, 3805, 2590, 3807, 2318, 3054, 2256, 3809,
	2255, 2253, 3821, 2252, 1356, 1481, 3712, 3810, 3811, 3793,
	3460, 2457, 2455, 1118, 3196, 3192, 2090, 2104, 2951, 3726,
	1981, 3808, 1977, 2856, 3730, 3731, 3609, 3833, 1859, 3834,
	3853, 3835, 3837, 3836, 909, 3847, 2272, 3849, 3850, 41,
	115, 105, 3845, 3843, 173, 56, 3701, 1138, 172, 55,
	3852, 113, 170, 54, 100, 3751, 99, 112, 168, 53,
	202, 201, 204, 203, 3659, 3327, 200, 3862, 2508, 2509,
	3860, 199, 1525, 3821, 3330, 3864, 3865, 3863, 198, 3871,
	3879, 3783, 3887, 3869, 3496, 3886, 3868, 3875, 3876, 3877,
	3878, 871, 44, 43, 174, 42, 106, 57, 40, 39,
	3898, 38, 1138, 34, 3891, 3416, 13, 12, 1233, 35,
	1237, 22, 3742, 3900, 3899, 21, 3902, 1608, 20, 26,
	32, 31, 3821, 3911, 3908, 1644, 1234, 1236, 1232, 125,
	1235, 1221, 1220, 1230, 1231, 1223, 1224, 1225, 1226, 1227,
	1228, 1229, 1222, 124, 30, 3445, 3918, 123, 122, 121,
	120, 119, 29, 19, 3887, 3925, 48, 3886, 3924, 2261,
	2262, 2263, 47, 46, 3911, 3926, 9, 111, 109, 28,
	3930, 110, 107, 103, 2279, 2280, 2281, 2282, 3928, 101,
	83, 82, 948, 81, 96, 95, 3855, 3856, 1444, 1445,
	94, 1447, 1448, 93, 1452, 1453, 1454, 1767, 1768, 1769,
	1770, 92, 91, 1774, 1775, 1776, 1777, 1779, 1780, 1781,
	1782, 1783, 1784, 1785, 1786, 1787, 1788, 89, 193, 61,
	184, 156, 90, 3351, 959, 1498, 1499, 1500, 1501, 1502,
	80, 1504, 1505, 1506, 1507, 1508, 185, 79, 78, 1514,
	1515, 1516, 1517, 177, 77, 76, 98, 186, 104, 102,
	87, 97, 945, 946, 88, 86, 85, 84, 75, 74,
	73, 154, 3363, 988, 153, 152, 130, 151, 150, 148,
	149, 147, 146, 145, 144, 3354, 143, 142, 3506, 3507,
	49, 118, 50, 51, 52, 164, 3349, 163, 189, 165,
	167, 3371, 3372, 169, 166, 171, 161, 3350, 159, 162,
	160, 158, 66, 11, 114, 18, 25, 4, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3355, 0, 0, 0, 0, 0,
	0, 1489, 0, 0, 0, 0, 990, 0, 0, 989,
	0, 0, 0, 0, 0, 2025, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 138, 139, 0, 140, 141,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 974, 0, 0, 0,
	0, 0, 0, 0, 949, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 951, 0, 0, 0, 0, 0, 0, 3370, 0,
	2327, 0, 0, 0, 0, 0, 155, 183, 191, 0,
	116, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3359, 0, 0, 182, 176,
	175, 0, 0, 0, 0, 67, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3356, 3360, 3358,
	3357, 0, 0, 0, 973, 971, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 695, 694, 701, 691, 0,
	0, 0, 0, 0, 0, 0, 970, 698, 699, 0,
	700, 704, 0, 0, 685, 3365, 3366, 0, 944, 0,
	0, 0, 0, 0, 709, 0, 178, 179, 180, 950,
	983, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 979, 0, 0, 0, 187, 0, 0,
	0, 0, 0, 3373, 0, 0, 0, 0, 713, 0,
	0, 715, 0, 0, 0, 3352, 714, 0, 126, 0,
	0, 3364, 181, 0, 127, 0, 0, 0, 0, 980,
	984, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 967,
	2723, 965, 969, 987, 0, 0, 0, 966, 963, 962,
	0, 968, 953, 954, 952, 955, 956, 957, 958, 0,
	985, 0, 986, 0, 0, 0, 0, 695, 694, 701,
	691, 128, 0, 981, 982, 1725, 0, 0, 0, 698,
	699, 0, 700, 704, 60, 0, 685, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 709, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	977, 0, 0, 0, 0, 0, 976, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2030, 972, 0, 62, 0, 0, 0, 0, 0, 0,
	0, 3369, 0, 686, 688, 687, 0, 0, 0, 0,
	0, 0, 0, 693, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 697, 0, 0, 136, 190,
	0, 137, 712, 0, 0, 0, 157, 0, 0, 690,
	0, 58, 0, 680, 0, 0, 0, 0, 1090, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2901, 2902, 0, 975,
	0, 0, 0, 0, 0, 947, 943, 3368, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1721, 0,
	0, 0, 0, 0, 0, 1718, 0, 129, 45, 1720,
	1717, 1719, 1723, 1724, 59, 0, 0, 1722, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 133, 134, 0,
	0, 135, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 686, 688, 687, 0, 692,
	696, 702, 0, 703, 705, 693, 0, 706, 707, 708,
	0, 0, 710, 711, 0, 0, 0, 697, 0, 0,
	1076, 0, 0, 0, 712, 0, 0, 0, 0, 0,
	0, 690, 0, 0, 0, 0, 0, 0, 0, 0,
	1098, 1102, 1104, 1106, 1108, 1109, 1111, 0, 1116, 1112,
	1113, 1114, 1115, 0, 1093, 1094, 1095, 1096, 1074, 1075,
	1099, 0, 1077, 0, 1078, 1079, 1080, 1081, 1082, 1083,
	1084, 1085, 1086, 1089, 1091, 1087, 1088, 1097, 0, 0,
	0, 0, 0, 0, 0, 1101, 1103, 1105, 1107, 1110,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715,
	1716, 1728, 1729, 1730, 1731, 1732, 1733, 1726, 1727, 0,
	0, 0, 0, 1092, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 692, 696, 702, 0, 703, 705, 0, 0, 706,
	707, 708, 0, 0, 710, 711, 0, 0, 0, 0,
	0, 0, 0, 0, 3087, 0, 0, 0, 689, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3099, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 784, 0, 0, 0, 0, 0, 0, 0,
	0, 383, 0, 507, 540, 529, 613, 495, 0, 0,
	0, 0, 0, 0, 737, 0, 0, 0, 323, 0,
	0, 353, 544, 526, 536, 527, 512, 513, 514, 521,
	333, 515, 516, 517, 487, 518, 488, 519, 520, 775,
	543, 494, 412, 367, 561, 560, 0, 0, 842, 850,
	0, 0, 2586, 2587, 0, 0, 0, 0, 0, 0,
	0, 729, 0, 0, 765, 819, 818, 752, 762, 0,
	0, 296, 216, 489, 609, 491, 490, 753, 0, 754,
	758, 761, 757, 755, 756, 0, 834, 0, 0, 0,
	0, 0, 0, 721, 733, 0, 738, 2025, 0, 0,
	689, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	730, 731, 0, 0, 0, 0, 785, 0, 732, 0,
	0, 780, 759, 763, 0, 0, 0, 0, 286, 418,
	435, 297, 408, 448, 302, 415, 292, 382, 405, 0,
	0, 288, 433, 414, 364, 343, 344, 287, 0, 400,
	321, 335, 318, 380, 760, 783, 787, 317, 856, 781,
	443, 290, 0, 442, 379, 429, 434, 365, 359, 289,
	431, 363, 358, 347, 325, 857, 348, 349, 339, 391,
	357, 392, 340, 369, 368, 370, 1100, 0, 0, 0,
	0, 471, 472, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 602, 778, 0, 606, 0,
	445, 3243, 0, 840, 0, 0, 0, 417, 0, 0,
	350, 0, 0, 0, 782, 0, 403, 385, 853, 0,
	1448, 401, 355, 430, 393, 436, 419, 444, 397, 394,
	281, 420, 320, 366, 293, 295, 315, 322, 324, 326,
	327, 375, 376, 388, 407, 421, 422, 423, 319, 303,
	402, 304, 337, 305, 282, 311, 309, 312, 409, 313,
	284, 389, 427, 0, 332, 398, 362, 285, 361, 390,
	426, 425, 294, 452, 458, 459, 548, 0, 464, 629,
	630, 631, 473, 478, 479, 480, 482, 483, 484, 485,
	549, 566, 533, 503, 466, 557, 500, 504, 505, 569,
	1749, 1748, 1750, 457, 351, 352, 0, 330, 278, 279,
	624, 838, 381, 571, 604, 605, 496, 0, 852, 833,
	835, 836, 839, 843, 844, 845, 846, 847, 849, 851,
	855, 623, 0, 550, 565, 627, 564, 620, 387, 0,
	406, 562, 509, 0, 554, 528, 0, 555, 524, 559,
	0, 498, 0, 413, 438, 450, 467, 470, 499, 584,
	585, 586, 283, 469, 588, 589, 590, 591, 592, 593,
	594, 587, 854, 531, 508, 534, 449, 511, 510, 0,
	0, 545, 786, 546, 547, 371, 372, 373, 374, 841,
	572, 301, 468, 396, 0, 532, 0, 0, 0, 0,
	0, 0, 0, 0, 537, 538, 535, 632, 0, 595,
	596, 0, 0, 462, 463, 329, 336, 481, 338, 300,
	386, 331, 447, 345, 0, 474, 539, 475, 598, 601,
	599, 600, 378, 341, 342, 410, 346, 356, 399, 446,
	384, 404, 298, 437, 411, 360, 525, 552, 863, 837,
	862, 864, 865, 861, 866, 867, 848, 742, 0, 793,
	859, 858, 860, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 580, 579, 578, 577, 576, 575,
	574, 573, 0, 0, 522, 424, 310, 272, 306, 307,
	314, 621, 618, 428, 622, 0, 280, 502, 354, 0,
	395, 328, 567, 568, 0, 0, 826, 800, 801, 802,
	739, 803, 797, 798, 740, 799, 827, 791, 823, 824,
	767, 794, 804, 822, 805, 825, 828, 829, 868, 869,
	811, 795, 244, 870, 808, 830, 821, 820, 806, 792,
	831, 832, 774, 769, 809, 810, 796, 814, 815, 816,
	741, 788, 789, 790, 812, 813, 770, 771, 772, 773,
	0, 0, 0, 453, 454, 455, 477, 0, 439, 501,
	619, 0, 0, 0, 0, 0, 0, 0, 551, 563,
	597, 0, 607, 608, 610, 612, 817, 614, 416, 784,
	0, 625, 492, 493, 626, 603, 0, 734, 383, 0,
	507, 540, 529, 613, 495, 0, 0, 0, 3544, 0,
	0, 737, 0, 0, 0, 323, 1799, 0, 353, 544,
	526, 536, 527, 512, 513, 514, 521, 333, 515, 516,
	517, 487, 518, 488, 519, 520, 775, 543, 494, 412,
	367, 561, 560, 0, 0, 842, 850, 0, 0, 0,
	0, 0, 0, 0, 0, 2008, 0, 0, 729, 0,
	0, 765, 819, 818, 752, 762, 0, 0, 296, 216,
	489, 609, 491, 490, 753, 0, 754, 758, 761, 757,
	755, 756, 0, 834, 0, 0, 0, 0, 0, 0,
	721, 733, 0, 738, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 730, 731, 0,
	0, 0, 0, 785, 0, 732, 0, 0, 2009, 759,
	763, 0, 0, 0, 0, 286, 418, 435, 297, 408,
	448, 302, 415, 292, 382, 405, 0, 0, 288, 433,
	414, 364, 343, 344, 287, 0, 400, 321, 335, 318,
	380, 760, 783, 787, 317, 856, 781, 443, 290, 0,
	442, 379, 429, 434, 365, 359, 289, 431, 363, 358,
	347, 325, 857, 348, 349, 339, 391, 357, 392, 340,
	369, 368, 370, 0, 0, 0, 0, 0, 471, 472,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 602, 778, 0, 606, 0, 445, 0, 0,
	840, 0, 0, 0, 417, 0, 0, 350, 0, 0,
	0, 782, 0, 403, 385, 853, 0, 0, 401, 355,
	430, 393, 436, 419, 444, 397, 394, 281, 420, 320,
	366, 293, 295, 315, 322, 324, 326, 327, 375, 376,
	388, 407, 421, 422, 423, 319, 303, 402, 304, 337,
	305, 282, 311, 309, 312, 409, 313, 284, 389, 427,
	0, 332, 398, 362, 285, 361, 390, 426, 425, 294,
	452, 458, 459, 548, 0, 464, 629, 630, 631, 473,
	478, 479, 480, 482, 483, 484, 485, 549, 566, 533,
	503, 466, 557, 500, 504, 505, 569, 0, 0, 0,
	457, 351, 352, 0, 330, 278, 279, 624, 838, 381,
	571, 604, 605, 496, 0, 852, 833, 835, 836, 839,
	843, 844, 845, 846, 847, 849, 851, 855, 623, 0,
	550, 565, 627, 564, 620, 387, 0, 406, 562, 509,
	0, 554, 528, 0, 555, 524, 559, 0, 498, 0,
	413, 438, 450, 467, 470, 499, 584, 585, 586, 283,
	469, 588, 589, 590, 591, 592, 593, 594, 587, 854,
	531, 508, 534, 449, 511, 510, 0, 0, 545, 786,
	546, 547, 371, 372, 373, 374, 841, 572, 301, 468,
	396, 0, 532, 0, 0, 0, 0, 0, 0, 0,
	0, 537, 538, 535, 632, 0, 595, 596, 0, 0,
	462, 463, 329, 336, 481, 338, 300, 386, 331, 447,
	345, 0, 474, 539, 475, 598, 601, 599, 600, 378,
	341, 342, 410, 346, 356, 399, 446, 384, 404, 298,
	437, 411, 360, 525, 552, 863, 837, 862, 864, 865,
	861, 866, 867, 848, 742, 0, 793, 859, 858, 860,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 580, 579, 578, 577, 576, 575, 574, 573, 0,
	0, 522, 424, 310, 272, 306, 307, 314, 621, 618,
	428, 622, 0, 280, 502, 354, 0, 395, 328, 567,
	568, 0, 0, 826, 800, 801, 802, 739, 803, 797,
	798, 740, 799, 827, 791, 823, 824, 767, 794, 804,
	822, 805, 825, 828, 829, 868, 869, 811, 795, 244,
	870, 808, 830, 821, 820, 806, 792, 831, 832, 774,
	769, 809, 810, 796, 814, 815, 816, 741, 788, 789,
	790, 812, 813, 770, 771, 772, 773, 0, 0, 0,
	453, 454, 455, 477, 0, 439, 501, 619, 0, 0,
	0, 0, 0, 0, 0, 551, 563, 597, 0, 607,
	608, 610, 612, 817, 614, 416, 193, 784, 625, 492,
	493, 626, 603, 0, 734, 0, 383, 0, 507, 540,
	529, 613, 495, 0, 0, 0, 0, 0, 0, 737,
	0, 0, 0, 323, 0, 0, 353, 544, 526, 536,
	527, 512, 513, 514, 521, 333, 515, 516, 517, 487,
	518, 488, 519, 520, 1242, 543, 494, 412, 367, 561,
	560, 0, 0, 842, 850, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 729, 0, 0, 765,
	819, 818, 752, 762, 0, 0, 296, 216, 489, 609,
	491, 490, 753, 0, 754, 758, 761, 757, 755, 756,
	0, 834, 0, 0, 0, 0, 0, 0, 721, 733,
	0, 738, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 730, 731, 0, 0, 0,
	0, 785, 0, 732, 0, 0, 780, 759, 763, 0,
	0, 0, 0, 286, 418, 435, 297, 408, 448, 302,
	415, 292, 382, 405, 0, 0, 288, 433, 414, 364,
	343, 344, 287, 0, 400, 321, 335, 318, 380, 760,
	783, 787, 317, 856, 781, 443, 290, 0, 442, 379,
	429, 434, 365, 359, 289, 431, 363, 358, 347, 325,
	857, 348, 349, 339, 391, 357, 392, 340, 369, 368,
	370, 0, 0, 0, 0, 0, 471, 472, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	602, 778, 0, 606, 0, 445, 0, 0, 840, 0,
	0, 0, 417, 0, 0, 350, 0, 0, 0, 782,
	0, 403, 385, 853, 0, 0, 401, 355, 430, 393,
	436, 419, 444, 397, 394, 281, 420, 320, 366, 293,
	295, 315, 322, 324, 326, 327, 375, 376, 388, 407,
	421, 422, 423, 319, 303, 402, 304, 337, 305, 282,
	311, 309, 312, 409, 313, 284, 389, 427, 0, 332,
	398, 362, 285, 361, 390, 426, 425, 294, 452, 458,
	459, 548, 0, 464, 629, 630, 631, 473, 478, 479,
	480, 482, 483, 484, 485, 549, 566, 533, 503, 466,
	557, 500, 504, 505, 569, 0, 0, 0, 457, 351,
	352, 0, 330, 278, 279, 624, 838, 381, 571, 604,
	605, 496, 0, 852, 833, 835, 836, 839, 843, 844,
	845, 846, 847, 849, 851, 855, 623, 0, 550, 565,
	627, 564, 620, 387, 0, 406, 562, 509, 0, 554,
	528, 0, 555, 524, 559, 0, 498, 0, 413, 438,
	450, 467, 470, 499, 584, 585, 586, 283, 469, 588,
	589, 590, 591, 592, 593, 594, 587, 854, 531, 508,
	534, 449, 511, 510, 0, 0, 545, 786, 546, 547,
	371, 372, 373, 374, 841, 572, 301, 468, 396, 0,
	532, 0, 0, 0, 0, 0, 0, 0, 0, 537,
	538, 535, 632, 0, 595, 596, 0, 0, 462, 463,
	329, 336, 481, 338, 300, 386, 331, 447, 345, 0,
	474, 539, 475, 598, 601, 599, 600, 378, 341, 342,
	410, 346, 356, 399, 446, 384, 404, 298, 437, 411,
	360, 525, 552, 863, 837, 862, 864, 865, 861, 866,
	867, 848, 742, 0, 793, 859, 858, 860, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 580,
	579, 578, 577, 576, 575, 574, 573, 0, 0, 522,
	424, 310, 272, 306, 307, 314, 621, 618, 428, 622,
	0, 280, 502, 354, 157, 395, 328, 567, 568, 0,
	0, 826, 800, 801, 802, 739, 803, 797, 798, 740,
	799, 827, 791, 823, 824, 767, 794, 804, 822, 805,
	825, 828, 829, 868, 869, 811, 795, 244, 870, 808,
	830, 821, 820, 806, 792, 831, 832, 774, 769, 809,
	810, 796, 814, 815, 816, 741, 788, 789, 790, 812,
	813, 770, 771, 772, 773, 0, 0, 0, 453, 454,
	455, 477, 0, 439, 501, 619, 0, 0, 0, 0,
	0, 0, 0, 551, 563, 597, 0, 607, 608, 610,
	612, 817, 614, 416, 784, 0, 625, 492, 493, 626,
	603, 0, 734, 383, 0, 507, 540, 529, 613, 495,
	0, 0, 0, 0, 0, 0, 737, 0, 0, 0,
	323, 3927, 0, 353, 544, 526, 536, 527, 512, 513,
	514, 521, 333, 515, 516, 517, 487, 518, 488, 519,
	520, 775, 543, 494, 412, 367, 561, 560, 0, 0,
	842, 850, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 729, 0, 0, 765, 819, 818, 752,
	762, 0, 0, 296, 216, 489, 609, 491, 490, 753,
	0, 754, 758, 761, 757, 755, 756, 0, 834, 0,
	0, 0, 0, 0, 0, 721, 733, 0, 738, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 730, 731, 0, 0, 0, 0, 785, 0,
	732, 0, 0, 780, 759, 763, 0, 0, 0, 0,
	286, 418, 435, 297, 408, 448, 302, 415, 292, 382,
	405, 0, 0, 288, 433, 414, 364, 343, 344, 287,
	0, 400, 321, 335, 318, 380, 760, 783, 787, 317,
	856, 781, 443, 290, 0, 442, 379, 429, 434, 365,
	359, 289, 431, 363, 358, 347, 325, 857, 348, 349,
	339, 391, 357, 392, 340, 369, 368, 370, 0, 0,
	0, 0, 0, 471, 472, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 602, 778, 0,
	606, 0, 445, 0, 0, 840, 0, 0, 0, 417,
	0, 0, 350, 0, 0, 0, 782, 0, 403, 385,
	853, 0, 0, 401, 355, 430, 393, 436, 419, 444,
	397, 394, 281, 420, 320, 366, 293, 295, 315, 322,
	324, 326, 327, 375, 376, 388, 407, 421, 422, 423,
	319, 303, 402, 304, 337, 305, 282, 311, 309, 312,
	409, 313, 284, 389, 427, 0, 332, 398, 362, 285,
	361, 390, 426, 425, 294, 452, 458, 459, 548, 0,
	464, 629, 630, 631, 473, 478, 479, 480, 482, 483,
	484, 485, 549, 566, 533, 503, 466, 557, 500, 504,
	505, 569, 0, 0, 0, 457, 351, 352, 0, 330,
	278, 279, 624, 838, 381, 571, 604, 605, 496, 0,
	852, 833, 835, 836, 839, 843, 844, 845, 846, 847,
	849, 851, 855, 623, 0, 550, 565, 627, 564, 620,
	387, 0, 406, 562, 509, 0, 554, 528, 0, 555,
	524, 559, 0, 498, 0, 413, 438, 450, 467, 470,
	499, 584, 585, 586, 283, 469, 588, 589, 590, 591,
	592, 593, 594, 587, 854, 531, 508, 534, 449, 511,
	510, 0, 0, 545, 786, 546, 547, 371, 372, 373,
	374, 841, 572, 301, 468, 396, 0, 532, 0, 0,
	0, 0, 0, 0, 0, 0, 537, 538, 535, 632,
	0, 595, 596, 0, 0, 462, 463, 329, 336, 481,
	338, 300, 386, 331, 447, 345, 0, 474, 539, 475,
	598, 601, 599, 600, 378, 341, 342, 410, 346, 356,
	399, 446, 384, 404, 298, 437, 411, 360, 525, 552,
	863, 837, 862, 864, 865, 861, 866, 867, 848, 742,
	0, 793, 859, 858, 860, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 580, 579, 578, 577,
	576, 575, 574, 573, 0, 0, 522, 424, 310, 272,
	306, 307, 314, 621, 618, 428, 622, 0, 280, 502,
	354, 0, 395, 328, 567, 568, 0, 0, 826, 800,
	801, 802, 739, 803, 797, 798, 740, 799, 827, 791,
	823, 824, 767, 794, 804, 822, 805, 825, 828, 829,
	868, 869, 811, 795, 244, 870, 808, 830, 821, 820,
	806, 792, 831, 832, 774, 769, 809, 810, 796, 814,
	815, 816, 741, 788, 789, 790, 812, 813, 770, 771,
	772, 773, 0, 0, 0, 453, 454, 455, 477, 0,
	439, 501, 619, 0, 0, 0, 0, 0, 0, 0,
	551, 563, 597, 0, 607, 608, 610, 612, 817, 614,
	416, 784, 0, 625, 492, 493, 626, 603, 0, 734,
	383, 0, 507, 540, 529, 613, 495, 0, 0, 0,
	0, 0, 0, 737, 0, 0, 0, 323, 0, 0,
	353, 544, 526, 536, 527, 512, 513, 514, 521, 333,
	515, 516, 517, 487, 518, 488, 519, 520, 775, 543,
	494, 412, 367, 561, 560, 0, 0, 842, 850, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	729, 0, 0, 765, 819, 818, 752, 762, 0, 0,
	296, 216, 489, 609, 491, 490, 753, 0, 754, 758,
	761, 757, 755, 756, 0, 834, 0, 0, 0, 0,
	0, 0, 721, 733, 0, 738, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 730,
	731, 0, 0, 0, 0, 785, 0, 732, 0, 0,
	780, 759, 763, 0, 0, 0, 0, 286, 418, 435,
	297, 408, 448, 302, 415, 292, 382, 405, 0, 0,
	288, 433, 414, 364, 343, 344, 287, 0, 400, 321,
	335, 318, 380, 760, 783, 787, 317, 856, 781, 443,
	290, 0, 442, 379, 429, 434, 365, 359, 289, 431,
	363, 358, 347, 325, 857, 348, 349, 339, 391, 357,
	392, 340, 369, 368, 370, 0, 0, 0, 0, 0,
	471, 472, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 602, 778, 0, 606, 0, 445,
	0, 0, 840, 0, 0, 0, 417, 0, 0, 350,
	0, 0, 0, 782, 0, 403, 385, 853, 3822, 0,
	401, 355, 430, 393, 436, 419, 444, 397, 394, 281,
	420, 320, 366, 293, 295, 315, 322, 324, 326, 327,
	375, 376, 388, 407, 421, 422, 423, 319, 303, 402,
	304, 337, 305, 282, 311, 309, 312, 409, 313, 284,
	389, 427, 0, 332, 398, 362, 285, 361, 390, 426,
	425, 294, 452, 458, 459, 548, 0, 464, 629, 630,
	631, 473, 478, 479, 480, 482, 483, 484, 485, 549,
	566, 533, 503, 466, 557, 500, 504, 505, 569, 0,
	0, 0, 457, 351, 352, 0, 330, 278, 279, 624,
	838, 381, 571, 604, 605, 496, 0, 852, 833, 835,
	836, 839, 843, 844, 845, 846, 847, 849, 851, 855,
	623, 0, 550, 565, 627, 564, 620, 387, 0, 406,
	562, 509, 0, 554, 528, 0, 555, 524, 559, 0,
	498, 0, 413, 438, 450, 467, 470, 499, 584, 585,
	586, 283, 469, 588, 589, 590, 591, 592, 593, 594,
	587, 854, 531, 508, 534, 449, 511, 510, 0, 0,
	545, 786, 546, 547, 371, 372, 373, 374, 841, 572,
	301, 468, 396, 0, 532, 0, 0, 0, 0, 0,
	0, 0, 0, 537, 538, 535, 632, 0, 595, 596,
	0, 0, 462, 463, 329, 336, 481, 338, 300, 386,
	331, 447, 345, 0, 474, 539, 475, 598, 601, 599,
	600, 378, 341, 342, 410, 346, 356, 399, 446, 384,
	404, 298, 437, 411, 360, 525, 552, 863, 837, 862,
	864, 865, 861, 866, 867, 848, 742, 0, 793, 859,
	858, 860, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 580, 579, 578, 577, 576, 575, 574,
	573, 0, 0, 522, 424, 310, 272, 306, 307, 314,
	621, 618, 428, 622, 0, 280, 502, 354, 0, 395,
	328, 567, 568, 0, 0, 826, 800, 801, 802, 739,
	803, 797, 798, 740, 799, 827, 791, 823, 824, 767,
	794, 804, 822, 805, 825, 828, 829, 868, 869, 811,
	795, 244, 870, 808, 830, 821, 820, 806, 792, 831,
	832, 774, 769, 809, 810, 796, 814, 815, 816, 741,
	788, 789, 790, 812, 813, 770, 771, 772, 773, 0,
	0, 0, 453, 454, 455, 477, 0, 439, 501, 619,
	0, 0, 0, 0, 0, 0, 0, 551, 563, 597,
	0, 607, 608, 610, 612, 817, 614, 416, 784, 0,
	625, 492, 493, 626, 603, 0, 734, 383, 0, 507,
	540, 529, 613, 495, 0, 0, 0, 0, 0, 0,
	737, 0, 0, 0, 323, 1799, 0, 353, 544, 526,
	536, 527, 512, 513, 514, 521, 333, 515, 516, 517,
	487, 518, 488, 519, 520, 775, 543, 494, 412, 367,
	561, 560, 0, 0, 842, 850, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 729, 0, 0,
	765, 819, 818, 752, 762, 0, 0, 296, 216, 489,
	609, 491, 490, 753, 0, 754, 758, 761, 757, 755,
	756, 0, 834, 0, 0, 0, 0, 0, 0, 721,
	733, 0, 738, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 730, 731, 0, 0,
	0, 0, 785, 0, 732, 0, 0, 780, 759, 763,
	0, 0, 0, 0, 286, 418, 435, 297, 408, 448,
	302, 415, 292, 382, 405, 0, 0, 288, 433, 414,
	364, 343, 344, 287, 0, 400, 321, 335, 318, 380,
	760, 783, 787, 317, 856, 781, 443, 290, 0, 442,
	379, 429, 434, 365, 359, 289, 431, 363, 358, 347,
	325, 857, 348, 349, 339, 391, 357, 392, 340, 369,
	368, 370, 0, 0, 0, 0, 0, 471, 472, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 602, 778, 0, 606, 0, 445, 0, 0, 840,
	0, 0, 0, 417, 0, 0, 350, 0, 0, 0,
	782, 0, 403, 385, 853, 0, 0, 401, 355, 430,
	393, 436, 419, 444, 397, 394, 281, 420, 320, 366,
	293, 295, 315, 322, 324, 326, 327, 375, 376, 388,
	407, 421, 422, 423, 319, 303, 402, 304, 337, 305,
	282, 311, 309, 312, 409, 313, 284, 389, 427, 0,
	332, 398, 362, 285, 361, 390, 426, 425, 294, 452,
	458, 459, 548, 0, 464, 629, 630, 631, 473, 478,
	479, 480, 482, 483, 484, 485, 549, 566, 533, 503,
	466, 557, 500, 504, 505, 569, 0, 0, 0, 457,
	351, 352, 0, 330, 278, 279, 624, 838, 381, 571,
	604, 605, 496, 0, 852, 833, 835, 836, 839, 843,
	844, 845, 846, 847, 849, 851, 855, 623, 0, 550,
	565, 627, 564, 620, 387, 0, 406, 562, 509, 0,
	554, 528, 0, 555, 524, 559, 0, 498, 0, 413,
	438, 450, 467, 470, 499, 584, 585, 586, 283, 469,
	588, 589, 590, 591, 592, 593, 594, 587, 854, 531,
	508, 534, 449, 511, 510, 0, 0, 545, 786, 546,
	547, 371, 372, 373, 374, 841, 572, 301, 468, 396,
	0, 532, 0, 0, 0, 0, 0, 0, 0, 0,
	537, 538, 535, 632, 0, 595, 596, 0, 0, 462,
	463, 329, 336, 481, 338, 300, 386, 331, 447, 345,
	0, 474, 539, 475, 598, 601, 599, 600, 378, 341,
	342, 410, 346, 356, 399, 446, 384, 404, 298, 437,
	411, 360, 525, 552, 863, 837, 862, 864, 865, 861,
	866, 867, 848, 742, 0, 793, 859, 858, 860, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	580, 579, 578, 577, 576, 575, 574, 573, 0, 0,
	522, 424, 310, 272, 306, 307, 314, 621, 618, 428,
	622, 0, 280, 502, 354, 0, 395, 328, 567, 568,
	0, 0, 826, 800, 801, 802, 739, 803, 797, 798,
	740, 799, 827, 791, 823, 824, 767, 794, 804, 822,
	805, 825, 828, 829, 868, 869, 811, 795, 244, 870,
	808, 830, 821, 820, 806, 792, 831, 832, 774, 769,
	809, 810, 796, 814, 815, 816, 741, 788, 789, 790,
	812, 813, 770, 771, 772, 773, 0, 0, 0, 453,
	454, 455, 477, 0, 439, 501, 619, 0, 0, 0,
	0, 0, 0, 0, 551, 563, 597, 0, 607, 608,
	610, 612, 817, 614, 416, 784, 0, 625, 492, 493,
	626, 603, 0, 734, 383, 0, 507, 540, 529, 613,
	495, 0, 0, 0, 0, 0, 0, 737, 0, 0,
	0, 323, 0, 0, 353, 544, 526, 536, 527, 512,
	513, 514, 521, 333, 515, 516, 517, 487, 518, 488,
	519, 520, 775, 543, 494, 412, 367, 561, 560, 0,
	0, 842, 850, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 729, 0, 0, 765, 819, 818,
	752, 762, 0, 0, 296, 216, 489, 609, 491, 490,
	753, 0, 754, 758, 761, 757, 755, 756, 0, 834,
	0, 0, 0, 0, 0, 0, 721, 733, 0, 738,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 730, 731, 1520, 0, 0, 0, 785,
	0, 732, 0, 0, 780, 759, 763, 0, 0, 0,
	0, 286, 418, 435, 297, 408, 448, 302, 415, 292,
	382, 405, 0, 0, 288, 433, 414, 364, 343, 344,
	287, 0, 400, 321, 335, 318, 380, 760, 783, 787,
	317, 856, 781, 443, 290, 0, 442, 379, 429, 434,
	365, 359, 289, 431, 363, 358, 347, 325, 857, 348,
	349, 339, 391, 357, 392, 340, 369, 368, 370, 0,
	0, 0, 0, 0, 471, 472, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 602, 778,
	0, 606, 0, 445, 0, 0, 840, 0, 0, 0,
	417, 0, 0, 350, 0, 0, 0, 782, 0, 403,
	385, 853, 0, 0, 401, 355, 430, 393, 436, 419,
	444, 397, 394, 281, 420, 320, 366, 293, 295, 315,
	322, 324, 326, 327, 375, 376, 388, 407, 421, 422,
	423, 319, 303, 402, 304, 337, 305, 282, 311, 309,
	312, 409, 313, 284, 389, 427, 0, 332, 398, 362,
	285, 361, 390, 426, 425, 294, 452, 458, 459, 548,
	0, 464, 629, 630, 631, 473, 478, 479, 480, 482,
	483, 484, 485, 549, 566, 533, 503, 466, 557, 500,
	504, 505, 569, 0, 0, 0, 457, 351, 352, 0,
	330, 278, 279, 624, 838, 381, 571, 604, 605, 496,
	0, 852, 833, 835, 836, 839, 843, 844, 845, 846,
	847, 849, 851, 855, 623, 0, 550, 565, 627, 564,
	620, 387, 0, 406, 562, 509, 0, 554, 528, 0,
	555, 524, 559, 0, 498, 0, 413, 438, 450, 467,
	470, 499, 584, 585, 586, 283, 469, 588, 589, 590,
	591, 592, 593, 594, 587, 854, 531, 508, 534, 449,
	511, 510, 0, 0, 545, 786, 546, 547, 371, 372,
	373, 374, 841, 572, 301, 468, 396, 0, 532, 0,
	0, 0, 0, 0, 0, 0, 0, 537, 538, 535,
	632, 0, 595, 596, 0, 0, 462, 463, 329, 336,
	481, 338, 300, 386, 331, 447, 345, 0, 474, 539,
	475, 598, 601, 599, 600, 378, 341, 342, 410, 346,
	356, 399, 446, 384, 404, 298, 437, 411, 360, 525,
	552, 863, 837, 862, 864, 865, 861, 866, 867, 848,
	742, 0, 793, 859, 858, 860, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 580, 579, 578,
	577, 576, 575, 574, 573, 0, 0, 522, 424, 310,
	272, 306, 307, 314, 621, 618, 428, 622, 0, 280,
	502, 354, 0, 395, 328, 567, 568, 0, 0, 826,
	800, 801, 802, 739, 803, 797, 798, 740, 799, 827,
	791, 823, 824, 767, 794, 804, 822, 805, 825, 828,
	829, 868, 869, 811, 795, 244, 870, 808, 830, 821,
	820, 806, 792, 831, 832, 774, 769, 809, 810, 796,
	814, 815, 816, 741, 788, 789, 790, 812, 813, 770,
	771, 772, 773, 0, 0, 0, 453, 454, 455, 477,
	0, 439, 501, 619, 0, 0, 0, 0, 0, 0,
	0, 551, 563, 597, 0, 607, 608, 610, 612, 817,
	614, 416, 0, 0, 625, 492, 493, 626, 603, 784,
	734, 0, 2179, 0, 0, 0, 0, 0, 383, 0,
	507, 540, 529, 613, 495, 0, 0, 0, 0, 0,
	0, 737, 0, 0, 0, 323, 0, 0, 353, 544,
	526, 536, 527, 512, 513, 514, 521, 333, 515, 516,
	517, 487, 518, 488, 519, 520, 775, 543, 494, 412,
	367, 561, 560, 0, 0, 842, 850, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 729, 0,
	0, 765, 819, 818, 752, 762, 0, 0, 296, 216,
	489, 609, 491, 490, 753, 0, 754, 758, 761, 757,
	755, 756, 0, 834, 0, 0, 0, 0, 0, 0,
	721, 733, 0, 738, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 730, 731, 0,
	0, 0, 0, 785, 0, 732, 0, 0, 780, 759,
	763, 0, 0, 0, 0, 286, 418, 435, 297, 408,
	448, 302, 415, 292, 382, 405, 0, 0, 288, 433,
	414, 364, 343, 344, 287, 0, 400, 321, 335, 318,
	380, 760, 783, 787, 317, 856, 781, 443, 290, 0,
	442, 379, 429, 434, 365, 359, 289, 431, 363, 358,
	347, 325, 857, 348, 349, 339, 391, 357, 392, 340,
	369, 368, 370, 0, 0, 0, 0, 0, 471, 472,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 602, 778, 0, 606, 0, 445, 0, 0,
	840, 0, 0, 0, 417, 0, 0, 350, 0, 0,
	0, 782, 0, 403, 385, 853, 0, 0, 401, 355,
	430, 393, 436, 419, 444, 397, 394, 281, 420, 320,
	366, 293, 295, 315, 322, 324, 326, 327, 375, 376,
	388, 407, 421, 422, 423, 319, 303, 402, 304, 337,
	305, 282, 311, 309, 312, 409, 313, 284, 389, 427,
	0, 332, 398, 362, 285, 361, 390, 426, 425, 294,
	452, 458, 459, 548, 0, 464, 629, 630, 631, 473,
	478, 479, 480, 482, 483, 484, 485, 549, 566, 533,
	503, 466, 557, 500, 504, 505, 569, 0, 0, 0,
	457, 351, 352, 0, 330, 278, 279, 624, 838, 381,
	571, 604, 605, 496, 0, 852, 833, 835, 836, 839,
	843, 844, 845, 846, 847, 849, 851, 855, 623, 0,
	550, 565, 627, 564, 620, 387, 0, 406, 562, 509,
	0, 554, 528, 0, 555, 524, 559, 0, 498, 0,
	413, 438, 450, 467, 470, 499, 584, 585, 586, 283,
	469, 588, 589, 590, 591, 592, 593, 594, 587, 854,
	531, 508, 534, 449, 511, 510, 0, 0, 545, 786,
	546, 547, 371, 372, 373, 374, 841, 572, 301, 468,
	396, 0, 532, 0, 0, 0, 0, 0, 0, 0,
	0, 537, 538, 535, 632, 0, 595, 596, 0, 0,
	462, 463, 329, 336, 481, 338, 300, 386, 331, 447,
	345, 0, 474, 539, 475, 598, 601, 599, 600, 378,
	341, 342, 410, 346, 356, 399, 446, 384, 404, 298,
	437, 411, 360, 525, 552, 863, 837, 862, 864, 865,
	861, 866, 867, 848, 742, 0, 793, 859, 858, 860,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 580, 579, 578, 577, 576, 575, 574, 573, 0,
	0, 522, 424, 310, 272, 306, 307, 314, 621, 618,
	428, 622, 0, 280, 502, 354, 0, 395, 328, 567,
	568, 0, 0, 826, 800, 801, 802, 739, 803, 797,
	798, 740, 799, 827, 791, 823, 824, 767, 794, 804,
	822, 805, 825, 828, 829, 868, 869, 811, 795, 244,
	870, 808, 830, 821, 820, 806, 792, 831, 832, 774,
	769, 809, 810, 796, 814, 815, 816, 741, 788, 789,
	790, 812, 813, 770, 771, 772, 773, 0, 0, 0,
	453, 454, 455, 477, 0, 439, 501, 619, 0, 0,
	0, 0, 0, 0, 0, 551, 563, 597, 0, 607,
	608, 610, 612, 817, 614, 416, 784, 0, 625, 492,
	493, 626, 603, 0, 734, 383, 0, 507, 540, 529,
	613, 495, 0, 0, 0, 0, 0, 0, 737, 0,
	0, 0, 323, 0, 0, 353, 544, 526, 536, 527,
	512, 513, 514, 521, 333, 515, 516, 517, 487, 518,
	488, 519, 520, 775, 543, 494, 412, 367, 561, 560,
	0, 0, 842, 850, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 729, 0, 0, 765, 819,
	818, 752, 762, 0, 0, 296, 216, 489, 609, 491,
	490, 753, 0, 754, 758, 761, 757, 755, 756, 0,
	834, 0, 0, 0, 0, 0, 0, 721, 733, 0,
	738, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 730, 731, 1792, 0, 0, 0,
	785, 0, 732, 0, 0, 780, 759, 763, 0, 0,
	0, 0, 286, 418, 435, 297, 408, 448, 302, 415,
	292, 382, 405, 0, 0, 288, 433, 414, 364, 343,
	344, 287, 0, 400, 321, 335, 318, 380, 760, 783,
	787, 317, 856, 781, 443, 290, 0, 442, 379, 429,
	434, 365, 359, 289, 431, 363, 358, 347, 325, 857,
	348, 349, 339, 391, 357, 392, 340, 369, 368, 370,
	0, 0, 0, 0, 0, 471, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 602,
	778, 0, 606, 0, 445, 0, 0, 840, 0, 0,
	0, 417, 0, 0, 350, 0, 0, 0, 782, 0,
	403, 385, 853, 0, 0, 401, 355, 430, 393, 436,
	419, 444, 397, 394, 281, 420, 320, 366, 293, 295,
	315, 322, 324, 326, 327, 375, 376, 388, 407, 421,
	422, 423, 319, 303, 402, 304, 337, 305, 282, 311,
	309, 312, 409, 313, 284, 389, 427, 0, 332, 398,
	362, 285, 361, 390, 426, 425, 294, 452, 458, 459,
	548, 0, 464, 629, 630, 631, 473, 478, 479, 480,
	482, 483, 484, 485, 549, 566, 533, 503, 466, 557,
	500, 504, 505, 569, 0, 0, 0, 457, 351, 352,
	0, 330, 278, 279, 624, 838, 381, 571, 604, 605,
	496, 0, 852, 833, 835, 836, 839, 843, 844, 845,
	846, 847, 849, 851, 855, 623, 0, 550, 565, 627,
	564, 620, 387, 0, 406, 562, 509, 0, 554, 528,
	0, 555, 524, 559, 0, 498, 0, 413, 438, 450,
	467, 470, 499, 584, 585, 586, 283, 469, 588, 589,
	590, 591, 592, 593, 594, 587, 854, 531, 508, 534,
	449, 511, 510, 0, 0, 545, 786, 546, 547, 371,
	372, 373, 374, 841, 572, 301, 468, 396, 0, 532,
	0, 0, 0, 0, 0, 0, 0, 0, 537, 538,
	535, 632, 0, 595, 596, 0, 0, 462, 463, 329,
	336, 481, 338, 300, 386, 331, 447, 345, 0, 474,
	539, 475, 598, 601, 599, 600, 378, 341, 342, 410,
	346, 356, 399, 446, 384, 404, 298, 437, 411, 360,
	525, 552, 863, 837, 862, 864, 865, 861, 866, 867,
	848, 742, 0, 793, 859, 858, 860, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 580, 579,
	578, 577, 576, 575, 574, 573, 0, 0, 522, 424,
	310, 272, 306, 307, 314, 621, 618, 428, 622, 0,
	280, 502, 354, 0, 395, 328, 567, 568, 0, 0,
	826, 800, 801, 802, 739, 803, 797, 798, 740, 799,
	827, 791, 823, 824, 767, 794, 804, 822, 805, 825,
	828, 829, 868, 869, 811, 795, 244, 870, 808, 830,
	821, 820, 806, 792, 831, 832, 774, 769, 809, 810,
	796, 814, 815, 816, 741, 788, 789, 790, 812, 813,
	770, 771, 772, 773, 0, 0, 0, 453, 454, 455,
	477, 0, 439, 501, 619, 0, 0, 0, 0, 0,
	0, 0, 551, 563, 597, 0, 607, 608, 610, 612,
	817, 614, 416, 784, 0, 625, 492, 493, 626, 603,
	0, 734, 383, 0, 507, 540, 529, 613, 495, 0,
	0, 0, 0, 0, 0, 737, 0, 0, 0, 323,
	0, 0, 353, 544, 526, 536, 527, 512, 513, 514,
	521, 333, 515, 516, 517, 487, 518, 488, 519, 520,
	775, 543, 494, 412, 367, 561, 560, 0, 0, 842,
	850, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 729, 0, 0, 765, 819, 818, 752, 762,
	0, 0, 296, 216, 489, 609, 491, 490, 753, 0,
	754, 758, 761, 757, 755, 756, 0, 834, 0, 0,
	0, 0, 0, 0, 721, 733, 0, 738, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 730, 731, 0, 0, 0, 0, 785, 0, 732,
	0, 0, 780, 759, 763, 0, 0, 0, 0, 286,
	418, 435, 297, 408, 448, 302, 415, 292, 382, 405,
	0, 0, 288, 433, 414, 364, 343, 344, 287, 0,
	400, 321, 335, 318, 380, 760, 783, 787, 317, 856,
	781, 443, 290, 0, 442, 379, 429, 434, 365, 359,
	289, 431, 363, 358, 347, 325, 857, 348, 349, 339,
	391, 357, 392, 340, 369, 368, 370, 0, 0, 0,
	0, 0, 471, 472, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 602, 778, 0, 606,
	0, 445, 0, 0, 840, 0, 0, 0, 417, 0,
	0, 350, 0, 0, 0, 782, 0, 403, 385, 853,
	0, 0, 401, 355, 430, 393, 436, 419, 444, 397,
	394, 281, 420, 320, 366, 293, 295, 315, 322, 324,
	326, 327, 375, 376, 388, 407, 421, 422, 423, 319,
	303, 402, 304, 337, 305, 282, 311, 309, 312, 409,
	313, 284, 389, 427, 0, 332, 398, 362, 285, 361,
	390, 426, 425, 294, 452, 458, 459, 548, 0, 464,
	629, 630, 631, 473, 478, 479, 480, 482, 483, 484,
	485, 549, 566, 533, 503, 466, 557, 500, 504, 505,
	569, 0, 0, 0, 457, 351, 352, 0, 330, 278,
	279, 624, 838, 381, 571, 604, 605, 496, 0, 852,
	833, 835, 836, 839, 843, 844, 845, 846, 847, 849,
	851, 855, 623, 0, 550, 565, 627, 564, 620, 387,
	0, 406, 562, 509, 0, 554, 528, 0, 555, 524,
	559, 0, 498, 0, 413, 438, 450, 467, 470, 499,
	584, 585, 586, 283, 469, 588, 589, 590, 591, 592,
	593, 594, 587, 854, 531, 508, 534, 449, 511, 510,
	0, 0, 545, 786, 546, 547, 371, 372, 373, 374,
	841, 572, 301, 468, 396, 0, 532, 0, 0, 0,
	0, 0, 0, 0, 0, 537, 538, 535, 632, 0,
	595, 596, 0, 0, 462, 463, 329, 336, 481, 338,
	300, 386, 331, 447, 345, 0, 474, 539, 475, 598,
	601, 599, 600, 378, 341, 342, 410, 346, 356, 399,
	446, 384, 404, 298, 437, 411, 360, 525, 552, 863,
	837, 862, 864, 865, 861, 866, 867, 848, 742, 0,
	793, 859, 858, 860, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 580, 579, 578, 577, 576,
	575, 574, 573, 0, 0, 522, 424, 310, 272, 306,
	307, 314, 621, 618, 428, 622, 0, 280, 502, 354,
	0, 395, 328, 567, 568, 0, 0, 826, 800, 801,
	802, 739, 803, 797, 798, 740, 799, 827, 791, 823,
	824, 767, 794, 804, 822, 805, 825, 828, 829, 868,
	869, 811, 795, 244, 870, 808, 830, 821, 820, 806,
	792, 831, 832, 774, 769, 809, 810, 796, 814, 815,
	816, 741, 788, 789, 790, 812, 813, 770, 771, 772,
	773, 0, 0, 0, 453, 454, 455, 477, 0, 439,
	501, 619, 0, 0, 0, 0, 0, 0, 0, 551,
	563, 597, 0, 607, 608, 610, 612, 817, 614, 416,
	784, 0, 625, 492, 493, 626, 603, 0, 734, 383,
	0, 507, 540, 529, 613, 495, 0, 0, 0, 0,
	0, 0, 737, 0, 0, 0, 323, 0, 0, 353,
	544, 526, 536, 527, 512, 513, 514, 521, 333, 515,
	516, 517, 487, 518, 488, 519, 520, 775, 543, 494,
	412, 367, 561, 560, 0, 0, 842, 850, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 729,
	0, 0, 765, 819, 818, 752, 762, 0, 0, 296,
	216, 489, 609, 491, 490, 2638, 0, 2639, 758, 761,
	757, 755, 756, 0, 834, 0, 0, 0, 0, 0,
	0, 721, 733, 0, 738, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 730, 731,
	0, 0, 0, 0, 785, 0, 732, 0, 0, 780,
	759, 763, 0, 0, 0, 0, 286, 418, 435, 297,
	408, 448, 302, 415, 292, 382, 405, 0, 0, 288,
	433, 414, 364, 343, 344, 287, 0, 400, 321, 335,
	318, 380, 760, 783, 787, 317, 856, 781, 443, 290,
	0, 442, 379, 429, 434, 365, 359, 289, 431, 363,
	358, 347, 325, 857, 348, 349, 339, 391, 357, 392,
	340, 369, 368, 370, 0, 0, 0, 0, 0, 471,
	472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 602, 778, 0, 606, 0, 445, 0,
	0, 840, 0, 0, 0, 417, 0, 0, 350, 0,
	0, 0, 782, 0, 403, 385, 853, 0, 0, 401,
	355, 430, 393, 436, 419, 444, 397, 394, 281, 420,
	320, 366, 293, 295, 315, 322, 324, 326, 327, 375,
	376, 388, 407, 421, 422, 423, 319, 303, 402, 304,
	337, 305, 282, 311, 309, 312, 409, 313, 284, 389,
	427, 0, 332, 398, 362, 285, 361, 390, 426, 425,
	294, 452, 458, 459, 548, 0, 464, 629, 630, 631,
	473, 478, 479, 480, 482, 483, 484, 485, 549, 566,
	533, 503, 466, 557, 500, 504, 505, 569, 0, 0,
	0, 457, 351, 352, 0, 330, 278, 279, 624, 838,
	381, 571, 604, 605, 496, 0, 852, 833, 835, 836,
	839, 843, 844, 845, 846, 847, 849, 851, 855, 623,
	0, 550, 565, 627, 564, 620, 387, 0, 406, 562,
	509, 0, 554, 528, 0, 555, 524, 559, 0, 498,
	0, 413, 438, 450, 467, 470, 499, 584, 585, 586,
	283, 469, 588, 589, 590, 591, 592, 593, 594, 587,
	854, 531, 508, 534, 449, 511, 510, 0, 0, 545,
	786, 546, 547, 371, 372, 373, 374, 841, 572, 301,
	468, 396, 0, 532, 0, 0, 0, 0, 0, 0,
	0, 0, 537, 538, 535, 632, 0, 595, 596, 0,
	0, 462, 463, 329, 336, 481, 338, 300, 386, 331,
	447, 345, 0, 474, 539, 475, 598, 601, 599, 600,
	378, 341, 342, 410, 346, 356, 399, 446, 384, 404,
	298, 437, 411, 360, 525, 552, 863, 837, 862, 864,
	865, 861, 866, 867, 848, 742, 0, 793, 859, 858,
	860, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 580, 579, 578, 577, 576, 575, 574, 573,
	0, 0, 522, 424, 310, 272, 306, 307, 314, 621,
	618, 428, 622, 0, 280, 502, 354, 0, 395, 328,
	567, 568, 0, 0, 826, 800, 801, 802, 739, 803,
	797, 798, 740, 799, 827, 791, 823, 824, 767, 794,
	804, 822, 805, 825, 828, 829, 868, 869, 811, 795,
	244, 870, 808, 830, 821, 820, 806, 792, 831, 832,
	774, 769, 809, 810, 796, 814, 815, 816, 741, 788,
	789, 790, 812, 813, 770, 771, 772, 773, 0, 0,
	0, 453, 454, 455, 477, 0, 439, 501, 619, 0,
	0, 0, 0, 0, 0, 0, 551, 563, 597, 0,
	607, 608, 610, 612, 817, 614, 416, 784, 0, 625,
	492, 493, 626, 603, 0, 734, 383, 0, 507, 540,
	529, 613, 495, 0, 0, 1662, 0, 0, 0, 737,
	0, 0, 0, 323, 0, 0, 353, 544, 526, 536,
	527, 512, 513, 514, 521, 333, 515, 516, 517, 487,
	518, 488, 519, 520, 775, 543, 494, 412, 367, 561,
	560, 0, 0, 842, 850, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 729, 0, 0, 765,
	819, 818, 752, 762, 0, 0, 296, 216, 489, 609,
	491, 490, 753, 0, 754, 758, 761, 757, 755, 756,
	0, 834, 0, 0, 0, 0, 0, 0, 0, 733,
	0, 738, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 730, 731, 0, 0, 0,
	0, 785, 0, 732, 0, 0, 780, 759, 763, 0,
	0, 0, 0, 286, 418, 435, 297, 408, 448, 302,
	415, 292, 382, 405, 0, 0, 288, 433, 414, 364,
	343, 344, 287, 0, 400, 321, 335, 318, 380, 760,
	783, 787, 317, 856, 781, 443, 290, 0, 442, 379,
	429, 434, 365, 359, 289, 431, 363, 358, 347, 325,
	857, 348, 349, 339, 391, 357, 392, 340, 369, 368,
	370, 0, 0, 0, 0, 0, 471, 472, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	602, 778, 0, 606, 0, 445, 0, 0, 840, 0,
	0, 0, 417, 0, 0, 350, 0, 0, 0, 782,
	0, 403, 385, 853, 0, 0, 401, 355, 430, 393,
	436, 419, 444, 397, 394, 281, 420, 320, 366, 293,
	295, 315, 322, 324, 326, 327, 375, 376, 388, 407,
	421, 422, 423, 319, 303, 402, 304, 337, 305, 282,
	311, 309, 312, 409, 313, 284, 389, 427, 0, 332,
	398, 362, 285, 361, 390, 426, 425, 294, 452, 1663,
	1664, 548, 0, 464, 629, 630, 631, 473, 478, 479,
	480, 482, 483, 484, 485, 549, 566, 533, 503, 466,
	557, 500, 504, 505, 569, 0, 0, 0, 457, 351,
	352, 0, 330, 278, 279, 624, 838, 381, 571, 604,
	605, 496, 0, 852, 833, 835, 836, 839, 843, 844,
	845, 846, 847, 849, 851, 855, 623, 0, 550, 565,
	627, 564, 620, 387, 0, 406, 562, 509, 0, 554,
	528, 0, 555, 524, 559, 0, 498, 0, 413, 438,
	450, 467, 470, 499, 584, 585, 586, 283, 469, 588,
	589, 590, 591, 592, 593, 594, 587, 854, 531, 508,
	534, 449, 511, 510, 0, 0, 545, 786, 546, 547,
	371, 372, 373, 374, 841, 572, 301, 468, 396, 0,
	532, 0, 0, 0, 0, 0, 0, 0, 0, 537,
	538, 535, 632, 0, 595, 596, 0, 0, 462, 463,
	329, 336, 481, 338, 300, 386, 331, 447, 345, 0,
	474, 539, 475, 598, 601, 599, 600, 378, 341, 342,
	410, 346, 356, 399, 446, 384, 404, 298, 437, 411,
	360, 525, 552, 863, 837, 862, 864, 865, 861, 866,
	867, 848, 742, 0, 793, 859, 858, 860, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 580,
	579, 578, 577, 576, 575, 574, 573, 0, 0, 522,
	424, 310, 272, 306, 307, 314, 621, 618, 428, 622,
	0, 280, 502, 354, 0, 395, 328, 567, 568, 0,
	0, 826, 800, 801, 802, 739, 803, 797, 798, 740,
	799, 827, 791, 823, 824, 767, 794, 804, 822, 805,
	825, 828, 829, 868, 869, 811, 795, 244, 870, 808,
	830, 821, 820, 806, 792, 831, 832, 774, 769, 809,
	810, 796, 814, 815, 816, 741, 788, 789, 790, 812,
	813, 770, 771, 772, 773, 0, 0, 0, 453, 454,
	455, 477, 0, 439, 501, 619, 0, 0, 0, 0,
	0, 0, 0, 551, 563, 597, 0, 607, 608, 610,
	612, 817, 614, 416, 784, 0, 625, 492, 493, 626,
	603, 0, 734, 383, 0, 507, 540, 529, 613, 495,
	0, 0, 0, 0, 0, 0, 737, 0, 0, 0,
	323, 0, 0, 353, 544, 526, 536, 527, 512, 513,
	514, 521, 333, 515, 516, 517, 487, 518, 488, 519,
	520, 775, 543, 494, 412, 367, 561, 560, 0, 0,
	842, 850, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 729, 0, 0, 765, 819, 818, 752,
	762, 0, 0, 296, 216, 489, 609, 491, 490, 753,
	0, 754, 758, 761, 757, 755, 756, 0, 834, 0,
	0, 0, 0, 0, 0, 0, 733, 0, 738, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 730, 731, 0, 0, 0, 0, 785, 0,
	732, 0, 0, 780, 759, 763, 0, 0, 0, 0,
	286, 418, 435, 297, 408, 448, 302, 415, 292, 382,
	405, 0, 0, 288, 433, 414, 364, 343, 344, 287,
	0, 400, 321, 335, 318, 380, 760, 783, 787, 317,
	856, 781, 443, 290, 0, 442, 379, 429, 434, 365,
	359, 289, 431, 363, 358, 347, 325, 857, 348, 349,
	339, 391, 357, 392, 340, 369, 368, 370, 0, 0,
	0, 0, 0, 471, 472, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 602, 778, 0,
	606, 0, 445, 0, 0, 840, 0, 0, 0, 417,
	0, 0, 350, 0, 0, 0, 782, 0, 403, 385,
	853, 0, 0, 401, 355, 430, 393, 436, 419, 444,
	397, 394, 281, 420, 320, 366, 293, 295, 315, 322,
	324, 326, 327, 375, 376, 388, 407, 421, 422, 423,
	319, 303, 402, 304, 337, 305, 282, 311, 309, 312,
	409, 313, 284, 389, 427, 0, 332, 398, 362, 285,
	361, 390, 426, 425, 294, 452, 458, 459, 548, 0,
	464, 629, 630, 631, 473, 478, 479, 480, 482, 483,
	484, 485, 549, 566, 533, 503, 466, 557, 500, 504,
	505, 569, 0, 0, 0, 457, 351, 352, 0, 330,
	278, 279, 624, 838, 381, 571, 604, 605, 496, 0,
	852, 833, 835, 836, 839, 843, 844, 845, 846, 847,
	849, 851, 855, 623, 0, 550, 565, 627, 564, 620,
	387, 0, 406, 562, 509, 0, 554, 528, 0, 555,
	524, 559, 0, 498, 0, 413, 438, 450, 467, 470,
	499, 584, 585, 586, 283, 469, 588, 589, 590, 591,
	592, 593, 594, 587, 854, 531, 508, 534, 449, 511,
	510, 0, 0, 545, 786, 546, 547, 371, 372, 373,
	374, 841, 572, 301, 468, 396, 0, 532, 0, 0,
	0, 0, 0, 0, 0, 0, 537, 538, 535, 632,
	0, 595, 596, 0, 0, 462, 463, 329, 336, 481,
	338, 300, 386, 331, 447, 345, 0, 474, 539, 475,
	598, 601, 599, 600, 378, 341, 342, 410, 346, 356,
	399, 446, 384, 404, 298, 437, 411, 360, 525, 552,
	863, 837, 862, 864, 865, 861, 866, 867, 848, 742,
	0, 793, 859, 858, 860, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 580, 579, 578, 577,
	576, 575, 574, 573, 0, 0, 522, 424, 310, 272,
	306, 307, 314, 621, 618, 428, 622, 0, 280, 502,
	354, 0, 395, 328, 567, 568, 0, 0, 826, 800,
	801, 802, 739, 803, 797, 798, 740, 799, 827, 791,
	823, 824, 767, 794, 804, 822, 805, 825, 828, 829,
	868, 869, 811, 795, 244, 870, 808, 830, 821, 820,
	806, 792, 831, 832, 774, 769, 809, 810, 796, 814,
	815, 816, 741, 788, 789, 790, 812, 813, 770, 771,
	772, 773, 0, 0, 0, 453, 454, 455, 477, 0,
	439, 501, 619, 0, 0, 0, 0, 0, 0, 0,
	551, 563, 597, 0, 607, 608, 610, 612, 817, 614,
	416, 784, 0, 625, 492, 493, 626, 603, 0, 734,
	383, 0, 507, 540, 529, 613, 495, 0, 0, 0,
	0, 0, 0, 737, 0, 0, 0, 323, 0, 0,
	353, 544, 526, 536, 527, 512, 513, 514, 521, 333,
	515, 516, 517, 487, 518, 488, 519, 520, 775, 543,
	494, 412, 367, 561, 560, 0, 0, 842, 850, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 765, 819, 818, 752, 762, 0, 0,
	296, 216, 489, 609, 491, 490, 753, 0, 754, 758,
	761, 757, 755, 756, 0, 834, 0, 0, 0, 0,
	0, 0, 721, 733, 0, 738, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 730,
	731, 0, 0, 0, 0, 785, 0, 732, 0, 0,
	780, 759, 763, 0, 0, 0, 0, 286, 418, 435,
	297, 408, 448, 302, 415, 292, 382, 405, 0, 0,
	288, 433, 414, 364, 343, 344, 287, 0, 400, 321,
	335, 318, 380, 760, 783, 787, 317, 856, 781, 443,
	290, 0, 442, 379, 429, 434, 365, 359, 289, 431,
	363, 358, 347, 325, 857, 348, 349, 339, 391, 357,
	392, 340, 369, 368, 370, 0, 0, 0, 0, 0,
	471, 472, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 602, 778, 0, 606, 0, 445,
	0, 0, 840, 0, 0, 0, 417, 0, 0, 350,
	0, 0, 0, 782, 0, 403, 385, 853, 0, 0,
	401, 355, 430, 393, 436, 419, 444, 397, 394, 281,
	420, 320, 366, 293, 295, 315, 322, 324, 326, 327,
	375, 376, 388, 407, 421, 422, 423, 319, 303, 402,
	304, 337, 305, 282, 311, 309, 312, 409, 313, 284,
	389, 427, 0, 332, 398, 362, 285, 361, 390, 426,
	425, 294, 452, 458, 459, 548, 0, 464, 629, 630,
	631, 473, 478, 479, 480, 482, 483, 484, 485, 549,
	566, 533, 503, 466, 557, 500, 504, 505, 569, 0,
	0, 0, 457, 351, 352, 0, 330, 278, 279, 624,
	838, 381, 571, 604, 605, 496, 0, 852, 833, 835,
	836, 839, 843, 844, 845, 846, 847, 849, 851, 855,
	623, 0, 550, 565, 627, 564, 620, 387, 0, 406,
	562, 509, 0, 554, 528, 0, 555, 524, 559, 0,
	498, 0, 413, 438, 450, 467, 470, 499, 584, 585,
	586, 283, 469, 588, 589, 590, 591, 592, 593, 594,
	587, 854, 531, 508, 534, 449, 511, 510, 0, 0,
	545, 786, 546, 547, 371, 372, 373, 374, 841, 572,
	301, 468, 396, 0, 532, 0, 0, 0, 0, 0,
	0, 0, 0, 537, 538, 535, 632, 0, 595, 596,
	0, 0, 462, 463, 329, 336, 481, 338, 300, 386,
	331, 447, 345, 0, 474, 539, 475, 598, 601, 599,
	600, 378, 341, 342, 410, 346, 356, 399, 446, 384,
	404, 298, 437, 411, 360, 525, 552, 863, 837, 862,
	864, 865, 861, 866, 867, 848, 742, 0, 793, 859,
	858, 860, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 580, 579, 578, 577, 576, 575, 574,
	573, 0, 0, 522, 424, 310, 272, 306, 307, 314,
	621, 618, 428, 622, 0, 280, 502, 354, 0, 395,
	328, 567, 568, 0, 0, 826, 800, 801, 802, 739,
	803, 797, 798, 740, 799, 827, 791, 823, 824, 767,
	794, 804, 822, 805, 825, 828, 829, 868, 869, 811,
	795, 244, 870, 808, 830, 821, 820, 806, 792, 831,
	832, 774, 769, 809, 810, 796, 814, 815, 816, 741,
	788, 789, 790, 812, 813, 770, 771, 772, 773, 0,
	0, 0, 453, 454, 455, 477, 0, 439, 501, 619,
	0, 0, 0, 0, 0, 0, 0, 551, 563, 597,
	0, 607, 608, 610, 612, 817, 614, 416, 0, 0,
	625, 492, 493, 626, 603, 0, 734, 193, 61, 184,
	156, 0, 0, 0, 0, 0, 0, 383, 0, 507,
	540, 529, 613, 495, 0, 185, 0, 0, 0, 0,
	0, 0, 177, 0, 323, 0, 186, 353, 544, 526,
	536, 527, 512, 513, 514, 521, 333, 515, 516, 517,
	487, 518, 488, 519, 520, 130, 543, 494, 412, 367,
	561, 560, 0, 0, 0, 0, 0, 0, 0, 0,
	118, 0, 0, 0, 0, 0, 0, 189, 0, 0,
	215, 0, 0, 0, 0, 0, 0, 296, 216, 489,
	609, 491, 490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 299, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 207, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 286, 418, 435, 297, 408, 448,
	302, 415, 292, 382, 405, 0, 0, 288, 433, 414,
	364, 343, 344, 287, 0, 400, 321, 335, 318, 380,
	0, 432, 460, 317, 451, 0, 443, 290, 0, 442,
	379, 429, 434, 365, 359, 289, 431, 363, 358, 347,
	325, 476, 348, 349, 339, 391, 357, 392, 340, 369,
	368, 370, 0, 0, 0, 0, 0, 471, 472, 0,
	0, 0, 0, 0, 0, 155, 183, 191, 0, 116,
	0, 602, 0, 0, 606, 0, 445, 0, 0, 208,
	0, 0, 0, 417, 0, 0, 350, 182, 176, 175,
	461, 0, 403, 385, 220, 0, 0, 401, 355, 430,
	393, 436, 419, 444, 397, 394, 281, 420, 320, 366,
	293, 295, 315, 322, 324, 326, 327, 375, 376, 388,
	407, 421, 422, 423, 319, 303, 402, 304, 337, 305,
	282, 311, 309, 312, 409, 313, 284, 389, 427, 0,
	332, 398, 362, 285, 361, 390, 426, 425, 294, 452,
	458, 459, 548, 0, 464, 581, 582, 583, 473, 478,
	479, 480, 482, 483, 484, 485, 549, 566, 533, 503,
	466, 557, 500, 504, 505, 569, 0, 0, 0, 457,
	351, 352, 0, 330, 278, 279, 440, 316, 381, 571,
	604, 605, 496, 0, 558, 497, 506, 308, 530, 542,
	541, 377, 456, 211, 553, 556, 486, 221, 0, 550,
	565, 523, 564, 222, 387, 0, 406, 562, 509, 0,
	554, 528, 0, 555, 524, 559, 0, 498, 0, 413,
	438, 450, 467, 470, 499, 584, 585, 586, 283, 469,
	588, 589, 590, 591, 592, 593, 594, 587, 441, 531,
	508, 534, 449, 511, 510, 0, 0, 545, 465, 546,
	547, 371, 372, 373, 374, 334, 572, 301, 468, 396,
	128, 532, 0, 0, 0, 0, 0, 0, 0, 0,
	537, 538, 535, 219, 0, 595, 596, 0, 0, 462,
	463, 329, 336, 481, 338, 300, 386, 331, 447, 345,
	0, 474, 539, 475, 598, 601, 599, 600, 378, 341,
	342, 410, 346, 356, 399, 446, 384, 404, 298, 437,
	411, 360, 525, 552, 0, 0, 0, 0, 0, 0,
	0, 0, 62, 0, 0, 267, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	580, 579, 578, 577, 576, 575, 574, 573, 0, 0,
	522, 424, 310, 272, 306, 307, 314, 226, 291, 428,
	227, 0, 280, 502, 354, 157, 395, 328, 567, 568,
	58, 0, 228, 229, 230, 231, 232, 233, 234, 235,
	273, 236, 237, 238, 239, 240, 241, 242, 245, 246,
	247, 248, 249, 250, 251, 252, 570, 243, 244, 253,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 0, 0, 0, 274, 275, 276, 277,
	0, 0, 268, 269, 270, 271, 0, 0, 0, 453,
	454, 455, 477, 0, 439, 501, 223, 45, 209, 212,
	214, 213, 0, 59, 551, 563, 597, 5, 607, 608,
	610, 612, 611, 614, 416, 193, 133, 224, 492, 493,
	225, 603, 0, 0, 0, 383, 0, 507, 540, 529,
	613, 495, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 323, 0, 0, 353, 544, 526, 536, 527,
	512, 513, 514, 521, 333, 515, 516, 517, 487, 518,
	488, 519, 520, 130, 543, 494, 412, 367, 561, 560,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 189, 0, 0, 215, 0,
	0, 0, 0, 0, 0, 296, 216, 489, 609, 491,
	490, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	299, 2329, 2332, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 286, 418, 435, 297, 408, 448, 302, 415,
	292, 382, 405, 0, 0, 288, 433, 414, 364, 343,
	344, 287, 0, 400, 321, 335, 318, 380, 0, 432,
	460, 317, 451, 0, 443, 290, 0, 442, 379, 429,
	434, 365, 359, 289, 431, 363, 358, 347, 325, 476,
	348, 349, 339, 391, 357, 392, 340, 369, 368, 370,
	0, 0, 0, 0, 0, 471, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 602,
	0, 0, 606, 2333, 445, 0, 0, 0, 2328, 0,
	2327, 417, 2325, 2330, 350, 0, 0, 0, 461, 0,
	403, 385, 628, 0, 0, 401, 355, 430, 393, 436,
	419, 444, 397, 394, 281, 420, 320, 366, 293, 295,
	315, 322, 324, 326, 327, 375, 376, 388, 407, 421,
	422, 423, 319, 303, 402, 304, 337, 305, 282, 311,
	309, 312, 409, 313, 284, 389, 427, 2331, 332, 398,
	362, 285, 361, 390, 426, 425, 294, 452, 458, 459,
	548, 0, 464, 629, 630, 631, 473, 478, 479, 480,
	482, 483, 484, 485, 549, 566, 533, 503, 466, 557,
	500, 504, 505, 569, 0, 0, 0, 457, 351, 352,
	0, 330, 278, 279, 624, 316, 381, 571, 604, 605,
	496, 0, 558, 497, 506, 308, 530, 542, 541, 377,
	456, 0, 553, 556, 486, 623, 0, 550, 565, 627,
	564, 620, 387, 0, 406, 562, 509, 0, 554, 528,
	0, 555, 524, 559, 0, 498, 0, 413, 438, 450,
	467, 470, 499, 584, 585, 586, 283, 469, 588, 589,
	590, 591, 592, 593, 594, 587, 441, 531, 508, 534,
	449, 511, 510, 0, 0, 545, 465, 546, 547, 371,
	372, 373, 374, 334, 572, 301, 468, 396, 0, 532,
	0, 0, 0, 0, 0, 0, 0, 0, 537, 538,
	535, 632, 0, 595, 596, 0, 0, 462, 463, 329,
	336, 481, 338, 300, 386, 331, 447, 345, 0, 474,
	539, 475, 598, 601, 599, 600, 378, 341, 342, 410,
	346, 356, 399, 446, 384, 404, 298, 437, 411, 360,
	525, 552, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 267, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 580, 579,
	578, 577, 576, 575, 574, 573, 0, 0, 522, 424,
	310, 272, 306, 307, 314, 621, 618, 428, 622, 0,
	280, 502, 354, 157, 395, 328, 567, 568, 0, 0,
	228, 229, 230, 231, 232, 233, 234, 235, 273, 236,
	237, 238, 239, 240, 241, 242, 245, 246, 247, 248,
	249, 250, 251, 252, 570, 243, 244, 253, 254, 255,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 0, 0, 0, 274, 275, 276, 277, 0, 0,
	268, 269, 270, 271, 0, 0, 0, 453, 454, 455,
	477, 0, 439, 501, 619, 0, 0, 0, 0, 0,
	0, 0, 551, 563, 597, 0, 607, 608, 610, 612,
	611, 614, 416, 0, 0, 625, 492, 493, 626, 603,
	383, 0, 507, 540, 529, 613, 495, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 323, 0, 0,
	353, 544, 526, 536, 527, 512, 513, 514, 521, 333,
	515, 516, 517, 487, 518, 488, 519, 520, 0, 543,
	494, 412, 367, 561, 560, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1277, 0, 0, 215, 0, 0, 752, 762, 0, 0,
	296, 216, 489, 609, 491, 490, 753, 0, 754, 758,
	761, 757, 755, 756, 0, 299, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 759, 0, 0, 0, 0, 0, 286, 418, 435,
	297, 408, 448, 302, 415, 292, 382, 405, 0, 0,
	288, 433, 414, 364, 343, 344, 287, 0, 400, 321,
	335, 318, 380, 760, 432, 460, 317, 451, 0, 443,
	290, 0, 442, 379, 429, 434, 365, 359, 289, 431,
	363, 358, 347, 325, 476, 348, 349, 339, 391, 357,
	392, 340, 369, 368, 370, 0, 0, 0, 0, 0,
	471, 472, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 602, 0, 0, 606, 0, 445,
	0, 0, 0, 0, 0, 0, 417, 0, 0, 350,
	0, 0, 0, 461, 0, 403, 385, 628, 0, 0,
	401, 355, 430, 393, 436, 419, 444, 397, 394, 281,
	420, 320, 366, 293, 295, 315, 322, 324, 326, 327,
	375, 376, 388, 407, 421, 422, 423, 319, 303, 402,
	304, 337, 305, 282, 311, 309, 312, 409, 313, 284,
	389, 427, 0, 332, 398, 362, 285, 361, 390, 426,
	425, 294, 452, 458, 459, 548, 0, 464, 629, 630,
	631, 473, 478, 479, 480, 482, 483, 484, 485, 549,
	566, 533, 503, 466, 557, 500, 504, 505, 569, 0,
	0, 0, 457, 351, 352, 0, 330, 278, 279, 624,
	316, 381, 571, 604, 605, 496, 0, 558, 497, 506,
	308, 530, 542, 541, 377, 456, 0, 553, 556, 486,
	623, 0, 550, 565, 627, 564, 620, 387, 0, 406,
	562, 509, 0, 554, 528, 0, 555, 524, 559, 0,
	498, 0, 413, 438, 450, 467, 470, 499, 584, 585,
	586, 283, 469, 588, 589, 590, 591, 592, 593, 594,
	587, 441, 531, 508, 534, 449, 511, 510, 0, 0,
	545, 465, 546, 547, 371, 372, 373, 374, 334, 572,
	301, 468, 396, 0, 532, 0, 0, 0, 0, 0,
	0, 0, 0, 537, 538, 535, 632, 0, 595, 596,
	0, 0, 462, 463, 329, 336, 481, 338, 300, 386,
	331, 447, 345, 0, 474, 539, 475, 598, 601, 599,
	600, 378, 341, 342, 410, 346, 356, 399, 446, 384,
	404, 298, 437, 411, 360, 525, 552, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 267, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 580, 579, 578, 577, 576, 575, 574,
	573, 0, 0, 522, 424, 310, 272, 306, 307, 314,
	621, 618, 428, 622, 0, 280, 502, 354, 0, 395,
	328, 567, 568, 0, 0, 228, 229, 230, 231, 232,
	233, 234, 235, 273, 236, 237, 238, 239, 240, 241,
	242, 245, 246, 247, 248, 249, 250, 251, 252, 570,
	243, 244, 253, 254, 255, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 266, 0, 0, 0, 274,
	275, 276, 277, 0, 0, 268, 269, 270, 271, 0,
	0, 0, 453, 454, 455, 477, 0, 439, 501, 619,
	0, 0, 0, 0, 0, 0, 0, 551, 563, 597,
	0, 607, 608, 610, 612, 611, 614, 416, 0, 0,
	625, 492, 493, 626, 603, 193, 61, 184, 156, 0,
	0, 0, 0, 0, 0, 383, 651, 507, 540, 529,
	613, 495, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 323, 0, 0, 353, 544, 526, 536, 527,
	512, 513, 514, 521, 333, 515, 516, 517, 487, 518,
	488, 519, 520, 0, 543, 494, 412, 367, 561, 560,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 657,
	0, 0, 0, 0, 0, 656, 0, 0, 215, 0,
	0, 0, 0, 0, 0, 296, 216, 489, 609, 491,
	490, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	299, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 286, 418, 435, 297, 408, 448, 302, 415,
	292, 382, 405, 0, 0, 288, 433, 414, 364, 343,
	344, 287, 0, 400, 321, 335, 318, 380, 0, 432,
	460, 317, 451, 0, 443, 290, 0, 442, 379, 429,
	434, 365, 359, 289, 431, 363, 358, 347, 325, 476,
	348, 349, 339, 391, 357, 392, 340, 369, 368, 370,
	0, 0, 0, 0, 0, 471, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 655, 0, 602,
	0, 0, 606, 0, 445, 0, 0, 0, 0, 0,
	0, 417, 0, 0, 350, 0, 0, 0, 461, 0,
	403, 385, 628, 0, 0, 401, 355, 430, 393, 436,
	419, 444, 397, 394, 281, 420, 320, 366, 293, 295,
	315, 322, 324, 326, 327, 375, 376, 388, 407, 421,
	422, 423, 319, 303, 402, 304, 337, 305, 282, 311,
	309, 312, 409, 313, 284, 389, 427, 0, 332, 398,
	362, 285, 361, 390, 426, 425, 294, 452, 458, 459,
	548, 0, 464, 629, 630, 631, 473, 478, 479, 480,
	482, 483, 484, 485, 549, 566, 533, 503, 466, 557,
	500, 504, 505, 569, 0, 0, 0, 457, 351, 352,
	0, 330, 278, 279, 624, 316, 381, 571, 604, 605,
	496, 0, 558, 497, 506, 308, 530, 542, 541, 377,
	456, 0, 553, 556, 486, 623, 0, 550, 565, 627,
	564, 620, 387, 0, 406, 562, 509, 0, 554, 528,
	0, 555, 524, 559, 0, 498, 0, 413, 438, 450,
	467, 470, 499, 584, 585, 586, 283, 469, 588, 589,
	590, 591, 592, 593, 594, 587, 441, 531, 508, 534,
	449, 511, 510, 0, 0, 545, 465, 546, 547, 371,
	372, 373, 374, 652, 654, 301, 468, 396, 665, 532,
	0, 0, 0, 0, 0, 0, 0, 0, 537, 538,
	535, 632, 0, 595, 596, 0, 0, 462, 463, 329,
	336, 481, 338, 300, 386, 331, 447, 345, 0, 474,
	539, 475, 598, 601, 599, 600, 378, 341, 342, 410,
	346, 356, 399, 446, 384, 404, 298, 437, 411, 360,
	525, 552, 0, 0, 0, 0, 0, 0, 0, 0,
	62, 0, 0, 267, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 580, 579,
	578, 577, 576, 575, 574, 573, 0, 0, 522, 424,
	310, 272, 306, 307, 314, 621, 618, 428, 622, 0,
	280, 502, 354, 157, 395, 328, 567, 568, 0, 0,
	228, 229, 230, 231, 232, 233, 234, 235, 273, 236,
	237, 238, 239, 240, 241, 242, 245, 246, 247, 248,
	249, 250, 251, 252, 570, 243, 244, 253, 254, 255,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 0, 0, 0, 274, 275, 276, 277, 0, 0,
	268, 269, 270, 271, 0, 0, 0, 453, 454, 455,
	477, 0, 439, 501, 619, 0, 0, 0, 0, 0,
	0, 0, 551, 563, 597, 0, 607, 608, 610, 612,
	611, 614, 416, 0, 0, 625, 492, 493, 626, 603,
	383, 0, 507, 540, 529, 613, 495, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 323, 0, 0,
	353, 544, 526, 536, 527, 512, 513, 514, 521, 333,
	515, 516, 517, 487, 518, 488, 519, 520, 0, 543,
	494, 412, 367, 561, 560, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 0, 0, 0, 0, 0, 0,
	296, 216, 489, 609, 491, 490, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 2329, 2332, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 286, 418, 435,
	297, 408, 448, 302, 415, 292, 382, 405, 0, 0,
	288, 433, 414, 364, 343, 344, 287, 0, 400, 321,
	335, 318, 380, 0, 432, 460, 317, 451, 0, 443,
	290, 0, 442, 379, 429, 434, 365, 359, 289, 431,
	363, 358, 347, 325, 476, 348, 349, 339, 391, 357,
	392, 340, 369, 368, 370, 0, 0, 0, 0, 0,
	471, 472, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 602, 0, 0, 606, 2333, 445,
	0, 0, 0, 2328, 0, 2327, 417, 2325, 2330, 350,
	0, 0, 0, 461, 0, 403, 385, 628, 0, 0,
	401, 355, 430, 393, 436, 419, 444, 397, 394, 281,
	420, 320, 366, 293, 295, 315, 322, 324, 326, 327,
	375, 376, 388, 407, 421, 422, 423, 319, 303, 402,
	304, 337, 305, 282, 311, 309, 312, 409, 313, 284,
	389, 427, 2331, 332, 398, 362, 285, 361, 390, 426,
	425, 294, 452, 458, 459, 548, 0, 464, 629, 630,
	631, 473, 478, 479, 480, 482, 483, 484, 485, 549,
	566, 533, 503, 466, 557, 500, 504, 505, 569, 0,
	0, 0, 457, 351, 352, 0, 330, 278, 279, 624,
	316, 381, 571, 604, 605, 496, 0, 558, 497, 506,
	308, 530, 542, 541, 377, 456, 0, 553, 556, 486,
	623, 0, 550, 565, 627, 564, 620, 387, 0, 406,
	562, 509, 0, 554, 528, 0, 555, 524, 559, 0,
	498, 0, 413, 438, 450, 467, 470, 499, 584, 585,
	586, 283, 469, 588, 589, 590, 591, 592, 593, 594,
	587, 441, 531, 508, 534, 449, 511, 510, 0, 0,
	545, 465, 546, 547, 371, 372, 373, 374, 334, 572,
	301, 468, 396, 0, 532, 0, 0, 0, 0, 0,
	0, 0, 0, 537, 538, 535, 632, 0, 595, 596,
	0, 0, 462, 463, 329, 336, 481, 338, 300, 386,
	331, 447, 345, 0, 474, 539, 475, 598, 601, 599,
	600, 378, 341, 342, 410, 346, 356, 399, 446, 384,
	404, 298, 437, 411, 360, 525, 552, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 267, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 580, 579, 578, 577, 576, 575, 574,
	573, 0, 0, 522, 424, 310, 272, 306, 307, 314,
	621, 618, 428, 622, 0, 280, 502, 354, 0, 395,
	328, 567, 568, 0, 0, 228, 229, 230, 231, 232,
	233, 234, 235, 273, 236, 237, 238, 239, 240, 241,
	242, 245, 246, 247, 248, 249, 250, 251, 252, 570,
	243, 244, 253, 254, 255, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 266, 0, 0, 0, 274,
	275, 276, 277, 0, 0, 268, 269, 270, 271, 0,
	0, 0, 453, 454, 455, 477, 0, 439, 501, 619,
	0, 0, 0, 0, 0, 0, 0, 551, 563, 597,
	0, 607, 608, 610, 612, 611, 614, 416, 0, 0,
	625, 492, 493, 626, 603, 383, 0, 507, 540, 529,
	613, 495, 0, 1090, 0, 0, 0, 0, 0, 0,
	0, 0, 323, 0, 0, 353, 544, 526, 536, 527,
	512, 513, 514, 521, 333, 515, 516, 517, 487, 518,
	488, 519, 520, 0, 543, 494, 412, 367, 561, 560,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 0, 0, 296, 216, 489, 609, 491,
	490, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	299, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1076, 0, 0, 0, 0,
	0, 0, 286, 418, 435, 297, 408, 448, 302, 415,
	292, 382, 405, 0, 0, 2481, 2484, 2485, 2486, 2487,
	2488, 2489, 0, 2494, 2490, 2491, 2492, 2493, 0, 2476,
	2477, 2478, 2479, 1074, 2460, 2482, 0, 2461, 379, 2462,
	2463, 2464, 2465, 2466, 2467, 2468, 2469, 2470, 2473, 2474,
	2471, 2472, 2480, 391, 357, 392, 340, 369, 368, 370,
	1101, 1103, 1105, 1107, 1110, 471, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 602,
	0, 0, 606, 0, 445, 0, 0, 0, 0, 0,
	0, 417, 0, 0, 350, 0, 0, 0, 2475, 0,
	403, 385, 628, 0, 0, 401, 355, 430, 393, 436,
	419, 444, 397, 394, 281, 420, 320, 366, 293, 295,
	315, 322, 324, 326, 327, 375, 376, 388, 407, 421,
	422, 423, 319, 303, 402, 304, 337, 305, 282, 311,
	309, 312, 409, 313, 284, 389, 427, 0, 332, 398,
	362, 285, 361, 390, 426, 425, 294, 452, 458, 459,
	548, 0, 464, 629, 630, 631, 473, 478, 479, 480,
	482, 483, 484, 485, 549, 566, 533, 503, 466, 557,
	500, 504, 505, 569, 0, 0, 0, 457, 351, 352,
	0, 330, 278, 279, 624, 316, 381, 571, 604, 605,
	496, 0, 558, 497, 506, 308, 530, 542, 541, 377,
	456, 0, 553, 556, 486, 623, 0, 550, 565, 627,
	564, 620, 387, 0, 406, 562, 509, 0, 554, 528,
	0, 555, 524, 559, 0, 498, 0, 413, 438, 450,
	467, 470, 499, 584, 585, 586, 283, 469, 588, 589,
	590, 591, 592, 593, 594, 587, 441, 531, 508, 534,
	449, 511, 510, 0, 0, 545, 465, 546, 547, 371,
	372, 373, 374, 334, 572, 301, 468, 396, 0, 532,
	0, 0, 0, 0, 0, 0, 0, 0, 537, 538,
	535, 632, 0, 595, 596, 0, 0, 462, 463, 329,
	336, 481, 338, 300, 386, 331, 447, 345, 0, 474,
	539, 475, 598, 601, 599, 600, 378, 341, 342, 410,
	346, 356, 399, 446, 384, 404, 298, 437, 411, 360,
	525, 552, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 267, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 580, 579,
	578, 577, 576, 575, 574, 573, 0, 0, 522, 424,
	310, 272, 306, 307, 314, 621, 618, 428, 622, 0,
	280, 2483, 354, 0, 395, 328, 567, 568, 0, 0,
	228, 229, 230, 231, 232, 233, 234, 235, 273, 236,
	237, 238, 239, 240, 241, 242, 245, 246, 247, 248,
	249, 250, 251, 252, 570, 243, 244, 253, 254, 255,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 0, 0, 0, 274, 275, 276, 277, 0, 0,
	268, 269, 270, 271, 0, 0, 0, 453, 454, 455,
	477, 0, 439, 501, 619, 0, 0, 0, 0, 0,
	0, 0, 551, 563, 597, 0, 607, 608, 610, 612,
	611, 614, 416, 0, 0, 625, 492, 493, 626, 603,
	383, 0, 507, 540, 529, 613, 495, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 323, 0, 0,
	353, 544, 526, 536, 527, 512, 513, 514, 521, 333,
	515, 516, 517, 487, 518, 488, 519, 520, 0, 543,
	494, 412, 367, 561, 560, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 0, 0, 0, 0, 0, 0,
	296, 216, 489, 609, 491, 490, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 0, 2350, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 286, 418, 435,
	297, 408, 448, 302, 415, 292, 382, 405, 0, 0,
	288, 433, 414, 364, 343, 344, 287, 0, 400, 321,
	335, 318, 380, 0, 432, 460, 317, 451, 0, 443,
	290, 0, 442, 379, 429, 434, 365, 359, 289, 431,
	363, 358, 347, 325, 476, 348, 349, 339, 391, 357,
	392, 340, 369, 368, 370, 0, 0, 0, 0, 0,
	471, 472, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 602, 0, 0, 606, 2349, 445,
	0, 0, 0, 2355, 2352, 2354, 417, 0, 2353, 350,
	0, 0, 0, 461, 0, 403, 385, 628, 0, 2347,
	401, 355, 430, 393, 436, 419, 444, 397, 394, 281,
	420, 320, 366, 293, 295, 315, 322, 324, 326, 327,
	375, 376, 388, 407, 421, 422, 423, 319, 303, 402,
	304, 337, 305, 282, 311, 309, 312, 409, 313, 284,
	389, 427, 0, 332, 398, 362, 285, 361, 390, 426,
	425, 294, 452, 458, 459, 548, 0, 464, 629, 630,
	631, 473, 478, 479, 480, 482, 483, 484, 485, 549,
	566, 533, 503, 466, 557, 500, 504, 505, 569, 0,
	0, 0, 457, 351, 352, 0, 330, 278, 279, 624,
	316, 381, 571, 604, 605, 496, 0, 558, 497, 506,
	308, 530, 542, 541, 377, 456, 0, 553, 556, 486,
	623, 0, 550, 565, 627, 564, 620, 387, 0, 406,
	562, 509, 0, 554, 528, 0, 555, 524, 559, 0,
	498, 0, 413, 438, 450, 467, 470, 499, 584, 585,
	586, 283, 469, 588, 589, 590, 591, 592, 593, 594,
	587, 441, 531, 508, 534, 449, 511, 510, 0, 0,
	545, 465, 546, 547, 371, 372, 373, 374, 334, 572,
	301, 468, 396, 0, 532, 0, 0, 0, 0, 0,
	0, 0, 0, 537, 538, 535, 632, 0, 595, 596,
	0, 0, 462, 463, 329, 336, 481, 338, 300, 386,
	331, 447, 345, 0, 474, 539, 475, 598, 601, 599,
	600, 378, 341, 342, 410, 346, 356, 399, 446, 384,
	404, 298, 437, 411, 360, 525, 552, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 267, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 580, 579, 578, 577, 576, 575, 574,
	573, 0, 0, 522, 424, 310, 272, 306, 307, 314,
	621, 618, 428, 622, 0, 280, 502, 354, 0, 395,
	328, 567, 568, 0, 0, 228, 229, 230, 231, 232,
	233, 234, 235, 273, 236, 237, 238, 239, 240, 241,
	242, 245, 246, 247, 248, 249, 250, 251, 252, 570,
	243, 244, 253, 254, 255, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 266, 0, 0, 0, 274,
	275, 276, 277, 0, 0, 268, 269, 270, 271, 0,
	0, 0, 453, 454, 455, 477, 0, 439, 501, 619,
	0, 0, 0, 0, 0, 0, 0, 551, 563, 597,
	0, 607, 608, 610, 612, 611, 614, 416, 0, 0,
	625, 492, 493, 626, 603, 383, 0, 507, 540, 529,
	613, 495, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 323, 0, 0, 353, 544, 526, 536, 527,
	512, 513, 514, 521, 333, 515, 516, 517, 487, 518,
	488, 519, 520, 0, 543, 494, 412, 367, 561, 560,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 0, 0, 296, 216, 489, 609, 491,
	490, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	299, 0, 2350, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 286, 418, 435, 297, 408, 448, 302, 415,
	292, 382, 405, 0, 0, 288, 433, 414, 364, 343,
	344, 287, 0, 400, 321, 335, 318, 380, 0, 432,
	460, 317, 451, 0, 443, 290, 0, 442, 379, 429,
	434, 365, 359, 289, 431, 363, 358, 347, 325, 476,
	348, 349, 339, 391, 357, 392, 340, 369, 368, 370,
	0, 0, 0, 0, 0, 471, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 602,
	0, 0, 606, 2349, 445, 0, 0, 0, 2355, 2352,
	2354, 417, 0, 2353, 350, 0, 0, 0, 461, 0,
	403, 385, 628, 0, 0, 401, 355, 430, 393, 436,
	419, 444, 397, 394, 281, 420, 320, 366, 293, 295,
	315, 322, 324, 326, 327, 375, 376, 388, 407, 421,
	422, 423, 319, 303, 402, 304, 337, 305, 282, 311,
	309, 312, 409, 313, 284, 389, 427, 0, 332, 398,
	362, 285, 361, 390, 426, 425, 294, 452, 458, 459,
	548, 0, 464, 629, 630, 631, 473, 478, 479, 480,
	482, 483, 484, 485, 549, 566, 533, 503, 466, 557,
	500, 504, 505, 569, 0, 0, 0, 457, 351, 352,
	0, 330, 278, 279, 624, 316, 381, 571, 604, 605,
	496, 0, 558, 497, 506, 308, 530, 542, 541, 377,
	456, 0, 553, 556, 486, 623, 0, 550, 565, 627,
	564, 620, 387, 0, 406, 562, 509, 0, 554, 528,
	0, 555, 524, 559, 0, 498, 0, 413, 438, 450,
	467, 470, 499, 584, 585, 586, 283, 469, 588, 589,
	590, 591, 592, 593, 594, 587, 441, 531, 508, 534,
	449, 511, 510, 0, 0, 545, 465, 546, 547, 371,
	372, 373, 374, 334, 572, 301, 468, 396, 0, 532,
	0, 0, 0, 0, 0, 0, 0, 0, 537, 538,
	535, 632, 0, 595, 596, 0, 0, 462, 463, 329,
	336, 481, 338, 300, 386, 331, 447, 345, 0, 474,
	539, 475, 598, 601, 599, 600, 378, 341, 342, 410,
	346, 356, 399, 446, 384, 404, 298, 437, 411, 360,
	525, 552, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 267, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 580, 579,
	578, 577, 576, 575, 574, 573, 0, 0, 522, 424,
	310, 272, 306, 307, 314, 621, 618, 428, 622, 0,
	280, 502, 354, 0, 395, 328, 567, 568, 0, 0,
	228, 229, 230, 231, 232, 233, 234, 235, 273, 236,
	237, 238, 239, 240, 241, 242, 245, 246, 247, 248,
	249, 250, 251, 252, 570, 243, 244, 253, 254, 255,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 0, 0, 0, 274, 275, 276, 277, 0, 0,
	268, 269, 270, 271, 0, 0, 0, 453, 454, 455,
	477, 0, 439, 501, 619, 0, 0, 0, 0, 0,
	0, 0, 551, 563, 597, 0, 607, 608, 610, 612,
	611, 614, 416, 0, 0, 625, 492, 493, 626, 603,
	383, 0, 507, 540, 529, 613, 495, 0, 0, 0,
	0, 0, 2049, 0, 0, 0, 0, 323, 0, 0,
	353, 544, 526, 536, 527, 512, 513, 514, 521, 333,
	515, 516, 517, 487, 518, 488, 519, 520, 0, 543,
	494, 412, 367, 561, 560, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 0, 0, 2050, 0, 0, 0,
	296, 216, 489, 609, 491, 490, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 0, 0, 1207, 1208,
	1209, 1206, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 286, 418, 435,
	297, 408, 448, 302, 415, 292, 382, 405, 0, 0,
	288, 433, 414, 364, 343, 344, 287, 0, 400, 321,
	335, 318, 380, 0, 432, 460, 317, 451, 0, 443,
	290, 0, 442, 379, 429, 434, 365, 359, 289, 431,
	363, 358, 347, 325, 476, 348, 349, 339, 391, 357,
	392, 340, 369, 368, 370, 0, 0, 0, 0, 0,
	471, 472, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 602, 0, 0, 606, 0, 445,
	0, 0, 0, 0, 0, 0, 417, 0, 0, 350,
	0, 0, 0, 461, 0, 403, 385, 628, 0, 0,
	401, 355, 430, 393, 436, 419, 444, 397, 394, 281,
	420, 320, 366, 293, 295, 315, 322, 324, 326, 327,
	375, 376, 388, 407, 421, 422, 423, 319, 303, 402,
	304, 337, 305, 282, 311, 309, 312, 409, 313, 284,
	389, 427, 0, 332, 398, 362, 285, 361, 390, 426,
	425, 294, 452, 458, 459, 548, 0, 464, 629, 630,
	631, 473, 478, 479, 480, 482, 483, 484, 485, 549,
	566, 533, 503, 466, 557, 500, 504, 505, 569, 0,
	0, 0, 457, 351, 352, 0, 330, 278, 279, 624,
	316, 381, 571, 604, 605, 496, 0, 558, 497, 506,
	308, 530, 542, 541, 377, 456, 0, 553, 556, 486,
	623, 0, 550, 565, 627, 564, 620, 387, 0, 406,
	562, 509, 0, 554, 528, 0, 555, 524, 559, 0,
	498, 0, 413, 438, 450, 467, 470, 499, 584, 585,
	586, 283, 469, 588, 589, 590, 591, 592, 593, 594,
	587, 441, 531, 508, 534, 449, 511, 510, 0, 0,
	545, 465, 546, 547, 371, 372, 373, 374, 334, 572,
	301, 468, 396, 0, 532, 0, 0, 0, 0, 0,
	0, 0, 0, 537, 538, 535, 632, 0, 595, 596,
	0, 0, 462, 463, 329, 336, 481, 338, 300, 386,
	331, 447, 345, 0, 474, 539, 475, 598, 601, 599,
	600, 378, 341, 342, 410, 346, 356, 399, 446, 384,
	404, 298, 437, 411, 360, 525, 552, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 267, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 580, 579, 578, 577, 576, 575, 574,
	573, 0, 0, 522, 424, 310, 272, 306, 307, 314,
	621, 618, 428, 622, 0, 280, 502, 354, 0, 395,
	328, 567, 568, 0, 0, 228, 229, 230, 231, 232,
	233, 234, 235, 273, 236, 237, 238, 239, 240, 241,
	242, 245, 246, 247, 248, 249, 250, 251, 252, 570,
	243, 244, 253, 254, 255, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 266, 0, 0, 0, 274,
	275, 276, 277, 0, 0, 268, 269, 270, 271, 0,
	0, 0, 453, 454, 455, 477, 0, 439, 501, 619,
	0, 0, 0, 0, 0, 0, 0, 551, 563, 597,
	0, 607, 608, 610, 612, 611, 614, 416, 193, 0,
	625, 492, 493, 626, 603, 0, 0, 0, 383, 0,
	507, 540, 529, 613, 495, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 323, 0, 0, 353, 544,
	526, 536, 527, 512, 513, 514, 521, 333, 515, 516,
	517, 487, 518, 488, 519, 520, 130, 543, 494, 412,
	367, 561, 560, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 189, 2099,
	0, 215, 0, 0, 0, 0, 0, 0, 296, 216,
	489, 609, 491, 490, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 286, 418, 435, 297, 408,
	448, 302, 415, 292, 382, 405, 0, 0, 288, 433,
	414, 364, 343, 344, 287, 0, 400, 321, 335, 318,
	380, 0, 432, 460, 317, 451, 0, 443, 290, 0,
	442, 379, 429, 434, 365, 359, 289, 431, 363, 358,
	347, 325, 476, 348, 349, 339, 391, 357, 392, 340,
	369, 368, 370, 0, 0, 0, 0, 0, 471, 472,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 602, 0, 0, 606, 0, 445, 0, 0,
	0, 0, 0, 0, 417, 0, 0, 350, 0, 0,
	0, 461, 0, 403, 385, 628, 0, 0, 401, 355,
	430, 393, 436, 419, 444, 397, 394, 281, 420, 320,
	366, 293, 295, 315, 322, 324, 326, 327, 375, 376,
	388, 407, 421, 422, 423, 319, 303, 402, 304, 337,
	305, 282, 311, 309, 312, 409, 313, 284, 389, 427,
	0, 332, 398, 362, 285, 361, 390, 426, 425, 294,
	452, 458, 459, 548, 0, 464, 629, 630, 631, 473,
	478, 479, 480, 482, 483, 484, 485, 549, 566, 533,
	503, 466, 557, 500, 504, 505, 569, 0, 0, 0,
	457, 351, 352, 0, 330, 278, 279, 624, 316, 381,
	571, 604, 605, 496, 0, 558, 497, 506, 308, 530,
	542, 541, 377, 456, 0, 553, 556, 486, 623, 0,
	550, 565, 627, 564, 620, 387, 0, 406, 562, 509,
	0, 554, 528, 0, 555, 524, 559, 0, 498, 0,
	413, 438, 450, 467, 470, 499, 584, 585, 586, 283,
	469, 588, 589, 590, 591, 592, 593, 594, 587, 441,
	531, 508, 534, 449, 511, 510, 0, 0, 545, 465,
	546, 547, 371, 372, 373, 374, 334, 572, 301, 468,
	396, 0, 532, 0, 0, 0, 0, 0, 0, 0,
	0, 537, 538, 535, 632, 0, 595, 596, 0, 0,
	462, 463, 329, 336, 481, 338, 300, 386, 331, 447,
	345, 0, 474, 539, 475, 598, 601, 599, 600, 378,
	341, 342, 410, 346, 356, 399, 446, 384, 404, 298,
	437, 411, 360, 525, 552, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 267, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 580, 579, 578, 577, 576, 575, 574, 573, 0,
	0, 522, 424, 310, 272, 306, 307, 314, 621, 618,
	428, 622, 0, 280, 502, 354, 157, 395, 328, 567,
	568, 0, 0, 228, 229, 230, 231, 232, 233, 234,
	235, 273, 236, 237, 238, 239, 240, 241, 242, 245,
	246, 247, 248, 249, 250, 251, 252, 570, 243, 244,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 0, 0, 0, 274, 275, 276,
	277, 0, 0, 268, 269, 270, 271, 0, 0, 0,
	453, 454, 455, 477, 0, 439, 501, 619, 0, 0,
	0, 0, 0, 0, 0, 551, 563, 597, 0, 607,
	608, 610, 612, 611, 614, 416, 193, 0, 625, 492,
	493, 626, 603, 0, 0, 0, 383, 0, 507, 540,
	529, 613, 495, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 323, 0, 0, 353, 544, 526, 536,
	527, 512, 513, 514, 521, 333, 515, 516, 517, 487,
	518, 488, 519, 520, 130, 543, 494, 412, 367, 561,
	560, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 189, 2085, 0, 215,
	0, 0, 0, 0, 0, 0, 296, 216, 489, 609,
	491, 490, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 286, 418, 435, 297, 408, 448, 302,
	415, 292, 382, 405, 0, 0, 288, 433, 414, 364,
	343, 344, 287, 0, 400, 321, 335, 318, 380, 0,
	432, 460, 317, 451, 0, 443, 290, 0, 442, 379,
	429, 434, 365, 359, 289, 431, 363, 358, 347, 325,
	476, 348, 349, 339, 391, 357, 392, 340, 369, 368,
	370, 0, 0, 0, 0, 0, 471, 472, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	602, 0, 0, 606, 0, 445, 0, 0, 0, 0,
	0, 0, 417, 0, 0, 350, 0, 0, 0, 461,
	0, 403, 385, 628, 0, 0, 401, 355, 430, 393,
	436, 419, 444, 397, 394, 281, 420, 320, 366, 293,
	295, 315, 322, 324, 326, 327, 375, 376, 388, 407,
	421, 422, 423, 319, 303, 402, 304, 337, 305, 282,
	311, 309, 312, 409, 313, 284, 389, 427, 0, 332,
	398, 362, 285, 361, 390, 426, 425, 294, 452, 458,
	459, 548, 0, 464, 629, 630, 631, 473, 478, 479,
	480, 482, 483, 484, 485, 549, 566, 533, 503, 466,
	557, 500, 504, 505, 569, 0, 0, 0, 457, 351,
	352, 0, 330, 278, 279, 624, 316, 381, 571, 604,
	605, 496, 0, 558, 497, 506, 308, 530, 542, 541,
	377, 456, 0, 553, 556, 486, 623, 0, 550, 565,
	627, 564, 620, 387, 0, 406, 562, 509, 0, 554,
	528, 0, 555, 524, 559, 0, 498, 0, 413, 438,
	450, 467, 470, 499, 584, 585, 586, 283, 469, 588,
	589, 590, 591, 592, 593, 594, 587, 441, 531, 508,
	534, 449, 511, 510, 0, 0, 545, 465, 546, 547,
	371, 372, 373, 374, 334, 572, 301, 468, 396, 0,
	532, 0, 0, 0, 0, 0, 0, 0, 0, 537,
	538, 535, 632, 0, 595, 596, 0, 0, 462, 463,
	329, 336, 481, 338, 300, 386, 331, 447, 345, 0,
	474, 539, 475, 598, 601, 599, 600, 378, 341, 342,
	410, 346, 356, 399, 446, 384, 404, 298, 437, 411,
	360, 525, 552, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 267, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 580,
	579, 578, 577, 576, 575, 574, 573, 0, 0, 522,
	424, 310, 272, 306, 307, 314, 621, 618, 428, 622,
	0, 280, 502, 354, 157, 395, 328, 567, 568, 0,
	0, 228, 229, 230, 231, 232, 233, 234, 235, 273,
	236, 237, 238, 239, 240, 241, 242, 245, 246, 247,
	248, 249, 250, 251, 252, 570, 243, 244, 253, 254,
	255, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 0, 0, 0, 274, 275, 276, 277, 0,
	0, 268, 269, 270, 271, 0, 0, 0, 453, 454,
	455, 477, 0, 439, 501, 619, 0, 0, 0, 0,
	0, 0, 0, 551, 563, 597, 0, 607, 608, 610,
	612, 611, 614, 416, 0, 0, 625, 492, 493, 626,
	603, 383, 0, 507, 540, 529, 613, 495, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 323, 1006,
	0, 353, 544, 526, 536, 527, 512, 513, 514, 521,
	333, 515, 516, 517, 487, 518, 488, 519, 520, 0,
	543, 494, 412, 367, 561, 560, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 1013, 1014, 0, 0, 0,
	0, 296, 216, 489, 609, 491, 490, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1017, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 286, 418,
	1001, 297, 408, 448, 302, 415, 292, 382, 405, 0,
	0, 288, 433, 414, 364, 343, 344, 287, 0, 400,
	321, 335, 318, 380, 0, 432, 460, 317, 451, 990,
	443, 290, 989, 442, 379, 429, 434, 365, 359, 289,
	431, 363, 358, 347, 325, 476, 348, 349, 339, 391,
	357, 392, 340, 369, 368, 370, 0, 0, 0, 0,
	0, 471, 472, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 602, 0, 0, 606, 0,
	445, 0, 0, 0, 0, 0, 0, 417, 0, 0,
	350, 0, 0, 0, 461, 0, 403, 385, 628, 0,
	0, 401, 355, 430, 393, 436, 419, 444, 1004, 394,
	281, 420, 320, 366, 293, 295, 315, 322, 324, 326,
	327, 375, 376, 388, 407, 421, 422, 423, 319, 303,
	402, 304, 337, 305, 282, 311, 309, 312, 409, 313,
	284, 389, 427, 0, 332, 398, 362, 285, 361, 390,
	426, 425, 294, 452, 458, 459, 548, 0, 464, 629,
	630, 631, 473, 478, 479, 480, 482, 483, 484, 485,
	549, 566, 533, 503, 466, 557, 500, 504, 505, 569,
	0, 0, 0, 457, 351, 352, 0, 330, 278, 279,
	624, 316, 381, 571, 604, 605, 496, 0, 558, 497,
	506, 308, 530, 542, 541, 377, 456, 0, 553, 556,
	486, 623, 0, 550, 565, 627, 564, 620, 387, 0,
	406, 562, 509, 0, 554, 528, 0, 555, 524, 559,
	0, 498, 0, 413, 438, 450, 467, 470, 499, 584,
	585, 586, 283, 469, 588, 589, 590, 591, 592, 593,
	1005, 587, 441, 531, 508, 534, 449, 511, 510, 0,
	0, 545, 1008, 546, 547, 371, 372, 373, 374, 334,
	572, 301, 468, 396, 0, 532, 0, 0, 0, 0,
	0, 0, 0, 0, 537, 538, 535, 632, 0, 595,
	596, 0, 0, 462, 463, 329, 336, 481, 338, 300,
	386, 331, 447, 345, 0, 474, 539, 475, 598, 601,
	599, 600, 1015, 1002, 1011, 1003, 346, 356, 399, 446,
	384, 404, 298, 437, 411, 1012, 525, 552, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 267,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 580, 579, 578, 577, 576, 575,
	574, 573, 0, 0, 522, 424, 310, 272, 306, 307,
	314, 621, 618, 428, 622, 0, 280, 502, 354, 0,
	395, 328, 567, 568, 0, 0, 228, 229, 230, 231,
	232, 233, 234, 235, 273, 236, 237, 238, 239, 240,
	241, 242, 245, 246, 247, 248, 249, 250, 251, 252,
	570, 243, 244, 253, 254, 255, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 0, 0, 0,
	274, 275, 276, 277, 0, 0, 268, 269, 270, 271,
	0, 0, 0, 453, 454, 455, 477, 0, 439, 501,
	619, 0, 0, 0, 0, 0, 0, 0, 551, 563,
	597, 0, 607, 608, 610, 612, 611, 614, 416, 193,
	0, 625, 492, 493, 626, 603, 0, 0, 0, 383,
	0, 507, 540, 529, 613, 495, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 323, 0, 0, 353,
	544, 526, 536, 527, 512, 513, 514, 521, 333, 515,
	516, 517, 487, 518, 488, 519, 520, 130, 543, 494,
	412, 367, 561, 560, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1982,
	0, 0, 215, 0, 0, 0, 0, 0, 0, 296,
	216, 489, 609, 491, 490, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 286, 418, 435, 297,
	408, 448, 302, 415, 292, 382, 405, 0, 0, 288,
	433, 414, 364, 343, 344, 287, 0, 400, 321, 335,
	318, 380, 0, 432, 460, 317, 451, 0, 443, 290,
	0, 442, 379, 429, 434, 365, 359, 289, 431, 363,
	358, 347, 325, 476, 348, 349, 339, 391, 357, 392,
	340, 369, 368, 370, 0, 0, 0, 0, 0, 471,
	472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 602, 0, 0, 606, 0, 445, 0,
	0, 0, 0, 0, 0, 417, 0, 0, 350, 0,
	0, 0, 461, 0, 403, 385, 628, 0, 0, 401,
	355, 430, 393, 436, 419, 444, 397, 394, 281, 420,
	320, 366, 293, 295, 315, 322, 324, 326, 327, 375,
	376, 388, 407, 421, 422, 423, 319, 303, 402, 304,
	337, 305, 282, 311, 309, 312, 409, 313, 284, 389,
	427, 0, 332, 398, 362, 285, 361, 390, 426, 425,
	294, 452, 458, 459, 548, 0, 464, 629, 630, 631,
	473, 478, 479, 480, 482, 483, 484, 485, 549, 566,
	533, 503, 466, 557, 500, 504, 505, 569, 0, 0,
	0, 457, 351, 352, 0, 330, 278, 279, 624, 316,
	381, 571, 604, 605, 496, 0, 558, 497, 506, 308,
	530, 542, 541, 377, 456, 0, 553, 556, 486, 623,
	0, 550, 565, 627, 564, 620, 387, 0, 406, 562,
	509, 0, 554, 528, 0, 555, 524, 559, 0, 498,
	0, 413, 438, 450, 467, 470, 499, 584, 585, 586,
	283, 469, 588, 589, 590, 591, 592, 593, 594, 587,
	441, 531, 508, 534, 449, 511, 510, 0, 0, 545,
	465, 546, 547, 371, 372, 373, 374, 334, 572, 301,
	468, 396, 0, 532, 0, 0, 0, 0, 0, 0,
	0, 0, 537, 538, 535, 632, 0, 595, 596, 0,
	0, 462, 463, 329, 336, 481, 338, 300, 386, 331,
	447, 345, 0, 474, 539, 475, 598, 601, 599, 600,
	378, 341, 342, 410, 346, 356, 399, 446, 384, 404,
	298, 437, 411, 360, 525, 552, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 580, 579, 578, 577, 576, 575, 574, 573,
	0, 0, 522, 424, 310, 272, 306, 307, 314, 621,
	618, 428, 622, 0, 280, 502, 354, 157, 395, 328,
	567, 568, 0, 0, 228, 229, 230, 231, 232, 233,
	234, 235, 273, 236, 237, 238, 239, 240, 241, 242,
	245, 246, 247, 248, 249, 250, 251, 252, 570, 243,
	244, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 0, 0, 0, 274, 275,
	276, 277, 0, 0, 268, 269, 270, 271, 0, 0,
	0, 453, 454, 455, 477, 0, 439, 501, 619, 0,
	0, 0, 0, 0, 0, 0, 551, 563, 597, 0,
	607, 608, 610, 612, 611, 614, 416, 0, 0, 625,
	492, 493, 626, 603, 383, 0, 507, 540, 529, 613,
	495, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 323, 0, 0, 353, 544, 526, 536, 527, 512,
	513, 514, 521, 333, 515, 516, 517, 487, 518, 488,
	519, 520, 0, 543, 494, 412, 367, 561, 560, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 1013, 1014,
	0, 0, 0, 0, 296, 216, 489, 609, 491, 490,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1017,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 418, 435, 297, 408, 448, 302, 415, 292,
	382, 405, 0, 0, 288, 433, 414, 364, 343, 344,
	287, 0, 400, 321, 335, 318, 380, 0, 432, 460,
	317, 451, 990, 443, 290, 989, 442, 379, 429, 434,
	365, 359, 289, 431, 363, 358, 347, 325, 476, 348,
	349, 339, 391, 357, 392, 340, 369, 368, 370, 0,
	0, 0, 0, 0, 471, 472, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 602, 0,
	0, 606, 0, 445, 0, 0, 0, 0, 0, 0,
	417, 0, 0, 350, 0, 0, 0, 461, 0, 403,
	385, 628, 0, 0, 401, 355, 430, 393, 436, 419,
	444, 397, 394, 281, 420, 320, 366, 293, 295, 315,
	322, 324, 326, 327, 375, 376, 388, 407, 421, 422,
	423, 319, 303, 402, 304, 337, 305, 282, 311, 309,
	312, 409, 313, 284, 389, 427, 0, 332, 398, 362,
	285, 361, 390, 426, 425, 294, 452, 458, 459, 548,
	0, 464, 629, 630, 631, 473, 478, 479, 480, 482,
	483, 484, 485, 549, 566, 533, 503, 466, 557, 500,
	504, 505, 569, 0, 0, 0, 457, 351, 352, 0,
	330, 278, 279, 624, 316, 381, 571, 604, 605, 496,
	0, 558, 497, 506, 308, 530, 542, 541, 377, 456,
	0, 553, 556, 486, 623, 0, 550, 565, 627, 564,
	620, 387, 0, 406, 562, 509, 0, 554, 528, 0,
	555, 524, 559, 0, 498, 0, 413, 438, 450, 467,
	470, 499, 584, 585, 586, 283, 469, 588, 589, 590,
	591, 592, 593, 594, 587, 441, 531, 508, 534, 449,
	511, 510, 0, 0, 545, 465, 546, 547, 371, 372,
	373, 374, 334, 572, 301, 468, 396, 0, 532, 0,
	0, 0, 0, 0, 0, 0, 0, 537, 538, 535,
	632, 0, 595, 596, 0, 0, 462, 463, 329, 336,
	481, 338, 300, 386, 331, 447, 345, 0, 474, 539,
	475, 598, 601, 599, 600, 1015, 2001, 1011, 2002, 346,
	356, 399, 446, 384, 404, 298, 437, 411, 1012, 525,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 267, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 580, 579, 578,
	577, 576, 575, 574, 573, 0, 0, 522, 424, 310,
	272, 306, 307, 314, 621, 618, 428, 622, 0, 280,
	502, 354, 0, 395, 328, 567, 568, 0, 0, 228,
	229, 230, 231, 232, 233, 234, 235, 273, 236, 237,
	238, 239, 240, 241, 242, 245, 246, 247, 248, 249,
	250, 251, 252, 570, 243, 244, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	0, 0, 0, 274, 275, 276, 277, 0, 0, 268,
	269, 270, 271, 0, 0, 0, 453, 454, 455, 477,
	0, 439, 501, 619, 0, 0, 0, 0, 0, 0,
	0, 551, 563, 597, 0, 607, 608, 610, 612, 611,
	614, 416, 0, 0, 625, 492, 493, 626, 603, 383,
	0, 507, 540, 529, 613, 495, 0, 0, 2858, 0,
	0, 0, 0, 0, 0, 0, 323, 0, 0, 353,
	544, 526, 536, 527, 512, 513, 514, 521, 333, 515,
	516, 517, 487, 518, 488, 519, 520, 0, 543, 494,
	412, 367, 561, 560, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 0, 0, 296,
	216, 489, 609, 491, 490, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 286, 418, 435, 297,
	408, 448, 302, 415, 292, 382, 405, 0, 0, 288,
	433, 414, 364, 343, 344, 287, 0, 400, 321, 335,
	318, 380, 0, 432, 460, 317, 451, 0, 443, 290,
	0, 442, 379, 429, 434, 365, 359, 289, 431, 363,
	358, 347, 325, 476, 348, 349, 339, 391, 357, 392,
	340, 369, 368, 370, 0, 0, 0, 0, 0, 471,
	472, 0, 0, 0, 0, 0, 0, 0, 0, 2861,
	0, 0, 2860, 602, 0, 0, 606, 0, 445, 0,
	0, 0, 0, 0, 0, 417, 0, 0, 350, 0,
	0, 0, 461, 0, 403, 385, 628, 0, 0, 401,
	355, 430, 393, 436, 419, 444, 397, 394, 281, 420,
	320, 366, 293, 295, 315, 322, 324, 326, 327, 375,
	376, 388, 407, 421, 422, 423, 319, 303, 402, 304,
	337, 305, 282, 311, 309, 312, 409, 313, 284, 389,
	427, 0, 332, 398, 362, 285, 361, 390, 426, 425,
	294, 452, 458, 459, 548, 0, 464, 629, 630, 631,
	473, 478, 479, 480, 482, 483, 484, 485, 549, 566,
	533, 503, 466, 557, 500, 504, 505, 569, 0, 0,
	0, 457, 351, 352, 0, 330, 278, 279, 624, 316,
	381, 571, 604, 605, 496, 0, 558, 497, 506, 308,
	530, 542, 541, 377, 456, 0, 553, 556, 486, 623,
	0, 550, 565, 627, 564, 620, 387, 0, 406, 562,
	509, 0, 554, 528, 0, 555, 524, 559, 0, 498,
	0, 413, 438, 450, 467, 470, 499, 584, 585, 586,
	283, 469, 588, 589, 590, 591, 592, 593, 594, 587,
	441, 531, 508, 534, 449, 511, 510, 0, 0, 545,
	465, 546, 547, 371, 372, 373, 374, 334, 572, 301,
	468, 396, 0, 532, 0, 0, 0, 0, 0, 0,
	0, 0, 537, 538, 535, 632, 0, 595, 596, 0,
	0, 462, 463, 329, 336, 481, 338, 300, 386, 331,
	447, 345, 0, 474, 539, 475, 598, 601, 599, 600,
	378, 341, 342, 410, 346, 356, 399, 446, 384, 404,
	298, 437, 411, 360, 525, 552, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 580, 579, 578, 577, 576, 575, 574, 573,
	0, 0, 522, 424, 310, 272, 306, 307, 314, 621,
	618, 428, 622, 0, 280, 502, 354, 0, 395, 328,
	567, 568, 0, 0, 228, 229, 230, 231, 232, 233,
	234, 235, 273, 236, 237, 238, 239, 240, 241, 242,
	245, 246, 247, 248, 249, 250, 251, 252, 570, 243,
	244, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 0, 0, 0, 274, 275,
	276, 277, 0, 0, 268, 269, 270, 271, 0, 0,
	0, 453, 454, 455, 477, 0, 439, 501, 619, 0,
	0, 0, 0, 0, 0, 0, 551, 563, 597, 0,
	607, 608, 610, 612, 611, 614, 416, 0, 0, 625,
	492, 493, 626, 603, 383, 0, 507, 540, 529, 613,
	495, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 323, 1486, 0, 353, 544, 526, 536, 527, 512,
	513, 514, 521, 333, 515, 516, 517, 487, 518, 488,
	519, 520, 0, 543, 494, 412, 367, 561, 560, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 0, 0,
	1484, 0, 0, 0, 296, 216, 489, 609, 491, 490,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1482, 0, 0, 0, 0, 0,
	0, 286, 418, 435, 297, 408, 448, 302, 415, 292,
	382, 405, 0, 0, 288, 433, 414, 364, 343, 344,
	287, 0, 400, 321, 335, 318, 380, 0, 432, 460,
	317, 451, 0, 443, 290, 0, 442, 379, 429, 434,
	365, 359, 289, 431, 363, 358, 347, 325, 476, 348,
	349, 339, 391, 357, 392, 340, 369, 368, 370, 0,
	0, 0, 0, 0, 471, 472, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 602, 0,
	0, 606, 0, 445, 0, 0, 0, 0, 0, 0,
	417, 0, 0, 350, 0, 0, 0, 461, 0, 403,
	385, 628, 0, 0, 401, 355, 430, 393, 436, 419,
	444, 397, 394, 281, 420, 320, 366, 293, 295, 315,
	322, 324, 326, 327, 375, 376, 388, 407, 421, 422,
	423, 319, 303, 402, 304, 337, 305, 282, 311, 309,
	312, 409, 313, 284, 389, 427, 0, 332, 398, 362,
	285, 361, 390, 426, 425, 294, 452, 458, 459, 548,
	0, 464, 629, 630, 631, 473, 478, 479, 480, 482,
	483, 484, 485, 549, 566, 533, 503, 466, 557, 500,
	504, 505, 569, 0, 0, 0, 457, 351, 352, 0,
	330, 278, 279, 624, 316, 381, 571, 604, 605, 496,
	0, 558, 497, 506, 308, 530, 542, 541, 377, 456,
	0, 553, 556, 486, 623, 0, 550, 565, 627, 564,
	620, 387, 0, 406, 562, 509, 0, 554, 528, 0,
	555, 524, 559, 0, 498, 0, 413, 438, 450, 467,
	470, 499, 584, 585, 586, 283, 469, 588, 589, 590,
	591, 592, 593, 594, 587, 441, 531, 508, 534, 449,
	511, 510, 0, 0, 545, 465, 546, 547, 371, 372,
	373, 374, 334, 572, 301, 468, 396, 0, 532, 0,
	0, 0, 0, 0, 0, 0, 0, 537, 538, 535,
	632, 0, 595, 596, 0, 0, 462, 463, 329, 336,
	481, 338, 300, 386, 331, 447, 345, 0, 474, 539,
	475, 598, 601, 599, 600, 378, 341, 342, 410, 346,
	356, 399, 446, 384, 404, 298, 437, 411, 360, 525,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 267, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 580, 579, 578,
	577, 576, 575, 574, 573, 0, 0, 522, 424, 310,
	272, 306, 307, 314, 621, 618, 428, 622, 0, 280,
	502, 354, 0, 395, 328, 567, 568, 0, 0, 228,
	229, 230, 231, 232, 233, 234, 235, 273, 236, 237,
	238, 239, 240, 241, 242, 245, 246, 247, 248, 249,
	250, 251, 252, 570, 243, 244, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	0, 0, 0, 274, 275, 276, 277, 0, 0, 268,
	269, 270, 271, 0, 0, 0, 453, 454, 455, 477,
	0, 439, 501, 619, 0, 0, 0, 0, 0, 0,
	0, 551, 563, 597, 0, 607, 608, 610, 612, 611,
	614, 416, 0, 0, 625, 492, 493, 626, 603, 383,
	0, 507, 540, 529, 613, 495, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 323, 1480, 0, 353,
	544, 526, 536, 527, 512, 513, 514, 521, 333, 515,
	516, 517, 487, 518, 488, 519, 520, 0, 543, 494,
	412, 367, 561, 560, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 0, 0, 1484, 0, 0, 0, 296,
	216, 489, 609, 491, 490, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1482,
	0, 0, 0, 0, 0, 0, 286, 418, 435, 297,
	408, 448, 302, 415, 292, 382, 405, 0, 0, 288,
	433, 414, 364, 343, 344, 287, 0, 400, 321, 335,
	318, 380, 0, 432, 460, 317, 451, 0, 443, 290,
	0, 442, 379, 429, 434, 365, 359, 289, 431, 363,
	358, 347, 325, 476, 348, 349, 339, 391, 357, 392,
	340, 369, 368, 370, 0, 0, 0, 0, 0, 471,
	472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 602, 0, 0, 606, 0, 445, 0,
	0, 0, 0, 0, 0, 417, 0, 0, 350, 0,
	0, 0, 461, 0, 403, 385, 628, 0, 0, 401,
	355, 430, 393, 436, 419, 444, 397, 394, 281, 420,
	320, 366, 293, 295, 315, 322, 324, 326, 327, 375,
	376, 388, 407, 421, 422, 423, 319, 303, 402, 304,
	337, 305, 282, 311, 309, 312, 409, 313, 284, 389,
	427, 0, 332, 398, 362, 285, 361, 390, 426, 425,
	294, 452, 458, 459, 548, 0, 464, 629, 630, 631,
	473, 478, 479, 480, 482, 483, 484, 485, 549, 566,
	533, 503, 466, 557, 500, 504, 505, 569, 0, 0,
	0, 457, 351, 352, 0, 330, 278, 279, 624, 316,
	381, 571, 604, 605, 496, 0, 558, 497, 506, 308,
	530, 542, 541, 377, 456, 0, 553, 556, 486, 623,
	0, 550, 565, 627, 564, 620, 387, 0, 406, 562,
	509, 0, 554, 528, 0, 555, 524, 559, 0, 498,
	0, 413, 438, 450, 467, 470, 499, 584, 585, 586,
	283, 469, 588, 589, 590, 591, 592, 593, 594, 587,
	441, 531, 508, 534, 449, 511, 510, 0, 0, 545,
	465, 546, 547, 371, 372, 373, 374, 334, 572, 301,
	468, 396, 0, 532, 0, 0, 0, 0, 0, 0,
	0, 0, 537, 538, 535, 632, 0, 595, 596, 0,
	0, 462, 463, 329, 336, 481, 338, 300, 386, 331,
	447, 345, 0, 474, 539, 475, 598, 601, 599, 600,
	378, 341, 342, 410, 346, 356, 399, 446, 384, 404,
	298, 437, 411, 360, 525, 552, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 580, 579, 578, 577, 576, 575, 574, 573,
	0, 0, 522, 424, 310, 272, 306, 307, 314, 621,
	618, 428, 622, 0, 280, 502, 354, 0, 395, 328,
	567, 568, 0, 0, 228, 229, 230, 231, 232, 233,
	234, 235, 273, 236, 237, 238, 239, 240, 241, 242,
	245, 246, 247, 248, 249, 250, 251, 252, 570, 243,
	244, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 0, 0, 0, 274, 275,
	276, 277, 0, 0, 268, 269, 270, 271, 0, 0,
	0, 453, 454, 455, 477, 0, 439, 501, 619, 0,
	0, 0, 0, 0, 0, 0, 551, 563, 597, 0,
	607, 608, 610, 612, 611, 614, 416, 0, 0, 625,
	492, 493, 626, 603, 383, 0, 507, 540, 529, 613,
	495, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 323, 0, 0, 353, 544, 526, 536, 527, 512,
	513, 514, 521, 333, 515, 516, 517, 487, 518, 488,
	519, 520, 0, 543, 494, 412, 367, 561, 560, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3882, 0, 215, 819, 0,
	0, 0, 0, 0, 296, 216, 489, 609, 491, 490,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 418, 435, 297, 408, 448, 302, 415, 292,
	382, 405, 0, 0, 288, 433, 414, 364, 343, 344,
	287, 0, 400, 321, 335, 318, 380, 0, 432, 460,
	317, 451, 0, 443, 290, 0, 442, 379, 429, 434,
	365, 359, 289, 431, 363, 358, 347, 325, 476, 348,
	349, 339, 391, 357, 392, 340, 369, 368, 370, 0,
	0, 0, 0, 0, 471, 472, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 602, 0,
	0, 606, 0, 445, 0, 0, 0, 0, 0, 0,
	417, 0, 0, 350, 0, 0, 0, 461, 0, 403,
	385, 628, 0, 0, 401, 355, 430, 393, 436, 419,
	444, 397, 394, 281, 420, 320, 366, 293, 295, 315,
	322, 324, 326, 327, 375, 376, 388, 407, 421, 422,
	423, 319, 303, 402, 304, 337, 305, 282, 311, 309,
	312, 409, 313, 284, 389, 427, 0, 332, 398, 362,
	285, 361, 390, 426, 425, 294, 452, 458, 459, 548,
	0, 464, 629, 630, 631, 473, 478, 479, 480, 482,
	483, 484, 485, 549, 566, 533, 503, 466, 557, 500,
	504, 505, 569, 0, 0, 0, 457, 351, 352, 0,
	330, 278, 279, 624, 316, 381, 571, 604, 605, 496,
	0, 558, 497, 506, 308, 530, 542, 541, 377, 456,
	0, 553, 556, 486, 623, 0, 550, 565, 627, 564,
	620, 387, 0, 406, 562, 509, 0, 554, 528, 0,
	555, 524, 559, 0, 498, 0, 413, 438, 450, 467,
	470, 499, 584, 585, 586, 283, 469, 588, 589, 590,
	591, 592, 593, 594, 587, 441, 531, 508, 534, 449,
	511, 510, 0, 0, 545, 465, 546, 547, 371, 372,
	373, 374, 334, 572, 301, 468, 396, 0, 532, 0,
	0, 0, 0, 0, 0, 0, 0, 537, 538, 535,
	632, 0, 595, 596, 0, 0, 462, 463, 329, 336,
	481, 338, 300, 386, 331, 447, 345, 0, 474, 539,
	475, 598, 601, 599, 600, 378, 341, 342, 410, 346,
	356, 399, 446, 384, 404, 298, 437, 411, 360, 525,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 267, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 580, 579, 578,
	577, 576, 575, 574, 573, 0, 0, 522, 424, 310,
	272, 306, 307, 314, 621, 618, 428, 622, 0, 280,
	502, 354, 0, 395, 328, 567, 568, 0, 0, 228,
	229, 230, 231, 232, 233, 234, 235, 273, 236, 237,
	238, 239, 240, 241, 242, 245, 246, 247, 248, 249,
	250, 251, 252, 570, 243, 244, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	0, 0, 0, 274, 275, 276, 277, 0, 0, 268,
	269, 270, 271, 0, 0, 0, 453, 454, 455, 477,
	0, 439, 501, 619, 0, 0, 0, 0, 0, 0,
	0, 551, 563, 597, 0, 607, 608, 610, 612, 611,
	614, 416, 0, 0, 625, 492, 493, 626, 603, 383,
	0, 507, 540, 529, 613, 495, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 323, 0, 0, 353,
	544, 526, 536, 527, 512, 513, 514, 521, 333, 515,
	516, 517, 487, 518, 488, 519, 520, 0, 543, 494,
	412, 367, 561, 560, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 0, 0, 1484, 0, 0, 0, 296,
	216, 489, 609, 491, 490, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1482,
	0, 0, 0, 0, 0, 0, 286, 418, 435, 297,
	408, 448, 302, 415, 292, 382, 405, 0, 0, 288,
	433, 414, 364, 343, 344, 287, 0, 400, 321, 335,
	318, 380, 0, 432, 460, 317, 451, 0, 443, 290,
	0, 442, 379, 429, 434, 365, 359, 289, 431, 363,
	358, 347, 325, 476, 348, 349, 339, 391, 357, 392,
	340, 369, 368, 370, 0, 0, 0, 0, 0, 471,
	472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 602, 0, 0, 606, 0, 445, 0,
	0, 0, 0, 0, 0, 417, 0, 0, 350, 0,
	0, 0, 461, 0, 403, 385, 628, 0, 0, 401,
	355, 430, 393, 436, 419, 444, 397, 394, 281, 420,
	320, 366, 293, 295, 315, 322, 324, 326, 327, 375,
	376, 388, 407, 421, 422, 423, 319, 303, 402, 304,
	337, 305, 282, 311, 309, 312, 409, 313, 284, 389,
	427, 0, 332, 398, 362, 285, 361, 390, 426, 425,
	294, 452, 458, 459, 548, 0, 464, 629, 630, 631,
	473, 478, 479, 480, 482, 483, 484, 485, 549, 566,
	533, 503, 466, 557, 500, 504, 505, 569, 0, 0,
	0, 457, 351, 352, 0, 330, 278, 279, 624, 316,
	381, 571, 604, 605, 496, 0, 558, 497, 506, 308,
	530, 542, 541, 377, 456, 0, 553, 556, 486, 623,
	0, 550, 565, 627, 564, 620, 387, 0, 406, 562,
	509, 0, 554, 528, 0, 555, 524, 559, 0, 498,
	0, 413, 438, 450, 467, 470, 499, 584, 585, 586,
	283, 469, 588, 589, 590, 591, 592, 593, 594, 587,
	441, 531, 508, 534, 449, 511, 510, 0, 0, 545,
	465, 546, 547, 371, 372, 373, 374, 334, 572, 301,
	468, 396, 0, 532, 0, 0, 0, 0, 0, 0,
	0, 0, 537, 538, 535, 632, 0, 595, 596, 0,
	0, 462, 463, 329, 336, 481, 338, 300, 386, 331,
	447, 345, 0, 474, 539, 475, 598, 601, 599, 600,
	378, 341, 342, 410, 346, 356, 399, 446, 384, 404,
	298, 437, 411, 360, 525, 552, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 580, 579, 578, 577, 576, 575, 574, 573,
	0, 0, 522, 424, 310, 272, 306, 307, 314, 621,
	618, 428, 622, 0, 280, 502, 354, 0, 395, 328,
	567, 568, 0, 0, 228, 229, 230, 231, 232, 233,
	234, 235, 273, 236, 237, 238, 239, 240, 241, 242,
	245, 246, 247, 248, 249, 250, 251, 252, 570, 243,
	244, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 0, 0, 0, 274, 275,
	276, 277, 0, 0, 268, 269, 270, 271, 0, 0,
	0, 453, 454, 455, 477, 0, 439, 501, 619, 0,
	0, 0, 0, 0, 0, 0, 551, 563, 597, 0,
	607, 608, 610, 612, 611, 614, 416, 0, 0, 625,
	492, 493, 626, 603, 383, 0, 507, 540, 529, 613,
	495, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 323, 0, 0, 353, 544, 526, 536, 527, 512,
	513, 514, 521, 333, 515, 516, 517, 487, 518, 488,
	519, 520, 0, 543, 494, 412, 367, 561, 560, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 0, 0,
	1484, 0, 0, 0, 296, 216, 489, 609, 491, 490,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1692, 0, 0, 0, 0, 0,
	0, 286, 418, 435, 297, 408, 448, 302, 415, 292,
	382, 405, 0, 0, 288, 433, 414, 364, 343, 344,
	287, 0, 400, 321, 335, 318, 380, 0, 432, 460,
	317, 451, 0, 443, 290, 0, 442, 379, 429, 434,
	365, 359, 289, 431, 363, 358, 347, 325, 476, 348,
	349, 339, 391, 357, 392, 340, 369, 368, 370, 0,
	0, 0, 0, 0, 471, 472, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 602, 0,
	0, 606, 0, 445, 0, 0, 0, 0, 0, 0,
	417, 0, 0, 350, 0, 0, 0, 461, 0, 403,
	385, 628, 0, 0, 401, 355, 430, 393, 436, 419,
	444, 397, 394, 281, 420, 320, 366, 293, 295, 315,
	322, 324, 326, 327, 375, 376, 388, 407, 421, 422,
	423, 319, 303, 402, 304, 337, 305, 282, 311, 309,
	312, 409, 313, 284, 389, 427, 0, 332, 398, 362,
	285, 361, 390, 426, 425, 294, 452, 458, 459, 548,
	0, 464, 629, 630, 631, 473, 478, 479, 480, 482,
	483, 484, 485, 549, 566, 533, 503, 466, 557, 500,
	504, 505, 569, 0, 0, 0, 457, 351, 352, 0,
	330, 278, 279, 624, 316, 381, 571, 604, 605, 496,
	0, 558, 497, 506, 308, 530, 542, 541, 377, 456,
	0, 553, 556, 486, 623, 0, 550, 565, 627, 564,
	620, 387, 0, 406, 562, 509, 0, 554, 528, 0,
	555, 524, 559, 0, 498, 0, 413, 438, 450, 467,
	470, 499, 584, 585, 586, 283, 469, 588, 589, 590,
	591, 592, 593, 594, 587, 441, 531, 508, 534, 449,
	511, 510, 0, 0, 545, 465, 546, 547, 371, 372,
	373, 374, 334, 572, 301, 468, 396, 0, 532, 0,
	0, 0, 0, 0, 0, 0, 0, 537, 538, 535,
	632, 0, 595, 596, 0, 0, 462, 463, 329, 336,
	481, 338, 300, 386, 331, 447, 345, 0, 474, 539,
	475, 598, 601, 599, 600, 378, 341, 342, 410, 346,
	356, 399, 446, 384, 404, 298, 437, 411, 360, 525,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 267, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 580, 579, 578,
	577, 576, 575, 574, 573, 0, 0, 522, 424, 310,
	272, 306, 307, 314, 621, 618, 428, 622, 0, 280,
	502, 354, 0, 395, 328, 567, 568, 0, 0, 228,
	229, 230, 231, 232, 233, 234, 235, 273, 236, 237,
	238, 239, 240, 241, 242, 245, 246, 247, 248, 249,
	250, 251, 252, 570, 243, 244, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	0, 0, 0, 274, 275, 276, 277, 0, 0, 268,
	269, 270, 271, 0, 0, 0, 453, 454, 455, 477,
	0, 439, 501, 619, 0, 0, 0, 0, 0, 0,
	0, 551, 563, 597, 0, 607, 608, 610, 612, 611,
	614, 416, 0, 0, 625, 492, 493, 626, 603, 383,
	0, 507, 540, 529, 613, 495, 0, 0, 0, 0,
	0, 2424, 0, 0, 0, 0, 323, 0, 0, 353,
	544, 526, 536, 527, 512, 513, 514, 521, 333, 515,
	516, 517, 487, 518, 488, 519, 520, 0, 543, 494,
	412, 367, 561, 560, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 0, 0, 2426, 0, 0, 0, 296,
	216, 489, 609, 491, 490, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 286, 418, 435, 297,
	408, 448, 302, 415, 292, 382, 405, 0, 0, 288,
	433, 414, 364, 343, 344, 287, 0, 400, 321, 335,
	318, 380, 0, 432, 460, 317, 451, 0, 443, 290,
	0, 442, 379, 429, 434, 365, 359, 289, 431, 363,
	358, 347, 325, 476, 348, 349, 339, 391, 357, 392,
	340, 369, 368, 370, 0, 0, 0, 0, 0, 471,
	472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 602, 0, 0, 606, 0, 445, 0,
	0, 0, 0, 0, 0, 417, 0, 0, 350, 0,
	0, 0, 461, 0, 403, 385, 628, 0, 0, 401,
	355, 430, 393, 436, 419, 444, 397, 394, 281, 420,
	320, 366, 293, 295, 315, 322, 324, 326, 327, 375,
	376, 388, 407, 421, 422, 423, 319, 303, 402, 304,
	337, 305, 282, 311, 309, 312, 409, 313, 284, 389,
	427, 0, 332, 398, 362, 285, 361, 390, 426, 425,
	294, 452, 458, 459, 548, 0, 464, 629, 630, 631,
	473, 478, 479, 480, 482, 483, 484, 485, 549, 566,
	533, 503, 466, 557, 500, 504, 505, 569, 0, 0,
	0, 457, 351, 352, 0, 330, 278, 279, 624, 316,
	381, 571, 604, 605, 496, 0, 558, 497, 506, 308,
	530, 542, 541, 377, 456, 0, 553, 556, 486, 623,
	0, 550, 565, 627, 564, 620, 387, 0, 406, 562,
	509, 0, 554, 528, 0, 555, 524, 559, 0, 498,
	0, 413, 438, 450, 467, 470, 499, 584, 585, 586,
	283, 469, 588, 589, 590, 591, 592, 593, 594, 587,
	441, 531, 508, 534, 449, 511, 510, 0, 0, 545,
	465, 546, 547, 371, 372, 373, 374, 334, 572, 301,
	468, 396, 0, 532, 0, 0, 0, 0, 0, 0,
	0, 0, 537, 538, 535, 632, 0, 595, 596, 0,
	0, 462, 463, 329, 336, 481, 338, 300, 386, 331,
	447, 345, 0, 474, 539, 475, 598, 601, 599, 600,
	378, 341, 342, 410, 346, 356, 399, 446, 384, 404,
	298, 437, 411, 360, 525, 552, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 580, 579, 578, 577, 576, 575, 574, 573,
	0, 0, 522, 424, 310, 272, 306, 307, 314, 621,
	618, 428, 622, 0, 280, 502, 354, 0, 395, 328,
	567, 568, 0, 0, 228, 229, 230, 231, 232, 233,
	234, 235, 273, 236, 237, 238, 239, 240, 241, 242,
	245, 246, 247, 248, 249, 250, 251, 252, 570, 243,
	244, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 0, 0, 0, 274, 275,
	276, 277, 0, 0, 268, 269, 270, 271, 0, 0,
	0, 453, 454, 455, 477, 0, 439, 501, 619, 0,
	0, 0, 0, 0, 0, 0, 551, 563, 597, 0,
	607, 608, 610, 612, 611, 614, 416, 0, 0, 625,
	492, 493, 626, 603, 383, 0, 507, 540, 529, 613,
	495, 0, 0, 0, 0, 0, 2049, 0, 0, 0,
	0, 323, 0, 0, 353, 544, 526, 536, 527, 512,
	513, 514, 521, 333, 515, 516, 517, 487, 518, 488,
	519, 520, 0, 543, 494, 412, 367, 561, 560, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 0, 0,
	2050, 0, 0, 0, 296, 216, 489, 609, 491, 490,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 418, 435, 297, 408, 448, 302, 415, 292,
	382, 405, 0, 0, 288, 433, 414, 364, 343, 344,
	287, 0, 400, 321, 335, 318, 380, 0, 432, 460,
	317, 451, 0, 443, 290, 0, 442, 379, 429, 434,
	365, 359, 289, 431, 363, 358, 347, 325, 476, 348,
	349, 339, 391, 357, 392, 340, 369, 368, 370, 0,
	0, 0, 0, 0, 471, 472, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 602, 0,
	0, 606, 0, 445, 0, 0, 0, 0, 0, 0,
	417, 0, 0, 350, 0, 0, 0, 461, 0, 403,
	385, 628, 0, 0, 401, 355, 430, 393, 436, 419,
	444, 397, 394, 281, 420, 320, 366, 293, 295, 315,
	322, 324, 326, 327, 375, 376, 388, 407, 421, 422,
	423, 319, 303, 402, 304, 337, 305, 282, 311, 309,
	312, 409, 313, 284, 389, 427, 0, 332, 398, 362,
	285, 361, 390, 426, 425, 294, 452, 458, 459, 548,
	0, 464, 629, 630, 631, 473, 478, 479, 480, 482,
	483, 484, 485, 549, 566, 533, 503, 466, 557, 500,
	504, 505, 569, 0, 0, 0, 457, 351, 352, 0,
	330, 278, 279, 624, 316, 381, 571, 604, 605, 496,
	0, 558, 497, 506, 308, 530, 542, 541, 377, 456,
	0, 553, 556, 486, 623, 0, 550, 565, 627, 564,
	620, 387, 0, 406, 562, 509, 0, 554, 528, 0,
	555, 524, 559, 0, 498, 0, 413, 438, 450, 467,
	470, 499, 584, 585, 586, 283, 469, 588, 589, 590,
	591, 592, 593, 594, 587, 441, 531, 508, 534, 449,
	511, 510, 0, 0, 545, 465, 546, 547, 371, 372,
	373, 374, 334, 572, 301, 468, 396, 0, 532, 0,
	0, 0, 0, 0, 0, 0, 0, 537, 538, 535,
	632, 0, 595, 596, 0, 0, 462, 463, 329, 336,
	481, 338, 300, 386, 331, 447, 345, 0, 474, 539,
	475, 598, 601, 599, 600, 378, 341, 342, 410, 346,
	356, 399, 446, 384, 404, 298, 437, 411, 360, 525,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 267, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 580, 579, 578,
	577, 576, 575, 574, 573, 0, 0, 522, 424, 310,
	272, 306, 307, 314, 621, 618, 428, 622, 0, 280,
	502, 354, 0, 395, 328, 567, 568, 0, 0, 228,
	229, 230, 231, 232, 233, 234, 235, 273, 236, 237,
	238, 239, 240, 241, 242, 245, 246, 247, 248, 249,
	250, 251, 252, 570, 243, 244, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	0, 0, 0, 274, 275, 276, 277, 0, 0, 268,
	269, 270, 271, 0, 0, 0, 453, 454, 455, 477,
	0, 439, 501, 619, 0, 0, 0, 0, 0, 0,
	0, 551, 563, 597, 0, 607, 608, 610, 612, 611,
	614, 416, 0, 0, 625, 492, 493, 626, 603, 383,
	0, 507, 540, 529, 613, 495, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 323, 0, 0, 353,
	544, 526, 536, 527, 512, 513, 514, 521, 333, 515,
	516, 517, 487, 518, 488, 519, 520, 0, 543, 494,
	412, 367, 561, 560, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 0, 0, 3063, 3065, 0, 0, 296,
	216, 489, 609, 491, 490, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 286, 418, 435, 297,
	408, 448, 302, 415, 292, 382, 405, 0, 0, 288,
	433, 414, 364, 343, 344, 287, 0, 400, 321, 335,
	318, 380, 0, 432, 460, 317, 451, 0, 443, 290,
	0, 442, 379, 429, 434, 365, 359, 289, 431, 363,
	358, 347, 325, 476, 348, 349, 339, 391, 357, 392,
	340, 369, 368, 370, 0, 0, 0, 0, 0, 471,
	472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 602, 0, 0, 606, 0, 445, 0,
	0, 0, 0, 0, 0, 417, 0, 0, 350, 0,
	0, 0, 461, 0, 403, 385, 628, 0, 0, 401,
	355, 430, 393, 436, 419, 444, 397, 394, 281, 420,
	320, 366, 293, 295, 315, 322, 324, 326, 327, 375,
	376, 388, 407, 421, 422, 423, 319, 303, 402, 304,
	337, 305, 282, 311, 309, 312, 409, 313, 284, 389,
	427, 0, 332, 398, 362, 285, 361, 390, 426, 425,
	294, 452, 458, 459, 548, 0, 464, 629, 630, 631,
	473, 478, 479, 480, 482, 483, 484, 485, 549, 566,
	533, 503, 466, 557, 500, 504, 505, 569, 0, 0,
	0, 457, 351, 352, 0, 330, 278, 279, 624, 316,
	381, 571, 604, 605, 496, 0, 558, 497, 506, 308,
	530, 542, 541, 377, 456, 0, 553, 556, 486, 623,
	0, 550, 565, 627, 564, 620, 387, 0, 406, 562,
	509, 0, 554, 528, 0, 555, 524, 559, 0, 498,
	0, 413, 438, 450, 467, 470, 499, 584, 585, 586,
	283, 469, 588, 589, 590, 591, 592, 593, 594, 587,
	441, 531, 508, 534, 449, 511, 510, 0, 0, 545,
	465, 546, 547, 371, 372, 373, 374, 334, 572, 301,
	468, 396, 0, 532, 0, 0, 0, 0, 0, 0,
	0, 0, 537, 538, 535, 632, 0, 595, 596, 0,
	0, 462, 463, 329, 336, 481, 338, 300, 386, 331,
	447, 345, 0, 474, 539, 475, 598, 601, 599, 600,
	378, 341, 342, 410, 346, 356, 399, 446, 384, 404,
	298, 437, 411, 360, 525, 552, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 580, 579, 578, 577, 576, 575, 574, 573,
	0, 0, 522, 424, 310, 272, 306, 307, 314, 621,
	618, 428, 622, 0, 280, 502, 354, 0, 395, 328,
	567, 568, 0, 0, 228, 229, 230, 231, 232, 233,
	234, 235, 273, 236, 237, 238, 239, 240, 241, 242,
	245, 246, 247, 248, 249, 250, 251, 252, 570, 243,
	244, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 0, 0, 0, 274, 275,
	276, 277, 0, 0, 268, 269, 270, 271, 0, 0,
	0, 453, 454, 455, 477, 0, 439, 501, 619, 0,
	0, 0, 0, 0, 0, 0, 551, 563, 597, 0,
	607, 608, 610, 612, 611, 614, 416, 0, 0, 625,
	492, 493, 626, 603, 383, 0, 507, 540, 529, 613,
	495, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 323, 2445, 0, 353, 544, 526, 536, 527, 512,
	513, 514, 521, 333, 515, 516, 517, 487, 518, 488,
	519, 520, 0, 543, 494, 412, 367, 561, 560, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 0, 0,
	1484, 0, 0, 0, 296, 216, 489, 609, 491, 490,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 418, 435, 297, 408, 448, 302, 415, 292,
	382, 405, 0, 0, 288, 433, 414, 364, 343, 344,
	287, 0, 400, 321, 335, 318, 380, 0, 432, 460,
	317, 451, 0, 443, 290, 0, 442, 379, 429, 434,
	365, 359, 289, 431, 363, 358, 347, 325, 476, 348,
	349, 339, 391, 357, 392, 340, 369, 368, 370, 0,
	0, 0, 0, 0, 471, 472, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 602, 0,
	0, 606, 0, 445, 0, 0, 0, 0, 0, 0,
	417, 0, 0, 350, 0, 0, 0, 461, 0, 403,
	385, 628, 0, 0, 401, 355, 430, 393, 436, 419,
	444, 397, 394, 281, 420, 320, 366, 293, 295, 315,
	322, 324, 326, 327, 375, 376, 388, 407, 421, 422,
	423, 319, 303, 402, 304, 337, 305, 282, 311, 309,
	312, 409, 313, 284, 389, 427, 0, 332, 398, 362,
	285, 361, 390, 426, 425, 294, 452, 458, 459, 548,
	0, 464, 629, 630, 631, 473, 478, 479, 480, 482,
	483, 484, 485, 549, 566, 533, 503, 466, 557, 500,
	504, 505, 569, 0, 0, 0, 457, 351, 352, 0,
	330, 278, 279, 624, 316, 381, 571, 604, 605, 496,
	0, 558, 497, 506, 308, 530, 542, 541, 377, 456,
	0, 553, 556, 486, 623, 0, 550, 565, 627, 564,
	620, 387, 0, 406, 562, 509, 0, 554, 528, 0,
	555, 524, 559, 0, 498, 0, 413, 438, 450, 467,
	470, 499, 584, 585, 586, 283, 469, 588, 589, 590,
	591, 592, 593, 594, 587, 441, 531, 508, 534, 449,
	511, 510, 0, 0, 545, 465, 546, 547, 371, 372,
	373, 374, 334, 572, 301, 468, 396, 0, 532, 0,
	0, 0, 0, 0, 0, 0, 0, 537, 538, 535,
	632, 0, 595, 596, 0, 0, 462, 463, 329, 336,
	481, 338, 300, 386, 331, 447, 345, 0, 474, 539,
	475, 598, 601, 599, 600, 378, 341, 342, 410, 346,
	356, 399, 446, 384, 404, 298, 437, 411, 360, 525,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 267, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 580, 579, 578,
	577, 576, 575, 574, 573, 0, 0, 522, 424, 310,
	272, 306, 307, 314, 621, 618, 428, 622, 0, 280,
	502, 354, 0, 395, 328, 567, 568, 0, 0, 228,
	229, 230, 231, 232, 233, 234, 235, 273, 236, 237,
	238, 239, 240, 241, 242, 245, 246, 247, 248, 249,
	250, 251, 252, 570, 243, 244, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	0, 0, 0, 274, 275, 276, 277, 0, 0, 268,
	269, 270, 271, 0, 0, 0, 453, 454, 455, 477,
	0, 439, 501, 619, 0, 0, 0, 0, 0, 0,
	0, 551, 563, 597, 0, 607, 608, 610, 612, 611,
	614, 416, 0, 0, 625, 492, 493, 626, 603, 383,
	0, 507, 540, 529, 613, 495, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 639, 323, 0, 0, 353,
	544, 526, 536, 527, 512, 513, 514, 521, 333, 515,
	516, 517, 487, 518, 488, 519, 520, 0, 543, 494,
	412, 367, 561, 560, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 0, 0, 296,
	216, 489, 609, 491, 490, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 286, 418, 435, 297,
	408, 448, 302, 415, 292, 382, 405, 0, 0, 288,
	433, 414, 364, 343, 344, 287, 0, 400, 321, 335,
	318, 380, 0, 432, 460, 317, 451, 0, 443, 290,
	0, 442, 379, 429, 434, 365, 359, 289, 431, 363,
	358, 347, 325, 476, 348, 349, 339, 391, 357, 392,
	340, 369, 368, 370, 0, 0, 0, 0, 0, 471,
	472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 602, 0, 0, 606, 0, 445, 0,
	638, 0, 0, 0, 0, 417, 0, 0, 350, 0,
	0, 0, 461, 0, 403, 385, 628, 0, 0, 401,
	355, 430, 393, 436, 419, 444, 397, 394, 281, 420,
	320, 366, 293, 295, 315, 322, 324, 326, 327, 375,
	376, 388, 407, 421, 422, 423, 319, 303, 402, 304,
	337, 305, 282, 311, 309, 312, 409, 313, 284, 389,
	427, 0, 332, 398, 362, 285, 361, 390, 426, 425,
	294, 452, 458, 459, 548, 0, 464, 629, 630, 631,
	473, 478, 479, 480, 482, 483, 484, 485, 549, 566,
	533, 503, 466, 557, 500, 504, 505, 569, 0, 0,
	0, 457, 351, 352, 0, 330, 278, 279, 624, 316,
	381, 571, 604, 605, 496, 0, 558, 497, 506, 308,
	530, 542, 541, 377, 456, 0, 553, 556, 486, 623,
	0, 550, 565, 627, 564, 620, 387, 0, 406, 562,
	509, 0, 554, 528, 0, 555, 524, 559, 0, 498,
	0, 413, 438, 450, 467, 470, 499, 584, 585, 586,
	283, 469, 588, 589, 590, 591, 592, 593, 594, 587,
	441, 531, 508, 534, 449, 511, 510, 0, 0, 545,
	465, 546, 547, 371, 372, 373, 374, 334, 572, 301,
	468, 396, 0, 532, 0, 0, 0, 0, 0, 0,
	0, 0, 537, 538, 535, 632, 0, 595, 596, 0,
	0, 462, 463, 329, 336, 481, 338, 300, 386, 331,
	447, 345, 0, 474, 539, 475, 598, 601, 599, 600,
	378, 341, 342, 410, 346, 356, 399, 446, 384, 404,
	298, 437, 411, 360, 525, 552, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 580, 579, 578, 577, 576, 575, 574, 573,
	0, 0, 522, 424, 310, 272, 306, 307, 314, 621,
	618, 428, 622, 0, 280, 502, 354, 0, 395, 328,
	567, 568, 0, 0, 228, 229, 230, 231, 232, 233,
	234, 235, 273, 236, 237, 238, 239, 240, 241, 242,
	245, 246, 247, 248, 249, 250, 251, 252, 570, 243,
	244, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 0, 0, 0, 274, 275,
	276, 277, 0, 0, 268, 269, 270, 271, 0, 0,
	0, 453, 454, 455, 477, 0, 439, 501, 619, 0,
	0, 0, 0, 0, 0, 0, 551, 563, 597, 0,
	607, 608, 610, 612, 611, 614, 416, 0, 0, 625,
	492, 493, 626, 603, 383, 0, 507, 540, 529, 613,
	495, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 323, 0, 0, 353, 544, 526, 536, 527, 512,
	513, 514, 521, 333, 515, 516, 517, 487, 518, 488,
	519, 520, 0, 543, 494, 412, 367, 561, 560, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 819, 0,
	0, 0, 0, 0, 296, 216, 489, 609, 491, 490,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 418, 435, 297, 408, 448, 302, 415, 292,
	382, 405, 0, 0, 288, 433, 414, 364, 343, 344,
	287, 0, 400, 321, 335, 318, 380, 0, 432, 460,
	317, 451, 0, 443, 290, 0, 442, 379, 429, 434,
	365, 359, 289, 431, 363, 358, 347, 325, 476, 348,
	349, 339, 391, 357, 392, 340, 369, 368, 370, 0,
	0, 0, 0, 0, 471, 472, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 602, 0,
	0, 606, 0, 445, 0, 0, 0, 0, 0, 0,
	417, 0, 0, 350, 0, 0, 0, 461, 0, 403,
	385, 628, 0, 0, 401, 355, 430, 393, 436, 419,
	444, 397, 394, 281, 420, 320, 366, 293, 295, 315,
	322, 324, 326, 327, 375, 376, 388, 407, 421, 422,
	423, 319, 303, 402, 304, 337, 305, 282, 311, 309,
	312, 409, 313, 284, 389, 427, 0, 332, 398, 362,
	285, 361, 390, 426, 425, 294, 452, 458, 459, 548,
	0, 464, 629, 630, 631, 473, 478, 479, 480, 482,
	483, 484, 485, 549, 566, 533, 503, 466, 557, 500,
	504, 505, 569, 0, 0, 0, 457, 351, 352, 0,
	330, 278, 279, 624, 316, 381, 571, 604, 605, 496,
	0, 558, 497, 506, 308, 530, 542, 541, 377, 456,
	0, 553, 556, 486, 623, 0, 550, 565, 627, 564,
	620, 387, 0, 406, 562, 509, 0, 554, 528, 0,
	555, 524, 559, 0, 498, 0, 413, 438, 450, 467,
	470, 499, 584, 585, 586, 283, 469, 588, 589, 590,
	591, 592, 593, 594, 587, 441, 531, 508, 534, 449,
	511, 510, 0, 0, 545, 465, 546, 547, 371, 372,
	373, 374, 334, 572, 301, 468, 396, 0, 532, 0,
	0, 0, 0, 0, 0, 0, 0, 537, 538, 535,
	632, 0, 595, 596, 0, 0, 462, 463, 329, 336,
	481, 338, 300, 386, 331, 447, 345, 0, 474, 539,
	475, 598, 601, 599, 600, 378, 341, 342, 410, 346,
	356, 399, 446, 384, 404, 298, 437, 411, 360, 525,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 267, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 580, 579, 578,
	577, 576, 575, 574, 573, 0, 0, 522, 424, 310,
	272, 306, 307, 314, 621, 618, 428, 622, 0, 280,
	502, 354, 0, 395, 328, 567, 568, 0, 0, 228,
	229, 230, 231, 232, 233, 234, 235, 273, 236, 237,
	238, 239, 240, 241, 242, 245, 246, 247, 248, 249,
	250, 251, 252, 570, 243, 244, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	0, 0, 0, 274, 275, 276, 277, 0, 0, 268,
	269, 270, 271, 0, 0, 0, 453, 454, 455, 477,
	0, 439, 501, 619, 0, 0, 0, 0, 0, 0,
	0, 551, 563, 597, 0, 607, 608, 610, 612, 611,
	614, 416, 0, 0, 625, 492, 493, 626, 603, 383,
	0, 507, 540, 529, 613, 495, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 323, 0, 0, 353,
	544, 526, 536, 527, 512, 513, 514, 521, 333, 515,
	516, 517, 487, 518, 488, 519, 520, 0, 543, 494,
	412, 367, 561, 560, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3861,
	0, 0, 215, 0, 0, 0, 0, 0, 0, 296,
	216, 489, 609, 491, 490, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 286, 418, 435, 297,
	408, 448, 302, 415, 292, 382, 405, 0, 0, 288,
	433, 414, 364, 343, 344, 287, 0, 400, 321, 335,
	318, 380, 0, 432, 460, 317, 451, 0, 443, 290,
	0, 442, 379, 429, 434, 365, 359, 289, 431, 363,
	358, 347, 325, 476, 348, 349, 339, 391, 357, 392,
	340, 369, 368, 370, 0, 0, 0, 0, 0, 471,
	472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 602, 0, 0, 606, 0, 445, 0,
	0, 0, 0, 0, 0, 417, 0, 0, 350, 0,
	0, 0, 461, 0, 403, 385, 628, 0, 0, 401,
	355, 430, 393, 436, 419, 444, 397, 394, 281, 420,
	320, 366, 293, 295, 315, 322, 324, 326, 327, 375,
	376, 388, 407, 421, 422, 423, 319, 303, 402, 304,
	337, 305, 282, 311, 309, 312, 409, 313, 284, 389,
	427, 0, 332, 398, 362, 285, 361, 390, 426, 425,
	294, 452, 458, 459, 548, 0, 464, 629, 630, 631,
	473, 478, 479, 480, 482, 483, 484, 485, 549, 566,
	533, 503, 466, 557, 500, 504, 505, 569, 0, 0,
	0, 457, 351, 352, 0, 330, 278, 279, 624, 316,
	381, 571, 604, 605, 496, 0, 558, 497, 506, 308,
	530, 542, 541, 377, 456, 0, 553, 556, 486, 623,
	0, 550, 565, 627, 564, 620, 387, 0, 406, 562,
	509, 0, 554, 528, 0, 555, 524, 559, 0, 498,
	0, 413, 438, 450, 467, 470, 499, 584, 585, 586,
	283, 469, 588, 589, 590, 591, 592, 593, 594, 587,
	441, 531, 508, 534, 449, 511, 510, 0, 0, 545,
	465, 546, 547, 371, 372, 373, 374, 334, 572, 301,
	468, 396, 0, 532, 0, 0, 0, 0, 0, 0,
	0, 0, 537, 538, 535, 632, 0, 595, 596, 0,
	0, 462, 463, 329, 336, 481, 338, 300, 386, 331,
	447, 345, 0, 474, 539, 475, 598, 601, 599, 600,
	378, 341, 342, 410, 346, 356, 399, 446, 384, 404,
	298, 437, 411, 360, 525, 552, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 580, 579, 578, 577, 576, 575, 574, 573,
	0, 0, 522, 424, 310, 272, 306, 307, 314, 621,
	618, 428, 622, 0, 280, 502, 354, 0, 395, 328,
	567, 568, 0, 0, 228, 229, 230, 231, 232, 233,
	234, 235, 273, 236, 237, 238, 239, 240, 241, 242,
	245, 246, 247, 248, 249, 250, 251, 252, 570, 243,
	244, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 0, 0, 0, 274, 275,
	276, 277, 0, 0, 268, 269, 270, 271, 0, 0,
	0, 453, 454, 455, 477, 0, 439, 501, 619, 0,
	0, 0, 0, 0, 0, 0, 551, 563, 597, 0,
	607, 608, 610, 612, 611, 614, 416, 0, 0, 625,
	492, 493, 626, 603, 383, 0, 507, 540, 529, 613,
	495, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 323, 0, 0, 353, 544, 526, 536, 527, 512,
	513, 514, 521, 333, 515, 516, 517, 487, 518, 488,
	519, 520, 0, 543, 494, 412, 367, 561, 560, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 0, 0,
	3637, 0, 0, 0, 296, 216, 489, 609, 491, 490,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 418, 435, 297, 408, 448, 302, 415, 292,
	382, 405, 0, 0, 288, 433, 414, 364, 343, 344,
	287, 0, 400, 321, 335, 318, 380, 0, 432, 460,
	317, 451, 0, 443, 290, 0, 442, 379, 429, 434,
	365, 359, 289, 431, 363, 358, 347, 325, 476, 348,
	349, 339, 391, 357, 392, 340, 369, 368, 370, 0,
	0, 0, 0, 0, 471, 472, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 602, 0,
	0, 606, 0, 445, 0, 0, 0, 0, 0, 0,
	417, 0, 0, 350, 0, 0, 0, 461, 0, 403,
	385, 628, 0, 0, 401, 355, 430, 393, 436, 419,
	444, 397, 394, 281, 420, 320, 366, 293, 295, 315,
	322, 324, 326, 327, 375, 376, 388, 407, 421, 422,
	423, 319, 303, 402, 304, 337, 305, 282, 311, 309,
	312, 409, 313, 284, 389, 427, 0, 332, 398, 362,
	285, 361, 390, 426, 425, 294, 452, 458, 459, 548,
	0, 464, 629, 630, 631, 473, 478, 479, 480, 482,
	483, 484, 485, 549, 566, 533, 503, 466, 557, 500,
	504, 505, 569, 0, 0, 0, 457, 351, 352, 0,
	330, 278, 279, 624, 316, 381, 571, 604, 605, 496,
	0, 558, 497, 506, 308, 530, 542, 541, 377, 456,
	0, 553, 556, 486, 623, 0, 550, 565, 627, 564,
	620, 387, 0, 406, 562, 509, 0, 554, 528, 0,
	555, 524, 559, 0, 498, 0, 413, 438, 450, 467,
	470, 499, 584, 585, 586, 283, 469, 588, 589, 590,
	591, 592, 593, 594, 587, 441, 531, 508, 534, 449,
	511, 510, 0, 0, 545, 465, 546, 547, 371, 372,
	373, 374, 334, 572, 301, 468, 396, 0, 532, 0,
	0, 0, 0, 0, 0, 0, 0, 537, 538, 535,
	632, 0, 595, 596, 0, 0, 462, 463, 329, 336,
	481, 338, 300, 386, 331, 447, 345, 0, 474, 539,
	475, 598, 601, 599, 600, 378, 341, 342, 410, 346,
	356, 399, 446, 384, 404, 298, 437, 411, 360, 525,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 267, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 580, 579, 578,
	577, 576, 575, 574, 573, 0, 0, 522, 424, 310,
	272, 306, 307, 314, 621, 618, 428, 622, 0, 280,
	502, 354, 0, 395, 328, 567, 568, 0, 0, 228,
	229, 230, 231, 232, 233, 234, 235, 273, 236, 237,
	238, 239, 240, 241, 242, 245, 246, 247, 248, 249,
	250, 251, 252, 570, 243, 244, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	0, 0, 0, 274, 275, 276, 277, 0, 0, 268,
	269, 270, 271, 0, 0, 0, 453, 454, 455, 477,
	0, 439, 501, 619, 0, 0, 0, 0, 0, 0,
	0, 551, 563, 597, 0, 607, 608, 610, 612, 611,
	614, 416, 0, 0, 625, 492, 493, 626, 603, 383,
	0, 507, 540, 529, 613, 495, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 323, 0, 0, 353,
	544, 526, 536, 527, 512, 513, 514, 521, 333, 515,
	516, 517, 487, 518, 488, 519, 520, 0, 543, 494,
	412, 367, 561, 560, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 0, 0, 296,
	216, 489, 609, 491, 490, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 286, 418, 435, 297,
	408, 448, 302, 415, 292, 382, 405, 0, 0, 288,
	433, 414, 364, 343, 344, 287, 0, 400, 321, 335,
	318, 380, 0, 432, 460, 317, 451, 0, 443, 290,
	0, 442, 379, 429, 434, 365, 359, 289, 431, 363,
	358, 347, 325, 476, 348, 349, 339, 391, 357, 392,
	340, 369, 368, 370, 0, 0, 0, 0, 0, 471,
	472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 602, 0, 0, 606, 0, 445, 0,
	0, 0, 3768, 0, 0, 417, 0, 0, 350, 0,
	0, 0, 461, 0, 403, 385, 628, 0, 0, 401,
	355, 430, 393, 436, 419, 444, 397, 394, 281, 420,
	320, 366, 293, 295, 315, 322, 324, 326, 327, 375,
	376, 388, 407, 421, 422, 423, 319, 303, 402, 304,
	337, 305, 282, 311, 309, 312, 409, 313, 284, 389,
	427, 0, 332, 398, 362, 285, 361, 390, 426, 425,
	294, 452, 458, 459, 548, 0, 464, 629, 630, 631,
	473, 478, 479, 480, 482, 483, 484, 485, 549, 566,
	533, 503, 466, 557, 500, 504, 505, 569, 0, 0,
	0, 457, 351, 352, 0, 330, 278, 279, 624, 316,
	381, 571, 604, 605, 496, 0, 558, 497, 506, 308,
	530, 542, 541, 377, 456, 0, 553, 556, 486, 623,
	0, 550, 565, 627, 564, 620, 387, 0, 406, 562,
	509, 0, 554, 528, 0, 555, 524, 559, 0, 498,
	0, 413, 438, 450, 467, 470, 499, 584, 585, 586,
	283, 469, 588, 589, 590, 591, 592, 593, 594, 587,
	441, 531, 508, 534, 449, 511, 510, 0, 0, 545,
	465, 546, 547, 371, 372, 373, 374, 334, 572, 301,
	468, 396, 0, 532, 0, 0, 0, 0, 0, 0,
	0, 0, 537, 538, 535, 632, 0, 595, 596, 0,
	0, 462, 463, 329, 336, 481, 338, 300, 386, 331,
	447, 345, 0, 474, 539, 475, 598, 601, 599, 600,
	378, 341, 342, 410, 346, 356, 399, 446, 384, 404,
	298, 437, 411, 360, 525, 552, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 580, 579, 578, 577, 576, 575, 574, 573,
	0, 0, 522, 424, 310, 272, 306, 307, 314, 621,
	618, 428, 622, 0, 280, 502, 354, 0, 395, 328,
	567, 568, 0, 0, 228, 229, 230, 231, 232, 233,
	234, 235, 273, 236, 237, 238, 239, 240, 241, 242,
	245, 246, 247, 248, 249, 250, 251, 252, 570, 243,
	244, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 0, 0, 0, 274, 275,
	276, 277, 0, 0, 268, 269, 270, 271, 0, 0,
	0, 453, 454, 455, 477, 0, 439, 501, 619, 0,
	0, 0, 0, 0, 0, 0, 551, 563, 597, 0,
	607, 608, 610, 612, 611, 614, 416, 0, 0, 625,
	492, 493, 626, 603, 383, 0, 507, 540, 529, 613,
	495, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 323, 0, 0, 353, 544, 526, 536, 527, 512,
	513, 514, 521, 333, 515, 516, 517, 487, 518, 488,
	519, 520, 0, 543, 494, 412, 367, 561, 560, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3483, 0, 0, 215, 0, 0,
	0, 0, 0, 0, 296, 216, 489, 609, 491, 490,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 418, 435, 297, 408, 448, 302, 415, 292,
	382, 405, 0, 0, 288, 433, 414, 364, 343, 344,
	287, 0, 400, 321, 335, 318, 380, 0, 432, 460,
	317, 451, 0, 443, 290, 0, 442, 379, 429, 434,
	365, 359, 289, 431, 363, 358, 347, 325, 476, 348,
	349, 339, 391, 357, 392, 340, 369, 368, 370, 0,
	0, 0, 0, 0, 471, 472, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 602, 0,
	0, 606, 0, 445, 0, 0, 0, 0, 0, 0,
	417, 0, 0, 350, 0, 0, 0, 461, 0, 403,
	385, 628, 0, 0, 401, 355, 430, 393, 436, 419,
	444, 397, 394, 281, 420, 320, 366, 293, 295, 315,
	322, 324, 326, 327, 375, 376, 388, 407, 421, 422,
	423, 319, 303, 402, 304, 337, 305, 282, 311, 309,
	312, 409, 313, 284, 389, 427, 0, 332, 398, 362,
	285, 361, 390, 426, 425, 294, 452, 458, 459, 548,
	0, 464, 629, 630, 631, 473, 478, 479, 480, 482,
	483, 484, 485, 549, 566, 533, 503, 466, 557, 500,
	504, 505, 569, 0, 0, 0, 457, 351, 352, 0,
	330, 278, 279, 624, 316, 381, 571, 604, 605, 496,
	0, 558, 497, 506, 308, 530, 542, 541, 377, 456,
	0, 553, 556, 486, 623, 0, 550, 565, 627, 564,
	620, 387, 0, 406, 562, 509, 0, 554, 528, 0,
	555, 524, 559, 0, 498, 0, 413, 438, 450, 467,
	470, 499, 584, 585, 586, 283, 469, 588, 589, 590,
	591, 592, 593, 594, 587, 441, 531, 508, 534, 449,
	511, 510, 0, 0, 545, 465, 546, 547, 371, 372,
	373, 374, 334, 572, 301, 468, 396, 0, 532, 0,
	0, 0, 0, 0, 0, 0, 0, 537, 538, 535,
	632, 0, 595, 596, 0, 0, 462, 463, 329, 336,
	481, 338, 300, 386, 331, 447, 345, 0, 474, 539,
	475, 598, 601, 599, 600, 378, 341, 342, 410, 346,
	356, 399, 446, 384, 404, 298, 437, 411, 360, 525,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 267, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 580, 579, 578,
	577, 576, 575, 574, 573, 0, 0, 522, 424, 310,
	272, 306, 307, 314, 621, 618, 428, 622, 0, 280,
	502, 354, 0, 395, 328, 567, 568, 0, 0, 228,
	229, 230, 231, 232, 233, 234, 235, 273, 236, 237,
	238, 239, 240, 241, 242, 245, 246, 247, 248, 249,
	250, 251, 252, 570, 243, 244, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	0, 0, 0, 274, 275, 276, 277, 0, 0, 268,
	269, 270, 271, 0, 0, 0, 453, 454, 455, 477,
	0, 439, 501, 619, 0, 0, 0, 0, 0, 0,
	0, 551, 563, 597, 0, 607, 608, 610, 612, 611,
	614, 416, 0, 0, 625, 492, 493, 626, 603, 383,
	0, 507, 540, 529, 613, 495, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 323, 0, 0, 353,
	544, 526, 536, 527, 512, 513, 514, 521, 333, 515,
	516, 517, 487, 518, 488, 519, 520, 0, 543, 494,
	412, 367, 561, 560, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3652, 0, 215, 0, 0, 0, 0, 0, 0, 296,
	216, 489, 609, 491, 490, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 286, 418, 435, 297,
	408, 448, 302, 415, 292, 382, 405, 0, 0, 288,
	433, 414, 364, 343, 344, 287, 0, 400, 321, 335,
	318, 380, 0, 432, 460, 317, 451, 0, 443, 290,
	0, 442, 379, 429, 434, 365, 359, 289, 431, 363,
	358, 347, 325, 476, 348, 349, 339, 391, 357, 392,
	340, 369, 368, 370, 0, 0, 0, 0, 0, 471,
	472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 602, 0, 0, 606, 0, 445, 0,
	0, 0, 0, 0, 0, 417, 0, 0, 350, 0,
	0, 0, 461, 0, 403, 385, 628, 0, 0, 401,
	355, 430, 393, 436, 419, 444, 397, 394, 281, 420,
	320, 366, 293, 295, 315, 322, 324, 326, 327, 375,
	376, 388, 407, 421, 422, 423, 319, 303, 402, 304,
	337, 305, 282, 311, 309, 312, 409, 313, 284, 389,
	427, 0, 332, 398, 362, 285, 361, 390, 426, 425,
	294, 452, 458, 459, 548, 0, 464, 629, 630, 631,
	473, 478, 479, 480, 482, 483, 484, 485, 549, 566,
	533, 503, 466, 557, 500, 504, 505, 569, 0, 0,
	0, 457, 351, 352, 0, 330, 278, 279, 624, 316,
	381, 571, 604, 605, 496, 0, 558, 497, 506, 308,
	530, 542, 541, 377, 456, 0, 553, 556, 486, 623,
	0, 550, 565, 627, 564, 620, 387, 0, 406, 562,
	509, 0, 554, 528, 0, 555, 524, 559, 0, 498,
	0, 413, 438, 450, 467, 470, 499, 584, 585, 586,
	283, 469, 588, 589, 590, 591, 592, 593, 594, 587,
	441, 531, 508, 534, 449, 511, 510, 0, 0, 545,
	465, 546, 547, 371, 372, 373, 374, 334, 572, 301,
	468, 396, 0, 532, 0, 0, 0, 0, 0, 0,
	0, 0, 537, 538, 535, 632, 0, 595, 596, 0,
	0, 462, 463, 329, 336, 481, 338, 300, 386, 331,
	447, 345, 0, 474, 539, 475, 598, 601, 599, 600,
	378, 341, 342, 410, 346, 356, 399, 446, 384, 404,
	298, 437, 411, 360, 525, 552, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 580, 579, 578, 577, 576, 575, 574, 573,
	0, 0, 522, 424, 310, 272, 306, 307, 314, 621,
	618, 428, 622, 0, 280, 502, 354, 0, 395, 328,
	567, 568, 0, 0, 228, 229, 230, 231, 232, 233,
	234, 235, 273, 236, 237, 238, 239, 240, 241, 242,
	245, 246, 247, 248, 249, 250, 251, 252, 570, 243,
	244, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 0, 0, 0, 274, 275,
	276, 277, 0, 0, 268, 269, 270, 271, 0, 0,
	0, 453, 454, 455, 477, 0, 439, 501, 619, 0,
	0, 0, 0, 0, 0, 0, 551, 563, 597, 0,
	607, 608, 610, 612, 611, 614, 416, 0, 0, 625,
	492, 493, 626, 603, 383, 0, 507, 540, 529, 613,
	495, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 323, 0, 0, 353, 544, 526, 536, 527, 512,
	513, 514, 521, 333, 515, 516, 517, 487, 518, 488,
	519, 520, 0, 543, 494, 412, 367, 561, 560, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 0, 0,
	0, 0, 0, 0, 296, 216, 489, 609, 491, 490,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 418, 435, 297, 408, 448, 302, 415, 292,
	382, 405, 0, 0, 288, 433, 414, 364, 343, 344,
	287, 0, 400, 321, 335, 318, 380, 0, 432, 460,
	317, 451, 0, 443, 290, 0, 442, 379, 429, 434,
	365, 359, 289, 431, 363, 358, 347, 325, 476, 348,
	349, 339, 391, 357, 392, 340, 369, 368, 370, 0,
	0, 0, 0, 0, 471, 472, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 602, 0,
	0, 606, 0, 445, 0, 0, 0, 3570, 0, 0,
	417, 0, 0, 350, 0, 0, 0, 461, 0, 403,
	385, 628, 0, 0, 401, 355, 430, 393, 436, 419,
	444, 397, 394, 281, 420, 320, 366, 293, 295, 315,
	322, 324, 326, 327, 375, 376, 388, 407, 421, 422,
	423, 319, 303, 402, 304, 337, 305, 282, 311, 309,
	312, 409, 313, 284, 389, 427, 0, 332, 398, 362,
	285, 361, 390, 426, 425, 294, 452, 458, 459, 548,
	0, 464, 629, 630, 631, 473, 478, 479, 480, 482,
	483, 484, 485, 549, 566, 533, 503, 466, 557, 500,
	504, 505, 569, 0, 0, 0, 457, 351, 352, 0,
	330, 278, 279, 624, 316, 381, 571, 604, 605, 496,
	0, 558, 497, 506, 308, 530, 542, 541, 377, 456,
	0, 553, 556, 486, 623, 0, 550, 565, 627, 564,
	620, 387, 0, 406, 562, 509, 0, 554, 528, 0,
	555, 524, 559, 0, 498, 0, 413, 438, 450, 467,
	470, 499, 584, 585, 586, 283, 469, 588, 589, 590,
	591, 592, 593, 594, 587, 441, 531, 508, 534, 449,
	511, 510, 0, 0, 545, 465, 546, 547, 371, 372,
	373, 374, 334, 572, 301, 468, 396, 0, 532, 0,
	0, 0, 0, 0, 0, 0, 0, 537, 538, 535,
	632, 0, 595, 596, 0, 0, 462, 463, 329, 336,
	481, 338, 300, 386, 331, 447, 345, 0, 474, 539,
	475, 598, 601, 599, 600, 378, 341, 342, 410, 346,
	356, 399, 446, 384, 404, 298, 437, 411, 360, 525,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 267, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 580, 579, 578,
	577, 576, 575, 574, 573, 0, 0, 522, 424, 310,
	272, 306, 307, 314, 621, 618, 428, 622, 0, 280,
	502, 354, 0, 395, 328, 567, 568, 0, 0, 228,
	229, 230, 231, 232, 233, 234, 235, 273, 236, 237,
	238, 239, 240, 241, 242, 245, 246, 247, 248, 249,
	250, 251, 252, 570, 243, 244, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	0, 0, 0, 274, 275, 276, 277, 0, 0, 268,
	269, 270, 271, 0, 0, 0, 453, 454, 455, 477,
	0, 439, 501, 619, 0, 0, 0, 0, 0, 0,
	0, 551, 563, 597, 0, 607, 608, 610, 612, 611,
	614, 416, 0, 0, 625, 492, 493, 626, 603, 383,
	0, 507, 540, 529, 613, 495, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 323, 0, 0, 353,
	544, 526, 536, 527, 512, 513, 514, 521, 333, 515,
	516, 517, 487, 518, 488, 519, 520, 0, 543, 494,
	412, 367, 561, 560, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 0, 0, 3096, 0, 0, 0, 296,
	216, 489, 609, 491, 490, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 286, 418, 435, 297,
	408, 448, 302, 415, 292, 382, 405, 0, 0, 288,
	433, 414, 364, 343, 344, 287, 0, 400, 321, 335,
	318, 380, 0, 432, 460, 317, 451, 0, 443, 290,
	0, 442, 379, 429, 434, 365, 359, 289, 431, 363,
	358, 347, 325, 476, 348, 349, 339, 391, 357, 392,
	340, 369, 368, 370, 0, 0, 0, 0, 0, 471,
	472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 602, 0, 0, 606, 0, 445, 0,
	0, 0, 0, 0, 0, 417, 0, 0, 350, 0,
	0, 0, 461, 0, 403, 385, 628, 0, 0, 401,
	355, 430, 393, 436, 419, 444, 397, 394, 281, 420,
	320, 366, 293, 295, 315, 322, 324, 326, 327, 375,
	376, 388, 407, 421, 422, 423, 319, 303, 402, 304,
	337, 305, 282, 311, 309, 312, 409, 313, 284, 389,
	427, 0, 332, 398, 362, 285, 361, 390, 426, 425,
	294, 452, 458, 459, 548, 0, 464, 629, 630, 631,
	473, 478, 479, 480, 482, 483, 484, 485, 549, 566,
	533, 503, 466, 557, 500, 504, 505, 569, 0, 0,
	0, 457, 351, 352, 0, 330, 278, 279, 624, 316,
	381, 571, 604, 605, 496, 0, 558, 497, 506, 308,
	530, 542, 541, 377, 456, 0, 553, 556, 486, 623,
	0, 550, 565, 627, 564, 620, 387, 0, 406, 562,
	509, 0, 554, 528, 0, 555, 524, 559, 0, 498,
	0, 413, 438, 450, 467, 470, 499, 584, 585, 586,
	283, 469, 588, 589, 590, 591, 592, 593, 594, 587,
	441, 531, 508, 534, 449, 511, 510, 0, 0, 545,
	465, 546, 547, 371, 372, 373, 374, 334, 572, 301,
	468, 396, 0, 532, 0, 0, 0, 0, 0, 0,
	0, 0, 537, 538, 535, 632, 0, 595, 596, 0,
	0, 462, 463, 329, 336, 481, 338, 300, 386, 331,
	447, 345, 0, 474, 539, 475, 598, 601, 599, 600,
	378, 341, 342, 410, 346, 356, 399, 446, 384, 404,
	298, 437, 411, 360, 525, 552, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 580, 579, 578, 577, 576, 575, 574, 573,
	0, 0, 522, 424, 310, 272, 306, 307, 314, 621,
	618, 428, 622, 0, 280, 502, 354, 0, 395, 328,
	567, 568, 0, 0, 228, 229, 230, 231, 232, 233,
	234, 235, 273, 236, 237, 238, 239, 240, 241, 242,
	245, 246, 247, 248, 249, 250, 251, 252, 570, 243,
	244, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 0, 0, 0, 274, 275,
	276, 277, 0, 0, 268, 269, 270, 271, 0, 0,
	0, 453, 454, 455, 477, 0, 439, 501, 619, 0,
	0, 0, 0, 0, 0, 0, 551, 563, 597, 0,
	607, 608, 610, 612, 611, 614, 416, 0, 0, 625,
	492, 493, 626, 603, 383, 0, 507, 540, 529, 613,
	495, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 323, 0, 0, 353, 544, 526, 536, 527, 512,
	513, 514, 521, 333, 515, 516, 517, 487, 518, 488,
	519, 520, 0, 543, 494, 412, 367, 561, 560, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 0, 0,
	0, 0, 0, 0, 296, 216, 489, 609, 491, 490,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3114, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 418, 435, 297, 408, 448, 302, 415, 292,
	382, 405, 0, 0, 288, 433, 414, 364, 343, 344,
	287, 0, 400, 321, 335, 318, 380, 0, 432, 460,
	317, 451, 0, 443, 290, 0, 442, 379, 429, 434,
	365, 359, 289, 431, 363, 358, 347, 325, 476, 348,
	349, 339, 391, 357, 392, 340, 369, 368, 370, 0,
	0, 0, 0, 0, 471, 472, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 602, 0,
	0, 606, 0, 445, 0, 0, 0, 0, 0, 0,
	417, 0, 0, 350, 0, 0, 0, 461, 0, 403,
	385, 628, 0, 0, 401, 355, 430, 393, 436, 419,
	444, 397, 394, 281, 420, 320, 366, 293, 295, 315,
	322, 324, 326, 327, 375, 376, 388, 407, 421, 422,
	423, 319, 303, 402, 304, 337, 305, 282, 311, 309,
	312, 409, 313, 284, 389, 427, 0, 332, 398, 362,
	285, 361, 390, 426, 425, 294, 452, 458, 459, 548,
	0, 464, 629, 630, 631, 473, 478, 479, 480, 482,
	483, 484, 485, 549, 566, 533, 503, 466, 557, 500,
	504, 505, 569, 0, 0, 0, 457, 351, 352, 0,
	330, 278, 279, 624, 316, 381, 571, 604, 605, 496,
	0, 558, 497, 506, 308, 530, 542, 541, 377, 456,
	0, 553, 556, 486, 623, 0, 550, 565, 627, 564,
	620, 387, 0, 406, 562, 509, 0, 554, 528, 0,
	555, 524, 559, 0, 498, 0, 413, 438, 450, 467,
	470, 499, 584, 585, 586, 283, 469, 588, 589, 590,
	591, 592, 593, 594, 587, 441, 531, 508, 534, 449,
	511, 510, 0, 0, 545, 465, 546, 547, 371, 372,
	373, 374, 334, 572, 301, 468, 396, 0, 532, 0,
	0, 0, 0, 0, 0, 0, 0, 537, 538, 535,
	632, 0, 595, 596, 0, 0, 462, 463, 329, 336,
	481, 338, 300, 386, 331, 447, 345, 0, 474, 539,
	475, 598, 601, 599, 600, 378, 341, 342, 410, 346,
	356, 399, 446, 384, 404, 298, 437, 411, 360, 525,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 267, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 580, 579, 578,
	577, 576, 575, 574, 573, 0, 0, 522, 424, 310,
	272, 306, 307, 314, 621, 618, 428, 622, 0, 280,
	502, 354, 0, 395, 328, 567, 568, 0, 0, 228,
	229, 230, 231, 232, 233, 234, 235, 273, 236, 237,
	238, 239, 240, 241, 242, 245, 246, 247, 248, 249,
	250, 251, 252, 570, 243, 244, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	0, 0, 0, 274, 275, 276, 277, 0, 0, 268,
	269, 270, 271, 0, 0, 0, 453, 454, 455, 477,
	0, 439, 501, 619, 0, 0, 0, 0, 0, 0,
	0, 551, 563, 597, 0, 607, 608, 610, 612, 611,
	614, 416, 0, 0, 625, 492, 493, 626, 603, 383,
	0, 507, 540, 529, 613, 495, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 323, 0, 0, 353,
	544, 526, 536, 527, 512, 513, 514, 521, 333, 515,
	516, 517, 487, 518, 488, 519, 520, 0, 543, 494,
	412, 367, 561, 560, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1982,
	0, 0, 215, 0, 0, 0, 0, 0, 0, 296,
	216, 489, 609, 491, 490, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 286, 418, 435, 297,
	408, 448, 302, 415, 292, 382, 405, 0, 0, 288,
	433, 414, 364, 343, 344, 287, 0, 400, 321, 335,
	318, 380, 0, 432, 460, 317, 451, 0, 443, 290,
	0, 442, 379, 429, 434, 365, 359, 289, 431, 363,
	358, 347, 325, 476, 348, 349, 339, 391, 357, 392,
	340, 369, 368, 370, 0, 0, 0, 0, 0, 471,
	472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 602, 0, 0, 606, 0, 445, 0,
	0, 0, 0, 0, 0, 417, 0, 0, 350, 0,
	0, 0, 461, 0, 403, 385, 628, 0, 0, 401,
	355, 430, 393, 436, 419, 444, 397, 394, 281, 420,
	320, 366, 293, 295, 315, 322, 324, 326, 327, 375,
	376, 388, 407, 421, 422, 423, 319, 303, 402, 304,
	337, 305, 282, 311, 309, 312, 409, 313, 284, 389,
	427, 0, 332, 398, 362, 285, 361, 390, 426, 425,
	294, 452, 458, 459, 548, 0, 464, 629, 630, 631,
	473, 478, 479, 480, 482, 483, 484, 485, 549, 566,
	533, 503, 466, 557, 500, 504, 505, 569, 0, 0,
	0, 457, 351, 352, 0, 330, 278, 279, 624, 316,
	381, 571, 604, 605, 496, 0, 558, 497, 506, 308,
	530, 542, 541, 377, 456, 0, 553, 556, 486, 623,
	0, 550, 565, 627, 564, 620, 387, 0, 406, 562,
	509, 0, 554, 528, 0, 555, 524, 559, 0, 498,
	0, 413, 438, 450, 467, 470, 499, 584, 585, 586,
	283, 469, 588, 589, 590, 591, 592, 593, 594, 587,
	441, 531, 508, 534, 449, 511, 510, 0, 0, 545,
	465, 546, 547, 371, 372, 373, 374, 334, 572, 301,
	468, 396, 0, 532, 0, 0, 0, 0, 0, 0,
	0, 0, 537, 538, 535, 632, 0, 595, 596, 0,
	0, 462, 463, 329, 336, 481, 338, 300, 386, 331,
	447, 345, 0, 474, 539, 475, 598, 601, 599, 600,
	378, 341, 342, 410, 346, 356, 399, 446, 384, 404,
	298, 437, 411, 360, 525, 552, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 580, 579, 578, 577, 576, 575, 574, 573,
	0, 0, 522, 424, 310, 272, 306, 307, 314, 621,
	618, 428, 622, 0, 280, 502, 354, 0, 395, 328,
	567, 568, 0, 0, 228, 229, 230, 231, 232, 233,
	234, 235, 273, 236, 237, 238, 239, 240, 241, 242,
	245, 246, 247, 248, 249, 250, 251, 252, 570, 243,
	244, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 0, 0, 0, 274, 275,
	276, 277, 0, 0, 268, 269, 270, 271, 0, 0,
	0, 453, 454, 455, 477, 0, 439, 501, 619, 0,
	0, 0, 0, 0, 0, 0, 551, 563, 597, 0,
	607, 608, 610, 612, 611, 614, 416, 0, 0, 625,
	492, 493, 626, 603, 383, 0, 507, 540, 529, 613,
	495, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 323, 0, 0, 353, 544, 526, 536, 527, 512,
	513, 514, 521, 333, 515, 516, 517, 487, 518, 488,
	519, 520, 0, 543, 494, 412, 367, 561, 560, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 0, 0,
	0, 0, 0, 0, 296, 216, 489, 609, 491, 490,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3216, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 418, 435, 297, 408, 448, 302, 415, 292,
	382, 405, 0, 0, 288, 433, 414, 364, 343, 344,
	287, 0, 400, 321, 335, 318, 380, 0, 432, 460,
	317, 451, 0, 443, 290, 0, 442, 379, 429, 434,
	365, 359, 289, 431, 363, 358, 347, 325, 476, 348,
	349, 339, 391, 357, 392, 340, 369, 368, 370, 0,
	0, 0, 0, 0, 471, 472, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 602, 0,
	0, 606, 0, 445, 0, 0, 0, 0, 0, 0,
	417, 0, 0, 350, 0, 0, 0, 461, 0, 403,
	385, 628, 0, 0, 401, 355, 430, 393, 436, 419,
	444, 397, 394, 281, 420, 320, 366, 293, 295, 315,
	322, 324, 326, 327, 375, 376, 388, 407, 421, 422,
	423, 319, 303, 402, 304, 337, 305, 282, 311, 309,
	312, 409, 313, 284, 389, 427, 0, 332, 398, 362,
	285, 361, 390, 426, 425, 294, 452, 458, 459, 548,
	0, 464, 629, 630, 631, 473, 478, 479, 480, 482,
	483, 484, 485, 549, 566, 533, 503, 466, 557, 500,
	504, 505, 569, 0, 0, 0, 457, 351, 352, 0,
	330, 278, 279, 624, 316, 381, 571, 604, 605, 496,
	0, 558, 497, 506, 308, 530, 542, 541, 377, 456,
	0, 553, 556, 486, 623, 0, 550, 565, 627, 564,
	620, 387, 0, 406, 562, 509, 0, 554, 528, 0,
	555, 524, 559, 0, 498, 0, 413, 438, 450, 467,
	470, 499, 584, 585, 586, 283, 469, 588, 589, 590,
	591, 592, 593, 594, 587, 441, 531, 508, 534, 449,
	511, 510, 0, 0, 545, 465, 546, 547, 371, 372,
	373, 374, 334, 572, 301, 468, 396, 0, 532, 0,
	0, 0, 0, 0, 0, 0, 0, 537, 538, 535,
	632, 0, 595, 596, 0, 0, 462, 463, 329, 336,
	481, 338, 300, 386, 331, 447, 345, 0, 474, 539,
	475, 598, 601, 599, 600, 378, 341, 342, 410, 346,
	356, 399, 446, 384, 404, 298, 437, 411, 360, 525,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 267, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 580, 579, 578,
	577, 576, 575, 574, 573, 0, 0, 522, 424, 310,
	272, 306, 307, 314, 621, 618, 428, 622, 0, 280,
	502, 354, 0, 395, 328, 567, 568, 0, 0, 228,
	229, 230, 231, 232, 233, 234, 235, 273, 236, 237,
	238, 239, 240, 241, 242, 245, 246, 247, 248, 249,
	250, 251, 252, 570, 243, 244, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	0, 0, 0, 274, 275, 276, 277, 0, 0, 268,
	269, 270, 271, 0, 0, 0, 453, 454, 455, 477,
	0, 439, 501, 619, 0, 0, 0, 0, 0, 0,
	0, 551, 563, 597, 0, 607, 608, 610, 612, 611,
	614, 416, 0, 0, 625, 492, 493, 626, 603, 383,
	0, 507, 540, 529, 613, 495, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 323, 0, 0, 353,
	544, 526, 536, 527, 512, 513, 514, 521, 333, 515,
	516, 517, 487, 518, 488, 519, 520, 0, 543, 494,
	412, 367, 561, 560, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 0, 0, 296,
	216, 489, 609, 491, 490, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2959, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 286, 418, 435, 297,
	408, 448, 302, 415, 292, 382, 405, 0, 0, 288,
	433, 414, 364, 343, 344, 287, 0, 400, 321, 335,
	318, 380, 0, 432, 460, 317, 451, 0, 443, 290,
	0, 442, 379, 429, 434, 365, 359, 289, 431, 363,
	358, 347, 325, 476, 348, 349, 339, 391, 357, 392,
	340, 369, 368, 370, 0, 0, 0, 0, 0, 471,
	472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 602, 0, 0, 606, 0, 445, 0,
	0, 0, 0, 0, 0, 417, 0, 0, 350, 0,
	0, 0, 461, 0, 403, 385, 628, 0, 0, 401,
	355, 430, 393, 436, 419, 444, 397, 394, 281, 420,
	320, 366, 293, 295, 315, 322, 324, 326, 327, 375,
	376, 388, 407, 421, 422, 423, 319, 303, 402, 304,
	337, 305, 282, 311, 309, 312, 409, 313, 284, 389,
	427, 0, 332, 398, 362, 285, 361, 390, 426, 425,
	294, 452, 458, 459, 548, 0, 464, 629, 630, 631,
	473, 478, 479, 480, 482, 483, 484, 485, 549, 566,
	533, 503, 466, 557, 500, 504, 505, 569, 0, 0,
	0, 457, 351, 352, 0, 330, 278, 279, 624, 316,
	381, 571, 604, 605, 496, 0, 558, 497, 506, 308,
	530, 542, 541, 377, 456, 0, 553, 556, 486, 623,
	0, 550, 565, 627, 564, 620, 387, 0, 406, 562,
	509, 0, 554, 528, 0, 555, 524, 559, 0, 498,
	0, 413, 438, 450, 467, 470, 499, 584, 585, 586,
	283, 469, 588, 589, 590, 591, 592, 593, 594, 587,
	441, 531, 508, 534, 449, 511, 510, 0, 0, 545,
	465, 546, 547, 371, 372, 373, 374, 334, 572, 301,
	468, 396, 0, 532, 0, 0, 0, 0, 0, 0,
	0, 0, 537, 538, 535, 632, 0, 595, 596, 0,
	0, 462, 463, 329, 336, 481, 338, 300, 386, 331,
	447, 345, 0, 474, 539, 475, 598, 601, 599, 600,
	378, 341, 342, 410, 346, 356, 399, 446, 384, 404,
	298, 437, 411, 360, 525, 552, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 580, 579, 578, 577, 576, 575, 574, 573,
	0, 0, 522, 424, 310, 272, 306, 307, 314, 621,
	618, 428, 622, 0, 280, 502, 354, 0, 395, 328,
	567, 568, 0, 0, 228, 229, 230, 231, 232, 233,
	234, 235, 273, 236, 237, 238, 239, 240, 241, 242,
	245, 246, 247, 248, 249, 250, 251, 252, 570, 243,
	244, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 0, 0, 0, 274, 275,
	276, 277, 0, 0, 268, 269, 270, 271, 0, 0,
	0, 453, 454, 455, 477, 0, 439, 501, 619, 0,
	0, 0, 0, 0, 0, 0, 551, 563, 597, 0,
	607, 608, 610, 612, 611, 614, 416, 0, 0, 625,
	492, 493, 626, 603, 383, 0, 507, 540, 529, 613,
	495, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 323, 0, 0, 353, 544, 526, 536, 527, 512,
	513, 514, 521, 333, 515, 516, 517, 487, 518, 488,
	519, 520, 0, 543, 494, 412, 367, 561, 560, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 0, 0,
	1484, 0, 0, 0, 296, 216, 489, 609, 491, 490,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 418, 435, 297, 408, 448, 302, 415, 292,
	382, 405, 0, 0, 288, 433, 414, 364, 343, 344,
	287, 0, 400, 321, 335, 318, 380, 0, 432, 460,
	317, 451, 0, 443, 290, 0, 442, 379, 429, 434,
	365, 359, 289, 431, 363, 358, 347, 325, 476, 348,
	349, 339, 391, 357, 392, 340, 369, 368, 370, 0,
	0, 0, 0, 0, 471, 472, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 602, 0,
	0, 606, 0, 445, 0, 0, 0, 0, 0, 0,
	417, 0, 0, 350, 0, 0, 0, 461, 0, 403,
	385, 628, 0, 0, 401, 355, 430, 393, 436, 419,
	444, 397, 394, 281, 420, 320, 366, 293, 295, 315,
	322, 324, 326, 327, 375, 376, 388, 407, 421, 422,
	423, 319, 303, 402, 304, 337, 305, 282, 311, 309,
	312, 409, 313, 284, 389, 427, 0, 332, 398, 362,
	285, 361, 390, 426, 425, 294, 452, 458, 459, 548,
	0, 464, 629, 630, 631, 473, 478, 479, 480, 482,
	483, 484, 485, 549, 566, 533, 503, 466, 557, 500,
	504, 505, 569, 0, 0, 0, 457, 351, 352, 0,
	330, 278, 279, 624, 316, 381, 571, 604, 605, 496,
	0, 558, 497, 506, 308, 530, 542, 541, 377, 456,
	0, 553, 556, 486, 623, 0, 550, 565, 627, 564,
	620, 387, 0, 406, 562, 509, 0, 554, 528, 0,
	555, 524, 559, 0, 498, 0, 413, 438, 450, 467,
	470, 499, 584, 585, 586, 283, 469, 588, 589, 590,
	591, 592, 593, 594, 587, 441, 531, 508, 534, 449,
	511, 510, 0, 0, 545, 465, 546, 547, 371, 372,
	373, 374, 334, 572, 301, 468, 396, 0, 532, 0,
	0, 0, 0, 0, 0, 0, 0, 537, 538, 535,
	632, 0, 595, 596, 0, 0, 462, 463, 329, 336,
	481, 338, 300, 386, 331, 447, 345, 0, 474, 539,
	475, 598, 601, 599, 600, 378, 341, 342, 410, 346,
	356, 399, 446, 384, 404, 298, 437, 411, 360, 525,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 267, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 580, 579, 578,
	577, 576, 575, 574, 573, 0, 0, 522, 424, 310,
	272, 306, 307, 314, 621, 618, 428, 622, 0, 280,
	502, 354, 0, 395, 328, 567, 568, 0, 0, 228,
	229, 230, 231, 232, 233, 234, 235, 273, 236, 237,
	238, 239, 240, 241, 242, 245, 246, 247, 248, 249,
	250, 251, 252, 570, 243, 244, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	0, 0, 0, 274, 275, 276, 277, 0, 0, 268,
	269, 270, 271, 0, 0, 0, 453, 454, 455, 477,
	0, 439, 501, 619, 0, 0, 0, 0, 0, 0,
	0, 551, 563, 597, 0, 607, 608, 610, 612, 611,
	614, 416, 0, 0, 625, 492, 493, 626, 603, 383,
	0, 507, 540, 529, 613, 495, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 323, 0, 0, 353,
	544, 526, 536, 527, 512, 513, 514, 521, 333, 515,
	516, 517, 487, 518, 488, 519, 520, 0, 543, 494,
	412, 367, 561, 560, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 0, 0, 2426, 0, 0, 0, 296,
	216, 489, 609, 491, 490, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 286, 418, 435, 297,
	408, 448, 302, 415, 292, 382, 405, 0, 0, 288,
	433, 414, 364, 343, 344, 287, 0, 400, 321, 335,
	318, 380, 0, 432, 460, 317, 451, 0, 443, 290,
	0, 442, 379, 429, 434, 365, 359, 289, 431, 363,
	358, 347, 325, 476, 348, 349, 339, 391, 357, 392,
	340, 369, 368, 370, 0, 0, 0, 0, 0, 471,
	472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 602, 0, 0, 606, 0, 445, 0,
	0, 0, 0, 0, 0, 417, 0, 0, 350, 0,
	0, 0, 461, 0, 403, 385, 628, 0, 0, 401,
	355, 430, 393, 436, 419, 444, 397, 394, 281, 420,
	320, 366, 293, 295, 315, 322, 324, 326, 327, 375,
	376, 388, 407, 421, 422, 423, 319, 303, 402, 304,
	337, 305, 282, 311, 309, 312, 409, 313, 284, 389,
	427, 0, 332, 398, 362, 285, 361, 390, 426, 425,
	294, 452, 458, 459, 548, 0, 464, 629, 630, 631,
	473, 478, 479, 480, 482, 483, 484, 485, 549, 566,
	533, 503, 466, 557, 500, 504, 505, 569, 0, 0,
	0, 457, 351, 352, 0, 330, 278, 279, 624, 316,
	381, 571, 604, 605, 496, 0, 558, 497, 506, 308,
	530, 542, 541, 377, 456, 0, 553, 556, 486, 623,
	0, 550, 565, 627, 564, 620, 387, 0, 406, 562,
	509, 0, 554, 528, 0, 555, 524, 559, 0, 498,
	0, 413, 438, 450, 467, 470, 499, 584, 585, 586,
	283, 469, 588, 589, 590, 591, 592, 593, 594, 587,
	441, 531, 508, 534, 449, 511, 510, 0, 0, 545,
	465, 546, 547, 371, 372, 373, 374, 334, 572, 301,
	468, 396, 0, 532, 0, 0, 0, 0, 0, 0,
	0, 0, 537, 538, 535, 632, 0, 595, 596, 0,
	0, 462, 463, 329, 336, 481, 338, 300, 386, 331,
	447, 345, 0, 474, 539, 475, 598, 601, 599, 600,
	378, 341, 342, 410, 346, 356, 399, 446, 384, 404,
	298, 437, 411, 360, 525, 552, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 580, 579, 578, 577, 576, 575, 574, 573,
	0, 0, 522, 424, 310, 272, 306, 307, 314, 621,
	618, 428, 622, 0, 280, 502, 354, 0, 395, 328,
	567, 568, 0, 0, 228, 229, 230, 231, 232, 233,
	234, 235, 273, 236, 237, 238, 239, 240, 241, 242,
	245, 246, 247, 248, 249, 250, 251, 252, 570, 243,
	244, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 0, 0, 0, 274, 275,
	276, 277, 0, 0, 268, 269, 270, 271, 0, 0,
	0, 453, 454, 455, 477, 0, 439, 501, 619, 0,
	0, 0, 0, 0, 0, 0, 551, 563, 597, 0,
	607, 608, 610, 612, 611, 614, 416, 0, 0, 625,
	492, 493, 626, 603, 383, 0, 507, 540, 529, 613,
	495, 0, 0, 2781, 0, 0, 0, 0, 0, 0,
	0, 323, 0, 0, 353, 544, 526, 536, 527, 512,
	513, 514, 521, 333, 515, 516, 517, 487, 518, 488,
	519, 520, 0, 543, 494, 412, 367, 561, 560, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 0, 0,
	0, 0, 0, 0, 296, 216, 489, 609, 491, 490,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 418, 435, 297, 408, 448, 302, 415, 292,
	382, 405, 0, 0, 288, 433, 414, 364, 343, 344,
	287, 0, 400, 321, 335, 318, 380, 0, 432, 460,
	317, 451, 0, 443, 290, 0, 442, 379, 429, 434,
	365, 359, 289, 431, 363, 358, 347, 325, 476, 348,
	349, 339, 391, 357, 392, 340, 369, 368, 370, 0,
	0, 0, 0, 0, 471, 472, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 602, 0,
	0, 606, 0, 445, 0, 0, 0, 0, 0, 0,
	417, 0, 0, 350, 0, 0, 0, 461, 0, 403,
	385, 628, 0, 0, 401, 355, 430, 393, 436, 419,
	444, 397, 394, 281, 420, 320, 366, 293, 295, 315,
	322, 324, 326, 327, 375, 376, 388, 407, 421, 422,
	423, 319, 303, 402, 304, 337, 305, 282, 311, 309,
	312, 409, 313, 284, 389, 427, 0, 332, 398, 362,
	285, 361, 390, 426, 425, 294, 452, 458, 459, 548,
	0, 464, 629, 630, 631, 473, 478, 479, 480, 482,
	483, 484, 485, 549, 566, 533, 503, 466, 557, 500,
	504, 505, 569, 0, 0, 0, 457, 351, 352, 0,
	330, 278, 279, 624, 316, 381, 571, 604, 605, 496,
	0, 558, 497, 506, 308, 530, 542, 541, 377, 456,
	0, 553, 556, 486, 623, 0, 550, 565, 627, 564,
	620, 387, 0, 406, 562, 509, 0, 554, 528, 0,
	555, 524, 559, 0, 498, 0, 413, 438, 450, 467,
	470, 499, 584, 585, 586, 283, 469, 588, 589, 590,
	591, 592, 593, 594, 587, 441, 531, 508, 534, 449,
	511, 510, 0, 0, 545, 465, 546, 547, 371, 372,
	373, 374, 334, 572, 301, 468, 396, 0, 532, 0,
	0, 0, 0, 0, 0, 0, 0, 537, 538, 535,
	632, 0, 595, 596, 0, 0, 462, 463, 329, 336,
	481, 338, 300, 386, 331, 447, 345, 0, 474, 539,
	475, 598, 601, 599, 600, 378, 341, 342, 410, 346,
	356, 399, 446, 384, 404, 298, 437, 411, 360, 525,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 267, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 580, 579, 578,
	577, 576, 575, 574, 573, 0, 0, 522, 424, 310,
	272, 306, 307, 314, 621, 618, 428, 622, 0, 280,
	502, 354, 0, 395, 328, 567, 568, 0, 0, 228,
	229, 230, 231, 232, 233, 234, 235, 273, 236, 237,
	238, 239, 240, 241, 242, 245, 246, 247, 248, 249,
	250, 251, 252, 570, 243, 244, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	0, 0, 0, 274, 275, 276, 277, 0, 0, 268,
	269, 270, 271, 0, 0, 0, 453, 454, 455, 477,
	0, 439, 501, 619, 0, 0, 0, 0, 0, 0,
	0, 551, 563, 597, 0, 607, 608, 610, 612, 611,
	614, 416, 0, 0, 625, 492, 493, 626, 603, 383,
	0, 507, 540, 529, 613, 495, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 323, 0, 0, 353,
	544, 526, 536, 527, 512, 513, 514, 521, 333, 515,
	516, 517, 487, 518, 488, 519, 520, 0, 543, 494,
	412, 367, 561, 560, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 0, 0, 296,
	216, 489, 609, 491, 490, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2120, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 286, 418, 435, 297,
	408, 448, 302, 415, 292, 382, 405, 0, 0, 288,
	433, 414, 364, 343, 344, 287, 0, 400, 321, 335,
	318, 380, 0, 432, 460, 317, 451, 0, 443, 290,
	0, 442, 379, 429, 434, 365, 359, 289, 431, 363,
	358, 347, 325, 476, 348, 349, 339, 391, 357, 392,
	340, 369, 368, 370, 0, 0, 0, 0, 0, 471,
	472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 602, 0, 0, 606, 0, 445, 0,
	0, 0, 0, 0, 0, 417, 0, 0, 350, 0,
	0, 0, 461, 0, 403, 385, 628, 0, 0, 401,
	355, 430, 393, 436, 419, 444, 397, 394, 281, 420,
	320, 366, 293, 295, 315, 322, 324, 326, 327, 375,
	376, 388, 407, 421, 422, 423, 319, 303, 402, 304,
	337, 305, 282, 311, 309, 312, 409, 313, 284, 389,
	427, 0, 332, 398, 362, 285, 361, 390, 426, 425,
	294, 452, 458, 459, 548, 0, 464, 629, 630, 631,
	473, 478, 479, 480, 482, 483, 484, 485, 549, 566,
	533, 503, 466, 557, 500, 504, 505, 569, 0, 0,
	0, 457, 351, 352, 0, 330, 278, 279, 624, 316,
	381, 571, 604, 605, 496, 0, 558, 497, 506, 308,
	530, 542, 541, 377, 456, 0, 553, 556, 486, 623,
	0, 550, 565, 627, 564, 620, 387, 0, 406, 562,
	509, 0, 554, 528, 0, 555, 524, 559, 0, 498,
	0, 413, 438, 450, 467, 470, 499, 584, 585, 586,
	283, 469, 588, 589, 590, 591, 592, 593, 594, 587,
	441, 531, 508, 534, 449, 511, 510, 0, 0, 545,
	465, 546, 547, 371, 372, 373, 374, 334, 572, 301,
	468, 396, 0, 532, 0, 0, 0, 0, 0, 0,
	0, 0, 537, 538, 535, 632, 0, 595, 596, 0,
	0, 462, 463, 329, 336, 481, 338, 300, 386, 331,
	447, 345, 0, 474, 539, 475, 598, 601, 599, 600,
	378, 341, 342, 410, 346, 356, 399, 446, 384, 404,
	298, 437, 411, 360, 525, 552, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 580, 579, 578, 577, 576, 575, 574, 573,
	0, 0, 522, 424, 310, 272, 306, 307, 314, 621,
	618, 428, 622, 0, 280, 502, 354, 0, 395, 328,
	567, 568, 0, 0, 228, 229, 230, 231, 232, 233,
	234, 235, 273, 236, 237, 238, 239, 240, 241, 242,
	245, 246, 247, 248, 249, 250, 251, 252, 570, 243,
	244, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 0, 0, 0, 274, 275,
	276, 277, 0, 0, 268, 269, 270, 271, 0, 0,
	0, 453, 454, 455, 477, 0, 439, 501, 619, 0,
	0, 0, 0, 0, 0, 0, 551, 563, 597, 0,
	607, 608, 610, 612, 611, 614, 416, 0, 0, 625,
	492, 493, 626, 603, 383, 0, 507, 540, 529, 613,
	495, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 323, 0, 0, 353, 544, 526, 536, 527, 512,
	513, 514, 521, 333, 515, 516, 517, 487, 518, 488,
	519, 520, 0, 543, 494, 412, 367, 561, 560, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 0, 0,
	2542, 0, 0, 0, 296, 216, 489, 609, 491, 490,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 418, 435, 297, 408, 448, 302, 415, 292,
	382, 405, 0, 0, 288, 433, 414, 364, 343, 344,
	287, 0, 400, 321, 335, 318, 380, 0, 432, 460,
	317, 451, 0, 443, 290, 0, 442, 379, 429, 434,
	365, 359, 289, 431, 363, 358, 347, 325, 476, 348,
	349, 339, 391, 357, 392, 340, 369, 368, 370, 0,
	0, 0, 0, 0, 471, 472, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 602, 0,
	0, 606, 0, 445, 0, 0, 0, 0, 0, 0,
	417, 0, 0, 350, 0, 0, 0, 461, 0, 403,
	385, 628, 0, 0, 401, 355, 430, 393, 436, 419,
	444, 397, 394, 281, 420, 320, 366, 293, 295, 315,
	322, 324, 326, 327, 375, 376, 388, 407, 421, 422,
	423, 319, 303, 402, 304, 337, 305, 282, 311, 309,
	312, 409, 313, 284, 389, 427, 0, 332, 398, 362,
	285, 361, 390, 426, 425, 294, 452, 458, 459, 548,
	0, 464, 629, 630, 631, 473, 478, 479, 480, 482,
	483, 484, 485, 549, 566, 533, 503, 466, 557, 500,
	504, 505, 569, 0, 0, 0, 457, 351, 352, 0,
	330, 278, 279, 624, 316, 381, 571, 604, 605, 496,
	0, 558, 497, 506, 308, 530, 542, 541, 377, 456,
	0, 553, 556, 486, 623, 0, 550, 565, 627, 564,
	620, 387, 0, 406, 562, 509, 0, 554, 528, 0,
	555, 524, 559, 0, 498, 0, 413, 438, 450, 467,
	470, 499, 584, 585, 586, 283, 469, 588, 589, 590,
	591, 592, 593, 594, 587, 441, 531, 508, 534, 449,
	511, 510, 0, 0, 545, 465, 546, 547, 371, 372,
	373, 374, 334, 572, 301, 468, 396, 0, 532, 0,
	0, 0, 0, 0, 0, 0, 0, 537, 538, 535,
	632, 0, 595, 596, 0, 0, 462, 463, 329, 336,
	481, 338, 300, 386, 331, 447, 345, 0, 474, 539,
	475, 598, 601, 599, 600, 378, 341, 342, 410, 346,
	356, 399, 446, 384, 404, 298, 437, 411, 360, 525,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 267, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 580, 579, 578,
	577, 576, 575, 574, 573, 0, 0, 522, 424, 310,
	272, 306, 307, 314, 621, 618, 428, 622, 0, 280,
	502, 354, 0, 395, 328, 567, 568, 0, 0, 228,
	229, 230, 231, 232, 233, 234, 235, 273, 236, 237,
	238, 239, 240, 241, 242, 245, 246, 247, 248, 249,
	250, 251, 252, 570, 243, 244, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	0, 0, 0, 274, 275, 276, 277, 0, 0, 268,
	269, 270, 271, 0, 0, 0, 453, 454, 455, 477,
	0, 439, 501, 619, 0, 0, 0, 0, 0, 0,
	0, 551, 563, 597, 0, 607, 608, 610, 612, 611,
	614, 416, 0, 0, 625, 492, 493, 626, 603, 383,
	0, 507, 540, 529, 613, 495, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 323, 0, 0, 353,
	544, 526, 536, 527, 512, 513, 514, 521, 333, 515,
	516, 517, 487, 518, 488, 519, 520, 0, 543, 494,
	412, 367, 561, 560, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 0, 0, 296,
	216, 489, 609, 491, 490, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2503, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 286, 418, 435, 297,
	408, 448, 302, 415, 292, 382, 405, 0, 0, 288,
	433, 414, 364, 343, 344, 287, 0, 400, 321, 335,
	318, 380, 0, 432, 460, 317, 451, 0, 443, 290,
	0, 442, 379, 429, 434, 365, 359, 289, 431, 363,
	358, 347, 325, 476, 348, 349, 339, 391, 357, 392,
	340, 369, 368, 370, 0, 0, 0, 0, 0, 471,
	472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 602, 0, 0, 606, 0, 445, 0,
	0, 0, 0, 0, 0, 417, 0, 0, 350, 0,
	0, 0, 461, 0, 403, 385, 628, 0, 0, 401,
	355, 430, 393, 436, 419, 444, 397, 394, 281, 420,
	320, 366, 293, 295, 315, 322, 324, 326, 327, 375,
	376, 388, 407, 421, 422, 423, 319, 303, 402, 304,
	337, 305, 282, 311, 309, 312, 409, 313, 284, 389,
	427, 0, 332, 398, 362, 285, 361, 390, 426, 425,
	294, 452, 458, 459, 548, 0, 464, 629, 630, 631,
	473, 478, 479, 480, 482, 483, 484, 485, 549, 566,
	533, 503, 466, 557, 500, 504, 505, 569, 0, 0,
	0, 457, 351, 352, 0, 330, 278, 279, 624, 316,
	381, 571, 604, 605, 496, 0, 558, 497, 506, 308,
	530, 542, 541, 377, 456, 0, 553, 556, 486, 623,
	0, 550, 565, 627, 564, 620, 387, 0, 406, 562,
	509, 0, 554, 528, 0, 555, 524, 559, 0, 498,
	0, 413, 438, 450, 467, 470, 499, 584, 585, 586,
	283, 469, 588, 589, 590, 591, 592, 593, 594, 587,
	441, 531, 508, 534, 449, 511, 510, 0, 0, 545,
	465, 546, 547, 371, 372, 373, 374, 334, 572, 301,
	468, 396, 0, 532, 0, 0, 0, 0, 0, 0,
	0, 0, 537, 538, 535, 632, 0, 595, 596, 0,
	0, 462, 463, 329, 336, 481, 338, 300, 386, 331,
	447, 345, 0, 474, 539, 475, 598, 601, 599, 600,
	378, 341, 342, 410, 346, 356, 399, 446, 384, 404,
	298, 437, 411, 360, 525, 552, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 580, 579, 578, 577, 576, 575, 574, 573,
	0, 0, 522, 424, 310, 272, 306, 307, 314, 621,
	618, 428, 622, 0, 280, 502, 354, 0, 395, 328,
	567, 568, 0, 0, 228, 229, 230, 231, 232, 233,
	234, 235, 273, 236, 237, 238, 239, 240, 241, 242,
	245, 246, 247, 248, 249, 250, 251, 252, 570, 243,
	244, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 0, 0, 0, 274, 275,
	276, 277, 0, 0, 268, 269, 270, 271, 0, 0,
	0, 453, 454, 455, 477, 0, 439, 501, 619, 0,
	0, 0, 0, 0, 0, 0, 551, 563, 597, 0,
	607, 608, 610, 612, 611, 614, 416, 0, 0, 625,
	492, 493, 626, 603, 383, 0, 507, 540, 529, 613,
	495, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 323, 0, 0, 353, 544, 526, 536, 527, 512,
	513, 514, 521, 333, 515, 516, 517, 487, 518, 488,
	519, 520, 0, 543, 494, 412, 367, 561, 560, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 0, 0,
	2501, 0, 0, 0, 296, 216, 489, 609, 491, 490,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 418, 435, 297, 408, 448, 302, 415, 292,
	382, 405, 0, 0, 288, 433, 414, 364, 343, 344,
	287, 0, 400, 321, 335, 318, 380, 0, 432, 460,
	317, 451, 0, 443, 290, 0, 442, 379, 429, 434,
	365, 359, 289, 431, 363, 358, 347, 325, 476, 348,
	349, 339, 391, 357, 392, 340, 369, 368, 370, 0,
	0, 0, 0, 0, 471, 472, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 602, 0,
	0, 606, 0, 445, 0, 0, 0, 0, 0, 0,
	417, 0, 0, 350, 0, 0, 0, 461, 0, 403,
	385, 628, 0, 0, 401, 355, 430, 393, 436, 419,
	444, 397, 394, 281, 420, 320, 366, 293, 295, 315,
	322, 324, 326, 327, 375, 376, 388, 407, 421, 422,
	423, 319, 303, 402, 304, 337, 305, 282, 311, 309,
	312, 409, 313, 284, 389, 427, 0, 332, 398, 362,
	285, 361, 390, 426, 425, 294, 452, 458, 459, 548,
	0, 464, 629, 630, 631, 473, 478, 479, 480, 482,
	483, 484, 485, 549, 566, 533, 503, 466, 557, 500,
	504, 505, 569, 0, 0, 0, 457, 351, 352, 0,
	330, 278, 279, 624, 316, 381, 571, 604, 605, 496,
	0, 558, 497, 506, 308, 530, 542, 541, 377, 456,
	0, 553, 556, 486, 623, 0, 550, 565, 627, 564,
	620, 387, 0, 406, 562, 509, 0, 554, 528, 0,
	555, 524, 559, 0, 498, 0, 413, 438, 450, 467,
	470, 499, 584, 585, 586, 283, 469, 588, 589, 590,
	591, 592, 593, 594, 587, 441, 531, 508, 534, 449,
	511, 510, 0, 0, 545, 465, 546, 547, 371, 372,
	373, 374, 334, 572, 301, 468, 396, 0, 532, 0,
	0, 0, 0, 0, 0, 0, 0, 537, 538, 535,
	632, 0, 595, 596, 0, 0, 462, 463, 329, 336,
	481, 338, 300, 386, 331, 447, 345, 0, 474, 539,
	475, 598, 601, 599, 600, 378, 341, 342, 410, 346,
	356, 399, 446, 384, 404, 298, 437, 411, 360, 525,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 267, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 580, 579, 578,
	577, 576, 575, 574, 573, 0, 0, 522, 424, 310,
	272, 306, 307, 314, 621, 618, 428, 622, 0, 280,
	502, 354, 0, 395, 328, 567, 568, 0, 0, 228,
	229, 230, 231, 232, 233, 234, 235, 273, 236, 237,
	238, 239, 240, 241, 242, 245, 246, 247, 248, 249,
	250, 251, 252, 570, 243, 244, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	0, 0, 0, 274, 275, 276, 277, 0, 0, 268,
	269, 270, 271, 0, 0, 0, 453, 454, 455, 477,
	0, 439, 501, 619, 0, 0, 0, 0, 0, 0,
	0, 551, 563, 597, 0, 607, 608, 610, 612, 611,
	614, 416, 0, 2285, 625, 492, 493, 626, 603, 383,
	0, 507, 540, 529, 613, 495, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 323, 0, 0, 353,
	544, 526, 536, 527, 512, 513, 514, 521, 333, 515,
	516, 517, 487, 518, 488, 519, 520, 0, 543, 494,
	412, 367, 561, 560, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 0, 0, 296,
	216, 489, 609, 491, 490, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 286, 418, 435, 297,
	408, 448, 302, 415, 292, 382, 405, 0, 0, 288,
	433, 414, 364, 343, 344, 287, 0, 400, 321, 335,
	318, 380, 0, 432, 460, 317, 451, 0, 443, 290,
	0, 442, 379, 429, 434, 365, 359, 289, 431, 363,
	358, 347, 325, 476, 348, 349, 339, 391, 357, 392,
	340, 369, 368, 370, 0, 0, 0, 0, 0, 471,
	472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 602, 0, 0, 606, 0, 445, 0,
	0, 0, 0, 0, 0, 417, 0, 0, 350, 0,
	0, 0, 461, 0, 403, 385, 628, 0, 0, 401,
	355, 430, 393, 436, 419, 444, 397, 394, 281, 420,
	320, 366, 293, 295, 315, 322, 324, 326, 327, 375,
	376, 388, 407, 421, 422, 423, 319, 303, 402, 304,
	337, 305, 282, 311, 309, 312, 409, 313, 284, 389,
	427, 0, 332, 398, 362, 285, 361, 390, 426, 425,
	294, 452, 458, 459, 548, 0, 464, 629, 630, 631,
	473, 478, 479, 480, 482, 483, 484, 485, 549, 566,
	533, 503, 466, 557, 500, 504, 505, 569, 0, 0,
	0, 457, 351, 352, 0, 330, 278, 279, 624, 316,
	381, 571, 604, 605, 496, 0, 558, 497, 506, 308,
	530, 542, 541, 377, 456, 0, 553, 556, 486, 623,
	0, 550, 565, 627, 564, 620, 387, 0, 406, 562,
	509, 0, 554, 528, 0, 555, 524, 559, 0, 498,
	0, 413, 438, 450, 467, 470, 499, 584, 585, 586,
	283, 469, 588, 589, 590, 591, 592, 593, 594, 587,
	441, 531, 508, 534, 449, 511, 510, 0, 0, 545,
	465, 546, 547, 371, 372, 373, 374, 334, 572, 301,
	468, 396, 0, 532, 0, 0, 0, 0, 0, 0,
	0, 0, 537, 538, 535, 632, 0, 595, 596, 0,
	0, 462, 463, 329, 336, 481, 338, 300, 386, 331,
	447, 345, 0, 474, 539, 475, 598, 601, 599, 600,
	378, 341, 342, 410, 346, 356, 399, 446, 384, 404,
	298, 437, 411, 360, 525, 552, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 580, 579, 578, 577, 576, 575, 574, 573,
	0, 0, 522, 424, 310, 272, 306, 307, 314, 621,
	618, 428, 622, 0, 280, 502, 354, 0, 395, 328,
	567, 568, 0, 0, 228, 229, 230, 231, 232, 233,
	234, 235, 273, 236, 237, 238, 239, 240, 241, 242,
	245, 246, 247, 248, 249, 250, 251, 252, 570, 243,
	244, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 0, 0, 0, 274, 275,
	276, 277, 0, 0, 268, 269, 270, 271, 0, 0,
	0, 453, 454, 455, 477, 0, 439, 501, 619, 0,
	0, 0, 0, 0, 0, 0, 551, 563, 597, 0,
	607, 608, 610, 612, 611, 614, 416, 0, 0, 625,
	492, 493, 626, 603, 383, 0, 507, 540, 529, 613,
	495, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 323, 0, 0, 353, 544, 526, 536, 527, 512,
	513, 514, 521, 333, 515, 516, 517, 487, 518, 488,
	519, 520, 0, 543, 494, 412, 367, 561, 560, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 0, 0,
	0, 1839, 0, 0, 296, 216, 489, 609, 491, 490,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 418, 435, 297, 408, 448, 302, 415, 292,
	382, 405, 0, 0, 288, 433, 414, 364, 343, 344,
	287, 0, 400, 321, 335, 318, 380, 0, 432, 460,
	317, 451, 0, 443, 290, 0, 442, 379, 429, 434,
	365, 359, 289, 431, 363, 358, 347, 325, 476, 348,
	349, 339, 391, 357, 392, 340, 369, 368, 370, 0,
	0, 0, 0, 0, 471, 472, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 602, 0,
	0, 606, 0, 445, 0, 0, 0, 0, 0, 0,
	417, 0, 0, 350, 0, 0, 0, 461, 0, 403,
	385, 628, 0, 0, 401, 355, 430, 393, 436, 419,
	444, 397, 394, 281, 420, 320, 366, 293, 295, 315,
	322, 324, 326, 327, 375, 376, 388, 407, 421, 422,
	423, 319, 303, 402, 304, 337, 305, 282, 311, 309,
	312, 409, 313, 284, 389, 427, 0, 332, 398, 362,
	285, 361, 390, 426, 425, 294, 452, 458, 459, 548,
	0, 464, 629, 630, 631, 473, 478, 479, 480, 482,
	483, 484, 485, 549, 566, 533, 503, 466, 557, 500,
	504, 505, 569, 0, 0, 0, 457, 351, 352, 0,
	330, 278, 279, 624, 316, 381, 571, 604, 605, 496,
	0, 558, 497, 506, 308, 530, 542, 541, 377, 456,
	0, 553, 556, 486, 623, 0, 550, 565, 627, 564,
	620, 387, 0, 406, 562, 509, 0, 554, 528, 0,
	555, 524, 559, 0, 498, 0, 413, 438, 450, 467,
	470, 499, 584, 585, 586, 283, 469, 588, 589, 590,
	591, 592, 593, 594, 587, 441, 531, 508, 534, 449,
	511, 510, 0, 0, 545, 465, 546, 547, 371, 372,
	373, 374, 334, 572, 301, 468, 396, 0, 532, 0,
	0, 0, 0, 0, 0, 0, 0, 537, 538, 535,
	632, 0, 595, 596, 0, 0, 462, 463, 329, 336,
	481, 338, 300, 386, 331, 447, 345, 0, 474, 539,
	475, 598, 601, 599, 600, 378, 341, 342, 410, 346,
	356, 399, 446, 384, 404, 298, 437, 411, 360, 525,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 267, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 580, 579, 578,
	577, 576, 575, 574, 573, 0, 0, 522, 424, 310,
	272, 306, 307, 314, 621, 618, 428, 622, 0, 280,
	502, 354, 0, 395, 328, 567, 568, 0, 0, 228,
	229, 230, 231, 232, 233, 234, 235, 273, 236, 237,
	238, 239, 240, 241, 242, 245, 246, 247, 248, 249,
	250, 251, 252, 570, 243, 244, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	0, 0, 0, 274, 275, 276, 277, 0, 0, 268,
	269, 270, 271, 0, 0, 0, 453, 454, 455, 477,
	0, 439, 501, 619, 0, 0, 0, 0, 0, 0,
	0, 551, 563, 597, 0, 607, 608, 610, 612, 611,
	614, 416, 0, 0, 625, 492, 493, 626, 603, 383,
	0, 507, 540, 529, 613, 495, 0, 1968, 0, 0,
	0, 0, 0, 0, 0, 0, 323, 0, 0, 353,
	544, 526, 536, 527, 512, 513, 514, 521, 333, 515,
	516, 517, 487, 518, 488, 519, 520, 0, 543, 494,
	412, 367, 561, 560, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 0, 0, 296,
	216, 489, 609, 491, 490, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 286, 418, 435, 297,
	408, 448, 302, 415, 292, 382, 405, 0, 0, 288,
	433, 414, 364, 343, 344, 287, 0, 400, 321, 335,
	318, 380, 0, 432, 460, 317, 451, 0, 443, 290,
	0, 442, 379, 429, 434, 365, 359, 289, 431, 363,
	358, 347, 325, 476, 348, 349, 339, 391, 357, 392,
	340, 369, 368, 370, 0, 0, 0, 0, 0, 471,
	472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 602, 0, 0, 606, 0, 445, 0,
	0, 0, 0, 0, 0, 417, 0, 0, 350, 0,
	0, 0, 461, 0, 403, 385, 628, 0, 0, 401,
	355, 430, 393, 436, 419, 444, 397, 394, 281, 420,
	320, 366, 293, 295, 315, 322, 324, 326, 327, 375,
	376, 388, 407, 421, 422, 423, 319, 303, 402, 304,
	337, 305, 282, 311, 309, 312, 409, 313, 284, 389,
	427, 0, 332, 398, 362, 285, 361, 390, 426, 425,
	294, 452, 458, 459, 548, 0, 464, 629, 630, 631,
	473, 478, 479, 480, 482, 483, 484, 485, 549, 566,
	533, 503, 466, 557, 500, 504, 505, 569, 0, 0,
	0, 457, 351, 352, 0, 330, 278, 279, 624, 316,
	381, 571, 604, 605, 496, 0, 558, 497, 506, 308,
	530, 542, 541, 377, 456, 0, 553, 556, 486, 623,
	0, 550, 565, 627, 564, 620, 387, 0, 406, 562,
	509, 0, 554, 528, 0, 555, 524, 559, 0, 498,
	0, 413, 438, 450, 467, 470, 499, 584, 585, 586,
	283, 469, 588, 589, 590, 591, 592, 593, 594, 587,
	441, 531, 508, 534, 449, 511, 510, 0, 0, 545,
	465, 546, 547, 371, 372, 373, 374, 334, 572, 301,
	468, 396, 0, 532, 0, 0, 0, 0, 0, 0,
	0, 0, 537, 538, 535, 632, 0, 595, 596, 0,
	0, 462, 463, 329, 336, 481, 338, 300, 386, 331,
	447, 345, 0, 474, 539, 475, 598, 601, 599, 600,
	378, 341, 342, 410, 346, 356, 399, 446, 384, 404,
	298, 437, 411, 360, 525, 552, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 580, 579, 578, 577, 576, 575, 574, 573,
	0, 0, 522, 424, 310, 272, 306, 307, 314, 621,
	618, 428, 622, 0, 280, 502, 354, 0, 395, 328,
	567, 568, 0, 0, 228, 229, 230, 231, 232, 233,
	234, 235, 273, 236, 237, 238, 239, 240, 241, 242,
	245, 246, 247, 248, 249, 250, 251, 252, 570, 243,
	244, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 0, 0, 0, 274, 275,
	276, 277, 0, 0, 268, 269, 270, 271, 0, 0,
	0, 453, 454, 455, 477, 0, 439, 501, 619, 0,
	0, 0, 0, 0, 0, 0, 551, 563, 597, 0,
	607, 608, 610, 612, 611, 614, 416, 0, 0, 625,
	492, 493, 626, 603, 383, 0, 507, 540, 529, 613,
	495, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 323, 0, 0, 353, 544, 526, 536, 527, 512,
	513, 514, 521, 333, 515, 516, 517, 487, 518, 488,
	519, 520, 0, 543, 494, 412, 367, 561, 560, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 0, 0,
	1484, 0, 0, 0, 296, 216, 489, 609, 491, 490,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 418, 435, 297, 408, 448, 302, 415, 292,
	382, 405, 0, 0, 288, 433, 414, 364, 343, 344,
	287, 0, 400, 321, 335, 318, 380, 0, 432, 460,
	317, 451, 0, 443, 290, 0, 442, 379, 429, 434,
	365, 359, 289, 431, 363, 358, 347, 325, 476, 348,
	349, 339, 391, 357, 392, 340, 369, 368, 370, 0,
	0, 0, 0, 0, 471, 472, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 602, 0,
	0, 606, 0, 445, 0, 0, 0, 0, 0, 0,
	417, 0, 0, 350, 0, 0, 0, 461, 0, 403,
	385, 628, 0, 0, 401, 355, 430, 393, 436, 419,
	444, 1873, 394, 281, 420, 320, 366, 293, 295, 315,
	322, 324, 326, 327, 375, 376, 388, 407, 421, 422,
	423, 319, 303, 402, 304, 337, 305, 282, 311, 309,
	312, 409, 313, 284, 389, 427, 0, 332, 398, 362,
	285, 361, 390, 426, 425, 294, 452, 458, 459, 548,
	0, 464, 629, 630, 631, 473, 478, 479, 480, 482,
	483, 484, 485, 549, 566, 533, 503, 466, 557, 500,
	504, 505, 569, 0, 0, 0, 457, 351, 352, 0,
	330, 278, 279, 624, 316, 381, 571, 604, 605, 496,
	0, 558, 497, 506, 308, 530, 542, 541, 377, 456,
	0, 553, 556, 486, 623, 0, 550, 565, 627, 564,
	620, 387, 0, 406, 562, 509, 0, 554, 528, 0,
	555, 524, 559, 0, 498, 0, 413, 438, 450, 467,
	470, 499, 584, 585, 586, 283, 469, 588, 589, 590,
	591, 592, 593, 594, 587, 441, 531, 508, 534, 449,
	511, 510, 0, 0, 545, 465, 546, 547, 371, 372,
	373, 374, 334, 572, 301, 468, 396, 0, 532, 0,
	0, 0, 0, 0, 0, 0, 0, 537, 538, 535,
	632, 0, 595, 596, 0, 0, 462, 463, 329, 336,
	481, 338, 300, 386, 331, 447, 345, 0, 474, 539,
	475, 598, 601, 599, 600, 378, 341, 342, 410, 346,
	356, 399, 446, 384, 404, 298, 437, 411, 360, 525,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 267, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 580, 579, 578,
	577, 576, 575, 574, 573, 0, 0, 522, 424, 310,
	272, 306, 307, 314, 621, 618, 428, 622, 0, 280,
	502, 354, 0, 395, 328, 567, 568, 0, 0, 228,
	229, 230, 231, 232, 233, 234, 235, 273, 236, 237,
	238, 239, 240, 241, 242, 245, 246, 247, 248, 249,
	250, 251, 252, 570, 243, 244, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	0, 0, 0, 274, 275, 276, 277, 0, 0, 268,
	269, 270, 271, 0, 0, 0, 453, 454, 455, 477,
	0, 439, 501, 619, 0, 0, 0, 0, 0, 0,
	0, 551, 563, 597, 0, 607, 608, 610, 612, 611,
	614, 416, 0, 0, 625, 492, 493, 626, 603, 383,
	0, 507, 540, 529, 613, 495, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 323, 0, 0, 353,
	544, 526, 536, 527, 512, 513, 514, 521, 333, 515,
	516, 517, 487, 518, 488, 519, 520, 0, 543, 494,
	412, 367, 561, 560, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 0, 0, 296,
	216, 489, 609, 491, 490, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 286, 418, 435, 297,
	408, 448, 302, 415, 292, 382, 405, 0, 0, 288,
	433, 414, 364, 343, 344, 287, 0, 400, 321, 335,
	318, 380, 0, 432, 460, 317, 451, 0, 443, 290,
	0, 442, 379, 429, 434, 365, 359, 289, 431, 363,
	358, 347, 325, 476, 348, 349, 339, 391, 357, 392,
	340, 369, 368, 370, 0, 0, 0, 0, 0, 471,
	472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 602, 0, 0, 606, 0, 445, 0,
	0, 1513, 0, 0, 0, 417, 0, 0, 350, 0,
	0, 0, 461, 0, 403, 385, 628, 0, 0, 401,
	355, 430, 393, 436, 419, 444, 397, 394, 281, 420,
	320, 366, 293, 295, 315, 322, 324, 326, 327, 375,
	376, 388, 407, 421, 422, 423, 319, 303, 402, 304,
	337, 305, 282, 311, 309, 312, 409, 313, 284, 389,
	427, 0, 332, 398, 362, 285, 361, 390, 426, 425,
	294, 452, 458, 459, 548, 0, 464, 629, 630, 631,
	473, 478, 479, 480, 482, 483, 484, 485, 549, 566,
	533, 503, 466, 557, 500, 504, 505, 569, 0, 0,
	0, 457, 351, 352, 0, 330, 278, 279, 624, 316,
	381, 571, 604, 605, 496, 0, 558, 497, 506, 308,
	530, 542, 541, 377, 456, 0, 553, 556, 486, 623,
	0, 550, 565, 627, 564, 620, 387, 0, 406, 562,
	509, 0, 554, 528, 0, 555, 524, 559, 0, 498,
	0, 413, 438, 450, 467, 470, 499, 584, 585, 586,
	283, 469, 588, 589, 590, 591, 592, 593, 594, 587,
	441, 531, 508, 534, 449, 511, 510, 0, 0, 545,
	465, 546, 547, 371, 372, 373, 374, 334, 572, 301,
	468, 396, 0, 532, 0, 0, 0, 0, 0, 0,
	0, 0, 537, 538, 535, 632, 0, 595, 596, 0,
	0, 462, 463, 329, 336, 481, 338, 300, 386, 331,
	447, 345, 0, 474, 539, 475, 598, 601, 599, 600,
	378, 341, 342, 410, 346, 356, 399, 446, 384, 404,
	298, 437, 411, 360, 525, 552, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 580, 579, 578, 577, 576, 575, 574, 573,
	0, 0, 522, 424, 310, 272, 306, 307, 314, 621,
	618, 428, 622, 0, 280, 502, 354, 0, 395, 328,
	567, 568, 0, 0, 228, 229, 230, 231, 232, 233,
	234, 235, 273, 236, 237, 238, 239, 240, 241, 242,
	245, 246, 247, 248, 249, 250, 251, 252, 570, 243,
	244, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 0, 0, 0, 274, 275,
	276, 277, 0, 0, 268, 269, 270, 271, 0, 0,
	0, 453, 454, 455, 477, 0, 439, 501, 619, 0,
	0, 0, 0, 0, 0, 0, 551, 563, 597, 0,
	607, 608, 610, 612, 611, 614, 416, 0, 0, 625,
	492, 493, 626, 603, 383, 0, 507, 540, 529, 613,
	495, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	639, 323, 0, 0, 353, 544, 526, 536, 527, 512,
	513, 514, 521, 333, 515, 516, 517, 487, 518, 488,
	519, 520, 0, 543, 494, 412, 367, 561, 560, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 0, 0,
	0, 0, 0, 0, 296, 216, 489, 609, 491, 490,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 418, 435, 297, 408, 448, 302, 415, 292,
	382, 405, 0, 0, 288, 433, 414, 364, 343, 344,
	287, 0, 400, 321, 335, 318, 380, 0, 432, 460,
	317, 451, 0, 443, 290, 0, 442, 379, 429, 434,
	365, 359, 289, 431, 363, 358, 347, 325, 476, 348,
	349, 339, 391, 357, 392, 340, 369, 368, 370, 0,
	0, 0, 0, 0, 471, 472, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 602, 0,
	0, 606, 0, 445, 0, 0, 0, 0, 0, 0,
	417, 0, 0, 350, 0, 0, 0, 461, 0, 403,
	385, 628, 0, 0, 401, 355, 430, 393, 436, 419,
	444, 397, 394, 281, 420, 320, 366, 293, 295, 315,
	322, 324, 326, 327, 375, 376, 388, 407, 421, 422,
	423, 319, 303, 402, 304, 337, 305, 282, 311, 309,
	312, 409, 313, 284, 389, 427, 0, 332, 398, 362,
	285, 361, 390, 426, 425, 294, 452, 458, 459, 548,
	0, 464, 629, 630, 631, 473, 478, 479, 480, 482,
	483, 484, 485, 549, 566, 533, 503, 466, 557, 500,
	504, 505, 569, 0, 0, 0, 457, 351, 352, 0,
	330, 278, 279, 624, 316, 381, 571, 604, 605, 496,
	0, 558, 497, 506, 308, 530, 542, 541, 377, 456,
	0, 553, 556, 486, 623, 0, 550, 565, 627, 564,
	620, 387, 0, 406, 562, 509, 0, 554, 528, 0,
	555, 524, 559, 0, 498, 0, 413, 438, 450, 467,
	470, 499, 584, 585, 586, 283, 469, 588, 589, 590,
	591, 592, 593, 594, 587, 441, 531, 508, 534, 449,
	511, 510, 0, 0, 545, 465, 546, 547, 371, 372,
	373, 374, 334, 572, 301, 468, 396, 0, 532, 0,
	0, 0, 0, 0, 0, 0, 0, 537, 538, 535,
	632, 0, 595, 596, 0, 0, 462, 463, 329, 336,
	481, 338, 300, 386, 331, 447, 345, 0, 474, 539,
	475, 598, 601, 599, 600, 378, 341, 342, 410, 346,
	356, 399, 446, 384, 404, 298, 437, 411, 360, 525,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 267, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 580, 579, 578,
	577, 576, 575, 574, 573, 0, 0, 522, 424, 310,
	272, 306, 307, 314, 621, 618, 428, 622, 0, 280,
	502, 354, 0, 395, 328, 567, 568, 0, 0, 228,
	229, 230, 231, 232, 233, 234, 235, 273, 236, 237,
	238, 239, 240, 241, 242, 245, 246, 247, 248, 249,
	250, 251, 252, 570, 243, 244, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	0, 0, 0, 274, 275, 276, 277, 0, 0, 268,
	269, 270, 271, 0, 0, 0, 453, 454, 455, 477,
	0, 439, 501, 619, 0, 0, 0, 0, 0, 0,
	0, 551, 563, 597, 0, 607, 608, 610, 612, 611,
	614, 416, 0, 0, 625, 492, 493, 626, 603, 383,
	0, 507, 540, 529, 613, 495, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 323, 0, 0, 353,
	544, 526, 536, 527, 512, 513, 514, 521, 333, 515,
	516, 517, 487, 518, 488, 519, 520, 0, 543, 494,
	412, 367, 561, 560, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 0, 0, 296,
	216, 489, 609, 491, 490, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 286, 418, 435, 297,
	408, 448, 302, 415, 292, 382, 405, 0, 0, 288,
	433, 414, 364, 343, 344, 287, 0, 400, 321, 335,
	318, 380, 0, 432, 460, 317, 451, 0, 443, 290,
	0, 442, 379, 429, 434, 365, 359, 289, 431, 363,
	358, 347, 325, 476, 348, 349, 339, 391, 357, 392,
	340, 369, 368, 370, 0, 0, 0, 0, 0, 471,
	472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 602, 0, 649, 606, 0, 445, 0,
	0, 0, 0, 0, 0, 417, 0, 0, 350, 0,
	0, 0, 461, 0, 403, 385, 628, 0, 0, 401,
	355, 430, 393, 436, 419, 444, 397, 394, 281, 420,
	320, 366, 293, 295, 315, 322, 324, 326, 327, 375,
	376, 388, 407, 421, 422, 423, 319, 303, 402, 304,
	337, 305, 282, 311, 309, 312, 409, 313, 284, 389,
	427, 0, 332, 398, 362, 285, 361, 390, 426, 425,
	294, 452, 458, 459, 548, 0, 464, 629, 630, 631,
	473, 478, 479, 480, 482, 483, 484, 485, 549, 566,
	533, 503, 466, 557, 500, 504, 505, 569, 0, 0,
	0, 457, 351, 352, 0, 330, 278, 279, 624, 316,
	381, 571, 604, 605, 496, 0, 558, 497, 506, 308,
	530, 542, 541, 377, 456, 0, 553, 556, 486, 623,
	0, 550, 565, 627, 564, 620, 387, 0, 406, 562,
	509, 0, 554, 528, 0, 555, 524, 559, 0, 498,
	0, 413, 438, 450, 467, 470, 499, 584, 585, 586,
	283, 469, 588, 589, 590, 591, 592, 593, 594, 587,
	441, 531, 508, 534, 449, 511, 510, 0, 0, 545,
	465, 546, 547, 371, 372, 373, 374, 334, 572, 301,
	468, 396, 0, 532, 0, 0, 0, 0, 0, 0,
	0, 0, 537, 538, 535, 632, 0, 595, 596, 0,
	0, 462, 463, 329, 336, 481, 338, 300, 386, 331,
	447, 345, 0, 474, 539, 475, 598, 601, 599, 600,
	378, 341, 342, 410, 346, 356, 399, 446, 384, 404,
	298, 437, 411, 360, 525, 552, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 580, 579, 578, 577, 576, 575, 574, 573,
	0, 0, 522, 424, 310, 272, 306, 307, 314, 621,
	618, 428, 622, 0, 280, 502, 354, 0, 395, 328,
	567, 568, 0, 0, 228, 229, 230, 231, 232, 233,
	234, 235, 273, 236, 237, 238, 239, 240, 241, 242,
	245, 246, 247, 248, 249, 250, 251, 252, 570, 243,
	244, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 0, 0, 0, 274, 275,
	276, 277, 0, 0, 268, 269, 270, 271, 0, 0,
	0, 453, 454, 455, 477, 0, 439, 501, 619, 0,
	0, 0, 0, 0, 0, 0, 551, 563, 597, 0,
	607, 608, 610, 612, 611, 614, 416, 0, 0, 625,
	492, 493, 626, 603, 383, 0, 507, 540, 529, 613,
	495, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 323, 0, 0, 353, 544, 526, 536, 527, 512,
	513, 514, 521, 333, 515, 516, 517, 487, 518, 488,
	519, 520, 0, 543, 494, 412, 367, 561, 560, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 0, 0,
	0, 0, 0, 0, 296, 216, 489, 609, 491, 490,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 418, 435, 297, 408, 448, 302, 415, 292,
	382, 405, 0, 0, 288, 433, 414, 364, 343, 344,
	287, 0, 400, 321, 335, 318, 380, 0, 432, 460,
	317, 451, 0, 443, 290, 0, 442, 379, 429, 434,
	365, 359, 289, 431, 363, 358, 347, 325, 476, 348,
	349, 339, 391, 357, 392, 340, 369, 368, 370, 0,
	0, 0, 0, 0, 471, 472, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 602, 0,
	0, 606, 0, 445, 0, 0, 0, 0, 0, 0,
	417, 0, 0, 350, 0, 0, 0, 461, 0, 403,
	385, 628, 0, 0, 401, 355, 430, 393, 436, 419,
	444, 397, 394, 281, 420, 320, 366, 293, 295, 315,
	322, 324, 326, 327, 375, 376, 388, 407, 421, 422,
	423, 319, 303, 402, 304, 337, 305, 282, 311, 309,
	312, 409, 313, 284, 389, 427, 0, 332, 398, 362,
	285, 361, 390, 426, 425, 294, 452, 458, 459, 548,
	0, 464, 629, 630, 631, 473, 478, 479, 480, 482,
	483, 484, 485, 549, 566, 533, 503, 466, 557, 500,
	504, 505, 569, 0, 0, 0, 457, 351, 352, 0,
	330, 278, 279, 624, 316, 381, 571, 604, 605, 496,
	0, 558, 497, 506, 308, 530, 542, 541, 377, 456,
	0, 553, 556, 486, 623, 0, 550, 565, 627, 564,
	620, 387, 0, 406, 562, 509, 0, 554, 528, 0,
	555, 524, 559, 0, 498, 0, 413, 438, 450, 467,
	470, 499, 584, 585, 586, 283, 469, 588, 589, 590,
	591, 592, 593, 594, 587, 441, 531, 508, 534, 449,
	511, 510, 0, 0, 545, 465, 546, 547, 371, 372,
	373, 374, 334, 572, 301, 468, 396, 0, 532, 0,
	0, 0, 0, 0, 0, 0, 0, 537, 538, 535,
	632, 0, 595, 596, 0, 0, 462, 463, 329, 336,
	481, 338, 300, 386, 331, 447, 345, 0, 474, 539,
	475, 598, 601, 599, 600, 378, 341, 342, 410, 346,
	356, 399, 446, 384, 404, 298, 437, 411, 360, 525,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 267, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 580, 579, 578,
	577, 576, 575, 574, 573, 940, 0, 522, 424, 310,
	272, 306, 307, 314, 621, 618, 428, 622, 0, 280,
	502, 354, 0, 395, 328, 567, 568, 0, 0, 228,
	229, 230, 231, 232, 233, 234, 235, 273, 236, 237,
	238, 239, 240, 241, 242, 245, 246, 247, 248, 249,
	250, 251, 252, 570, 243, 244, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	0, 0, 0, 274, 275, 276, 277, 0, 0, 268,
	269, 270, 271, 0, 0, 0, 453, 454, 455, 477,
	0, 439, 501, 619, 0, 0, 0, 0, 0, 0,
	0, 551, 563, 597, 0, 607, 608, 610, 612, 611,
	614, 416, 0, 0, 625, 492, 493, 626, 603, 383,
	0, 507, 540, 529, 613, 495, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 323, 0, 0, 353,
	544, 526, 536, 527, 512, 513, 514, 521, 333, 515,
	516, 517, 487, 518, 488, 519, 520, 0, 543, 494,
	412, 367, 561, 560, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 0, 0, 296,
	216, 489, 609, 491, 490, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 286, 418, 435, 297,
	408, 448, 302, 415, 292, 382, 405, 0, 0, 288,
	433, 414, 364, 343, 344, 287, 0, 400, 321, 335,
	318, 380, 0, 432, 460, 317, 451, 0, 443, 290,
	0, 442, 379, 429, 434, 365, 359, 289, 431, 363,
	358, 347, 325, 476, 348, 349, 339, 391, 357, 392,
	340, 369, 368, 370, 0, 0, 0, 0, 0, 471,
	472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 602, 0, 0, 606, 0, 445, 0,
	0, 0, 0, 0, 0, 417, 0, 0, 350, 0,
	0, 0, 461, 0, 403, 385, 628, 0, 0, 401,
	355, 430, 393, 436, 419, 444, 397, 394, 281, 420,
	320, 366, 293, 295, 315, 322, 324, 326, 327, 375,
	376, 388, 407, 421, 422, 423, 319, 303, 402, 304,
	337, 305, 282, 311, 309, 312, 409, 313, 284, 389,
	427, 0, 332, 398, 362, 285, 361, 390, 426, 425,
	294, 452, 458, 459, 548, 0, 464, 629, 630, 631,
	473, 478, 479, 480, 482, 483, 484, 485, 549, 566,
	533, 503, 466, 557, 500, 504, 505, 569, 0, 0,
	0, 457, 351, 352, 0, 330, 278, 279, 624, 316,
	381, 571, 604, 605, 496, 0, 558, 497, 506, 308,
	530, 542, 541, 377, 456, 0, 553, 556, 486, 623,
	0, 550, 565, 627, 564, 620, 387, 0, 406, 562,
	509, 0, 554, 528, 0, 555, 524, 559, 0, 498,
	0, 413, 438, 450, 467, 470, 499, 584, 585, 586,
	283, 469, 588, 589, 590, 591, 592, 593, 594, 587,
	441, 531, 508, 534, 449, 511, 510, 0, 0, 545,
	465, 546, 547, 371, 372, 373, 374, 334, 572, 301,
	468, 396, 0, 532, 0, 0, 0, 0, 0, 0,
	0, 0, 537, 538, 535, 632, 0, 595, 596, 0,
	0, 462, 463, 329, 336, 481, 338, 300, 386, 331,
	447, 345, 0, 474, 539, 475, 598, 601, 599, 600,
	378, 341, 342, 410, 346, 356, 399, 446, 384, 404,
	298, 437, 411, 360, 525, 552, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 580, 579, 578, 577, 576, 575, 574, 573,
	0, 0, 522, 424, 310, 272, 306, 307, 314, 621,
	618, 428, 622, 0, 280, 502, 354, 0, 395, 328,
	567, 568, 0, 0, 228, 229, 230, 231, 232, 233,
	234, 235, 273, 236, 237, 238, 239, 240, 241, 242,
	245, 246, 247, 248, 249, 250, 251, 252, 570, 243,
	244, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 0, 0, 0, 274, 275,
	276, 277, 0, 0, 268, 269, 270, 271, 0, 0,
	0, 453, 454, 455, 477, 0, 439, 501, 619, 0,
	0, 0, 0, 0, 0, 0, 551, 563, 597, 0,
	607, 608, 610, 612, 611, 614, 416, 0, 0, 625,
	492, 493, 626, 603, 383, 0, 507, 540, 529, 613,
	495, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 323, 0, 0, 353, 544, 526, 536, 527, 512,
	513, 514, 521, 333, 515, 516, 517, 487, 518, 488,
	519, 520, 0, 543, 494, 412, 367, 561, 560, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 0, 0,
	0, 0, 0, 0, 296, 216, 489, 609, 491, 490,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 418, 1464, 297, 408, 448, 302, 415, 292,
	382, 405, 0, 0, 288, 433, 414, 364, 343, 344,
	287, 0, 400, 321, 335, 318, 380, 0, 432, 460,
	317, 451, 0, 443, 290, 0, 442, 379, 429, 434,
	365, 359, 289, 431, 363, 358, 347, 325, 476, 348,
	349, 339, 391, 357, 392, 340, 369, 368, 370, 0,
	0, 0, 0, 0, 471, 472, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 602, 0,
	0, 606, 0, 445, 0, 0, 0, 0, 0, 0,
	417, 0, 0, 350, 0, 0, 0, 461, 0, 403,
	385, 628, 0, 0, 401, 355, 430, 393, 436, 419,
	444, 397, 394, 281, 420, 320, 366, 293, 295, 315,
	322, 324, 326, 327, 375, 376, 388, 407, 421, 422,
	423, 319, 303, 402, 304, 337, 305, 282, 311, 309,
	312, 409, 313, 284, 389, 427, 0, 332, 398, 362,
	285, 361, 390, 426, 425, 294, 452, 458, 459, 548,
	0, 464, 629, 630, 631, 473, 478, 479, 480, 482,
	483, 484, 485, 549, 566, 533, 503, 466, 557, 500,
	504, 505, 569, 0, 0, 0, 457, 351, 352, 0,
	330, 278, 279, 624, 316, 381, 571, 604, 605, 496,
	0, 558, 497, 506, 308, 530, 542, 541, 377, 456,
	0, 553, 556, 486, 623, 0, 550, 565, 627, 564,
	620, 387, 0, 406, 562, 509, 0, 554, 528, 0,
	555, 524, 559, 0, 498, 0, 413, 438, 450, 467,
	470, 499, 584, 585, 586, 283, 469, 588, 589, 590,
	591, 592, 593, 594, 587, 441, 531, 508, 534, 449,
	511, 510, 0, 0, 545, 465, 546, 547, 371, 372,
	373, 374, 334, 572, 301, 468, 396, 0, 532, 0,
	0, 0, 0, 0, 0, 0, 0, 537, 538, 535,
	632, 0, 595, 596, 0, 0, 462, 463, 329, 336,
	481, 338, 300, 386, 331, 447, 345, 0, 474, 539,
	475, 598, 601, 599, 600, 378, 341, 342, 410, 346,
	356, 399, 446, 384, 404, 298, 437, 411, 360, 525,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 267, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 580, 579, 578,
	577, 576, 575, 574, 573, 0, 0, 522, 424, 310,
	272, 306, 307, 314, 621, 618, 428, 622, 0, 280,
	502, 354, 0, 395, 328, 567, 568, 0, 0, 228,
	229, 230, 231, 232, 233, 234, 235, 273, 236, 237,
	238, 239, 240, 241, 242, 245, 246, 247, 248, 249,
	250, 251, 252, 570, 243, 244, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	0, 0, 0, 274, 275, 276, 277, 0, 0, 268,
	269, 270, 271, 0, 0, 0, 453, 454, 455, 477,
	0, 439, 501, 619, 0, 0, 0, 0, 0, 0,
	0, 551, 563, 597, 0, 607, 608, 610, 612, 611,
	614, 416, 0, 0, 625, 492, 493, 626, 603, 383,
	0, 507, 540, 529, 613, 495, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 323, 0, 0, 353,
	544, 526, 536, 527, 512, 513, 514, 521, 333, 515,
	516, 517, 487, 518, 488, 519, 520, 0, 543, 494,
	412, 367, 561, 560, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 0, 0, 296,
	216, 489, 609, 491, 490, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 286, 418, 1462, 297,
	408, 448, 302, 415, 292, 382, 405, 0, 0, 288,
	433, 414, 364, 343, 344, 287, 0, 400, 321, 335,
	318, 380, 0, 432, 460, 317, 451, 0, 443, 290,
	0, 442, 379, 429, 434, 365, 359, 289, 431, 363,
	358, 347, 325, 476, 348, 349, 339, 391, 357, 392,
	340, 369, 368, 370, 0, 0, 0, 0, 0, 471,
	472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 602, 0, 0, 606, 0, 445, 0,
	0, 0, 0, 0, 0, 417, 0, 0, 350, 0,
	0, 0, 461, 0, 403, 385, 628, 0, 0, 401,
	355, 430, 393, 436, 419, 444, 397, 394, 281, 420,
	320, 366, 293, 295, 315, 322, 324, 326, 327, 375,
	376, 388, 407, 421, 422, 423, 319, 303, 402, 304,
	337, 305, 282, 311, 309, 312, 409, 313, 284, 389,
	427, 0, 332, 398, 362, 285, 361, 390, 426, 425,
	294, 452, 458, 459, 548, 0, 464, 629, 630, 631,
	473, 478, 479, 480, 482, 483, 484, 485, 549, 566,
	533, 503, 466, 557, 500, 504, 505, 569, 0, 0,
	0, 457, 351, 352, 0, 330, 278, 279, 624, 316,
	381, 571, 604, 605, 496, 0, 558, 497, 506, 308,
	530, 542, 541, 377, 456, 0, 553, 556, 486, 623,
	0, 550, 565, 627, 564, 620, 387, 0, 406, 562,
	509, 0, 554, 528, 0, 555, 524, 559, 0, 498,
	0, 413, 438, 450, 467, 470, 499, 584, 585, 586,
	283, 469, 588, 589, 590, 591, 592, 593, 594, 587,
	441, 531, 508, 534, 449, 511, 510, 0, 0, 545,
	465, 546, 547, 371, 372, 373, 374, 334, 572, 301,
	468, 396, 0, 532, 0, 0, 0, 0, 0, 0,
	0, 0, 537, 538, 535, 632, 0, 595, 596, 0,
	0, 462, 463, 329, 336, 481, 338, 300, 386, 331,
	447, 345, 0, 474, 539, 475, 598, 601, 599, 600,
	378, 341, 342, 410, 346, 356, 399, 446, 384, 404,
	298, 437, 411, 360, 525, 552, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 580, 579, 578, 577, 576, 575, 574, 573,
	0, 0, 522, 424, 310, 272, 306, 307, 314, 621,
	618, 428, 622, 0, 280, 502, 354, 0, 395, 328,
	567, 568, 0, 0, 228, 229, 230, 231, 232, 233,
	234, 235, 273, 236, 237, 238, 239, 240, 241, 242,
	245, 246, 247, 248, 249, 250, 251, 252, 570, 243,
	244, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 0, 0, 0, 274, 275,
	276, 277, 0, 0, 268, 269, 270, 271, 0, 0,
	0, 453, 454, 455, 477, 0, 439, 501, 619, 0,
	0, 0, 0, 0, 0, 0, 551, 563, 597, 0,
	607, 608, 610, 612, 611, 614, 416, 0, 0, 625,
	492, 493, 626, 603, 383, 0, 507, 540, 529, 613,
	495, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 323, 0, 0, 353, 544, 526, 536, 527, 512,
	513, 514, 521, 333, 515, 516, 517, 487, 518, 488,
	519, 520, 0, 543, 494, 412, 367, 561, 560, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 0, 0,
	0, 0, 0, 0, 296, 216, 489, 609, 491, 490,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 418, 435, 297, 408, 448, 302, 415, 292,
	382, 405, 0, 0, 288, 433, 414, 364, 343, 344,
	287, 0, 400, 321, 335, 318, 380, 0, 432, 460,
	317, 451, 0, 443, 290, 0, 442, 379, 429, 434,
	365, 359, 289, 431, 363, 358, 347, 325, 476, 348,
	349, 339, 391, 357, 392, 340, 369, 368, 370, 0,
	0, 0, 0, 0, 471, 472, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 602, 0,
	0, 606, 0, 445, 0, 0, 0, 0, 0, 0,
	417, 0, 0, 350, 0, 0, 0, 461, 0, 403,
	385, 628, 0, 0, 401, 355, 430, 393, 436, 419,
	444, 397, 394, 281, 420, 320, 366, 293, 295, 716,
	322, 324, 326, 327, 375, 376, 388, 407, 421, 422,
	423, 319, 303, 402, 304, 337, 305, 282, 311, 309,
	312, 409, 313, 284, 389, 427, 0, 332, 398, 362,
	285, 361, 390, 426, 425, 294, 452, 458, 459, 548,
	0, 464, 629, 630, 631, 473, 478, 479, 480, 482,
	483, 484, 485, 549, 566, 533, 503, 466, 557, 500,
	504, 505, 569, 0, 0, 0, 457, 351, 352, 0,
	330, 278, 279, 624, 316, 381, 571, 604, 605, 496,
	0, 558, 497, 506, 308, 530, 542, 541, 377, 456,
	0, 553, 556, 486, 623, 0, 550, 565, 627, 564,
	620, 387, 0, 406, 562, 509, 0, 554, 528, 0,
	555, 524, 559, 0, 498, 0, 413, 438, 450, 467,
	470, 499, 584, 585, 586, 283, 469, 588, 589, 590,
	591, 592, 593, 594, 587, 441, 531, 508, 534, 449,
	511, 510, 0, 0, 545, 465, 546, 547, 371, 372,
	373, 374, 334, 572, 301, 468, 396, 0, 532, 0,
	0, 0, 0, 0, 0, 0, 0, 537, 538, 535,
	632, 0, 595, 596, 0, 0, 462, 463, 329, 336,
	481, 338, 300, 386, 331, 447, 345, 0, 474, 539,
	475, 598, 601, 599, 600, 378, 341, 342, 410, 346,
	356, 399, 446, 384, 404, 298, 437, 411, 360, 525,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 267, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 580, 579, 578,
	577, 576, 575, 574, 573, 0, 0, 522, 424, 310,
	272, 306, 307, 314, 621, 618, 428, 622, 0, 280,
	502, 354, 0, 395, 328, 567, 568, 0, 0, 228,
	229, 230, 231, 232, 233, 234, 235, 273, 236, 237,
	238, 239, 240, 241, 242, 245, 246, 247, 248, 249,
	250, 251, 252, 570, 243, 244, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	0, 0, 0, 274, 275, 276, 277, 0, 0, 268,
	269, 270, 271, 0, 0, 0, 453, 454, 455, 477,
	0, 439, 501, 619, 0, 0, 0, 0, 0, 0,
	0, 551, 563, 597, 0, 607, 608, 610, 612, 611,
	614, 416, 0, 0, 625, 492, 493, 626, 603, 383,
	0, 507, 540, 529, 613, 495, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 323, 0, 0, 353,
	544, 526, 536, 527, 512, 513, 514, 521, 333, 515,
	516, 517, 487, 518, 488, 519, 520, 0, 543, 494,
	412, 367, 561, 560, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 0, 0, 296,
	216, 489, 609, 491, 490, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 286, 418, 435, 297,
	408, 448, 302, 415, 292, 382, 405, 0, 0, 288,
	433, 414, 364, 343, 344, 287, 0, 400, 321, 335,
	318, 380, 0, 432, 460, 317, 451, 0, 443, 290,
	0, 442, 379, 429, 434, 365, 359, 289, 431, 363,
	358, 347, 325, 476, 348, 349, 339, 391, 357, 392,
	340, 369, 368, 370, 0, 0, 0, 0, 0, 471,
	472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 602, 0, 0, 606, 0, 445, 0,
	0, 0, 0, 0, 0, 417, 0, 0, 350, 0,
	0, 0, 461, 0, 403, 385, 628, 0, 0, 401,
	355, 430, 393, 436, 419, 444, 673, 394, 281, 420,
	320, 366, 293, 295, 315, 322, 324, 326, 327, 375,
	376, 388, 407, 421, 422, 423, 319, 303, 402, 304,
	337, 305, 282, 311, 309, 312, 409, 313, 284, 389,
	427, 0, 332, 398, 362, 285, 361, 390, 426, 425,
	294, 452, 458, 459, 548, 0, 464, 629, 630, 631,
	473, 478, 479, 480, 482, 483, 484, 485, 549, 566,
	533, 503, 466, 557, 500, 504, 505, 569, 0, 0,
	0, 457, 351, 352, 0, 330, 278, 279, 624, 316,
	381, 571, 604, 605, 496, 0, 558, 497, 506, 308,
	530, 542, 541, 377, 456, 0, 553, 556, 486, 623,
	0, 550, 565, 627, 564, 620, 387, 0, 406, 562,
	509, 0, 554, 528, 0, 555, 524, 559, 0, 498,
	0, 413, 438, 450, 467, 470, 499, 584, 585, 586,
	283, 469, 588, 589, 590, 591, 592, 593, 674, 587,
	441, 531, 508, 534, 449, 511, 510, 0, 0, 545,
	465, 546, 547, 371, 372, 373, 374, 334, 572, 301,
	468, 396, 0, 532, 0, 0, 0, 0, 0, 0,
	0, 0, 537, 538, 535, 632, 0, 595, 596, 0,
	0, 462, 463, 329, 336, 481, 338, 300, 386, 331,
	447, 345, 0, 474, 539, 475, 598, 601, 599, 600,
	378, 341, 342, 410, 346, 356, 399, 446, 384, 404,
	298, 437, 411, 360, 525, 552, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 267, 0, 0,
	0, 0, 0, 0, 0, 0, 1090, 0, 0, 0,
	0, 0, 580, 579, 578, 577, 576, 575, 574, 573,
	0, 0, 522, 424, 310, 272, 306, 307, 314, 621,
	618, 428, 622, 0, 280, 502, 354, 0, 395, 328,
	567, 568, 0, 0, 228, 229, 230, 231, 232, 233,
	234, 235, 273, 236, 237, 238, 239, 240, 241, 242,
	245, 246, 247, 248, 249, 250, 251, 252, 570, 243,
	244, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 0, 0, 0, 274, 275,
	276, 277, 0, 0, 268, 269, 270, 271, 0, 0,
	1955, 453, 454, 455, 477, 1916, 439, 501, 619, 0,
	0, 0, 0, 0, 0, 0, 551, 563, 597, 0,
	607, 608, 610, 612, 611, 614, 416, 0, 1076, 625,
	492, 493, 626, 603, 0, 1957, 1925, 0, 0, 0,
	0, 0, 0, 0, 0, 1958, 1959, 0, 1098, 1102,
	1104, 1106, 1108, 1109, 1111, 0, 1116, 1112, 1113, 1114,
	1115, 0, 1093, 1094, 1095, 1096, 1074, 1075, 1099, 0,
	1077, 1924, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085,
	1086, 1089, 1091, 1087, 1088, 1097, 0, 1932, 0, 0,
	0, 0, 0, 1101, 1103, 1105, 1107, 1110, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 695, 694, 701, 691, 0, 0, 0, 0, 0,
	0, 0, 0, 698, 699, 0, 700, 704, 0, 1955,
	685, 1092, 0, 0, 1916, 0, 0, 0, 0, 0,
	709, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1948, 0, 0, 0, 0,
	0, 0, 0, 0, 1957, 1925, 0, 0, 0, 0,
	0, 0, 0, 0, 1958, 1959, 0, 0, 0, 0,
	0, 0, 0, 0, 713, 0, 0, 715, 0, 0,
	0, 0, 714, 0, 0, 0, 0, 0, 0, 0,
	1924, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1932, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1915, 1917, 1914, 0,
	1911, 0, 0, 0, 0, 1936, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1942, 0, 0, 0,
	0, 0, 0, 0, 1927, 0, 1910, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1930, 1964, 0, 0,
	1931, 1933, 1935, 0, 1937, 1938, 1939, 1943, 1944, 1945,
	1947, 1950, 1951, 1952, 1948, 0, 0, 0, 0, 0,
	0, 1940, 1949, 1941, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1919, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1956, 0, 0, 0, 686,
	688, 687, 0, 0, 0, 0, 0, 0, 0, 693,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 697, 1912, 1913, 0, 1915, 2747, 1914, 712, 2746,
	0, 0, 0, 0, 1936, 690, 0, 0, 0, 0,
	1953, 0, 0, 0, 0, 1942, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1929, 0, 0,
	0, 0, 0, 0, 1928, 1930, 1964, 0, 0, 1931,
	1933, 1935, 0, 1937, 1938, 1939, 1943, 1944, 1945, 1947,
	1950, 1951, 1952, 0, 1100, 0, 0, 0, 1946, 0,
	1940, 1949, 1941, 1955, 0, 0, 0, 1934, 0, 1090,
	193, 0, 1919, 0, 0, 0, 0, 0, 0, 0,
	1961, 1960, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3492, 0, 1956, 0, 0, 0, 1957, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1207,
	1208, 1209, 1206, 0, 0, 692, 696, 702, 0, 703,
	705, 1912, 1913, 706, 707, 708, 0, 0, 710, 711,
	0, 0, 0, 1921, 0, 0, 0, 0, 0, 1953,
	189, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1932, 0, 0, 0, 0, 0, 1929, 0, 0, 0,
	0, 0, 0, 1928, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1963, 0, 0, 1962, 0,
	0, 0, 0, 0, 0, 0, 0, 1946, 1725, 0,
	0, 1076, 0, 0, 0, 1066, 1934, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1961,
	1960, 1098, 1102, 1104, 1106, 1108, 1109, 1111, 1948, 1116,
	1112, 1113, 1114, 1115, 0, 1093, 1094, 1095, 1096, 1074,
	1075, 1099, 0, 1077, 0, 1078, 1079, 1080, 1081, 1082,
	1083, 1084, 1085, 1086, 1089, 1091, 1087, 1088, 1097, 0,
	0, 0, 0, 0, 0, 0, 1101, 1103, 1105, 1107,
	1110, 0, 1921, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 689, 0, 0, 0, 0, 0,
	1955, 0, 0, 0, 1092, 0, 0, 0, 1936, 0,
	0, 0, 0, 0, 1963, 0, 0, 1962, 0, 1942,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1957, 0, 0, 0, 1930,
	1964, 0, 0, 1931, 1933, 1935, 0, 1937, 1938, 1939,
	1943, 1944, 1945, 1947, 1950, 1951, 1952, 0, 0, 0,
	0, 1721, 0, 0, 1940, 1949, 1941, 0, 1718, 0,
	0, 0, 1720, 1717, 1719, 1723, 1724, 3658, 0, 0,
	1722, 1955, 0, 0, 0, 0, 0, 1932, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1956, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1957, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1953, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1955, 1948, 0, 0, 0, 0,
	1929, 0, 0, 0, 0, 0, 0, 1928, 1932, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1957,
	0, 1946, 0, 0, 0, 0, 0, 0, 0, 0,
	1934, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1706, 1707, 1708, 1709, 1710, 1711, 1712,
	1713, 1714, 1715, 1716, 1728, 1729, 1730, 1731, 1732, 1733,
	1726, 1727, 3629, 0, 0, 1936, 1948, 0, 0, 0,
	0, 1932, 0, 0, 0, 0, 1942, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1930, 1964, 0, 0,
	1931, 1933, 1935, 0, 1937, 1938, 1939, 1943, 1944, 1945,
	1947, 1950, 1951, 1952, 0, 0, 0, 1100, 0, 0,
	0, 1940, 1949, 1941, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 157, 1948,
	0, 0, 0, 0, 0, 0, 1936, 0, 0, 0,
	0, 0, 0, 0, 0, 1956, 0, 1942, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1930, 1964, 0,
	0, 1931, 1933, 1935, 0, 1937, 1938, 1939, 1943, 1944,
	1945, 1947, 1950, 1951, 1952, 0, 0, 0, 0, 0,
	1953, 0, 1940, 1949, 1941, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1929, 0, 1936,
	0, 0, 0, 0, 1928, 0, 0, 0, 0, 0,
	1942, 0, 0, 0, 0, 0, 1956, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1946, 0,
	1930, 1964, 0, 0, 1931, 1933, 1935, 1934, 1937, 1938,
	1939, 1943, 1944, 1945, 1947, 1950, 1951, 1952, 0, 0,
	0, 0, 0, 0, 0, 1940, 1949, 1941, 0, 0,
	0, 1953, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1929, 0,
	0, 0, 0, 0, 0, 1928, 0, 0, 0, 1956,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1946,
	0, 0, 0, 0, 0, 0, 0, 0, 1934, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1953, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1929, 0, 0, 0, 0, 0, 0, 1928, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1946, 0, 0, 0, 0, 0, 0, 0,
	0, 1934,
}

var yyPact = [...]int{
	335, -1000, -1000, -1000, -299, 13464, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 45466, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 451, 45466,
	-297, 28246, 43621, -1000, -1000, 2618, -1000, 44236, 15322, 45466,
	536, 527, 45466, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 910, -1000, 47926, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 846, 4242, 47311, 10369,
	-197, -1000, 1519, -20, 2493, 532, -187, -189, 1053, 1063,
	1160, 1160, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 224, 976, 44851, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 3915, 247, 976, 20248, 159, 143, 1519, 423,
	-54, 190, -1000, 1429, 3965, 214, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 10369, 10369, 13464,
	-345, 13464, 10369, 45466, 45466, -1000, -1000, -1000, -1000, -297,
	44236, 846, 4242, 10369, 2493, 532, -187, -189, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -54, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	143, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 48928, -1000, 1608, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2237, 3042, 1607, 2489, 804, 43621, 45466,
	-1000, 156, 804, -1000, -1000, -1000, 1519, 3485, -1000, 45466,
	45466, 230, 1821, -1000, 510, 424, 397, 355, 1578, -1000,
	-1000, -1000, -1000, -1000, -1000, 736, 3429, -1000, 45466, 45466,
	3066, 45466, -1000, 2173, 762, -1000, 48628, 3264, 1363, 944,
	3092, -1000, -1000, 3025, -1000, 359, 277, 352, 461, 441,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 331, -1000, 3301,
	-1000, -1000, 347, -1000, -1000, 342, -1000, -1000, -1000, 125,
	-1000, -1000, -1000, -1000, -1000, -1000, 47, -1000, -1000, 1134,
	2480, 10369, 2070, -1000, 3753, 1626, -1000, -1000, -1000, 6043,
	12220, 12220, 12220, 12220, 45466, -1000, -1000, 2840, 10369, 3024,
	3023, 3022, 3021, -1000, -1000, -1000, -1000, -1000, -1000, 1575,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1946,
	-1000, -1000, -1000, 12837, -1000, 3019, 3009, 3008, 3006, 3000,
	2993, 2992, 2991, 2990, 2989, 2985, 2982, 2981, 2980, 2711,
	14697, 2979, 2487, 2482, 2977, 2976, 2975, 2481, 2972, 2971,
	2966, 2711, 2711, 2965, 2964, 2957, 2937, 2935, 2931, 2930,
	2927, 2926, 2920, 2919, 2918, 2917, 2913, 2898, 2897, 2893,
	2891, 2882, 2880, 2874, 2872, 2870, 2868, 2867, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1381, -1000, 2866, 3419, 2771, -1000, 3313, 3308, 3302,
	3299, -249, 2865, 2150, -1000, -1000, 121, 3415, 45466, -271,
	45466, 2472, -60, 2471, -80, -1000, -53, -1000, -1000, 1046,
	-1000, 1018, -1000, 845, 845, 845, 45466, 45466, 261, 894,
	845, 845, 845, 845, 845, 880, 845, 3337, 903, 898,
	895, 893, 845, -5, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1820, 1814, 3165, 998, -1000, -1000, -1000, -1000, 1448,
	45466, -1000, 2815, 2462, 1685, 1685, 3390, 3390, 3334, 778,
	775, 767, 1685, 636, -1000, 1793, 1793, 1793, 1793, 1685,
	553, 770, 3341, 3341, 146, 1793, 111, 1685, 1685, 111,
	1685, 1685, -1000, 1754, 258, -258, -1000, -1000, -1000, -1000,
	1793, 1793, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3321,
	3319, 846, 846, 45466, 846, 267, 45466, 846, 846, 846,
	851, 83, 46696, 46081, 2173, 761, 759, 1479, 1751, -1000,
	1764, 45466, 45466, 1764, 1764, 23326, 22711, -1000, 45466, -1000,
	3419, 2771, 2705, 1660, 2702, 2771, -89, 2461, 846, 846,
	846, 846, 846, 313, 846, 846, 846, 846, 846, 45466,
	45466, 43006, 846, 846, 846, 846, 8511, 8511, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 13464, 2210, 2182,
	209, 5, -284, 281, -1000, -1000, 45466, 3227, 311, -1000,
	-1000, -1000, 2721, -1000, 2777, 2777, 2777, 2777, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2777, 2777, 2813,
	2864, -1000, -1000, 2770, 2770, 2770, 2721, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2795, 2795, 2800, 2800, 2795, 45466, -115, -1000,
	-1000, 10369, 45466, 3244, 448, 2850, 804, -1000, -1000, 45466,
	193, 489, 3419, 3236, 3341, 3377, -1000, -1000, 1573, 2147,
	2456, -1000, 355, -1000, 438, 355, 1697, -1000, 1096, -1000,
	-1000, -1000, -1000, -1000, 45466, 47, 452, -1000, -1000, 2407,
	2847, -1000, 650, 1310, 1314, -1000, 271, 4384, 36241, 2173,
	36241, 45466, -1000, -1000, -1000, -1000, -1000, -1000, 123, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 368, -1000, 10369, 10369, 10369, 10369, 10369,
	-1000, 806, 11603, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	12220, 12220, 12220, 12220, 12220, 12220, 12220, 12220, 12220, 12220,
	12220, 12220, 2836, 1775, 12220, 12220, 12220, 12220, 25171, 1660,
	3177, 1462, 321, 1626, 1626, 1626, 1626, 10369, -1000, 1848,
	2480, 10369, 10369, 10369, 10369, 45466, -1000, -1000, 48888, 10369,
	10369, 4215, 10369, 3297, 10369, 10369, 10369, 2699, 4808, 45466,
	10369, -1000, 2698, 2684, -1000, -1000, 1956, 10369, -1000, -1000,
	10369, -1000, -1000, 10369, 12220, 10369, -1000, 10369, 10369, 10369,
	-1000, -1000, 3113, 3297, 3297, 3297, 1776, 10369, 10369, 3297,
	3297, 3297, 1773, 3297, 3297, 3297, 3297, 3297, 3297, 3297,
	3297, 3297, 3297, 2683, 2675, 2671, 9752, 3341, -197, -1000,
	7894, 3236, 3341, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -252, 2846, 45466, 2450, 2447, -310, 1050,
	511, 45466, 1112, 439, 2146, -90, 2144, 103, 1047, 1027,
	1013, -1000, 2435, 1856, 45466, 45466, 3278, -1000, 2842, 45466,
	845, 845, 845, -1000, 41161, 36241, 45466, 45466, 2173, 45466,
	45466, 45466, 845, 845, 845, 845, 45466, -1000, 3200, 36241,
	3171, 851, -1000, 45466, 1448, 3277, 45466, 439, 3390, 12220,
	12220, -1000, -1000, 10369, -1000, 42391, 1793, 1685, 1685, -1000,
	-1000, 45466, -1000, -1000, -1000, 1793, 45466, 1793, 1793, 3390,
	1793, -1000, -1000, -1000, 1685, 1685, -1000, -1000, 10369, -1000,
	-1000, 1793, 1793, -1000, -1000, 3390, 45466, 116, 3390, 3390,
	142, -1000, -1000, -1000, 1685, 45466, 45466, 845, 45466, -1000,
	45466, 45466, -1000, -1000, 45466, 45466, 48524, 45466, 41161, 41776,
	3311, -1000, 36241, 45466, 45466, 34396, -1000, 1384, -1000, 67,
	-1000, 101, 83, 1764, 83, 1764, -1000, 647, 755, 21481,
	582, 36241, 5425, -1000, -1000, 1764, 1764, 5425, 5425, 1631,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1441, -1000, 332,
	3341, -1000, -1000, -1000, -1000, -1000, 2142, 439, 45466, 41161,
	36241, 2173, 45466, 846, 45466, 45466, 45466, 45466, 45466, -1000,
	2841, 1571, -1000, 3251, 45466, 45466, 45466, 45466, 1303, -1000,
	-1000, 18397, 1570, 1303, -1000, 1879, -1000, 10369, 13464, -226,
	10369, 13464, 13464, 10369, 13464, -1000, 10369, 302, -1000, -1000,
	-1000, -1000, 2135, -1000, 2126, -1000, -1000, -1000, -1000, -1000,
	2434, 2434, -1000, 2123, -1000, -1000, -1000, -1000, 2111, -1000,
	-1000, 2108, -1000, -1000, -1000, -1000, -139, 2670, 1134, -1000,
	2431, 3091, -198, -1000, 19633, 45466, 45466, 448, -321, 1806,
	1804, 1801, -1000, -198, -1000, 19015, 45466, 3341, -1000, -203,
	3236, 10369, 45466, -1000, 3333, -1000, -1000, 355, -1000, 434,
	427, -1000, -1000, -1000, -1000, -1000, -1000, 1564, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 433, -55,
	-56, 1438, -1000, 45466, -1000, -1000, 271, 36241, 38086, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 259, -1000, -1000, 192,
	-1000, 876, 274, 1688, -1000, -1000, 248, 222, 233, 953,
	2480, -1000, 1891, 1891, 1883, -1000, 855, -1000, -1000, -1000,
	-1000, 2840, -1000, -1000, -1000, 1809, 2631, -1000, 1722, 1722,
	1536, 1536, 1536, 1536, 1536, 1847, 1847, -1000, -1000, -1000,
	6043, 2836, 12220, 12220, 12220, 12220, 916, 916, 3296, 3055,
	-1000, -1000, -1000, -1000, 10369, 191, 1859, -1000, 10369, 2404,
	1468, 2263, 1400, 1563, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2669, 2667, 2418, 3414, 2665, 10369,
	-1000, -1000, 1677, 1657, 1630, -1000, 2363, 9135, -1000, -1000,
	-1000, 2658, 1562, 2656, -1000, -1000, -1000, 2655, 1623, 1147,
	2652, 2797, 2651, 2649, 2648, 2647, 1416, 10369, 10369, 10369,
	10369, 2645, 1620, 1619, 10369, 10369, 10369, 10369, 2641, 10369,
	10369, 10369, 10369, 10369, 10369, 10369, 10369, 10369, 10369, 179,
	179, 179, 1415, 1412, -1000, -1000, 1617, -1000, 2480, -1000,
	-1000, 3236, -1000, 2835, 2107, 1390, -1000, -1000, -294, 2357,
	45466, 186, 45466, 2423, -272, 45466, -1000, -1000, 2422, -1000,
	2420, -1000, -1000, -1000, 1049, 1016, 1040, 2416, 3233, 3331,
	905, 45466, 1317, 2834, 45466, 45466, 45466, 294, -1000, -1000,
	1246, -1000, 274, 269, 545, 1139, 3062, 3409, -118, 45466,
	45466, 45466, 45466, 3276, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 40546, -1000, 2833, 1616, -1000, -1000, -1000, 1626,
	1626, 2480, 3054, 45466, 45466, 3390, 3390, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1793, 3390, 3390, 1383, 1685, 1793,
	-1000, -1000, 1793, -321, -1000, 1793, -1000, -321, 1556, -321,
	45466, -1000, -1000, -1000, 3274, 2815, 1386, -1000, -1000, -1000,
	3376, 1218, 835, 835, 1045, 561, 3375, 17167, -1000, 1700,
	1132, 873, 3208, 357, -1000, 1700, -136, 812, 1700, 1700,
	1700, 1700, 1700, 1700, 1700, 731, 716, 1700, 1700, 1700,
	1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1057, 1700,
	1700, 1700, 1700, 1700, -1000, 1700, 2832, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 751, 677, 292, 3305, 394, -1000,
	391, 1246, 3295, 430, 3500, 1201, -1000, -1000, -1000, -1000,
	25786, 25786, 20866, 25786, -1000, 212, 83, 76, -1000, -1000,
	1384, 5425, 1384, 5425, -1000, -1000, 870, -1000, -1000, 1139,
	-1000, 45466, 45466, -1000, -1000, 2831, 1800, -1000, -1000, 14697,
	-1000, 5425, 5425, -1000, -1000, 27631, 45466, -1000, 45, -1000,
	55, 3236, -1000, -1000, 1353, -1000, -1000, 1379, 1139, 3090,
	45466, 1353, 1353, 1353, -1000, -1000, 16552, 45466, 45466, -1000,
	-1000, -1000, -1000, 3390, 8511, -1000, 34396, -1000, -1000, 39931,
	-1000, 39316, 3390, 1842, -1000, 13464, 2162, 204, -1000, 273,
	-292, 202, 1900, 200, 2480, -1000, -1000, 2637, 2627, 1612,
	-1000, 1611, 2626, 1609, 1603, 2105, -1000, 105, -1000, 3230,
	1142, -1000, 2830, -1000, 1598, 3158, -1000, 1347, -1000, 1799,
	1592, -1000, -1000, -1000, 10369, 38701, 10369, 1142, 1581, 3147,
	1347, 3236, 2415, -1000, 1345, -1000, 2275, 1542, 227, -1000,
	-1000, -1000, 45466, 846, 2407, 1576, 38086, 1190, -1000, 869,
	1541, 1533, -1000, 36241, 349, 36241, -1000, 36241, -1000, -1000,
	412, -1000, 45466, 3232, -1000, -1000, -1000, 2357, 1797, -318,
	45466, -1000, -1000, -1000, -1000, -1000, 1568, -1000, 916, 916,
	3296, 2974, -1000, 12220, -1000, 12220, 3166, -1000, 1840, -1000,
	10369, 2104, 4487, 10369, 4487, 1753, 24556, 45466, -1000, -1000,
	10369, 10369, -1000, 3065, -1000, -1000, -1000, -1000, 10369, 10369,
	2284, -1000, 45466, -1000, -1000, -1000, -1000, 24556, -1000, 12220,
	-1000, -1000, -1000, -1000, 10369, 1329, 1329, 3045, 1565, 179,
	179, 179, 3040, 2987, 2983, 1559, 179, 2973, 2968, 2932,
	2910, 2894, 2848, 2792, 2755, 2714, 2707, -1000, 2828, -1000,
	-1000, 1942, 10986, 7894, -1000, -1000, 320, 1341, 2092, 2403,
	137, -1000, 1796, -1000, 45466, 45466, 1105, -1000, 45466, 3407,
	-1000, 2397, -1000, -1000, -1000, 1004, 2391, -1000, 447, 2015,
	231, 322, 2620, 1281, -1000, -1000, 45466, -1000, -1000, -1000,
	16552, 2815, 2827, 2815, 197, 1700, 676, 36241, 750, -1000,
	45466, 45466, 2154, 1786, 3088, 578, 3224, 45466, 2826, 446,
	2824, 2818, 3273, 512, 48405, 45466, 1294, -1000, 1528, 3965,
	-1000, 45466, -1000, 2173, -1000, 1685, -1000, -1000, 3390, -1000,
	-1000, 10369, 10369, 3390, 1685, 1685, -1000, 1793, -1000, 45466,
	-1000, -1000, 512, 48405, 3272, 48653, 714, 2709, -1000, 45466,
	-1000, -1000, -1000, 830, -1000, 1017, 845, 45466, 1914, 1017,
	1913, 2817, -1000, -1000, 45466, 45466, 45466, 45466, -1000, -1000,
	45466, -1000, 45466, 45466, 45466, 45466, 45466, 37471, -1000, 45466,
	45466, -1000, 45466, 1911, 45466, 1910, 3245, -1000, 1700, 1700,
	964, -1000, -1000, 627, -1000, 37471, 2090, 2085, 2080, 2078,
	2390, 2389, 2380, 1700, 1700, 2077, 2378, 36856, 2373, 1148,
	2072, 2067, 2064, 2133, 2372, 960, -1000, 2368, 2132, 2124,
	2093, 45466, 2816, 2302, -1000, -1000, 2015, 197, 1700, 386,
	45466, 1774, 1771, 676, 533, 36, 22096, 45466, 34396, 34396,
	34396, 34396, -1000, 3121, 3118, 3115, -1000, 3143, 3112, 3155,
	45466, 34396, 2815, -1000, 36856, -1000, -1000, -1000, 1660, 1554,
	3070, 1011, 10369, -1000, -1000, 59, 92, -1000, -1000, -1000,
	36241, 2367, 582, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	3330, 45466, 45466, 843, 2619, 1248, -1000, -1000, -1000, 48405,
	2777, 2777, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2777, 2777, 2813, -1000, -1000, 2770, 2770, 2770, 2721,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2795, 2795, 2800, 2800, 2795, -1000, -1000, 3387, -1000, 1244,
	-1000, -1000, 1523, -1000, 3387, 1850, -301, 13464, 1802, 1736,
	-1000, 10369, 13464, 10369, -234, 372, -237, -1000, -1000, -1000,
	2365, -1000, -1000, -1000, 2062, -1000, 2061, -1000, 210, 195,
	1909, -198, 7894, 422, 45466, -198, 45466, 7894, -1000, 45466,
	187, -331, -332, 175, 421, -198, 3330, 105, 10369, 3192,
	-1000, -1000, 45466, 2058, -1000, -1000, -1000, 3395, 36241, 2173,
	1627, 35626, -1000, 341, -1000, 257, 607, 2361, -1000, 887,
	135, 2360, 2357, -1000, -1000, -1000, -1000, 12220, 1626, -1000,
	-1000, -1000, 2480, 10369, 2615, -1000, 1012, 1012, 2116, 2613,
	2611, -1000, 2777, 2777, -1000, 2721, 2770, 2721, 1012, 1012,
	2604, -1000, 2220, 2633, -1000, 2595, 2562, 10369, -1000, 2603,
	2887, 1447, -9, -167, 179, 179, -1000, -1000, -1000, -1000,
	179, 179, 179, 179, -1000, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 179, 807, -83, -263, -84, -264,
	-1000, 2601, 1242, -1000, -1000, -1000, -1000, -1000, 4215, 1231,
	573, 573, 2357, 2354, 868, 2351, 1044, 45466, 2347, -275,
	-1000, -1000, 2344, -1000, -1000, 45466, 2343, -1000, 671, 45466,
	45466, 2341, 2340, 1317, 48405, 2597, 3267, 15937, 3266, 2165,
	-1000, -1000, -1000, 27016, 601, -1000, -1000, -1000, 723, 324,
	2056, 587, -1000, 45466, 430, 430, 3178, 1770, 2339, 45466,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 3224, -1000, 926,
	490, 33166, 14082, -1000, 402, 45466, -1000, 15937, 15937, 402,
	496, 1798, -1000, 804, 1205, 151, 34396, 45466, -1000, 33781,
	2596, -1000, 1139, 3390, -1000, 2480, 2480, -321, 3390, 3390,
	1685, -1000, 496, -1000, 402, -1000, 1614, 17782, 609, 516,
	509, -1000, 697, -1000, -1000, 801, 3187, 48405, -1000, 45466,
	-1000, 45466, -1000, 45466, 45466, 845, 10369, 3187, 45466, 865,
	-1000, -1000, 1121, 492, 464, 841, 841, 1226, -1000, 3261,
	-1000, -1000, 1193, -1000, -1000, -1000, -1000, 45466, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 24556, 24556, 3287, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2337, 2335, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 45466, 1537, -1000, 1769, 2334, 2165, 27016, 1765,
	1764, 2330, 2327, 601, 2154, 1757, 2163, 45466, -1000, 1159,
	45466, 45466, -1000, 1255, -1000, 1756, 3046, 3086, 3046, -1000,
	-1000, -1000, -1000, -1000, 3114, -1000, 3002, -1000, -1000, 1255,
	-1000, -1000, -1000, -1000, -1000, 1011, -1000, 3329, 1017, 1017,
	1017, 2588, -1000, -1000, -1000, 1190, 2585, -1000, -1000, -1000,
	3440, -1000, -1000, -1000, -1000, -1000, -1000, 16552, 3223, 3382,
	3374, 35011, 3382, -1000, -301, 1725, -1000, 2100, 198, 1791,
	45466, -1000, -1000, -1000, 2584, 2583, -205, 216, 3370, 3368,
	1074, -1000, 2576, 1186, -198, -1000, -1000, 1142, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -198, -1000, 1142, -1000, 210,
	-1000, -1000, 3212, -1000, -1000, 2173, -1000, 255, -1000, -1000,
	-1000, -1000, -1000, -1000, 243, -1000, 45466, -1000, 1184, 134,
	-1000, 2480, -1000, -1000, -1000, -1000, -1000, 4487, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 10369,
	-1000, -1000, -1000, 2531, -1000, -1000, 10369, 2571, 2326, 2570,
	2325, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 3419, -1000, 3366,
	1529, 2568, 2564, 1524, 2557, 2555, -1000, 10369, 2554, 4215,
	979, 2317, 979, -1000, -1000, 420, 26401, 45466, 3393, -1000,
	45466, 2316, -1000, -1000, 2015, 665, 692, -1000, -1000, -1000,
	-1000, 896, 402, 2553, 1176, -1000, -1000, -1000, -1000, 402,
	-1000, 2315, 265, -1000, -1000, -1000, -1000, 2311, 2305, 2054,
	-1000, -1000, 2081, 1502, 285, -1000, -1000, -1000, -1000, -1000,
	-1000, 2163, 2163, 2110, 1755, -322, -1000, 2765, -1000, 1700,
	1700, 1700, 45466, 1501, -1000, 1700, 1700, 2551, -1000, -1000,
	2546, 2543, -120, 814, 1743, 1741, -1000, 2051, 25786, 34396,
	33781, 1219, -1000, 1517, -1000, -1000, -1000, -1000, -1000, -1000,
	3390, 814, -1000, 583, 2045, 12220, 2762, 12220, 2761, 618,
	2754, 1494, -1000, 45466, -1000, -1000, 45466, 3942, 2750, -1000,
	2749, 3052, 571, 2748, 2741, 45466, 2474, -1000, 3187, 45466,
	791, 3222, -1000, -1000, -1000, 426, -1000, -1000, 639, -1000,
	45466, -1000, 45466, -1000, 1613, -1000, 24556, -1000, -1000, 1478,
	-1000, 2302, 2301, -1000, -1000, 265, 2296, 5425, -1000, -1000,
	-1000, 3178, 2295, -1000, 2290, -1000, 45466, 1159, 1159, 3419,
	45466, 7894, -1000, -1000, 10369, 2740, -1000, 10369, -1000, -1000,
	-1000, -1000, -1000, 2733, 3229, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1871, -1000, 10369, 10369, -1000, -1000, 839, 13464,
	-239, 371, -1000, -1000, -1000, -207, 2283, -1000, -1000, 3365,
	2282, 2181, 45466, -1000, -1000, 1142, 1142, -205, -1000, -1000,
	1139, -1000, -1000, 1155, 733, -1000, 2536, 2454, -1000, 2443,
	179, -1000, 179, -1000, 306, 10369, -1000, 2276, -1000, -1000,
	-1000, 2274, -1000, -1000, 2430, -1000, 2518, -1000, 2273, -1000,
	-1000, 45466, -1000, 856, 1032, 2272, -325, 2269, 2015, 2015,
	45466, 48405, -121, -120, 15937, -121, -1000, -1000, 401, -1000,
	-1000, 403, -1000, -1000, 2017, 649, -1000, -1000, -1000, -1000,
	1747, 1924, 2218, 31321, 24556, 25171, 2268, -1000, -1000, 33166,
	1871, 1871, 48947, 368, 49328, -1000, 2732, 1065, 1740, -1000,
	2039, -1000, 2038, -1000, 3390, 1219, 150, -1000, -1000, 1615,
	-1000, 1065, 2709, 3364, -1000, 2844, 45466, 2465, 45466, 2729,
	1733, 12220, -1000, 801, 3129, -1000, -1000, 3942, -1000, -1000,
	1897, 12220, -1000, -1000, 2260, 25171, 986, 1731, 1724, 974,
	2724, -1000, 685, 3436, -1000, -1000, -1000, 956, 2723, -1000,
	1905, 1875, -1000, 45466, -1000, 31321, 31321, 825, 825, 31321,
	31321, 2722, 841, -1000, -1000, 12220, -1000, -1000, 1700, -1000,
	-1000, -1000, 1700, 1569, -1000, -1000, -1000, -1000, -1000, -1000,
	2110, -1000, -1000, -1000, 3341, -1000, -1000, 2480, 45466, 2480,
	32551, -1000, 3363, 3362, -1000, 2480, 1134, -1000, -301, 45466,
	45466, -209, 2037, -1000, 2253, 207, -1000, -1000, 1137, -207,
	-218, 142, 24556, 1704, -1000, -1000, -1000, -1000, -1000, 2512,
	-1000, 993, -1000, -1000, -1000, 1134, 2511, 2500, -1000, -1000,
	-1000, -1000, 419, 45466, -1000, 2201, -1000, 2251, 2250, 659,
	-99, -1000, -1000, 470, -1000, -1000, -1000, 634, 2176, -1000,
	-1000, 399, -1000, -1000, 2238, -1000, -1000, 133, -1000, 1702,
	1465, -1000, 2721, 10369, -1000, -1000, -1000, -1000, -1000, -1000,
	798, -1000, 402, 49255, -1000, 1132, -1000, 1155, 798, 30091,
	670, 326, -1000, 2033, -1000, -1000, 3419, -1000, 666, -1000,
	615, -1000, 1453, -1000, 1437, 31936, 2030, 1923, -1000, 49174,
	921, -1000, -1000, 3296, -1000, -1000, -1000, -1000, -1000, -1000,
	2236, 2230, -1000, -1000, -1000, -1000, -1000, 2028, 2719, 61,
	3285, 2229, -1000, -1000, 2718, 1407, 1406, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1395, 1393, 31321, -1000,
	-1000, 3296, 2021, 24556, 1700, -1000, -1000, 1389, 1374, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2717, -1000, -1000, 3358,
	-209, -220, 2226, 208, 236, -1000, 2219, -1000, -1000, 638,
	-200, 177, 164, 160, -1000, -1000, -1000, 10369, -1000, -1000,
	45466, 853, 127, -1000, 1701, -1000, -1000, 2015, 45466, 668,
	-1000, -1000, -1000, -1000, 217, -1000, -1000, -1000, -1000, -1000,
	2218, 2208, -1000, 31321, 3261, 2388, 580, 3357, -1000, 49328,
	-1000, 1700, -1000, 580, 1373, -1000, 1700, 1700, -1000, 519,
	-1000, 1734, -1000, 1984, -1000, 3341, -1000, 504, -1000, 585,
	-1000, -1000, -1000, 1326, -1000, -1000, -1000, 49174, 594, -1000,
	794, 2712, -1000, -1000, 2412, 10369, 2711, 1700, 2225, -94,
	31321, 3051, 2970, 2757, 2271, 1325, -1000, -1000, 24556, -1000,
	-1000, 30706, 45466, 2181, -1000, -1000, 2202, -1000, 849, 203,
	236, -1000, 3354, 206, 3352, 3350, 1122, 1865, -1000, 174,
	172, 166, -1000, -1000, -1000, -1000, -1000, 415, -1000, 2201,
	2200, 2198, 598, -1000, 336, -1000, -1000, -1000, 364, -1000,
	-1000, 3261, -1000, 3348, 714, -1000, 24556, -1000, -1000, 30091,
	1871, 1871, -1000, -1000, 1976, -1000, -1000, -1000, -1000, 1954,
	-1000, -1000, -1000, 1290, -1000, 45466, 996, 7277, -1000, 2371,
	-1000, 45466, -1000, 3085, -1000, 305, 1240, 364, 825, 364,
	825, 364, 825, 364, 825, 338, -1000, -1000, -1000, 1238,
	-1000, -1000, -1000, 2710, 1952, 216, 194, 3347, -1000, 2181,
	3346, 2181, 2181, -1000, 183, 638, -1000, -1000, -1000, 45466,
	-1000, -1000, -1000, 2196, -1000, -1000, -1000, -1000, 1700, 1700,
	2194, 2192, 478, -1000, -1000, -1000, 29476, 609, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 594, 49328, -1000, 7277, 1237,
	-1000, 2480, -1000, 841, -1000, -1000, 3084, 3056, 3413, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 45466,
	3283, 23941, 199, -1000, -1000, -1000, 2188, -1000, 2181, -1000,
	-1000, 1696, -1000, -1000, -261, 1950, 1933, -1000, -1000, 45466,
	-1000, 45466, 583, -1000, 49328, 1188, -1000, 7277, -1000, -1000,
	3435, -1000, 3433, 1006, 1006, 364, 364, 364, 364, -1000,
	-1000, 45466, -1000, 1177, -1000, -1000, -1000, 1514, -1000, -1000,
	-1000, -1000, 2171, -1000, -1000, 2166, -1000, -1000, -1000, 1146,
	2709, -1000, -1000, -1000, -1000, -1000, 2003, 689, -1000, 1088,
	-1000, 1695, -1000, 28861, 45466, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 45466, 6660, -1000, 1508, -1000, -1000, 2480, 45466,
	-1000,
}

var yyPgo = [...]int{
	0, 174, 3457, 261, 180, 4067, 113, 278, 241, 228,
	277, 4066, 4065, 4064, 4063, 3218, 3207, 4062, 4061, 4060,
	4059, 4058, 4056, 4055, 4054, 4053, 4050, 4049, 4047, 4045,
	4044, 4043, 4042, 4040, 4037, 4036, 4034, 4033, 4032, 4031,
	4030, 4029, 4028, 4027, 4025, 4024, 4021, 275, 4020, 4019,
	4018, 4017, 4016, 4015, 4014, 4011, 4010, 4009, 4008, 4006,
	4005, 4004, 3998, 3997, 3990, 3984, 3982, 3977, 3962, 3961,
	3953, 3950, 3945, 3944, 3943, 3941, 3940, 3939, 3933, 256,
	3932, 3931, 224, 3929, 3181, 3928, 3927, 3926, 3923, 3922,
	3916, 3913, 248, 3912, 3911, 3910, 3909, 3908, 3907, 3904,
	3903, 3889, 3881, 3880, 246, 3879, 3878, 3877, 3875, 232,
	3871, 244, 3869, 176, 162, 3867, 3866, 3863, 3861, 3859,
	3858, 3857, 3856, 3855, 3854, 3853, 3852, 3851, 252, 197,
	76, 3844, 52, 3841, 3838, 226, 3832, 153, 3831, 151,
	3829, 3828, 3826, 3823, 3822, 3821, 3820, 3819, 3818, 3817,
	3816, 3814, 3813, 3812, 3811, 3809, 3808, 3805, 3804, 3801,
	3800, 3799, 3796, 92, 3794, 270, 3788, 79, 3786, 178,
	134, 3783, 102, 142, 264, 207, 263, 254, 195, 182,
	125, 3782, 316, 3780, 163, 236, 161, 31, 3778, 140,
	3777, 271, 51, 43, 247, 170, 59, 209, 133, 3776,
	206, 111, 110, 3775, 3774, 143, 3773, 255, 184, 3772,
	107, 3771, 3770, 3769, 3766, 3764, 202, 194, 3763, 3761,
	136, 3760, 3758, 65, 123, 3757, 81, 124, 169, 116,
	3756, 2084, 131, 127, 128, 99, 3754, 88, 3751, 3750,
	3749, 3748, 190, 3747, 3745, 138, 71, 3744, 3743, 3741,
	67, 3740, 80, 3739, 54, 3738, 66, 3737, 3736, 3735,
	3734, 3732, 3731, 3729, 3728, 3726, 3723, 3722, 3721, 56,
	3720, 3719, 9, 11, 16, 3718, 26, 3716, 173, 3715,
	3714, 3713, 3711, 3710, 97, 91, 3709, 94, 167, 3707,
	7, 29, 78, 3706, 3705, 233, 713, 106, 152, 3704,
	283, 3703, 3702, 3698, 159, 3696, 2663, 3695, 3693, 3692,
	3691, 3690, 3684, 23, 3681, 1, 218, 44, 3678, 137,
	141, 3677, 41, 32, 3676, 48, 117, 230, 135, 95,
	3675, 3673, 3672, 147, 205, 122, 38, 0, 93, 238,
	156, 3670, 3669, 3668, 265, 3667, 240, 239, 172, 185,
	268, 269, 3664, 3663, 75, 3661, 165, 36, 57, 144,
	193, 20, 249, 3660, 14, 8, 219, 3659, 203, 3658,
	328, 17, 649, 145, 3657, 3655, 34, 272, 3654, 3652,
	3651, 132, 3649, 3648, 192, 77, 3646, 3645, 3644, 3643,
	37, 3642, 42, 13, 3641, 105, 3640, 259, 3639, 257,
	139, 187, 183, 160, 229, 237, 83, 82, 3638, 1715,
	154, 98, 22, 3628, 235, 3627, 179, 126, 3626, 118,
	3623, 260, 274, 204, 3622, 189, 12, 50, 40, 30,
	49, 10, 258, 196, 3621, 3620, 24, 53, 3619, 58,
	3617, 19, 3616, 3615, 45, 3614, 72, 5, 3613, 3611,
	18, 21, 3608, 39, 211, 175, 121, 100, 61, 3607,
	3606, 55, 220, 3605, 146, 164, 155, 3604, 85, 3603,
	3600, 3599, 3598, 2956, 3597, 266, 3594, 3592, 3588, 3586,
	3585, 3584, 3581, 3580, 234, 3576, 104, 47, 3573, 3567,
	3566, 3565, 90, 150, 3563, 3562, 3561, 3557, 33, 148,
	3556, 15, 3555, 27, 25, 35, 3554, 103, 3553, 3,
	188, 3552, 3551, 4, 3548, 3547, 2, 3543, 3542, 130,
	3541, 96, 28, 168, 108, 3537, 3534, 87, 217, 149,
	3533, 3532, 101, 251, 201, 3526, 157, 242, 267, 3525,
	216, 3524, 3523, 3522, 3521, 3519, 3518, 1168, 3517, 3515,
	245, 74, 89, 3514, 250, 115, 3513, 3512, 86, 166,
	120, 112, 64, 84, 3510, 114, 199, 3508, 198, 3507,
	253, 3506, 3505, 109, 3504, 3503, 3502, 3497, 191, 3489,
	3488, 200, 243, 3484, 3483, 281, 3482, 3476, 3475, 3474,
	3472, 3469, 3467, 3464, 3463, 3460, 262, 356, 3459,
}

//line mysql_sql.y:12374
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) allCDCOptionUnion() *tree.AllOrNotCDC {
	v, _ := st.union.(*tree.AllOrNotCDC)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) atTimeStampUnion() *tree.AtTimeStamp {
	v, _ := st.union.(*tree.AtTimeStamp)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() tree.GroupBy {
	v, _ := st.union.(tree.GroupBy)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) snapshotObjectUnion() tree.ObjectInfo {
	v, _ := st.union.(tree.ObjectInfo)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) upgrade_targetUnion() *tree.Target {
	v, _ := st.union.(*tree.Target)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 591, 594, 594, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 119,
	119, 328, 328, 329, 329, 121, 324, 324, 323, 323,
	122, 123, 124, 570, 570, 125, 126, 155, 569, 569,
	157, 157, 157, 157, 157, 444, 120, 120, 120, 120,
	120, 120, 120, 161, 161, 161, 161, 118, 576, 576,
	576, 577, 577, 115, 144, 143, 146, 146, 145, 145,
	142, 142, 138, 141, 141, 140, 140, 139, 134, 136,
	136, 135, 137, 137, 116, 104, 117, 518, 518, 517,
	517, 516, 516, 469, 469, 470, 470, 315, 315, 315,
	515, 515, 515, 514, 514, 513, 513, 512, 512, 510,
	510, 511, 509, 508, 508, 508, 506, 506, 506, 502,
	502, 504, 503, 503, 505, 497, 497, 500, 500, 498,
	498, 498, 498, 501, 496, 496, 496, 495, 495, 103,
	103, 103, 411, 411, 102, 102, 425, 425, 425, 425,
	425, 423, 423, 423, 423, 423, 423, 422, 422, 421,
	421, 426, 426, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 93, 93, 93, 93, 93, 98,
	98, 98, 582, 582, 581, 581, 583, 583, 583, 583,
	584, 584, 96, 96, 96, 97, 420, 420, 420, 94,
	95, 95, 410, 410, 415, 415, 414, 414, 414, 414,
	414, 414, 414, 414, 414, 414, 414, 414, 414, 419,
	419, 419, 417, 417, 416, 416, 418, 418, 87, 87,
	87, 90, 89, 409, 409, 409, 409, 409, 409, 409,
	409, 409, 88, 88, 88, 88, 88, 88, 83, 83,
	83, 83, 83, 82, 82, 84, 84, 407, 407, 406,
	99, 99, 100, 579, 579, 578, 580, 580, 580, 580,
	101, 107, 107, 107, 107, 107, 107, 107, 107, 106,
	106, 109, 109, 108, 110, 92, 92, 92, 92, 92,
	92, 91, 91, 91, 91, 91, 91, 91, 91, 91,
	91, 91, 91, 91, 543, 543, 543, 545, 545, 342,
	343, 595, 345, 341, 341, 341, 539, 539, 540, 541,
	542, 542, 542, 105, 14, 206, 206, 443, 443, 11,
	11, 11, 11, 11, 11, 11, 11, 11, 13, 81,
	86, 86, 277, 277, 282, 282, 160, 283, 283, 283,
	288, 288, 289, 289, 278, 278, 278, 278, 278, 278,
	278, 278, 278, 278, 278, 278, 278, 278, 278, 278,
	278, 278, 278, 278, 278, 278, 264, 264, 264, 259,
	259, 259, 259, 260, 260, 261, 261, 262, 262, 262,
	262, 263, 263, 334, 334, 284, 284, 284, 286, 286,
	285, 281, 279, 279, 279, 279, 279, 279, 279, 280,
	280, 280, 280, 287, 287, 79, 85, 85, 85, 85,
	557, 557, 80, 568, 568, 473, 473, 356, 356, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 478, 479, 352, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 54, 57, 58, 159, 53, 53, 53, 396,
	396, 52, 596, 596, 327, 327, 67, 66, 56, 68,
	69, 70, 71, 72, 73, 51, 65, 65, 65, 65,
	65, 65, 65, 65, 76, 491, 491, 598, 598, 598,
	74, 75, 472, 472, 472, 64, 63, 62, 61, 60,
	60, 50, 50, 49, 49, 55, 150, 59, 151, 151,
	349, 349, 349, 351, 351, 347, 597, 597, 439, 439,
	350, 350, 48, 48, 48, 48, 77, 348, 348, 326,
	346, 346, 346, 12, 12, 10, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 26, 27, 29, 404, 404, 401, 28,
	20, 19, 19, 23, 22, 18, 18, 21, 24, 25,
	25, 9, 9, 9, 9, 15, 15, 16, 179, 179,
	232, 232, 551, 551, 547, 547, 548, 548, 548, 549,
	549, 550, 550, 111, 485, 485, 485, 485, 485, 485,
	8, 8, 201, 201, 484, 484, 484, 484, 484, 484,
	408, 408, 408, 528, 528, 528, 529, 200, 200, 195,
	195, 486, 486, 373, 530, 530, 494, 494, 493, 493,
	492, 492, 198, 198, 199, 199, 182, 182, 129, 129,
	499, 499, 499, 499, 507, 507, 468, 468, 269, 269,
	317, 317, 318, 318, 172, 172, 173, 173, 173, 173,
	173, 173, 585, 585, 586, 587, 588, 588, 589, 589,
	589, 590, 590, 590, 590, 590, 536, 536, 538, 538,
	537, 197, 197, 193, 193, 194, 194, 194, 192, 192,
	191, 190, 190, 189, 187, 187, 187, 188, 188, 188,
	205, 205, 175, 175, 175, 174, 174, 174, 174, 174,
	300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 176, 176, 544, 544, 544, 474, 474, 474,
	481, 481, 297, 297, 298, 298, 296, 296, 177, 177,
	178, 178, 178, 178, 295, 295, 294, 180, 180, 186,
	185, 185, 181, 181, 181, 181, 305, 305, 304, 304,
	304, 304, 114, 127, 127, 128, 204, 204, 303, 302,
	302, 302, 302, 203, 203, 202, 202, 196, 196, 184,
	184, 184, 184, 301, 183, 299, 575, 575, 574, 574,
	573, 571, 571, 571, 572, 572, 572, 572, 520, 520,
	520, 520, 520, 335, 335, 335, 340, 340, 338, 338,
	338, 338, 338, 344, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 39, 215, 216, 40,
	217, 217, 218, 218, 219, 219, 220, 221, 222, 222,
	222, 222, 38, 207, 207, 208, 208, 209, 209, 210,
	211, 211, 211, 214, 212, 213, 213, 593, 593, 592,
	37, 37, 30, 164, 164, 165, 165, 165, 167, 167,
	265, 265, 265, 166, 166, 168, 168, 168, 552, 554,
	554, 556, 555, 555, 555, 558, 558, 558, 558, 558,
	559, 559, 559, 559, 560, 560, 31, 147, 147, 152,
	563, 563, 563, 562, 562, 564, 564, 565, 565, 321,
	321, 322, 322, 162, 163, 163, 154, 149, 170, 170,
	170, 170, 170, 171, 171, 148, 153, 156, 158, 553,
	561, 561, 561, 405, 405, 402, 403, 403, 400, 399,
	399, 399, 567, 567, 566, 566, 566, 336, 336, 32,
	395, 395, 397, 398, 398, 398, 389, 389, 389, 389,
	36, 393, 393, 394, 394, 394, 394, 394, 394, 394,
	390, 390, 392, 392, 388, 388, 388, 388, 388, 388,
	388, 35, 169, 169, 387, 387, 384, 384, 382, 382,
	383, 383, 381, 381, 381, 385, 385, 43, 78, 44,
	45, 46, 42, 386, 386, 34, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 131, 130, 130, 130, 130,
	130, 133, 133, 320, 320, 319, 319, 132, 266, 266,
	41, 244, 244, 460, 460, 455, 455, 455, 455, 455,
	476, 476, 476, 456, 456, 456, 457, 457, 457, 459,
	459, 459, 458, 458, 458, 458, 458, 475, 475, 477,
	477, 477, 427, 427, 428, 428, 428, 431, 431, 447,
	447, 448, 448, 446, 446, 453, 453, 452, 452, 451,
	451, 450, 450, 449, 449, 449, 449, 442, 442, 441,
	441, 429, 429, 429, 429, 429, 430, 430, 430, 440,
	440, 445, 445, 293, 293, 292, 292, 252, 252, 253,
	253, 291, 291, 250, 250, 251, 251, 251, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 526, 526, 527, 255, 255, 267, 267,
	267, 267, 267, 267, 254, 254, 256, 256, 233, 233,
	231, 231, 223, 223, 223, 223, 223, 224, 224, 225,
	225, 226, 226, 226, 230, 230, 229, 229, 229, 229,
	227, 227, 228, 228, 228, 228, 228, 228, 413, 413,
	523, 523, 524, 524, 519, 519, 519, 522, 522, 522,
	522, 522, 522, 522, 525, 525, 525, 521, 521, 234,
	314, 314, 314, 337, 337, 337, 337, 339, 313, 313,
	313, 249, 249, 248, 248, 246, 246, 246, 246, 246,
	246, 246, 246, 246, 246, 246, 246, 246, 246, 246,
	246, 246, 246, 246, 246, 246, 246, 412, 412, 353,
	353, 354, 354, 276, 275, 275, 275, 275, 275, 273,
	274, 272, 272, 272, 272, 272, 271, 271, 270, 270,
	270, 391, 391, 268, 268, 258, 258, 258, 257, 257,
	257, 454, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 311, 311, 311, 312, 312, 312, 312, 312, 312,
	312, 312, 363, 363, 369, 369, 535, 535, 534, 235,
	235, 235, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 245, 245, 245, 436, 436, 436, 436, 437, 437,
	437, 437, 438, 438, 438, 434, 434, 435, 435, 374,
	375, 375, 482, 482, 483, 483, 432, 432, 433, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 490, 490, 490, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	546, 546, 546, 531, 531, 531, 532, 532, 532, 532,
	532, 532, 532, 532, 532, 532, 532, 532, 533, 533,
	533, 533, 533, 533, 533, 533, 533, 533, 533, 533,
	533, 533, 533, 533, 533, 309, 309, 309, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 376, 376, 377, 377,
	487, 487, 487, 487, 487, 487, 488, 488, 489, 489,
	489, 489, 480, 480, 480, 480, 480, 480, 480, 480,
	480, 480, 480, 480, 480, 480, 480, 480, 480, 480,
	480, 480, 480, 480, 480, 480, 480, 480, 480, 480,
	480, 361, 306, 306, 306, 378, 370, 370, 371, 371,
	372, 372, 364, 364, 364, 364, 364, 364, 365, 365,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 366, 366, 368, 368, 380, 380, 380, 379,
	379, 379, 379, 379, 379, 379, 247, 247, 247, 247,
	358, 358, 358, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 237, 237, 237, 237, 241,
	241, 243, 243, 243, 243, 243, 243, 243, 243, 243,
	243, 243, 243, 243, 243, 242, 242, 242, 242, 242,
	240, 240, 240, 240, 240, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 112, 113, 113, 239, 316, 316, 461,
	461, 464, 464, 462, 462, 463, 465, 465, 465, 466,
	466, 466, 467, 467, 467, 471, 471, 325, 325, 325,
	333, 333, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 330, 330,
	330, 330, 330, 330, 330, 330, 330, 330, 330, 330,
	330, 330, 330, 330, 330, 330, 330, 330, 330, 330,
	330, 330, 330, 330, 330, 330, 330, 330, 330, 330,
	330, 330, 330, 330, 330, 330, 330, 330, 330, 330,
	330, 330, 330, 330, 330, 330, 330, 330,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 8,
	8, 0, 2, 0, 2, 11, 1, 3, 0, 3,
	4, 4, 4, 1, 2, 5, 6, 6, 1, 2,
	7, 9, 10, 10, 12, 1, 5, 6, 8, 10,
	9, 11, 13, 5, 7, 9, 8, 4, 0, 1,
	1, 0, 1, 5, 2, 2, 6, 9, 6, 9,
	4, 7, 8, 0, 1, 1, 2, 4, 6, 1,
	2, 4, 0, 2, 10, 11, 2, 0, 2, 1,
	3, 3, 3, 0, 2, 0, 2, 1, 3, 5,
	0, 2, 3, 1, 3, 1, 1, 1, 3, 1,
	1, 1, 1, 0, 3, 3, 0, 3, 3, 0,
	1, 3, 0, 1, 3, 0, 2, 1, 2, 3,
	4, 3, 3, 1, 0, 1, 1, 0, 1, 8,
	5, 7, 0, 3, 8, 5, 1, 3, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	4, 1, 3, 1, 2, 2, 2, 2, 2, 2,
	2, 1, 2, 2, 2, 2, 1, 1, 2, 2,
	1, 1, 1, 1, 1, 2, 2, 2, 1, 2,
	1, 2, 2, 1, 2, 1, 1, 2, 2, 1,
	1, 1, 3, 2, 2, 2, 2, 2, 2, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	4, 4, 1, 3, 3, 1, 2, 2, 2, 1,
	2, 2, 3, 4, 4, 6, 1, 1, 1, 2,
	4, 6, 1, 4, 1, 3, 3, 4, 4, 4,
	4, 3, 3, 2, 4, 4, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 3, 1, 3, 1, 1,
	1, 2, 2, 0, 1, 4, 2, 4, 1, 5,
	3, 2, 1, 2, 2, 4, 4, 5, 2, 1,
	3, 4, 4, 1, 2, 9, 7, 1, 3, 3,
	1, 1, 3, 1, 3, 2, 1, 2, 1, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	4, 2, 4, 3, 3, 1, 1, 1, 1, 1,
	1, 2, 3, 4, 7, 2, 3, 3, 4, 5,
	3, 4, 4, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 2, 1,
	1, 1, 1, 6, 4, 1, 1, 0, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 10, 7,
	4, 4, 1, 3, 1, 6, 7, 3, 3, 3,
	1, 1, 1, 3, 2, 4, 5, 5, 6, 5,
	5, 3, 2, 2, 1, 3, 4, 3, 7, 5,
	8, 2, 2, 1, 3, 2, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 0, 1, 2, 1, 3,
	2, 1, 2, 2, 1, 2, 3, 2, 2, 3,
	6, 3, 3, 1, 1, 7, 7, 7, 8, 8,
	0, 4, 7, 0, 3, 0, 2, 0, 1, 1,
	1, 1, 4, 2, 2, 3, 3, 4, 5, 3,
	4, 4, 2, 2, 2, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 3, 3, 3, 2, 5, 5, 0,
	2, 7, 0, 1, 0, 1, 5, 5, 3, 3,
	2, 4, 4, 4, 4, 4, 1, 1, 1, 3,
	3, 1, 1, 1, 6, 0, 1, 1, 1, 1,
	5, 5, 0, 1, 1, 3, 3, 3, 4, 7,
	7, 5, 4, 7, 8, 3, 3, 2, 3, 4,
	0, 2, 2, 0, 2, 2, 1, 1, 1, 1,
	0, 1, 5, 5, 5, 4, 3, 1, 3, 1,
	1, 3, 5, 2, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 4, 4, 1, 3, 1, 4,
	6, 6, 4, 4, 4, 4, 4, 3, 6, 3,
	5, 1, 1, 2, 2, 11, 8, 9, 1, 3,
	2, 4, 0, 2, 0, 1, 1, 1, 1, 0,
	1, 0, 1, 4, 2, 1, 5, 4, 4, 2,
	5, 5, 1, 3, 2, 1, 5, 4, 4, 2,
	0, 5, 4, 0, 1, 3, 3, 1, 3, 1,
	3, 1, 3, 4, 0, 1, 0, 1, 1, 3,
	1, 1, 0, 4, 1, 3, 2, 1, 0, 8,
	0, 4, 7, 4, 0, 2, 0, 2, 0, 2,
	0, 4, 1, 3, 1, 1, 6, 4, 5, 7,
	4, 5, 0, 1, 3, 8, 0, 6, 0, 4,
	6, 1, 1, 1, 1, 1, 2, 3, 1, 3,
	6, 0, 3, 0, 1, 2, 4, 4, 0, 1,
	3, 1, 3, 3, 0, 1, 1, 0, 2, 2,
	0, 2, 3, 3, 3, 1, 3, 3, 3, 3,
	1, 2, 2, 1, 2, 2, 1, 2, 2, 1,
	2, 2, 7, 7, 1, 1, 1, 0, 1, 1,
	1, 1, 0, 2, 0, 3, 0, 2, 1, 3,
	1, 2, 3, 5, 0, 1, 2, 1, 3, 1,
	1, 1, 4, 4, 4, 3, 2, 2, 2, 3,
	2, 3, 4, 1, 3, 4, 0, 2, 1, 1,
	2, 2, 2, 0, 1, 2, 4, 1, 3, 1,
	3, 2, 3, 1, 4, 3, 0, 1, 1, 2,
	5, 2, 2, 2, 0, 2, 3, 3, 0, 1,
	3, 1, 3, 0, 1, 2, 1, 1, 0, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 7, 1, 1, 7,
	1, 3, 0, 1, 1, 3, 1, 3, 0, 1,
	1, 1, 14, 1, 3, 0, 1, 1, 3, 1,
	1, 2, 4, 1, 1, 1, 1, 0, 1, 2,
	9, 9, 7, 1, 2, 3, 3, 3, 0, 4,
	1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	1, 4, 1, 1, 1, 3, 3, 4, 3, 3,
	0, 1, 1, 1, 0, 2, 7, 8, 8, 8,
	0, 3, 3, 0, 3, 0, 3, 0, 5, 1,
	3, 0, 3, 3, 0, 2, 9, 7, 0, 2,
	2, 3, 3, 0, 2, 4, 4, 4, 4, 1,
	0, 2, 2, 1, 3, 2, 1, 3, 2, 1,
	3, 2, 0, 1, 3, 4, 3, 1, 1, 4,
	1, 3, 1, 1, 1, 1, 0, 1, 1, 1,
	11, 0, 2, 3, 3, 2, 2, 3, 1, 1,
	1, 3, 3, 4, 0, 2, 2, 2, 2, 2,
	2, 6, 0, 4, 1, 1, 0, 3, 0, 1,
	1, 2, 4, 4, 4, 0, 1, 8, 2, 4,
	4, 4, 9, 0, 2, 11, 9, 11, 8, 6,
	9, 7, 10, 7, 6, 2, 2, 9, 4, 5,
	3, 0, 4, 1, 3, 0, 3, 6, 0, 2,
	10, 0, 2, 0, 2, 0, 3, 2, 4, 3,
	0, 2, 1, 0, 2, 3, 0, 2, 3, 0,
	2, 1, 0, 3, 2, 4, 3, 0, 1, 0,
	1, 1, 0, 6, 0, 3, 5, 0, 4, 0,
	3, 1, 3, 4, 5, 0, 3, 1, 3, 2,
	3, 1, 2, 0, 4, 6, 5, 0, 2, 0,
	2, 4, 5, 4, 5, 1, 5, 6, 5, 0,
	3, 0, 1, 1, 3, 3, 3, 0, 4, 1,
	3, 3, 3, 0, 1, 1, 3, 2, 3, 3,
	3, 4, 4, 3, 3, 3, 3, 4, 4, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 5, 4, 1, 3, 3, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	2, 4, 0, 5, 5, 5, 5, 0, 1, 1,
	3, 1, 1, 1, 1, 1, 7, 9, 7, 9,
	2, 1, 7, 9, 7, 9, 8, 5, 0, 1,
	0, 1, 1, 1, 1, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 3,
	1, 3, 5, 1, 1, 1, 1, 1, 1, 3,
	5, 0, 1, 1, 2, 1, 2, 2, 1, 1,
	2, 2, 2, 3, 3, 2, 2, 1, 5, 6,
	4, 1, 1, 1, 5, 4, 1, 1, 2, 0,
	1, 1, 2, 5, 0, 1, 1, 2, 2, 3,
	3, 1, 1, 2, 2, 2, 0, 1, 2, 2,
	2, 0, 3, 0, 3, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 1, 1, 1, 1, 3, 5,
	2, 2, 2, 2, 4, 1, 1, 2, 5, 6,
	8, 6, 6, 6, 1, 1, 1, 1, 1, 1,
	3, 4, 4, 4, 7, 9, 7, 7, 7, 9,
	7, 7, 0, 2, 0, 1, 1, 2, 4, 1,
	2, 2, 1, 2, 2, 1, 2, 2, 2, 2,
	2, 0, 1, 1, 1, 2, 2, 2, 2, 2,
	2, 2, 1, 1, 1, 2, 5, 0, 1, 3,
	0, 1, 0, 2, 0, 2, 0, 1, 6, 8,
	8, 6, 6, 5, 5, 5, 6, 6, 6, 6,
	5, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 1, 1, 1, 4, 4, 6, 8, 6, 4,
	5, 4, 4, 4, 3, 4, 6, 6, 7, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 8, 4, 2,
	3, 2, 4, 2, 2, 4, 6, 2, 2, 4,
	6, 4, 2, 4, 4, 4, 0, 1, 2, 3,
	1, 1, 1, 1, 1, 1, 0, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 1, 1, 3, 0, 1, 1, 3,
	1, 3, 3, 3, 3, 3, 2, 1, 1, 1,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
	1, 3, 4, 4, 5, 4, 5, 3, 4, 5,
	6, 1, 0, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 1, 1, 2, 3, 1, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 2, 2, 2, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	4, 4, 1, 2, 3, 5, 1, 1, 3, 0,
	1, 0, 3, 0, 3, 3, 0, 3, 5, 0,
	3, 5, 0, 1, 1, 0, 1, 1, 2, 2,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -591, -594, -2, -5, 623, -1, -4, -113, -87,
	-7, -14, -115, -116, -8, -111, -9, -10, -12, -91,
	-106, -108, -110, -109, -47, -11, -105, -82, -83, -93,
	-99, -102, -103, -104, -117, -112, -114, -172, -118, -119,
	-120, -161, -123, -125, -126, 613, -88, -89, -90, -33,
	-32, -31, -30, -147, -152, -155, -157, -121, 546, 619,
	449, 14, 498, -15, -16, -536, -17, 260, -341, -342,
	-343, -345, -595, -48, -49, -50, -60, -61, -62, -63,
	-64, -74, -75, -76, -51, -52, -53, -56, -54, -67,
	-66, -68, -69, -70, -71, -72, -73, -55, -59, -150,
	-151, -77, -57, -78, -58, -159, -122, -80, -79, -85,
	-81, -86, -149, -154, -13, -160, 235, -84, 76, -94,
	-95, -96, -97, -98, -100, -101, 373, 379, 436, 612,
	61, -173, -175, 632, 633, 636, 533, 536, 160, 161,
	163, 164, -34, -35, -36, -37, -38, -39, -41, -40,
	-42, -43, -44, -45, -46, 231, 16, 541, -18, -21,
	-19, -22, -20, -28, -29, -27, -24, -26, -148, -25,
	-153, -23, -156, -158, -124, 255, 254, 38, 321, 322,
	323, 377, 253, 232, 15, 31, 42, 352, -174, 83,
	534, 233, -176, 13, 638, -6, -3, -2, -134, -138,
	-142, -145, -146, -143, -144, -4, -113, 118, 245, 614,
	-337, 369, 615, 617, 616, 86, 94, -330, -332, 449,
	260, 373, 379, 612, 633, 636, 533, 536, 548, 549,
	550, 551, 552, 553, 554, 555, 557, 558, 559, 560,
	561, 562, 563, 573, 574, 564, 565, 566, 567, 568,
	569, 570, 571, 575, 576, 577, 578, 579, 580, 581,
	582, 583, 584, 585, 586, 587, 588, 501, 598, 599,
	600, 601, 529, 556, 592, 593, 594, 595, 350, 351,
	538, 272, 296, 404, 302, 309, 160, 179, 173, 201,
	193, 534, 168, 276, 314, 277, 93, 163, 484, 108,
	461, 433, 166, 291, 293, 295, 530, 531, 363, 298,
	528, 297, 299, 301, 532, 278, 353, 189, 184, 290,
	274, 182, 279, 40, 280, 206, 281, 282, 543, 457,
	349, 463, 306, 52, 431, 183, 458, 294, 460, 210,
	214, 475, 476, 177, 178, 465, 478, 205, 208, 209,
	252, 346, 347, 43, 540, 264, 479, 212, 204, 200,
	487, 310, 308, 203, 176, 199, 275, 65, 216, 215,
	217, 427, 428, 429, 430, 283, 284, 367, 474, 196,
	185, 354, 169, 23, 482, 259, 462, 380, 285, 303,
	311, 211, 213, 266, 271, 542, 435, 270, 307, 480,
	181, 263, 292, 258, 483, 170, 382, 286, 164, 300,
	477, 486, 64, 395, 175, 167, 630, 249, 161, 268,
	273, 287, 288, 289, 527, 313, 312, 304, 535, 197,
	265, 202, 187, 174, 198, 162, 267, 485, 396, 610,
	352, 414, 195, 192, 269, 242, 481, 464, 165, 418,
	397, 190, 315, 605, 606, 607, 368, 345, 316, 317,
	188, 256, 455, 456, 320, 424, 336, 398, 434, 405,
	399, 223, 224, 324, 467, 469, 207, 608, 325, 326,
	327, 459, 328, 329, 330, 331, 372, 56, 58, 95,
	98, 97, 634, 635, 63, 29, 358, 361, 393, 400,
	338, 611, 539, 335, 339, 340, 362, 25, 416, 384,
	420, 419, 48, 49, 50, 53, 54, 55, 57, 59,
	60, 51, 526, 377, 390, 488, 45, 47, 387, 27,
	364, 415, 437, 334, 417, 448, 46, 446, 447, 468,
	26, 366, 365, 62, 44, 423, 425, 426, 318, 332,
	375, 620, 489, 370, 386, 389, 371, 337, 360, 391,
	67, 66, 383, 621, 378, 376, 333, 544, 545, 341,
	572, 355, 432, 523, 522, 521, 520, 519, 518, 517,
	516, 321, 322, 323, 401, 402, 403, 413, 406, 407,
	408, 409, 410, 411, 412, 451, 452, 622, 470, 472,
	473, 471, 237, 637, 356, 357, 240, 624, 625, 96,
	626, 628, 627, 28, 629, -418, -416, -337, 534, 612,
	379, 533, 536, 373, 352, 633, 636, 377, 260, 321,
	322, 323, 449, 350, -217, -337, 637, -182, 244, 39,
	-231, -337, -182, -84, -16, -15, -174, -175, -231, 239,
	-346, 24, 431, -92, 432, 235, 83, 77, -337, -9,
	-104, -8, -111, -82, -172, 436, -344, -337, 321, 321,
	-344, 239, -339, 270, 412, -337, -473, 245, -422, -395,
	271, -421, -397, -424, -398, 32, 231, 233, 232, 546,
	267, 16, 377, 241, 14, 13, 378, 253, 25, 26,
	28, 15, 379, 381, 29, 382, 385, 386, 387, 42,
	390, 391, 260, 86, 94, 89, 278, -216, -337, -372,
	-364, 115, -367, -359, -360, -362, -315, -510, -357, 83,
	142, 143, 150, 116, 639, -361, -454, 36, 118, 552,
	556, 592, 499, -307, -308, -309, -310, -311, -312, -337,
	-511, -509, 89, 99, 101, 105, 106, 104, 102, 154,
	186, 103, 90, 155, -175, 86, -531, 562, -331, 585,
	598, 599, 600, 601, 584, 61, -480, -489, 238, -487,
	153, 191, 256, 187, 14, 148, 424, 188, 593, 594,
	595, 559, 581, 501, 563, 573, 588, 554, 555, 557,
	549, 550, 551, 553, 564, 566, 580, -490, 576, 586,
	587, 572, 596, 597, 589, 590, 591, 628, 88, 87,
	579, 578, 565, 560, 561, 567, 548, 558, 568, 569,
	577, 582, 583, 361, 108, 362, 363, 491, 353, 364,
	245, 431, 70, 365, 366, 367, 368, 369, 498, 370,
	71, 371, 360, 260, 414, 372, 190, 207, 503, 502,
	504, 495, 492, 490, 493, 494, 496, 497, 570, 571,
	575, -127, -128, 603, -585, -300, -586, 6, 7, 8,
	9, -587, 155, -576, 433, 542, 89, 314, 350, 17,
	491, 631, 532, 631, 532, 165, 162, -409, 165, 114,
	170, 169, -409, 631, 167, 630, 324, 266, -386, -164,
	350, 414, 328, 95, 270, -389, -387, 530, -475, 318,
	314, 290, 240, 111, -165, 250, 249, 109, 491, 238,
	388, 309, 56, 58, -547, -548, 228, 229, 230, -538,
	524, -537, -337, 631, 363, 97, 98, 630, 27, 239,
	374, 266, 469, 467, 468, 470, 471, 472, 473, -65,
	-491, -472, 464, 463, -350, 456, 462, 454, 466, 457,
	351, 330, 546, 329, 231, 624, 531, 525, -325, 398,
	434, 488, 489, 375, 435, 475, 477, 458, 108, 194,
	191, 240, 242, 239, 630, 350, 491, 414, 95, 328,
	-547, 162, 475, 477, 270, 412, 41, -415, 424, -414,
	-416, 476, 487, 87, 88, 474, -325, 108, 455, 455,
	-585, -300, -173, -175, -114, -536, 532, 631, 240, 350,
	414, 270, 241, 239, 527, 530, 242, 491, 238, 321,
	374, 266, 328, 95, 167, 630, -474, -544, 32, -481,
	225, 226, 227, 33, 34, -1, 122, 638, -364, -364,
	-6, 641, -6, -364, -337, -337, 157, -237, -241, -238,
	-240, -239, -243, -242, 191, 192, 153, 195, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 208, 209, 206,
	31, 207, 256, 187, 188, 189, 190, 210, 173, 193,
	539, 218, 174, 219, 175, 220, 176, 221, 177, 178,
	222, 179, 182, 183, 184, 185, 181, 156, -206, 89,
	32, 83, 156, 89, -198, 262, -182, -231, -223, 156,
	639, -198, -585, -191, -192, 11, -231, -313, -337, 433,
	125, -92, 77, -92, 432, 77, -539, -540, -541, -543,
	235, 432, 431, -109, 156, 278, 17, -344, -344, 81,
	-231, -397, 270, -422, -395, 36, 80, 157, 243, 157,
	80, 83, 375, 350, 414, 376, 491, 239, 388, 242,
	270, 389, 350, 414, 239, 242, 491, 270, 350, 239,
	242, 414, 270, 389, 350, 454, 455, 242, 27, 380,
	383, 384, 455, -495, 487, 157, 114, 111, 112, 113,
	-364, 132, -379, 125, 126, 127, 128, 129, 130, 131,
	139, 138, 149, 142, 143, 144, 145, 146, 147, 148,
	140, 141, 135, 115, 133, 137, 134, 117, 152, -175,
	-364, -372, 61, -362, -362, -362, -362, -337, -454, -369,
	-364, 83, 83, 83, 83, 156, 102, 89, -364, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, -488, 83, 83, -376, -377, 83, 83, -357, -313,
	83, 89, 89, 83, 83, 83, 89, 83, 83, 83,
	-377, -377, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, -192, 157, -191,
	83, -191, -192, -176, -175, 32, 33, 32, 33, 32,
	33, 32, 33, -588, 621, 83, 99, 634, 223, 17,
	-337, 630, -337, 89, 535, 89, 535, 480, 541, 168,
	169, 170, -384, 245, -384, -384, -215, -337, -217, 374,
	242, 527, 242, -165, -384, -384, -384, -384, -384, 241,
	-384, 24, 239, 239, 239, 239, -384, 498, 125, 125,
	59, -549, 172, 157, -538, -197, 83, 89, -349, 133,
	137, -349, -296, 18, -296, 24, 268, 268, 268, -349,
	308, -596, -597, 17, 135, -347, -597, -347, -347, -349,
	-598, 241, 465, 43, 269, 268, -193, -194, 22, -193,
	459, 455, -439, 460, 461, -351, -597, -350, -349, -349,
	-350, -349, -349, -349, 32, 239, 242, 491, 328, 625,
	-596, -596, 31, 31, -473, -473, -231, -473, -473, 525,
	-326, -337, -473, -473, -473, -550, 244, -582, -581, 478,
	-584, 480, 162, -416, 162, -416, -397, 270, 270, 157,
	125, 24, -417, 125, 136, -416, -416, -417, -417, -254,
	41, -336, 153, -337, 89, -254, 41, -579, -578, -231,
	-192, -176, -175, 84, 84, 84, 535, 89, -473, -473,
	-473, -473, -473, -475, -473, -473, -473, -473, -473, -344,
	-207, -337, -217, 245, -473, -473, -473, -473, -177, -178,
	144, -364, -337, -177, -3, -136, -135, 119, 120, 122,
	615, 369, 614, 618, 612, -416, 41, -467, 396, 395,
	-461, -463, 83, -462, 83, -462, -462, -462, -462, -462,
	83, 83, -464, 83, -464, -464, -461, -465, 83, -465,
	-466, 83, -466, -465, -337, -443, 541, -370, -372, -337,
	39, -484, 61, -172, 83, 31, 83, -198, -337, 188,
	167, 629, -485, 61, -172, 83, 31, -192, -129, 39,
	-194, 21, 156, 99, 89, -109, -92, 77, -109, 84,
	157, -542, 105, 106, -545, 205, 197, -337, -107, 89,
	-7, -8, -9, -10, -47, -82, -79, -172, 232, 533,
	536, -512, -510, 83, 32, 423, 80, 17, -423, 239,
	491, 374, 266, 242, 350, -421, -404, -401, -399, -336,
	-397, -400, -399, -426, -313, 455, -130, 438, 437, 320,
	-364, -364, -364, -364, -364, 104, 115, 345, 105, 106,
	-359, -380, 32, 316, 317, -360, -360, -360, -360, -360,
	-360, -360, -360, -360, -360, -360, -360, -368, -378, -454,
	83, 135, 133, 137, 134, 117, -362, -362, -360, -360,
	-256, -336, 153, 84, 157, -364, -535, -534, 119, -364,
	-364, -364, -364, -337, -532, -533, 505, 506, 507, 508,
	509, 510, 511, 512, 513, 514, 515, 365, 360, 366,
	364, 353, 372, 367, 368, 190, 522, 523, 516, 517,
	518, 519, 520, 521, -370, -370, -364, -532, -370, -306,
	33, 32, -372, -372, -372, 84, -364, -546, 343, 342,
	344, -195, -337, -370, 84, 84, 84, 99, -372, -372,
	-370, -360, -370, -370, -370, -370, -533, -306, -306, -306,
	-306, 144, -372, -372, -306, -306, -306, -306, 144, -306,
	-306, -306, -306, -306, -306, -306, -306, -306, -306, 84,
	84, 84, 144, -372, -193, -128, -493, -492, -364, 41,
	-129, -194, -589, 622, 83, -313, -577, 89, 89, 639,
	167, 17, 491, -337, 17, 239, -570, 32, 535, 99,
	535, 99, 481, 482, 166, 169, 168, 89, 115, -337,
	-337, 35, 83, -207, -384, -384, -384, -554, -337, 90,
	-405, -402, -399, -337, -337, -395, -337, -326, -231, -384,
	-384, -384, -384, -231, -265, 53, 54, 55, -399, -166,
	56, 57, -550, -537, 35, -196, -337, -570, -296, -362,
	-362, -364, -399, 270, -596, -349, -349, -327, -326, -351,
	-346, -351, -351, -296, -347, -349, -349, -364, -351, -347,
	-296, -337, 455, -296, -296, -439, -349, -348, -337, -348,
	-384, -326, -327, -327, -231, -231, -277, -282, -278, -283,
	262, 236, 358, 359, 234, 232, 11, 233, -290, 309,
	-385, 499, -260, -261, 77, 42, -263, 260, 400, 393,
	272, 276, 93, 277, 433, 278, 241, 280, 281, 282,
	297, 299, 252, 283, 284, 285, 424, 286, 161, 298,
	287, 288, 289, 376, -255, 6, 331, 41, 51, 52,
	447, 446, 544, 541, 273, -337, -554, -552, 31, -337,
	31, -405, -337, -337, -185, -180, -184, -181, -186, -299,
	-301, -183, 83, -231, -175, -337, 157, 479, 481, 482,
	-582, -417, -582, -417, 32, 423, -420, 423, 32, -395,
	-414, 475, 477, -410, 89, 424, -400, -419, 80, 153,
	-492, -417, -417, -419, -419, 152, 157, -580, 480, 481,
	228, -193, 99, -570, -233, -231, -554, -404, -395, -337,
	-473, -233, -233, -233, -339, -339, 83, 156, 36, -337,
	-337, -337, -337, -295, 157, -294, 17, -338, -337, 35,
	89, 156, -295, -137, -135, 121, -364, -6, 614, -364,
	-6, -6, -364, -6, -364, -471, 397, 99, 99, -316,
	89, -316, 99, 99, 99, 547, 84, 89, -408, 80,
	-486, -373, -530, 603, -200, 84, -195, -528, -529, -195,
	-199, -337, -484, -223, 125, 125, 125, -486, -200, 84,
	-528, -193, 604, -129, -190, -189, -364, -337, 24, -109,
	-92, -540, 156, 350, 157, -196, -423, -403, -400, -425,
	144, -337, -411, 157, 541, 642, 87, 243, -567, -566,
	415, 84, 157, -496, 244, 498, 89, 639, 431, 223,
	224, 104, 345, 105, 106, -454, -372, -368, -362, -362,
	-360, -360, -366, 257, -366, 114, -364, 640, -363, -534,
	121, -364, 35, 157, 35, 157, 81, 156, 84, 84,
	17, 17, 84, -364, 84, 84, 84, 84, 17, 17,
	-364, 84, 156, 84, 84, 84, 84, 81, 84, 157,
	84, 84, 84, 84, 157, -372, -372, -364, -372, 84,
	84, 84, -364, -364, -364, -372, 84, -364, -364, -364,
	-364, -364, -364, -364, -364, -364, -364, -433, 450, -433,
	-433, 157, 157, 157, 84, -129, 83, 99, 157, 635,
	-320, -319, 89, -337, 167, 630, -337, 89, 630, -337,
	89, 89, 167, 170, 170, 169, 89, 36, 24, 307,
	24, -216, -218, -219, -220, -221, -222, 135, 158, 159,
	83, -231, -231, -231, -556, 401, -568, 157, 41, -566,
	491, 239, -162, 320, -388, 81, -169, 17, 541, -231,
	-231, -231, -231, -244, 35, 17, -179, -232, -337, 83,
	84, 157, -396, 81, -337, -327, -296, -296, -351, -296,
	-296, 157, 23, -349, -351, -351, -223, -347, -223, 156,
	-223, -326, -460, 35, -197, 157, 21, 262, -230, -334,
	-227, -229, 247, -354, -228, 250, -524, 248, 246, 109,
	251, 305, 110, 241, -334, -334, 247, -264, 243, 35,
	-334, -280, 241, 348, 305, 248, 21, 262, -279, 241,
	110, -337, 247, 251, 248, 246, -333, 125, -325, 152,
	243, 43, 376, -333, 545, 262, -333, -333, -333, -333,
	-333, -333, -333, 279, 279, -333, -333, -333, -333, -333,
	-333, -333, -333, -333, -333, -333, 162, -333, -333, -333,
	-333, -333, -333, 83, 274, 275, 307, -557, 401, 31,
	356, 356, 357, -568, 31, -170, 350, 31, -302, -303,
	-304, -305, 68, 72, 74, 78, 69, 70, 71, 75,
	31, 157, -335, -340, 35, -337, 89, -335, -175, -180,
	-185, -335, 83, -581, -583, 483, 480, 486, -419, -419,
	243, 83, 125, -419, -419, 41, -336, -578, 487, 481,
	-129, 157, 80, -233, -208, -209, -210, -211, -237, -313,
	192, 195, 197, 198, 199, 200, 201, 202, 203, 204,
	205, 208, 209, 206, 207, 256, 187, 188, 189, 190,
	210, 173, 193, 539, 174, 175, 176, 177, 178, 179,
	182, 183, 184, 185, 181, -337, -217, -296, -178, -180,
	-337, 89, -337, 144, -296, 122, -6, 120, -141, -140,
	-139, 123, 612, 618, 122, 122, 122, 84, 84, 84,
	157, 84, 84, 84, 157, 84, 157, 99, -499, 460,
	40, 157, 83, 84, 157, 61, 157, 125, 84, 157,
	-364, -337, 89, -364, 84, 61, -129, 89, 157, -187,
	37, 38, 156, 433, -337, -510, 84, -425, 157, 243,
	156, 156, -401, 379, -336, -403, 21, 541, -313, 39,
	-320, 125, 639, -337, 84, -366, -366, 114, -362, -359,
	84, 122, -364, 120, -235, -237, 395, 396, -364, -235,
	-236, -242, 153, 191, 256, 190, 189, 187, 395, 396,
	-254, -337, -364, -364, 84, -364, -364, 17, -337, -254,
	-360, -364, -192, -192, 84, 84, -432, -433, -432, -432,
	84, 84, 84, 84, -432, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 83, 99, 101, 99, 101,
	-492, -590, 63, 620, 62, 423, 104, 310, 157, 99,
	89, 640, 157, 125, -337, -337, 17, 239, -337, 17,
	89, 170, 89, -569, 314, 350, -444, 99, 314, 350,
	491, 387, 84, 157, -313, -208, -197, 83, -197, -559,
	462, 403, 413, -333, -356, -355, 352, 42, -478, 424,
	409, 410, -402, 270, -337, -337, -565, 96, 125, 80,
	335, 339, 340, 336, 337, 338, -382, -383, -381, -385,
	-552, 83, 83, -172, 35, 133, -169, 83, 83, 35,
	-455, 325, -237, -231, -179, -337, 17, 157, -551, 156,
	-1, -337, -395, -349, -296, -364, -364, -296, -349, -349,
	-351, -337, -455, -237, 35, -278, 236, 233, -429, 307,
	308, -430, -445, 310, -447, 83, -234, -313, -228, -523,
	-524, -384, -337, 110, -523, 110, 83, -234, -313, -313,
	-281, -348, -313, -337, -337, -337, -337, -286, -285, -313,
	-288, 32, -289, -337, -337, -337, -337, 110, -337, 110,
	-259, 41, 48, 49, 50, -333, -333, 194, -262, 41,
	423, 425, 426, -288, 99, 99, 99, 99, 89, 89,
	89, -333, -333, 99, 89, -340, 89, -525, 169, 45,
	46, 99, 99, 99, 99, 41, 89, -267, 41, 290,
	294, 291, 292, 293, 89, 99, 41, 99, 41, 99,
	41, -337, 83, -526, -527, 89, -444, -559, -333, 356,
	-416, 125, 125, -356, -564, 320, -171, 491, 32, -201,
	236, 233, -552, -407, -406, -313, -184, -184, -184, -184,
	68, 68, 68, 68, 73, 68, 73, 68, -304, -407,
	-186, -197, -340, 84, -575, -574, -573, -571, 76, 244,
	77, -370, 480, 484, 485, -403, -352, 89, -410, -205,
	24, -231, -231, -477, 300, 301, 84, 157, -237, -298,
	19, 156, -298, 118, -6, -137, -139, -364, -6, -364,
	614, 369, 615, 89, 99, 99, -507, 444, 439, 441,
	110, -373, -494, -493, 61, -172, -195, -486, -529, -492,
	-337, 640, 640, 640, 640, 61, -172, -486, -205, -499,
	-189, -188, 44, -337, 99, 17, -400, -395, 144, 144,
	-337, 380, -411, 89, 402, 89, 239, 640, 89, -320,
	-359, -364, 84, -245, 178, 177, -245, 35, 84, 84,
	-462, -462, -461, -464, -461, -245, -245, 84, 84, 24,
	84, 84, 84, -364, 84, 84, 157, -482, 500, -483,
	574, -432, -432, -432, -432, -432, -432, -432, -432, -432,
	-432, -432, -432, -432, -432, -432, -432, -375, -374, 262,
	445, 627, 627, 445, 627, 627, 84, 157, -532, 157,
	-328, 315, -328, -319, 89, 243, 89, 167, -337, 89,
	630, 89, -337, 89, 307, -337, -337, 89, 89, -220,
	-237, 84, 35, -224, -225, -226, -234, -227, -229, 35,
	-560, 93, -555, 89, -337, 90, -561, 93, 404, 155,
	354, 41, 405, 406, 421, 349, 99, 99, 411, -553,
	-337, -170, -170, -563, 52, 125, 89, -231, -381, -325,
	152, 281, 328, -293, -292, -337, 89, -224, -172, -231,
	-224, -224, -172, -456, 327, 21, 99, 143, -198, 81,
	156, -180, -232, -337, 144, 84, -296, -223, -296, -296,
	-349, -456, -172, -441, 311, 83, -439, 83, -439, 110,
	336, -448, -446, 262, -284, 45, 47, -237, -521, -337,
	-519, -521, -337, -519, -519, -384, -364, -284, -234, 243,
	31, 233, -287, 333, 334, 339, -412, 306, 115, -412,
	157, -187, 157, -337, -254, -254, 31, 89, 89, -233,
	84, 157, 125, 89, -560, -555, 125, -417, 89, 89,
	-561, -565, 125, -163, 93, -326, 157, -201, -201, -296,
	157, 125, -203, -202, 80, 81, -204, 80, -202, 68,
	68, -296, -573, -572, 24, -524, -524, -524, 84, 84,
	15, -210, 41, -297, 20, 21, 144, -297, 122, 120,
	122, 122, -337, 84, 84, -468, 605, -503, -505, 439,
	21, 21, 15, 244, 84, -486, -486, -507, 45, 46,
	-395, -411, 424, -231, 157, 640, -235, -364, 84, -364,
	84, 89, 84, 89, -192, 21, 84, 157, 84, 84,
	84, 157, 84, 84, -364, 84, -532, -329, 188, 89,
	-329, 350, -338, -337, 17, -337, 89, -444, 307, 307,
	239, 237, -172, 84, 157, -172, 89, -558, 415, 89,
	89, 99, 41, 99, 155, 407, -479, -163, -163, -562,
	93, 125, 639, 83, -333, -333, -333, -337, 84, 157,
	-333, -333, 84, 84, 84, -252, 541, -457, 261, 99,
	143, 99, 143, 99, -335, -180, -337, -296, -551, 156,
	-296, -457, -431, 312, 99, -360, 83, -360, 83, -440,
	309, 83, 84, 157, -337, -313, -249, -248, -246, 104,
	115, 41, 393, -247, 93, 152, 295, 298, 297, 273,
	296, -276, -353, 80, 399, 333, 334, -385, 605, 529,
	246, 109, 110, 381, -354, 83, 83, 81, 315, 83,
	83, -521, 84, -284, -313, 41, -287, 41, 346, 306,
	-285, -337, 152, -254, 84, -527, 89, -558, 89, -419,
	-563, 89, 89, -552, -192, -406, -492, -364, 83, -364,
	83, 68, 11, 19, -357, -364, -372, 245, -6, 615,
	369, -269, 606, 89, 21, 89, -501, 89, -407, -468,
	-132, -266, -325, 278, 84, 84, 84, -432, -432, -435,
	-434, -438, 445, 307, 453, -372, 89, 89, 84, 84,
	89, -337, 243, 167, 89, 639, 89, -444, -444, -337,
	-212, -237, -167, 541, -252, -226, -167, 21, 541, 353,
	41, 99, 41, 408, 125, 105, 106, -321, -322, 89,
	-390, -392, -313, 83, -254, -256, 89, -292, -357, -357,
	-250, -172, 35, -251, -290, -385, -131, -130, -250, 83,
	-458, 161, 99, 143, 99, 99, -296, -296, -458, -447,
	21, 84, -426, 84, -426, 83, 125, -360, -446, -449,
	61, -246, 104, -360, 89, -256, -257, 41, 294, 290,
	125, 125, -258, 41, 274, 275, -268, 83, 305, 15,
	194, 83, 110, 110, -231, -390, -390, -522, 335, 336,
	337, 341, 339, 340, 338, -522, -390, -390, 83, -413,
	-412, -360, -333, -333, 152, -562, -193, -196, -520, -337,
	246, 21, 21, -337, -337, -317, 607, 99, 89, 441,
	-269, -469, 608, -497, -439, -254, 125, 84, -437, 117,
	407, 411, -358, -361, 99, 101, 186, 155, 84, 84,
	350, -337, -324, -323, 89, 89, 89, 307, 540, -168,
	60, 487, 89, 90, 402, 89, 90, 353, 89, 640,
	157, 125, 84, 157, -461, -364, -427, 262, -172, 157,
	-290, -325, -132, -427, -253, -291, -337, 89, -476, 169,
	326, 541, 99, 143, 99, -192, -459, 169, 326, -430,
	84, 84, 84, -426, 99, 84, -453, -450, 83, -290,
	264, 135, 89, 89, 99, 83, -487, 31, 89, -391,
	83, 84, 84, 84, 84, -390, 99, -254, -333, 84,
	84, 157, 83, 21, -317, -470, 609, 89, -506, 444,
	-500, -498, 439, 440, 441, 442, 89, -436, -437, 411,
	-358, -361, 603, 451, 451, 451, -337, 243, 640, 157,
	125, -444, -214, -337, 305, 424, -322, 89, -393, -392,
	-187, 84, -428, 314, 21, -290, -333, -428, 84, 157,
	-333, -333, 326, 99, 143, 99, -193, 326, -442, 313,
	84, -453, -290, -452, -451, 312, 265, 83, 84, -364,
	-376, -333, 84, -271, -270, 537, -390, -393, 81, -393,
	81, -393, 81, -393, 81, 84, -254, -337, 246, -318,
	-337, -501, 89, -508, 244, -504, -505, 443, -498, 21,
	441, 21, 21, -133, 157, 114, 452, 452, 452, 350,
	-323, 89, 89, -213, 35, 446, 380, -394, 252, 346,
	347, 93, 541, 333, 334, -187, 21, -429, -254, -291,
	-357, -357, 99, 99, 84, 157, -337, 261, 83, -371,
	-365, -364, 261, 84, -337, -275, -273, -274, 80, 458,
	303, 304, 84, -522, -522, -522, -522, -276, 84, 157,
	-515, 83, 99, -503, -502, -504, 21, -501, 21, -501,
	-501, 448, -436, -337, 89, -333, -333, 89, 89, 332,
	-313, 83, -441, -451, -450, -371, 84, 157, -412, -274,
	80, -273, 80, 16, 15, -393, -393, -393, -393, -337,
	-518, 31, 84, -514, -513, -314, -509, -337, 444, 445,
	89, -501, 125, -593, -592, 626, 99, 99, -337, -426,
	-431, 84, -365, -272, 300, 301, 31, 169, -272, -517,
	-516, -315, 84, 157, 156, 89, 89, 84, -447, 104,
	41, 302, 157, 125, -513, -337, -516, 41, -364, 156,
	-337,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 0, 308, 309, 310, 924,
	925, 926, 927, 928, 929, 930, 931, 932, 0, 0,
	0, 0, 0, 681, 682, 0, 645, 0, 0, 0,
	0, 0, 0, 528, 529, 530, 531, 532, 533, 534,
	535, 536, 537, 538, 539, 540, 541, 542, 543, 544,
	545, 546, 547, 548, 549, 550, 551, 552, 553, 554,
	555, 556, 557, 558, 559, 560, 561, 409, 410, 411,
	412, 413, 414, 415, 416, 417, 0, 333, 329, 254,
	255, 256, 257, 258, 340, 341, 505, 0, 0, 0,
	0, 764, -2, 98, 0, 0, 0, 0, 322, 0,
	313, 313, 933, 934, 935, 936, 937, 938, 939, 940,
	941, 942, 943, 944, 945, -2, 694, 0, 646, 647,
	648, 649, 650, 651, 652, 653, 654, 655, 656, 657,
	658, 659, 660, 661, 662, 393, 394, 395, 389, 390,
	392, 391, -2, 0, 694, 0, 0, 0, 772, 0,
	0, 0, 815, 837, 23, 0, 7, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 0, 0, 19,
	0, 19, 0, 0, 0, 1343, 1344, 1345, 1346, 2127,
	2097, -2, 1868, 1845, 2021, 2022, 1922, 1933, 2158, 2159,
	2160, 2161, 2162, 2163, 2164, 2165, 2166, 2167, 2168, 2169,
	2170, 2171, 2172, 2173, 2174, 2175, 2176, 2177, 2178, 2179,
	2180, 2181, 2182, 2183, 2184, 2185, 2186, 2187, 2188, 2189,
	2190, 2191, 2192, 2193, 2194, 2195, 2196, 2197, 2198, 2199,
	2200, 2201, 2202, 2203, 2204, 2205, 2206, 2207, 1802, 1803,
	1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813,
	1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823,
	1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833,
	1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843,
	1844, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854,
	1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864,
	1865, 1866, 1867, 1869, 1870, 1871, 1872, 1873, 1874, 1875,
	1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885,
	1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895,
	1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905,
	1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915,
	1916, 1917, 1918, 1919, 1920, 1921, 1923, 1924, 1925, 1926,
	1927, 1928, 1929, 1930, 1931, 1932, 1935, 1936, 1937, 1938,
	1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948,
	1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958,
	1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968,
	1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978,
	1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988,
	1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
	1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
	2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018,
	2019, 2020, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030,
	2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040,
	2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050,
	2051, 2052, 2053, -2, 2055, 2056, 2057, 2058, 2059, 2060,
	2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070,
	2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080,
	2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090,
	2091, 2092, 2093, 2094, 2095, 2096, 2098, 2099, 2100, 2101,
	2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110, 2111,
	2112, -2, -2, -2, 2116, 2117, 2118, 2119, 2120, 2121,
	2122, 2123, 2124, 2125, 2126, 2128, 2129, 2130, 2131, 2132,
	2133, 2134, 2135, 2136, 2137, 2138, 2139, 2140, 2141, 2142,
	2143, 2144, 2145, 2146, 2147, 0, 306, 304, 1815, 1845,
	1868, 1922, 1933, 1934, 1969, 2021, 2022, 2054, 2097, 2113,
	2114, 2115, 2127, 0, 0, 950, 0, 742, 0, 0,
	747, 1292, 742, 334, 683, 684, 772, 798, 643, 0,
	371, 0, 1859, 375, 2104, 0, 0, 0, 640, 365,
	366, 367, 368, 369, 370, 0, 0, 923, 0, 0,
	361, 0, 328, 1924, 2126, 1347, 0, 0, 0, 0,
	0, 197, 1070, 199, 1072, 203, 211, 0, 0, 0,
	216, 217, 220, 221, 222, 223, 224, 0, 228, 0,
	230, 233, 0, 235, 236, 0, 239, 240, 241, 0,
	251, 252, 253, 1073, 1074, 1075, -2, 126, 948, 1773,
	1660, 0, 1667, 1680, 1691, 1424, 1425, 1426, 1427, 0,
	0, 0, 0, 0, 0, 1435, 1436, 0, 1464, 2162,
	2203, 2204, 0, 1444, 1445, 1446, 1447, 1448, 1449, 137,
	149, 150, 1713, 1714, 1715, 1716, 1717, 1718, 1719, 0,
	1721, 1722, 1723, 1631, 1411, 1343, 0, 2171, 0, 2193,
	2198, 2199, 2200, 2201, 2192, 0, 0, 1616, 0, 1606,
	0, 0, -2, -2, 0, 0, 1994, -2, 2205, 2206,
	2207, 2168, 2189, 2197, 2172, 2173, 2196, 2164, 2165, 2166,
	2159, 2160, 2161, 2163, 2175, 2177, 2188, 0, 2184, 2194,
	2195, 2102, 0, 0, 0, 0, 0, 2144, 151, 152,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 1627, -2, -2,
	1630, -2, 1633, -2, -2, -2, -2, 1638, 1639, -2,
	1641, -2, -2, -2, -2, -2, -2, -2, 1618, 1619,
	1620, 1621, 1610, 1611, 1612, 1613, 1614, 1615, -2, -2,
	-2, 798, 873, 0, 798, 0, 773, 820, 823, 826,
	829, 776, 0, 0, 99, 100, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 323, 324, 312, 314, 0,
	318, 0, 311, 1106, 1106, 1106, 0, 0, 0, 0,
	1106, 1106, 1106, 1106, 1106, 0, 1106, 0, 0, 0,
	0, 0, 1106, 0, 983, 1077, 1078, 1079, 1104, 1105,
	1178, 0, 0, 0, 699, 695, 696, 697, 698, 786,
	0, 788, 791, 0, 620, 620, 846, 846, 566, 0,
	0, 0, 620, 0, 580, 572, 0, 0, 0, 620,
	0, 0, 793, 793, 0, 623, 630, 620, 620, -2,
	620, 620, 617, 620, 0, 0, 1118, 586, 587, 588,
	572, 572, 591, 592, 593, 603, 604, 631, 1797, 0,
	0, 505, 505, 0, 505, 505, 0, 505, 505, 505,
	701, 1964, 1866, 1939, 1924, 2126, 0, 279, 1994, 284,
	0, 1867, 1886, 0, 0, 1904, 0, -2, 0, 350,
	798, 0, 0, 772, 0, 0, 0, 0, 505, 505,
	505, 505, 505, 1177, 505, 505, 505, 505, 505, 0,
	0, 0, 505, 505, 505, 505, 0, 0, 838, 839,
	834, 835, 836, 840, 841, 5, 6, 19, 0, 0,
	0, 0, 0, 0, 105, 104, 0, 1774, 1792, 1726,
	1727, 1728, 1779, 1730, 1783, 1783, 1783, 1783, 1759, 1760,
	1761, 1762, 1763, 1764, 1765, 1766, 1767, 1783, 1783, 0,
	0, 1772, 1750, 1781, 1781, 1781, 1779, 1776, 1731, 1732,
	1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742,
	1743, 1744, 1786, 1786, 1789, 1789, 1786, 0, 407, 405,
	406, 1656, 0, 0, 0, 0, 742, 746, 1290, 0,
	0, 0, 798, -2, 0, 0, 644, 372, 1348, 0,
	0, 376, 0, 377, 0, 0, 0, 396, 0, 399,
	384, 385, 386, 380, 0, 177, 0, 363, 364, 0,
	0, 330, 0, 0, 0, 506, 0, 0, 0, 0,
	0, 0, 208, 204, 212, 215, 225, 232, 0, 244,
	246, 249, 205, 213, 218, 219, 226, 247, 206, 209,
	210, 214, 248, 250, 207, 227, 231, 245, 229, 234,
	237, 238, 243, 0, 178, 0, 0, 0, 0, 0,
	1666, 0, 0, 1699, 1700, 1701, 1702, 1703, 1704, 1705,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, -2,
	1660, 0, 0, 1430, 1431, 1432, 1433, 0, 1437, 0,
	1465, 0, 0, 0, 0, 0, 1720, 1724, 0, 1656,
	1656, 0, 1656, 1652, 0, 0, 0, 0, 0, 0,
	1656, 1589, 0, 0, 1591, 1607, 0, 0, 1593, 1594,
	0, 1597, 1598, 1656, 0, 1656, 1602, 1656, 1656, 1656,
	1585, 1586, 0, 1652, 1652, 1652, 1652, 0, 0, 1652,
	1652, 1652, 1652, 1652, 1652, 1652, 1652, 1652, 1652, 1652,
	1652, 1652, 1652, 0, 0, 0, 0, 793, 0, 799,
	0, -2, 0, 817, 819, 821, 822, 824, 825, 827,
	828, 830, 831, 778, 0, 0, 101, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 316,
	0, 321, 0, 0, 0, 0, 0, 947, 0, 0,
	1106, 1106, 1106, 984, 0, 0, 0, 0, 0, 0,
	0, 0, 1106, 1106, 1106, 1106, 0, 1124, 0, 0,
	0, 701, 700, 0, 787, 0, 0, 0, 846, 0,
	0, 563, 564, 0, 565, 0, 572, 620, 620, 578,
	579, 574, 573, 626, 627, 623, 0, 623, 623, 846,
	0, 597, 598, 599, 620, 620, 605, 794, 0, 606,
	607, 623, 0, 628, 629, 846, 0, 0, 846, 846,
	0, 615, 616, 618, 620, 0, 0, 1106, 0, 636,
	574, 574, 1798, 1799, 0, 0, 1115, 0, 0, 0,
	0, 639, 0, 0, 0, 0, 702, 259, 262, 0,
	265, 0, 1964, 0, 1964, 0, 272, 0, 0, 0,
	0, 0, 0, 302, 303, 0, 0, 0, 0, 293,
	296, 1284, 1285, 1067, 1068, 297, 298, 342, 343, 0,
	793, 816, 818, 812, 813, 814, 0, 0, 0, 0,
	0, 0, 0, 505, 0, 0, 0, 0, 0, 677,
	0, 963, 679, 0, 0, 0, 0, 0, 854, 848,
	850, 918, 137, 854, 8, 122, 119, 0, 19, 0,
	0, 19, 19, 0, 19, 307, 0, 1795, 1793, 1794,
	1729, 1780, 0, 1755, 0, 1756, 1757, 1758, 1768, 1769,
	0, 0, 1751, 0, 1752, 1753, 1754, 1745, 0, 1746,
	1747, 0, 1748, 1749, 305, 404, 0, 0, 1657, 951,
	0, 720, 734, 715, 0, 723, 0, 0, 1292, 0,
	0, 0, 703, 734, 705, 0, 723, 793, 770, 0,
	748, 0, 0, 373, 0, 381, 378, 0, 382, 0,
	0, 398, 400, 401, 402, 387, 388, 641, 359, 360,
	351, 352, 353, 354, 355, 356, 357, 358, 0, 0,
	0, 362, 147, 0, 331, 332, 0, 0, 0, 191,
	192, 193, 194, 195, 196, 198, 182, 666, 668, 1059,
	1071, 0, 1062, 0, 201, 242, 174, 0, 0, 0,
	1661, 1662, 1663, 1664, 1665, 1670, 0, 1672, 1674, 1676,
	1678, 0, 1696, -2, -2, 1412, 1413, 1414, 1415, 1416,
	1417, 1418, 1419, 1420, 1421, 1422, 1423, 1681, 1694, 1695,
	0, 0, 0, 0, 0, 0, 1692, 1692, 1687, 0,
	1450, 1286, 1287, 1428, 0, 0, 1462, 1466, 0, 0,
	0, 0, 0, 138, 1651, 1556, 1557, 1558, 1559, 1560,
	1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570,
	1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580,
	1581, 1582, 1583, 1584, 0, 0, 1660, 0, 0, 0,
	1653, 1654, 0, 0, 0, 1544, 0, 0, 1550, 1551,
	1552, 0, 729, 0, 1617, 1590, 1608, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 872, 874, 0, 738, 740, 741,
	767, 748, 774, 0, 0, 0, 97, 102, 0, 1145,
	0, 0, 0, 0, 0, 0, 71, 73, 0, 1119,
	0, 1121, 325, 326, 0, 0, 320, 0, 0, 0,
	0, 0, -2, 0, 0, 0, 0, 0, 999, 1000,
	503, 1053, 0, 0, 0, 1069, 1094, 1102, 0, 0,
	0, 0, 0, 1151, 985, 990, 991, 992, 986, 987,
	993, 994, 0, 789, 0, 0, 887, 70, 562, 621,
	622, 847, 569, 1924, 574, 846, 846, 581, 575, 582,
	625, 583, 584, 585, 623, 846, 846, 795, 620, 623,
	608, 624, 623, 1292, 612, 0, 619, 1292, 637, 1292,
	0, 635, 589, 590, 1153, 791, 420, 421, 422, 424,
	0, 473, 473, 473, 456, 473, 0, 0, 444, 1800,
	0, 0, 0, 0, 453, 1800, 0, 0, 1800, 1800,
	1800, 1800, 1800, 1800, 1800, 0, 0, 1800, 1800, 1800,
	1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 0, 1800,
	1800, 1800, 1800, 1800, 1270, 1800, 0, 1116, 463, 464,
	465, 466, 471, 472, 0, 0, 500, 0, 0, 998,
	0, 503, 0, 1038, 859, 0, 860, 861, 857, 889,
	913, 913, 0, 913, 893, 1292, 0, 0, 270, 271,
	260, 0, 261, 0, 273, 274, 0, 276, 277, 278,
	285, 1866, 1939, 280, 282, 0, 0, 286, 299, 300,
	301, 0, 0, 291, 292, 0, 0, 345, 346, 348,
	0, 748, 1120, 72, 663, 1288, 664, 665, 669, 0,
	0, 672, 673, 674, 675, 676, 965, 0, 0, 1045,
	1046, 1047, 1048, 846, 0, 855, 0, 851, 919, 0,
	921, 0, 846, 0, 120, 19, 0, 113, 110, 0,
	0, 0, 0, 0, 1775, 1725, 1796, 0, 0, 0,
	1777, 0, 0, 0, 0, 0, 103, 750, 710, 0,
	714, 731, 0, 735, 0, 0, 727, 719, 724, 0,
	0, 744, 711, 1291, 0, 0, 0, 704, 0, 0,
	709, 748, 0, 771, 800, 801, 804, 1349, 0, 383,
	379, 397, 0, 505, 0, 0, 0, 185, 1056, 0,
	186, 190, 180, 0, 0, 0, 1061, 0, 1058, 1063,
	0, 200, 0, 0, 175, 176, 1136, 1145, 0, 0,
	0, 1671, 1673, 1675, 1677, 1679, 0, 1682, 1692, 1692,
	1688, 0, 1683, 0, 1685, 0, 1661, 1434, 0, 1467,
	0, 0, 0, 0, 0, 0, 0, 0, 1534, 1535,
	0, 0, 1539, 0, 1541, 1542, 1543, 1545, 0, 0,
	0, 1549, 0, 1588, 1609, 1592, 1595, 0, 1599, 0,
	1601, 1603, 1604, 1605, 0, 798, 798, 0, 0, 1506,
	1506, 1506, 0, 0, 0, 0, 1506, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1451, 0, 1452,
	1453, 0, 0, 0, 875, 768, 0, 0, 0, 0,
	0, 1143, 0, 86, 0, 0, 0, 93, 0, 0,
	74, 75, 327, 315, 317, 0, 0, 1107, 0, 0,
	0, 0, 0, 953, 954, 956, 0, 959, 960, 961,
	965, 791, 0, 791, 1010, 1800, 507, 0, 0, 1055,
	0, 0, 1027, 0, 0, 0, -2, 0, 0, 1102,
	0, 0, 0, 1155, 0, 0, 0, 688, 692, 23,
	792, 0, 567, 0, 568, 620, 576, 577, 846, 600,
	601, 0, 0, 846, 620, 620, 611, 623, 632, 0,
	633, 634, 1155, 0, 0, 1115, 1221, 1189, 434, 0,
	1304, 1305, 474, 0, 1311, 1320, 1106, 1381, 0, 1320,
	0, 0, 1322, 1323, 0, 0, 0, 0, 457, 458,
	0, 443, 0, 0, 0, 0, 0, 0, 442, 0,
	0, 484, 0, 0, 0, 0, 0, 1801, 1800, 1800,
	0, 451, 452, 0, 455, 0, 0, 0, 0, 0,
	0, 0, 0, 1800, 1800, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1261, 0, 0, 0,
	0, 0, 0, 0, 1276, 1277, 0, 1010, 1800, 0,
	0, 0, 0, 507, 1025, 1043, 0, 0, 0, 0,
	0, 0, 879, 0, 0, 0, 878, 0, 0, 0,
	0, 0, 791, 914, 0, 916, 917, 891, -2, 0,
	859, 896, 1656, 263, 264, 0, 0, 269, 287, 289,
	0, 0, 0, 288, 290, 294, 295, 344, 347, 349,
	810, 0, 0, 1179, 0, 966, 967, 969, 970, 0,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 1850, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 964, 680, 844, 849, 856,
	920, 922, 138, 852, 844, 0, 123, 19, 122, 114,
	115, 0, 19, 0, 0, 0, 0, 1785, 1784, 1770,
	0, 1771, 1782, 1787, 0, 1790, 0, 408, 754, 0,
	0, 734, 736, 0, 0, 734, 0, 0, 743, 0,
	0, 0, 0, 0, 0, 734, 810, 750, 0, 807,
	805, 806, 0, 0, 642, 148, 403, 0, 0, 0,
	0, 0, 667, 0, 1060, 182, 0, 0, 202, 0,
	0, 0, 1145, 1140, 1655, 1684, 1686, 0, 1693, 1689,
	1429, 1438, 1463, 0, 0, 1469, 1481, 1481, 0, 0,
	0, 1472, 1783, 1783, 1475, 1779, 1781, 1779, 1481, 1481,
	0, 139, 0, 0, 1540, 0, 0, 0, 730, 0,
	0, 0, 1502, 1504, 1506, 1506, 1513, 1507, 1514, 1515,
	1506, 1506, 1506, 1506, 1520, 1506, 1506, 1506, 1506, 1506,
	1506, 1506, 1506, 1506, 1506, 1500, 0, 0, 1714, 1715,
	739, 0, 0, 781, 782, 783, 784, 785, 0, 0,
	61, 61, 1145, 0, 87, 0, 0, 0, 0, 0,
	76, 319, 0, 77, 78, 0, 0, 85, 0, 0,
	0, 0, 0, 958, 0, 0, 0, 1297, 0, 1014,
	1011, 1012, 1013, 0, 1050, 508, 509, 510, 511, 0,
	0, 0, 1054, 0, 1038, 1038, 1020, 0, 0, 0,
	1095, 1096, 1097, 1098, 1099, 1100, 1101, -2, 1110, 0,
	0, 0, 1297, 1129, 0, 0, 1134, 1297, 1297, 0,
	1163, 0, 1152, 742, 0, -2, 0, 0, 690, 0,
	0, 888, 570, 846, 594, 796, 797, 1292, 846, 846,
	620, 638, 1163, 1154, 0, 423, 473, 0, 1209, 0,
	0, 1215, 0, 1222, 427, 0, 475, 0, 1310, 1337,
	1321, 1337, 1382, 1337, 1337, 1106, 0, 475, 0, 0,
	445, 481, 0, 0, 0, 0, 0, 441, 478, 804,
	428, 430, 431, 432, 482, 483, 485, 0, 487, 488,
	447, 459, 460, 461, 462, 0, 0, 0, 454, 467,
	468, 469, 470, 429, 1238, 1239, 1240, 1243, 1244, 1245,
	1246, 0, 0, 1249, 1250, 1251, 1252, 1253, 1334, 1335,
	1336, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1278, 1279,
	1280, 1281, 1282, 1283, 1262, 1263, 1264, 1265, 1266, 1267,
	1268, 1269, 0, 0, 1273, 0, 0, 1014, 0, 0,
	0, 0, 0, 1050, 1027, 0, 1034, 0, 1039, 1040,
	0, 0, 712, 846, 337, 0, 883, 876, 0, 865,
	880, 881, 882, 868, 0, 870, 0, 866, 867, 846,
	858, 890, 915, 892, 895, 897, 898, 904, 0, 0,
	0, 0, 266, 267, 268, 275, 0, 527, 281, 766,
	0, 1289, 670, 671, 1180, 1181, 678, 0, 971, 842,
	0, 0, 842, 118, 121, 0, 116, 0, 0, 0,
	0, 108, 106, 1778, 0, 0, 756, 162, 0, 0,
	0, 732, 0, 737, 734, 718, 728, 717, 725, 726,
	745, 1293, 1294, 1295, 1296, 734, 708, 707, 769, 754,
	802, 803, 0, 1350, 374, 0, 1057, 182, 187, 188,
	189, 183, 181, 1064, 0, 1066, 0, 1138, 0, 0,
	1690, 1468, 1439, 1470, 1482, 1483, 1471, 0, 1441, 1442,
	1473, 1474, 1476, 1477, 1478, 1479, 1480, 1443, 1536, 0,
	1538, 1546, 1547, 0, 1596, 1600, 0, 0, 0, 0,
	0, 1511, 1512, 1516, 1517, 1518, 1519, 1521, 1522, 1523,
	1524, 1525, 1526, 1527, 1528, 1529, 1530, 798, 1501, 0,
	0, 0, 0, 0, 0, 0, 779, 0, 0, 0,
	63, 0, 63, 1144, 1146, 0, 918, 0, 0, 94,
	0, 0, 79, 80, 0, 0, 0, 946, 949, 955,
	957, 0, 0, 0, 1298, 1299, 1301, 1302, 1303, 0,
	982, 0, 0, 1002, 1003, 1004, 1016, 0, 0, 0,
	513, 514, 0, 0, 0, 526, 522, 523, 524, 504,
	1049, 1034, 1034, 1023, 0, 0, 1033, 0, 1111, 1800,
	1800, 1800, 0, 0, 1223, 1800, 1800, 0, 1131, 1133,
	0, 0, 1227, 1166, 0, 0, 1157, 0, 913, 0,
	0, 846, 689, 692, 693, 790, 571, 609, 613, 610,
	846, 1166, 419, 1187, 0, 0, 0, 0, 0, 1219,
	0, 0, 1191, 0, 446, 476, 0, -2, 0, 1338,
	0, 1324, 1338, 0, 0, 1337, 0, 435, 475, 0,
	0, 0, 489, 493, 494, 0, 491, 1377, 0, 492,
	0, 480, 0, 486, 1241, 1242, 0, 1247, 1248, 0,
	1272, 0, 0, 426, 495, 0, 0, 0, 496, 497,
	502, 1020, 0, 1037, 0, 1044, 0, 1041, 1042, 798,
	0, 0, 862, 884, 0, 0, 863, 0, 864, 869,
	871, 336, 899, 0, 0, 901, 902, 903, 894, 283,
	811, 968, 0, 832, 0, 0, 853, 833, 0, 19,
	0, 0, 111, 1788, 1791, 758, 0, 755, 163, 0,
	0, 0, 0, 722, 733, 716, 706, 756, 808, 809,
	184, 179, 1065, 1148, 0, 1139, 0, 0, 1548, 0,
	1506, 1503, 1506, 1505, 1497, 0, 1454, 0, 1456, 1457,
	1458, 0, 1460, 1461, 0, 777, 0, 59, 0, 62,
	60, 0, 96, 88, 0, 0, 0, 0, 0, 0,
	0, 0, 988, 1227, 0, 988, 1015, 1001, 0, 1051,
	1052, 0, 515, 516, 0, 519, 525, 1017, 1018, 1019,
	0, 0, 1031, 0, 0, 0, 0, 1103, 1117, 0,
	0, 0, -2, 0, -2, 1128, 0, 1172, 0, 1164,
	0, 1156, 0, 1159, 846, 846, -2, 686, 691, 0,
	614, 1172, 1189, 0, 1210, 0, 0, 0, 0, 0,
	0, 0, 1190, 0, 1203, 477, 1339, -2, 1353, 1355,
	0, 1116, 1358, 1359, 0, 0, 0, 0, 0, 0,
	1403, 1367, 0, 0, 1371, 1372, 1373, 0, 0, 1376,
	0, 1708, 1709, 0, 1380, 0, 0, 0, 0, 0,
	0, 0, 1318, 436, 437, 0, 439, 440, 1800, 1378,
	479, 433, 1800, 449, 1271, 1274, 1275, 501, 498, 499,
	1023, 1026, 1035, 713, 793, 338, 339, 885, 0, 877,
	908, 905, 0, 0, 972, 843, 845, 112, 117, 0,
	0, 760, 0, 757, 0, 751, 753, 173, 721, 758,
	133, 165, 0, 0, 1440, 1537, 1587, 1509, 1510, 0,
	1498, 0, 1492, 1493, 1494, 1499, 0, 0, 780, 775,
	64, 90, 0, 0, 95, 68, 81, 0, 0, 0,
	0, 974, 981, 995, 1122, 1300, 980, 0, 0, 512,
	517, 0, 520, 521, 0, 1021, 1022, 0, 1029, 0,
	0, 1090, 1779, 0, 1112, 1113, 1114, 1224, 1225, 1226,
	1182, 1130, 0, -2, 1235, 0, 1126, 1148, 1182, 0,
	1160, 0, 1167, 0, 1165, 1158, 798, 687, 1169, 425,
	1221, 1211, 0, 1213, 0, 0, 0, 0, 1192, -2,
	0, 1354, 1356, 1357, 1360, 1361, 1362, 1408, 1409, 1410,
	0, 0, 1365, 1405, 1406, 1407, 1366, 0, 0, 0,
	0, 0, 1706, 1707, 1401, 0, 0, 1325, 1327, 1328,
	1329, 1330, 1331, 1332, 1333, 1326, 0, 0, 0, 1317,
	1319, 438, 0, 0, 1800, 1036, 335, 0, 0, 909,
	911, 906, 907, 107, 109, 124, 0, 759, 164, 0,
	760, 135, 0, 156, 0, 1149, 0, 1508, 1495, 0,
	0, 0, 0, 0, 1710, 1711, 1712, 0, 1455, 1459,
	0, 89, 0, 66, 0, 82, 83, 0, 0, 0,
	996, 997, 1005, 1006, 0, 1008, 1009, 518, 1024, 1028,
	1031, 0, 1081, 0, 804, 0, 1184, 0, 1132, 1115,
	1237, 1800, 1135, 1184, 0, 1229, 1800, 1800, 1150, 0,
	1162, 0, 1174, 0, 1168, 793, 418, 0, 1171, 1207,
	1212, 1214, 1216, 0, 1220, 1218, 1193, -2, 0, 1201,
	0, 0, 1363, 1364, 0, 0, 1606, 1800, 0, 1396,
	0, 1081, 1081, 1081, 1081, 0, 490, 448, 0, 886,
	900, 0, 0, 0, 749, 125, 0, 134, 153, 0,
	166, 167, 0, 0, 0, 0, 1141, 0, 1484, 0,
	0, 0, 1488, 1489, 1490, 1491, 91, 0, 65, 68,
	0, 0, 0, 973, 0, 1007, 1030, 1032, 1080, 1091,
	1092, 804, 1125, 0, 1221, 1236, 0, 1127, 1228, 0,
	0, 0, 1161, 1173, 0, 1176, 685, 1170, 1188, 0,
	1217, 1194, 1202, 0, 1197, 0, 0, 0, 1404, 0,
	1370, 0, 1375, 1384, 1397, 0, 0, 1306, 0, 1308,
	0, 1312, 0, 1314, 0, 0, 450, 910, 912, 0,
	762, 752, 136, 140, 0, 162, 159, 0, 168, 0,
	0, 0, 0, 1137, 0, 0, 1485, 1486, 1487, 0,
	67, 69, 84, 0, 975, 976, 989, 1082, 1800, 1800,
	0, 0, 0, 1088, 1089, 1093, 0, 1209, 1241, 1230,
	1231, 1232, 1175, 1208, 1196, 0, -2, 1204, 0, 0,
	1658, 1668, 1669, 1368, 1374, 1383, 1385, 1386, 0, 1398,
	1399, 1400, 1402, 1081, 1081, 1081, 1081, 1316, 761, 0,
	127, 0, 0, 157, 158, 160, 0, 169, 0, 171,
	172, 0, 1496, 92, 977, 0, 0, 1085, 1086, 0,
	1185, 0, 1187, 1198, -2, 0, 1206, 0, 1369, 1387,
	0, 1388, 0, 0, 0, 1307, 1309, 1313, 1315, 763,
	1147, 0, 141, 0, 143, 145, 146, 1340, 154, 155,
	161, 170, 0, 962, 978, 0, 1083, 1084, 1087, 0,
	1189, 1205, 1659, 1389, 1391, 1392, 0, 0, 1390, 128,
	129, 0, 142, 0, 0, 1142, 979, 1186, 1183, 1393,
	1395, 1394, 0, 0, 144, 1341, 130, 131, 132, 0,
	1342,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 116, 3, 3, 3, 147, 139, 3,
	83, 84, 144, 142, 157, 143, 156, 145, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 641, 638,
	126, 125, 127, 3, 642, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 149, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 639, 138, 640, 150,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 85, 86, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 117, 118, 119, 120, 121, 122, 123, 124,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	140, 141, 146, 148, 151, 152, 153, 154, 155, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 57956, 631, 57957, 632, 57958, 633, 57959, 634,
	57960, 635, 57961, 636, 57962, 637, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:824
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:831
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:837
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:845
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:851
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:855
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:870
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:874
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:880
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:885
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:889
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:922
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:936
		{
			var timestamp = yyDollar[2].str
			var isS3 = false
			var dir = yyDollar[4].str
			var parallelism = yyDollar[6].str
			var option []string
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:947
		{
			var timestamp = yyDollar[2].str
			var isS3 = true
			var dir string
			var parallelism string
			var option = yyDollar[5].strsUnion()
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:959
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:963
		{
			yyVAL.str = yyDollar[2].str
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:968
		{
			yyVAL.str = ""
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:972
		{
			yyVAL.str = yyDollar[2].str
		}
	case 65:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:978
		{
			yyLOCAL = &tree.CreateCDC{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				TaskName:    yyDollar[4].str,
				SourceUri:   yyDollar[5].str,
				SinkType:    yyDollar[6].str,
				SinkUri:     yyDollar[7].str,
				Tables:      yyDollar[8].str,
				Option:      yyDollar[10].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:992
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:996
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1000
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1004
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1011
		{
			yyLOCAL = &tree.ShowCDC{
				SourceUri: yyDollar[3].str,
				Option:    yyDollar[4].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1020
		{
			yyLOCAL = &tree.PauseCDC{
				SourceUri: yyDollar[3].str,
				Option:    yyDollar[4].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1029
		{
			yyLOCAL = tree.NewDropCDC(yyDollar[3].str, yyDollar[4].allCDCOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1035
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      true,
				TaskName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1042
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      false,
				TaskName: yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1051
		{
			yyLOCAL = &tree.ResumeCDC{
				SourceUri: yyDollar[3].str,
				TaskName:  yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1060
		{
			yyLOCAL = &tree.RestartCDC{
				SourceUri: yyDollar[3].str,
				TaskName:  yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1069
		{
			yyLOCAL = &tree.CreateSnapShot{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Object:      yyDollar[6].snapshotObjectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1079
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELCLUSTER,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1089
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1101
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				PitrValue:   yyDollar[6].int64ValUnion(),
				PitrUnit:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1111
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELCLUSTER,
				PitrValue:   yyDollar[8].int64ValUnion(),
				PitrUnit:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1121
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				AccountName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:   yyDollar[9].int64ValUnion(),
				PitrUnit:    yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1132
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:    yyDollar[9].int64ValUnion(),
				PitrUnit:     yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-12 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1143
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[9].cstrUnion().Compare()),
				PitrValue:    yyDollar[11].int64ValUnion(),
				PitrUnit:     yyDollar[12].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1157
		{
			yyLOCAL = yyDollar[1].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1165
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELCLUSTER,
				SnapShotName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}

		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1173
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELACCOUNT,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[6].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1181
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELDATABASE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1190
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELTABLE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[10].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1200
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELACCOUNT,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[9].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1209
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELDATABASE,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName:  tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[11].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-13 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1219
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELTABLE,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName:  tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:     tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[10].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[13].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1232
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELACCOUNT,
				Name:      tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				TimeStamp: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1240
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1249
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				TimeStamp:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1259
		{
			yyLOCAL = &tree.RestorePitr{
				Level:          tree.RESTORELEVELACCOUNT,
				AccountName:    tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:           tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:      yyDollar[7].str,
				SrcAccountName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1271
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1291
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1297
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1304
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1312
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1318
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1327
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1337
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1345
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1353
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1361
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1371
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1379
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1389
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1396
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1405
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1415
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1419
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1425
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1429
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1435
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1444
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1454
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1458
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 121:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1464
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1473
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1477
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1483
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1504
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
			yyLOCAL.(*tree.Load).Param.Strict = yyDollar[11].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1518
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1525
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1529
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1535
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1539
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1545
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1552
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1560
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1564
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error strict flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1576
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1580
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1594
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1598
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1603
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1610
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1614
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1618
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1624
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1633
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1644
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1648
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1654
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1658
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1664
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1668
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1674
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1698
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            goto ret1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1717
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1721
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1725
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1730
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1734
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1743
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1753
		{
			yyVAL.str = ""
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1760
		{
			yyVAL.str = yyDollar[3].str
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1765
		{
			yyVAL.str = "\n"
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1772
		{
			yyVAL.str = yyDollar[3].str
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1777
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1781
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1809
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1813
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1819
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1827
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1847
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1866
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1891
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1895
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1899
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1904
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1908
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1914
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1927
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1938
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1951
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1955
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1965
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1978
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1991
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1997
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2003
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2011
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  dbName,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2021
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2031
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2035
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2039
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2043
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2047
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2051
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2058
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2062
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2068
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2075
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2084
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2088
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2094
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2098
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2102
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2106
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2110
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPGRADE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2114
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2118
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2122
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2126
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2130
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2134
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2138
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2142
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2146
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2150
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2154
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2158
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2162
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2166
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2170
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2174
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2178
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2182
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2186
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2190
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2194
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2198
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2202
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2206
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2210
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2214
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2218
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2222
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2226
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2230
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2234
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2238
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2242
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2246
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2250
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2254
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2258
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2262
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2266
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2270
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2274
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2278
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2282
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2286
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2290
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2294
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2307
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2314
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2321
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2331
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2335
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2341
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2348
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2356
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2360
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2364
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2368
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2374
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2378
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2384
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2391
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2398
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2407
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2437
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2441
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2445
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2451
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2457
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2461
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2468
		{
			yyVAL.str = yyDollar[3].str
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2474
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2478
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2484
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2492
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2501
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2510
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2518
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2526
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2549
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2572
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2579
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2586
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2594
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2601
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2608
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2617
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2621
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2625
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2631
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2635
		{
			yyVAL.str = yyDollar[1].str
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2641
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2645
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2651
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2655
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2666
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2672
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 313:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2677
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2681
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2685
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2689
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 317:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2693
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2697
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 319:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2701
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2705
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2709
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2715
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2719
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2723
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 325:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2727
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2732
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2737
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2743
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2756
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2769
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2782
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2795
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2811
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2818
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 336:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2829
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].joinTableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2840
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2844
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2850
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2860
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2866
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2870
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:2876
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2882
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2886
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2890
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2894
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2900
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2913
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 359:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2919
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 360:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2923
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2929
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 362:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2933
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2939
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2945
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2956
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2962
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2966
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2970
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 374:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2974
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2978
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2982
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2990
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2998
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3008
		{
			if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3020
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3024
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3032
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 383:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3040
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3079
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3083
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:3089
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3095
		{
			yyVAL.str = yyDollar[1].str
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3100
		{
			yyVAL.str = "true"
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3101
		{
			yyVAL.str = "false"
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3102
		{
			yyVAL.str = yyDollar[1].str
		}
	case 403:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3107
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 404:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3113
		{
			yyLOCAL = &tree.UpgradeStatement{
				Target: yyDollar[3].upgrade_targetUnion(),
				Retry:  yyDollar[4].int64ValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3122
		{
			yyLOCAL = &tree.Target{
				AccountName:  yyDollar[1].str,
				IsALLAccount: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3129
		{
			yyLOCAL = &tree.Target{
				AccountName:  "",
				IsALLAccount: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 407:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3137
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3141
		{
			res := yyDollar[3].item.(int64)
			if res <= 0 {
				yylex.Error("retry value can not less than 0")
				yyLOCAL = -1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 418:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3165
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 419:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3188
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 420:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3198
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 421:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3205
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3214
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3218
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3224
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 425:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3228
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()

			partitionDef := tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)

			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3252
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var pitrValue = yyDollar[6].int64ValUnion()
			var pitrUnit = yyDollar[7].str
			yyLOCAL = tree.NewAlterPitr(ifExists, name, pitrValue, pitrUnit)
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3262
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3272
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3288
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3306
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3310
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3316
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3320
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3326
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 435:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3332
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 436:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3340
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 437:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3350
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 438:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3358
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 439:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3368
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3378
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3388
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3395
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3399
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3403
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3407
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3411
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3418
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3424
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3428
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3432
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3436
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3440
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3444
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3448
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3452
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3457
		{
			yyVAL.str = ""
		}
	case 473:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3488
		{
			yyVAL.str = ""
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3492
		{
			yyVAL.str = string("COLUMN")
		}
	case 475:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3497
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3503
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3509
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3517
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3521
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3527
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3535
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterOptionTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3542
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3548
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3554
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3560
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 486:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3566
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3573
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3580
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3588
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 490:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3594
		{
			val := int64(yyDollar[6].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = val
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3606
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3612
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3620
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3624
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 495:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3631
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 496:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3649
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 497:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3664
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.UNIQUE_CHECK_ON_AUTOINCR,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 498:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3679
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 499:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3694
		{
			assignments := []*tree.VarAssignmentExpr{
				&tree.VarAssignmentExpr{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 500:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3707
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 501:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3713
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].exprUnion(),
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 502:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3724
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 503:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3737
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3741
		{
			var UserName = yyDollar[3].str
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 505:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3749
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3753
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 507:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3758
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3762
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3778
		{
			yyLOCAL = tree.NewUserMiscOptionAccountUnlock()
		}
		yyVAL.union = yyLOCAL
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3782
		{
			yyLOCAL = tree.NewUserMiscOptionAccountLock()
		}
		yyVAL.union = yyLOCAL
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3786
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNone()
		}
		yyVAL.union = yyLOCAL
	case 512:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3790
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireInterval(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3797
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNever()
		}
		yyVAL.union = yyLOCAL
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3801
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireDefault()
		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3805
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryDefault()
		}
		yyVAL.union = yyLOCAL
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3809
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3816
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalDefault()
		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3820
		{
			var Value = yyDollar[4].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3827
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentNone()
		}
		yyVAL.union = yyLOCAL
	case 520:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3831
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentDefault()
		}
		yyVAL.union = yyLOCAL
	case 521:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3835
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentOptional()
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3839
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionFailedLoginAttempts(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3846
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3853
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeUnbounded()
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:3859
		{
			yyVAL.item = nil
		}
	case 526:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3864
		{
			yyVAL.item = nil
		}
	case 562:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3909
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 563:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3918
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3926
		{
			yyLOCAL = &tree.ShowSnapShots{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 565:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3934
		{
			yyLOCAL = &tree.ShowPitr{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3942
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 567:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3946
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 568:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3950
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{
				&tree.Role{UserName: yyDollar[5].cstrUnion().Compare()},
			}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 569:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3961
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3965
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 571:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3971
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 572:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3976
		{
		}
	case 574:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3980
		{
		}
	case 576:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3985
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 577:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3995
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4005
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4013
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4019
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 581:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4025
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 582:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4031
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 583:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4037
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 584:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4043
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 585:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4049
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4058
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4062
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4066
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4070
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 590:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4074
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4078
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4082
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4086
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 594:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4092
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 595:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4101
		{
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4103
		{
		}
	case 600:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4112
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 601:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4122
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 602:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4131
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4135
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4139
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4145
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4151
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4157
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4163
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4172
		{
			yyLOCAL = &tree.ShowTables{
				Open:     false,
				Full:     yyDollar[2].fullOptUnion(),
				DBName:   yyDollar[4].str,
				Like:     yyDollar[5].comparisionExprUnion(),
				Where:    yyDollar[6].whereUnion(),
				AtTsExpr: yyDollar[7].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4183
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4195
		{
			yyLOCAL = &tree.ShowDatabases{
				Like:     yyDollar[3].comparisionExprUnion(),
				Where:    yyDollar[4].whereUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4203
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4209
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4221
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4235
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4241
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4247
		{
			yyLOCAL = &tree.ShowAccountUpgrade{}
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4254
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4258
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4263
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4267
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4271
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4276
		{
			yyVAL.str = ""
		}
	case 624:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4280
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4286
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 630:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4301
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4305
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 632:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4311
		{
			yyLOCAL = &tree.ShowCreateTable{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 633:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4319
		{
			yyLOCAL = &tree.ShowCreateView{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 634:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4326
		{
			yyLOCAL = &tree.ShowCreateDatabase{IfNotExists: yyDollar[4].ifNotExistsUnion(), Name: yyDollar[5].str}
		}
		yyVAL.union = yyLOCAL
	case 635:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4330
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 636:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4336
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4342
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 638:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4347
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4355
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4361
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4366
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 642:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4372
		{
			yyLOCAL = tree.NewUnresolvedObjectName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 643:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4378
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 644:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4382
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 663:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4410
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 664:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4418
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 665:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4426
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4434
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 667:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4438
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:4444
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption *tree.AccountIdentified
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 669:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4457
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 670:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4465
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 671:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4474
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 672:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4480
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 673:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4488
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4496
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 675:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4504
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 676:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4510
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 677:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4518
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 678:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4524
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 679:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4532
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4538
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4548
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4553
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 685:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4560
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 686:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4576
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 687:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4589
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4600
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4604
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 690:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4610
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 691:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4616
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 692:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4625
		{
		}
	case 693:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4627
		{
		}
	case 694:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4630
		{
		}
	case 699:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4639
		{
		}
	case 701:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4643
		{
		}
	case 703:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4648
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 704:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4657
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4664
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 706:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4670
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4678
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4685
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 709:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4692
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4712
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4720
		{
			ins := yyDollar[5].insertUnion()
			ins.Table = yyDollar[3].tableExprUnion()
			ins.PartitionNames = yyDollar[4].identifierListUnion()
			ins.OnDuplicateUpdate = []*tree.UpdateExpr{nil}
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4730
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4734
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4740
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4747
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4753
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4761
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4768
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4775
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4794
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 721:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4798
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4802
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4807
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4811
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4815
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:4821
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4830
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4834
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4840
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 730:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4844
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4850
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4854
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4860
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4865
		{
		}
	case 736:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4869
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4876
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4880
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4887
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4892
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4896
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4902
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4906
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4912
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4916
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4921
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4925
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4938
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4949
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4960
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4982
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5005
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5013
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5022
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5026
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5039
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5043
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5048
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5052
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5059
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5064
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5071
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5077
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5081
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5085
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5089
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5093
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5097
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5102
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5106
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5112
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:5122
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 776:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5137
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5141
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5155
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5159
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5165
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5174
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5178
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5182
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5186
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5190
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5196
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5203
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5212
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5216
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:5222
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5230
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5234
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5239
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5243
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5249
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5253
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5257
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5262
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5266
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5272
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5278
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5282
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:5288
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5293
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5297
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5301
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5306
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5310
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5314
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5319
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5323
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5331
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5335
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5339
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5353
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5357
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5367
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5377
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5387
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5399
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5407
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5415
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5424
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5432
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5440
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5448
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5456
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5464
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5472
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5480
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5488
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5498
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5509
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5523
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5527
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5531
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 837:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5536
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5540
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5544
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5553
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5557
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5562
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5566
		{
			yyLOCAL = tree.GroupBy(yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5571
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5575
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5581
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5585
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5591
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5595
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5599
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5603
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion(), yyDollar[3].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 854:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5608
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix, nil)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5616
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5622
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5630
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5638
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].joinTableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5648
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5654
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 863:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5663
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 864:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5672
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 865:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5681
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 866:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5691
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 867:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5695
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 868:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5705
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 869:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5709
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 870:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5713
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 871:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5717
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 872:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5723
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5733
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 874:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5737
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 875:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5743
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 876:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5749
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 877:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5753
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 878:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5759
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5765
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 880:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5769
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 881:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5773
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 882:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5777
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS_L2
		}
	case 883:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5783
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5787
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 885:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5793
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 886:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5797
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5803
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 888:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5807
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5813
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 890:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5817
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 891:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5827
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 892:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5840
		{
			yyLOCAL = yyDollar[2].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:5846
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 894:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5852
		{
			name := tree.NewUnresolvedName(yyDollar[1].cstrUnion())
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:     tree.FuncName2ResolvableFunctionReference(name),
					FuncName: yyDollar[1].cstrUnion(),
					Exprs:    yyDollar[3].exprsUnion(),
					Type:     tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 895:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:5866
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 896:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5877
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5884
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 899:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5888
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 900:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:5894
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 901:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5904
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 902:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5908
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5912
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 904:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5917
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 905:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5921
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5925
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5929
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5934
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5938
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 910:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5942
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 911:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5946
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 912:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5950
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 913:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5955
		{
			yyVAL.str = ""
		}
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5959
		{
			yyVAL.str = yyDollar[1].str
		}
	case 915:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5963
		{
			yyVAL.str = yyDollar[2].str
		}
	case 916:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5969
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 917:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5973
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].str)
		}
	case 918:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5978
		{
			yyLOCAL = tree.NewCStr("", 1)
		}
		yyVAL.union = yyLOCAL
	case 919:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5982
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 920:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5986
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 921:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5990
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 922:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5994
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 923:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6000
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 946:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6042
		{
			var Language = yyDollar[3].str
			var Name = tree.Identifier(yyDollar[5].str)
			var Filename = tree.Identifier(yyDollar[7].str)
			yyLOCAL = tree.NewCreateExtension(
				Language,
				Name,
				Filename,
			)
		}
		yyVAL.union = yyLOCAL
	case 947:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6055
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 948:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6061
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 949:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6067
		{
			var Name = yyDollar[3].procNameUnion()
			var Args = yyDollar[5].procArgsUnion()
			var Body = yyDollar[7].str
			yyLOCAL = tree.NewCreateProcedure(
				Name,
				Args,
				Body,
			)
		}
		yyVAL.union = yyLOCAL
	case 950:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6080
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 951:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6085
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 952:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6092
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 954:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6099
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 955:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6103
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 956:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:6109
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 957:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:6115
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 958:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6120
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 959:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6124
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 960:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6128
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 961:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6132
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 962:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6139
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				goto ret1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				goto ret1
			}

			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[4].functionNameUnion()
			var Args = yyDollar[6].funcArgsUnion()
			var ReturnType = yyDollar[9].funcReturnUnion()
			var Language = yyDollar[11].str
			var Import = yyDollar[12].boolValUnion()
			var Body = yyDollar[13].str
			var Handler = yyDollar[14].str

			yyLOCAL = tree.NewCreateFunction(
				Replace,
				Name,
				Args,
				ReturnType,
				Language,
				Import,
				Body,
				Handler,
			)
		}
		yyVAL.union = yyLOCAL
	case 963:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6172
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6177
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 965:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6184
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6191
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 968:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6195
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:6201
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6207
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 971:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6211
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 972:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6215
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6221
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:6227
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 975:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6233
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6237
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 977:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6243
		{
			yyVAL.str = ""
		}
	case 979:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6250
		{
			yyVAL.str = yyDollar[2].str
		}
	case 980:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6256
		{
			var Replace bool
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6271
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 982:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6288
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = yyDollar[4].exprUnion()
			var AuthOption = yyDollar[5].accountAuthOptionUnion()
			var StatusOption = yyDollar[6].accountStatusUnion()
			var Comment = yyDollar[7].accountCommentUnion()
			yyLOCAL = tree.NewCreateAccount(
				IfNotExists,
				Name,
				AuthOption,
				StatusOption,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6305
		{
			yyVAL.str = yyDollar[1].str
		}
	case 984:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6309
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 985:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6315
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 986:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6319
		{
			yyVAL.str = "DEFINER = "
		}
	case 987:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6323
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 988:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6328
		{
			yyVAL.str = ""
		}
	case 989:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:6332
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 995:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6346
		{
			yyVAL.str = ""
		}
	case 998:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6354
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6360
		{
			var Str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6365
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1001:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:6371
		{
			var Equal = yyDollar[2].str
			var AdminName = yyDollar[3].exprUnion()
			var IdentifiedType = yyDollar[4].accountIdentifiedUnion()
			yyLOCAL = *tree.NewAccountAuthOption(
				Equal,
				AdminName,
				IdentifiedType,
			)
		}
		yyVAL.union = yyLOCAL
	case 1002:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6384
		{
			var Str = yyDollar[1].str
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6389
		{
			var Str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6394
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1005:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6400
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6407
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1007:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6414
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByRandomPassword,
				nil,
			)
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6421
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6428
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6436
		{
			as := tree.NewAccountStatus()
			as.Exist = false
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6442
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusOpen
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6449
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusSuspend
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6456
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusRestricted
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6464
		{
			ac := tree.NewAccountComment()
			ac.Exist = false
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6470
		{
			ac := tree.NewAccountComment()
			ac.Exist = true
			ac.Comment = yyDollar[2].str
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6479
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Users = yyDollar[4].usersUnion()
			var Role = yyDollar[5].accountRoleUnion()
			var MiscOpt = yyDollar[6].userMiscOptionUnion()
			var CommentOrAttribute = yyDollar[7].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewCreateUser(
				IfNotExists,
				Users,
				Role,
				MiscOpt,
				CommentOrAttribute,
			)
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6496
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].cstrUnion().Compare())
			var Table = tree.Identifier("")
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				Table,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6513
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier("")
			var Table = tree.Identifier(yyDollar[6].cstrUnion().Compare())
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				Table,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6532
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Url = yyDollar[5].str
			var Credentials = yyDollar[6].stageCredentialsUnion()
			var Status = yyDollar[7].stageStatusUnion()
			var Comment = yyDollar[8].stageCommentUnion()
			yyLOCAL = tree.NewCreateStage(
				IfNotExists,
				Name,
				Url,
				Credentials,
				Status,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6550
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6556
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6563
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6571
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6577
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6585
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6591
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6599
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6605
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6614
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6618
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6623
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6627
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1033:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6634
		{
			yyVAL.str = yyDollar[3].str
		}
	case 1034:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6639
		{
			yyVAL.str = ""
		}
	case 1035:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6643
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1036:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6649
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6662
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var dbName = yyDollar[6].str
			var comment = yyDollar[7].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, dbName, comment)
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6672
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6676
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6682
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1041:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6688
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6694
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6701
		{
			yyVAL.str = ""
		}
	case 1044:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6705
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1045:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6711
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1046:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6719
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1047:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6727
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropSnapShot(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1048:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6735
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPitr(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1049:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6743
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1050:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6748
		{
			var Exist = false
			var IsComment bool
			var Str string
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)

		}
		yyVAL.union = yyLOCAL
	case 1051:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6760
		{
			var Exist = true
			var IsComment = true
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1052:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6771
		{
			var Exist = true
			var IsComment = false
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1053:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6880
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1054:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6884
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1055:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6890
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1056:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6903
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6907
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6913
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6926
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6930
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6934
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6939
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6943
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6949
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6956
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6962
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6971
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1069:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6978
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewCreateRole(
				IfNotExists,
				Roles,
			)
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:6989
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:6993
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:6999
		{
			var UserName = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7008
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7012
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7016
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7021
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7025
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7029
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7033
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7039
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = tree.NewIndexOption()
				io.IType = yyDollar[5].indexTypeUnion()
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = tree.NewIndexOption()
				io.IType = tree.INDEX_TYPE_INVALID
			}
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Table = yyDollar[7].tableNameUnion()
			var ifNotExists = false
			var IndexCat = yyDollar[2].indexCategoryUnion()
			var KeyParts = yyDollar[9].keyPartsUnion()
			var IndexOption = io
			var MiscOption []tree.MiscOption
			yyLOCAL = tree.NewCreateIndex(
				Name,
				Table,
				ifNotExists,
				IndexCat,
				KeyParts,
				IndexOption,
				MiscOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7070
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7074
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7100
		{
			io := tree.NewIndexOption()
			io.KeyBlockSize = uint64(yyDollar[3].item.(int64))
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7106
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}

			io := tree.NewIndexOption()
			io.AlgoParamList = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7118
		{
			io := tree.NewIndexOption()
			io.AlgoParamVectorOpType = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7124
		{
			io := tree.NewIndexOption()
			io.Comment = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7130
		{
			io := tree.NewIndexOption()
			io.ParserName = yyDollar[3].cstrUnion().Compare()
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7136
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_VISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7142
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_INVISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7150
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7154
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7160
		{
			// Order is parsed but just ignored as MySQL dtree.
			var ColName = yyDollar[1].unresolvedNameUnion()
			var Length = int(yyDollar[2].lengthOptUnion())
			var Direction = yyDollar[3].directionUnion()
			var Expr tree.Expr
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7174
		{
			var ColName *tree.UnresolvedName
			var Length int
			var Expr = yyDollar[2].exprUnion()
			var Direction = yyDollar[4].directionUnion()
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7188
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7192
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7196
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1097:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7200
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1098:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7204
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7208
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7212
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1101:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7218
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].str)
			var SubscriptionOption = yyDollar[5].subscriptionOptionUnion()
			var CreateOptions = yyDollar[6].createOptionsUnion()
			yyLOCAL = tree.NewCreateDatabase(
				IfNotExists,
				Name,
				SubscriptionOption,
				CreateOptions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1102:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7233
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1103:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7237
		{
			var From = tree.Identifier(yyDollar[2].str)
			var Publication = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewSubscriptionOption(From, Publication)
		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7248
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7252
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7257
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7261
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7267
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7271
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7277
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Charset = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCharset(
				IsDefault,
				Charset,
			)
		}
		yyVAL.union = yyLOCAL
	case 1113:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7286
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Collate = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCollate(
				IsDefault,
				Collate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1114:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7295
		{
			var Encrypt = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionEncryption(Encrypt)
		}
		yyVAL.union = yyLOCAL
	case 1115:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7301
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1116:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7305
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7311
		{
			var TableName = yyDollar[4].tableNameUnion()
			var Options = yyDollar[7].connectorOptionsUnion()
			yyLOCAL = tree.NewCreateConnector(
				TableName,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7322
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7328
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7346
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1121:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7364
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7382
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			var SourceName = yyDollar[5].tableNameUnion()
			var Defs = yyDollar[7].tableDefsUnion()
			var Options = yyDollar[9].tableOptionsUnion()
			yyLOCAL = tree.NewCreateSource(
				Replace,
				IfNotExists,
				SourceName,
				Defs,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7398
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7402
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7411
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1126:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7423
		{
			t := tree.NewCreateTable()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Param = yyDollar[9].loadParamUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7432
		{
			t := tree.NewCreateTable()
			t.IsClusterTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7444
		{
			t := tree.NewCreateTable()
			t.IsDynamicTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			t.DTOptions = yyDollar[8].tableOptionsUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7454
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[6].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7464
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[9].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7475
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1132:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7485
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[10].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1133:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7496
		{
			t := tree.NewCreateTable()
			t.IsAsLike = true
			t.Table = *yyDollar[5].tableNameUnion()
			t.LikeTableName = *yyDollar[7].tableNameUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7504
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.SubscriptionOption = yyDollar[6].subscriptionOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7515
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7522
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7532
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7545
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1139:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7553
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1140:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7562
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7571
		{
			yyVAL.str = ""
		}
	case 1142:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:7575
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1143:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7581
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7585
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7590
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7594
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:7601
		{
			yyLOCAL = &tree.TailParameter{
				Charset:      yyDollar[1].str,
				Fields:       yyDollar[2].fieldsUnion(),
				Lines:        yyDollar[3].linesUnion(),
				IgnoredLines: uint64(yyDollar[4].int64ValUnion()),
				ColumnList:   yyDollar[5].loadColumnsUnion(),
				Assignments:  yyDollar[6].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7613
		{
			yyVAL.str = ""
		}
	case 1149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7617
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1150:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7623
		{
			var Name = yyDollar[4].tableNameUnion()
			var Type = yyDollar[5].columnTypeUnion()
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var IncrementBy = yyDollar[6].incrementByOptionUnion()
			var MinValue = yyDollar[7].minValueOptionUnion()
			var MaxValue = yyDollar[8].maxValueOptionUnion()
			var StartWith = yyDollar[9].startWithOptionUnion()
			var Cycle = yyDollar[10].boolValUnion()
			yyLOCAL = tree.NewCreateSequence(
				Name,
				Type,
				IfNotExists,
				IncrementBy,
				MinValue,
				MaxValue,
				StartWith,
				Cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7644
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7658
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7662
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7666
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1155:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7672
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1156:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7676
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7683
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7690
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1159:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7697
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7704
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7708
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1162:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7712
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7716
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7720
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1165:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7727
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7734
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7738
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7745
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7752
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7756
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7762
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7768
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7772
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7779
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1175:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7786
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7793
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7800
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7804
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7809
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7813
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1181:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7817
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7822
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7826
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()
			yyLOCAL = tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1184:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7839
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7843
		{
			var ColumnList = []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)

		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7851
		{
			var ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7859
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7863
		{
			var IsSubPartition = true
			var PType = yyDollar[3].partitionByUnion()
			var Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = tree.NewPartitionBy2(
				IsSubPartition,
				PType,
				Num,
			)
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7875
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7879
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7885
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7889
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7895
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options []tree.TableOption
			var Subs = yyDollar[4].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1194:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7908
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options = yyDollar[4].tableOptionsUnion()
			var Subs = yyDollar[5].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7922
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7926
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7932
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1198:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7936
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:7942
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options []tree.TableOption
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1200:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:7951
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options = yyDollar[3].tableOptionsUnion()
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1201:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7962
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7966
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7971
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1204:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7975
		{
			expr := tree.NewMaxValue()
			var valueList = tree.Exprs{expr}
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1205:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7981
		{
			var valueList = yyDollar[5].exprsUnion()
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7986
		{
			var valueList = yyDollar[4].exprsUnion()
			yyLOCAL = tree.NewValuesIn(
				valueList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1207:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7994
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7998
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8008
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1210:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8012
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1211:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8023
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1212:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8031
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1213:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8039
		{
			listTyp := tree.NewListType()
			listTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1214:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8047
		{
			listTyp := tree.NewListType()
			listTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8058
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8067
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			keyTyp.ColumnList = yyDollar[5].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8077
		{
			Linear := yyDollar[1].boolValUnion()
			Expr := yyDollar[4].exprUnion()
			hashTyp := tree.NewHashType(Linear, Expr)
			yyLOCAL = tree.NewPartitionBy(
				hashTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8087
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1220:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8091
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1221:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8096
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1222:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8100
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1223:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8106
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1224:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8110
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1225:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8116
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8125
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1227:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8135
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1228:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8139
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1229:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8145
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1230:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8149
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1231:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8155
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1232:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8164
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1233:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8174
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1234:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8178
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1235:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8184
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1236:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8188
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1237:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8192
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1238:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8198
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1239:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8202
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1240:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8206
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1241:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8210
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1242:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8214
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1243:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8218
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1244:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8222
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1245:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8227
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1246:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8231
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1247:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8235
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1248:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8239
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1249:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8243
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1250:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8247
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1251:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8251
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1252:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8255
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1253:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8259
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1254:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8263
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1255:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8267
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1256:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8271
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1257:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8275
		{
			t := tree.NewTableOptionPackKeys()
			t.Value = yyDollar[3].item.(int64)
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1258:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8281
		{
			t := tree.NewTableOptionPackKeys()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1259:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8287
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1260:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8291
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1261:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8295
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1262:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8299
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1263:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8303
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1264:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8309
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1265:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8315
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1266:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8321
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1267:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8327
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1268:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8333
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1269:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8339
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1270:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8343
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8347
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8351
		{
			var Preperties = yyDollar[3].propertiesUnion()
			yyLOCAL = tree.NewTableOptionProperties(Preperties)
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8358
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8362
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1275:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:8368
		{
			var Key = yyDollar[1].str
			var Value = yyDollar[3].str
			yyLOCAL = *tree.NewProperty(
				Key,
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8379
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8383
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1278:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8389
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1279:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8393
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1280:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8397
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1281:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8401
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1282:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8405
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1283:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8409
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1288:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8423
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1289:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8427
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1290:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8436
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[2].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1291:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8442
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[4].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1292:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8450
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1293:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8454
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPTIME,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1294:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8461
		{
			var Str = yyDollar[4].cstrUnion().Compare()
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yylex.(*Lexer).GetDbOrTblName(yyDollar[4].cstrUnion().Origin()),
				Expr:         tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1295:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8470
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yyDollar[4].str,
				Expr:         tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1296:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8478
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATMOTIMESTAMP,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1297:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8486
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1299:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8493
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1300:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8497
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1301:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8503
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1302:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8507
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1303:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8511
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1304:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8517
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1305:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8521
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1306:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8527
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1307:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8540
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1308:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8553
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid the type of index")
					goto ret1
				}
			}

			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1309:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8592
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid type of index")
					goto ret1
				}
			}
			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1310:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8632
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1311:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8646
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1312:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8652
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1313:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8665
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1314:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8678
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1315:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8691
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1316:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8704
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var KeyParts = yyDollar[6].keyPartsUnion()
			var Name = yyDollar[4].str
			var Refer = yyDollar[8].attributeReferenceUnion()
			var Empty = true
			yyLOCAL = tree.NewForeignKey(
				IfNotExists,
				KeyParts,
				Name,
				Refer,
				Empty,
			)
		}
		yyVAL.union = yyLOCAL
	case 1317:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8719
		{
			var Expr = yyDollar[3].exprUnion()
			var Enforced = yyDollar[5].boolValUnion()
			yyLOCAL = tree.NewCheckIndex(
				Expr,
				Enforced,
			)
		}
		yyVAL.union = yyLOCAL
	case 1318:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8729
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1320:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8735
		{
			yyVAL.str = ""
		}
	case 1321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8739
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1324:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8749
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1325:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8755
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1326:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8761
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1337:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8782
		{
			yyVAL.str = ""
		}
	case 1338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8786
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1339:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:8792
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1340:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8798
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1341:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8802
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1342:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8807
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1343:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8815
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1344:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8819
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1345:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8823
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1346:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8827
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1347:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8833
		{
			yyLOCAL = yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
		}
		yyVAL.union = yyLOCAL
	case 1348:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8839
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1349:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8843
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1350:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8848
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1351:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8855
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1352:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8859
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1353:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8865
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1354:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8869
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1355:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8875
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1356:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8879
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1357:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8883
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1358:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8887
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1359:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8891
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1360:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8895
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1361:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8900
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1362:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8904
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1363:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8908
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1364:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8912
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1365:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8916
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1366:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8920
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1367:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8924
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1368:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8928
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1369:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8932
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1370:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8936
		{
			name := tree.NewUnresolvedColName(yyDollar[3].str)
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[3].str, 1),
				Exprs:    es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1371:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8950
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1372:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8954
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1373:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8958
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1374:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8962
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1375:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8966
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1376:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8970
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1377:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8976
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1378:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8980
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1379:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8985
		{
			yyVAL.str = ""
		}
	case 1380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8989
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8995
		{
			yyVAL.str = ""
		}
	case 1382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8999
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1383:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:9005
		{
			var TableName = yyDollar[2].tableNameUnion()
			var KeyParts = yyDollar[3].keyPartsUnion()
			var Match = yyDollar[4].matchTypeUnion()
			var OnDelete = yyDollar[5].referenceOnRecordUnion().OnDelete
			var OnUpdate = yyDollar[5].referenceOnRecordUnion().OnUpdate
			yyLOCAL = tree.NewAttributeReference(
				TableName,
				KeyParts,
				Match,
				OnDelete,
				OnUpdate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1384:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9022
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1385:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9029
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1386:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9036
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1387:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9043
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1388:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9050
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1389:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9059
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1390:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9065
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1391:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9071
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1392:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9075
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1393:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9079
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1394:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9083
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1395:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9087
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1396:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9092
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1398:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9099
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1399:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9103
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1400:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9107
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1401:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9112
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1402:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9116
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1403:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9121
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1404:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9125
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1411:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:9141
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1412:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9147
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1413:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9151
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1414:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9155
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1415:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9159
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1416:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9163
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1417:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9167
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1418:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9171
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1419:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9175
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1420:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9179
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1421:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9183
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1422:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9187
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1423:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9191
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1424:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9195
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1425:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9201
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1426:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9205
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1427:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9209
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1428:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9213
		{
			yyLOCAL = tree.NewParentExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1429:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9217
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1430:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9221
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1431:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9225
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1432:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9229
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1433:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9233
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1434:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9237
		{
			hint := strings.ToLower(yyDollar[2].cstrUnion().Compare())
			switch hint {
			case "d":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "DATETIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "t":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimeFamily,
						FamilyString: "TIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "ts":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "TIMESTAMP",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			default:
				yylex.Error("Invalid type")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1435:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9279
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1436:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9283
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1437:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9287
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1438:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9292
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1439:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9300
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1440:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9304
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1441:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9308
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1442:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9312
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1443:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9316
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1444:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9326
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1445:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9330
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1446:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9334
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1447:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9338
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1448:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9342
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1449:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9346
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1450:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9350
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1451:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9356
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1452:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9365
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1453:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9374
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1454:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9385
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1455:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9395
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1456:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9405
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1457:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9414
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1458:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9424
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1459:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9434
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1460:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9444
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1461:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9453
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1462:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9463
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1463:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9467
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1464:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9472
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1465:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9476
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1466:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9482
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1467:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9486
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1468:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:9492
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9501
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1470:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9513
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1471:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9530
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1473:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9547
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1474:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9560
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1475:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9573
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1476:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9585
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1477:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9599
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1478:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9614
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1479:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9629
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1480:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9646
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1481:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9661
		{
		}
	case 1485:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9668
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1486:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9672
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1487:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9676
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1488:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9682
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1489:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9686
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1490:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9690
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1491:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9694
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1492:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9700
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1493:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9704
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1494:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9708
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1495:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9714
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1496:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9722
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1497:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9732
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1498:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9736
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1499:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9743
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1500:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9748
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1501:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9752
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1502:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9757
		{
			yyVAL.str = ","
		}
	case 1503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9761
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1504:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9766
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9770
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1506:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9775
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1508:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9782
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1509:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9808
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1510:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9820
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1511:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9832
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1512:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9843
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1513:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9854
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1514:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9865
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1515:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9875
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1516:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9885
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1517:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9896
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1518:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9907
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1519:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9918
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1520:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9929
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1521:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9940
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1522:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9951
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1523:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9962
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1524:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9973
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1525:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9984
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1526:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9995
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1527:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10006
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1528:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10017
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1529:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10028
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1530:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10039
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1534:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10057
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1535:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10066
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1536:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10075
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1537:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10084
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1538:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10093
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1539:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10104
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1540:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10113
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[4].exprUnion()},
				Type:     yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1541:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10123
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1542:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10132
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1543:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10141
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1544:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10150
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1545:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10159
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumValWithType(constant.MakeInt64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1546:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10171
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumValWithType(constant.MakeInt64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1547:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10182
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumValWithType(constant.MakeInt64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1548:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10195
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumValWithType(constant.MakeInt64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1549:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10207
		{
			column := tree.NewUnresolvedColName(yyDollar[3].str)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10230
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1585:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10266
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1586:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10279
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1587:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10292
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1588:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10304
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1589:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10313
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1590:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10321
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1591:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10329
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1592:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10342
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1593:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10351
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1594:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10362
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1595:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10373
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1596:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10382
		{
			cn := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1597:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10394
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1598:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10404
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1599:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10414
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1600:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10423
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1601:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10434
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1602:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10443
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1603:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10453
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1604:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10462
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1605:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10471
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1606:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10481
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1607:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10485
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1608:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10491
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1609:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10495
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(ival), str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1616:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10514
		{
		}
	case 1617:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10516
		{
		}
	case 1651:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10557
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1652:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10569
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1653:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10573
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1654:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10577
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1655:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:10583
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1656:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10588
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1657:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10592
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1658:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10598
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1659:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10602
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1660:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10608
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1661:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10612
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1662:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10619
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1663:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10623
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1664:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10627
		{
			name := tree.NewUnresolvedColName("concat")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr("concat", 1),
				Exprs:    tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1665:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10636
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1666:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10640
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1667:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10644
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1668:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10649
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1669:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10653
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1670:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10659
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1671:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10663
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1672:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10667
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1673:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10671
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1674:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10675
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1675:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10679
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1676:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10683
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1677:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10687
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1678:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10691
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1679:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10695
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1681:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10703
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1682:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10707
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1683:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10711
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1684:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10715
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1685:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10719
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1686:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10723
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1687:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10727
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1688:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10731
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1689:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10735
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1690:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10739
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1692:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10745
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1693:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10749
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1694:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10755
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1695:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10759
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1696:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10766
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1697:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10770
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1698:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10774
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1699:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10780
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1700:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10784
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1701:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10788
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1702:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10792
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1703:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10796
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1704:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10800
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1705:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10804
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1706:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10810
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1707:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10814
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1708:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10818
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1709:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10822
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1710:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10828
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1711:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10841
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1712:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10846
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1713:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10852
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1714:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10856
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1715:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10869
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1716:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10874
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1717:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10878
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1718:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10882
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1719:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10886
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1720:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10890
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1721:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10897
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1722:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10901
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1723:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10905
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1724:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10909
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1725:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10916
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1729:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10927
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1730:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10932
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1731:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10938
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1732:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10950
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1733:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10962
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1734:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10974
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1735:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10987
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1736:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11000
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1737:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11013
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1738:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11026
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1739:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11039
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1740:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11052
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1741:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11065
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1742:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11078
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1743:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11091
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1744:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11104
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1745:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11119
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1746:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11146
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1747:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11188
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1748:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11224
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1749:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11260
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1750:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11277
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1751:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11289
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1752:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11309
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1753:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11329
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1754:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11349
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1755:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11365
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1756:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11378
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1757:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11391
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1758:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11404
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1759:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11417
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1760:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11429
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1761:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11441
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1762:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11453
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1763:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11465
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1764:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11477
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1765:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11489
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1766:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11501
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1767:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11513
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1768:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11525
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1769:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11538
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1770:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11551
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1771:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11564
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1772:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11577
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1773:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11592
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1774:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11600
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1775:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11609
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1776:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11619
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1777:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11642
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1778:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11647
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1779:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11653
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1781:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11660
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1782:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11664
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1783:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11669
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1784:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11673
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1785:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11679
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1786:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11685
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1787:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11692
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1788:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11699
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1789:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11708
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1790:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11715
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1791:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11722
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1792:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11731
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1793:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11735
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1794:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11739
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1795:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11745
		{
		}
	case 1796:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11747
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1800:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11757
		{
			yyVAL.str = ""
		}
	case 1801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:11761
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
