// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"go/constant"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const CONNECT = 57367
const MANAGE = 57368
const GRANTS = 57369
const OWNERSHIP = 57370
const REFERENCE = 57371
const LOWER_THAN_SET = 57372
const SET = 57373
const ALL = 57374
const DISTINCT = 57375
const DISTINCTROW = 57376
const AS = 57377
const EXISTS = 57378
const ASC = 57379
const DESC = 57380
const INTO = 57381
const DUPLICATE = 57382
const DEFAULT = 57383
const LOCK = 57384
const KEYS = 57385
const NULLS = 57386
const FIRST = 57387
const LAST = 57388
const AFTER = 57389
const INSTANT = 57390
const INPLACE = 57391
const COPY = 57392
const DISABLE = 57393
const ENABLE = 57394
const UNDEFINED = 57395
const MERGE = 57396
const TEMPTABLE = 57397
const DEFINER = 57398
const INVOKER = 57399
const SQL = 57400
const SECURITY = 57401
const CASCADED = 57402
const VALUES = 57403
const NEXT = 57404
const VALUE = 57405
const SHARE = 57406
const MODE = 57407
const SQL_NO_CACHE = 57408
const SQL_CACHE = 57409
const JOIN = 57410
const STRAIGHT_JOIN = 57411
const LEFT = 57412
const RIGHT = 57413
const INNER = 57414
const OUTER = 57415
const CROSS = 57416
const NATURAL = 57417
const USE = 57418
const FORCE = 57419
const LOWER_THAN_ON = 57420
const ON = 57421
const USING = 57422
const SUBQUERY_AS_EXPR = 57423
const LOWER_THAN_STRING = 57424
const ID = 57425
const AT_ID = 57426
const AT_AT_ID = 57427
const STRING = 57428
const VALUE_ARG = 57429
const LIST_ARG = 57430
const COMMENT = 57431
const COMMENT_KEYWORD = 57432
const QUOTE_ID = 57433
const STAGE = 57434
const CREDENTIALS = 57435
const STAGES = 57436
const SNAPSHOTS = 57437
const INTEGRAL = 57438
const HEX = 57439
const FLOAT = 57440
const HEXNUM = 57441
const BIT_LITERAL = 57442
const NULL = 57443
const TRUE = 57444
const FALSE = 57445
const LOWER_THAN_CHARSET = 57446
const CHARSET = 57447
const UNIQUE = 57448
const KEY = 57449
const OR = 57450
const PIPE_CONCAT = 57451
const XOR = 57452
const AND = 57453
const NOT = 57454
const BETWEEN = 57455
const CASE = 57456
const WHEN = 57457
const THEN = 57458
const ELSE = 57459
const END = 57460
const ELSEIF = 57461
const LOWER_THAN_EQ = 57462
const LE = 57463
const GE = 57464
const NE = 57465
const NULL_SAFE_EQUAL = 57466
const IS = 57467
const LIKE = 57468
const REGEXP = 57469
const IN = 57470
const ASSIGNMENT = 57471
const ILIKE = 57472
const SHIFT_LEFT = 57473
const SHIFT_RIGHT = 57474
const DIV = 57475
const MOD = 57476
const UNARY = 57477
const COLLATE = 57478
const BINARY = 57479
const UNDERSCORE_BINARY = 57480
const INTERVAL = 57481
const OUT = 57482
const INOUT = 57483
const BEGIN = 57484
const START = 57485
const TRANSACTION = 57486
const COMMIT = 57487
const ROLLBACK = 57488
const WORK = 57489
const CONSISTENT = 57490
const SNAPSHOT = 57491
const CHAIN = 57492
const NO = 57493
const RELEASE = 57494
const PRIORITY = 57495
const QUICK = 57496
const BIT = 57497
const TINYINT = 57498
const SMALLINT = 57499
const MEDIUMINT = 57500
const INT = 57501
const INTEGER = 57502
const BIGINT = 57503
const INTNUM = 57504
const REAL = 57505
const DOUBLE = 57506
const FLOAT_TYPE = 57507
const DECIMAL = 57508
const NUMERIC = 57509
const DECIMAL_VALUE = 57510
const TIME = 57511
const TIMESTAMP = 57512
const DATETIME = 57513
const YEAR = 57514
const CHAR = 57515
const VARCHAR = 57516
const BOOL = 57517
const CHARACTER = 57518
const VARBINARY = 57519
const NCHAR = 57520
const TEXT = 57521
const TINYTEXT = 57522
const MEDIUMTEXT = 57523
const LONGTEXT = 57524
const BLOB = 57525
const TINYBLOB = 57526
const MEDIUMBLOB = 57527
const LONGBLOB = 57528
const JSON = 57529
const ENUM = 57530
const UUID = 57531
const VECF32 = 57532
const VECF64 = 57533
const GEOMETRY = 57534
const POINT = 57535
const LINESTRING = 57536
const POLYGON = 57537
const GEOMETRYCOLLECTION = 57538
const MULTIPOINT = 57539
const MULTILINESTRING = 57540
const MULTIPOLYGON = 57541
const INT1 = 57542
const INT2 = 57543
const INT3 = 57544
const INT4 = 57545
const INT8 = 57546
const S3OPTION = 57547
const STAGEOPTION = 57548
const SQL_SMALL_RESULT = 57549
const SQL_BIG_RESULT = 57550
const SQL_BUFFER_RESULT = 57551
const LOW_PRIORITY = 57552
const HIGH_PRIORITY = 57553
const DELAYED = 57554
const CREATE = 57555
const ALTER = 57556
const DROP = 57557
const RENAME = 57558
const ANALYZE = 57559
const ADD = 57560
const RETURNS = 57561
const SCHEMA = 57562
const TABLE = 57563
const SEQUENCE = 57564
const INDEX = 57565
const VIEW = 57566
const TO = 57567
const IGNORE = 57568
const IF = 57569
const PRIMARY = 57570
const COLUMN = 57571
const CONSTRAINT = 57572
const SPATIAL = 57573
const FULLTEXT = 57574
const FOREIGN = 57575
const KEY_BLOCK_SIZE = 57576
const SHOW = 57577
const DESCRIBE = 57578
const EXPLAIN = 57579
const DATE = 57580
const ESCAPE = 57581
const REPAIR = 57582
const OPTIMIZE = 57583
const TRUNCATE = 57584
const MAXVALUE = 57585
const PARTITION = 57586
const REORGANIZE = 57587
const LESS = 57588
const THAN = 57589
const PROCEDURE = 57590
const TRIGGER = 57591
const STATUS = 57592
const VARIABLES = 57593
const ROLE = 57594
const PROXY = 57595
const AVG_ROW_LENGTH = 57596
const STORAGE = 57597
const DISK = 57598
const MEMORY = 57599
const CHECKSUM = 57600
const COMPRESSION = 57601
const DATA = 57602
const DIRECTORY = 57603
const DELAY_KEY_WRITE = 57604
const ENCRYPTION = 57605
const ENGINE = 57606
const MAX_ROWS = 57607
const MIN_ROWS = 57608
const PACK_KEYS = 57609
const ROW_FORMAT = 57610
const STATS_AUTO_RECALC = 57611
const STATS_PERSISTENT = 57612
const STATS_SAMPLE_PAGES = 57613
const DYNAMIC = 57614
const COMPRESSED = 57615
const REDUNDANT = 57616
const COMPACT = 57617
const FIXED = 57618
const COLUMN_FORMAT = 57619
const AUTO_RANDOM = 57620
const ENGINE_ATTRIBUTE = 57621
const SECONDARY_ENGINE_ATTRIBUTE = 57622
const INSERT_METHOD = 57623
const RESTRICT = 57624
const CASCADE = 57625
const ACTION = 57626
const PARTIAL = 57627
const SIMPLE = 57628
const CHECK = 57629
const ENFORCED = 57630
const RANGE = 57631
const LIST = 57632
const ALGORITHM = 57633
const LINEAR = 57634
const PARTITIONS = 57635
const SUBPARTITION = 57636
const SUBPARTITIONS = 57637
const CLUSTER = 57638
const TYPE = 57639
const ANY = 57640
const SOME = 57641
const EXTERNAL = 57642
const LOCALFILE = 57643
const URL = 57644
const PREPARE = 57645
const DEALLOCATE = 57646
const RESET = 57647
const EXTENSION = 57648
const INCREMENT = 57649
const CYCLE = 57650
const MINVALUE = 57651
const PUBLICATION = 57652
const SUBSCRIPTIONS = 57653
const PUBLICATIONS = 57654
const PROPERTIES = 57655
const PARSER = 57656
const VISIBLE = 57657
const INVISIBLE = 57658
const BTREE = 57659
const HASH = 57660
const RTREE = 57661
const BSI = 57662
const IVFFLAT = 57663
const MASTER = 57664
const ZONEMAP = 57665
const LEADING = 57666
const BOTH = 57667
const TRAILING = 57668
const UNKNOWN = 57669
const LISTS = 57670
const OP_TYPE = 57671
const REINDEX = 57672
const EXPIRE = 57673
const ACCOUNT = 57674
const ACCOUNTS = 57675
const UNLOCK = 57676
const DAY = 57677
const NEVER = 57678
const PUMP = 57679
const MYSQL_COMPATIBILITY_MODE = 57680
const MODIFY = 57681
const CHANGE = 57682
const SECOND = 57683
const ASCII = 57684
const COALESCE = 57685
const COLLATION = 57686
const HOUR = 57687
const MICROSECOND = 57688
const MINUTE = 57689
const MONTH = 57690
const QUARTER = 57691
const REPEAT = 57692
const REVERSE = 57693
const ROW_COUNT = 57694
const WEEK = 57695
const REVOKE = 57696
const FUNCTION = 57697
const PRIVILEGES = 57698
const TABLESPACE = 57699
const EXECUTE = 57700
const SUPER = 57701
const GRANT = 57702
const OPTION = 57703
const REFERENCES = 57704
const REPLICATION = 57705
const SLAVE = 57706
const CLIENT = 57707
const USAGE = 57708
const RELOAD = 57709
const FILE = 57710
const TEMPORARY = 57711
const ROUTINE = 57712
const EVENT = 57713
const SHUTDOWN = 57714
const NULLX = 57715
const AUTO_INCREMENT = 57716
const APPROXNUM = 57717
const SIGNED = 57718
const UNSIGNED = 57719
const ZEROFILL = 57720
const ENGINES = 57721
const LOW_CARDINALITY = 57722
const AUTOEXTEND_SIZE = 57723
const ADMIN_NAME = 57724
const RANDOM = 57725
const SUSPEND = 57726
const ATTRIBUTE = 57727
const HISTORY = 57728
const REUSE = 57729
const CURRENT = 57730
const OPTIONAL = 57731
const FAILED_LOGIN_ATTEMPTS = 57732
const PASSWORD_LOCK_TIME = 57733
const UNBOUNDED = 57734
const SECONDARY = 57735
const RESTRICTED = 57736
const USER = 57737
const IDENTIFIED = 57738
const CIPHER = 57739
const ISSUER = 57740
const X509 = 57741
const SUBJECT = 57742
const SAN = 57743
const REQUIRE = 57744
const SSL = 57745
const NONE = 57746
const PASSWORD = 57747
const SHARED = 57748
const EXCLUSIVE = 57749
const MAX_QUERIES_PER_HOUR = 57750
const MAX_UPDATES_PER_HOUR = 57751
const MAX_CONNECTIONS_PER_HOUR = 57752
const MAX_USER_CONNECTIONS = 57753
const FORMAT = 57754
const VERBOSE = 57755
const CONNECTION = 57756
const TRIGGERS = 57757
const PROFILES = 57758
const LOAD = 57759
const INLINE = 57760
const INFILE = 57761
const TERMINATED = 57762
const OPTIONALLY = 57763
const ENCLOSED = 57764
const ESCAPED = 57765
const STARTING = 57766
const LINES = 57767
const ROWS = 57768
const IMPORT = 57769
const DISCARD = 57770
const JSONTYPE = 57771
const MODUMP = 57772
const OVER = 57773
const PRECEDING = 57774
const FOLLOWING = 57775
const GROUPS = 57776
const DATABASES = 57777
const TABLES = 57778
const SEQUENCES = 57779
const EXTENDED = 57780
const FULL = 57781
const PROCESSLIST = 57782
const FIELDS = 57783
const COLUMNS = 57784
const OPEN = 57785
const ERRORS = 57786
const WARNINGS = 57787
const INDEXES = 57788
const SCHEMAS = 57789
const NODE = 57790
const LOCKS = 57791
const ROLES = 57792
const TABLE_NUMBER = 57793
const COLUMN_NUMBER = 57794
const TABLE_VALUES = 57795
const TABLE_SIZE = 57796
const NAMES = 57797
const GLOBAL = 57798
const PERSIST = 57799
const SESSION = 57800
const ISOLATION = 57801
const LEVEL = 57802
const READ = 57803
const WRITE = 57804
const ONLY = 57805
const REPEATABLE = 57806
const COMMITTED = 57807
const UNCOMMITTED = 57808
const SERIALIZABLE = 57809
const LOCAL = 57810
const EVENTS = 57811
const PLUGINS = 57812
const CURRENT_TIMESTAMP = 57813
const DATABASE = 57814
const CURRENT_TIME = 57815
const LOCALTIME = 57816
const LOCALTIMESTAMP = 57817
const UTC_DATE = 57818
const UTC_TIME = 57819
const UTC_TIMESTAMP = 57820
const REPLACE = 57821
const CONVERT = 57822
const SEPARATOR = 57823
const TIMESTAMPDIFF = 57824
const CURRENT_DATE = 57825
const CURRENT_USER = 57826
const CURRENT_ROLE = 57827
const SECOND_MICROSECOND = 57828
const MINUTE_MICROSECOND = 57829
const MINUTE_SECOND = 57830
const HOUR_MICROSECOND = 57831
const HOUR_SECOND = 57832
const HOUR_MINUTE = 57833
const DAY_MICROSECOND = 57834
const DAY_SECOND = 57835
const DAY_MINUTE = 57836
const DAY_HOUR = 57837
const YEAR_MONTH = 57838
const SQL_TSI_HOUR = 57839
const SQL_TSI_DAY = 57840
const SQL_TSI_WEEK = 57841
const SQL_TSI_MONTH = 57842
const SQL_TSI_QUARTER = 57843
const SQL_TSI_YEAR = 57844
const SQL_TSI_SECOND = 57845
const SQL_TSI_MINUTE = 57846
const RECURSIVE = 57847
const CONFIG = 57848
const DRAINER = 57849
const SOURCE = 57850
const STREAM = 57851
const HEADERS = 57852
const CONNECTOR = 57853
const CONNECTORS = 57854
const DAEMON = 57855
const PAUSE = 57856
const CANCEL = 57857
const TASK = 57858
const RESUME = 57859
const MATCH = 57860
const AGAINST = 57861
const BOOLEAN = 57862
const LANGUAGE = 57863
const WITH = 57864
const QUERY = 57865
const EXPANSION = 57866
const WITHOUT = 57867
const VALIDATION = 57868
const ADDDATE = 57869
const BIT_AND = 57870
const BIT_OR = 57871
const BIT_XOR = 57872
const CAST = 57873
const COUNT = 57874
const APPROX_COUNT = 57875
const APPROX_COUNT_DISTINCT = 57876
const SERIAL_EXTRACT = 57877
const APPROX_PERCENTILE = 57878
const CURDATE = 57879
const CURTIME = 57880
const DATE_ADD = 57881
const DATE_SUB = 57882
const EXTRACT = 57883
const GROUP_CONCAT = 57884
const MAX = 57885
const MID = 57886
const MIN = 57887
const NOW = 57888
const POSITION = 57889
const SESSION_USER = 57890
const STD = 57891
const STDDEV = 57892
const MEDIAN = 57893
const CLUSTER_CENTERS = 57894
const KMEANS = 57895
const STDDEV_POP = 57896
const STDDEV_SAMP = 57897
const SUBDATE = 57898
const SUBSTR = 57899
const SUBSTRING = 57900
const SUM = 57901
const SYSDATE = 57902
const SYSTEM_USER = 57903
const TRANSLATE = 57904
const TRIM = 57905
const VARIANCE = 57906
const VAR_POP = 57907
const VAR_SAMP = 57908
const AVG = 57909
const RANK = 57910
const ROW_NUMBER = 57911
const DENSE_RANK = 57912
const BIT_CAST = 57913
const NEXTVAL = 57914
const SETVAL = 57915
const CURRVAL = 57916
const LASTVAL = 57917
const ARROW = 57918
const ROW = 57919
const OUTFILE = 57920
const HEADER = 57921
const MAX_FILE_SIZE = 57922
const FORCE_QUOTE = 57923
const PARALLEL = 57924
const UNUSED = 57925
const BINDINGS = 57926
const DO = 57927
const DECLARE = 57928
const LOOP = 57929
const WHILE = 57930
const LEAVE = 57931
const ITERATE = 57932
const UNTIL = 57933
const CALL = 57934
const PREV = 57935
const SLIDING = 57936
const FILL = 57937
const SPBEGIN = 57938
const BACKEND = 57939
const SERVERS = 57940
const HANDLER = 57941
const PERCENT = 57942
const SAMPLE = 57943
const KILL = 57944
const BACKUP = 57945
const FILESYSTEM = 57946
const PARALLELISM = 57947
const QUERY_RESULT = 57948

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"SNAPSHOTS",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:11257

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 119,
	11, 713,
	22, 713,
	-2, 706,
	-1, 139,
	238, 1098,
	240, 1005,
	-2, 1052,
	-1, 164,
	43, 540,
	240, 540,
	267, 547,
	268, 547,
	463, 540,
	-2, 574,
	-1, 205,
	627, 1842,
	-2, 454,
	-1, 502,
	627, 1960,
	-2, 348,
	-1, 560,
	627, 2019,
	-2, 346,
	-1, 561,
	627, 2020,
	-2, 347,
	-1, 562,
	627, 2021,
	-2, 349,
	-1, 688,
	319, 136,
	435, 136,
	436, 136,
	-2, 1747,
	-1, 753,
	82, 1534,
	-2, 1897,
	-1, 754,
	82, 1552,
	-2, 1868,
	-1, 758,
	82, 1553,
	-2, 1896,
	-1, 786,
	82, 1464,
	-2, 2091,
	-1, 787,
	82, 1465,
	-2, 2090,
	-1, 788,
	82, 1466,
	-2, 2080,
	-1, 789,
	82, 2052,
	-2, 2073,
	-1, 790,
	82, 2053,
	-2, 2074,
	-1, 791,
	82, 2054,
	-2, 2082,
	-1, 792,
	82, 2055,
	-2, 2062,
	-1, 793,
	82, 2056,
	-2, 2071,
	-1, 794,
	82, 2057,
	-2, 2083,
	-1, 795,
	82, 2058,
	-2, 2084,
	-1, 796,
	82, 2059,
	-2, 2089,
	-1, 797,
	82, 2060,
	-2, 2094,
	-1, 798,
	82, 2061,
	-2, 2095,
	-1, 799,
	82, 1530,
	-2, 1934,
	-1, 800,
	82, 1531,
	-2, 1731,
	-1, 801,
	82, 1532,
	-2, 1943,
	-1, 802,
	82, 1533,
	-2, 1740,
	-1, 804,
	82, 1536,
	-2, 1748,
	-1, 805,
	82, 1537,
	-2, 1967,
	-1, 807,
	82, 1540,
	-2, 1767,
	-1, 809,
	82, 1542,
	-2, 1979,
	-1, 810,
	82, 1543,
	-2, 1978,
	-1, 811,
	82, 1544,
	-2, 1811,
	-1, 812,
	82, 1545,
	-2, 1892,
	-1, 815,
	82, 1548,
	-2, 1990,
	-1, 817,
	82, 1550,
	-2, 1993,
	-1, 818,
	82, 1551,
	-2, 1995,
	-1, 819,
	82, 1554,
	-2, 2003,
	-1, 820,
	82, 1555,
	-2, 1877,
	-1, 821,
	82, 1556,
	-2, 1922,
	-1, 822,
	82, 1557,
	-2, 1887,
	-1, 823,
	82, 1558,
	-2, 1912,
	-1, 834,
	82, 1442,
	-2, 2085,
	-1, 835,
	82, 1443,
	-2, 2086,
	-1, 836,
	82, 1444,
	-2, 2087,
	-1, 923,
	458, 574,
	459, 574,
	-2, 541,
	-1, 969,
	124, 1731,
	135, 1731,
	155, 1731,
	-2, 1705,
	-1, 1079,
	22, 740,
	-2, 689,
	-1, 1183,
	11, 713,
	22, 713,
	-2, 1326,
	-1, 1259,
	22, 740,
	-2, 689,
	-1, 1578,
	82, 1605,
	-2, 1894,
	-1, 1579,
	82, 1606,
	-2, 1895,
	-1, 1724,
	83, 890,
	-2, 896,
	-1, 2138,
	107, 1044,
	151, 1044,
	190, 1044,
	193, 1044,
	280, 1044,
	-2, 1037,
	-1, 2284,
	11, 713,
	22, 713,
	-2, 833,
	-1, 2316,
	83, 1691,
	156, 1691,
	-2, 1879,
	-1, 2317,
	83, 1691,
	156, 1691,
	-2, 1878,
	-1, 2318,
	83, 1667,
	156, 1667,
	-2, 1865,
	-1, 2319,
	83, 1668,
	156, 1668,
	-2, 1870,
	-1, 2320,
	83, 1669,
	156, 1669,
	-2, 1799,
	-1, 2321,
	83, 1670,
	156, 1670,
	-2, 1793,
	-1, 2322,
	83, 1671,
	156, 1671,
	-2, 1721,
	-1, 2323,
	83, 1672,
	156, 1672,
	-2, 1867,
	-1, 2324,
	83, 1673,
	156, 1673,
	-2, 1797,
	-1, 2325,
	83, 1674,
	156, 1674,
	-2, 1792,
	-1, 2326,
	83, 1675,
	156, 1675,
	-2, 1781,
	-1, 2327,
	83, 1691,
	156, 1691,
	-2, 1782,
	-1, 2328,
	83, 1691,
	156, 1691,
	-2, 1783,
	-1, 2330,
	83, 1680,
	156, 1680,
	-2, 1912,
	-1, 2331,
	83, 1658,
	156, 1658,
	-2, 1897,
	-1, 2332,
	83, 1689,
	156, 1689,
	-2, 1868,
	-1, 2333,
	83, 1689,
	156, 1689,
	-2, 1896,
	-1, 2334,
	83, 1689,
	156, 1689,
	-2, 1749,
	-1, 2335,
	83, 1687,
	156, 1687,
	-2, 1887,
	-1, 2336,
	83, 1684,
	156, 1684,
	-2, 1772,
	-1, 2337,
	82, 1639,
	83, 1639,
	156, 1639,
	393, 1639,
	394, 1639,
	395, 1639,
	-2, 1720,
	-1, 2338,
	82, 1640,
	83, 1640,
	156, 1640,
	393, 1640,
	394, 1640,
	395, 1640,
	-2, 1722,
	-1, 2339,
	82, 1641,
	83, 1641,
	156, 1641,
	393, 1641,
	394, 1641,
	395, 1641,
	-2, 1939,
	-1, 2340,
	82, 1643,
	83, 1643,
	156, 1643,
	393, 1643,
	394, 1643,
	395, 1643,
	-2, 1869,
	-1, 2341,
	82, 1645,
	83, 1645,
	156, 1645,
	393, 1645,
	394, 1645,
	395, 1645,
	-2, 1851,
	-1, 2342,
	82, 1647,
	83, 1647,
	156, 1647,
	393, 1647,
	394, 1647,
	395, 1647,
	-2, 1798,
	-1, 2343,
	82, 1649,
	83, 1649,
	156, 1649,
	393, 1649,
	394, 1649,
	395, 1649,
	-2, 1777,
	-1, 2344,
	82, 1650,
	83, 1650,
	156, 1650,
	393, 1650,
	394, 1650,
	395, 1650,
	-2, 1778,
	-1, 2345,
	82, 1652,
	83, 1652,
	156, 1652,
	393, 1652,
	394, 1652,
	395, 1652,
	-2, 1719,
	-1, 2346,
	83, 1694,
	156, 1694,
	393, 1694,
	394, 1694,
	395, 1694,
	-2, 1754,
	-1, 2347,
	83, 1694,
	156, 1694,
	393, 1694,
	394, 1694,
	395, 1694,
	-2, 1768,
	-1, 2348,
	83, 1697,
	156, 1697,
	393, 1697,
	394, 1697,
	395, 1697,
	-2, 1750,
	-1, 2349,
	83, 1697,
	156, 1697,
	393, 1697,
	394, 1697,
	395, 1697,
	-2, 1814,
	-1, 2350,
	83, 1694,
	156, 1694,
	393, 1694,
	394, 1694,
	395, 1694,
	-2, 1835,
	-1, 2542,
	107, 1044,
	151, 1044,
	190, 1044,
	193, 1044,
	280, 1044,
	-2, 1038,
	-1, 2556,
	80, 634,
	156, 634,
	-2, 1211,
	-1, 2940,
	193, 1044,
	304, 1294,
	-2, 1266,
	-1, 3096,
	107, 1044,
	151, 1044,
	190, 1044,
	193, 1044,
	-2, 1154,
	-1, 3098,
	107, 1044,
	151, 1044,
	190, 1044,
	193, 1044,
	-2, 1154,
	-1, 3110,
	80, 634,
	156, 634,
	-2, 1212,
	-1, 3131,
	193, 1044,
	304, 1294,
	-2, 1267,
	-1, 3266,
	107, 1044,
	151, 1044,
	190, 1044,
	193, 1044,
	-2, 1155,
	-1, 3292,
	83, 1116,
	156, 1116,
	-2, 1044,
	-1, 3424,
	83, 1116,
	156, 1116,
	-2, 1044,
	-1, 3573,
	83, 1120,
	156, 1120,
	-2, 1044,
	-1, 3621,
	83, 1121,
	156, 1121,
	-2, 1044,
}

const yyPrivate = 57344

const yyLast = 45388

var yyAct = [...]int{
	720, 698, 3638, 2585, 722, 3601, 194, 3654, 1808, 3577,
	1558, 3116, 3479, 2959, 3583, 3576, 3424, 3584, 2926, 3505,
	706, 3464, 3320, 3209, 3145, 3402, 2579, 3455, 2400, 3483,
	1217, 3026, 3423, 3254, 1342, 1554, 3359, 3251, 3027, 3348,
	594, 3253, 750, 3394, 2582, 1080, 3213, 968, 1404, 1481,
	3204, 610, 3465, 615, 615, 3467, 1756, 3083, 3258, 615,
	632, 641, 2935, 696, 641, 2182, 3273, 2559, 3132, 3265,
	3235, 1561, 2900, 2863, 3024, 3099, 2692, 1898, 2889, 3268,
	179, 700, 2693, 2675, 3072, 2609, 2955, 2944, 3101, 2937,
	2685, 2435, 2691, 652, 2003, 1863, 1615, 36, 2754, 3012,
	1895, 2312, 2278, 2714, 1967, 2185, 646, 2992, 2688, 2531,
	2870, 2873, 2868, 56, 1913, 1073, 690, 2864, 2943, 2861,
	2262, 2149, 1397, 2543, 2117, 3215, 2797, 2215, 2106, 1987,
	2866, 695, 2105, 1999, 2865, 2907, 1976, 2383, 1470, 1702,
	1319, 2314, 898, 2727, 2366, 1968, 1975, 1941, 1998, 1482,
	1477, 1891, 2737, 1866, 2279, 1485, 2267, 638, 1313, 1864,
	2520, 2515, 2611, 2590, 2183, 1787, 1798, 2551, 594, 190,
	8, 189, 7, 6, 2148, 962, 1732, 1025, 2310, 2000,
	1552, 1871, 1444, 1413, 1383, 1490, 2033, 118, 1507, 609,
	35, 2129, 1768, 1608, 194, 2010, 194, 699, 1016, 1017,
	1491, 1592, 1093, 2468, 1543, 615, 2588, 2178, 1974, 1957,
	1767, 26, 931, 689, 1971, 593, 1351, 1931, 707, 14,
	2467, 1451, 1551, 2286, 1731, 961, 15, 1382, 13, 624,
	32, 1436, 627, 1331, 614, 614, 838, 1616, 22, 655,
	622, 1557, 1327, 654, 23, 16, 897, 1315, 10, 1380,
	180, 1443, 176, 1343, 874, 640, 697, 880, 895, 918,
	1218, 651, 1257, 3388, 170, 1282, 2007, 2501, 2501, 2501,
	1013, 637, 3086, 2017, 1012, 3019, 1014, 2423, 2372, 636,
	2370, 2369, 2367, 1715, 1458, 977, 633, 1454, 635, 1008,
	634, 1009, 178, 611, 2104, 1276, 2847, 1009, 840, 841,
	1009, 2844, 3646, 2845, 2842, 1365, 1709, 1272, 3202, 2750,
	2748, 1456, 1152, 1153, 1154, 1151, 1946, 691, 3355, 644,
	3349, 620, 3205, 3025, 2493, 2491, 177, 52, 166, 140,
	1152, 1153, 1154, 1151, 1984, 3469, 1970, 839, 1212, 2824,
	2223, 3558, 1352, 3236, 167, 1277, 3409, 850, 8, 177,
	7, 159, 1007, 177, 3100, 168, 2140, 1115, 3240, 974,
	2417, 3378, 976, 2409, 177, 2495, 3516, 1423, 177, 52,
	166, 140, 1422, 2004, 117, 1421, 980, 978, 979, 1288,
	650, 2822, 1505, 2015, 1305, 3135, 622, 1636, 2133, 105,
	3410, 177, 52, 166, 140, 171, 2304, 117, 177, 52,
	166, 140, 177, 52, 166, 140, 1278, 3380, 691, 167,
	1650, 177, 1502, 177, 1149, 177, 159, 177, 171, 1908,
	168, 1544, 171, 3147, 1548, 177, 52, 166, 140, 1498,
	2305, 1361, 1091, 1504, 1362, 2720, 3138, 171, 829, 117,
	828, 830, 831, 2292, 832, 833, 2291, 3133, 1547, 2293,
	2721, 2722, 3155, 3156, 105, 1384, 851, 1386, 3134, 1495,
	171, 2769, 1516, 2762, 1875, 117, 1088, 171, 1339, 972,
	973, 171, 122, 123, 2384, 124, 125, 2846, 2843, 940,
	1497, 1142, 171, 2517, 171, 1782, 171, 1876, 1877, 1716,
	1717, 2930, 1347, 2518, 171, 3139, 1346, 1349, 1350, 1560,
	3555, 1349, 1350, 1147, 971, 3226, 3587, 3588, 970, 3472,
	1287, 177, 52, 166, 140, 3472, 3549, 3471, 3548, 2928,
	1364, 3470, 3547, 3471, 3470, 2093, 3609, 3605, 3606, 3028,
	3357, 2755, 1549, 3457, 3457, 3551, 3460, 122, 123, 3352,
	124, 125, 2516, 139, 165, 175, 3028, 103, 1457, 1455,
	1632, 3360, 3361, 3362, 3363, 1546, 1629, 2756, 1564, 2757,
	1631, 1628, 1630, 1634, 1635, 164, 158, 157, 1633, 1892,
	1096, 2496, 58, 2404, 1085, 1096, 2019, 3476, 3041, 3080,
	171, 3560, 3561, 3073, 1130, 2011, 1528, 1131, 1882, 3154,
	1539, 2186, 2630, 2884, 3556, 3557, 1886, 2874, 2882, 2256,
	886, 3245, 3382, 1954, 2128, 3157, 2787, 2507, 139, 165,
	175, 3553, 103, 2785, 615, 1133, 3143, 1464, 1463, 1144,
	1135, 2414, 163, 1136, 615, 1084, 1145, 1146, 2221, 2679,
	164, 158, 157, 160, 161, 162, 2016, 58, 3140, 3144,
	3142, 3141, 3225, 641, 641, 1118, 615, 3203, 2523, 685,
	3227, 1138, 687, 2879, 2880, 2749, 2259, 686, 2258, 1374,
	3586, 2878, 3385, 1289, 169, 1337, 3242, 2263, 3172, 2881,
	1906, 1907, 1545, 2958, 1563, 1562, 3149, 3150, 2908, 2932,
	2956, 2957, 1363, 2494, 113, 2505, 2898, 3616, 163, 3498,
	114, 3493, 1140, 1141, 1275, 1128, 3414, 3169, 160, 161,
	162, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625,
	1626, 1627, 1639, 1640, 1641, 1642, 1643, 1644, 1637, 1638,
	3406, 2506, 2684, 3157, 2135, 2552, 638, 638, 139, 169,
	175, 1134, 1077, 3387, 1019, 3136, 643, 3044, 2791, 2500,
	2005, 3148, 642, 1110, 977, 3162, 2005, 115, 3484, 113,
	164, 3500, 1084, 163, 3117, 114, 2005, 3506, 1129, 2927,
	51, 1570, 1573, 1574, 2584, 1098, 1097, 3124, 1326, 1139,
	1098, 1097, 1571, 3173, 2876, 2022, 2024, 2025, 1009, 2580,
	2581, 1009, 2584, 1009, 1009, 1090, 3475, 3408, 3559, 639,
	1009, 950, 1009, 3311, 1137, 1075, 3321, 3322, 3323, 3327,
	3325, 3326, 3324, 3670, 2368, 1082, 2659, 2233, 2006, 53,
	2018, 888, 115, 889, 2961, 977, 3300, 2232, 974, 639,
	3216, 976, 1459, 639, 1101, 51, 2529, 1106, 3306, 1324,
	3657, 1083, 3381, 1221, 1123, 1132, 1393, 1125, 2253, 2254,
	637, 637, 1392, 1108, 172, 173, 639, 174, 636, 636,
	839, 53, 141, 3415, 649, 633, 633, 635, 635, 634,
	634, 1087, 1089, 1285, 610, 1126, 1323, 1349, 1350, 1322,
	1099, 3153, 2492, 3507, 53, 141, 3241, 3407, 2418, 141,
	3395, 53, 2307, 1255, 1079, 53, 1260, 1107, 1338, 974,
	141, 3575, 976, 3428, 141, 1349, 1350, 898, 1103, 1104,
	1341, 1340, 1185, 1893, 2885, 2933, 2936, 2875, 53, 172,
	173, 1109, 174, 1074, 3383, 116, 39, 141, 2788, 1078,
	973, 2841, 50, 2224, 141, 3102, 5, 1191, 141, 2188,
	2034, 2181, 120, 121, 3200, 946, 944, 141, 945, 141,
	3152, 141, 2198, 141, 3552, 1119, 1283, 615, 3454, 1376,
	650, 141, 1345, 3031, 1381, 594, 594, 2522, 1222, 1187,
	1188, 1189, 1190, 2952, 594, 594, 3246, 3658, 1408, 1408,
	1121, 615, 2631, 2877, 2632, 2633, 1115, 1883, 2410, 1540,
	116, 39, 1124, 1127, 2201, 1885, 1297, 50, 2956, 2957,
	2181, 2204, 2296, 641, 1437, 610, 1290, 120, 121, 1447,
	1447, 2790, 1572, 1406, 1406, 2960, 2219, 1303, 1120, 3372,
	194, 3373, 2008, 2526, 2527, 1302, 2023, 1410, 1415, 594,
	1230, 1231, 3427, 1301, 951, 2732, 2733, 3367, 2525, 172,
	173, 1300, 174, 2191, 3372, 645, 3373, 141, 2535, 2538,
	2539, 2540, 2536, 2537, 1348, 2503, 947, 3066, 2203, 2716,
	2718, 2020, 2021, 1286, 2660, 2662, 2663, 2664, 2661, 3313,
	3307, 3308, 1114, 887, 3302, 3375, 2187, 2628, 3301, 3574,
	1489, 2189, 1492, 1310, 1465, 692, 941, 1500, 2953, 892,
	893, 894, 2799, 2798, 2109, 1122, 2111, 2110, 1402, 1403,
	3375, 2202, 1281, 1719, 1261, 1720, 3374, 890, 3655, 3656,
	2108, 1526, 1718, 1259, 2650, 2651, 941, 1279, 1280, 949,
	853, 1521, 1522, 2245, 854, 1408, 3274, 1408, 1084, 2120,
	2896, 3374, 3666, 1291, 1506, 2190, 3660, 3545, 1372, 2131,
	1388, 1390, 1292, 1293, 1294, 1295, 1296, 1320, 1298, 1400,
	1401, 1375, 2121, 2122, 1304, 1333, 1334, 2557, 1318, 2197,
	2218, 857, 1414, 2195, 1325, 1312, 1150, 2989, 1115, 943,
	2386, 1335, 942, 3674, 2192, 1468, 1541, 1471, 1472, 1354,
	1355, 1496, 1357, 1358, 1359, 1503, 1366, 1367, 1473, 1474,
	1353, 3032, 2067, 1356, 1438, 2066, 948, 977, 638, 943,
	3652, 977, 942, 3640, 1460, 2013, 1391, 1479, 1480, 1614,
	1535, 2276, 856, 1525, 2913, 3623, 859, 858, 1000, 1005,
	1006, 1524, 3595, 1663, 3589, 1484, 2717, 2985, 1488, 1152,
	1153, 1154, 1151, 1487, 3571, 1081, 1416, 2649, 1320, 1580,
	1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590,
	1591, 1429, 620, 1113, 2130, 1603, 1604, 3069, 1435, 2897,
	1556, 1448, 1328, 1332, 1332, 1332, 3043, 2098, 1150, 2409,
	1449, 2965, 3526, 3624, 952, 2820, 3641, 1010, 1011, 3501,
	3489, 2164, 1015, 3447, 1084, 2277, 1328, 1328, 3624, 2954,
	2558, 2188, 2191, 1721, 2963, 3596, 2558, 3391, 1437, 1575,
	1700, 1672, 1112, 1730, 1408, 1734, 1735, 3572, 1737, 1738,
	615, 1648, 637, 1537, 3446, 615, 1934, 2046, 1408, 3441,
	636, 3440, 898, 3439, 1534, 1757, 3368, 633, 2851, 635,
	3369, 634, 1408, 1515, 1559, 3438, 2277, 1514, 1376, 1531,
	1517, 1530, 3418, 632, 1509, 3391, 1703, 1152, 1153, 1154,
	1151, 3368, 2013, 3490, 3417, 3466, 3448, 1533, 1532, 1662,
	2849, 1529, 1081, 1781, 2277, 1555, 1553, 1550, 1152, 1153,
	1154, 1151, 1788, 1788, 2735, 1376, 2989, 1376, 1376, 1113,
	1150, 615, 615, 3390, 1730, 1730, 3178, 2153, 1408, 1860,
	1861, 1873, 3391, 2045, 3391, 1729, 3391, 2509, 1645, 1646,
	1736, 1649, 3126, 2497, 1542, 594, 1594, 1408, 3391, 1664,
	1002, 1003, 1004, 2399, 2163, 2013, 3092, 2391, 1653, 1654,
	1655, 3059, 1671, 2192, 1673, 2307, 2004, 2013, 2187, 2181,
	2186, 1669, 2184, 2189, 1670, 615, 1730, 1408, 3055, 1918,
	1874, 615, 615, 615, 1923, 1924, 1601, 1602, 1680, 1681,
	2174, 1928, 1929, 1930, 2973, 1932, 3391, 1936, 1706, 2307,
	1909, 2103, 1810, 2711, 194, 1699, 1758, 194, 194, 2474,
	194, 1152, 1153, 1154, 1151, 3127, 1855, 1856, 2097, 2466,
	1674, 2096, 2071, 1995, 1904, 1311, 1773, 2190, 1606, 3093,
	1711, 1739, 1785, 1394, 3060, 3642, 1744, 1887, 843, 844,
	845, 846, 1780, 1701, 3113, 1783, 1784, 1256, 1663, 1663,
	1978, 3056, 2425, 1901, 1902, 1663, 1663, 2043, 2407, 2914,
	2395, 1879, 1989, 1881, 1707, 2739, 3079, 2974, 1915, 1725,
	2393, 1917, 2560, 1899, 1900, 2388, 2277, 2381, 1789, 2412,
	1894, 3337, 1150, 1115, 1945, 1733, 2379, 1948, 1949, 1757,
	1951, 1983, 1150, 1408, 2002, 1920, 1921, 1922, 1769, 1749,
	1771, 1772, 1794, 1795, 1726, 1727, 1728, 1791, 1754, 1753,
	2377, 2411, 1770, 1762, 1778, 1764, 1740, 1741, 1742, 1743,
	1774, 1765, 1766, 1759, 1760, 1150, 2403, 1792, 1793, 2188,
	2191, 2153, 1779, 2389, 2169, 2062, 2047, 1994, 1775, 1776,
	1939, 1926, 3176, 2394, 2375, 1996, 2152, 2099, 2389, 1903,
	2382, 2078, 1859, 2077, 1862, 2065, 1914, 1979, 1786, 2380,
	2056, 977, 1914, 1914, 1914, 1878, 638, 1880, 977, 1733,
	1888, 2055, 843, 844, 845, 846, 1167, 2054, 2012, 1790,
	1518, 2288, 2918, 2376, 1973, 1511, 848, 2782, 1198, 1100,
	1076, 1973, 1071, 1069, 1675, 1676, 1677, 1678, 855, 1916,
	1682, 1683, 1684, 1685, 1687, 1688, 1689, 1690, 1691, 1692,
	1693, 1694, 3494, 2031, 2032, 1328, 1940, 2376, 1553, 2153,
	2098, 3275, 1942, 2909, 1150, 3661, 1150, 3643, 1150, 1332,
	1360, 1652, 1651, 1150, 2216, 974, 1959, 3105, 976, 3103,
	3389, 1332, 974, 1396, 1150, 976, 1652, 1651, 1985, 1419,
	1150, 2013, 1398, 1519, 1076, 3364, 3495, 3304, 1316, 977,
	3303, 2192, 1317, 1399, 1982, 3276, 2187, 2181, 2186, 1980,
	2184, 2189, 1993, 3289, 690, 3247, 3085, 615, 615, 615,
	637, 3106, 2176, 3104, 2990, 2983, 1329, 2978, 636, 2367,
	3017, 615, 615, 615, 615, 633, 1997, 635, 2975, 634,
	2910, 1992, 2891, 2681, 2150, 1991, 1168, 1169, 1170, 1171,
	1172, 1173, 1174, 1167, 2156, 1376, 2533, 2502, 2422, 1155,
	848, 2392, 2432, 1943, 860, 2190, 2741, 1184, 2298, 1307,
	1316, 1306, 1086, 974, 1317, 1193, 976, 2361, 1609, 2035,
	2443, 1376, 1686, 1395, 2911, 2026, 2027, 1722, 2028, 1370,
	1371, 2039, 1373, 3546, 1377, 1378, 1379, 1679, 2210, 1609,
	1201, 2040, 1452, 1151, 1943, 1594, 1154, 1151, 1068, 1064,
	1065, 1066, 1067, 3316, 2448, 3315, 2447, 2446, 2444, 1170,
	1171, 1172, 1173, 1174, 1167, 2758, 1424, 1425, 1426, 1427,
	1428, 2620, 1430, 1431, 1432, 1433, 1434, 2618, 2596, 2594,
	1440, 1441, 1442, 1330, 2029, 2030, 3248, 3249, 2217, 1175,
	1176, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1167, 2281,
	2281, 1873, 2281, 3295, 1200, 3648, 2072, 2073, 3647, 2075,
	3669, 1152, 1153, 1154, 1151, 3570, 2082, 1199, 3243, 3569,
	594, 594, 3020, 2445, 3535, 1600, 2100, 3496, 1084, 2092,
	2094, 2095, 3443, 1667, 1408, 615, 2158, 2159, 2124, 2125,
	2126, 1597, 1599, 1596, 3431, 1598, 2161, 2162, 1668, 2485,
	615, 2486, 2141, 2142, 2143, 2144, 1084, 2351, 610, 2132,
	3421, 3411, 2180, 1447, 3350, 1873, 2179, 2114, 2356, 2302,
	2358, 3278, 3668, 2222, 194, 3244, 2225, 2226, 2227, 2228,
	2229, 2230, 2231, 3277, 2173, 2234, 2235, 2236, 2237, 2238,
	2239, 2240, 2241, 2242, 2243, 2244, 2285, 2246, 2247, 2248,
	2249, 2250, 2283, 2251, 2287, 2157, 3077, 3118, 3107, 1221,
	2294, 3076, 2295, 2170, 977, 2883, 1152, 1153, 1154, 1151,
	2778, 2160, 2671, 2753, 2752, 2405, 2166, 2371, 2002, 2167,
	2299, 2300, 2654, 2669, 2653, 1408, 2652, 1408, 2644, 1408,
	2193, 2194, 2638, 2199, 1084, 1152, 1153, 1154, 1151, 2168,
	2637, 2636, 2424, 1452, 2362, 2635, 2165, 2667, 2498, 2102,
	2355, 2449, 2450, 3078, 2309, 1152, 1153, 1154, 1151, 2656,
	723, 733, 2415, 1962, 3018, 1961, 1960, 1408, 2452, 2670,
	724, 2260, 725, 729, 732, 728, 726, 727, 974, 2289,
	2668, 976, 1956, 2459, 3665, 1388, 1390, 1955, 1408, 2058,
	1912, 1911, 2353, 1910, 1446, 1446, 1152, 1153, 1154, 1151,
	3084, 2360, 1406, 1512, 2666, 2434, 1414, 1274, 2303, 2532,
	1152, 1153, 1154, 1151, 2813, 2451, 2655, 2686, 2306, 2363,
	2869, 1914, 3664, 1406, 1222, 730, 1158, 1159, 1160, 1161,
	1162, 1163, 1164, 1156, 2801, 2354, 2460, 2352, 2463, 2464,
	1084, 3615, 685, 3614, 1084, 687, 3611, 3210, 1332, 3607,
	686, 1408, 2315, 2461, 2530, 2057, 2440, 731, 3478, 3252,
	1730, 1152, 1153, 1154, 1151, 3463, 3452, 3435, 2556, 3430,
	1453, 2421, 3429, 2812, 2562, 3386, 3384, 2416, 3513, 3351,
	2401, 2402, 1152, 1153, 1154, 1151, 3297, 2458, 2430, 3261,
	2572, 3230, 2397, 3229, 3208, 3206, 2489, 2408, 3185, 1084,
	1152, 1153, 1154, 1151, 2436, 2413, 2436, 2593, 3182, 1152,
	1153, 1154, 1151, 2406, 1084, 1084, 1084, 1788, 3180, 2676,
	1084, 3075, 2604, 2605, 2606, 2607, 1084, 2614, 3074, 2615,
	2616, 3580, 2617, 3071, 2619, 3482, 2426, 2427, 2544, 3052,
	2419, 3050, 2984, 2442, 2980, 2614, 1565, 1566, 1567, 1568,
	1569, 2971, 2545, 1152, 1153, 1154, 1151, 2281, 1152, 1153,
	1154, 1151, 1152, 1153, 1154, 1151, 1553, 2970, 2892, 2563,
	2856, 2672, 2855, 2853, 1810, 2050, 2519, 2107, 2792, 594,
	1152, 1153, 1154, 1151, 1730, 1084, 1873, 1873, 1873, 1873,
	1610, 1611, 1612, 1613, 2789, 2751, 2725, 1084, 1873, 1647,
	2665, 2281, 2657, 2512, 1919, 2514, 2647, 1657, 2553, 3231,
	2591, 2429, 2645, 2641, 2591, 2640, 2587, 1408, 2469, 2470,
	2639, 2565, 2511, 2499, 2475, 2398, 2568, 2528, 615, 615,
	1964, 2598, 785, 784, 2574, 1958, 1152, 1153, 1154, 1151,
	1714, 8, 2555, 7, 1713, 2561, 2510, 3219, 1513, 2554,
	2315, 1229, 2586, 1225, 1704, 1224, 1072, 852, 3218, 2573,
	177, 2576, 166, 140, 3509, 2626, 2627, 2589, 1152, 1153,
	1154, 1151, 2595, 2707, 1152, 1153, 1154, 1151, 3377, 3376,
	2642, 2643, 2602, 3365, 194, 1152, 1153, 1154, 1151, 194,
	3166, 3232, 1733, 1165, 1175, 1176, 1168, 1169, 1170, 1171,
	1172, 1173, 1174, 1167, 2678, 2571, 3217, 2634, 3098, 3097,
	1663, 2646, 1663, 3096, 3068, 2768, 1761, 1152, 1153, 1154,
	1151, 2599, 2600, 3064, 2777, 2564, 2603, 3062, 3061, 171,
	1408, 3047, 2610, 2784, 2569, 2570, 3058, 2677, 3057, 3051,
	1777, 2682, 3049, 3033, 3023, 2695, 2696, 2697, 2698, 3022,
	3008, 2708, 2706, 2816, 2680, 2710, 3007, 2709, 1152, 1153,
	1154, 1151, 2919, 2859, 2742, 2723, 735, 119, 2848, 2746,
	2726, 2592, 119, 2818, 2811, 2803, 1472, 2736, 2802, 2796,
	1152, 1153, 1154, 1151, 2734, 1703, 1473, 1474, 2508, 2378,
	2767, 2694, 2374, 1704, 2719, 2373, 2083, 2076, 1704, 1704,
	2070, 2068, 2064, 2694, 1479, 1480, 2763, 2063, 2815, 2729,
	2730, 2061, 2052, 2770, 2814, 2765, 2806, 1484, 2808, 2049,
	1488, 2771, 977, 621, 2781, 1487, 119, 2854, 2048, 977,
	2744, 2786, 2743, 2740, 1084, 1152, 1153, 1154, 1151, 1963,
	2872, 1152, 1153, 1154, 1151, 2483, 2764, 2761, 1944, 2774,
	2887, 1947, 2759, 1697, 1950, 615, 2773, 1952, 2766, 2482,
	1696, 2772, 1695, 2780, 2481, 1666, 1665, 2901, 1084, 1084,
	1084, 1656, 1152, 1153, 1154, 1151, 2793, 177, 1873, 2150,
	2794, 2917, 1420, 1418, 3534, 2800, 1152, 1153, 1154, 1151,
	1219, 1152, 1153, 1154, 1151, 3508, 2809, 2810, 3449, 2210,
	3437, 3432, 2804, 2805, 1467, 3331, 1988, 2480, 3314, 3310,
	3288, 2942, 2895, 2945, 2850, 2945, 2945, 3272, 2807, 3193,
	1084, 1166, 1165, 1175, 1176, 1168, 1169, 1170, 1171, 1172,
	1173, 1174, 1167, 3191, 1152, 1153, 1154, 1151, 975, 2966,
	2069, 2962, 2544, 3164, 3163, 119, 171, 1408, 1408, 2479,
	2852, 3160, 3159, 3125, 2857, 1152, 1153, 1154, 1151, 2964,
	119, 3122, 119, 3120, 2044, 3087, 1478, 1469, 2906, 1483,
	1486, 2888, 2858, 2915, 1475, 1314, 1152, 1153, 1154, 1151,
	2673, 2597, 1406, 1406, 977, 2549, 2894, 2903, 2904, 2905,
	2912, 2548, 2547, 2925, 615, 2967, 2968, 2546, 2941, 2872,
	2916, 2513, 2037, 2484, 2387, 2041, 2825, 2826, 2950, 977,
	1730, 1730, 2827, 2828, 2829, 2830, 2297, 2831, 2832, 2833,
	2834, 2835, 2836, 2837, 2838, 2920, 2929, 2931, 2180, 2924,
	2921, 2922, 2179, 2946, 2947, 2478, 2893, 2951, 3422, 1152,
	1153, 1154, 1151, 2252, 2151, 2123, 2053, 2477, 2101, 1595,
	2940, 2042, 171, 1925, 2060, 1724, 1084, 1710, 1538, 1499,
	2452, 1476, 1152, 1153, 1154, 1151, 1273, 1258, 1254, 3021,
	1253, 1252, 1251, 2074, 1152, 1153, 1154, 1151, 2079, 2080,
	2081, 1250, 1249, 2084, 2085, 2086, 2087, 2088, 2089, 2090,
	2091, 1248, 1166, 1165, 1175, 1176, 1168, 1169, 1170, 1171,
	1172, 1173, 1174, 1167, 2476, 1247, 1246, 1245, 2972, 2977,
	2976, 615, 1244, 2982, 2981, 1243, 1242, 1241, 2986, 2987,
	2473, 1240, 1239, 2979, 1238, 2997, 1152, 1153, 1154, 1151,
	1237, 1152, 1153, 1154, 1151, 2472, 1236, 3001, 1235, 2923,
	1234, 1233, 3004, 3005, 3006, 1232, 1228, 1152, 1153, 1154,
	1151, 2471, 1227, 2988, 1226, 1223, 1216, 3010, 1215, 1213,
	3016, 2465, 1152, 1153, 1154, 1151, 3525, 1212, 3000, 1211,
	1210, 2264, 1209, 3523, 2455, 1914, 1208, 1207, 1152, 1153,
	1154, 1151, 2948, 3286, 1206, 1205, 1204, 3034, 1152, 1153,
	1154, 1151, 3036, 3039, 3035, 1203, 3040, 1202, 1178, 1197,
	1182, 1152, 1153, 1154, 1151, 3053, 1196, 1195, 2269, 2272,
	2273, 2274, 2270, 3045, 2271, 2275, 1179, 1181, 1177, 3091,
	1180, 1166, 1165, 1175, 1176, 1168, 1169, 1170, 1171, 1172,
	1173, 1174, 1167, 2281, 1873, 3110, 1194, 1166, 1165, 1175,
	1176, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1167, 1117,
	1070, 3521, 2431, 2993, 2994, 3519, 3161, 3128, 2155, 2137,
	1084, 1105, 2315, 2436, 3629, 3627, 3585, 2996, 3065, 2942,
	2534, 2308, 1966, 1084, 1116, 1704, 2999, 1704, 3067, 1152,
	1153, 1154, 1151, 2998, 1084, 3070, 3175, 2700, 1605, 2699,
	1408, 3293, 3042, 2703, 977, 1704, 1704, 2701, 2704, 3082,
	3195, 977, 2702, 2396, 2390, 3112, 1730, 1308, 3196, 612,
	1084, 2890, 3119, 2776, 3121, 1152, 1153, 1154, 1151, 2705,
	104, 2273, 2274, 1751, 1752, 1406, 3158, 2220, 1446, 3109,
	1746, 1747, 1748, 3115, 55, 3108, 54, 2385, 3177, 194,
	3151, 3171, 2420, 3088, 3089, 3090, 2938, 3011, 2939, 3094,
	3095, 1847, 1084, 1461, 3187, 1508, 3165, 3194, 3037, 3038,
	3170, 3167, 1493, 616, 2269, 2272, 2273, 2274, 2270, 3174,
	2271, 2275, 2401, 2402, 2113, 1927, 3111, 617, 3179, 1111,
	2867, 3184, 3181, 2860, 3114, 2575, 2550, 2172, 3189, 2146,
	1084, 618, 3188, 619, 1755, 119, 119, 975, 3186, 1723,
	3183, 1652, 1651, 1636, 1269, 1270, 3598, 3434, 1084, 1408,
	1408, 1267, 1268, 3197, 2901, 2622, 1265, 1266, 2969, 3201,
	1263, 1264, 2623, 2624, 2625, 3267, 2261, 3267, 3211, 2257,
	1858, 3212, 1369, 1368, 1143, 3003, 2433, 2728, 2112, 2439,
	3282, 1084, 1990, 1084, 1406, 3259, 2453, 2454, 1321, 1299,
	1344, 3285, 3563, 3287, 2456, 2457, 3541, 3257, 3539, 3485,
	1408, 3239, 3462, 3238, 3237, 3461, 3129, 2462, 1183, 3459,
	3450, 3345, 3344, 3283, 3207, 3054, 3030, 3029, 615, 3168,
	1084, 1084, 3014, 2205, 1084, 1084, 3262, 2175, 3271, 3270,
	2610, 1510, 3013, 1565, 1704, 3259, 3263, 3264, 3112, 2738,
	3333, 1320, 3281, 3631, 3630, 3328, 2779, 2139, 2051, 3290,
	3291, 1102, 1757, 3630, 3342, 3631, 2694, 3158, 3298, 3296,
	3294, 3318, 3319, 3346, 3347, 3329, 3330, 3312, 3234, 3009,
	1081, 3151, 181, 3, 1336, 3199, 843, 844, 845, 846,
	63, 1081, 3339, 2, 3644, 3645, 1, 2490, 1708, 1271,
	847, 842, 1385, 3334, 2290, 1905, 1412, 1712, 2694, 2566,
	2567, 849, 3338, 2712, 2713, 3371, 1632, 3002, 3340, 3279,
	3280, 2715, 1629, 2504, 2009, 3228, 1631, 1628, 1630, 1634,
	1635, 2683, 2255, 3353, 1633, 2127, 2886, 1309, 891, 1658,
	3220, 1523, 3221, 3403, 999, 3397, 1095, 3366, 1520, 1094,
	3370, 1092, 1607, 737, 1969, 2674, 3284, 2648, 1262, 1084,
	3341, 3597, 3637, 3533, 3255, 3600, 1536, 721, 3453, 3420,
	3335, 3426, 3356, 3537, 3336, 3392, 3358, 3214, 2014, 1148,
	2760, 914, 775, 748, 1214, 3400, 3398, 3399, 1501, 1494,
	2823, 2821, 1001, 747, 3081, 3412, 2524, 1559, 3416, 1559,
	2731, 3405, 1084, 998, 915, 1953, 3354, 1408, 1462, 3317,
	1166, 1165, 1175, 1176, 1168, 1169, 1170, 1171, 1172, 1173,
	1174, 1167, 1466, 2171, 3413, 3433, 3504, 3292, 2934, 2583,
	3499, 3123, 3224, 3222, 3223, 656, 3255, 3255, 1884, 592,
	3255, 3255, 1406, 3442, 959, 3332, 1965, 657, 2154, 3474,
	3554, 3436, 871, 2136, 872, 3444, 864, 2542, 3468, 2541,
	1576, 1157, 1084, 3451, 1593, 3458, 3456, 2839, 2840, 1192,
	694, 2038, 2521, 3146, 2724, 3486, 62, 61, 1639, 1640,
	1641, 1642, 1643, 1644, 1637, 1638, 60, 59, 1935, 202,
	1417, 3481, 739, 201, 621, 3480, 3477, 3250, 3530, 3602,
	3488, 719, 718, 3503, 717, 716, 715, 714, 1084, 2268,
	2266, 2265, 1868, 2745, 1867, 2747, 1408, 3497, 1933, 3528,
	3531, 3518, 3520, 3522, 3524, 2899, 119, 3502, 2613, 2608,
	1799, 1797, 2601, 1704, 3511, 3445, 2200, 2207, 1704, 1796,
	3582, 3514, 3515, 3309, 3532, 1988, 888, 2658, 889, 3517,
	1745, 1406, 2196, 3540, 3538, 3542, 3543, 3536, 1408, 1816,
	2629, 3403, 1813, 1812, 3527, 1559, 2621, 3305, 3299, 1844,
	3401, 3266, 3130, 3131, 3137, 2145, 1024, 3573, 1020, 1022,
	2795, 3562, 3564, 3581, 869, 1023, 3566, 1021, 2441, 2177,
	119, 2862, 2119, 1406, 119, 2118, 3487, 2116, 883, 2115,
	879, 3491, 3492, 1284, 2817, 3604, 3565, 119, 3255, 3603,
	3473, 902, 3590, 3550, 3591, 3233, 3592, 2313, 3593, 119,
	2311, 3594, 2995, 2991, 1977, 1986, 2775, 1869, 1865, 2138,
	3379, 1750, 3512, 865, 1084, 3608, 2134, 3468, 3610, 156,
	49, 101, 154, 3567, 3568, 48, 90, 89, 100, 152,
	47, 186, 3426, 3619, 185, 188, 861, 187, 184, 2364,
	3621, 3622, 3620, 2365, 3625, 183, 1450, 3636, 3255, 3628,
	3639, 3626, 182, 3632, 3633, 3634, 3635, 3544, 3269, 837,
	900, 901, 38, 37, 33, 12, 11, 3649, 34, 1084,
	21, 941, 20, 1527, 19, 25, 31, 30, 112, 3650,
	3503, 3651, 111, 29, 3653, 110, 2819, 109, 108, 3659,
	107, 106, 3604, 3663, 3255, 28, 3603, 3662, 18, 42,
	41, 40, 9, 99, 97, 3667, 27, 885, 98, 878,
	95, 96, 3639, 3671, 93, 91, 74, 73, 882, 881,
	72, 87, 86, 2949, 85, 3675, 84, 83, 82, 80,
	81, 913, 71, 3612, 3613, 863, 2428, 70, 69, 870,
	1166, 1165, 1175, 1176, 1168, 1169, 1170, 1171, 1172, 1173,
	1174, 1167, 68, 67, 943, 94, 92, 942, 78, 877,
	1166, 1165, 1175, 1176, 1168, 1169, 1170, 1171, 1172, 1173,
	1174, 1167, 88, 79, 77, 76, 75, 66, 887, 2036,
	65, 64, 138, 876, 137, 136, 135, 875, 134, 132,
	133, 131, 130, 862, 927, 129, 128, 868, 127, 126,
	43, 44, 903, 1166, 1165, 1175, 1176, 1168, 1169, 1170,
	1171, 1172, 1173, 1174, 1167, 45, 46, 148, 147, 866,
	3617, 149, 151, 153, 150, 155, 145, 143, 146, 905,
	144, 142, 57, 1845, 102, 17, 24, 4, 1806, 1166,
	1165, 1175, 1176, 1168, 1169, 1170, 1171, 1172, 1173, 1174,
	1167, 0, 0, 0, 0, 0, 886, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1847, 1815,
	0, 0, 0, 0, 0, 1559, 0, 1872, 1848, 1849,
	0, 0, 867, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 926, 925, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1814, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 924, 0, 0, 0, 0, 1822,
	0, 0, 0, 0, 0, 899, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 904, 936, 0, 3046,
	0, 0, 0, 0, 0, 0, 3048, 0, 0, 0,
	119, 0, 0, 119, 119, 0, 119, 0, 0, 884,
	932, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3063, 667, 666, 673, 663,
	0, 0, 0, 996, 0, 0, 0, 1838, 670, 671,
	0, 672, 676, 0, 975, 658, 933, 937, 873, 0,
	0, 975, 0, 0, 0, 681, 0, 0, 1845, 0,
	0, 0, 0, 1806, 0, 119, 921, 0, 919, 923,
	940, 0, 0, 0, 920, 917, 916, 0, 922, 907,
	908, 906, 909, 910, 911, 912, 0, 938, 0, 939,
	0, 0, 0, 1847, 1815, 0, 0, 0, 0, 0,
	934, 935, 0, 1848, 1849, 997, 0, 0, 1805, 1807,
	1804, 0, 1801, 0, 0, 0, 0, 1826, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1832, 1814,
	0, 0, 0, 0, 0, 0, 1817, 930, 1800, 0,
	0, 0, 1183, 929, 1822, 0, 0, 0, 1820, 1854,
	0, 0, 1821, 1823, 1825, 1704, 1827, 1828, 1829, 1833,
	1834, 1835, 1837, 1840, 1841, 1842, 1704, 0, 0, 3190,
	0, 0, 3192, 1830, 1839, 1831, 991, 986, 981, 985,
	989, 0, 0, 0, 0, 1809, 0, 0, 0, 3198,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 994, 0, 0, 1846, 984, 0,
	0, 0, 1838, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 928, 0,
	0, 0, 0, 1802, 1803, 0, 0, 0, 0, 0,
	0, 0, 0, 659, 661, 660, 0, 0, 0, 0,
	0, 1843, 0, 665, 0, 0, 0, 0, 0, 992,
	0, 0, 0, 0, 0, 669, 995, 0, 1819, 0,
	0, 0, 684, 0, 0, 1818, 0, 0, 0, 662,
	0, 0, 0, 1805, 2578, 1804, 0, 2577, 982, 0,
	0, 0, 1826, 0, 0, 0, 0, 0, 0, 1836,
	0, 0, 0, 1832, 0, 0, 0, 0, 1824, 0,
	0, 993, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1851, 1850, 1820, 1854, 0, 0, 1821, 1823, 1825,
	0, 1827, 1828, 1829, 1833, 1834, 1835, 1837, 1840, 1841,
	1842, 0, 0, 0, 0, 0, 0, 0, 1830, 1839,
	1831, 983, 0, 0, 0, 0, 0, 1042, 0, 0,
	1809, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1811, 0, 0, 0, 0, 0,
	0, 0, 1846, 0, 0, 0, 0, 0, 664, 668,
	674, 0, 675, 677, 0, 0, 678, 679, 680, 0,
	0, 682, 683, 0, 0, 0, 0, 0, 1802, 1803,
	0, 0, 0, 0, 0, 0, 1853, 2284, 0, 1852,
	0, 0, 0, 0, 0, 0, 1843, 0, 990, 0,
	0, 0, 3393, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1819, 0, 0, 0, 0, 0, 0,
	1818, 0, 0, 0, 1042, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 987, 0, 0, 988, 0, 0,
	0, 0, 0, 0, 1836, 0, 0, 0, 1028, 0,
	0, 1872, 0, 1824, 0, 0, 0, 0, 0, 0,
	119, 0, 0, 0, 0, 0, 1851, 1850, 1050, 1054,
	1056, 1058, 1060, 1061, 1063, 0, 1068, 1064, 1065, 1066,
	1067, 0, 1045, 1046, 1047, 1048, 1026, 1027, 1051, 0,
	1029, 0, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037,
	1038, 1041, 1043, 1039, 1040, 1049, 0, 0, 0, 0,
	0, 0, 0, 1053, 1055, 1057, 1059, 1062, 0, 1811,
	0, 1201, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1028, 0, 0, 0, 1018,
	0, 1044, 0, 0, 0, 0, 0, 1042, 0, 0,
	0, 1853, 0, 0, 1852, 1050, 1054, 1056, 1058, 1060,
	1061, 1063, 0, 1068, 1064, 1065, 1066, 1067, 3510, 1045,
	1046, 1047, 1048, 1026, 1027, 1051, 0, 1029, 0, 1030,
	1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1041, 1043,
	1039, 1040, 1049, 1152, 1153, 1154, 1151, 0, 0, 0,
	1053, 1055, 1057, 1059, 1062, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1044, 0,
	0, 0, 0, 0, 3578, 0, 0, 0, 0, 0,
	0, 0, 1845, 0, 0, 0, 0, 0, 119, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1028, 0,
	0, 0, 1636, 0, 0, 0, 0, 0, 0, 2437,
	2438, 0, 0, 0, 0, 0, 0, 1847, 1050, 1054,
	1056, 1058, 1060, 1061, 1063, 0, 1068, 1064, 1065, 1066,
	1067, 0, 1045, 1046, 1047, 1048, 1026, 1027, 1051, 0,
	1029, 3578, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037,
	1038, 1041, 1043, 1039, 1040, 1049, 0, 0, 3425, 0,
	0, 0, 0, 1053, 1055, 1057, 1059, 1062, 1822, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1044, 1872, 1872, 1872, 1872, 0, 0, 0, 0,
	0, 0, 0, 0, 1872, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3673, 0, 0,
	0, 0, 0, 0, 0, 0, 1838, 0, 0, 667,
	666, 673, 663, 0, 0, 1845, 0, 0, 0, 0,
	0, 670, 671, 1052, 672, 676, 0, 0, 658, 0,
	0, 0, 0, 0, 0, 1632, 0, 0, 681, 0,
	0, 1629, 0, 0, 0, 1631, 1628, 1630, 1634, 1635,
	1847, 0, 0, 1633, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	119, 0, 0, 0, 0, 119, 0, 1845, 0, 0,
	0, 685, 0, 0, 687, 0, 1826, 0, 0, 686,
	0, 0, 0, 0, 0, 119, 0, 1832, 0, 0,
	0, 1822, 119, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1847, 0, 0, 0, 0, 1820, 1854, 0,
	1052, 1821, 1823, 1825, 0, 1827, 1828, 1829, 1833, 1834,
	1835, 1837, 1840, 1841, 1842, 0, 0, 0, 0, 0,
	0, 0, 1830, 1839, 1831, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1822, 0, 3396, 0, 0, 0, 1838,
	0, 0, 0, 0, 0, 0, 1846, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1617, 1618, 1619, 1620,
	1621, 1622, 1623, 1624, 1625, 1626, 1627, 1639, 1640, 1641,
	1642, 1643, 1644, 1637, 1638, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1843, 0, 0, 0, 0, 0, 659, 661, 660, 0,
	0, 1838, 0, 0, 0, 0, 665, 1819, 0, 0,
	0, 0, 0, 0, 1818, 0, 0, 0, 669, 1826,
	0, 0, 0, 1052, 0, 684, 0, 119, 0, 0,
	1832, 0, 662, 0, 1872, 0, 653, 0, 1836, 0,
	0, 0, 0, 0, 0, 0, 0, 1824, 0, 0,
	1820, 1854, 119, 0, 1821, 1823, 1825, 0, 1827, 1828,
	1829, 1833, 1834, 1835, 1837, 1840, 1841, 1842, 0, 0,
	0, 0, 0, 0, 0, 1830, 1839, 1831, 0, 0,
	0, 1826, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1832, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1846,
	0, 0, 1820, 1854, 0, 0, 1821, 1823, 1825, 0,
	1827, 1828, 1829, 1833, 1834, 1835, 1837, 1840, 1841, 1842,
	0, 0, 0, 0, 0, 0, 0, 1830, 1839, 1831,
	0, 664, 668, 674, 0, 675, 677, 0, 0, 678,
	679, 680, 0, 1843, 682, 683, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1819, 1846, 0, 0, 0, 0, 0, 1818, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1836, 0, 0, 0, 0, 0, 0, 0, 0,
	1824, 0, 0, 0, 0, 1843, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1819, 0, 0, 0, 0, 0, 0, 1818,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1836, 0, 0, 0, 755, 0, 0,
	0, 0, 1824, 0, 0, 0, 361, 0, 486, 519,
	508, 591, 474, 0, 0, 0, 0, 0, 0, 708,
	0, 0, 0, 301, 0, 0, 331, 523, 505, 515,
	506, 491, 492, 493, 500, 311, 494, 495, 496, 466,
	497, 467, 498, 499, 746, 522, 473, 392, 345, 540,
	539, 0, 0, 808, 816, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 701, 0, 119, 736, 785,
	784, 723, 733, 0, 119, 274, 200, 468, 587, 470,
	469, 724, 0, 725, 729, 732, 728, 726, 727, 0,
	800, 0, 0, 0, 0, 0, 0, 693, 705, 0,
	709, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1872, 0, 0, 0, 702, 703, 0, 0, 0, 0,
	756, 0, 704, 0, 0, 751, 730, 734, 0, 0,
	0, 0, 264, 397, 414, 275, 388, 427, 280, 395,
	270, 360, 384, 0, 0, 266, 412, 394, 342, 321,
	322, 265, 0, 379, 299, 313, 296, 358, 731, 754,
	758, 295, 822, 752, 422, 268, 0, 421, 357, 408,
	413, 343, 337, 267, 410, 341, 336, 325, 303, 823,
	326, 327, 317, 369, 335, 370, 318, 347, 346, 348,
	0, 0, 0, 0, 0, 450, 451, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 581,
	749, 0, 584, 0, 424, 119, 0, 806, 0, 0,
	0, 396, 0, 0, 328, 0, 0, 0, 753, 0,
	382, 363, 819, 0, 0, 380, 333, 409, 371, 415,
	398, 423, 376, 372, 259, 399, 298, 344, 271, 273,
	293, 300, 302, 304, 305, 353, 354, 366, 387, 400,
	401, 402, 297, 281, 381, 282, 315, 283, 260, 289,
	287, 290, 389, 291, 262, 367, 406, 0, 310, 377,
	340, 263, 339, 368, 405, 404, 272, 431, 437, 438,
	527, 0, 443, 605, 606, 607, 452, 457, 458, 459,
	461, 462, 463, 464, 528, 545, 512, 482, 445, 536,
	479, 483, 484, 548, 1660, 1659, 1661, 436, 329, 330,
	0, 308, 256, 257, 601, 804, 359, 550, 583, 475,
	0, 818, 799, 801, 802, 805, 809, 810, 811, 812,
	813, 815, 817, 821, 600, 0, 529, 544, 603, 543,
	597, 365, 0, 386, 541, 488, 0, 533, 507, 0,
	534, 503, 538, 0, 477, 0, 393, 417, 429, 446,
	449, 478, 563, 564, 565, 261, 448, 567, 568, 569,
	570, 571, 572, 573, 566, 820, 510, 487, 513, 428,
	490, 489, 0, 0, 524, 757, 525, 526, 349, 350,
	351, 352, 807, 551, 279, 447, 375, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 0, 516, 517, 514,
	608, 0, 574, 575, 0, 0, 441, 442, 307, 314,
	460, 316, 278, 364, 309, 426, 323, 0, 453, 518,
	454, 577, 580, 578, 579, 356, 319, 320, 390, 324,
	334, 378, 425, 362, 383, 276, 416, 391, 338, 504,
	531, 829, 803, 828, 830, 831, 827, 832, 833, 814,
	713, 0, 761, 825, 824, 826, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 559, 558, 557,
	556, 555, 554, 553, 552, 0, 0, 501, 403, 288,
	253, 284, 285, 292, 598, 595, 407, 599, 0, 258,
	481, 332, 0, 373, 306, 546, 547, 792, 768, 769,
	770, 710, 771, 765, 766, 711, 767, 793, 759, 789,
	790, 738, 762, 772, 788, 773, 791, 794, 795, 834,
	835, 779, 763, 225, 836, 776, 796, 787, 786, 774,
	760, 797, 798, 745, 740, 777, 778, 764, 780, 781,
	782, 712, 741, 742, 743, 744, 0, 0, 0, 432,
	433, 434, 456, 418, 480, 596, 0, 0, 0, 0,
	0, 0, 0, 530, 542, 576, 0, 585, 586, 588,
	590, 783, 755, 602, 471, 472, 582, 0, 0, 0,
	0, 361, 0, 486, 519, 508, 591, 474, 0, 0,
	0, 0, 0, 0, 708, 0, 0, 0, 301, 1705,
	0, 331, 523, 505, 515, 506, 491, 492, 493, 500,
	311, 494, 495, 496, 466, 497, 467, 498, 499, 746,
	522, 473, 392, 345, 540, 539, 0, 0, 808, 816,
	0, 0, 0, 0, 0, 0, 0, 1896, 0, 0,
	701, 0, 0, 736, 785, 784, 723, 733, 0, 0,
	274, 200, 468, 587, 470, 469, 724, 0, 725, 729,
	732, 728, 726, 727, 0, 800, 0, 0, 0, 0,
	0, 0, 693, 705, 0, 709, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 702,
	703, 0, 0, 0, 0, 756, 0, 704, 0, 0,
	1897, 730, 734, 0, 0, 0, 0, 264, 397, 414,
	275, 388, 427, 280, 395, 270, 360, 384, 0, 0,
	266, 412, 394, 342, 321, 322, 265, 0, 379, 299,
	313, 296, 358, 731, 754, 758, 295, 822, 752, 422,
	268, 0, 421, 357, 408, 413, 343, 337, 267, 410,
	341, 336, 325, 303, 823, 326, 327, 317, 369, 335,
	370, 318, 347, 346, 348, 0, 0, 0, 0, 0,
	450, 451, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 581, 749, 0, 584, 0, 424,
	0, 0, 806, 0, 0, 0, 396, 0, 0, 328,
	0, 0, 0, 753, 0, 382, 363, 819, 0, 0,
	380, 333, 409, 371, 415, 398, 423, 376, 372, 259,
	399, 298, 344, 271, 273, 293, 300, 302, 304, 305,
	353, 354, 366, 387, 400, 401, 402, 297, 281, 381,
	282, 315, 283, 260, 289, 287, 290, 389, 291, 262,
	367, 406, 0, 310, 377, 340, 263, 339, 368, 405,
	404, 272, 431, 437, 438, 527, 0, 443, 605, 606,
	607, 452, 457, 458, 459, 461, 462, 463, 464, 528,
	545, 512, 482, 445, 536, 479, 483, 484, 548, 0,
	0, 0, 436, 329, 330, 0, 308, 256, 257, 601,
	804, 359, 550, 583, 475, 0, 818, 799, 801, 802,
	805, 809, 810, 811, 812, 813, 815, 817, 821, 600,
	0, 529, 544, 603, 543, 597, 365, 0, 386, 541,
	488, 0, 533, 507, 0, 534, 503, 538, 0, 477,
	0, 393, 417, 429, 446, 449, 478, 563, 564, 565,
	261, 448, 567, 568, 569, 570, 571, 572, 573, 566,
	820, 510, 487, 513, 428, 490, 489, 0, 0, 524,
	757, 525, 526, 349, 350, 351, 352, 807, 551, 279,
	447, 375, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 0, 516, 517, 514, 608, 0, 574, 575, 0,
	0, 441, 442, 307, 314, 460, 316, 278, 364, 309,
	426, 323, 0, 453, 518, 454, 577, 580, 578, 579,
	356, 319, 320, 390, 324, 334, 378, 425, 362, 383,
	276, 416, 391, 338, 504, 531, 829, 803, 828, 830,
	831, 827, 832, 833, 814, 713, 0, 761, 825, 824,
	826, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 559, 558, 557, 556, 555, 554, 553, 552,
	0, 0, 501, 403, 288, 253, 284, 285, 292, 598,
	595, 407, 599, 0, 258, 481, 332, 0, 373, 306,
	546, 547, 792, 768, 769, 770, 710, 771, 765, 766,
	711, 767, 793, 759, 789, 790, 738, 762, 772, 788,
	773, 791, 794, 795, 834, 835, 779, 763, 225, 836,
	776, 796, 787, 786, 774, 760, 797, 798, 745, 740,
	777, 778, 764, 780, 781, 782, 712, 741, 742, 743,
	744, 0, 0, 0, 432, 433, 434, 456, 418, 480,
	596, 0, 0, 0, 0, 0, 0, 0, 530, 542,
	576, 0, 585, 586, 588, 590, 783, 0, 602, 471,
	472, 582, 177, 755, 0, 0, 0, 0, 0, 0,
	0, 0, 361, 0, 486, 519, 508, 591, 474, 0,
	0, 0, 0, 0, 0, 708, 0, 0, 0, 301,
	0, 0, 331, 523, 505, 515, 506, 491, 492, 493,
	500, 311, 494, 495, 496, 466, 497, 467, 498, 499,
	1186, 522, 473, 392, 345, 540, 539, 0, 0, 808,
	816, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 701, 0, 0, 736, 785, 784, 723, 733, 0,
	0, 274, 200, 468, 587, 470, 469, 724, 0, 725,
	729, 732, 728, 726, 727, 0, 800, 0, 0, 0,
	0, 0, 0, 693, 705, 0, 709, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	702, 703, 0, 0, 0, 0, 756, 0, 704, 0,
	0, 751, 730, 734, 0, 0, 0, 0, 264, 397,
	414, 275, 388, 427, 280, 395, 270, 360, 384, 0,
	0, 266, 412, 394, 342, 321, 322, 265, 0, 379,
	299, 313, 296, 358, 731, 754, 758, 295, 822, 752,
	422, 268, 0, 421, 357, 408, 413, 343, 337, 267,
	410, 341, 336, 325, 303, 823, 326, 327, 317, 369,
	335, 370, 318, 347, 346, 348, 0, 0, 0, 0,
	0, 450, 451, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 581, 749, 0, 584, 0,
	424, 0, 0, 806, 0, 0, 0, 396, 0, 0,
	328, 0, 0, 0, 753, 0, 382, 363, 819, 0,
	0, 380, 333, 409, 371, 415, 398, 423, 376, 372,
	259, 399, 298, 344, 271, 273, 293, 300, 302, 304,
	305, 353, 354, 366, 387, 400, 401, 402, 297, 281,
	381, 282, 315, 283, 260, 289, 287, 290, 389, 291,
	262, 367, 406, 0, 310, 377, 340, 263, 339, 368,
	405, 404, 272, 431, 437, 438, 527, 0, 443, 605,
	606, 607, 452, 457, 458, 459, 461, 462, 463, 464,
	528, 545, 512, 482, 445, 536, 479, 483, 484, 548,
	0, 0, 0, 436, 329, 330, 0, 308, 256, 257,
	601, 804, 359, 550, 583, 475, 0, 818, 799, 801,
	802, 805, 809, 810, 811, 812, 813, 815, 817, 821,
	600, 0, 529, 544, 603, 543, 597, 365, 0, 386,
	541, 488, 0, 533, 507, 0, 534, 503, 538, 0,
	477, 0, 393, 417, 429, 446, 449, 478, 563, 564,
	565, 261, 448, 567, 568, 569, 570, 571, 572, 573,
	566, 820, 510, 487, 513, 428, 490, 489, 0, 0,
	524, 757, 525, 526, 349, 350, 351, 352, 807, 551,
	279, 447, 375, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 0, 516, 517, 514, 608, 0, 574, 575,
	0, 0, 441, 442, 307, 314, 460, 316, 278, 364,
	309, 426, 323, 0, 453, 518, 454, 577, 580, 578,
	579, 356, 319, 320, 390, 324, 334, 378, 425, 362,
	383, 276, 416, 391, 338, 504, 531, 829, 803, 828,
	830, 831, 827, 832, 833, 814, 713, 0, 761, 825,
	824, 826, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 559, 558, 557, 556, 555, 554, 553,
	552, 0, 0, 501, 403, 288, 253, 284, 285, 292,
	598, 595, 407, 599, 0, 258, 481, 332, 141, 373,
	306, 546, 547, 792, 768, 769, 770, 710, 771, 765,
	766, 711, 767, 793, 759, 789, 790, 738, 762, 772,
	788, 773, 791, 794, 795, 834, 835, 779, 763, 225,
	836, 776, 796, 787, 786, 774, 760, 797, 798, 745,
	740, 777, 778, 764, 780, 781, 782, 712, 741, 742,
	743, 744, 0, 0, 0, 432, 433, 434, 456, 418,
	480, 596, 0, 0, 0, 0, 0, 0, 0, 530,
	542, 576, 0, 585, 586, 588, 590, 783, 755, 602,
	471, 472, 582, 0, 0, 0, 0, 361, 0, 486,
	519, 508, 591, 474, 0, 0, 0, 0, 0, 0,
	708, 0, 0, 0, 301, 3672, 0, 331, 523, 505,
	515, 506, 491, 492, 493, 500, 311, 494, 495, 496,
	466, 497, 467, 498, 499, 746, 522, 473, 392, 345,
	540, 539, 0, 0, 808, 816, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 701, 0, 0, 736,
	785, 784, 723, 733, 0, 0, 274, 200, 468, 587,
	470, 469, 724, 0, 725, 729, 732, 728, 726, 727,
	0, 800, 0, 0, 0, 0, 0, 0, 693, 705,
	0, 709, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 702, 703, 0, 0, 0,
	0, 756, 0, 704, 0, 0, 751, 730, 734, 0,
	0, 0, 0, 264, 397, 414, 275, 388, 427, 280,
	395, 270, 360, 384, 0, 0, 266, 412, 394, 342,
	321, 322, 265, 0, 379, 299, 313, 296, 358, 731,
	754, 758, 295, 822, 752, 422, 268, 0, 421, 357,
	408, 413, 343, 337, 267, 410, 341, 336, 325, 303,
	823, 326, 327, 317, 369, 335, 370, 318, 347, 346,
	348, 0, 0, 0, 0, 0, 450, 451, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	581, 749, 0, 584, 0, 424, 0, 0, 806, 0,
	0, 0, 396, 0, 0, 328, 0, 0, 0, 753,
	0, 382, 363, 819, 0, 0, 380, 333, 409, 371,
	415, 398, 423, 376, 372, 259, 399, 298, 344, 271,
	273, 293, 300, 302, 304, 305, 353, 354, 366, 387,
	400, 401, 402, 297, 281, 381, 282, 315, 283, 260,
	289, 287, 290, 389, 291, 262, 367, 406, 0, 310,
	377, 340, 263, 339, 368, 405, 404, 272, 431, 437,
	438, 527, 0, 443, 605, 606, 607, 452, 457, 458,
	459, 461, 462, 463, 464, 528, 545, 512, 482, 445,
	536, 479, 483, 484, 548, 0, 0, 0, 436, 329,
	330, 0, 308, 256, 257, 601, 804, 359, 550, 583,
	475, 0, 818, 799, 801, 802, 805, 809, 810, 811,
	812, 813, 815, 817, 821, 600, 0, 529, 544, 603,
	543, 597, 365, 0, 386, 541, 488, 0, 533, 507,
	0, 534, 503, 538, 0, 477, 0, 393, 417, 429,
	446, 449, 478, 563, 564, 565, 261, 448, 567, 568,
	569, 570, 571, 572, 573, 566, 820, 510, 487, 513,
	428, 490, 489, 0, 0, 524, 757, 525, 526, 349,
	350, 351, 352, 807, 551, 279, 447, 375, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 0, 516, 517,
	514, 608, 0, 574, 575, 0, 0, 441, 442, 307,
	314, 460, 316, 278, 364, 309, 426, 323, 0, 453,
	518, 454, 577, 580, 578, 579, 356, 319, 320, 390,
	324, 334, 378, 425, 362, 383, 276, 416, 391, 338,
	504, 531, 829, 803, 828, 830, 831, 827, 832, 833,
	814, 713, 0, 761, 825, 824, 826, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 559, 558,
	557, 556, 555, 554, 553, 552, 0, 0, 501, 403,
	288, 253, 284, 285, 292, 598, 595, 407, 599, 0,
	258, 481, 332, 0, 373, 306, 546, 547, 792, 768,
	769, 770, 710, 771, 765, 766, 711, 767, 793, 759,
	789, 790, 738, 762, 772, 788, 773, 791, 794, 795,
	834, 835, 779, 763, 225, 836, 776, 796, 787, 786,
	774, 760, 797, 798, 745, 740, 777, 778, 764, 780,
	781, 782, 712, 741, 742, 743, 744, 0, 0, 0,
	432, 433, 434, 456, 418, 480, 596, 0, 0, 0,
	0, 0, 0, 0, 530, 542, 576, 0, 585, 586,
	588, 590, 783, 755, 602, 471, 472, 582, 0, 0,
	0, 0, 361, 0, 486, 519, 508, 591, 474, 0,
	0, 0, 0, 0, 0, 708, 0, 0, 0, 301,
	0, 0, 331, 523, 505, 515, 506, 491, 492, 493,
	500, 311, 494, 495, 496, 466, 497, 467, 498, 499,
	746, 522, 473, 392, 345, 540, 539, 0, 0, 808,
	816, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 701, 0, 0, 736, 785, 784, 723, 733, 0,
	0, 274, 200, 468, 587, 470, 469, 724, 0, 725,
	729, 732, 728, 726, 727, 0, 800, 0, 0, 0,
	0, 0, 0, 693, 705, 0, 709, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	702, 703, 0, 0, 0, 0, 756, 0, 704, 0,
	0, 751, 730, 734, 0, 0, 0, 0, 264, 397,
	414, 275, 388, 427, 280, 395, 270, 360, 384, 0,
	0, 266, 412, 394, 342, 321, 322, 265, 0, 379,
	299, 313, 296, 358, 731, 754, 758, 295, 822, 752,
	422, 268, 0, 421, 357, 408, 413, 343, 337, 267,
	410, 341, 336, 325, 303, 823, 326, 327, 317, 369,
	335, 370, 318, 347, 346, 348, 0, 0, 0, 0,
	0, 450, 451, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 581, 749, 0, 584, 0,
	424, 0, 0, 806, 0, 0, 0, 396, 0, 0,
	328, 0, 0, 0, 753, 0, 382, 363, 819, 3579,
	0, 380, 333, 409, 371, 415, 398, 423, 376, 372,
	259, 399, 298, 344, 271, 273, 293, 300, 302, 304,
	305, 353, 354, 366, 387, 400, 401, 402, 297, 281,
	381, 282, 315, 283, 260, 289, 287, 290, 389, 291,
	262, 367, 406, 0, 310, 377, 340, 263, 339, 368,
	405, 404, 272, 431, 437, 438, 527, 0, 443, 605,
	606, 607, 452, 457, 458, 459, 461, 462, 463, 464,
	528, 545, 512, 482, 445, 536, 479, 483, 484, 548,
	0, 0, 0, 436, 329, 330, 0, 308, 256, 257,
	601, 804, 359, 550, 583, 475, 0, 818, 799, 801,
	802, 805, 809, 810, 811, 812, 813, 815, 817, 821,
	600, 0, 529, 544, 603, 543, 597, 365, 0, 386,
	541, 488, 0, 533, 507, 0, 534, 503, 538, 0,
	477, 0, 393, 417, 429, 446, 449, 478, 563, 564,
	565, 261, 448, 567, 568, 569, 570, 571, 572, 573,
	566, 820, 510, 487, 513, 428, 490, 489, 0, 0,
	524, 757, 525, 526, 349, 350, 351, 352, 807, 551,
	279, 447, 375, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 0, 516, 517, 514, 608, 0, 574, 575,
	0, 0, 441, 442, 307, 314, 460, 316, 278, 364,
	309, 426, 323, 0, 453, 518, 454, 577, 580, 578,
	579, 356, 319, 320, 390, 324, 334, 378, 425, 362,
	383, 276, 416, 391, 338, 504, 531, 829, 803, 828,
	830, 831, 827, 832, 833, 814, 713, 0, 761, 825,
	824, 826, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 559, 558, 557, 556, 555, 554, 553,
	552, 0, 0, 501, 403, 288, 253, 284, 285, 292,
	598, 595, 407, 599, 0, 258, 481, 332, 0, 373,
	306, 546, 547, 792, 768, 769, 770, 710, 771, 765,
	766, 711, 767, 793, 759, 789, 790, 738, 762, 772,
	788, 773, 791, 794, 795, 834, 835, 779, 763, 225,
	836, 776, 796, 787, 786, 774, 760, 797, 798, 745,
	740, 777, 778, 764, 780, 781, 782, 712, 741, 742,
	743, 744, 0, 0, 0, 432, 433, 434, 456, 418,
	480, 596, 0, 0, 0, 0, 0, 0, 0, 530,
	542, 576, 0, 585, 586, 588, 590, 783, 755, 602,
	471, 472, 582, 0, 0, 0, 0, 361, 0, 486,
	519, 508, 591, 474, 0, 0, 0, 0, 0, 0,
	708, 0, 0, 0, 301, 1705, 0, 331, 523, 505,
	515, 506, 491, 492, 493, 500, 311, 494, 495, 496,
	466, 497, 467, 498, 499, 746, 522, 473, 392, 345,
	540, 539, 0, 0, 808, 816, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 701, 0, 0, 736,
	785, 784, 723, 733, 0, 0, 274, 200, 468, 587,
	470, 469, 724, 0, 725, 729, 732, 728, 726, 727,
	0, 800, 0, 0, 0, 0, 0, 0, 693, 705,
	0, 709, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 702, 703, 0, 0, 0,
	0, 756, 0, 704, 0, 0, 751, 730, 734, 0,
	0, 0, 0, 264, 397, 414, 275, 388, 427, 280,
	395, 270, 360, 384, 0, 0, 266, 412, 394, 342,
	321, 322, 265, 0, 379, 299, 313, 296, 358, 731,
	754, 758, 295, 822, 752, 422, 268, 0, 421, 357,
	408, 413, 343, 337, 267, 410, 341, 336, 325, 303,
	823, 326, 327, 317, 369, 335, 370, 318, 347, 346,
	348, 0, 0, 0, 0, 0, 450, 451, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	581, 749, 0, 584, 0, 424, 0, 0, 806, 0,
	0, 0, 396, 0, 0, 328, 0, 0, 0, 753,
	0, 382, 363, 819, 0, 0, 380, 333, 409, 371,
	415, 398, 423, 376, 372, 259, 399, 298, 344, 271,
	273, 293, 300, 302, 304, 305, 353, 354, 366, 387,
	400, 401, 402, 297, 281, 381, 282, 315, 283, 260,
	289, 287, 290, 389, 291, 262, 367, 406, 0, 310,
	377, 340, 263, 339, 368, 405, 404, 272, 431, 437,
	438, 527, 0, 443, 605, 606, 607, 452, 457, 458,
	459, 461, 462, 463, 464, 528, 545, 512, 482, 445,
	536, 479, 483, 484, 548, 0, 0, 0, 436, 329,
	330, 0, 308, 256, 257, 601, 804, 359, 550, 583,
	475, 0, 818, 799, 801, 802, 805, 809, 810, 811,
	812, 813, 815, 817, 821, 600, 0, 529, 544, 603,
	543, 597, 365, 0, 386, 541, 488, 0, 533, 507,
	0, 534, 503, 538, 0, 477, 0, 393, 417, 429,
	446, 449, 478, 563, 564, 565, 261, 448, 567, 568,
	569, 570, 571, 572, 573, 566, 820, 510, 487, 513,
	428, 490, 489, 0, 0, 524, 757, 525, 526, 349,
	350, 351, 352, 807, 551, 279, 447, 375, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 0, 516, 517,
	514, 608, 0, 574, 575, 0, 0, 441, 442, 307,
	314, 460, 316, 278, 364, 309, 426, 323, 0, 453,
	518, 454, 577, 580, 578, 579, 356, 319, 320, 390,
	324, 334, 378, 425, 362, 383, 276, 416, 391, 338,
	504, 531, 829, 803, 828, 830, 831, 827, 832, 833,
	814, 713, 0, 761, 825, 824, 826, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 559, 558,
	557, 556, 555, 554, 553, 552, 0, 0, 501, 403,
	288, 253, 284, 285, 292, 598, 595, 407, 599, 0,
	258, 481, 332, 0, 373, 306, 546, 547, 792, 768,
	769, 770, 710, 771, 765, 766, 711, 767, 793, 759,
	789, 790, 738, 762, 772, 788, 773, 791, 794, 795,
	834, 835, 779, 763, 225, 836, 776, 796, 787, 786,
	774, 760, 797, 798, 745, 740, 777, 778, 764, 780,
	781, 782, 712, 741, 742, 743, 744, 0, 0, 0,
	432, 433, 434, 456, 418, 480, 596, 0, 0, 0,
	0, 0, 0, 0, 530, 542, 576, 0, 585, 586,
	588, 590, 783, 755, 602, 471, 472, 582, 0, 0,
	0, 0, 361, 0, 486, 519, 508, 591, 474, 0,
	0, 0, 0, 0, 0, 708, 0, 0, 0, 301,
	0, 0, 331, 523, 505, 515, 506, 491, 492, 493,
	500, 311, 494, 495, 496, 466, 497, 467, 498, 499,
	746, 522, 473, 392, 345, 540, 539, 0, 0, 808,
	816, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 701, 0, 0, 736, 785, 784, 723, 733, 0,
	0, 274, 200, 468, 587, 470, 469, 724, 0, 725,
	729, 732, 728, 726, 727, 0, 800, 0, 0, 0,
	0, 0, 0, 693, 705, 0, 709, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	702, 703, 1445, 0, 0, 0, 756, 0, 704, 0,
	0, 751, 730, 734, 0, 0, 0, 0, 264, 397,
	414, 275, 388, 427, 280, 395, 270, 360, 384, 0,
	0, 266, 412, 394, 342, 321, 322, 265, 0, 379,
	299, 313, 296, 358, 731, 754, 758, 295, 822, 752,
	422, 268, 0, 421, 357, 408, 413, 343, 337, 267,
	410, 341, 336, 325, 303, 823, 326, 327, 317, 369,
	335, 370, 318, 347, 346, 348, 0, 0, 0, 0,
	0, 450, 451, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 581, 749, 0, 584, 0,
	424, 0, 0, 806, 0, 0, 0, 396, 0, 0,
	328, 0, 0, 0, 753, 0, 382, 363, 819, 0,
	0, 380, 333, 409, 371, 415, 398, 423, 376, 372,
	259, 399, 298, 344, 271, 273, 293, 300, 302, 304,
	305, 353, 354, 366, 387, 400, 401, 402, 297, 281,
	381, 282, 315, 283, 260, 289, 287, 290, 389, 291,
	262, 367, 406, 0, 310, 377, 340, 263, 339, 368,
	405, 404, 272, 431, 437, 438, 527, 0, 443, 605,
	606, 607, 452, 457, 458, 459, 461, 462, 463, 464,
	528, 545, 512, 482, 445, 536, 479, 483, 484, 548,
	0, 0, 0, 436, 329, 330, 0, 308, 256, 257,
	601, 804, 359, 550, 583, 475, 0, 818, 799, 801,
	802, 805, 809, 810, 811, 812, 813, 815, 817, 821,
	600, 0, 529, 544, 603, 543, 597, 365, 0, 386,
	541, 488, 0, 533, 507, 0, 534, 503, 538, 0,
	477, 0, 393, 417, 429, 446, 449, 478, 563, 564,
	565, 261, 448, 567, 568, 569, 570, 571, 572, 573,
	566, 820, 510, 487, 513, 428, 490, 489, 0, 0,
	524, 757, 525, 526, 349, 350, 351, 352, 807, 551,
	279, 447, 375, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 0, 516, 517, 514, 608, 0, 574, 575,
	0, 0, 441, 442, 307, 314, 460, 316, 278, 364,
	309, 426, 323, 0, 453, 518, 454, 577, 580, 578,
	579, 356, 319, 320, 390, 324, 334, 378, 425, 362,
	383, 276, 416, 391, 338, 504, 531, 829, 803, 828,
	830, 831, 827, 832, 833, 814, 713, 0, 761, 825,
	824, 826, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 559, 558, 557, 556, 555, 554, 553,
	552, 0, 0, 501, 403, 288, 253, 284, 285, 292,
	598, 595, 407, 599, 0, 258, 481, 332, 0, 373,
	306, 546, 547, 792, 768, 769, 770, 710, 771, 765,
	766, 711, 767, 793, 759, 789, 790, 738, 762, 772,
	788, 773, 791, 794, 795, 834, 835, 779, 763, 225,
	836, 776, 796, 787, 786, 774, 760, 797, 798, 745,
	740, 777, 778, 764, 780, 781, 782, 712, 741, 742,
	743, 744, 0, 0, 0, 432, 433, 434, 456, 418,
	480, 596, 0, 0, 0, 0, 0, 0, 0, 530,
	542, 576, 0, 585, 586, 588, 590, 783, 0, 602,
	471, 472, 582, 755, 0, 0, 2059, 0, 0, 0,
	0, 0, 361, 0, 486, 519, 508, 591, 474, 0,
	0, 0, 0, 0, 0, 708, 0, 0, 0, 301,
	0, 0, 331, 523, 505, 515, 506, 491, 492, 493,
	500, 311, 494, 495, 496, 466, 497, 467, 498, 499,
	746, 522, 473, 392, 345, 540, 539, 0, 0, 808,
	816, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 701, 0, 0, 736, 785, 784, 723, 733, 0,
	0, 274, 200, 468, 587, 470, 469, 724, 0, 725,
	729, 732, 728, 726, 727, 0, 800, 0, 0, 0,
	0, 0, 0, 693, 705, 0, 709, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	702, 703, 0, 0, 0, 0, 756, 0, 704, 0,
	0, 751, 730, 734, 0, 0, 0, 0, 264, 397,
	414, 275, 388, 427, 280, 395, 270, 360, 384, 0,
	0, 266, 412, 394, 342, 321, 322, 265, 0, 379,
	299, 313, 296, 358, 731, 754, 758, 295, 822, 752,
	422, 268, 0, 421, 357, 408, 413, 343, 337, 267,
	410, 341, 336, 325, 303, 823, 326, 327, 317, 369,
	335, 370, 318, 347, 346, 348, 0, 0, 0, 0,
	0, 450, 451, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 581, 749, 0, 584, 0,
	424, 0, 0, 806, 0, 0, 0, 396, 0, 0,
	328, 0, 0, 0, 753, 0, 382, 363, 819, 0,
	0, 380, 333, 409, 371, 415, 398, 423, 376, 372,
	259, 399, 298, 344, 271, 273, 293, 300, 302, 304,
	305, 353, 354, 366, 387, 400, 401, 402, 297, 281,
	381, 282, 315, 283, 260, 289, 287, 290, 389, 291,
	262, 367, 406, 0, 310, 377, 340, 263, 339, 368,
	405, 404, 272, 431, 437, 438, 527, 0, 443, 605,
	606, 607, 452, 457, 458, 459, 461, 462, 463, 464,
	528, 545, 512, 482, 445, 536, 479, 483, 484, 548,
	0, 0, 0, 436, 329, 330, 0, 308, 256, 257,
	601, 804, 359, 550, 583, 475, 0, 818, 799, 801,
	802, 805, 809, 810, 811, 812, 813, 815, 817, 821,
	600, 0, 529, 544, 603, 543, 597, 365, 0, 386,
	541, 488, 0, 533, 507, 0, 534, 503, 538, 0,
	477, 0, 393, 417, 429, 446, 449, 478, 563, 564,
	565, 261, 448, 567, 568, 569, 570, 571, 572, 573,
	566, 820, 510, 487, 513, 428, 490, 489, 0, 0,
	524, 757, 525, 526, 349, 350, 351, 352, 807, 551,
	279, 447, 375, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 0, 516, 517, 514, 608, 0, 574, 575,
	0, 0, 441, 442, 307, 314, 460, 316, 278, 364,
	309, 426, 323, 0, 453, 518, 454, 577, 580, 578,
	579, 356, 319, 320, 390, 324, 334, 378, 425, 362,
	383, 276, 416, 391, 338, 504, 531, 829, 803, 828,
	830, 831, 827, 832, 833, 814, 713, 0, 761, 825,
	824, 826, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 559, 558, 557, 556, 555, 554, 553,
	552, 0, 0, 501, 403, 288, 253, 284, 285, 292,
	598, 595, 407, 599, 0, 258, 481, 332, 0, 373,
	306, 546, 547, 792, 768, 769, 770, 710, 771, 765,
	766, 711, 767, 793, 759, 789, 790, 738, 762, 772,
	788, 773, 791, 794, 795, 834, 835, 779, 763, 225,
	836, 776, 796, 787, 786, 774, 760, 797, 798, 745,
	740, 777, 778, 764, 780, 781, 782, 712, 741, 742,
	743, 744, 0, 0, 0, 432, 433, 434, 456, 418,
	480, 596, 0, 0, 0, 0, 0, 0, 0, 530,
	542, 576, 0, 585, 586, 588, 590, 783, 755, 602,
	471, 472, 582, 0, 0, 0, 0, 361, 0, 486,
	519, 508, 591, 474, 0, 0, 0, 0, 0, 0,
	708, 0, 0, 0, 301, 0, 0, 331, 523, 505,
	515, 506, 491, 492, 493, 500, 311, 494, 495, 496,
	466, 497, 467, 498, 499, 746, 522, 473, 392, 345,
	540, 539, 0, 0, 808, 816, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 701, 0, 0, 736,
	785, 784, 723, 733, 0, 0, 274, 200, 468, 587,
	470, 469, 724, 0, 725, 729, 732, 728, 726, 727,
	0, 800, 0, 0, 0, 0, 0, 0, 693, 705,
	0, 709, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 702, 703, 1698, 0, 0,
	0, 756, 0, 704, 0, 0, 751, 730, 734, 0,
	0, 0, 0, 264, 397, 414, 275, 388, 427, 280,
	395, 270, 360, 384, 0, 0, 266, 412, 394, 342,
	321, 322, 265, 0, 379, 299, 313, 296, 358, 731,
	754, 758, 295, 822, 752, 422, 268, 0, 421, 357,
	408, 413, 343, 337, 267, 410, 341, 336, 325, 303,
	823, 326, 327, 317, 369, 335, 370, 318, 347, 346,
	348, 0, 0, 0, 0, 0, 450, 451, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	581, 749, 0, 584, 0, 424, 0, 0, 806, 0,
	0, 0, 396, 0, 0, 328, 0, 0, 0, 753,
	0, 382, 363, 819, 0, 0, 380, 333, 409, 371,
	415, 398, 423, 376, 372, 259, 399, 298, 344, 271,
	273, 293, 300, 302, 304, 305, 353, 354, 366, 387,
	400, 401, 402, 297, 281, 381, 282, 315, 283, 260,
	289, 287, 290, 389, 291, 262, 367, 406, 0, 310,
	377, 340, 263, 339, 368, 405, 404, 272, 431, 437,
	438, 527, 0, 443, 605, 606, 607, 452, 457, 458,
	459, 461, 462, 463, 464, 528, 545, 512, 482, 445,
	536, 479, 483, 484, 548, 0, 0, 0, 436, 329,
	330, 0, 308, 256, 257, 601, 804, 359, 550, 583,
	475, 0, 818, 799, 801, 802, 805, 809, 810, 811,
	812, 813, 815, 817, 821, 600, 0, 529, 544, 603,
	543, 597, 365, 0, 386, 541, 488, 0, 533, 507,
	0, 534, 503, 538, 0, 477, 0, 393, 417, 429,
	446, 449, 478, 563, 564, 565, 261, 448, 567, 568,
	569, 570, 571, 572, 573, 566, 820, 510, 487, 513,
	428, 490, 489, 0, 0, 524, 757, 525, 526, 349,
	350, 351, 352, 807, 551, 279, 447, 375, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 0, 516, 517,
	514, 608, 0, 574, 575, 0, 0, 441, 442, 307,
	314, 460, 316, 278, 364, 309, 426, 323, 0, 453,
	518, 454, 577, 580, 578, 579, 356, 319, 320, 390,
	324, 334, 378, 425, 362, 383, 276, 416, 391, 338,
	504, 531, 829, 803, 828, 830, 831, 827, 832, 833,
	814, 713, 0, 761, 825, 824, 826, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 559, 558,
	557, 556, 555, 554, 553, 552, 0, 0, 501, 403,
	288, 253, 284, 285, 292, 598, 595, 407, 599, 0,
	258, 481, 332, 0, 373, 306, 546, 547, 792, 768,
	769, 770, 710, 771, 765, 766, 711, 767, 793, 759,
	789, 790, 738, 762, 772, 788, 773, 791, 794, 795,
	834, 835, 779, 763, 225, 836, 776, 796, 787, 786,
	774, 760, 797, 798, 745, 740, 777, 778, 764, 780,
	781, 782, 712, 741, 742, 743, 744, 0, 0, 0,
	432, 433, 434, 456, 418, 480, 596, 0, 0, 0,
	0, 0, 0, 0, 530, 542, 576, 0, 585, 586,
	588, 590, 783, 755, 602, 471, 472, 582, 0, 0,
	0, 0, 361, 0, 486, 519, 508, 591, 474, 0,
	0, 0, 0, 0, 0, 708, 0, 0, 0, 301,
	0, 0, 331, 523, 505, 515, 506, 491, 492, 493,
	500, 311, 494, 495, 496, 466, 497, 467, 498, 499,
	746, 522, 473, 392, 345, 540, 539, 0, 0, 808,
	816, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 701, 0, 0, 736, 785, 784, 723, 733, 0,
	0, 274, 200, 468, 587, 470, 469, 724, 0, 725,
	729, 732, 728, 726, 727, 0, 800, 0, 0, 0,
	0, 0, 0, 693, 705, 0, 709, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	702, 703, 0, 0, 0, 0, 756, 0, 704, 0,
	0, 751, 730, 734, 0, 0, 0, 0, 264, 397,
	414, 275, 388, 427, 280, 395, 270, 360, 384, 0,
	0, 266, 412, 394, 342, 321, 322, 265, 0, 379,
	299, 313, 296, 358, 731, 754, 758, 295, 822, 752,
	422, 268, 0, 421, 357, 408, 413, 343, 337, 267,
	410, 341, 336, 325, 303, 823, 326, 327, 317, 369,
	335, 370, 318, 347, 346, 348, 0, 0, 0, 0,
	0, 450, 451, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 581, 749, 0, 584, 0,
	424, 0, 0, 806, 0, 0, 0, 396, 0, 0,
	328, 0, 0, 0, 753, 0, 382, 363, 819, 0,
	0, 380, 333, 409, 371, 415, 398, 423, 376, 372,
	259, 399, 298, 344, 271, 273, 293, 300, 302, 304,
	305, 353, 354, 366, 387, 400, 401, 402, 297, 281,
	381, 282, 315, 283, 260, 289, 287, 290, 389, 291,
	262, 367, 406, 0, 310, 377, 340, 263, 339, 368,
	405, 404, 272, 431, 437, 438, 527, 0, 443, 605,
	606, 607, 452, 457, 458, 459, 461, 462, 463, 464,
	528, 545, 512, 482, 445, 536, 479, 483, 484, 548,
	0, 0, 0, 436, 329, 330, 0, 308, 256, 257,
	601, 804, 359, 550, 583, 475, 0, 818, 799, 801,
	802, 805, 809, 810, 811, 812, 813, 815, 817, 821,
	600, 0, 529, 544, 603, 543, 597, 365, 0, 386,
	541, 488, 0, 533, 507, 0, 534, 503, 538, 0,
	477, 0, 393, 417, 429, 446, 449, 478, 563, 564,
	565, 261, 448, 567, 568, 569, 570, 571, 572, 573,
	566, 820, 510, 487, 513, 428, 490, 489, 0, 0,
	524, 757, 525, 526, 349, 350, 351, 352, 807, 551,
	279, 447, 375, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 0, 516, 517, 514, 608, 0, 574, 575,
	0, 0, 441, 442, 307, 314, 460, 316, 278, 364,
	309, 426, 323, 0, 453, 518, 454, 577, 580, 578,
	579, 356, 319, 320, 390, 324, 334, 378, 425, 362,
	383, 276, 416, 391, 338, 504, 531, 829, 803, 828,
	830, 831, 827, 832, 833, 814, 713, 0, 761, 825,
	824, 826, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 559, 558, 557, 556, 555, 554, 553,
	552, 0, 0, 501, 403, 288, 253, 284, 285, 292,
	598, 595, 407, 599, 0, 258, 481, 332, 0, 373,
	306, 546, 547, 792, 768, 769, 770, 710, 771, 765,
	766, 711, 767, 793, 759, 789, 790, 738, 762, 772,
	788, 773, 791, 794, 795, 834, 835, 779, 763, 225,
	836, 776, 796, 787, 786, 774, 760, 797, 798, 745,
	740, 777, 778, 764, 780, 781, 782, 712, 741, 742,
	743, 744, 0, 0, 0, 432, 433, 434, 456, 418,
	480, 596, 0, 0, 0, 0, 0, 0, 0, 530,
	542, 576, 0, 585, 586, 588, 590, 783, 755, 602,
	471, 472, 582, 0, 0, 0, 0, 361, 0, 486,
	519, 508, 591, 474, 0, 0, 0, 0, 0, 0,
	708, 0, 0, 0, 301, 0, 0, 331, 523, 505,
	515, 506, 491, 492, 493, 500, 311, 494, 495, 496,
	466, 497, 467, 498, 499, 746, 522, 473, 392, 345,
	540, 539, 0, 0, 808, 816, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 701, 0, 0, 736,
	785, 784, 723, 733, 0, 0, 274, 200, 468, 587,
	470, 469, 2487, 0, 2488, 729, 732, 728, 726, 727,
	0, 800, 0, 0, 0, 0, 0, 0, 693, 705,
	0, 709, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 702, 703, 0, 0, 0,
	0, 756, 0, 704, 0, 0, 751, 730, 734, 0,
	0, 0, 0, 264, 397, 414, 275, 388, 427, 280,
	395, 270, 360, 384, 0, 0, 266, 412, 394, 342,
	321, 322, 265, 0, 379, 299, 313, 296, 358, 731,
	754, 758, 295, 822, 752, 422, 268, 0, 421, 357,
	408, 413, 343, 337, 267, 410, 341, 336, 325, 303,
	823, 326, 327, 317, 369, 335, 370, 318, 347, 346,
	348, 0, 0, 0, 0, 0, 450, 451, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	581, 749, 0, 584, 0, 424, 0, 0, 806, 0,
	0, 0, 396, 0, 0, 328, 0, 0, 0, 753,
	0, 382, 363, 819, 0, 0, 380, 333, 409, 371,
	415, 398, 423, 376, 372, 259, 399, 298, 344, 271,
	273, 293, 300, 302, 304, 305, 353, 354, 366, 387,
	400, 401, 402, 297, 281, 381, 282, 315, 283, 260,
	289, 287, 290, 389, 291, 262, 367, 406, 0, 310,
	377, 340, 263, 339, 368, 405, 404, 272, 431, 437,
	438, 527, 0, 443, 605, 606, 607, 452, 457, 458,
	459, 461, 462, 463, 464, 528, 545, 512, 482, 445,
	536, 479, 483, 484, 548, 0, 0, 0, 436, 329,
	330, 0, 308, 256, 257, 601, 804, 359, 550, 583,
	475, 0, 818, 799, 801, 802, 805, 809, 810, 811,
	812, 813, 815, 817, 821, 600, 0, 529, 544, 603,
	543, 597, 365, 0, 386, 541, 488, 0, 533, 507,
	0, 534, 503, 538, 0, 477, 0, 393, 417, 429,
	446, 449, 478, 563, 564, 565, 261, 448, 567, 568,
	569, 570, 571, 572, 573, 566, 820, 510, 487, 513,
	428, 490, 489, 0, 0, 524, 757, 525, 526, 349,
	350, 351, 352, 807, 551, 279, 447, 375, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 0, 516, 517,
	514, 608, 0, 574, 575, 0, 0, 441, 442, 307,
	314, 460, 316, 278, 364, 309, 426, 323, 0, 453,
	518, 454, 577, 580, 578, 579, 356, 319, 320, 390,
	324, 334, 378, 425, 362, 383, 276, 416, 391, 338,
	504, 531, 829, 803, 828, 830, 831, 827, 832, 833,
	814, 713, 0, 761, 825, 824, 826, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 559, 558,
	557, 556, 555, 554, 553, 552, 0, 0, 501, 403,
	288, 253, 284, 285, 292, 598, 595, 407, 599, 0,
	258, 481, 332, 0, 373, 306, 546, 547, 792, 768,
	769, 770, 710, 771, 765, 766, 711, 767, 793, 759,
	789, 790, 738, 762, 772, 788, 773, 791, 794, 795,
	834, 835, 779, 763, 225, 836, 776, 796, 787, 786,
	774, 760, 797, 798, 745, 740, 777, 778, 764, 780,
	781, 782, 712, 741, 742, 743, 744, 0, 0, 0,
	432, 433, 434, 456, 418, 480, 596, 0, 0, 0,
	0, 0, 0, 0, 530, 542, 576, 0, 585, 586,
	588, 590, 783, 755, 602, 471, 472, 582, 0, 0,
	0, 0, 361, 0, 486, 519, 508, 591, 474, 0,
	0, 1577, 0, 0, 0, 708, 0, 0, 0, 301,
	0, 0, 331, 523, 505, 515, 506, 491, 492, 493,
	500, 311, 494, 495, 496, 466, 497, 467, 498, 499,
	746, 522, 473, 392, 345, 540, 539, 0, 0, 808,
	816, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 701, 0, 0, 736, 785, 784, 723, 733, 0,
	0, 274, 200, 468, 587, 470, 469, 724, 0, 725,
	729, 732, 728, 726, 727, 0, 800, 0, 0, 0,
	0, 0, 0, 0, 705, 0, 709, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	702, 703, 0, 0, 0, 0, 756, 0, 704, 0,
	0, 751, 730, 734, 0, 0, 0, 0, 264, 397,
	414, 275, 388, 427, 280, 395, 270, 360, 384, 0,
	0, 266, 412, 394, 342, 321, 322, 265, 0, 379,
	299, 313, 296, 358, 731, 754, 758, 295, 822, 752,
	422, 268, 0, 421, 357, 408, 413, 343, 337, 267,
	410, 341, 336, 325, 303, 823, 326, 327, 317, 369,
	335, 370, 318, 347, 346, 348, 0, 0, 0, 0,
	0, 450, 451, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 581, 749, 0, 584, 0,
	424, 0, 0, 806, 0, 0, 0, 396, 0, 0,
	328, 0, 0, 0, 753, 0, 382, 363, 819, 0,
	0, 380, 333, 409, 371, 415, 398, 423, 376, 372,
	259, 399, 298, 344, 271, 273, 293, 300, 302, 304,
	305, 353, 354, 366, 387, 400, 401, 402, 297, 281,
	381, 282, 315, 283, 260, 289, 287, 290, 389, 291,
	262, 367, 406, 0, 310, 377, 340, 263, 339, 368,
	405, 404, 272, 431, 1578, 1579, 527, 0, 443, 605,
	606, 607, 452, 457, 458, 459, 461, 462, 463, 464,
	528, 545, 512, 482, 445, 536, 479, 483, 484, 548,
	0, 0, 0, 436, 329, 330, 0, 308, 256, 257,
	601, 804, 359, 550, 583, 475, 0, 818, 799, 801,
	802, 805, 809, 810, 811, 812, 813, 815, 817, 821,
	600, 0, 529, 544, 603, 543, 597, 365, 0, 386,
	541, 488, 0, 533, 507, 0, 534, 503, 538, 0,
	477, 0, 393, 417, 429, 446, 449, 478, 563, 564,
	565, 261, 448, 567, 568, 569, 570, 571, 572, 573,
	566, 820, 510, 487, 513, 428, 490, 489, 0, 0,
	524, 757, 525, 526, 349, 350, 351, 352, 807, 551,
	279, 447, 375, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 0, 516, 517, 514, 608, 0, 574, 575,
	0, 0, 441, 442, 307, 314, 460, 316, 278, 364,
	309, 426, 323, 0, 453, 518, 454, 577, 580, 578,
	579, 356, 319, 320, 390, 324, 334, 378, 425, 362,
	383, 276, 416, 391, 338, 504, 531, 829, 803, 828,
	830, 831, 827, 832, 833, 814, 713, 0, 761, 825,
	824, 826, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 559, 558, 557, 556, 555, 554, 553,
	552, 0, 0, 501, 403, 288, 253, 284, 285, 292,
	598, 595, 407, 599, 0, 258, 481, 332, 0, 373,
	306, 546, 547, 792, 768, 769, 770, 710, 771, 765,
	766, 711, 767, 793, 759, 789, 790, 738, 762, 772,
	788, 773, 791, 794, 795, 834, 835, 779, 763, 225,
	836, 776, 796, 787, 786, 774, 760, 797, 798, 745,
	740, 777, 778, 764, 780, 781, 782, 712, 741, 742,
	743, 744, 0, 0, 0, 432, 433, 434, 456, 418,
	480, 596, 0, 0, 0, 0, 0, 0, 0, 530,
	542, 576, 0, 585, 586, 588, 590, 783, 755, 602,
	471, 472, 582, 0, 0, 0, 0, 361, 0, 486,
	519, 508, 591, 474, 0, 0, 0, 0, 0, 0,
	708, 0, 0, 0, 301, 0, 0, 331, 523, 505,
	515, 506, 491, 492, 493, 500, 311, 494, 495, 496,
	466, 497, 467, 498, 499, 746, 522, 473, 392, 345,
	540, 539, 0, 0, 808, 816, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 701, 0, 0, 736,
	785, 784, 723, 733, 0, 0, 274, 200, 468, 587,
	470, 469, 724, 0, 725, 729, 732, 728, 726, 727,
	0, 800, 0, 0, 0, 0, 0, 0, 0, 705,
	0, 709, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 702, 703, 0, 0, 0,
	0, 756, 0, 704, 0, 0, 751, 730, 734, 0,
	0, 0, 0, 264, 397, 414, 275, 388, 427, 280,
	395, 270, 360, 384, 0, 0, 266, 412, 394, 342,
	321, 322, 265, 0, 379, 299, 313, 296, 358, 731,
	754, 758, 295, 822, 752, 422, 268, 0, 421, 357,
	408, 413, 343, 337, 267, 410, 341, 336, 325, 303,
	823, 326, 327, 317, 369, 335, 370, 318, 347, 346,
	348, 0, 0, 0, 0, 0, 450, 451, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	581, 749, 0, 584, 0, 424, 0, 0, 806, 0,
	0, 0, 396, 0, 0, 328, 0, 0, 0, 753,
	0, 382, 363, 819, 0, 0, 380, 333, 409, 371,
	415, 398, 423, 376, 372, 259, 399, 298, 344, 271,
	273, 293, 300, 302, 304, 305, 353, 354, 366, 387,
	400, 401, 402, 297, 281, 381, 282, 315, 283, 260,
	289, 287, 290, 389, 291, 262, 367, 406, 0, 310,
	377, 340, 263, 339, 368, 405, 404, 272, 431, 437,
	438, 527, 0, 443, 605, 606, 607, 452, 457, 458,
	459, 461, 462, 463, 464, 528, 545, 512, 482, 445,
	536, 479, 483, 484, 548, 0, 0, 0, 436, 329,
	330, 0, 308, 256, 257, 601, 804, 359, 550, 583,
	475, 0, 818, 799, 801, 802, 805, 809, 810, 811,
	812, 813, 815, 817, 821, 600, 0, 529, 544, 603,
	543, 597, 365, 0, 386, 541, 488, 0, 533, 507,
	0, 534, 503, 538, 0, 477, 0, 393, 417, 429,
	446, 449, 478, 563, 564, 565, 261, 448, 567, 568,
	569, 570, 571, 572, 573, 566, 820, 510, 487, 513,
	428, 490, 489, 0, 0, 524, 757, 525, 526, 349,
	350, 351, 352, 807, 551, 279, 447, 375, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 0, 516, 517,
	514, 608, 0, 574, 575, 0, 0, 441, 442, 307,
	314, 460, 316, 278, 364, 309, 426, 323, 0, 453,
	518, 454, 577, 580, 578, 579, 356, 319, 320, 390,
	324, 334, 378, 425, 362, 383, 276, 416, 391, 338,
	504, 531, 829, 803, 828, 830, 831, 827, 832, 833,
	814, 713, 0, 761, 825, 824, 826, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 559, 558,
	557, 556, 555, 554, 553, 552, 0, 0, 501, 403,
	288, 253, 284, 285, 292, 598, 595, 407, 599, 0,
	258, 481, 332, 0, 373, 306, 546, 547, 792, 768,
	769, 770, 710, 771, 765, 766, 711, 767, 793, 759,
	789, 790, 738, 762, 772, 788, 773, 791, 794, 795,
	834, 835, 779, 763, 225, 836, 776, 796, 787, 786,
	774, 760, 797, 798, 745, 740, 777, 778, 764, 780,
	781, 782, 712, 741, 742, 743, 744, 0, 0, 0,
	432, 433, 434, 456, 418, 480, 596, 0, 0, 0,
	0, 0, 0, 0, 530, 542, 576, 0, 585, 586,
	588, 590, 783, 755, 602, 471, 472, 582, 0, 0,
	0, 0, 361, 0, 486, 519, 508, 591, 474, 0,
	0, 0, 0, 0, 0, 708, 0, 0, 0, 301,
	0, 0, 331, 523, 505, 515, 506, 491, 492, 493,
	500, 311, 494, 495, 496, 466, 497, 467, 498, 499,
	746, 522, 473, 392, 345, 540, 539, 0, 0, 808,
	816, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 736, 785, 784, 723, 733, 0,
	0, 274, 200, 468, 587, 470, 469, 724, 0, 725,
	729, 732, 728, 726, 727, 0, 800, 0, 0, 0,
	0, 0, 0, 693, 705, 0, 709, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	702, 703, 0, 0, 0, 0, 756, 0, 704, 0,
	0, 751, 730, 734, 0, 0, 0, 0, 264, 397,
	414, 275, 388, 427, 280, 395, 270, 360, 384, 0,
	0, 266, 412, 394, 342, 321, 322, 265, 0, 379,
	299, 313, 296, 358, 731, 754, 758, 295, 822, 752,
	422, 268, 0, 421, 357, 408, 413, 343, 337, 267,
	410, 341, 336, 325, 303, 823, 326, 327, 317, 369,
	335, 370, 318, 347, 346, 348, 0, 0, 0, 0,
	0, 450, 451, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 581, 749, 0, 584, 0,
	424, 0, 0, 806, 0, 0, 0, 396, 0, 0,
	328, 0, 0, 0, 753, 0, 382, 363, 819, 0,
	0, 380, 333, 409, 371, 415, 398, 423, 376, 372,
	259, 399, 298, 344, 271, 273, 293, 300, 302, 304,
	305, 353, 354, 366, 387, 400, 401, 402, 297, 281,
	381, 282, 315, 283, 260, 289, 287, 290, 389, 291,
	262, 367, 406, 0, 310, 377, 340, 263, 339, 368,
	405, 404, 272, 431, 437, 438, 527, 0, 443, 605,
	606, 607, 452, 457, 458, 459, 461, 462, 463, 464,
	528, 545, 512, 482, 445, 536, 479, 483, 484, 548,
	0, 0, 0, 436, 329, 330, 0, 308, 256, 257,
	601, 804, 359, 550, 583, 475, 0, 818, 799, 801,
	802, 805, 809, 810, 811, 812, 813, 815, 817, 821,
	600, 0, 529, 544, 603, 543, 597, 365, 0, 386,
	541, 488, 0, 533, 507, 0, 534, 503, 538, 0,
	477, 0, 393, 417, 429, 446, 449, 478, 563, 564,
	565, 261, 448, 567, 568, 569, 570, 571, 572, 573,
	566, 820, 510, 487, 513, 428, 490, 489, 0, 0,
	524, 757, 525, 526, 349, 350, 351, 352, 807, 551,
	279, 447, 375, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 0, 516, 517, 514, 608, 0, 574, 575,
	0, 0, 441, 442, 307, 314, 460, 316, 278, 364,
	309, 426, 323, 0, 453, 518, 454, 577, 580, 578,
	579, 356, 319, 320, 390, 324, 334, 378, 425, 362,
	383, 276, 416, 391, 338, 504, 531, 829, 803, 828,
	830, 831, 827, 832, 833, 814, 713, 0, 761, 825,
	824, 826, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 559, 558, 557, 556, 555, 554, 553,
	552, 0, 0, 501, 403, 288, 253, 284, 285, 292,
	598, 595, 407, 599, 0, 258, 481, 332, 0, 373,
	306, 546, 547, 792, 768, 769, 770, 710, 771, 765,
	766, 711, 767, 793, 759, 789, 790, 738, 762, 772,
	788, 773, 791, 794, 795, 834, 835, 779, 763, 225,
	836, 776, 796, 787, 786, 774, 760, 797, 798, 745,
	740, 777, 778, 764, 780, 781, 782, 712, 741, 742,
	743, 744, 0, 0, 0, 432, 433, 434, 456, 418,
	480, 596, 0, 0, 0, 0, 0, 0, 0, 530,
	542, 576, 0, 585, 586, 588, 590, 783, 0, 602,
	471, 472, 582, 177, 52, 166, 140, 0, 0, 0,
	0, 0, 0, 361, 0, 486, 519, 508, 591, 474,
	0, 167, 0, 0, 0, 0, 0, 0, 159, 0,
	301, 0, 168, 331, 523, 505, 515, 506, 491, 492,
	493, 500, 311, 494, 495, 496, 466, 497, 467, 498,
	499, 117, 522, 473, 392, 345, 540, 539, 0, 0,
	0, 0, 0, 0, 0, 0, 105, 0, 0, 0,
	0, 0, 171, 0, 0, 199, 0, 0, 0, 0,
	0, 0, 274, 200, 468, 587, 470, 469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 277, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 191, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 264,
	397, 414, 275, 388, 427, 280, 395, 270, 360, 384,
	0, 0, 266, 412, 394, 342, 321, 322, 265, 0,
	379, 299, 313, 296, 358, 0, 411, 439, 295, 430,
	0, 422, 268, 0, 421, 357, 408, 413, 343, 337,
	267, 410, 341, 336, 325, 303, 455, 326, 327, 317,
	369, 335, 370, 318, 347, 346, 348, 0, 0, 0,
	0, 0, 450, 451, 0, 0, 0, 0, 0, 0,
	139, 165, 175, 0, 103, 0, 581, 0, 0, 584,
	0, 424, 0, 0, 192, 0, 0, 0, 396, 0,
	0, 328, 164, 158, 157, 440, 0, 382, 363, 204,
	0, 0, 380, 333, 409, 371, 415, 398, 423, 376,
	372, 259, 399, 298, 344, 271, 273, 293, 300, 302,
	304, 305, 353, 354, 366, 387, 400, 401, 402, 297,
	281, 381, 282, 315, 283, 260, 289, 287, 290, 389,
	291, 262, 367, 406, 0, 310, 377, 340, 263, 339,
	368, 405, 404, 272, 431, 437, 438, 527, 0, 443,
	560, 561, 562, 452, 457, 458, 459, 461, 462, 463,
	464, 528, 545, 512, 482, 445, 536, 479, 483, 484,
	548, 0, 0, 0, 436, 329, 330, 0, 308, 256,
	257, 419, 294, 359, 550, 583, 475, 0, 537, 476,
	485, 286, 509, 521, 520, 355, 435, 195, 532, 535,
	465, 205, 0, 529, 544, 502, 543, 206, 365, 0,
	386, 541, 488, 0, 533, 507, 0, 534, 503, 538,
	0, 477, 0, 393, 417, 429, 446, 449, 478, 563,
	564, 565, 261, 448, 567, 568, 569, 570, 571, 572,
	573, 566, 420, 510, 487, 513, 428, 490, 489, 0,
	0, 524, 444, 525, 526, 349, 350, 351, 352, 312,
	551, 279, 447, 375, 115, 511, 0, 0, 0, 0,
	0, 0, 0, 0, 516, 517, 514, 203, 0, 574,
	575, 0, 0, 441, 442, 307, 314, 460, 316, 278,
	364, 309, 426, 323, 0, 453, 518, 454, 577, 580,
	578, 579, 356, 319, 320, 390, 324, 334, 378, 425,
	362, 383, 276, 416, 391, 338, 504, 531, 0, 0,
	0, 0, 0, 0, 0, 0, 53, 0, 0, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 559, 558, 557, 556, 555, 554,
	553, 552, 0, 0, 501, 403, 288, 253, 284, 285,
	292, 374, 269, 407, 385, 0, 258, 481, 332, 141,
	373, 306, 546, 547, 209, 210, 211, 212, 213, 214,
	215, 216, 254, 217, 218, 219, 220, 221, 222, 223,
	226, 227, 228, 229, 230, 231, 232, 233, 549, 224,
	225, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 0, 0, 0, 255, 249,
	250, 251, 252, 0, 0, 0, 432, 433, 434, 456,
	418, 480, 207, 39, 193, 196, 198, 197, 0, 50,
	530, 542, 576, 5, 585, 586, 588, 590, 589, 120,
	208, 471, 472, 582, 361, 0, 486, 519, 508, 591,
	474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 301, 0, 0, 331, 523, 505, 515, 506, 491,
	492, 493, 500, 311, 494, 495, 496, 466, 497, 467,
	498, 499, 0, 522, 473, 392, 345, 540, 539, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1220, 0, 0, 199, 0, 0, 723,
	733, 0, 0, 274, 200, 468, 587, 470, 469, 724,
	0, 725, 729, 732, 728, 726, 727, 0, 277, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 730, 0, 0, 0, 0, 0,
	264, 397, 414, 275, 388, 427, 280, 395, 270, 360,
	384, 0, 0, 266, 412, 394, 342, 321, 322, 265,
	0, 379, 299, 313, 296, 358, 731, 411, 439, 295,
	430, 0, 422, 268, 0, 421, 357, 408, 413, 343,
	337, 267, 410, 341, 336, 325, 303, 455, 326, 327,
	317, 369, 335, 370, 318, 347, 346, 348, 0, 0,
	0, 0, 0, 450, 451, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 581, 0, 0,
	584, 0, 424, 0, 0, 0, 0, 0, 0, 396,
	0, 0, 328, 0, 0, 0, 440, 0, 382, 363,
	604, 0, 0, 380, 333, 409, 371, 415, 398, 423,
	376, 372, 259, 399, 298, 344, 271, 273, 293, 300,
	302, 304, 305, 353, 354, 366, 387, 400, 401, 402,
	297, 281, 381, 282, 315, 283, 260, 289, 287, 290,
	389, 291, 262, 367, 406, 0, 310, 377, 340, 263,
	339, 368, 405, 404, 272, 431, 437, 438, 527, 0,
	443, 605, 606, 607, 452, 457, 458, 459, 461, 462,
	463, 464, 528, 545, 512, 482, 445, 536, 479, 483,
	484, 548, 0, 0, 0, 436, 329, 330, 0, 308,
	256, 257, 601, 294, 359, 550, 583, 475, 0, 537,
	476, 485, 286, 509, 521, 520, 355, 435, 0, 532,
	535, 465, 600, 0, 529, 544, 603, 543, 597, 365,
	0, 386, 541, 488, 0, 533, 507, 0, 534, 503,
	538, 0, 477, 0, 393, 417, 429, 446, 449, 478,
	563, 564, 565, 261, 448, 567, 568, 569, 570, 571,
	572, 573, 566, 420, 510, 487, 513, 428, 490, 489,
	0, 0, 524, 444, 525, 526, 349, 350, 351, 352,
	312, 551, 279, 447, 375, 0, 511, 0, 0, 0,
	0, 0, 0, 0, 0, 516, 517, 514, 608, 0,
	574, 575, 0, 0, 441, 442, 307, 314, 460, 316,
	278, 364, 309, 426, 323, 0, 453, 518, 454, 577,
	580, 578, 579, 356, 319, 320, 390, 324, 334, 378,
	425, 362, 383, 276, 416, 391, 338, 504, 531, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 559, 558, 557, 556, 555,
	554, 553, 552, 0, 0, 501, 403, 288, 253, 284,
	285, 292, 598, 595, 407, 599, 0, 258, 481, 332,
	0, 373, 306, 546, 547, 209, 210, 211, 212, 213,
	214, 215, 216, 254, 217, 218, 219, 220, 221, 222,
	223, 226, 227, 228, 229, 230, 231, 232, 233, 549,
	224, 225, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 0, 0, 0, 255,
	249, 250, 251, 252, 0, 0, 0, 432, 433, 434,
	456, 418, 480, 596, 0, 0, 0, 0, 0, 0,
	0, 530, 542, 576, 0, 585, 586, 588, 590, 589,
	0, 602, 471, 472, 582, 177, 52, 166, 140, 0,
	0, 0, 0, 0, 0, 361, 625, 486, 519, 508,
	591, 474, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 0, 0, 331, 523, 505, 515, 506,
	491, 492, 493, 500, 311, 494, 495, 496, 466, 497,
	467, 498, 499, 0, 522, 473, 392, 345, 540, 539,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 631,
	0, 0, 0, 0, 630, 0, 0, 199, 0, 0,
	0, 0, 0, 0, 274, 200, 468, 587, 470, 469,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 397, 414, 275, 388, 427, 280, 395, 270,
	360, 384, 0, 0, 266, 412, 394, 342, 321, 322,
	265, 0, 379, 299, 313, 296, 358, 0, 411, 439,
	295, 430, 0, 422, 268, 0, 421, 357, 408, 413,
	343, 337, 267, 410, 341, 336, 325, 303, 455, 326,
	327, 317, 369, 335, 370, 318, 347, 346, 348, 0,
	0, 0, 0, 0, 450, 451, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 629, 0, 581, 0,
	0, 584, 0, 424, 0, 0, 0, 0, 0, 0,
	396, 0, 0, 328, 0, 0, 0, 440, 0, 382,
	363, 604, 0, 0, 380, 333, 409, 371, 415, 398,
	423, 376, 372, 259, 399, 298, 344, 271, 273, 293,
	300, 302, 304, 305, 353, 354, 366, 387, 400, 401,
	402, 297, 281, 381, 282, 315, 283, 260, 289, 287,
	290, 389, 291, 262, 367, 406, 0, 310, 377, 340,
	263, 339, 368, 405, 404, 272, 431, 437, 438, 527,
	0, 443, 605, 606, 607, 452, 457, 458, 459, 461,
	462, 463, 464, 528, 545, 512, 482, 445, 536, 479,
	483, 484, 548, 0, 0, 0, 436, 329, 330, 0,
	308, 256, 257, 601, 294, 359, 550, 583, 475, 0,
	537, 476, 485, 286, 509, 521, 520, 355, 435, 0,
	532, 535, 465, 600, 0, 529, 544, 603, 543, 597,
	365, 0, 386, 541, 488, 0, 533, 507, 0, 534,
	503, 538, 0, 477, 0, 393, 417, 429, 446, 449,
	478, 563, 564, 565, 261, 448, 567, 568, 569, 570,
	571, 572, 573, 566, 420, 510, 487, 513, 428, 490,
	489, 0, 0, 524, 444, 525, 526, 349, 350, 351,
	352, 626, 628, 279, 447, 375, 639, 511, 0, 0,
	0, 0, 0, 0, 0, 0, 516, 517, 514, 608,
	0, 574, 575, 0, 0, 441, 442, 307, 314, 460,
	316, 278, 364, 309, 426, 323, 0, 453, 518, 454,
	577, 580, 578, 579, 356, 319, 320, 390, 324, 334,
	378, 425, 362, 383, 276, 416, 391, 338, 504, 531,
	0, 0, 0, 0, 0, 0, 0, 0, 53, 0,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 559, 558, 557, 556,
	555, 554, 553, 552, 0, 0, 501, 403, 288, 253,
	284, 285, 292, 598, 595, 407, 599, 0, 258, 481,
	332, 141, 373, 306, 546, 547, 209, 210, 211, 212,
	213, 214, 215, 216, 254, 217, 218, 219, 220, 221,
	222, 223, 226, 227, 228, 229, 230, 231, 232, 233,
	549, 224, 225, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 0, 0, 0,
	255, 249, 250, 251, 252, 0, 0, 0, 432, 433,
	434, 456, 418, 480, 596, 0, 0, 0, 0, 0,
	0, 0, 530, 542, 576, 0, 585, 586, 588, 590,
	589, 0, 602, 471, 472, 582, 361, 0, 486, 519,
	508, 591, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 301, 0, 0, 331, 523, 505, 515,
	506, 491, 492, 493, 500, 311, 494, 495, 496, 466,
	497, 467, 498, 499, 0, 522, 473, 392, 345, 540,
	539, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 199, 0,
	0, 0, 0, 0, 0, 274, 200, 468, 587, 470,
	469, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	277, 2188, 2191, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 264, 397, 414, 275, 388, 427, 280, 395,
	270, 360, 384, 0, 0, 266, 412, 394, 342, 321,
	322, 265, 0, 379, 299, 313, 296, 358, 0, 411,
	439, 295, 430, 0, 422, 268, 0, 421, 357, 408,
	413, 343, 337, 267, 410, 341, 336, 325, 303, 455,
	326, 327, 317, 369, 335, 370, 318, 347, 346, 348,
	0, 0, 0, 0, 0, 450, 451, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 581,
	0, 0, 584, 2192, 424, 0, 0, 0, 2187, 0,
	2186, 396, 2184, 2189, 328, 0, 0, 0, 440, 0,
	382, 363, 604, 0, 0, 380, 333, 409, 371, 415,
	398, 423, 376, 372, 259, 399, 298, 344, 271, 273,
	293, 300, 302, 304, 305, 353, 354, 366, 387, 400,
	401, 402, 297, 281, 381, 282, 315, 283, 260, 289,
	287, 290, 389, 291, 262, 367, 406, 2190, 310, 377,
	340, 263, 339, 368, 405, 404, 272, 431, 437, 438,
	527, 0, 443, 605, 606, 607, 452, 457, 458, 459,
	461, 462, 463, 464, 528, 545, 512, 482, 445, 536,
	479, 483, 484, 548, 0, 0, 0, 436, 329, 330,
	0, 308, 256, 257, 601, 294, 359, 550, 583, 475,
	0, 537, 476, 485, 286, 509, 521, 520, 355, 435,
	0, 532, 535, 465, 600, 0, 529, 544, 603, 543,
	597, 365, 0, 386, 541, 488, 0, 533, 507, 0,
	534, 503, 538, 0, 477, 0, 393, 417, 429, 446,
	449, 478, 563, 564, 565, 261, 448, 567, 568, 569,
	570, 571, 572, 573, 566, 420, 510, 487, 513, 428,
	490, 489, 0, 0, 524, 444, 525, 526, 349, 350,
	351, 352, 312, 551, 279, 447, 375, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 0, 516, 517, 514,
	608, 0, 574, 575, 0, 0, 441, 442, 307, 314,
	460, 316, 278, 364, 309, 426, 323, 0, 453, 518,
	454, 577, 580, 578, 579, 356, 319, 320, 390, 324,
	334, 378, 425, 362, 383, 276, 416, 391, 338, 504,
	531, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 559, 558, 557,
	556, 555, 554, 553, 552, 0, 0, 501, 403, 288,
	253, 284, 285, 292, 598, 595, 407, 599, 0, 258,
	481, 332, 0, 373, 306, 546, 547, 209, 210, 211,
	212, 213, 214, 215, 216, 254, 217, 218, 219, 220,
	221, 222, 223, 226, 227, 228, 229, 230, 231, 232,
	233, 549, 224, 225, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 0, 0,
	0, 255, 249, 250, 251, 252, 0, 0, 0, 432,
	433, 434, 456, 418, 480, 596, 0, 0, 0, 0,
	0, 0, 0, 530, 542, 576, 0, 585, 586, 588,
	590, 589, 0, 602, 471, 472, 582, 361, 0, 486,
	519, 508, 591, 474, 0, 1042, 0, 0, 0, 0,
	0, 0, 0, 0, 301, 0, 0, 331, 523, 505,
	515, 506, 491, 492, 493, 500, 311, 494, 495, 496,
	466, 497, 467, 498, 499, 0, 522, 473, 392, 345,
	540, 539, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 199,
	0, 0, 0, 0, 0, 0, 274, 200, 468, 587,
	470, 469, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 277, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1028, 0, 0, 0,
	0, 0, 0, 264, 397, 414, 275, 388, 427, 280,
	395, 270, 360, 384, 0, 0, 2337, 2340, 2341, 2342,
	2343, 2344, 2345, 0, 2350, 2346, 2347, 2348, 2349, 0,
	2332, 2333, 2334, 2335, 1026, 2316, 2338, 0, 2317, 357,
	2318, 2319, 2320, 2321, 2322, 2323, 2324, 2325, 2326, 2329,
	2330, 2327, 2328, 2336, 369, 335, 370, 318, 347, 346,
	348, 1053, 1055, 1057, 1059, 1062, 450, 451, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	581, 0, 0, 584, 0, 424, 0, 0, 0, 0,
	0, 0, 396, 0, 0, 328, 0, 0, 0, 2331,
	0, 382, 363, 604, 0, 0, 380, 333, 409, 371,
	415, 398, 423, 376, 372, 259, 399, 298, 344, 271,
	273, 293, 300, 302, 304, 305, 353, 354, 366, 387,
	400, 401, 402, 297, 281, 381, 282, 315, 283, 260,
	289, 287, 290, 389, 291, 262, 367, 406, 0, 310,
	377, 340, 263, 339, 368, 405, 404, 272, 431, 437,
	438, 527, 0, 443, 605, 606, 607, 452, 457, 458,
	459, 461, 462, 463, 464, 528, 545, 512, 482, 445,
	536, 479, 483, 484, 548, 0, 0, 0, 436, 329,
	330, 0, 308, 256, 257, 601, 294, 359, 550, 583,
	475, 0, 537, 476, 485, 286, 509, 521, 520, 355,
	435, 0, 532, 535, 465, 600, 0, 529, 544, 603,
	543, 597, 365, 0, 386, 541, 488, 0, 533, 507,
	0, 534, 503, 538, 0, 477, 0, 393, 417, 429,
	446, 449, 478, 563, 564, 565, 261, 448, 567, 568,
	569, 570, 571, 572, 573, 566, 420, 510, 487, 513,
	428, 490, 489, 0, 0, 524, 444, 525, 526, 349,
	350, 351, 352, 312, 551, 279, 447, 375, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 0, 516, 517,
	514, 608, 0, 574, 575, 0, 0, 441, 442, 307,
	314, 460, 316, 278, 364, 309, 426, 323, 0, 453,
	518, 454, 577, 580, 578, 579, 356, 319, 320, 390,
	324, 334, 378, 425, 362, 383, 276, 416, 391, 338,
	504, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 248, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 559, 558,
	557, 556, 555, 554, 553, 552, 0, 0, 501, 403,
	288, 253, 284, 285, 292, 598, 595, 407, 599, 0,
	258, 2339, 332, 0, 373, 306, 546, 547, 209, 210,
	211, 212, 213, 214, 215, 216, 254, 217, 218, 219,
	220, 221, 222, 223, 226, 227, 228, 229, 230, 231,
	232, 233, 549, 224, 225, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 0,
	0, 0, 255, 249, 250, 251, 252, 0, 0, 0,
	432, 433, 434, 456, 418, 480, 596, 0, 0, 0,
	0, 0, 0, 0, 530, 542, 576, 0, 585, 586,
	588, 590, 589, 0, 602, 471, 472, 582, 361, 0,
	486, 519, 508, 591, 474, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 331, 523,
	505, 515, 506, 491, 492, 493, 500, 311, 494, 495,
	496, 466, 497, 467, 498, 499, 0, 522, 473, 392,
	345, 540, 539, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	199, 0, 0, 0, 0, 0, 0, 274, 200, 468,
	587, 470, 469, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 277, 0, 2209, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 264, 397, 414, 275, 388, 427,
	280, 395, 270, 360, 384, 0, 0, 266, 412, 394,
	342, 321, 322, 265, 0, 379, 299, 313, 296, 358,
	0, 411, 439, 295, 430, 0, 422, 268, 0, 421,
	357, 408, 413, 343, 337, 267, 410, 341, 336, 325,
	303, 455, 326, 327, 317, 369, 335, 370, 318, 347,
	346, 348, 0, 0, 0, 0, 0, 450, 451, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 581, 0, 0, 584, 2208, 424, 0, 0, 0,
	2214, 2211, 2213, 396, 0, 2212, 328, 0, 0, 0,
	440, 0, 382, 363, 604, 0, 2206, 380, 333, 409,
	371, 415, 398, 423, 376, 372, 259, 399, 298, 344,
	271, 273, 293, 300, 302, 304, 305, 353, 354, 366,
	387, 400, 401, 402, 297, 281, 381, 282, 315, 283,
	260, 289, 287, 290, 389, 291, 262, 367, 406, 0,
	310, 377, 340, 263, 339, 368, 405, 404, 272, 431,
	437, 438, 527, 0, 443, 605, 606, 607, 452, 457,
	458, 459, 461, 462, 463, 464, 528, 545, 512, 482,
	445, 536, 479, 483, 484, 548, 0, 0, 0, 436,
	329, 330, 0, 308, 256, 257, 601, 294, 359, 550,
	583, 475, 0, 537, 476, 485, 286, 509, 521, 520,
	355, 435, 0, 532, 535, 465, 600, 0, 529, 544,
	603, 543, 597, 365, 0, 386, 541, 488, 0, 533,
	507, 0, 534, 503, 538, 0, 477, 0, 393, 417,
	429, 446, 449, 478, 563, 564, 565, 261, 448, 567,
	568, 569, 570, 571, 572, 573, 566, 420, 510, 487,
	513, 428, 490, 489, 0, 0, 524, 444, 525, 526,
	349, 350, 351, 352, 312, 551, 279, 447, 375, 0,
	511, 0, 0, 0, 0, 0, 0, 0, 0, 516,
	517, 514, 608, 0, 574, 575, 0, 0, 441, 442,
	307, 314, 460, 316, 278, 364, 309, 426, 323, 0,
	453, 518, 454, 577, 580, 578, 579, 356, 319, 320,
	390, 324, 334, 378, 425, 362, 383, 276, 416, 391,
	338, 504, 531, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 559,
	558, 557, 556, 555, 554, 553, 552, 0, 0, 501,
	403, 288, 253, 284, 285, 292, 598, 595, 407, 599,
	0, 258, 481, 332, 0, 373, 306, 546, 547, 209,
	210, 211, 212, 213, 214, 215, 216, 254, 217, 218,
	219, 220, 221, 222, 223, 226, 227, 228, 229, 230,
	231, 232, 233, 549, 224, 225, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	0, 0, 0, 255, 249, 250, 251, 252, 0, 0,
	0, 432, 433, 434, 456, 418, 480, 596, 0, 0,
	0, 0, 0, 0, 0, 530, 542, 576, 0, 585,
	586, 588, 590, 589, 0, 602, 471, 472, 582, 361,
	0, 486, 519, 508, 591, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 301, 0, 0, 331,
	523, 505, 515, 506, 491, 492, 493, 500, 311, 494,
	495, 496, 466, 497, 467, 498, 499, 0, 522, 473,
	392, 345, 540, 539, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 199, 0, 0, 0, 0, 0, 0, 274, 200,
	468, 587, 470, 469, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 277, 0, 2209, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 264, 397, 414, 275, 388,
	427, 280, 395, 270, 360, 384, 0, 0, 266, 412,
	394, 342, 321, 322, 265, 0, 379, 299, 313, 296,
	358, 0, 411, 439, 295, 430, 0, 422, 268, 0,
	421, 357, 408, 413, 343, 337, 267, 410, 341, 336,
	325, 303, 455, 326, 327, 317, 369, 335, 370, 318,
	347, 346, 348, 0, 0, 0, 0, 0, 450, 451,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 581, 0, 0, 584, 2208, 424, 0, 0,
	0, 2214, 2211, 2213, 396, 0, 2212, 328, 0, 0,
	0, 440, 0, 382, 363, 604, 0, 0, 380, 333,
	409, 371, 415, 398, 423, 376, 372, 259, 399, 298,
	344, 271, 273, 293, 300, 302, 304, 305, 353, 354,
	366, 387, 400, 401, 402, 297, 281, 381, 282, 315,
	283, 260, 289, 287, 290, 389, 291, 262, 367, 406,
	0, 310, 377, 340, 263, 339, 368, 405, 404, 272,
	431, 437, 438, 527, 0, 443, 605, 606, 607, 452,
	457, 458, 459, 461, 462, 463, 464, 528, 545, 512,
	482, 445, 536, 479, 483, 484, 548, 0, 0, 0,
	436, 329, 330, 0, 308, 256, 257, 601, 294, 359,
	550, 583, 475, 0, 537, 476, 485, 286, 509, 521,
	520, 355, 435, 0, 532, 535, 465, 600, 0, 529,
	544, 603, 543, 597, 365, 0, 386, 541, 488, 0,
	533, 507, 0, 534, 503, 538, 0, 477, 0, 393,
	417, 429, 446, 449, 478, 563, 564, 565, 261, 448,
	567, 568, 569, 570, 571, 572, 573, 566, 420, 510,
	487, 513, 428, 490, 489, 0, 0, 524, 444, 525,
	526, 349, 350, 351, 352, 312, 551, 279, 447, 375,
	0, 511, 0, 0, 0, 0, 0, 0, 0, 0,
	516, 517, 514, 608, 0, 574, 575, 0, 0, 441,
	442, 307, 314, 460, 316, 278, 364, 309, 426, 323,
	0, 453, 518, 454, 577, 580, 578, 579, 356, 319,
	320, 390, 324, 334, 378, 425, 362, 383, 276, 416,
	391, 338, 504, 531, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 248, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	559, 558, 557, 556, 555, 554, 553, 552, 0, 0,
	501, 403, 288, 253, 284, 285, 292, 598, 595, 407,
	599, 0, 258, 481, 332, 0, 373, 306, 546, 547,
	209, 210, 211, 212, 213, 214, 215, 216, 254, 217,
	218, 219, 220, 221, 222, 223, 226, 227, 228, 229,
	230, 231, 232, 233, 549, 224, 225, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 0, 0, 0, 255, 249, 250, 251, 252, 0,
	0, 0, 432, 433, 434, 456, 418, 480, 596, 0,
	0, 0, 0, 0, 0, 0, 530, 542, 576, 0,
	585, 586, 588, 590, 589, 0, 602, 471, 472, 582,
	361, 0, 486, 519, 508, 591, 474, 0, 0, 0,
	0, 0, 1937, 0, 0, 0, 0, 301, 0, 0,
	331, 523, 505, 515, 506, 491, 492, 493, 500, 311,
	494, 495, 496, 466, 497, 467, 498, 499, 0, 522,
	473, 392, 345, 540, 539, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 199, 0, 0, 1938, 0, 0, 0, 274,
	200, 468, 587, 470, 469, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 277, 0, 0, 1152, 1153, 1154,
	1151, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 264, 397, 414, 275,
	388, 427, 280, 395, 270, 360, 384, 0, 0, 266,
	412, 394, 342, 321, 322, 265, 0, 379, 299, 313,
	296, 358, 0, 411, 439, 295, 430, 0, 422, 268,
	0, 421, 357, 408, 413, 343, 337, 267, 410, 341,
	336, 325, 303, 455, 326, 327, 317, 369, 335, 370,
	318, 347, 346, 348, 0, 0, 0, 0, 0, 450,
	451, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 581, 0, 0, 584, 0, 424, 0,
	0, 0, 0, 0, 0, 396, 0, 0, 328, 0,
	0, 0, 440, 0, 382, 363, 604, 0, 0, 380,
	333, 409, 371, 415, 398, 423, 376, 372, 259, 399,
	298, 344, 271, 273, 293, 300, 302, 304, 305, 353,
	354, 366, 387, 400, 401, 402, 297, 281, 381, 282,
	315, 283, 260, 289, 287, 290, 389, 291, 262, 367,
	406, 0, 310, 377, 340, 263, 339, 368, 405, 404,
	272, 431, 437, 438, 527, 0, 443, 605, 606, 607,
	452, 457, 458, 459, 461, 462, 463, 464, 528, 545,
	512, 482, 445, 536, 479, 483, 484, 548, 0, 0,
	0, 436, 329, 330, 0, 308, 256, 257, 601, 294,
	359, 550, 583, 475, 0, 537, 476, 485, 286, 509,
	521, 520, 355, 435, 0, 532, 535, 465, 600, 0,
	529, 544, 603, 543, 597, 365, 0, 386, 541, 488,
	0, 533, 507, 0, 534, 503, 538, 0, 477, 0,
	393, 417, 429, 446, 449, 478, 563, 564, 565, 261,
	448, 567, 568, 569, 570, 571, 572, 573, 566, 420,
	510, 487, 513, 428, 490, 489, 0, 0, 524, 444,
	525, 526, 349, 350, 351, 352, 312, 551, 279, 447,
	375, 0, 511, 0, 0, 0, 0, 0, 0, 0,
	0, 516, 517, 514, 608, 0, 574, 575, 0, 0,
	441, 442, 307, 314, 460, 316, 278, 364, 309, 426,
	323, 0, 453, 518, 454, 577, 580, 578, 579, 356,
	319, 320, 390, 324, 334, 378, 425, 362, 383, 276,
	416, 391, 338, 504, 531, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 248, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 559, 558, 557, 556, 555, 554, 553, 552, 0,
	0, 501, 403, 288, 253, 284, 285, 292, 598, 595,
	407, 599, 0, 258, 481, 332, 0, 373, 306, 546,
	547, 209, 210, 211, 212, 213, 214, 215, 216, 254,
	217, 218, 219, 220, 221, 222, 223, 226, 227, 228,
	229, 230, 231, 232, 233, 549, 224, 225, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 0, 0, 0, 255, 249, 250, 251, 252,
	0, 0, 0, 432, 433, 434, 456, 418, 480, 596,
	0, 0, 0, 0, 0, 0, 0, 530, 542, 576,
	0, 585, 586, 588, 590, 589, 177, 602, 471, 472,
	582, 0, 0, 0, 0, 0, 361, 0, 486, 519,
	508, 591, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 301, 0, 0, 331, 523, 505, 515,
	506, 491, 492, 493, 500, 311, 494, 495, 496, 466,
	497, 467, 498, 499, 117, 522, 473, 392, 345, 540,
	539, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 171, 1981, 0, 199, 0,
	0, 0, 0, 0, 0, 274, 200, 468, 587, 470,
	469, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	277, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 264, 397, 414, 275, 388, 427, 280, 395,
	270, 360, 384, 0, 0, 266, 412, 394, 342, 321,
	322, 265, 0, 379, 299, 313, 296, 358, 0, 411,
	439, 295, 430, 0, 422, 268, 0, 421, 357, 408,
	413, 343, 337, 267, 410, 341, 336, 325, 303, 455,
	326, 327, 317, 369, 335, 370, 318, 347, 346, 348,
	0, 0, 0, 0, 0, 450, 451, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 581,
	0, 0, 584, 0, 424, 0, 0, 0, 0, 0,
	0, 396, 0, 0, 328, 0, 0, 0, 440, 0,
	382, 363, 604, 0, 0, 380, 333, 409, 371, 415,
	398, 423, 376, 372, 259, 399, 298, 344, 271, 273,
	293, 300, 302, 304, 305, 353, 354, 366, 387, 400,
	401, 402, 297, 281, 381, 282, 315, 283, 260, 289,
	287, 290, 389, 291, 262, 367, 406, 0, 310, 377,
	340, 263, 339, 368, 405, 404, 272, 431, 437, 438,
	527, 0, 443, 605, 606, 607, 452, 457, 458, 459,
	461, 462, 463, 464, 528, 545, 512, 482, 445, 536,
	479, 483, 484, 548, 0, 0, 0, 436, 329, 330,
	0, 308, 256, 257, 601, 294, 359, 550, 583, 475,
	0, 537, 476, 485, 286, 509, 521, 520, 355, 435,
	0, 532, 535, 465, 600, 0, 529, 544, 603, 543,
	597, 365, 0, 386, 541, 488, 0, 533, 507, 0,
	534, 503, 538, 0, 477, 0, 393, 417, 429, 446,
	449, 478, 563, 564, 565, 261, 448, 567, 568, 569,
	570, 571, 572, 573, 566, 420, 510, 487, 513, 428,
	490, 489, 0, 0, 524, 444, 525, 526, 349, 350,
	351, 352, 312, 551, 279, 447, 375, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 0, 516, 517, 514,
	608, 0, 574, 575, 0, 0, 441, 442, 307, 314,
	460, 316, 278, 364, 309, 426, 323, 0, 453, 518,
	454, 577, 580, 578, 579, 356, 319, 320, 390, 324,
	334, 378, 425, 362, 383, 276, 416, 391, 338, 504,
	531, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 559, 558, 557,
	556, 555, 554, 553, 552, 0, 0, 501, 403, 288,
	253, 284, 285, 292, 598, 595, 407, 599, 0, 258,
	481, 332, 141, 373, 306, 546, 547, 209, 210, 211,
	212, 213, 214, 215, 216, 254, 217, 218, 219, 220,
	221, 222, 223, 226, 227, 228, 229, 230, 231, 232,
	233, 549, 224, 225, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 0, 0,
	0, 255, 249, 250, 251, 252, 0, 0, 0, 432,
	433, 434, 456, 418, 480, 596, 0, 0, 0, 0,
	0, 0, 0, 530, 542, 576, 0, 585, 586, 588,
	590, 589, 177, 602, 471, 472, 582, 0, 0, 0,
	0, 0, 361, 0, 486, 519, 508, 591, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 301,
	0, 0, 331, 523, 505, 515, 506, 491, 492, 493,
	500, 311, 494, 495, 496, 466, 497, 467, 498, 499,
	117, 522, 473, 392, 345, 540, 539, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 171, 1972, 0, 199, 0, 0, 0, 0, 0,
	0, 274, 200, 468, 587, 470, 469, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 277, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 264, 397,
	414, 275, 388, 427, 280, 395, 270, 360, 384, 0,
	0, 266, 412, 394, 342, 321, 322, 265, 0, 379,
	299, 313, 296, 358, 0, 411, 439, 295, 430, 0,
	422, 268, 0, 421, 357, 408, 413, 343, 337, 267,
	410, 341, 336, 325, 303, 455, 326, 327, 317, 369,
	335, 370, 318, 347, 346, 348, 0, 0, 0, 0,
	0, 450, 451, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 581, 0, 0, 584, 0,
	424, 0, 0, 0, 0, 0, 0, 396, 0, 0,
	328, 0, 0, 0, 440, 0, 382, 363, 604, 0,
	0, 380, 333, 409, 371, 415, 398, 423, 376, 372,
	259, 399, 298, 344, 271, 273, 293, 300, 302, 304,
	305, 353, 354, 366, 387, 400, 401, 402, 297, 281,
	381, 282, 315, 283, 260, 289, 287, 290, 389, 291,
	262, 367, 406, 0, 310, 377, 340, 263, 339, 368,
	405, 404, 272, 431, 437, 438, 527, 0, 443, 605,
	606, 607, 452, 457, 458, 459, 461, 462, 463, 464,
	528, 545, 512, 482, 445, 536, 479, 483, 484, 548,
	0, 0, 0, 436, 329, 330, 0, 308, 256, 257,
	601, 294, 359, 550, 583, 475, 0, 537, 476, 485,
	286, 509, 521, 520, 355, 435, 0, 532, 535, 465,
	600, 0, 529, 544, 603, 543, 597, 365, 0, 386,
	541, 488, 0, 533, 507, 0, 534, 503, 538, 0,
	477, 0, 393, 417, 429, 446, 449, 478, 563, 564,
	565, 261, 448, 567, 568, 569, 570, 571, 572, 573,
	566, 420, 510, 487, 513, 428, 490, 489, 0, 0,
	524, 444, 525, 526, 349, 350, 351, 352, 312, 551,
	279, 447, 375, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 0, 516, 517, 514, 608, 0, 574, 575,
	0, 0, 441, 442, 307, 314, 460, 316, 278, 364,
	309, 426, 323, 0, 453, 518, 454, 577, 580, 578,
	579, 356, 319, 320, 390, 324, 334, 378, 425, 362,
	383, 276, 416, 391, 338, 504, 531, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 559, 558, 557, 556, 555, 554, 553,
	552, 0, 0, 501, 403, 288, 253, 284, 285, 292,
	598, 595, 407, 599, 0, 258, 481, 332, 141, 373,
	306, 546, 547, 209, 210, 211, 212, 213, 214, 215,
	216, 254, 217, 218, 219, 220, 221, 222, 223, 226,
	227, 228, 229, 230, 231, 232, 233, 549, 224, 225,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 0, 0, 0, 255, 249, 250,
	251, 252, 0, 0, 0, 432, 433, 434, 456, 418,
	480, 596, 0, 0, 0, 0, 0, 0, 0, 530,
	542, 576, 0, 585, 586, 588, 590, 589, 0, 602,
	471, 472, 582, 361, 0, 486, 519, 508, 591, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	301, 958, 0, 331, 523, 505, 515, 506, 491, 492,
	493, 500, 311, 494, 495, 496, 466, 497, 467, 498,
	499, 0, 522, 473, 392, 345, 540, 539, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 199, 965, 966, 0, 0,
	0, 0, 274, 200, 468, 587, 470, 469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 969, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 264,
	397, 953, 275, 388, 427, 280, 395, 270, 360, 384,
	0, 0, 266, 412, 394, 342, 321, 322, 265, 0,
	379, 299, 313, 296, 358, 0, 411, 439, 295, 430,
	943, 422, 268, 942, 421, 357, 408, 413, 343, 337,
	267, 410, 341, 336, 325, 303, 455, 326, 327, 317,
	369, 335, 370, 318, 347, 346, 348, 0, 0, 0,
	0, 0, 450, 451, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 581, 0, 0, 584,
	0, 424, 0, 0, 0, 0, 0, 0, 396, 0,
	0, 328, 0, 0, 0, 440, 0, 382, 363, 604,
	0, 0, 380, 333, 409, 371, 415, 398, 423, 956,
	372, 259, 399, 298, 344, 271, 273, 293, 300, 302,
	304, 305, 353, 354, 366, 387, 400, 401, 402, 297,
	281, 381, 282, 315, 283, 260, 289, 287, 290, 389,
	291, 262, 367, 406, 0, 310, 377, 340, 263, 339,
	368, 405, 404, 272, 431, 437, 438, 527, 0, 443,
	605, 606, 607, 452, 457, 458, 459, 461, 462, 463,
	464, 528, 545, 512, 482, 445, 536, 479, 483, 484,
	548, 0, 0, 0, 436, 329, 330, 0, 308, 256,
	257, 601, 294, 359, 550, 583, 475, 0, 537, 476,
	485, 286, 509, 521, 520, 355, 435, 0, 532, 535,
	465, 600, 0, 529, 544, 603, 543, 597, 365, 0,
	386, 541, 488, 0, 533, 507, 0, 534, 503, 538,
	0, 477, 0, 393, 417, 429, 446, 449, 478, 563,
	564, 565, 261, 448, 567, 568, 569, 570, 571, 572,
	957, 566, 420, 510, 487, 513, 428, 490, 489, 0,
	0, 524, 960, 525, 526, 349, 350, 351, 352, 312,
	551, 279, 447, 375, 0, 511, 0, 0, 0, 0,
	0, 0, 0, 0, 516, 517, 514, 608, 0, 574,
	575, 0, 0, 441, 442, 307, 314, 460, 316, 278,
	364, 309, 426, 323, 0, 453, 518, 454, 577, 580,
	578, 579, 967, 954, 963, 955, 324, 334, 378, 425,
	362, 383, 276, 416, 391, 964, 504, 531, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 559, 558, 557, 556, 555, 554,
	553, 552, 0, 0, 501, 403, 288, 253, 284, 285,
	292, 598, 595, 407, 599, 0, 258, 481, 332, 0,
	373, 306, 546, 547, 209, 210, 211, 212, 213, 214,
	215, 216, 254, 217, 218, 219, 220, 221, 222, 223,
	226, 227, 228, 229, 230, 231, 232, 233, 549, 224,
	225, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 0, 0, 0, 255, 249,
	250, 251, 252, 0, 0, 0, 432, 433, 434, 456,
	418, 480, 596, 0, 0, 0, 0, 0, 0, 0,
	530, 542, 576, 0, 585, 586, 588, 590, 589, 177,
	602, 471, 472, 582, 0, 0, 0, 0, 0, 361,
	0, 486, 519, 508, 591, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 301, 0, 0, 331,
	523, 505, 515, 506, 491, 492, 493, 500, 311, 494,
	495, 496, 466, 497, 467, 498, 499, 117, 522, 473,
	392, 345, 540, 539, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1870, 0,
	0, 199, 0, 0, 0, 0, 0, 0, 274, 200,
	468, 587, 470, 469, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 277, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 264, 397, 414, 275, 388,
	427, 280, 395, 270, 360, 384, 0, 0, 266, 412,
	394, 342, 321, 322, 265, 0, 379, 299, 313, 296,
	358, 0, 411, 439, 295, 430, 0, 422, 268, 0,
	421, 357, 408, 413, 343, 337, 267, 410, 341, 336,
	325, 303, 455, 326, 327, 317, 369, 335, 370, 318,
	347, 346, 348, 0, 0, 0, 0, 0, 450, 451,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 581, 0, 0, 584, 0, 424, 0, 0,
	0, 0, 0, 0, 396, 0, 0, 328, 0, 0,
	0, 440, 0, 382, 363, 604, 0, 0, 380, 333,
	409, 371, 415, 398, 423, 376, 372, 259, 399, 298,
	344, 271, 273, 293, 300, 302, 304, 305, 353, 354,
	366, 387, 400, 401, 402, 297, 281, 381, 282, 315,
	283, 260, 289, 287, 290, 389, 291, 262, 367, 406,
	0, 310, 377, 340, 263, 339, 368, 405, 404, 272,
	431, 437, 438, 527, 0, 443, 605, 606, 607, 452,
	457, 458, 459, 461, 462, 463, 464, 528, 545, 512,
	482, 445, 536, 479, 483, 484, 548, 0, 0, 0,
	436, 329, 330, 0, 308, 256, 257, 601, 294, 359,
	550, 583, 475, 0, 537, 476, 485, 286, 509, 521,
	520, 355, 435, 0, 532, 535, 465, 600, 0, 529,
	544, 603, 543, 597, 365, 0, 386, 541, 488, 0,
	533, 507, 0, 534, 503, 538, 0, 477, 0, 393,
	417, 429, 446, 449, 478, 563, 564, 565, 261, 448,
	567, 568, 569, 570, 571, 572, 573, 566, 420, 510,
	487, 513, 428, 490, 489, 0, 0, 524, 444, 525,
	526, 349, 350, 351, 352, 312, 551, 279, 447, 375,
	0, 511, 0, 0, 0, 0, 0, 0, 0, 0,
	516, 517, 514, 608, 0, 574, 575, 0, 0, 441,
	442, 307, 314, 460, 316, 278, 364, 309, 426, 323,
	0, 453, 518, 454, 577, 580, 578, 579, 356, 319,
	320, 390, 324, 334, 378, 425, 362, 383, 276, 416,
	391, 338, 504, 531, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 248, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	559, 558, 557, 556, 555, 554, 553, 552, 0, 0,
	501, 403, 288, 253, 284, 285, 292, 598, 595, 407,
	599, 0, 258, 481, 332, 141, 373, 306, 546, 547,
	209, 210, 211, 212, 213, 214, 215, 216, 254, 217,
	218, 219, 220, 221, 222, 223, 226, 227, 228, 229,
	230, 231, 232, 233, 549, 224, 225, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 0, 0, 0, 255, 249, 250, 251, 252, 0,
	0, 0, 432, 433, 434, 456, 418, 480, 596, 0,
	0, 0, 0, 0, 0, 0, 530, 542, 576, 0,
	585, 586, 588, 590, 589, 0, 602, 471, 472, 582,
	361, 0, 486, 519, 508, 591, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 301, 0, 0,
	331, 523, 505, 515, 506, 491, 492, 493, 500, 311,
	494, 495, 496, 466, 497, 467, 498, 499, 0, 522,
	473, 392, 345, 540, 539, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 199, 965, 966, 0, 0, 0, 0, 274,
	200, 468, 587, 470, 469, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 969, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 264, 397, 414, 275,
	388, 427, 280, 395, 270, 360, 384, 0, 0, 266,
	412, 394, 342, 321, 322, 265, 0, 379, 299, 313,
	296, 358, 0, 411, 439, 295, 430, 943, 422, 268,
	942, 421, 357, 408, 413, 343, 337, 267, 410, 341,
	336, 325, 303, 455, 326, 327, 317, 369, 335, 370,
	318, 347, 346, 348, 0, 0, 0, 0, 0, 450,
	451, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 581, 0, 0, 584, 0, 424, 0,
	0, 0, 0, 0, 0, 396, 0, 0, 328, 0,
	0, 0, 440, 0, 382, 363, 604, 0, 0, 380,
	333, 409, 371, 415, 398, 423, 376, 372, 259, 399,
	298, 344, 271, 273, 293, 300, 302, 304, 305, 353,
	354, 366, 387, 400, 401, 402, 297, 281, 381, 282,
	315, 283, 260, 289, 287, 290, 389, 291, 262, 367,
	406, 0, 310, 377, 340, 263, 339, 368, 405, 404,
	272, 431, 437, 438, 527, 0, 443, 605, 606, 607,
	452, 457, 458, 459, 461, 462, 463, 464, 528, 545,
	512, 482, 445, 536, 479, 483, 484, 548, 0, 0,
	0, 436, 329, 330, 0, 308, 256, 257, 601, 294,
	359, 550, 583, 475, 0, 537, 476, 485, 286, 509,
	521, 520, 355, 435, 0, 532, 535, 465, 600, 0,
	529, 544, 603, 543, 597, 365, 0, 386, 541, 488,
	0, 533, 507, 0, 534, 503, 538, 0, 477, 0,
	393, 417, 429, 446, 449, 478, 563, 564, 565, 261,
	448, 567, 568, 569, 570, 571, 572, 573, 566, 420,
	510, 487, 513, 428, 490, 489, 0, 0, 524, 444,
	525, 526, 349, 350, 351, 352, 312, 551, 279, 447,
	375, 0, 511, 0, 0, 0, 0, 0, 0, 0,
	0, 516, 517, 514, 608, 0, 574, 575, 0, 0,
	441, 442, 307, 314, 460, 316, 278, 364, 309, 426,
	323, 0, 453, 518, 454, 577, 580, 578, 579, 967,
	1889, 963, 1890, 324, 334, 378, 425, 362, 383, 276,
	416, 391, 964, 504, 531, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 248, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 559, 558, 557, 556, 555, 554, 553, 552, 0,
	0, 501, 403, 288, 253, 284, 285, 292, 598, 595,
	407, 599, 0, 258, 481, 332, 0, 373, 306, 546,
	547, 209, 210, 211, 212, 213, 214, 215, 216, 254,
	217, 218, 219, 220, 221, 222, 223, 226, 227, 228,
	229, 230, 231, 232, 233, 549, 224, 225, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 0, 0, 0, 255, 249, 250, 251, 252,
	0, 0, 0, 432, 433, 434, 456, 418, 480, 596,
	0, 0, 0, 0, 0, 0, 0, 530, 542, 576,
	0, 585, 586, 588, 590, 589, 0, 602, 471, 472,
	582, 361, 0, 486, 519, 508, 591, 474, 0, 0,
	2687, 0, 0, 0, 0, 0, 0, 0, 301, 0,
	0, 331, 523, 505, 515, 506, 491, 492, 493, 500,
	311, 494, 495, 496, 466, 497, 467, 498, 499, 0,
	522, 473, 392, 345, 540, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 199, 0, 0, 0, 0, 0, 0,
	274, 200, 468, 587, 470, 469, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 277, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 264, 397, 414,
	275, 388, 427, 280, 395, 270, 360, 384, 0, 0,
	266, 412, 394, 342, 321, 322, 265, 0, 379, 299,
	313, 296, 358, 0, 411, 439, 295, 430, 0, 422,
	268, 0, 421, 357, 408, 413, 343, 337, 267, 410,
	341, 336, 325, 303, 455, 326, 327, 317, 369, 335,
	370, 318, 347, 346, 348, 0, 0, 0, 0, 0,
	450, 451, 0, 0, 0, 0, 0, 0, 0, 0,
	2690, 0, 0, 2689, 581, 0, 0, 584, 0, 424,
	0, 0, 0, 0, 0, 0, 396, 0, 0, 328,
	0, 0, 0, 440, 0, 382, 363, 604, 0, 0,
	380, 333, 409, 371, 415, 398, 423, 376, 372, 259,
	399, 298, 344, 271, 273, 293, 300, 302, 304, 305,
	353, 354, 366, 387, 400, 401, 402, 297, 281, 381,
	282, 315, 283, 260, 289, 287, 290, 389, 291, 262,
	367, 406, 0, 310, 377, 340, 263, 339, 368, 405,
	404, 272, 431, 437, 438, 527, 0, 443, 605, 606,
	607, 452, 457, 458, 459, 461, 462, 463, 464, 528,
	545, 512, 482, 445, 536, 479, 483, 484, 548, 0,
	0, 0, 436, 329, 330, 0, 308, 256, 257, 601,
	294, 359, 550, 583, 475, 0, 537, 476, 485, 286,
	509, 521, 520, 355, 435, 0, 532, 535, 465, 600,
	0, 529, 544, 603, 543, 597, 365, 0, 386, 541,
	488, 0, 533, 507, 0, 534, 503, 538, 0, 477,
	0, 393, 417, 429, 446, 449, 478, 563, 564, 565,
	261, 448, 567, 568, 569, 570, 571, 572, 573, 566,
	420, 510, 487, 513, 428, 490, 489, 0, 0, 524,
	444, 525, 526, 349, 350, 351, 352, 312, 551, 279,
	447, 375, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 0, 516, 517, 514, 608, 0, 574, 575, 0,
	0, 441, 442, 307, 314, 460, 316, 278, 364, 309,
	426, 323, 0, 453, 518, 454, 577, 580, 578, 579,
	356, 319, 320, 390, 324, 334, 378, 425, 362, 383,
	276, 416, 391, 338, 504, 531, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 248, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 559, 558, 557, 556, 555, 554, 553, 552,
	0, 0, 501, 403, 288, 253, 284, 285, 292, 598,
	595, 407, 599, 0, 258, 481, 332, 0, 373, 306,
	546, 547, 209, 210, 211, 212, 213, 214, 215, 216,
	254, 217, 218, 219, 220, 221, 222, 223, 226, 227,
	228, 229, 230, 231, 232, 233, 549, 224, 225, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 247, 0, 0, 0, 255, 249, 250, 251,
	252, 0, 0, 0, 432, 433, 434, 456, 418, 480,
	596, 0, 0, 0, 0, 0, 0, 0, 530, 542,
	576, 0, 585, 586, 588, 590, 589, 0, 602, 471,
	472, 582, 361, 0, 486, 519, 508, 591, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 301,
	1411, 0, 331, 523, 505, 515, 506, 491, 492, 493,
	500, 311, 494, 495, 496, 466, 497, 467, 498, 499,
	0, 522, 473, 392, 345, 540, 539, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 199, 0, 0, 1409, 0, 0,
	0, 274, 200, 468, 587, 470, 469, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 277, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1407, 0, 0, 0, 0, 0, 0, 264, 397,
	414, 275, 388, 427, 280, 395, 270, 360, 384, 0,
	0, 266, 412, 394, 342, 321, 322, 265, 0, 379,
	299, 313, 296, 358, 0, 411, 439, 295, 430, 0,
	422, 268, 0, 421, 357, 408, 413, 343, 337, 267,
	410, 341, 336, 325, 303, 455, 326, 327, 317, 369,
	335, 370, 318, 347, 346, 348, 0, 0, 0, 0,
	0, 450, 451, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 581, 0, 0, 584, 0,
	424, 0, 0, 0, 0, 0, 0, 396, 0, 0,
	328, 0, 0, 0, 440, 0, 382, 363, 604, 0,
	0, 380, 333, 409, 371, 415, 398, 423, 376, 372,
	259, 399, 298, 344, 271, 273, 293, 300, 302, 304,
	305, 353, 354, 366, 387, 400, 401, 402, 297, 281,
	381, 282, 315, 283, 260, 289, 287, 290, 389, 291,
	262, 367, 406, 0, 310, 377, 340, 263, 339, 368,
	405, 404, 272, 431, 437, 438, 527, 0, 443, 605,
	606, 607, 452, 457, 458, 459, 461, 462, 463, 464,
	528, 545, 512, 482, 445, 536, 479, 483, 484, 548,
	0, 0, 0, 436, 329, 330, 0, 308, 256, 257,
	601, 294, 359, 550, 583, 475, 0, 537, 476, 485,
	286, 509, 521, 520, 355, 435, 0, 532, 535, 465,
	600, 0, 529, 544, 603, 543, 597, 365, 0, 386,
	541, 488, 0, 533, 507, 0, 534, 503, 538, 0,
	477, 0, 393, 417, 429, 446, 449, 478, 563, 564,
	565, 261, 448, 567, 568, 569, 570, 571, 572, 573,
	566, 420, 510, 487, 513, 428, 490, 489, 0, 0,
	524, 444, 525, 526, 349, 350, 351, 352, 312, 551,
	279, 447, 375, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 0, 516, 517, 514, 608, 0, 574, 575,
	0, 0, 441, 442, 307, 314, 460, 316, 278, 364,
	309, 426, 323, 0, 453, 518, 454, 577, 580, 578,
	579, 356, 319, 320, 390, 324, 334, 378, 425, 362,
	383, 276, 416, 391, 338, 504, 531, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 559, 558, 557, 556, 555, 554, 553,
	552, 0, 0, 501, 403, 288, 253, 284, 285, 292,
	598, 595, 407, 599, 0, 258, 481, 332, 0, 373,
	306, 546, 547, 209, 210, 211, 212, 213, 214, 215,
	216, 254, 217, 218, 219, 220, 221, 222, 223, 226,
	227, 228, 229, 230, 231, 232, 233, 549, 224, 225,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 0, 0, 0, 255, 249, 250,
	251, 252, 0, 0, 0, 432, 433, 434, 456, 418,
	480, 596, 0, 0, 0, 0, 0, 0, 0, 530,
	542, 576, 0, 585, 586, 588, 590, 589, 0, 602,
	471, 472, 582, 361, 0, 486, 519, 508, 591, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	301, 1405, 0, 331, 523, 505, 515, 506, 491, 492,
	493, 500, 311, 494, 495, 496, 466, 497, 467, 498,
	499, 0, 522, 473, 392, 345, 540, 539, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 199, 0, 0, 1409, 0,
	0, 0, 274, 200, 468, 587, 470, 469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 277, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1407, 0, 0, 0, 0, 0, 0, 264,
	397, 414, 275, 388, 427, 280, 395, 270, 360, 384,
	0, 0, 266, 412, 394, 342, 321, 322, 265, 0,
	379, 299, 313, 296, 358, 0, 411, 439, 295, 430,
	0, 422, 268, 0, 421, 357, 408, 413, 343, 337,
	267, 410, 341, 336, 325, 303, 455, 326, 327, 317,
	369, 335, 370, 318, 347, 346, 348, 0, 0, 0,
	0, 0, 450, 451, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 581, 0, 0, 584,
	0, 424, 0, 0, 0, 0, 0, 0, 396, 0,
	0, 328, 0, 0, 0, 440, 0, 382, 363, 604,
	0, 0, 380, 333, 409, 371, 415, 398, 423, 376,
	372, 259, 399, 298, 344, 271, 273, 293, 300, 302,
	304, 305, 353, 354, 366, 387, 400, 401, 402, 297,
	281, 381, 282, 315, 283, 260, 289, 287, 290, 389,
	291, 262, 367, 406, 0, 310, 377, 340, 263, 339,
	368, 405, 404, 272, 431, 437, 438, 527, 0, 443,
	605, 606, 607, 452, 457, 458, 459, 461, 462, 463,
	464, 528, 545, 512, 482, 445, 536, 479, 483, 484,
	548, 0, 0, 0, 436, 329, 330, 0, 308, 256,
	257, 601, 294, 359, 550, 583, 475, 0, 537, 476,
	485, 286, 509, 521, 520, 355, 435, 0, 532, 535,
	465, 600, 0, 529, 544, 603, 543, 597, 365, 0,
	386, 541, 488, 0, 533, 507, 0, 534, 503, 538,
	0, 477, 0, 393, 417, 429, 446, 449, 478, 563,
	564, 565, 261, 448, 567, 568, 569, 570, 571, 572,
	573, 566, 420, 510, 487, 513, 428, 490, 489, 0,
	0, 524, 444, 525, 526, 349, 350, 351, 352, 312,
	551, 279, 447, 375, 0, 511, 0, 0, 0, 0,
	0, 0, 0, 0, 516, 517, 514, 608, 0, 574,
	575, 0, 0, 441, 442, 307, 314, 460, 316, 278,
	364, 309, 426, 323, 0, 453, 518, 454, 577, 580,
	578, 579, 356, 319, 320, 390, 324, 334, 378, 425,
	362, 383, 276, 416, 391, 338, 504, 531, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 559, 558, 557, 556, 555, 554,
	553, 552, 0, 0, 501, 403, 288, 253, 284, 285,
	292, 598, 595, 407, 599, 0, 258, 481, 332, 0,
	373, 306, 546, 547, 209, 210, 211, 212, 213, 214,
	215, 216, 254, 217, 218, 219, 220, 221, 222, 223,
	226, 227, 228, 229, 230, 231, 232, 233, 549, 224,
	225, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 0, 0, 0, 255, 249,
	250, 251, 252, 0, 0, 0, 432, 433, 434, 456,
	418, 480, 596, 0, 0, 0, 0, 0, 0, 0,
	530, 542, 576, 0, 585, 586, 588, 590, 589, 0,
	602, 471, 472, 582, 361, 0, 486, 519, 508, 591,
	474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 301, 0, 0, 331, 523, 505, 515, 506, 491,
	492, 493, 500, 311, 494, 495, 496, 466, 497, 467,
	498, 499, 0, 522, 473, 392, 345, 540, 539, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3599, 0, 199, 785, 0, 0,
	0, 0, 0, 274, 200, 468, 587, 470, 469, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 277, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	264, 397, 414, 275, 388, 427, 280, 395, 270, 360,
	384, 0, 0, 266, 412, 394, 342, 321, 322, 265,
	0, 379, 299, 313, 296, 358, 0, 411, 439, 295,
	430, 0, 422, 268, 0, 421, 357, 408, 413, 343,
	337, 267, 410, 341, 336, 325, 303, 455, 326, 327,
	317, 369, 335, 370, 318, 347, 346, 348, 0, 0,
	0, 0, 0, 450, 451, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 581, 0, 0,
	584, 0, 424, 0, 0, 0, 0, 0, 0, 396,
	0, 0, 328, 0, 0, 0, 440, 0, 382, 363,
	604, 0, 0, 380, 333, 409, 371, 415, 398, 423,
	376, 372, 259, 399, 298, 344, 271, 273, 293, 300,
	302, 304, 305, 353, 354, 366, 387, 400, 401, 402,
	297, 281, 381, 282, 315, 283, 260, 289, 287, 290,
	389, 291, 262, 367, 406, 0, 310, 377, 340, 263,
	339, 368, 405, 404, 272, 431, 437, 438, 527, 0,
	443, 605, 606, 607, 452, 457, 458, 459, 461, 462,
	463, 464, 528, 545, 512, 482, 445, 536, 479, 483,
	484, 548, 0, 0, 0, 436, 329, 330, 0, 308,
	256, 257, 601, 294, 359, 550, 583, 475, 0, 537,
	476, 485, 286, 509, 521, 520, 355, 435, 0, 532,
	535, 465, 600, 0, 529, 544, 603, 543, 597, 365,
	0, 386, 541, 488, 0, 533, 507, 0, 534, 503,
	538, 0, 477, 0, 393, 417, 429, 446, 449, 478,
	563, 564, 565, 261, 448, 567, 568, 569, 570, 571,
	572, 573, 566, 420, 510, 487, 513, 428, 490, 489,
	0, 0, 524, 444, 525, 526, 349, 350, 351, 352,
	312, 551, 279, 447, 375, 0, 511, 0, 0, 0,
	0, 0, 0, 0, 0, 516, 517, 514, 608, 0,
	574, 575, 0, 0, 441, 442, 307, 314, 460, 316,
	278, 364, 309, 426, 323, 0, 453, 518, 454, 577,
	580, 578, 579, 356, 319, 320, 390, 324, 334, 378,
	425, 362, 383, 276, 416, 391, 338, 504, 531, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 559, 558, 557, 556, 555,
	554, 553, 552, 0, 0, 501, 403, 288, 253, 284,
	285, 292, 598, 595, 407, 599, 0, 258, 481, 332,
	0, 373, 306, 546, 547, 209, 210, 211, 212, 213,
	214, 215, 216, 254, 217, 218, 219, 220, 221, 222,
	223, 226, 227, 228, 229, 230, 231, 232, 233, 549,
	224, 225, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 0, 0, 0, 255,
	249, 250, 251, 252, 0, 0, 0, 432, 433, 434,
	456, 418, 480, 596, 0, 0, 0, 0, 0, 0,
	0, 530, 542, 576, 0, 585, 586, 588, 590, 589,
	0, 602, 471, 472, 582, 361, 0, 486, 519, 508,
	591, 474, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 0, 0, 331, 523, 505, 515, 506,
	491, 492, 493, 500, 311, 494, 495, 496, 466, 497,
	467, 498, 499, 0, 522, 473, 392, 345, 540, 539,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 199, 0, 0,
	1409, 0, 0, 0, 274, 200, 468, 587, 470, 469,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1407, 0, 0, 0, 0, 0,
	0, 264, 397, 414, 275, 388, 427, 280, 395, 270,
	360, 384, 0, 0, 266, 412, 394, 342, 321, 322,
	265, 0, 379, 299, 313, 296, 358, 0, 411, 439,
	295, 430, 0, 422, 268, 0, 421, 357, 408, 413,
	343, 337, 267, 410, 341, 336, 325, 303, 455, 326,
	327, 317, 369, 335, 370, 318, 347, 346, 348, 0,
	0, 0, 0, 0, 450, 451, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 581, 0,
	0, 584, 0, 424, 0, 0, 0, 0, 0, 0,
	396, 0, 0, 328, 0, 0, 0, 440, 0, 382,
	363, 604, 0, 0, 380, 333, 409, 371, 415, 398,
	423, 376, 372, 259, 399, 298, 344, 271, 273, 293,
	300, 302, 304, 305, 353, 354, 366, 387, 400, 401,
	402, 297, 281, 381, 282, 315, 283, 260, 289, 287,
	290, 389, 291, 262, 367, 406, 0, 310, 377, 340,
	263, 339, 368, 405, 404, 272, 431, 437, 438, 527,
	0, 443, 605, 606, 607, 452, 457, 458, 459, 461,
	462, 463, 464, 528, 545, 512, 482, 445, 536, 479,
	483, 484, 548, 0, 0, 0, 436, 329, 330, 0,
	308, 256, 257, 601, 294, 359, 550, 583, 475, 0,
	537, 476, 485, 286, 509, 521, 520, 355, 435, 0,
	532, 535, 465, 600, 0, 529, 544, 603, 543, 597,
	365, 0, 386, 541, 488, 0, 533, 507, 0, 534,
	503, 538, 0, 477, 0, 393, 417, 429, 446, 449,
	478, 563, 564, 565, 261, 448, 567, 568, 569, 570,
	571, 572, 573, 566, 420, 510, 487, 513, 428, 490,
	489, 0, 0, 524, 444, 525, 526, 349, 350, 351,
	352, 312, 551, 279, 447, 375, 0, 511, 0, 0,
	0, 0, 0, 0, 0, 0, 516, 517, 514, 608,
	0, 574, 575, 0, 0, 441, 442, 307, 314, 460,
	316, 278, 364, 309, 426, 323, 0, 453, 518, 454,
	577, 580, 578, 579, 356, 319, 320, 390, 324, 334,
	378, 425, 362, 383, 276, 416, 391, 338, 504, 531,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 559, 558, 557, 556,
	555, 554, 553, 552, 0, 0, 501, 403, 288, 253,
	284, 285, 292, 598, 595, 407, 599, 0, 258, 481,
	332, 0, 373, 306, 546, 547, 209, 210, 211, 212,
	213, 214, 215, 216, 254, 217, 218, 219, 220, 221,
	222, 223, 226, 227, 228, 229, 230, 231, 232, 233,
	549, 224, 225, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 0, 0, 0,
	255, 249, 250, 251, 252, 0, 0, 0, 432, 433,
	434, 456, 418, 480, 596, 0, 0, 0, 0, 0,
	0, 0, 530, 542, 576, 0, 585, 586, 588, 590,
	589, 0, 602, 471, 472, 582, 361, 0, 486, 519,
	508, 591, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 301, 0, 0, 331, 523, 505, 515,
	506, 491, 492, 493, 500, 311, 494, 495, 496, 466,
	497, 467, 498, 499, 0, 522, 473, 392, 345, 540,
	539, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 199, 0,
	0, 1409, 0, 0, 0, 274, 200, 468, 587, 470,
	469, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	277, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3260, 0, 0, 0, 0,
	0, 0, 264, 397, 414, 275, 388, 427, 280, 395,
	270, 360, 384, 0, 0, 266, 412, 394, 342, 321,
	322, 265, 0, 379, 299, 313, 296, 358, 0, 411,
	439, 295, 430, 0, 422, 268, 0, 421, 357, 408,
	413, 343, 337, 267, 410, 341, 336, 325, 303, 455,
	326, 327, 317, 369, 335, 370, 318, 347, 346, 348,
	0, 0, 0, 0, 0, 450, 451, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 581,
	0, 0, 584, 0, 424, 0, 0, 0, 0, 0,
	0, 396, 0, 0, 328, 0, 0, 0, 440, 0,
	382, 363, 604, 0, 0, 380, 333, 409, 371, 415,
	398, 423, 376, 372, 259, 399, 298, 344, 271, 273,
	293, 300, 302, 304, 305, 353, 354, 366, 387, 400,
	401, 402, 297, 281, 381, 282, 315, 283, 260, 289,
	287, 290, 389, 291, 262, 367, 406, 0, 310, 377,
	340, 263, 339, 368, 405, 404, 272, 431, 437, 438,
	527, 0, 443, 605, 606, 607, 452, 457, 458, 459,
	461, 462, 463, 464, 528, 545, 512, 482, 445, 536,
	479, 483, 484, 548, 0, 0, 0, 436, 329, 330,
	0, 308, 256, 257, 601, 294, 359, 550, 583, 475,
	0, 537, 476, 485, 286, 509, 521, 520, 355, 435,
	0, 532, 535, 465, 600, 0, 529, 544, 603, 543,
	597, 365, 0, 386, 541, 488, 0, 533, 507, 0,
	534, 503, 538, 0, 477, 0, 393, 417, 429, 446,
	449, 478, 563, 564, 565, 261, 448, 567, 568, 569,
	570, 571, 572, 573, 566, 420, 510, 487, 513, 428,
	490, 489, 0, 0, 524, 444, 525, 526, 349, 350,
	351, 352, 312, 551, 279, 447, 375, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 0, 516, 517, 514,
	608, 0, 574, 575, 0, 0, 441, 442, 307, 314,
	460, 316, 278, 364, 309, 426, 323, 0, 453, 518,
	454, 577, 580, 578, 579, 356, 319, 320, 390, 324,
	334, 378, 425, 362, 383, 276, 416, 391, 338, 504,
	531, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 559, 558, 557,
	556, 555, 554, 553, 552, 0, 0, 501, 403, 288,
	253, 284, 285, 292, 598, 595, 407, 599, 0, 258,
	481, 332, 0, 373, 306, 546, 547, 209, 210, 211,
	212, 213, 214, 215, 216, 254, 217, 218, 219, 220,
	221, 222, 223, 226, 227, 228, 229, 230, 231, 232,
	233, 549, 224, 225, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 0, 0,
	0, 255, 249, 250, 251, 252, 0, 0, 0, 432,
	433, 434, 456, 418, 480, 596, 0, 0, 0, 0,
	0, 0, 0, 530, 542, 576, 0, 585, 586, 588,
	590, 589, 0, 602, 471, 472, 582, 361, 0, 486,
	519, 508, 591, 474, 0, 0, 0, 0, 0, 2280,
	0, 0, 0, 0, 301, 0, 0, 331, 523, 505,
	515, 506, 491, 492, 493, 500, 311, 494, 495, 496,
	466, 497, 467, 498, 499, 0, 522, 473, 392, 345,
	540, 539, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 199,
	0, 0, 2282, 0, 0, 0, 274, 200, 468, 587,
	470, 469, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 277, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 264, 397, 414, 275, 388, 427, 280,
	395, 270, 360, 384, 0, 0, 266, 412, 394, 342,
	321, 322, 265, 0, 379, 299, 313, 296, 358, 0,
	411, 439, 295, 430, 0, 422, 268, 0, 421, 357,
	408, 413, 343, 337, 267, 410, 341, 336, 325, 303,
	455, 326, 327, 317, 369, 335, 370, 318, 347, 346,
	348, 0, 0, 0, 0, 0, 450, 451, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	581, 0, 0, 584, 0, 424, 0, 0, 0, 0,
	0, 0, 396, 0, 0, 328, 0, 0, 0, 440,
	0, 382, 363, 604, 0, 0, 380, 333, 409, 371,
	415, 398, 423, 376, 372, 259, 399, 298, 344, 271,
	273, 293, 300, 302, 304, 305, 353, 354, 366, 387,
	400, 401, 402, 297, 281, 381, 282, 315, 283, 260,
	289, 287, 290, 389, 291, 262, 367, 406, 0, 310,
	377, 340, 263, 339, 368, 405, 404, 272, 431, 437,
	438, 527, 0, 443, 605, 606, 607, 452, 457, 458,
	459, 461, 462, 463, 464, 528, 545, 512, 482, 445,
	536, 479, 483, 484, 548, 0, 0, 0, 436, 329,
	330, 0, 308, 256, 257, 601, 294, 359, 550, 583,
	475, 0, 537, 476, 485, 286, 509, 521, 520, 355,
	435, 0, 532, 535, 465, 600, 0, 529, 544, 603,
	543, 597, 365, 0, 386, 541, 488, 0, 533, 507,
	0, 534, 503, 538, 0, 477, 0, 393, 417, 429,
	446, 449, 478, 563, 564, 565, 261, 448, 567, 568,
	569, 570, 571, 572, 573, 566, 420, 510, 487, 513,
	428, 490, 489, 0, 0, 524, 444, 525, 526, 349,
	350, 351, 352, 312, 551, 279, 447, 375, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 0, 516, 517,
	514, 608, 0, 574, 575, 0, 0, 441, 442, 307,
	314, 460, 316, 278, 364, 309, 426, 323, 0, 453,
	518, 454, 577, 580, 578, 579, 356, 319, 320, 390,
	324, 334, 378, 425, 362, 383, 276, 416, 391, 338,
	504, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 248, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 559, 558,
	557, 556, 555, 554, 553, 552, 0, 0, 501, 403,
	288, 253, 284, 285, 292, 598, 595, 407, 599, 0,
	258, 481, 332, 0, 373, 306, 546, 547, 209, 210,
	211, 212, 213, 214, 215, 216, 254, 217, 218, 219,
	220, 221, 222, 223, 226, 227, 228, 229, 230, 231,
	232, 233, 549, 224, 225, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 0,
	0, 0, 255, 249, 250, 251, 252, 0, 0, 0,
	432, 433, 434, 456, 418, 480, 596, 0, 0, 0,
	0, 0, 0, 0, 530, 542, 576, 0, 585, 586,
	588, 590, 589, 0, 602, 471, 472, 582, 361, 0,
	486, 519, 508, 591, 474, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 301, 2301, 0, 331, 523,
	505, 515, 506, 491, 492, 493, 500, 311, 494, 495,
	496, 466, 497, 467, 498, 499, 0, 522, 473, 392,
	345, 540, 539, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	199, 0, 0, 1409, 0, 0, 0, 274, 200, 468,
	587, 470, 469, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 277, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 264, 397, 414, 275, 388, 427,
	280, 395, 270, 360, 384, 0, 0, 266, 412, 394,
	342, 321, 322, 265, 0, 379, 299, 313, 296, 358,
	0, 411, 439, 295, 430, 0, 422, 268, 0, 421,
	357, 408, 413, 343, 337, 267, 410, 341, 336, 325,
	303, 455, 326, 327, 317, 369, 335, 370, 318, 347,
	346, 348, 0, 0, 0, 0, 0, 450, 451, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 581, 0, 0, 584, 0, 424, 0, 0, 0,
	0, 0, 0, 396, 0, 0, 328, 0, 0, 0,
	440, 0, 382, 363, 604, 0, 0, 380, 333, 409,
	371, 415, 398, 423, 376, 372, 259, 399, 298, 344,
	271, 273, 293, 300, 302, 304, 305, 353, 354, 366,
	387, 400, 401, 402, 297, 281, 381, 282, 315, 283,
	260, 289, 287, 290, 389, 291, 262, 367, 406, 0,
	310, 377, 340, 263, 339, 368, 405, 404, 272, 431,
	437, 438, 527, 0, 443, 605, 606, 607, 452, 457,
	458, 459, 461, 462, 463, 464, 528, 545, 512, 482,
	445, 536, 479, 483, 484, 548, 0, 0, 0, 436,
	329, 330, 0, 308, 256, 257, 601, 294, 359, 550,
	583, 475, 0, 537, 476, 485, 286, 509, 521, 520,
	355, 435, 0, 532, 535, 465, 600, 0, 529, 544,
	603, 543, 597, 365, 0, 386, 541, 488, 0, 533,
	507, 0, 534, 503, 538, 0, 477, 0, 393, 417,
	429, 446, 449, 478, 563, 564, 565, 261, 448, 567,
	568, 569, 570, 571, 572, 573, 566, 420, 510, 487,
	513, 428, 490, 489, 0, 0, 524, 444, 525, 526,
	349, 350, 351, 352, 312, 551, 279, 447, 375, 0,
	511, 0, 0, 0, 0, 0, 0, 0, 0, 516,
	517, 514, 608, 0, 574, 575, 0, 0, 441, 442,
	307, 314, 460, 316, 278, 364, 309, 426, 323, 0,
	453, 518, 454, 577, 580, 578, 579, 356, 319, 320,
	390, 324, 334, 378, 425, 362, 383, 276, 416, 391,
	338, 504, 531, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 559,
	558, 557, 556, 555, 554, 553, 552, 0, 0, 501,
	403, 288, 253, 284, 285, 292, 598, 595, 407, 599,
	0, 258, 481, 332, 0, 373, 306, 546, 547, 209,
	210, 211, 212, 213, 214, 215, 216, 254, 217, 218,
	219, 220, 221, 222, 223, 226, 227, 228, 229, 230,
	231, 232, 233, 549, 224, 225, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	0, 0, 0, 255, 249, 250, 251, 252, 0, 0,
	0, 432, 433, 434, 456, 418, 480, 596, 0, 0,
	0, 0, 0, 0, 0, 530, 542, 576, 0, 585,
	586, 588, 590, 589, 0, 602, 471, 472, 582, 361,
	0, 486, 519, 508, 591, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 301, 0, 0, 331,
	523, 505, 515, 506, 491, 492, 493, 500, 311, 494,
	495, 496, 466, 497, 467, 498, 499, 0, 522, 473,
	392, 345, 540, 539, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 199, 785, 0, 0, 0, 0, 0, 274, 200,
	468, 587, 470, 469, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 277, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 264, 397, 414, 275, 388,
	427, 280, 395, 270, 360, 384, 0, 0, 266, 412,
	394, 342, 321, 322, 265, 0, 379, 299, 313, 296,
	358, 0, 411, 439, 295, 430, 0, 422, 268, 0,
	421, 357, 408, 413, 343, 337, 267, 410, 341, 336,
	325, 303, 455, 326, 327, 317, 369, 335, 370, 318,
	347, 346, 348, 0, 0, 0, 0, 0, 450, 451,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 581, 0, 0, 584, 0, 424, 0, 0,
	0, 0, 0, 0, 396, 0, 0, 328, 0, 0,
	0, 440, 0, 382, 363, 604, 0, 0, 380, 333,
	409, 371, 415, 398, 423, 376, 372, 259, 399, 298,
	344, 271, 273, 293, 300, 302, 304, 305, 353, 354,
	366, 387, 400, 401, 402, 297, 281, 381, 282, 315,
	283, 260, 289, 287, 290, 389, 291, 262, 367, 406,
	0, 310, 377, 340, 263, 339, 368, 405, 404, 272,
	431, 437, 438, 527, 0, 443, 605, 606, 607, 452,
	457, 458, 459, 461, 462, 463, 464, 528, 545, 512,
	482, 445, 536, 479, 483, 484, 548, 0, 0, 0,
	436, 329, 330, 0, 308, 256, 257, 601, 294, 359,
	550, 583, 475, 0, 537, 476, 485, 286, 509, 521,
	520, 355, 435, 0, 532, 535, 465, 600, 0, 529,
	544, 603, 543, 597, 365, 0, 386, 541, 488, 0,
	533, 507, 0, 534, 503, 538, 0, 477, 0, 393,
	417, 429, 446, 449, 478, 563, 564, 565, 261, 448,
	567, 568, 569, 570, 571, 572, 573, 566, 420, 510,
	487, 513, 428, 490, 489, 0, 0, 524, 444, 525,
	526, 349, 350, 351, 352, 312, 551, 279, 447, 375,
	0, 511, 0, 0, 0, 0, 0, 0, 0, 0,
	516, 517, 514, 608, 0, 574, 575, 0, 0, 441,
	442, 307, 314, 460, 316, 278, 364, 309, 426, 323,
	0, 453, 518, 454, 577, 580, 578, 579, 356, 319,
	320, 390, 324, 334, 378, 425, 362, 383, 276, 416,
	391, 338, 504, 531, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 248, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	559, 558, 557, 556, 555, 554, 553, 552, 0, 0,
	501, 403, 288, 253, 284, 285, 292, 598, 595, 407,
	599, 0, 258, 481, 332, 0, 373, 306, 546, 547,
	209, 210, 211, 212, 213, 214, 215, 216, 254, 217,
	218, 219, 220, 221, 222, 223, 226, 227, 228, 229,
	230, 231, 232, 233, 549, 224, 225, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 0, 0, 0, 255, 249, 250, 251, 252, 0,
	0, 0, 432, 433, 434, 456, 418, 480, 596, 0,
	0, 0, 0, 0, 0, 0, 530, 542, 576, 0,
	585, 586, 588, 590, 589, 0, 602, 471, 472, 582,
	361, 0, 486, 519, 508, 591, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 301, 0, 0,
	331, 523, 505, 515, 506, 491, 492, 493, 500, 311,
	494, 495, 496, 466, 497, 467, 498, 499, 0, 522,
	473, 392, 345, 540, 539, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3618,
	0, 0, 199, 0, 0, 0, 0, 0, 0, 274,
	200, 468, 587, 470, 469, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 264, 397, 414, 275,
	388, 427, 280, 395, 270, 360, 384, 0, 0, 266,
	412, 394, 342, 321, 322, 265, 0, 379, 299, 313,
	296, 358, 0, 411, 439, 295, 430, 0, 422, 268,
	0, 421, 357, 408, 413, 343, 337, 267, 410, 341,
	336, 325, 303, 455, 326, 327, 317, 369, 335, 370,
	318, 347, 346, 348, 0, 0, 0, 0, 0, 450,
	451, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 581, 0, 0, 584, 0, 424, 0,
	0, 0, 0, 0, 0, 396, 0, 0, 328, 0,
	0, 0, 440, 0, 382, 363, 604, 0, 0, 380,
	333, 409, 371, 415, 398, 423, 376, 372, 259, 399,
	298, 344, 271, 273, 293, 300, 302, 304, 305, 353,
	354, 366, 387, 400, 401, 402, 297, 281, 381, 282,
	315, 283, 260, 289, 287, 290, 389, 291, 262, 367,
	406, 0, 310, 377, 340, 263, 339, 368, 405, 404,
	272, 431, 437, 438, 527, 0, 443, 605, 606, 607,
	452, 457, 458, 459, 461, 462, 463, 464, 528, 545,
	512, 482, 445, 536, 479, 483, 484, 548, 0, 0,
	0, 436, 329, 330, 0, 308, 256, 257, 601, 294,
	359, 550, 583, 475, 0, 537, 476, 485, 286, 509,
	521, 520, 355, 435, 0, 532, 535, 465, 600, 0,
	529, 544, 603, 543, 597, 365, 0, 386, 541, 488,
	0, 533, 507, 0, 534, 503, 538, 0, 477, 0,
	393, 417, 429, 446, 449, 478, 563, 564, 565, 261,
	448, 567, 568, 569, 570, 571, 572, 573, 566, 420,
	510, 487, 513, 428, 490, 489, 0, 0, 524, 444,
	525, 526, 349, 350, 351, 352, 312, 551, 279, 447,
	375, 0, 511, 0, 0, 0, 0, 0, 0, 0,
	0, 516, 517, 514, 608, 0, 574, 575, 0, 0,
	441, 442, 307, 314, 460, 316, 278, 364, 309, 426,
	323, 0, 453, 518, 454, 577, 580, 578, 579, 356,
	319, 320, 390, 324, 334, 378, 425, 362, 383, 276,
	416, 391, 338, 504, 531, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 248, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 559, 558, 557, 556, 555, 554, 553, 552, 0,
	0, 501, 403, 288, 253, 284, 285, 292, 598, 595,
	407, 599, 0, 258, 481, 332, 0, 373, 306, 546,
	547, 209, 210, 211, 212, 213, 214, 215, 216, 254,
	217, 218, 219, 220, 221, 222, 223, 226, 227, 228,
	229, 230, 231, 232, 233, 549, 224, 225, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 0, 0, 0, 255, 249, 250, 251, 252,
	0, 0, 0, 432, 433, 434, 456, 418, 480, 596,
	0, 0, 0, 0, 0, 0, 0, 530, 542, 576,
	0, 585, 586, 588, 590, 589, 0, 602, 471, 472,
	582, 361, 0, 486, 519, 508, 591, 474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 301, 0,
	0, 331, 523, 505, 515, 506, 491, 492, 493, 500,
	311, 494, 495, 496, 466, 497, 467, 498, 499, 0,
	522, 473, 392, 345, 540, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 199, 0, 0, 3404, 0, 0, 0,
	274, 200, 468, 587, 470, 469, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 277, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 264, 397, 414,
	275, 388, 427, 280, 395, 270, 360, 384, 0, 0,
	266, 412, 394, 342, 321, 322, 265, 0, 379, 299,
	313, 296, 358, 0, 411, 439, 295, 430, 0, 422,
	268, 0, 421, 357, 408, 413, 343, 337, 267, 410,
	341, 336, 325, 303, 455, 326, 327, 317, 369, 335,
	370, 318, 347, 346, 348, 0, 0, 0, 0, 0,
	450, 451, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 581, 0, 0, 584, 0, 424,
	0, 0, 0, 0, 0, 0, 396, 0, 0, 328,
	0, 0, 0, 440, 0, 382, 363, 604, 0, 0,
	380, 333, 409, 371, 415, 398, 423, 376, 372, 259,
	399, 298, 344, 271, 273, 293, 300, 302, 304, 305,
	353, 354, 366, 387, 400, 401, 402, 297, 281, 381,
	282, 315, 283, 260, 289, 287, 290, 389, 291, 262,
	367, 406, 0, 310, 377, 340, 263, 339, 368, 405,
	404, 272, 431, 437, 438, 527, 0, 443, 605, 606,
	607, 452, 457, 458, 459, 461, 462, 463, 464, 528,
	545, 512, 482, 445, 536, 479, 483, 484, 548, 0,
	0, 0, 436, 329, 330, 0, 308, 256, 257, 601,
	294, 359, 550, 583, 475, 0, 537, 476, 485, 286,
	509, 521, 520, 355, 435, 0, 532, 535, 465, 600,
	0, 529, 544, 603, 543, 597, 365, 0, 386, 541,
	488, 0, 533, 507, 0, 534, 503, 538, 0, 477,
	0, 393, 417, 429, 446, 449, 478, 563, 564, 565,
	261, 448, 567, 568, 569, 570, 571, 572, 573, 566,
	420, 510, 487, 513, 428, 490, 489, 0, 0, 524,
	444, 525, 526, 349, 350, 351, 352, 312, 551, 279,
	447, 375, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 0, 516, 517, 514, 608, 0, 574, 575, 0,
	0, 441, 442, 307, 314, 460, 316, 278, 364, 309,
	426, 323, 0, 453, 518, 454, 577, 580, 578, 579,
	356, 319, 320, 390, 324, 334, 378, 425, 362, 383,
	276, 416, 391, 338, 504, 531, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 248, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 559, 558, 557, 556, 555, 554, 553, 552,
	0, 0, 501, 403, 288, 253, 284, 285, 292, 598,
	595, 407, 599, 0, 258, 481, 332, 0, 373, 306,
	546, 547, 209, 210, 211, 212, 213, 214, 215, 216,
	254, 217, 218, 219, 220, 221, 222, 223, 226, 227,
	228, 229, 230, 231, 232, 233, 549, 224, 225, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 247, 0, 0, 0, 255, 249, 250, 251,
	252, 0, 0, 0, 432, 433, 434, 456, 418, 480,
	596, 0, 0, 0, 0, 0, 0, 0, 530, 542,
	576, 0, 585, 586, 588, 590, 589, 0, 602, 471,
	472, 582, 361, 0, 486, 519, 508, 591, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 301,
	0, 0, 331, 523, 505, 515, 506, 491, 492, 493,
	500, 311, 494, 495, 496, 466, 497, 467, 498, 499,
	0, 522, 473, 392, 345, 540, 539, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 199, 0, 0, 0, 0, 0,
	0, 274, 200, 468, 587, 470, 469, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 277, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 264, 397,
	414, 275, 388, 427, 280, 395, 270, 360, 384, 0,
	0, 266, 412, 394, 342, 321, 322, 265, 0, 379,
	299, 313, 296, 358, 0, 411, 439, 295, 430, 0,
	422, 268, 0, 421, 357, 408, 413, 343, 337, 267,
	410, 341, 336, 325, 303, 455, 326, 327, 317, 369,
	335, 370, 318, 347, 346, 348, 0, 0, 0, 0,
	0, 450, 451, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 581, 0, 0, 584, 0,
	424, 0, 0, 0, 3529, 0, 0, 396, 0, 0,
	328, 0, 0, 0, 440, 0, 382, 363, 604, 0,
	0, 380, 333, 409, 371, 415, 398, 423, 376, 372,
	259, 399, 298, 344, 271, 273, 293, 300, 302, 304,
	305, 353, 354, 366, 387, 400, 401, 402, 297, 281,
	381, 282, 315, 283, 260, 289, 287, 290, 389, 291,
	262, 367, 406, 0, 310, 377, 340, 263, 339, 368,
	405, 404, 272, 431, 437, 438, 527, 0, 443, 605,
	606, 607, 452, 457, 458, 459, 461, 462, 463, 464,
	528, 545, 512, 482, 445, 536, 479, 483, 484, 548,
	0, 0, 0, 436, 329, 330, 0, 308, 256, 257,
	601, 294, 359, 550, 583, 475, 0, 537, 476, 485,
	286, 509, 521, 520, 355, 435, 0, 532, 535, 465,
	600, 0, 529, 544, 603, 543, 597, 365, 0, 386,
	541, 488, 0, 533, 507, 0, 534, 503, 538, 0,
	477, 0, 393, 417, 429, 446, 449, 478, 563, 564,
	565, 261, 448, 567, 568, 569, 570, 571, 572, 573,
	566, 420, 510, 487, 513, 428, 490, 489, 0, 0,
	524, 444, 525, 526, 349, 350, 351, 352, 312, 551,
	279, 447, 375, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 0, 516, 517, 514, 608, 0, 574, 575,
	0, 0, 441, 442, 307, 314, 460, 316, 278, 364,
	309, 426, 323, 0, 453, 518, 454, 577, 580, 578,
	579, 356, 319, 320, 390, 324, 334, 378, 425, 362,
	383, 276, 416, 391, 338, 504, 531, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 559, 558, 557, 556, 555, 554, 553,
	552, 0, 0, 501, 403, 288, 253, 284, 285, 292,
	598, 595, 407, 599, 0, 258, 481, 332, 0, 373,
	306, 546, 547, 209, 210, 211, 212, 213, 214, 215,
	216, 254, 217, 218, 219, 220, 221, 222, 223, 226,
	227, 228, 229, 230, 231, 232, 233, 549, 224, 225,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 0, 0, 0, 255, 249, 250,
	251, 252, 0, 0, 0, 432, 433, 434, 456, 418,
	480, 596, 0, 0, 0, 0, 0, 0, 0, 530,
	542, 576, 0, 585, 586, 588, 590, 589, 0, 602,
	471, 472, 582, 361, 0, 486, 519, 508, 591, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 331, 523, 505, 515, 506, 491, 492,
	493, 500, 311, 494, 495, 496, 466, 497, 467, 498,
	499, 0, 522, 473, 392, 345, 540, 539, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3256, 0, 0, 199, 0, 0, 0, 0,
	0, 0, 274, 200, 468, 587, 470, 469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 277, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 264,
	397, 414, 275, 388, 427, 280, 395, 270, 360, 384,
	0, 0, 266, 412, 394, 342, 321, 322, 265, 0,
	379, 299, 313, 296, 358, 0, 411, 439, 295, 430,
	0, 422, 268, 0, 421, 357, 408, 413, 343, 337,
	267, 410, 341, 336, 325, 303, 455, 326, 327, 317,
	369, 335, 370, 318, 347, 346, 348, 0, 0, 0,
	0, 0, 450, 451, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 581, 0, 0, 584,
	0, 424, 0, 0, 0, 0, 0, 0, 396, 0,
	0, 328, 0, 0, 0, 440, 0, 382, 363, 604,
	0, 0, 380, 333, 409, 371, 415, 398, 423, 376,
	372, 259, 399, 298, 344, 271, 273, 293, 300, 302,
	304, 305, 353, 354, 366, 387, 400, 401, 402, 297,
	281, 381, 282, 315, 283, 260, 289, 287, 290, 389,
	291, 262, 367, 406, 0, 310, 377, 340, 263, 339,
	368, 405, 404, 272, 431, 437, 438, 527, 0, 443,
	605, 606, 607, 452, 457, 458, 459, 461, 462, 463,
	464, 528, 545, 512, 482, 445, 536, 479, 483, 484,
	548, 0, 0, 0, 436, 329, 330, 0, 308, 256,
	257, 601, 294, 359, 550, 583, 475, 0, 537, 476,
	485, 286, 509, 521, 520, 355, 435, 0, 532, 535,
	465, 600, 0, 529, 544, 603, 543, 597, 365, 0,
	386, 541, 488, 0, 533, 507, 0, 534, 503, 538,
	0, 477, 0, 393, 417, 429, 446, 449, 478, 563,
	564, 565, 261, 448, 567, 568, 569, 570, 571, 572,
	573, 566, 420, 510, 487, 513, 428, 490, 489, 0,
	0, 524, 444, 525, 526, 349, 350, 351, 352, 312,
	551, 279, 447, 375, 0, 511, 0, 0, 0, 0,
	0, 0, 0, 0, 516, 517, 514, 608, 0, 574,
	575, 0, 0, 441, 442, 307, 314, 460, 316, 278,
	364, 309, 426, 323, 0, 453, 518, 454, 577, 580,
	578, 579, 356, 319, 320, 390, 324, 334, 378, 425,
	362, 383, 276, 416, 391, 338, 504, 531, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 559, 558, 557, 556, 555, 554,
	553, 552, 0, 0, 501, 403, 288, 253, 284, 285,
	292, 598, 595, 407, 599, 0, 258, 481, 332, 0,
	373, 306, 546, 547, 209, 210, 211, 212, 213, 214,
	215, 216, 254, 217, 218, 219, 220, 221, 222, 223,
	226, 227, 228, 229, 230, 231, 232, 233, 549, 224,
	225, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 0, 0, 0, 255, 249,
	250, 251, 252, 0, 0, 0, 432, 433, 434, 456,
	418, 480, 596, 0, 0, 0, 0, 0, 0, 0,
	530, 542, 576, 0, 585, 586, 588, 590, 589, 0,
	602, 471, 472, 582, 361, 0, 486, 519, 508, 591,
	474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 301, 0, 0, 331, 523, 505, 515, 506, 491,
	492, 493, 500, 311, 494, 495, 496, 466, 497, 467,
	498, 499, 0, 522, 473, 392, 345, 540, 539, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3419, 0, 199, 0, 0, 0,
	0, 0, 0, 274, 200, 468, 587, 470, 469, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 277, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	264, 397, 414, 275, 388, 427, 280, 395, 270, 360,
	384, 0, 0, 266, 412, 394, 342, 321, 322, 265,
	0, 379, 299, 313, 296, 358, 0, 411, 439, 295,
	430, 0, 422, 268, 0, 421, 357, 408, 413, 343,
	337, 267, 410, 341, 336, 325, 303, 455, 326, 327,
	317, 369, 335, 370, 318, 347, 346, 348, 0, 0,
	0, 0, 0, 450, 451, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 581, 0, 0,
	584, 0, 424, 0, 0, 0, 0, 0, 0, 396,
	0, 0, 328, 0, 0, 0, 440, 0, 382, 363,
	604, 0, 0, 380, 333, 409, 371, 415, 398, 423,
	376, 372, 259, 399, 298, 344, 271, 273, 293, 300,
	302, 304, 305, 353, 354, 366, 387, 400, 401, 402,
	297, 281, 381, 282, 315, 283, 260, 289, 287, 290,
	389, 291, 262, 367, 406, 0, 310, 377, 340, 263,
	339, 368, 405, 404, 272, 431, 437, 438, 527, 0,
	443, 605, 606, 607, 452, 457, 458, 459, 461, 462,
	463, 464, 528, 545, 512, 482, 445, 536, 479, 483,
	484, 548, 0, 0, 0, 436, 329, 330, 0, 308,
	256, 257, 601, 294, 359, 550, 583, 475, 0, 537,
	476, 485, 286, 509, 521, 520, 355, 435, 0, 532,
	535, 465, 600, 0, 529, 544, 603, 543, 597, 365,
	0, 386, 541, 488, 0, 533, 507, 0, 534, 503,
	538, 0, 477, 0, 393, 417, 429, 446, 449, 478,
	563, 564, 565, 261, 448, 567, 568, 569, 570, 571,
	572, 573, 566, 420, 510, 487, 513, 428, 490, 489,
	0, 0, 524, 444, 525, 526, 349, 350, 351, 352,
	312, 551, 279, 447, 375, 0, 511, 0, 0, 0,
	0, 0, 0, 0, 0, 516, 517, 514, 608, 0,
	574, 575, 0, 0, 441, 442, 307, 314, 460, 316,
	278, 364, 309, 426, 323, 0, 453, 518, 454, 577,
	580, 578, 579, 356, 319, 320, 390, 324, 334, 378,
	425, 362, 383, 276, 416, 391, 338, 504, 531, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 559, 558, 557, 556, 555,
	554, 553, 552, 0, 0, 501, 403, 288, 253, 284,
	285, 292, 598, 595, 407, 599, 0, 258, 481, 332,
	0, 373, 306, 546, 547, 209, 210, 211, 212, 213,
	214, 215, 216, 254, 217, 218, 219, 220, 221, 222,
	223, 226, 227, 228, 229, 230, 231, 232, 233, 549,
	224, 225, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 0, 0, 0, 255,
	249, 250, 251, 252, 0, 0, 0, 432, 433, 434,
	456, 418, 480, 596, 0, 0, 0, 0, 0, 0,
	0, 530, 542, 576, 0, 585, 586, 588, 590, 589,
	0, 602, 471, 472, 582, 361, 0, 486, 519, 508,
	591, 474, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 0, 0, 331, 523, 505, 515, 506,
	491, 492, 493, 500, 311, 494, 495, 496, 466, 497,
	467, 498, 499, 0, 522, 473, 392, 345, 540, 539,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 199, 0, 0,
	0, 0, 0, 0, 274, 200, 468, 587, 470, 469,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 397, 414, 275, 388, 427, 280, 395, 270,
	360, 384, 0, 0, 266, 412, 394, 342, 321, 322,
	265, 0, 379, 299, 313, 296, 358, 0, 411, 439,
	295, 430, 0, 422, 268, 0, 421, 357, 408, 413,
	343, 337, 267, 410, 341, 336, 325, 303, 455, 326,
	327, 317, 369, 335, 370, 318, 347, 346, 348, 0,
	0, 0, 0, 0, 450, 451, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 581, 0,
	0, 584, 0, 424, 0, 0, 0, 3343, 0, 0,
	396, 0, 0, 328, 0, 0, 0, 440, 0, 382,
	363, 604, 0, 0, 380, 333, 409, 371, 415, 398,
	423, 376, 372, 259, 399, 298, 344, 271, 273, 293,
	300, 302, 304, 305, 353, 354, 366, 387, 400, 401,
	402, 297, 281, 381, 282, 315, 283, 260, 289, 287,
	290, 389, 291, 262, 367, 406, 0, 310, 377, 340,
	263, 339, 368, 405, 404, 272, 431, 437, 438, 527,
	0, 443, 605, 606, 607, 452, 457, 458, 459, 461,
	462, 463, 464, 528, 545, 512, 482, 445, 536, 479,
	483, 484, 548, 0, 0, 0, 436, 329, 330, 0,
	308, 256, 257, 601, 294, 359, 550, 583, 475, 0,
	537, 476, 485, 286, 509, 521, 520, 355, 435, 0,
	532, 535, 465, 600, 0, 529, 544, 603, 543, 597,
	365, 0, 386, 541, 488, 0, 533, 507, 0, 534,
	503, 538, 0, 477, 0, 393, 417, 429, 446, 449,
	478, 563, 564, 565, 261, 448, 567, 568, 569, 570,
	571, 572, 573, 566, 420, 510, 487, 513, 428, 490,
	489, 0, 0, 524, 444, 525, 526, 349, 350, 351,
	352, 312, 551, 279, 447, 375, 0, 511, 0, 0,
	0, 0, 0, 0, 0, 0, 516, 517, 514, 608,
	0, 574, 575, 0, 0, 441, 442, 307, 314, 460,
	316, 278, 364, 309, 426, 323, 0, 453, 518, 454,
	577, 580, 578, 579, 356, 319, 320, 390, 324, 334,
	378, 425, 362, 383, 276, 416, 391, 338, 504, 531,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 559, 558, 557, 556,
	555, 554, 553, 552, 0, 0, 501, 403, 288, 253,
	284, 285, 292, 598, 595, 407, 599, 0, 258, 481,
	332, 0, 373, 306, 546, 547, 209, 210, 211, 212,
	213, 214, 215, 216, 254, 217, 218, 219, 220, 221,
	222, 223, 226, 227, 228, 229, 230, 231, 232, 233,
	549, 224, 225, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 0, 0, 0,
	255, 249, 250, 251, 252, 0, 0, 0, 432, 433,
	434, 456, 418, 480, 596, 0, 0, 0, 0, 0,
	0, 0, 530, 542, 576, 0, 585, 586, 588, 590,
	589, 0, 602, 471, 472, 582, 361, 0, 486, 519,
	508, 591, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 301, 0, 0, 331, 523, 505, 515,
	506, 491, 492, 493, 500, 311, 494, 495, 496, 466,
	497, 467, 498, 499, 0, 522, 473, 392, 345, 540,
	539, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 199, 0,
	0, 2902, 0, 0, 0, 274, 200, 468, 587, 470,
	469, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	277, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 264, 397, 414, 275, 388, 427, 280, 395,
	270, 360, 384, 0, 0, 266, 412, 394, 342, 321,
	322, 265, 0, 379, 299, 313, 296, 358, 0, 411,
	439, 295, 430, 0, 422, 268, 0, 421, 357, 408,
	413, 343, 337, 267, 410, 341, 336, 325, 303, 455,
	326, 327, 317, 369, 335, 370, 318, 347, 346, 348,
	0, 0, 0, 0, 0, 450, 451, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 581,
	0, 0, 584, 0, 424, 0, 0, 0, 0, 0,
	0, 396, 0, 0, 328, 0, 0, 0, 440, 0,
	382, 363, 604, 0, 0, 380, 333, 409, 371, 415,
	398, 423, 376, 372, 259, 399, 298, 344, 271, 273,
	293, 300, 302, 304, 305, 353, 354, 366, 387, 400,
	401, 402, 297, 281, 381, 282, 315, 283, 260, 289,
	287, 290, 389, 291, 262, 367, 406, 0, 310, 377,
	340, 263, 339, 368, 405, 404, 272, 431, 437, 438,
	527, 0, 443, 605, 606, 607, 452, 457, 458, 459,
	461, 462, 463, 464, 528, 545, 512, 482, 445, 536,
	479, 483, 484, 548, 0, 0, 0, 436, 329, 330,
	0, 308, 256, 257, 601, 294, 359, 550, 583, 475,
	0, 537, 476, 485, 286, 509, 521, 520, 355, 435,
	0, 532, 535, 465, 600, 0, 529, 544, 603, 543,
	597, 365, 0, 386, 541, 488, 0, 533, 507, 0,
	534, 503, 538, 0, 477, 0, 393, 417, 429, 446,
	449, 478, 563, 564, 565, 261, 448, 567, 568, 569,
	570, 571, 572, 573, 566, 420, 510, 487, 513, 428,
	490, 489, 0, 0, 524, 444, 525, 526, 349, 350,
	351, 352, 312, 551, 279, 447, 375, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 0, 516, 517, 514,
	608, 0, 574, 575, 0, 0, 441, 442, 307, 314,
	460, 316, 278, 364, 309, 426, 323, 0, 453, 518,
	454, 577, 580, 578, 579, 356, 319, 320, 390, 324,
	334, 378, 425, 362, 383, 276, 416, 391, 338, 504,
	531, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 559, 558, 557,
	556, 555, 554, 553, 552, 0, 0, 501, 403, 288,
	253, 284, 285, 292, 598, 595, 407, 599, 0, 258,
	481, 332, 0, 373, 306, 546, 547, 209, 210, 211,
	212, 213, 214, 215, 216, 254, 217, 218, 219, 220,
	221, 222, 223, 226, 227, 228, 229, 230, 231, 232,
	233, 549, 224, 225, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 0, 0,
	0, 255, 249, 250, 251, 252, 0, 0, 0, 432,
	433, 434, 456, 418, 480, 596, 0, 0, 0, 0,
	0, 0, 0, 530, 542, 576, 0, 585, 586, 588,
	590, 589, 0, 602, 471, 472, 582, 361, 0, 486,
	519, 508, 591, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 301, 0, 0, 331, 523, 505,
	515, 506, 491, 492, 493, 500, 311, 494, 495, 496,
	466, 497, 467, 498, 499, 0, 522, 473, 392, 345,
	540, 539, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 199,
	0, 0, 0, 0, 0, 0, 274, 200, 468, 587,
	470, 469, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 277, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2918, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 264, 397, 414, 275, 388, 427, 280,
	395, 270, 360, 384, 0, 0, 266, 412, 394, 342,
	321, 322, 265, 0, 379, 299, 313, 296, 358, 0,
	411, 439, 295, 430, 0, 422, 268, 0, 421, 357,
	408, 413, 343, 337, 267, 410, 341, 336, 325, 303,
	455, 326, 327, 317, 369, 335, 370, 318, 347, 346,
	348, 0, 0, 0, 0, 0, 450, 451, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	581, 0, 0, 584, 0, 424, 0, 0, 0, 0,
	0, 0, 396, 0, 0, 328, 0, 0, 0, 440,
	0, 382, 363, 604, 0, 0, 380, 333, 409, 371,
	415, 398, 423, 376, 372, 259, 399, 298, 344, 271,
	273, 293, 300, 302, 304, 305, 353, 354, 366, 387,
	400, 401, 402, 297, 281, 381, 282, 315, 283, 260,
	289, 287, 290, 389, 291, 262, 367, 406, 0, 310,
	377, 340, 263, 339, 368, 405, 404, 272, 431, 437,
	438, 527, 0, 443, 605, 606, 607, 452, 457, 458,
	459, 461, 462, 463, 464, 528, 545, 512, 482, 445,
	536, 479, 483, 484, 548, 0, 0, 0, 436, 329,
	330, 0, 308, 256, 257, 601, 294, 359, 550, 583,
	475, 0, 537, 476, 485, 286, 509, 521, 520, 355,
	435, 0, 532, 535, 465, 600, 0, 529, 544, 603,
	543, 597, 365, 0, 386, 541, 488, 0, 533, 507,
	0, 534, 503, 538, 0, 477, 0, 393, 417, 429,
	446, 449, 478, 563, 564, 565, 261, 448, 567, 568,
	569, 570, 571, 572, 573, 566, 420, 510, 487, 513,
	428, 490, 489, 0, 0, 524, 444, 525, 526, 349,
	350, 351, 352, 312, 551, 279, 447, 375, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 0, 516, 517,
	514, 608, 0, 574, 575, 0, 0, 441, 442, 307,
	314, 460, 316, 278, 364, 309, 426, 323, 0, 453,
	518, 454, 577, 580, 578, 579, 356, 319, 320, 390,
	324, 334, 378, 425, 362, 383, 276, 416, 391, 338,
	504, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 248, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 559, 558,
	557, 556, 555, 554, 553, 552, 0, 0, 501, 403,
	288, 253, 284, 285, 292, 598, 595, 407, 599, 0,
	258, 481, 332, 0, 373, 306, 546, 547, 209, 210,
	211, 212, 213, 214, 215, 216, 254, 217, 218, 219,
	220, 221, 222, 223, 226, 227, 228, 229, 230, 231,
	232, 233, 549, 224, 225, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 0,
	0, 0, 255, 249, 250, 251, 252, 0, 0, 0,
	432, 433, 434, 456, 418, 480, 596, 0, 0, 0,
	0, 0, 0, 0, 530, 542, 576, 0, 585, 586,
	588, 590, 589, 0, 602, 471, 472, 582, 361, 0,
	486, 519, 508, 591, 474, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 331, 523,
	505, 515, 506, 491, 492, 493, 500, 311, 494, 495,
	496, 466, 497, 467, 498, 499, 0, 522, 473, 392,
	345, 540, 539, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1870, 0, 0,
	199, 0, 0, 0, 0, 0, 0, 274, 200, 468,
	587, 470, 469, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 277, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 264, 397, 414, 275, 388, 427,
	280, 395, 270, 360, 384, 0, 0, 266, 412, 394,
	342, 321, 322, 265, 0, 379, 299, 313, 296, 358,
	0, 411, 439, 295, 430, 0, 422, 268, 0, 421,
	357, 408, 413, 343, 337, 267, 410, 341, 336, 325,
	303, 455, 326, 327, 317, 369, 335, 370, 318, 347,
	346, 348, 0, 0, 0, 0, 0, 450, 451, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 581, 0, 0, 584, 0, 424, 0, 0, 0,
	0, 0, 0, 396, 0, 0, 328, 0, 0, 0,
	440, 0, 382, 363, 604, 0, 0, 380, 333, 409,
	371, 415, 398, 423, 376, 372, 259, 399, 298, 344,
	271, 273, 293, 300, 302, 304, 305, 353, 354, 366,
	387, 400, 401, 402, 297, 281, 381, 282, 315, 283,
	260, 289, 287, 290, 389, 291, 262, 367, 406, 0,
	310, 377, 340, 263, 339, 368, 405, 404, 272, 431,
	437, 438, 527, 0, 443, 605, 606, 607, 452, 457,
	458, 459, 461, 462, 463, 464, 528, 545, 512, 482,
	445, 536, 479, 483, 484, 548, 0, 0, 0, 436,
	329, 330, 0, 308, 256, 257, 601, 294, 359, 550,
	583, 475, 0, 537, 476, 485, 286, 509, 521, 520,
	355, 435, 0, 532, 535, 465, 600, 0, 529, 544,
	603, 543, 597, 365, 0, 386, 541, 488, 0, 533,
	507, 0, 534, 503, 538, 0, 477, 0, 393, 417,
	429, 446, 449, 478, 563, 564, 565, 261, 448, 567,
	568, 569, 570, 571, 572, 573, 566, 420, 510, 487,
	513, 428, 490, 489, 0, 0, 524, 444, 525, 526,
	349, 350, 351, 352, 312, 551, 279, 447, 375, 0,
	511, 0, 0, 0, 0, 0, 0, 0, 0, 516,
	517, 514, 608, 0, 574, 575, 0, 0, 441, 442,
	307, 314, 460, 316, 278, 364, 309, 426, 323, 0,
	453, 518, 454, 577, 580, 578, 579, 356, 319, 320,
	390, 324, 334, 378, 425, 362, 383, 276, 416, 391,
	338, 504, 531, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 559,
	558, 557, 556, 555, 554, 553, 552, 0, 0, 501,
	403, 288, 253, 284, 285, 292, 598, 595, 407, 599,
	0, 258, 481, 332, 0, 373, 306, 546, 547, 209,
	210, 211, 212, 213, 214, 215, 216, 254, 217, 218,
	219, 220, 221, 222, 223, 226, 227, 228, 229, 230,
	231, 232, 233, 549, 224, 225, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	0, 0, 0, 255, 249, 250, 251, 252, 0, 0,
	0, 432, 433, 434, 456, 418, 480, 596, 0, 0,
	0, 0, 0, 0, 0, 530, 542, 576, 0, 585,
	586, 588, 590, 589, 0, 602, 471, 472, 582, 361,
	0, 486, 519, 508, 591, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 301, 0, 0, 331,
	523, 505, 515, 506, 491, 492, 493, 500, 311, 494,
	495, 496, 466, 497, 467, 498, 499, 0, 522, 473,
	392, 345, 540, 539, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 199, 0, 0, 0, 0, 0, 0, 274, 200,
	468, 587, 470, 469, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 277, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3015,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 264, 397, 414, 275, 388,
	427, 280, 395, 270, 360, 384, 0, 0, 266, 412,
	394, 342, 321, 322, 265, 0, 379, 299, 313, 296,
	358, 0, 411, 439, 295, 430, 0, 422, 268, 0,
	421, 357, 408, 413, 343, 337, 267, 410, 341, 336,
	325, 303, 455, 326, 327, 317, 369, 335, 370, 318,
	347, 346, 348, 0, 0, 0, 0, 0, 450, 451,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 581, 0, 0, 584, 0, 424, 0, 0,
	0, 0, 0, 0, 396, 0, 0, 328, 0, 0,
	0, 440, 0, 382, 363, 604, 0, 0, 380, 333,
	409, 371, 415, 398, 423, 376, 372, 259, 399, 298,
	344, 271, 273, 293, 300, 302, 304, 305, 353, 354,
	366, 387, 400, 401, 402, 297, 281, 381, 282, 315,
	283, 260, 289, 287, 290, 389, 291, 262, 367, 406,
	0, 310, 377, 340, 263, 339, 368, 405, 404, 272,
	431, 437, 438, 527, 0, 443, 605, 606, 607, 452,
	457, 458, 459, 461, 462, 463, 464, 528, 545, 512,
	482, 445, 536, 479, 483, 484, 548, 0, 0, 0,
	436, 329, 330, 0, 308, 256, 257, 601, 294, 359,
	550, 583, 475, 0, 537, 476, 485, 286, 509, 521,
	520, 355, 435, 0, 532, 535, 465, 600, 0, 529,
	544, 603, 543, 597, 365, 0, 386, 541, 488, 0,
	533, 507, 0, 534, 503, 538, 0, 477, 0, 393,
	417, 429, 446, 449, 478, 563, 564, 565, 261, 448,
	567, 568, 569, 570, 571, 572, 573, 566, 420, 510,
	487, 513, 428, 490, 489, 0, 0, 524, 444, 525,
	526, 349, 350, 351, 352, 312, 551, 279, 447, 375,
	0, 511, 0, 0, 0, 0, 0, 0, 0, 0,
	516, 517, 514, 608, 0, 574, 575, 0, 0, 441,
	442, 307, 314, 460, 316, 278, 364, 309, 426, 323,
	0, 453, 518, 454, 577, 580, 578, 579, 356, 319,
	320, 390, 324, 334, 378, 425, 362, 383, 276, 416,
	391, 338, 504, 531, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 248, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	559, 558, 557, 556, 555, 554, 553, 552, 0, 0,
	501, 403, 288, 253, 284, 285, 292, 598, 595, 407,
	599, 0, 258, 481, 332, 0, 373, 306, 546, 547,
	209, 210, 211, 212, 213, 214, 215, 216, 254, 217,
	218, 219, 220, 221, 222, 223, 226, 227, 228, 229,
	230, 231, 232, 233, 549, 224, 225, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 0, 0, 0, 255, 249, 250, 251, 252, 0,
	0, 0, 432, 433, 434, 456, 418, 480, 596, 0,
	0, 0, 0, 0, 0, 0, 530, 542, 576, 0,
	585, 586, 588, 590, 589, 0, 602, 471, 472, 582,
	361, 0, 486, 519, 508, 591, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 301, 0, 0,
	331, 523, 505, 515, 506, 491, 492, 493, 500, 311,
	494, 495, 496, 466, 497, 467, 498, 499, 0, 522,
	473, 392, 345, 540, 539, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 199, 0, 0, 2871, 0, 0, 0, 274,
	200, 468, 587, 470, 469, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 264, 397, 414, 275,
	388, 427, 280, 395, 270, 360, 384, 0, 0, 266,
	412, 394, 342, 321, 322, 265, 0, 379, 299, 313,
	296, 358, 0, 411, 439, 295, 430, 0, 422, 268,
	0, 421, 357, 408, 413, 343, 337, 267, 410, 341,
	336, 325, 303, 455, 326, 327, 317, 369, 335, 370,
	318, 347, 346, 348, 0, 0, 0, 0, 0, 450,
	451, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 581, 0, 0, 584, 0, 424, 0,
	0, 0, 0, 0, 0, 396, 0, 0, 328, 0,
	0, 0, 440, 0, 382, 363, 604, 0, 0, 380,
	333, 409, 371, 415, 398, 423, 376, 372, 259, 399,
	298, 344, 271, 273, 293, 300, 302, 304, 305, 353,
	354, 366, 387, 400, 401, 402, 297, 281, 381, 282,
	315, 283, 260, 289, 287, 290, 389, 291, 262, 367,
	406, 0, 310, 377, 340, 263, 339, 368, 405, 404,
	272, 431, 437, 438, 527, 0, 443, 605, 606, 607,
	452, 457, 458, 459, 461, 462, 463, 464, 528, 545,
	512, 482, 445, 536, 479, 483, 484, 548, 0, 0,
	0, 436, 329, 330, 0, 308, 256, 257, 601, 294,
	359, 550, 583, 475, 0, 537, 476, 485, 286, 509,
	521, 520, 355, 435, 0, 532, 535, 465, 600, 0,
	529, 544, 603, 543, 597, 365, 0, 386, 541, 488,
	0, 533, 507, 0, 534, 503, 538, 0, 477, 0,
	393, 417, 429, 446, 449, 478, 563, 564, 565, 261,
	448, 567, 568, 569, 570, 571, 572, 573, 566, 420,
	510, 487, 513, 428, 490, 489, 0, 0, 524, 444,
	525, 526, 349, 350, 351, 352, 312, 551, 279, 447,
	375, 0, 511, 0, 0, 0, 0, 0, 0, 0,
	0, 516, 517, 514, 608, 0, 574, 575, 0, 0,
	441, 442, 307, 314, 460, 316, 278, 364, 309, 426,
	323, 0, 453, 518, 454, 577, 580, 578, 579, 356,
	319, 320, 390, 324, 334, 378, 425, 362, 383, 276,
	416, 391, 338, 504, 531, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 248, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 559, 558, 557, 556, 555, 554, 553, 552, 0,
	0, 501, 403, 288, 253, 284, 285, 292, 598, 595,
	407, 599, 0, 258, 481, 332, 0, 373, 306, 546,
	547, 209, 210, 211, 212, 213, 214, 215, 216, 254,
	217, 218, 219, 220, 221, 222, 223, 226, 227, 228,
	229, 230, 231, 232, 233, 549, 224, 225, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 0, 0, 0, 255, 249, 250, 251, 252,
	0, 0, 0, 432, 433, 434, 456, 418, 480, 596,
	0, 0, 0, 0, 0, 0, 0, 530, 542, 576,
	0, 585, 586, 588, 590, 589, 0, 602, 471, 472,
	582, 361, 0, 486, 519, 508, 591, 474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 301, 0,
	0, 331, 523, 505, 515, 506, 491, 492, 493, 500,
	311, 494, 495, 496, 466, 497, 467, 498, 499, 0,
	522, 473, 392, 345, 540, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 199, 0, 0, 0, 0, 0, 0,
	274, 200, 468, 587, 470, 469, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 277, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2783, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 264, 397, 414,
	275, 388, 427, 280, 395, 270, 360, 384, 0, 0,
	266, 412, 394, 342, 321, 322, 265, 0, 379, 299,
	313, 296, 358, 0, 411, 439, 295, 430, 0, 422,
	268, 0, 421, 357, 408, 413, 343, 337, 267, 410,
	341, 336, 325, 303, 455, 326, 327, 317, 369, 335,
	370, 318, 347, 346, 348, 0, 0, 0, 0, 0,
	450, 451, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 581, 0, 0, 584, 0, 424,
	0, 0, 0, 0, 0, 0, 396, 0, 0, 328,
	0, 0, 0, 440, 0, 382, 363, 604, 0, 0,
	380, 333, 409, 371, 415, 398, 423, 376, 372, 259,
	399, 298, 344, 271, 273, 293, 300, 302, 304, 305,
	353, 354, 366, 387, 400, 401, 402, 297, 281, 381,
	282, 315, 283, 260, 289, 287, 290, 389, 291, 262,
	367, 406, 0, 310, 377, 340, 263, 339, 368, 405,
	404, 272, 431, 437, 438, 527, 0, 443, 605, 606,
	607, 452, 457, 458, 459, 461, 462, 463, 464, 528,
	545, 512, 482, 445, 536, 479, 483, 484, 548, 0,
	0, 0, 436, 329, 330, 0, 308, 256, 257, 601,
	294, 359, 550, 583, 475, 0, 537, 476, 485, 286,
	509, 521, 520, 355, 435, 0, 532, 535, 465, 600,
	0, 529, 544, 603, 543, 597, 365, 0, 386, 541,
	488, 0, 533, 507, 0, 534, 503, 538, 0, 477,
	0, 393, 417, 429, 446, 449, 478, 563, 564, 565,
	261, 448, 567, 568, 569, 570, 571, 572, 573, 566,
	420, 510, 487, 513, 428, 490, 489, 0, 0, 524,
	444, 525, 526, 349, 350, 351, 352, 312, 551, 279,
	447, 375, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 0, 516, 517, 514, 608, 0, 574, 575, 0,
	0, 441, 442, 307, 314, 460, 316, 278, 364, 309,
	426, 323, 0, 453, 518, 454, 577, 580, 578, 579,
	356, 319, 320, 390, 324, 334, 378, 425, 362, 383,
	276, 416, 391, 338, 504, 531, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 248, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 559, 558, 557, 556, 555, 554, 553, 552,
	0, 0, 501, 403, 288, 253, 284, 285, 292, 598,
	595, 407, 599, 0, 258, 481, 332, 0, 373, 306,
	546, 547, 209, 210, 211, 212, 213, 214, 215, 216,
	254, 217, 218, 219, 220, 221, 222, 223, 226, 227,
	228, 229, 230, 231, 232, 233, 549, 224, 225, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 247, 0, 0, 0, 255, 249, 250, 251,
	252, 0, 0, 0, 432, 433, 434, 456, 418, 480,
	596, 0, 0, 0, 0, 0, 0, 0, 530, 542,
	576, 0, 585, 586, 588, 590, 589, 0, 602, 471,
	472, 582, 361, 0, 486, 519, 508, 591, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 301,
	0, 0, 331, 523, 505, 515, 506, 491, 492, 493,
	500, 311, 494, 495, 496, 466, 497, 467, 498, 499,
	0, 522, 473, 392, 345, 540, 539, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 199, 0, 0, 1409, 0, 0,
	0, 274, 200, 468, 587, 470, 469, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 277, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 264, 397,
	414, 275, 388, 427, 280, 395, 270, 360, 384, 0,
	0, 266, 412, 394, 342, 321, 322, 265, 0, 379,
	299, 313, 296, 358, 0, 411, 439, 295, 430, 0,
	422, 268, 0, 421, 357, 408, 413, 343, 337, 267,
	410, 341, 336, 325, 303, 455, 326, 327, 317, 369,
	335, 370, 318, 347, 346, 348, 0, 0, 0, 0,
	0, 450, 451, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 581, 0, 0, 584, 0,
	424, 0, 0, 0, 0, 0, 0, 396, 0, 0,
	328, 0, 0, 0, 440, 0, 382, 363, 604, 0,
	0, 380, 333, 409, 371, 415, 398, 423, 376, 372,
	259, 399, 298, 344, 271, 273, 293, 300, 302, 304,
	305, 353, 354, 366, 387, 400, 401, 402, 297, 281,
	381, 282, 315, 283, 260, 289, 287, 290, 389, 291,
	262, 367, 406, 0, 310, 377, 340, 263, 339, 368,
	405, 404, 272, 431, 437, 438, 527, 0, 443, 605,
	606, 607, 452, 457, 458, 459, 461, 462, 463, 464,
	528, 545, 512, 482, 445, 536, 479, 483, 484, 548,
	0, 0, 0, 436, 329, 330, 0, 308, 256, 257,
	601, 294, 359, 550, 583, 475, 0, 537, 476, 485,
	286, 509, 521, 520, 355, 435, 0, 532, 535, 465,
	600, 0, 529, 544, 603, 543, 597, 365, 0, 386,
	541, 488, 0, 533, 507, 0, 534, 503, 538, 0,
	477, 0, 393, 417, 429, 446, 449, 478, 563, 564,
	565, 261, 448, 567, 568, 569, 570, 571, 572, 573,
	566, 420, 510, 487, 513, 428, 490, 489, 0, 0,
	524, 444, 525, 526, 349, 350, 351, 352, 312, 551,
	279, 447, 375, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 0, 516, 517, 514, 608, 0, 574, 575,
	0, 0, 441, 442, 307, 314, 460, 316, 278, 364,
	309, 426, 323, 0, 453, 518, 454, 577, 580, 578,
	579, 356, 319, 320, 390, 324, 334, 378, 425, 362,
	383, 276, 416, 391, 338, 504, 531, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 559, 558, 557, 556, 555, 554, 553,
	552, 0, 0, 501, 403, 288, 253, 284, 285, 292,
	598, 595, 407, 599, 0, 258, 481, 332, 0, 373,
	306, 546, 547, 209, 210, 211, 212, 213, 214, 215,
	216, 254, 217, 218, 219, 220, 221, 222, 223, 226,
	227, 228, 229, 230, 231, 232, 233, 549, 224, 225,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 0, 0, 0, 255, 249, 250,
	251, 252, 0, 0, 0, 432, 433, 434, 456, 418,
	480, 596, 0, 0, 0, 0, 0, 0, 0, 530,
	542, 576, 0, 585, 586, 588, 590, 589, 0, 602,
	471, 472, 582, 361, 0, 486, 519, 508, 591, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 331, 523, 505, 515, 506, 491, 492,
	493, 500, 311, 494, 495, 496, 466, 497, 467, 498,
	499, 0, 522, 473, 392, 345, 540, 539, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 199, 0, 0, 2282, 0,
	0, 0, 274, 200, 468, 587, 470, 469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 277, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 264,
	397, 414, 275, 388, 427, 280, 395, 270, 360, 384,
	0, 0, 266, 412, 394, 342, 321, 322, 265, 0,
	379, 299, 313, 296, 358, 0, 411, 439, 295, 430,
	0, 422, 268, 0, 421, 357, 408, 413, 343, 337,
	267, 410, 341, 336, 325, 303, 455, 326, 327, 317,
	369, 335, 370, 318, 347, 346, 348, 0, 0, 0,
	0, 0, 450, 451, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 581, 0, 0, 584,
	0, 424, 0, 0, 0, 0, 0, 0, 396, 0,
	0, 328, 0, 0, 0, 440, 0, 382, 363, 604,
	0, 0, 380, 333, 409, 371, 415, 398, 423, 376,
	372, 259, 399, 298, 344, 271, 273, 293, 300, 302,
	304, 305, 353, 354, 366, 387, 400, 401, 402, 297,
	281, 381, 282, 315, 283, 260, 289, 287, 290, 389,
	291, 262, 367, 406, 0, 310, 377, 340, 263, 339,
	368, 405, 404, 272, 431, 437, 438, 527, 0, 443,
	605, 606, 607, 452, 457, 458, 459, 461, 462, 463,
	464, 528, 545, 512, 482, 445, 536, 479, 483, 484,
	548, 0, 0, 0, 436, 329, 330, 0, 308, 256,
	257, 601, 294, 359, 550, 583, 475, 0, 537, 476,
	485, 286, 509, 521, 520, 355, 435, 0, 532, 535,
	465, 600, 0, 529, 544, 603, 543, 597, 365, 0,
	386, 541, 488, 0, 533, 507, 0, 534, 503, 538,
	0, 477, 0, 393, 417, 429, 446, 449, 478, 563,
	564, 565, 261, 448, 567, 568, 569, 570, 571, 572,
	573, 566, 420, 510, 487, 513, 428, 490, 489, 0,
	0, 524, 444, 525, 526, 349, 350, 351, 352, 312,
	551, 279, 447, 375, 0, 511, 0, 0, 0, 0,
	0, 0, 0, 0, 516, 517, 514, 608, 0, 574,
	575, 0, 0, 441, 442, 307, 314, 460, 316, 278,
	364, 309, 426, 323, 0, 453, 518, 454, 577, 580,
	578, 579, 356, 319, 320, 390, 324, 334, 378, 425,
	362, 383, 276, 416, 391, 338, 504, 531, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 559, 558, 557, 556, 555, 554,
	553, 552, 0, 0, 501, 403, 288, 253, 284, 285,
	292, 598, 595, 407, 599, 0, 258, 481, 332, 0,
	373, 306, 546, 547, 209, 210, 211, 212, 213, 214,
	215, 216, 254, 217, 218, 219, 220, 221, 222, 223,
	226, 227, 228, 229, 230, 231, 232, 233, 549, 224,
	225, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 0, 0, 0, 255, 249,
	250, 251, 252, 0, 0, 0, 432, 433, 434, 456,
	418, 480, 596, 0, 0, 0, 0, 0, 0, 0,
	530, 542, 576, 0, 585, 586, 588, 590, 589, 0,
	602, 471, 472, 582, 361, 0, 486, 519, 508, 591,
	474, 0, 0, 2612, 0, 0, 0, 0, 0, 0,
	0, 301, 0, 0, 331, 523, 505, 515, 506, 491,
	492, 493, 500, 311, 494, 495, 496, 466, 497, 467,
	498, 499, 0, 522, 473, 392, 345, 540, 539, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 199, 0, 0, 0,
	0, 0, 0, 274, 200, 468, 587, 470, 469, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 277, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	264, 397, 414, 275, 388, 427, 280, 395, 270, 360,
	384, 0, 0, 266, 412, 394, 342, 321, 322, 265,
	0, 379, 299, 313, 296, 358, 0, 411, 439, 295,
	430, 0, 422, 268, 0, 421, 357, 408, 413, 343,
	337, 267, 410, 341, 336, 325, 303, 455, 326, 327,
	317, 369, 335, 370, 318, 347, 346, 348, 0, 0,
	0, 0, 0, 450, 451, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 581, 0, 0,
	584, 0, 424, 0, 0, 0, 0, 0, 0, 396,
	0, 0, 328, 0, 0, 0, 440, 0, 382, 363,
	604, 0, 0, 380, 333, 409, 371, 415, 398, 423,
	376, 372, 259, 399, 298, 344, 271, 273, 293, 300,
	302, 304, 305, 353, 354, 366, 387, 400, 401, 402,
	297, 281, 381, 282, 315, 283, 260, 289, 287, 290,
	389, 291, 262, 367, 406, 0, 310, 377, 340, 263,
	339, 368, 405, 404, 272, 431, 437, 438, 527, 0,
	443, 605, 606, 607, 452, 457, 458, 459, 461, 462,
	463, 464, 528, 545, 512, 482, 445, 536, 479, 483,
	484, 548, 0, 0, 0, 436, 329, 330, 0, 308,
	256, 257, 601, 294, 359, 550, 583, 475, 0, 537,
	476, 485, 286, 509, 521, 520, 355, 435, 0, 532,
	535, 465, 600, 0, 529, 544, 603, 543, 597, 365,
	0, 386, 541, 488, 0, 533, 507, 0, 534, 503,
	538, 0, 477, 0, 393, 417, 429, 446, 449, 478,
	563, 564, 565, 261, 448, 567, 568, 569, 570, 571,
	572, 573, 566, 420, 510, 487, 513, 428, 490, 489,
	0, 0, 524, 444, 525, 526, 349, 350, 351, 352,
	312, 551, 279, 447, 375, 0, 511, 0, 0, 0,
	0, 0, 0, 0, 0, 516, 517, 514, 608, 0,
	574, 575, 0, 0, 441, 442, 307, 314, 460, 316,
	278, 364, 309, 426, 323, 0, 453, 518, 454, 577,
	580, 578, 579, 356, 319, 320, 390, 324, 334, 378,
	425, 362, 383, 276, 416, 391, 338, 504, 531, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 559, 558, 557, 556, 555,
	554, 553, 552, 0, 0, 501, 403, 288, 253, 284,
	285, 292, 598, 595, 407, 599, 0, 258, 481, 332,
	0, 373, 306, 546, 547, 209, 210, 211, 212, 213,
	214, 215, 216, 254, 217, 218, 219, 220, 221, 222,
	223, 226, 227, 228, 229, 230, 231, 232, 233, 549,
	224, 225, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 0, 0, 0, 255,
	249, 250, 251, 252, 0, 0, 0, 432, 433, 434,
	456, 418, 480, 596, 0, 0, 0, 0, 0, 0,
	0, 530, 542, 576, 0, 585, 586, 588, 590, 589,
	0, 602, 471, 472, 582, 361, 0, 486, 519, 508,
	591, 474, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 0, 0, 331, 523, 505, 515, 506,
	491, 492, 493, 500, 311, 494, 495, 496, 466, 497,
	467, 498, 499, 0, 522, 473, 392, 345, 540, 539,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 199, 0, 0,
	0, 0, 0, 0, 274, 200, 468, 587, 470, 469,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2001, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 397, 414, 275, 388, 427, 280, 395, 270,
	360, 384, 0, 0, 266, 412, 394, 342, 321, 322,
	265, 0, 379, 299, 313, 296, 358, 0, 411, 439,
	295, 430, 0, 422, 268, 0, 421, 357, 408, 413,
	343, 337, 267, 410, 341, 336, 325, 303, 455, 326,
	327, 317, 369, 335, 370, 318, 347, 346, 348, 0,
	0, 0, 0, 0, 450, 451, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 581, 0,
	0, 584, 0, 424, 0, 0, 0, 0, 0, 0,
	396, 0, 0, 328, 0, 0, 0, 440, 0, 382,
	363, 604, 0, 0, 380, 333, 409, 371, 415, 398,
	423, 376, 372, 259, 399, 298, 344, 271, 273, 293,
	300, 302, 304, 305, 353, 354, 366, 387, 400, 401,
	402, 297, 281, 381, 282, 315, 283, 260, 289, 287,
	290, 389, 291, 262, 367, 406, 0, 310, 377, 340,
	263, 339, 368, 405, 404, 272, 431, 437, 438, 527,
	0, 443, 605, 606, 607, 452, 457, 458, 459, 461,
	462, 463, 464, 528, 545, 512, 482, 445, 536, 479,
	483, 484, 548, 0, 0, 0, 436, 329, 330, 0,
	308, 256, 257, 601, 294, 359, 550, 583, 475, 0,
	537, 476, 485, 286, 509, 521, 520, 355, 435, 0,
	532, 535, 465, 600, 0, 529, 544, 603, 543, 597,
	365, 0, 386, 541, 488, 0, 533, 507, 0, 534,
	503, 538, 0, 477, 0, 393, 417, 429, 446, 449,
	478, 563, 564, 565, 261, 448, 567, 568, 569, 570,
	571, 572, 573, 566, 420, 510, 487, 513, 428, 490,
	489, 0, 0, 524, 444, 525, 526, 349, 350, 351,
	352, 312, 551, 279, 447, 375, 0, 511, 0, 0,
	0, 0, 0, 0, 0, 0, 516, 517, 514, 608,
	0, 574, 575, 0, 0, 441, 442, 307, 314, 460,
	316, 278, 364, 309, 426, 323, 0, 453, 518, 454,
	577, 580, 578, 579, 356, 319, 320, 390, 324, 334,
	378, 425, 362, 383, 276, 416, 391, 338, 504, 531,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 559, 558, 557, 556,
	555, 554, 553, 552, 0, 0, 501, 403, 288, 253,
	284, 285, 292, 598, 595, 407, 599, 0, 258, 481,
	332, 0, 373, 306, 546, 547, 209, 210, 211, 212,
	213, 214, 215, 216, 254, 217, 218, 219, 220, 221,
	222, 223, 226, 227, 228, 229, 230, 231, 232, 233,
	549, 224, 225, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 0, 0, 0,
	255, 249, 250, 251, 252, 0, 0, 0, 432, 433,
	434, 456, 418, 480, 596, 0, 0, 0, 0, 0,
	0, 0, 530, 542, 576, 0, 585, 586, 588, 590,
	589, 0, 602, 471, 472, 582, 361, 0, 486, 519,
	508, 591, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 301, 0, 0, 331, 523, 505, 515,
	506, 491, 492, 493, 500, 311, 494, 495, 496, 466,
	497, 467, 498, 499, 0, 522, 473, 392, 345, 540,
	539, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 199, 0,
	0, 0, 0, 0, 0, 274, 200, 468, 587, 470,
	469, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	277, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2359, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 264, 397, 414, 275, 388, 427, 280, 395,
	270, 360, 384, 0, 0, 266, 412, 394, 342, 321,
	322, 265, 0, 379, 299, 313, 296, 358, 0, 411,
	439, 295, 430, 0, 422, 268, 0, 421, 357, 408,
	413, 343, 337, 267, 410, 341, 336, 325, 303, 455,
	326, 327, 317, 369, 335, 370, 318, 347, 346, 348,
	0, 0, 0, 0, 0, 450, 451, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 581,
	0, 0, 584, 0, 424, 0, 0, 0, 0, 0,
	0, 396, 0, 0, 328, 0, 0, 0, 440, 0,
	382, 363, 604, 0, 0, 380, 333, 409, 371, 415,
	398, 423, 376, 372, 259, 399, 298, 344, 271, 273,
	293, 300, 302, 304, 305, 353, 354, 366, 387, 400,
	401, 402, 297, 281, 381, 282, 315, 283, 260, 289,
	287, 290, 389, 291, 262, 367, 406, 0, 310, 377,
	340, 263, 339, 368, 405, 404, 272, 431, 437, 438,
	527, 0, 443, 605, 606, 607, 452, 457, 458, 459,
	461, 462, 463, 464, 528, 545, 512, 482, 445, 536,
	479, 483, 484, 548, 0, 0, 0, 436, 329, 330,
	0, 308, 256, 257, 601, 294, 359, 550, 583, 475,
	0, 537, 476, 485, 286, 509, 521, 520, 355, 435,
	0, 532, 535, 465, 600, 0, 529, 544, 603, 543,
	597, 365, 0, 386, 541, 488, 0, 533, 507, 0,
	534, 503, 538, 0, 477, 0, 393, 417, 429, 446,
	449, 478, 563, 564, 565, 261, 448, 567, 568, 569,
	570, 571, 572, 573, 566, 420, 510, 487, 513, 428,
	490, 489, 0, 0, 524, 444, 525, 526, 349, 350,
	351, 352, 312, 551, 279, 447, 375, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 0, 516, 517, 514,
	608, 0, 574, 575, 0, 0, 441, 442, 307, 314,
	460, 316, 278, 364, 309, 426, 323, 0, 453, 518,
	454, 577, 580, 578, 579, 356, 319, 320, 390, 324,
	334, 378, 425, 362, 383, 276, 416, 391, 338, 504,
	531, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 559, 558, 557,
	556, 555, 554, 553, 552, 0, 0, 501, 403, 288,
	253, 284, 285, 292, 598, 595, 407, 599, 0, 258,
	481, 332, 0, 373, 306, 546, 547, 209, 210, 211,
	212, 213, 214, 215, 216, 254, 217, 218, 219, 220,
	221, 222, 223, 226, 227, 228, 229, 230, 231, 232,
	233, 549, 224, 225, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 0, 0,
	0, 255, 249, 250, 251, 252, 0, 0, 0, 432,
	433, 434, 456, 418, 480, 596, 0, 0, 0, 0,
	0, 0, 0, 530, 542, 576, 0, 585, 586, 588,
	590, 589, 0, 602, 471, 472, 582, 361, 0, 486,
	519, 508, 591, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 301, 0, 0, 331, 523, 505,
	515, 506, 491, 492, 493, 500, 311, 494, 495, 496,
	466, 497, 467, 498, 499, 0, 522, 473, 392, 345,
	540, 539, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 199,
	0, 0, 2357, 0, 0, 0, 274, 200, 468, 587,
	470, 469, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 277, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 264, 397, 414, 275, 388, 427, 280,
	395, 270, 360, 384, 0, 0, 266, 412, 394, 342,
	321, 322, 265, 0, 379, 299, 313, 296, 358, 0,
	411, 439, 295, 430, 0, 422, 268, 0, 421, 357,
	408, 413, 343, 337, 267, 410, 341, 336, 325, 303,
	455, 326, 327, 317, 369, 335, 370, 318, 347, 346,
	348, 0, 0, 0, 0, 0, 450, 451, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	581, 0, 0, 584, 0, 424, 0, 0, 0, 0,
	0, 0, 396, 0, 0, 328, 0, 0, 0, 440,
	0, 382, 363, 604, 0, 0, 380, 333, 409, 371,
	415, 398, 423, 376, 372, 259, 399, 298, 344, 271,
	273, 293, 300, 302, 304, 305, 353, 354, 366, 387,
	400, 401, 402, 297, 281, 381, 282, 315, 283, 260,
	289, 287, 290, 389, 291, 262, 367, 406, 0, 310,
	377, 340, 263, 339, 368, 405, 404, 272, 431, 437,
	438, 527, 0, 443, 605, 606, 607, 452, 457, 458,
	459, 461, 462, 463, 464, 528, 545, 512, 482, 445,
	536, 479, 483, 484, 548, 0, 0, 0, 436, 329,
	330, 0, 308, 256, 257, 601, 294, 359, 550, 583,
	475, 0, 537, 476, 485, 286, 509, 521, 520, 355,
	435, 0, 532, 535, 465, 600, 0, 529, 544, 603,
	543, 597, 365, 0, 386, 541, 488, 0, 533, 507,
	0, 534, 503, 538, 0, 477, 0, 393, 417, 429,
	446, 449, 478, 563, 564, 565, 261, 448, 567, 568,
	569, 570, 571, 572, 573, 566, 420, 510, 487, 513,
	428, 490, 489, 0, 0, 524, 444, 525, 526, 349,
	350, 351, 352, 312, 551, 279, 447, 375, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 0, 516, 517,
	514, 608, 0, 574, 575, 0, 0, 441, 442, 307,
	314, 460, 316, 278, 364, 309, 426, 323, 0, 453,
	518, 454, 577, 580, 578, 579, 356, 319, 320, 390,
	324, 334, 378, 425, 362, 383, 276, 416, 391, 338,
	504, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 248, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 559, 558,
	557, 556, 555, 554, 553, 552, 0, 0, 501, 403,
	288, 253, 284, 285, 292, 598, 595, 407, 599, 0,
	258, 481, 332, 0, 373, 306, 546, 547, 209, 210,
	211, 212, 213, 214, 215, 216, 254, 217, 218, 219,
	220, 221, 222, 223, 226, 227, 228, 229, 230, 231,
	232, 233, 549, 224, 225, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 0,
	0, 0, 255, 249, 250, 251, 252, 0, 0, 0,
	432, 433, 434, 456, 418, 480, 596, 0, 0, 0,
	0, 0, 0, 0, 530, 542, 576, 0, 585, 586,
	588, 590, 589, 2147, 602, 471, 472, 582, 0, 361,
	0, 486, 519, 508, 591, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 301, 0, 0, 331,
	523, 505, 515, 506, 491, 492, 493, 500, 311, 494,
	495, 496, 466, 497, 467, 498, 499, 0, 522, 473,
	392, 345, 540, 539, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 199, 0, 0, 0, 0, 0, 0, 274, 200,
	468, 587, 470, 469, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 277, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 264, 397, 414, 275, 388,
	427, 280, 395, 270, 360, 384, 0, 0, 266, 412,
	394, 342, 321, 322, 265, 0, 379, 299, 313, 296,
	358, 0, 411, 439, 295, 430, 0, 422, 268, 0,
	421, 357, 408, 413, 343, 337, 267, 410, 341, 336,
	325, 303, 455, 326, 327, 317, 369, 335, 370, 318,
	347, 346, 348, 0, 0, 0, 0, 0, 450, 451,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 581, 0, 0, 584, 0, 424, 0, 0,
	0, 0, 0, 0, 396, 0, 0, 328, 0, 0,
	0, 440, 0, 382, 363, 604, 0, 0, 380, 333,
	409, 371, 415, 398, 423, 376, 372, 259, 399, 298,
	344, 271, 273, 293, 300, 302, 304, 305, 353, 354,
	366, 387, 400, 401, 402, 297, 281, 381, 282, 315,
	283, 260, 289, 287, 290, 389, 291, 262, 367, 406,
	0, 310, 377, 340, 263, 339, 368, 405, 404, 272,
	431, 437, 438, 527, 0, 443, 605, 606, 607, 452,
	457, 458, 459, 461, 462, 463, 464, 528, 545, 512,
	482, 445, 536, 479, 483, 484, 548, 0, 0, 0,
	436, 329, 330, 0, 308, 256, 257, 601, 294, 359,
	550, 583, 475, 0, 537, 476, 485, 286, 509, 521,
	520, 355, 435, 0, 532, 535, 465, 600, 0, 529,
	544, 603, 543, 597, 365, 0, 386, 541, 488, 0,
	533, 507, 0, 534, 503, 538, 0, 477, 0, 393,
	417, 429, 446, 449, 478, 563, 564, 565, 261, 448,
	567, 568, 569, 570, 571, 572, 573, 566, 420, 510,
	487, 513, 428, 490, 489, 0, 0, 524, 444, 525,
	526, 349, 350, 351, 352, 312, 551, 279, 447, 375,
	0, 511, 0, 0, 0, 0, 0, 0, 0, 0,
	516, 517, 514, 608, 0, 574, 575, 0, 0, 441,
	442, 307, 314, 460, 316, 278, 364, 309, 426, 323,
	0, 453, 518, 454, 577, 580, 578, 579, 356, 319,
	320, 390, 324, 334, 378, 425, 362, 383, 276, 416,
	391, 338, 504, 531, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 248, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	559, 558, 557, 556, 555, 554, 553, 552, 0, 0,
	501, 403, 288, 253, 284, 285, 292, 598, 595, 407,
	599, 0, 258, 481, 332, 0, 373, 306, 546, 547,
	209, 210, 211, 212, 213, 214, 215, 216, 254, 217,
	218, 219, 220, 221, 222, 223, 226, 227, 228, 229,
	230, 231, 232, 233, 549, 224, 225, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 0, 0, 0, 255, 249, 250, 251, 252, 0,
	0, 0, 432, 433, 434, 456, 418, 480, 596, 0,
	0, 0, 0, 0, 0, 0, 530, 542, 576, 0,
	585, 586, 588, 590, 589, 0, 602, 471, 472, 582,
	361, 0, 486, 519, 508, 591, 474, 0, 1857, 0,
	0, 0, 0, 0, 0, 0, 0, 301, 0, 0,
	331, 523, 505, 515, 506, 491, 492, 493, 500, 311,
	494, 495, 496, 466, 497, 467, 498, 499, 0, 522,
	473, 392, 345, 540, 539, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 199, 0, 0, 0, 0, 0, 0, 274,
	200, 468, 587, 470, 469, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 264, 397, 414, 275,
	388, 427, 280, 395, 270, 360, 384, 0, 0, 266,
	412, 394, 342, 321, 322, 265, 0, 379, 299, 313,
	296, 358, 0, 411, 439, 295, 430, 0, 422, 268,
	0, 421, 357, 408, 413, 343, 337, 267, 410, 341,
	336, 325, 303, 455, 326, 327, 317, 369, 335, 370,
	318, 347, 346, 348, 0, 0, 0, 0, 0, 450,
	451, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 581, 0, 0, 584, 0, 424, 0,
	0, 0, 0, 0, 0, 396, 0, 0, 328, 0,
	0, 0, 440, 0, 382, 363, 604, 0, 0, 380,
	333, 409, 371, 415, 398, 423, 376, 372, 259, 399,
	298, 344, 271, 273, 293, 300, 302, 304, 305, 353,
	354, 366, 387, 400, 401, 402, 297, 281, 381, 282,
	315, 283, 260, 289, 287, 290, 389, 291, 262, 367,
	406, 0, 310, 377, 340, 263, 339, 368, 405, 404,
	272, 431, 437, 438, 527, 0, 443, 605, 606, 607,
	452, 457, 458, 459, 461, 462, 463, 464, 528, 545,
	512, 482, 445, 536, 479, 483, 484, 548, 0, 0,
	0, 436, 329, 330, 0, 308, 256, 257, 601, 294,
	359, 550, 583, 475, 0, 537, 476, 485, 286, 509,
	521, 520, 355, 435, 0, 532, 535, 465, 600, 0,
	529, 544, 603, 543, 597, 365, 0, 386, 541, 488,
	0, 533, 507, 0, 534, 503, 538, 0, 477, 0,
	393, 417, 429, 446, 449, 478, 563, 564, 565, 261,
	448, 567, 568, 569, 570, 571, 572, 573, 566, 420,
	510, 487, 513, 428, 490, 489, 0, 0, 524, 444,
	525, 526, 349, 350, 351, 352, 312, 551, 279, 447,
	375, 0, 511, 0, 0, 0, 0, 0, 0, 0,
	0, 516, 517, 514, 608, 0, 574, 575, 0, 0,
	441, 442, 307, 314, 460, 316, 278, 364, 309, 426,
	323, 0, 453, 518, 454, 577, 580, 578, 579, 356,
	319, 320, 390, 324, 334, 378, 425, 362, 383, 276,
	416, 391, 338, 504, 531, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 248, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 559, 558, 557, 556, 555, 554, 553, 552, 0,
	0, 501, 403, 288, 253, 284, 285, 292, 598, 595,
	407, 599, 0, 258, 481, 332, 0, 373, 306, 546,
	547, 209, 210, 211, 212, 213, 214, 215, 216, 254,
	217, 218, 219, 220, 221, 222, 223, 226, 227, 228,
	229, 230, 231, 232, 233, 549, 224, 225, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 0, 0, 0, 255, 249, 250, 251, 252,
	0, 0, 0, 432, 433, 434, 456, 418, 480, 596,
	0, 0, 0, 0, 0, 0, 0, 530, 542, 576,
	0, 585, 586, 588, 590, 589, 0, 602, 471, 472,
	582, 361, 0, 486, 519, 508, 591, 474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 301, 0,
	0, 331, 523, 505, 515, 506, 491, 492, 493, 500,
	311, 494, 495, 496, 466, 497, 467, 498, 499, 0,
	522, 473, 392, 345, 540, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 199, 0, 0, 1409, 0, 0, 0,
	274, 200, 468, 587, 470, 469, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 277, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 264, 397, 414,
	275, 388, 427, 280, 395, 270, 360, 384, 0, 0,
	266, 412, 394, 342, 321, 322, 265, 0, 379, 299,
	313, 296, 358, 0, 411, 439, 295, 430, 0, 422,
	268, 0, 421, 357, 408, 413, 343, 337, 267, 410,
	341, 336, 325, 303, 455, 326, 327, 317, 369, 335,
	370, 318, 347, 346, 348, 0, 0, 0, 0, 0,
	450, 451, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 581, 0, 0, 584, 0, 424,
	0, 0, 0, 0, 0, 0, 396, 0, 0, 328,
	0, 0, 0, 440, 0, 382, 363, 604, 0, 0,
	380, 333, 409, 371, 415, 398, 423, 1763, 372, 259,
	399, 298, 344, 271, 273, 293, 300, 302, 304, 305,
	353, 354, 366, 387, 400, 401, 402, 297, 281, 381,
	282, 315, 283, 260, 289, 287, 290, 389, 291, 262,
	367, 406, 0, 310, 377, 340, 263, 339, 368, 405,
	404, 272, 431, 437, 438, 527, 0, 443, 605, 606,
	607, 452, 457, 458, 459, 461, 462, 463, 464, 528,
	545, 512, 482, 445, 536, 479, 483, 484, 548, 0,
	0, 0, 436, 329, 330, 0, 308, 256, 257, 601,
	294, 359, 550, 583, 475, 0, 537, 476, 485, 286,
	509, 521, 520, 355, 435, 0, 532, 535, 465, 600,
	0, 529, 544, 603, 543, 597, 365, 0, 386, 541,
	488, 0, 533, 507, 0, 534, 503, 538, 0, 477,
	0, 393, 417, 429, 446, 449, 478, 563, 564, 565,
	261, 448, 567, 568, 569, 570, 571, 572, 573, 566,
	420, 510, 487, 513, 428, 490, 489, 0, 0, 524,
	444, 525, 526, 349, 350, 351, 352, 312, 551, 279,
	447, 375, 0, 511, 0, 0, 0, 0, 0, 0,
	0, 0, 516, 517, 514, 608, 0, 574, 575, 0,
	0, 441, 442, 307, 314, 460, 316, 278, 364, 309,
	426, 323, 0, 453, 518, 454, 577, 580, 578, 579,
	356, 319, 320, 390, 324, 334, 378, 425, 362, 383,
	276, 416, 391, 338, 504, 531, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 248, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 559, 558, 557, 556, 555, 554, 553, 552,
	0, 0, 501, 403, 288, 253, 284, 285, 292, 598,
	595, 407, 599, 0, 258, 481, 332, 0, 373, 306,
	546, 547, 209, 210, 211, 212, 213, 214, 215, 216,
	254, 217, 218, 219, 220, 221, 222, 223, 226, 227,
	228, 229, 230, 231, 232, 233, 549, 224, 225, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 247, 0, 0, 0, 255, 249, 250, 251,
	252, 0, 0, 0, 432, 433, 434, 456, 418, 480,
	596, 0, 0, 0, 0, 0, 0, 0, 530, 542,
	576, 0, 585, 586, 588, 590, 589, 0, 602, 471,
	472, 582, 361, 0, 486, 519, 508, 591, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 301,
	0, 0, 331, 523, 505, 515, 506, 491, 492, 493,
	500, 311, 494, 495, 496, 466, 497, 467, 498, 499,
	0, 522, 473, 392, 345, 540, 539, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 199, 0, 0, 0, 0, 0,
	0, 274, 200, 468, 587, 470, 469, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 277, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 264, 397,
	414, 275, 388, 427, 280, 395, 270, 360, 384, 0,
	0, 266, 412, 394, 342, 321, 322, 265, 0, 379,
	299, 313, 296, 358, 0, 411, 439, 295, 430, 0,
	422, 268, 0, 421, 357, 408, 413, 343, 337, 267,
	410, 341, 336, 325, 303, 455, 326, 327, 317, 369,
	335, 370, 318, 347, 346, 348, 0, 0, 0, 0,
	0, 450, 451, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 581, 0, 0, 584, 0,
	424, 0, 0, 1439, 0, 0, 0, 396, 0, 0,
	328, 0, 0, 0, 440, 0, 382, 363, 604, 0,
	0, 380, 333, 409, 371, 415, 398, 423, 376, 372,
	259, 399, 298, 344, 271, 273, 293, 300, 302, 304,
	305, 353, 354, 366, 387, 400, 401, 402, 297, 281,
	381, 282, 315, 283, 260, 289, 287, 290, 389, 291,
	262, 367, 406, 0, 310, 377, 340, 263, 339, 368,
	405, 404, 272, 431, 437, 438, 527, 0, 443, 605,
	606, 607, 452, 457, 458, 459, 461, 462, 463, 464,
	528, 545, 512, 482, 445, 536, 479, 483, 484, 548,
	0, 0, 0, 436, 329, 330, 0, 308, 256, 257,
	601, 294, 359, 550, 583, 475, 0, 537, 476, 485,
	286, 509, 521, 520, 355, 435, 0, 532, 535, 465,
	600, 0, 529, 544, 603, 543, 597, 365, 0, 386,
	541, 488, 0, 533, 507, 0, 534, 503, 538, 0,
	477, 0, 393, 417, 429, 446, 449, 478, 563, 564,
	565, 261, 448, 567, 568, 569, 570, 571, 572, 573,
	566, 420, 510, 487, 513, 428, 490, 489, 0, 0,
	524, 444, 525, 526, 349, 350, 351, 352, 312, 551,
	279, 447, 375, 0, 511, 0, 0, 0, 0, 0,
	0, 0, 0, 516, 517, 514, 608, 0, 574, 575,
	0, 0, 441, 442, 307, 314, 460, 316, 278, 364,
	309, 426, 323, 0, 453, 518, 454, 577, 580, 578,
	579, 356, 319, 320, 390, 324, 334, 378, 425, 362,
	383, 276, 416, 391, 338, 504, 531, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 559, 558, 557, 556, 555, 554, 553,
	552, 0, 0, 501, 403, 288, 253, 284, 285, 292,
	598, 595, 407, 599, 0, 258, 481, 332, 0, 373,
	306, 546, 547, 209, 210, 211, 212, 213, 214, 215,
	216, 254, 217, 218, 219, 220, 221, 222, 223, 226,
	227, 228, 229, 230, 231, 232, 233, 549, 224, 225,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 0, 0, 0, 255, 249, 250,
	251, 252, 0, 0, 0, 432, 433, 434, 456, 418,
	480, 596, 0, 0, 0, 0, 0, 0, 0, 530,
	542, 576, 0, 585, 586, 588, 590, 589, 0, 602,
	471, 472, 582, 361, 0, 486, 519, 508, 591, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 331, 523, 505, 515, 506, 491, 492,
	493, 500, 311, 494, 495, 496, 466, 497, 467, 498,
	499, 0, 522, 473, 392, 345, 540, 539, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 199, 0, 0, 0, 0,
	0, 0, 274, 200, 468, 587, 470, 469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 277, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 264,
	397, 414, 275, 388, 427, 280, 395, 270, 360, 384,
	0, 0, 266, 412, 394, 342, 321, 322, 265, 0,
	379, 299, 313, 296, 358, 0, 411, 439, 295, 430,
	0, 422, 268, 0, 421, 357, 408, 413, 343, 337,
	267, 410, 341, 336, 325, 303, 455, 326, 327, 317,
	369, 335, 370, 318, 347, 346, 348, 0, 0, 0,
	0, 0, 450, 451, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 581, 0, 623, 584,
	0, 424, 0, 0, 0, 0, 0, 0, 396, 0,
	0, 328, 0, 0, 0, 440, 0, 382, 363, 604,
	0, 0, 380, 333, 409, 371, 415, 398, 423, 376,
	372, 259, 399, 298, 344, 271, 273, 293, 300, 302,
	304, 305, 353, 354, 366, 387, 400, 401, 402, 297,
	281, 381, 282, 315, 283, 260, 289, 287, 290, 389,
	291, 262, 367, 406, 0, 310, 377, 340, 263, 339,
	368, 405, 404, 272, 431, 437, 438, 527, 0, 443,
	605, 606, 607, 452, 457, 458, 459, 461, 462, 463,
	464, 528, 545, 512, 482, 445, 536, 479, 483, 484,
	548, 0, 0, 0, 436, 329, 330, 0, 308, 256,
	257, 601, 294, 359, 550, 583, 475, 0, 537, 476,
	485, 286, 509, 521, 520, 355, 435, 0, 532, 535,
	465, 600, 0, 529, 544, 603, 543, 597, 365, 0,
	386, 541, 488, 0, 533, 507, 0, 534, 503, 538,
	0, 477, 0, 393, 417, 429, 446, 449, 478, 563,
	564, 565, 261, 448, 567, 568, 569, 570, 571, 572,
	573, 566, 420, 510, 487, 513, 428, 490, 489, 0,
	0, 524, 444, 525, 526, 349, 350, 351, 352, 312,
	551, 279, 447, 375, 0, 511, 0, 0, 0, 0,
	0, 0, 0, 0, 516, 517, 514, 608, 0, 574,
	575, 0, 0, 441, 442, 307, 314, 460, 316, 278,
	364, 309, 426, 323, 0, 453, 518, 454, 577, 580,
	578, 579, 356, 319, 320, 390, 324, 334, 378, 425,
	362, 383, 276, 416, 391, 338, 504, 531, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 559, 558, 557, 556, 555, 554,
	553, 552, 0, 0, 501, 403, 288, 253, 284, 285,
	292, 598, 595, 407, 599, 0, 258, 481, 332, 0,
	373, 306, 546, 547, 209, 210, 211, 212, 213, 214,
	215, 216, 254, 217, 218, 219, 220, 221, 222, 223,
	226, 227, 228, 229, 230, 231, 232, 233, 549, 224,
	225, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 0, 0, 0, 255, 249,
	250, 251, 252, 0, 0, 0, 432, 433, 434, 456,
	418, 480, 596, 0, 0, 0, 0, 0, 0, 0,
	530, 542, 576, 0, 585, 586, 588, 590, 589, 0,
	602, 471, 472, 582, 361, 0, 486, 519, 508, 591,
	474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 301, 0, 0, 331, 523, 505, 515, 506, 491,
	492, 493, 500, 311, 494, 495, 496, 466, 497, 467,
	498, 499, 0, 522, 473, 392, 345, 540, 539, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 199, 0, 0, 0,
	0, 0, 0, 274, 200, 468, 587, 470, 469, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 277, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	264, 397, 414, 275, 388, 427, 280, 395, 270, 360,
	384, 0, 0, 266, 412, 394, 342, 321, 322, 265,
	0, 379, 299, 313, 296, 358, 0, 411, 439, 295,
	430, 0, 422, 268, 0, 421, 357, 408, 413, 343,
	337, 267, 410, 341, 336, 325, 303, 455, 326, 327,
	317, 369, 335, 370, 318, 347, 346, 348, 0, 0,
	0, 0, 0, 450, 451, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 581, 0, 0,
	584, 0, 424, 0, 0, 0, 0, 0, 0, 396,
	0, 0, 328, 0, 0, 0, 440, 0, 382, 363,
	604, 0, 0, 380, 333, 409, 371, 415, 398, 423,
	376, 372, 259, 399, 298, 344, 271, 273, 293, 300,
	302, 304, 305, 353, 354, 366, 387, 400, 401, 402,
	297, 281, 381, 282, 315, 283, 260, 289, 287, 290,
	389, 291, 262, 367, 406, 0, 310, 377, 340, 263,
	339, 368, 405, 404, 272, 431, 437, 438, 527, 0,
	443, 605, 606, 607, 452, 457, 458, 459, 461, 462,
	463, 464, 528, 545, 512, 482, 445, 536, 479, 483,
	484, 548, 0, 0, 0, 436, 329, 330, 0, 308,
	256, 257, 601, 294, 359, 550, 583, 475, 0, 537,
	476, 485, 286, 509, 521, 520, 355, 435, 0, 532,
	535, 465, 600, 0, 529, 544, 603, 543, 597, 365,
	0, 386, 541, 488, 0, 533, 507, 0, 534, 503,
	538, 0, 477, 0, 393, 417, 429, 446, 449, 478,
	563, 564, 565, 261, 448, 567, 568, 569, 570, 571,
	572, 573, 566, 420, 510, 487, 513, 428, 490, 489,
	0, 0, 524, 444, 525, 526, 349, 350, 351, 352,
	312, 551, 279, 447, 375, 0, 511, 0, 0, 0,
	0, 0, 0, 0, 0, 516, 517, 514, 608, 0,
	574, 575, 0, 0, 441, 442, 307, 314, 460, 316,
	278, 364, 309, 426, 323, 0, 453, 518, 454, 577,
	580, 578, 579, 356, 319, 320, 390, 324, 334, 378,
	425, 362, 383, 276, 416, 391, 338, 504, 531, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 559, 558, 557, 556, 555,
	554, 553, 552, 896, 0, 501, 403, 288, 253, 284,
	285, 292, 598, 595, 407, 599, 0, 258, 481, 332,
	0, 373, 306, 546, 547, 209, 210, 211, 212, 213,
	214, 215, 216, 254, 217, 218, 219, 220, 221, 222,
	223, 226, 227, 228, 229, 230, 231, 232, 233, 549,
	224, 225, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 0, 0, 0, 255,
	249, 250, 251, 252, 0, 0, 0, 432, 433, 434,
	456, 418, 480, 596, 0, 0, 0, 0, 0, 0,
	0, 530, 542, 576, 0, 585, 586, 588, 590, 589,
	0, 602, 471, 472, 582, 361, 0, 486, 519, 508,
	591, 474, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 613, 301, 0, 0, 331, 523, 505, 515, 506,
	491, 492, 493, 500, 311, 494, 495, 496, 466, 497,
	467, 498, 499, 0, 522, 473, 392, 345, 540, 539,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 199, 0, 0,
	0, 0, 0, 0, 274, 200, 468, 587, 470, 469,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 397, 414, 275, 388, 427, 280, 395, 270,
	360, 384, 0, 0, 266, 412, 394, 342, 321, 322,
	265, 0, 379, 299, 313, 296, 358, 0, 411, 439,
	295, 430, 0, 422, 268, 0, 421, 357, 408, 413,
	343, 337, 267, 410, 341, 336, 325, 303, 455, 326,
	327, 317, 369, 335, 370, 318, 347, 346, 348, 0,
	0, 0, 0, 0, 450, 451, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 581, 0,
	0, 584, 0, 424, 0, 0, 0, 0, 0, 0,
	396, 0, 0, 328, 0, 0, 0, 440, 0, 382,
	363, 604, 0, 0, 380, 333, 409, 371, 415, 398,
	423, 376, 372, 259, 399, 298, 344, 271, 273, 293,
	300, 302, 304, 305, 353, 354, 366, 387, 400, 401,
	402, 297, 281, 381, 282, 315, 283, 260, 289, 287,
	290, 389, 291, 262, 367, 406, 0, 310, 377, 340,
	263, 339, 368, 405, 404, 272, 431, 437, 438, 527,
	0, 443, 605, 606, 607, 452, 457, 458, 459, 461,
	462, 463, 464, 528, 545, 512, 482, 445, 536, 479,
	483, 484, 548, 0, 0, 0, 436, 329, 330, 0,
	308, 256, 257, 601, 294, 359, 550, 583, 475, 0,
	537, 476, 485, 286, 509, 521, 520, 355, 435, 0,
	532, 535, 465, 600, 0, 529, 544, 603, 543, 597,
	365, 0, 386, 541, 488, 0, 533, 507, 0, 534,
	503, 538, 0, 477, 0, 393, 417, 429, 446, 449,
	478, 563, 564, 565, 261, 448, 567, 568, 569, 570,
	571, 572, 573, 566, 420, 510, 487, 513, 428, 490,
	489, 0, 0, 524, 444, 525, 526, 349, 350, 351,
	352, 312, 551, 279, 447, 375, 0, 511, 0, 0,
	0, 0, 0, 0, 0, 0, 516, 517, 514, 608,
	0, 574, 575, 0, 0, 441, 442, 307, 314, 460,
	316, 278, 364, 309, 426, 323, 0, 453, 518, 454,
	577, 580, 578, 579, 356, 319, 320, 390, 324, 334,
	378, 425, 362, 383, 276, 416, 391, 338, 504, 531,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 559, 558, 557, 556,
	555, 554, 553, 552, 0, 0, 501, 403, 288, 253,
	284, 285, 292, 598, 595, 407, 599, 0, 258, 481,
	332, 0, 373, 306, 546, 547, 209, 210, 211, 212,
	213, 214, 215, 216, 254, 217, 218, 219, 220, 221,
	222, 223, 226, 227, 228, 229, 230, 231, 232, 233,
	549, 224, 225, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 0, 0, 0,
	255, 249, 250, 251, 252, 0, 0, 0, 432, 433,
	434, 456, 418, 480, 596, 0, 0, 0, 0, 0,
	0, 0, 530, 542, 576, 0, 585, 586, 588, 590,
	589, 0, 602, 471, 472, 582, 361, 0, 486, 519,
	508, 591, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 301, 0, 0, 331, 523, 505, 515,
	506, 491, 492, 493, 500, 311, 494, 495, 496, 466,
	497, 467, 498, 499, 0, 522, 473, 392, 345, 540,
	539, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 199, 0,
	0, 0, 0, 0, 0, 274, 200, 468, 587, 470,
	469, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	277, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 264, 397, 414, 275, 388, 427, 280, 395,
	270, 360, 384, 0, 0, 266, 412, 394, 342, 321,
	322, 265, 0, 379, 299, 313, 296, 358, 0, 411,
	439, 295, 430, 0, 422, 268, 0, 421, 357, 408,
	413, 343, 337, 267, 410, 341, 336, 325, 303, 455,
	326, 327, 317, 369, 335, 370, 318, 347, 346, 348,
	0, 0, 0, 0, 0, 450, 451, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 581,
	0, 0, 584, 0, 424, 0, 0, 0, 0, 0,
	0, 396, 0, 0, 328, 0, 0, 0, 440, 0,
	382, 363, 604, 0, 0, 380, 333, 409, 371, 415,
	398, 423, 376, 372, 259, 399, 298, 344, 271, 273,
	293, 300, 302, 304, 305, 353, 354, 366, 387, 400,
	401, 402, 297, 281, 381, 282, 315, 283, 260, 289,
	287, 290, 389, 291, 262, 367, 406, 0, 310, 377,
	340, 263, 339, 368, 405, 404, 272, 431, 437, 438,
	527, 0, 443, 605, 606, 607, 452, 457, 458, 459,
	461, 462, 463, 464, 528, 545, 512, 482, 445, 536,
	479, 483, 484, 548, 0, 0, 0, 436, 329, 330,
	0, 308, 256, 257, 601, 294, 359, 550, 583, 475,
	0, 537, 476, 485, 286, 509, 521, 520, 355, 435,
	0, 532, 535, 465, 600, 0, 529, 544, 603, 543,
	597, 365, 0, 386, 541, 488, 0, 533, 507, 0,
	534, 503, 538, 0, 477, 0, 393, 417, 429, 446,
	449, 478, 563, 564, 565, 261, 448, 567, 568, 569,
	570, 571, 572, 573, 566, 420, 510, 487, 513, 428,
	490, 489, 0, 0, 524, 444, 525, 526, 349, 350,
	351, 352, 312, 551, 279, 447, 375, 0, 511, 0,
	0, 0, 0, 0, 0, 0, 0, 516, 517, 514,
	608, 0, 574, 575, 0, 0, 441, 442, 307, 314,
	460, 316, 278, 364, 309, 426, 323, 0, 453, 518,
	454, 577, 580, 578, 579, 356, 319, 320, 390, 324,
	334, 378, 425, 362, 383, 276, 416, 391, 338, 504,
	531, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 559, 558, 557,
	556, 555, 554, 553, 552, 0, 0, 501, 403, 288,
	253, 284, 285, 292, 598, 595, 407, 599, 0, 258,
	481, 332, 0, 373, 306, 546, 547, 209, 210, 211,
	212, 213, 214, 215, 216, 254, 217, 218, 219, 220,
	221, 222, 223, 226, 227, 228, 229, 230, 231, 232,
	233, 549, 224, 225, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 0, 0,
	0, 255, 249, 250, 251, 252, 0, 0, 0, 432,
	433, 434, 456, 418, 480, 596, 0, 0, 0, 0,
	0, 0, 0, 530, 542, 576, 0, 585, 586, 588,
	590, 589, 0, 602, 471, 472, 582, 361, 0, 486,
	519, 508, 591, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 301, 0, 0, 331, 523, 505,
	515, 506, 491, 492, 493, 500, 311, 494, 495, 496,
	466, 497, 467, 498, 499, 0, 522, 473, 392, 345,
	540, 539, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 199,
	0, 0, 0, 0, 0, 0, 274, 200, 468, 587,
	470, 469, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 277, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 264, 397, 1389, 275, 388, 427, 280,
	395, 270, 360, 384, 0, 0, 266, 412, 394, 342,
	321, 322, 265, 0, 379, 299, 313, 296, 358, 0,
	411, 439, 295, 430, 0, 422, 268, 0, 421, 357,
	408, 413, 343, 337, 267, 410, 341, 336, 325, 303,
	455, 326, 327, 317, 369, 335, 370, 318, 347, 346,
	348, 0, 0, 0, 0, 0, 450, 451, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	581, 0, 0, 584, 0, 424, 0, 0, 0, 0,
	0, 0, 396, 0, 0, 328, 0, 0, 0, 440,
	0, 382, 363, 604, 0, 0, 380, 333, 409, 371,
	415, 398, 423, 376, 372, 259, 399, 298, 344, 271,
	273, 293, 300, 302, 304, 305, 353, 354, 366, 387,
	400, 401, 402, 297, 281, 381, 282, 315, 283, 260,
	289, 287, 290, 389, 291, 262, 367, 406, 0, 310,
	377, 340, 263, 339, 368, 405, 404, 272, 431, 437,
	438, 527, 0, 443, 605, 606, 607, 452, 457, 458,
	459, 461, 462, 463, 464, 528, 545, 512, 482, 445,
	536, 479, 483, 484, 548, 0, 0, 0, 436, 329,
	330, 0, 308, 256, 257, 601, 294, 359, 550, 583,
	475, 0, 537, 476, 485, 286, 509, 521, 520, 355,
	435, 0, 532, 535, 465, 600, 0, 529, 544, 603,
	543, 597, 365, 0, 386, 541, 488, 0, 533, 507,
	0, 534, 503, 538, 0, 477, 0, 393, 417, 429,
	446, 449, 478, 563, 564, 565, 261, 448, 567, 568,
	569, 570, 571, 572, 573, 566, 420, 510, 487, 513,
	428, 490, 489, 0, 0, 524, 444, 525, 526, 349,
	350, 351, 352, 312, 551, 279, 447, 375, 0, 511,
	0, 0, 0, 0, 0, 0, 0, 0, 516, 517,
	514, 608, 0, 574, 575, 0, 0, 441, 442, 307,
	314, 460, 316, 278, 364, 309, 426, 323, 0, 453,
	518, 454, 577, 580, 578, 579, 356, 319, 320, 390,
	324, 334, 378, 425, 362, 383, 276, 416, 391, 338,
	504, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 248, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 559, 558,
	557, 556, 555, 554, 553, 552, 0, 0, 501, 403,
	288, 253, 284, 285, 292, 598, 595, 407, 599, 0,
	258, 481, 332, 0, 373, 306, 546, 547, 209, 210,
	211, 212, 213, 214, 215, 216, 254, 217, 218, 219,
	220, 221, 222, 223, 226, 227, 228, 229, 230, 231,
	232, 233, 549, 224, 225, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 0,
	0, 0, 255, 249, 250, 251, 252, 0, 0, 0,
	432, 433, 434, 456, 418, 480, 596, 0, 0, 0,
	0, 0, 0, 0, 530, 542, 576, 0, 585, 586,
	588, 590, 589, 0, 602, 471, 472, 582, 361, 0,
	486, 519, 508, 591, 474, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 331, 523,
	505, 515, 506, 491, 492, 493, 500, 311, 494, 495,
	496, 466, 497, 467, 498, 499, 0, 522, 473, 392,
	345, 540, 539, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	199, 0, 0, 0, 0, 0, 0, 274, 200, 468,
	587, 470, 469, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 277, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 264, 397, 1387, 275, 388, 427,
	280, 395, 270, 360, 384, 0, 0, 266, 412, 394,
	342, 321, 322, 265, 0, 379, 299, 313, 296, 358,
	0, 411, 439, 295, 430, 0, 422, 268, 0, 421,
	357, 408, 413, 343, 337, 267, 410, 341, 336, 325,
	303, 455, 326, 327, 317, 369, 335, 370, 318, 347,
	346, 348, 0, 0, 0, 0, 0, 450, 451, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 581, 0, 0, 584, 0, 424, 0, 0, 0,
	0, 0, 0, 396, 0, 0, 328, 0, 0, 0,
	440, 0, 382, 363, 604, 0, 0, 380, 333, 409,
	371, 415, 398, 423, 376, 372, 259, 399, 298, 344,
	271, 273, 293, 300, 302, 304, 305, 353, 354, 366,
	387, 400, 401, 402, 297, 281, 381, 282, 315, 283,
	260, 289, 287, 290, 389, 291, 262, 367, 406, 0,
	310, 377, 340, 263, 339, 368, 405, 404, 272, 431,
	437, 438, 527, 0, 443, 605, 606, 607, 452, 457,
	458, 459, 461, 462, 463, 464, 528, 545, 512, 482,
	445, 536, 479, 483, 484, 548, 0, 0, 0, 436,
	329, 330, 0, 308, 256, 257, 601, 294, 359, 550,
	583, 475, 0, 537, 476, 485, 286, 509, 521, 520,
	355, 435, 0, 532, 535, 465, 600, 0, 529, 544,
	603, 543, 597, 365, 0, 386, 541, 488, 0, 533,
	507, 0, 534, 503, 538, 0, 477, 0, 393, 417,
	429, 446, 449, 478, 563, 564, 565, 261, 448, 567,
	568, 569, 570, 571, 572, 573, 566, 420, 510, 487,
	513, 428, 490, 489, 0, 0, 524, 444, 525, 526,
	349, 350, 351, 352, 312, 551, 279, 447, 375, 0,
	511, 0, 0, 0, 0, 0, 0, 0, 0, 516,
	517, 514, 608, 0, 574, 575, 0, 0, 441, 442,
	307, 314, 460, 316, 278, 364, 309, 426, 323, 0,
	453, 518, 454, 577, 580, 578, 579, 356, 319, 320,
	390, 324, 334, 378, 425, 362, 383, 276, 416, 391,
	338, 504, 531, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 559,
	558, 557, 556, 555, 554, 553, 552, 0, 0, 501,
	403, 288, 253, 284, 285, 292, 598, 595, 407, 599,
	0, 258, 481, 332, 0, 373, 306, 546, 547, 209,
	210, 211, 212, 213, 214, 215, 216, 254, 217, 218,
	219, 220, 221, 222, 223, 226, 227, 228, 229, 230,
	231, 232, 233, 549, 224, 225, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	0, 0, 0, 255, 249, 250, 251, 252, 0, 0,
	0, 432, 433, 434, 456, 418, 480, 596, 0, 0,
	0, 0, 0, 0, 0, 530, 542, 576, 0, 585,
	586, 588, 590, 589, 0, 602, 471, 472, 582, 361,
	0, 486, 519, 508, 591, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 301, 0, 0, 331,
	523, 505, 515, 506, 491, 492, 493, 500, 311, 494,
	495, 496, 466, 497, 467, 498, 499, 0, 522, 473,
	392, 345, 540, 539, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 199, 0, 0, 0, 0, 0, 0, 274, 200,
	468, 587, 470, 469, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 277, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 264, 397, 414, 275, 388,
	427, 280, 395, 270, 360, 384, 0, 0, 266, 412,
	394, 342, 321, 322, 265, 0, 379, 299, 313, 296,
	358, 0, 411, 439, 295, 430, 0, 422, 268, 0,
	421, 357, 408, 413, 343, 337, 267, 410, 341, 336,
	325, 303, 455, 326, 327, 317, 369, 335, 370, 318,
	347, 346, 348, 0, 0, 0, 0, 0, 450, 451,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 581, 0, 0, 584, 0, 424, 0, 0,
	0, 0, 0, 0, 396, 0, 0, 328, 0, 0,
	0, 440, 0, 382, 363, 604, 0, 0, 380, 333,
	409, 371, 415, 398, 423, 376, 372, 259, 399, 298,
	344, 271, 273, 688, 300, 302, 304, 305, 353, 354,
	366, 387, 400, 401, 402, 297, 281, 381, 282, 315,
	283, 260, 289, 287, 290, 389, 291, 262, 367, 406,
	0, 310, 377, 340, 263, 339, 368, 405, 404, 272,
	431, 437, 438, 527, 0, 443, 605, 606, 607, 452,
	457, 458, 459, 461, 462, 463, 464, 528, 545, 512,
	482, 445, 536, 479, 483, 484, 548, 0, 0, 0,
	436, 329, 330, 0, 308, 256, 257, 601, 294, 359,
	550, 583, 475, 0, 537, 476, 485, 286, 509, 521,
	520, 355, 435, 0, 532, 535, 465, 600, 0, 529,
	544, 603, 543, 597, 365, 0, 386, 541, 488, 0,
	533, 507, 0, 534, 503, 538, 0, 477, 0, 393,
	417, 429, 446, 449, 478, 563, 564, 565, 261, 448,
	567, 568, 569, 570, 571, 572, 573, 566, 420, 510,
	487, 513, 428, 490, 489, 0, 0, 524, 444, 525,
	526, 349, 350, 351, 352, 312, 551, 279, 447, 375,
	0, 511, 0, 0, 0, 0, 0, 0, 0, 0,
	516, 517, 514, 608, 0, 574, 575, 0, 0, 441,
	442, 307, 314, 460, 316, 278, 364, 309, 426, 323,
	0, 453, 518, 454, 577, 580, 578, 579, 356, 319,
	320, 390, 324, 334, 378, 425, 362, 383, 276, 416,
	391, 338, 504, 531, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 248, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	559, 558, 557, 556, 555, 554, 553, 552, 0, 0,
	501, 403, 288, 253, 284, 285, 292, 598, 595, 407,
	599, 0, 258, 481, 332, 0, 373, 306, 546, 547,
	209, 210, 211, 212, 213, 214, 215, 216, 254, 217,
	218, 219, 220, 221, 222, 223, 226, 227, 228, 229,
	230, 231, 232, 233, 549, 224, 225, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 0, 0, 0, 255, 249, 250, 251, 252, 0,
	0, 0, 432, 433, 434, 456, 418, 480, 596, 0,
	0, 0, 0, 0, 0, 0, 530, 542, 576, 0,
	585, 586, 588, 590, 589, 0, 602, 471, 472, 582,
	361, 0, 486, 519, 508, 591, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 301, 0, 0,
	331, 523, 505, 515, 506, 491, 492, 493, 500, 311,
	494, 495, 496, 466, 497, 467, 498, 499, 0, 522,
	473, 392, 345, 540, 539, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 199, 0, 0, 0, 0, 0, 0, 274,
	200, 468, 587, 470, 469, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 264, 397, 414, 275,
	388, 427, 280, 395, 270, 360, 384, 0, 0, 266,
	412, 394, 342, 321, 322, 265, 0, 379, 299, 313,
	296, 358, 0, 411, 439, 295, 430, 0, 422, 268,
	0, 421, 357, 408, 413, 343, 337, 267, 410, 341,
	336, 325, 303, 455, 326, 327, 317, 369, 335, 370,
	318, 347, 346, 348, 0, 0, 0, 0, 0, 450,
	451, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 581, 0, 0, 584, 0, 424, 0,
	0, 0, 0, 0, 0, 396, 0, 0, 328, 0,
	0, 0, 440, 0, 382, 363, 604, 0, 0, 380,
	333, 409, 371, 415, 398, 423, 647, 372, 259, 399,
	298, 344, 271, 273, 293, 300, 302, 304, 305, 353,
	354, 366, 387, 400, 401, 402, 297, 281, 381, 282,
	315, 283, 260, 289, 287, 290, 389, 291, 262, 367,
	406, 0, 310, 377, 340, 263, 339, 368, 405, 404,
	272, 431, 437, 438, 527, 0, 443, 605, 606, 607,
	452, 457, 458, 459, 461, 462, 463, 464, 528, 545,
	512, 482, 445, 536, 479, 483, 484, 548, 0, 0,
	0, 436, 329, 330, 0, 308, 256, 257, 601, 294,
	359, 550, 583, 475, 0, 537, 476, 485, 286, 509,
	521, 520, 355, 435, 0, 532, 535, 465, 600, 0,
	529, 544, 603, 543, 597, 365, 0, 386, 541, 488,
	0, 533, 507, 0, 534, 503, 538, 0, 477, 0,
	393, 417, 429, 446, 449, 478, 563, 564, 565, 261,
	448, 567, 568, 569, 570, 571, 572, 648, 566, 420,
	510, 487, 513, 428, 490, 489, 0, 0, 524, 444,
	525, 526, 349, 350, 351, 352, 312, 551, 279, 447,
	375, 0, 511, 0, 0, 0, 0, 0, 0, 0,
	0, 516, 517, 514, 608, 0, 574, 575, 0, 0,
	441, 442, 307, 314, 460, 316, 278, 364, 309, 426,
	323, 0, 453, 518, 454, 577, 580, 578, 579, 356,
	319, 320, 390, 324, 334, 378, 425, 362, 383, 276,
	416, 391, 338, 504, 531, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 248, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 559, 558, 557, 556, 555, 554, 553, 552, 0,
	0, 501, 403, 288, 253, 284, 285, 292, 598, 595,
	407, 599, 0, 258, 481, 332, 0, 373, 306, 546,
	547, 209, 210, 211, 212, 213, 214, 215, 216, 254,
	217, 218, 219, 220, 221, 222, 223, 226, 227, 228,
	229, 230, 231, 232, 233, 549, 224, 225, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 0, 0, 0, 255, 249, 250, 251, 252,
	0, 0, 0, 432, 433, 434, 456, 418, 480, 596,
	0, 0, 0, 0, 0, 0, 0, 530, 542, 576,
	0, 585, 586, 588, 590, 589, 0, 602, 471, 472,
	582, 667, 666, 673, 663, 0, 0, 0, 0, 0,
	0, 0, 0, 670, 671, 0, 672, 676, 0, 0,
	658, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	681, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 685, 0, 0, 687, 0, 0, 0,
	0, 686, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 659, 661,
	660, 0, 0, 0, 0, 0, 0, 0, 665, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	669, 0, 0, 0, 0, 0, 0, 684, 0, 0,
	0, 0, 0, 0, 662, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 664, 668, 674, 0, 675, 677, 0,
	0, 678, 679, 680, 0, 0, 682, 683,
}

var yyPact = [...]int{
	313, -1000, -1000, -1000, -332, 13710, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 41983,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	41983, -330, 41382, 41382, -1000, -1000, 2327, -1000, 40180, 14922,
	41983, 422, 416, 41983, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 797, -1000, 44387, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 706, 4736, 43786, 10679, -257, -1000, 1482,
	-84, 2249, 946, 953, 1038, 1038, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3420,
	852, 40781, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3514, 697, 852, 19740, 55, 51,
	1482, 404, -153, -152, -154, 3839, -1000, 1176, 378, 168,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 10679, 10679, 13710, -357, 13710, 10679, 41983, 41983, -1000,
	-1000, -1000, -1000, -330, 40180, 706, 4736, 10679, 2249, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -152,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -153, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -154, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 51,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 4323, -1000, 1488, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2848,
	1487, 2248, 652, 41983, -1000, 1485, 652, -1000, -1000, -1000,
	1482, 3210, -1000, 41983, 41983, 143, 1658, -1000, 389, 355,
	336, 247, 1484, -1000, -1000, -1000, -1000, -1000, -1000, 547,
	3174, -1000, 41983, 41983, 2861, 41983, -1000, 2037, 574, 44998,
	3023, 1213, 820, 2875, -1000, -1000, 2847, -1000, 272, 596,
	346, 382, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 240,
	-1000, 3087, -1000, -1000, 241, -1000, -1000, 245, -1000, -1000,
	-1000, 50, -1000, -1000, -1000, -1000, -1000, -1000, -71, -1000,
	-1000, 1000, 2525, 10679, 1982, -1000, 2764, -1000, -1000, -1000,
	-1000, 6439, 12494, 12494, 12494, 12494, -1000, -1000, 2650, 10679,
	2834, 2805, 2804, 2797, -1000, -1000, -1000, -1000, -1000, -1000,
	1483, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1786, -1000, -1000, -1000, 13099, -1000, 2795, 2793, 2784, 2783,
	2782, 2775, 2774, 2770, 2768, 2767, 2765, 2757, 2756, 2754,
	2488, 14311, 2753, 2247, 2245, 2752, 2750, 2744, 2243, 2488,
	2488, 2743, 2739, 2738, 2736, 2734, 2728, 2722, 2720, 2719,
	2715, 2714, 2713, 2710, 2705, 2704, 2703, 2689, 2680, 2679,
	2670, 2669, 2668, 2666, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1341, -1000, 2665,
	3199, 2544, -1000, 3068, 3064, 3059, 3052, -304, 2664, 1989,
	-1000, -1000, 73, -1000, -133, -1000, -1000, 940, -1000, 923,
	-1000, 702, 41983, 41983, 138, 755, 702, 702, 702, 702,
	702, 746, 702, 3105, 793, 785, 777, 769, 702, -112,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1657, 1655, 2928,
	902, -1000, -1000, -1000, -1000, 1319, 41983, -1000, 2573, 1576,
	1576, 3163, 3104, 602, 599, 562, 1576, 461, -1000, 1719,
	1719, 1719, 1719, 1576, 425, 633, 3108, 3108, 39, 1719,
	23, 1576, 1576, 23, 1576, 1576, 1648, 193, -310, -1000,
	-1000, -1000, -1000, 1719, 1719, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 3082, 3081, 706, 706, 41983, 136, 41983, 706,
	706, 706, 711, -21, 43185, 42584, 2037, 573, 567, 1327,
	1669, -1000, 1578, 41983, 41983, 1578, 1578, 22750, 22149, -1000,
	41983, -1000, 3199, 2544, 2480, 1616, 2479, 2544, -158, -161,
	-166, 706, 706, 706, 706, 706, 214, 706, 706, 706,
	706, 706, 41983, 41983, 39579, 706, 706, 706, 8859, 8859,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 13710,
	1905, 2031, 166, -56, -324, 220, -1000, -1000, 41983, 2992,
	224, -1000, -1000, -1000, 2502, -1000, 2565, 2565, 2565, 2565,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2565,
	2565, 2572, 2659, -1000, -1000, 2564, 2564, 2564, 2502, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2567, 2567, 2568, 2568, 2567, 41983,
	10679, 41983, 3003, 398, 2657, -1000, 41983, 351, 3199, 2996,
	3108, 3150, -1000, -1000, 1480, 1985, 2240, -1000, 247, -1000,
	385, 247, 1547, -1000, 1007, -1000, -1000, -1000, -1000, -1000,
	41983, -71, 498, -1000, -1000, 2226, 2656, -1000, 558, 1087,
	1377, -1000, 183, 3913, 34169, 2037, 34169, 41983, -1000, -1000,
	-1000, -1000, -1000, -1000, 46, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 239, -1000,
	10679, 10679, 10679, 10679, 10679, -1000, 658, 11889, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 12494, 12494, 12494, 12494, 12494,
	12494, 12494, 12494, 12494, 12494, 12494, 12494, 2647, 1779, 12494,
	12494, 12494, 12494, 1616, 2885, 1322, 256, -1000, -1000, -1000,
	-1000, -1000, 1670, 2525, 10679, 10679, 10679, 10679, 41983, -1000,
	-1000, 4423, 10679, 10679, 198, 10679, 3049, 10679, 10679, 10679,
	2468, 5223, 41983, 10679, -1000, 2463, 2462, -1000, -1000, 1820,
	10679, -1000, -1000, 10679, -1000, -1000, 10679, 12494, 10679, -1000,
	-1000, -1000, 2894, 3049, 3049, 3049, 1664, 10679, 10679, 3049,
	3049, 3049, 1649, 3049, 3049, 3049, 3049, 3049, 3049, 3049,
	3049, 2459, 2457, 2450, 10074, 3108, -257, -1000, 8254, 2996,
	3108, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -306, 2655, 41983, 2236, 2232, -342, 10, 937, 925,
	928, -1000, 41983, 1683, 3044, -1000, 2653, 41983, 702, 702,
	702, -1000, 41983, 34169, 41983, 41983, 2037, 41983, 41983, 41983,
	702, 702, 702, 702, 41983, -1000, 2957, 34169, 2947, 711,
	-1000, 41983, 1319, 3039, 41983, 3163, 12494, 12494, -1000, -1000,
	10679, 38978, 1719, 1576, 1576, -1000, -1000, 41983, -1000, -1000,
	-1000, 1719, 41983, 1719, 1719, 3163, 1719, -1000, -1000, -1000,
	1576, 1576, -1000, -1000, 10679, -1000, -1000, 1719, 1719, -1000,
	-1000, 3163, 41983, 32, 3163, 3163, 43, -1000, -1000, -1000,
	1576, 41983, 41983, 702, 41983, -1000, 41983, 41983, -1000, -1000,
	41983, 41983, 3777, 41983, 38377, 3079, -1000, 34169, 41983, 41983,
	31765, -1000, 1274, -1000, -13, -1000, 8, -21, 1578, -21,
	1578, -1000, 556, 564, 20947, 481, 34169, 5828, -1000, -1000,
	1578, 1578, 5828, 5828, 1448, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1318, -1000, 192, 3108, -1000, -1000, -1000, -1000,
	-1000, 1975, 1973, 1972, 41983, 41983, 34169, 2037, 41983, 706,
	41983, 41983, 41983, 41983, 41983, -1000, 2651, 1436, -1000, 3019,
	41983, 41983, 41983, 1289, -1000, -1000, 17927, 1435, 1289, -1000,
	1694, -1000, 10679, 13710, -288, 10679, 13710, 13710, 10679, 13710,
	-1000, 10679, 208, -1000, -1000, -1000, -1000, 1969, -1000, 1964,
	-1000, -1000, -1000, -1000, -1000, 2227, 2227, -1000, 1948, -1000,
	-1000, -1000, -1000, 1947, -1000, -1000, 1945, -1000, -1000, -1000,
	2436, 1000, -1000, 2222, 2873, -258, -1000, 19139, 41983, 41983,
	-1000, -1000, -258, -1000, 18533, 41983, 3108, -1000, -261, 2996,
	10679, 41983, -1000, 3098, -1000, -1000, 247, -1000, 412, 341,
	-1000, -1000, -1000, -1000, -1000, -1000, 1432, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1317, -1000, 41983, -1000,
	-1000, 183, 34169, 35972, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 217, -1000, -1000, 180, -1000, 770, 172, 1545, -1000,
	-1000, 140, 185, 147, 829, 2525, -1000, 1704, 1704, 1700,
	-1000, 672, -1000, -1000, -1000, -1000, 2650, -1000, -1000, -1000,
	1720, 2235, -1000, 1686, 1686, 1478, 1478, 1478, 1478, 1478,
	1615, 1615, -1000, -1000, -1000, 6439, 2647, 12494, 12494, 12494,
	12494, 674, 674, 3652, 3616, -1000, 10679, 1691, -1000, 10679,
	2696, 1351, 2609, 1227, 1431, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2425, 2416, 2238, 3171, 2409,
	10679, -1000, -1000, 1544, 1538, 1527, -1000, 2052, 9469, -1000,
	-1000, -1000, 2408, 1430, 2404, -1000, -1000, -1000, 2399, 1522,
	1102, 2398, 2464, 2397, 1316, 10679, 10679, 10679, 10679, 2394,
	1520, 1518, 10679, 10679, 10679, 10679, 2393, 10679, 10679, 10679,
	10679, 10679, 10679, 10679, 10679, 77, 77, 77, 1315, 1312,
	-1000, -1000, 1514, -1000, 2525, -1000, -1000, 2996, -1000, 2646,
	1931, 1295, -1000, -1000, -328, 2169, -1000, -1000, 934, 915,
	918, 3094, 3018, 41983, 985, 2643, 41983, 41983, 41983, 205,
	-1000, 1088, -1000, 172, -101, 405, 1002, 2859, 3170, -183,
	41983, 41983, 41983, 41983, 3034, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 37776, -1000, 2642, 1513, -1000, -1000, -1000,
	-1000, 2525, 2858, 41983, 41983, 3163, 3163, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1719, 3163, 3163, 1248, 1576, 1719,
	-1000, -1000, 1719, -1000, -1000, 1719, -1000, -1000, 1429, -1000,
	41983, -1000, -1000, -1000, 3032, 2573, 1284, -1000, -1000, -1000,
	3146, 1471, 685, 685, 907, 744, 3142, 16725, -1000, 1560,
	999, 764, 2964, 254, -1000, 1560, -203, 662, 1560, 1560,
	1560, 1560, 1560, 1560, 1560, 539, 529, 1560, 1560, 1560,
	1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 952, 1560,
	1560, 1560, 1560, 1560, -1000, 1560, 2641, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 565, 200, 3078, 303, 301, 1088,
	3075, 318, 2820, 1170, -1000, -1000, -1000, -1000, 25154, 25154,
	20346, 25154, -1000, 1549, -21, -35, -1000, -1000, 1274, 5828,
	1274, 5828, -1000, -1000, 750, -1000, -1000, 1002, -1000, 41983,
	41983, -1000, -1000, 2614, 1654, -1000, -1000, 14311, -1000, 5828,
	5828, -1000, -1000, 25755, 41983, -1000, -89, -1000, -49, 2996,
	-1000, -1000, -1000, 1259, -1000, -1000, 1260, 1002, 2872, 41983,
	1259, 1259, 1259, -1000, -1000, 16124, 41983, 41983, -1000, -1000,
	-1000, 3163, 8859, -1000, 31765, -1000, -1000, 37174, -1000, 36573,
	3163, 1666, -1000, 13710, 1980, 160, -1000, 202, -327, 159,
	1876, 157, 2525, -1000, -1000, 2392, 2389, 1511, -1000, 1477,
	2386, 1453, 1444, -1000, 16, -1000, 2977, 1004, -1000, 2602,
	-1000, 1442, 2923, -1000, 1251, -1000, 1647, 1437, -1000, 1004,
	1427, 2922, 1251, 2996, 2217, -1000, 1247, -1000, 2123, 1421,
	142, -1000, -1000, -1000, 41983, 2226, 1425, 35972, 1103, -1000,
	736, 1406, 1374, -1000, 34169, 244, 34169, -1000, 34169, -1000,
	-1000, 339, -1000, 41983, 2983, -1000, -1000, -1000, 2169, 1644,
	-348, 41983, -1000, -1000, -1000, -1000, -1000, 1419, -1000, 674,
	674, 3652, 3573, -1000, 12494, -1000, 12494, 2849, 1651, -1000,
	10679, 1966, 4226, 10679, 4226, 1638, 23952, 41983, -1000, -1000,
	10679, 10679, -1000, 2771, -1000, -1000, -1000, -1000, 10679, 10679,
	2150, -1000, 41983, -1000, -1000, -1000, -1000, 23952, -1000, 12494,
	-1000, 10679, 1214, 1214, 2758, 1386, 77, 77, 77, 2748,
	2732, 2717, 1376, 77, 2701, 2644, 2632, 2546, 2504, 2461,
	2456, 2442, -1000, 2601, -1000, -1000, 1821, 11284, 8254, -1000,
	-1000, 262, 1237, 1930, 2215, 113, -1000, 1643, -1000, -1000,
	-1000, 876, 372, -1000, 222, 2385, 1231, -1000, -1000, 41983,
	-1000, -1000, -1000, 16124, 2573, 2599, 2573, 82, 1560, 606,
	34169, 557, -1000, 41983, 1994, 1642, 2871, 704, 2990, 41983,
	2595, 2590, 2589, 2583, 3031, 401, 4456, 41983, 1130, -1000,
	1367, 378, -1000, 41983, -1000, 2037, -1000, 1576, -1000, -1000,
	3163, -1000, -1000, 10679, 10679, 3163, 1576, 1576, 1719, 41983,
	-1000, 401, 4456, 3030, 3952, 473, 2250, -1000, 41983, -1000,
	-1000, -1000, 821, -1000, 924, 702, 41983, 1740, 924, 1739,
	2579, -1000, -1000, 41983, 41983, 41983, 41983, -1000, -1000, 41983,
	-1000, 41983, 41983, 41983, 41983, 41983, 35371, -1000, 41983, 41983,
	-1000, 41983, 1738, 41983, 1732, 3054, -1000, 1560, 1560, 874,
	-1000, -1000, 551, -1000, 35371, 1927, 1923, 1922, 1914, 2212,
	2207, 2205, 1560, 1560, 1910, 2204, 34770, 2198, 1059, 1908,
	1906, 1904, 1998, 2194, 765, -1000, 2192, 1986, 1962, 1951,
	41983, 2578, 2111, -1000, -1000, 82, 1560, 274, 41983, 1629,
	606, 403, 2005, 21548, 41983, 31765, 31765, 31765, 31765, -1000,
	2901, 2899, -1000, 2909, 2905, 2931, 41983, 31765, 2573, -1000,
	34770, -1000, -1000, -1000, 1616, 1370, 2976, 973, 10679, -1000,
	-1000, -43, -32, -1000, -1000, -1000, 34169, 2188, 481, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 3093, 41983, 41983, 726,
	2381, 1208, -1000, -1000, -1000, 4456, 2565, 2565, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2565, 2565, 2572,
	-1000, -1000, 2564, 2564, 2564, 2502, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2567, 2567, 2568, 2568,
	2567, -1000, -1000, 3160, -1000, 1198, -1000, -1000, 1360, -1000,
	3160, 1659, -333, 13710, 1653, 1617, -1000, 10679, 13710, 10679,
	-294, 288, -296, -1000, -1000, -1000, 2187, -1000, -1000, -1000,
	1896, -1000, 1895, 89, 120, 1726, -258, 8254, 402, 41983,
	-258, 41983, 8254, -1000, 41983, 400, -258, 3093, 16, 10679,
	2949, -1000, -1000, 41983, 1892, -1000, -1000, -1000, 3169, 34169,
	2037, 1494, 33568, -1000, 235, -1000, 207, 518, 2186, -1000,
	763, 112, 2170, 2169, -1000, -1000, -1000, -1000, 12494, -1000,
	-1000, -1000, -1000, 2525, 10679, 2376, -1000, 906, 906, 2079,
	2375, 2372, -1000, 2565, 2565, -1000, 2502, 2564, 2502, 906,
	906, 2371, -1000, 2070, 2411, -1000, 2405, 2350, 10679, -1000,
	2370, 3553, 1109, -117, -231, 77, 77, -1000, -1000, -1000,
	-1000, 77, 77, 77, 77, -1000, 77, 77, 77, 77,
	77, 77, 77, 77, 660, -139, -316, -140, -321, -1000,
	2365, 1194, -1000, -1000, -1000, -1000, -1000, 198, 1162, -1000,
	-1000, 2169, 2165, -1000, -1000, -1000, 41983, 2164, 2162, 985,
	4456, 2360, 3028, 15523, 3025, 2008, -1000, -1000, -1000, 32967,
	505, -1000, -1000, -1000, 620, 250, 1887, 495, -1000, 41983,
	318, 2939, 1628, 2160, 41983, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2990, -1000, 969, 359, 30563, 15523, 15523, 15523,
	340, 352, 1652, -1000, 652, 1124, 1354, 31765, 41983, -1000,
	31164, 2359, -1000, 1002, 3163, -1000, 2525, 2525, -1000, 3163,
	3163, 1576, -1000, 352, -1000, 340, -1000, 1173, 17326, 449,
	437, 409, -1000, 570, -1000, -1000, 645, 2981, 4456, -1000,
	41983, -1000, 41983, -1000, 41983, 41983, 702, 10679, 2981, 41983,
	721, -1000, -1000, 1047, 348, 335, 700, 700, 1128, -1000,
	3015, -1000, -1000, 1105, -1000, -1000, -1000, -1000, 41983, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 23952, 23952, 3067, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2159, 2143, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 41983, 1361, -1000, 1624, 2008, 32967, 1613,
	1578, 2136, 505, 1994, 1611, -1000, 2134, -1000, 1061, 41983,
	41983, -1000, 1210, -1000, 1610, 2854, 2868, 2854, -1000, -1000,
	-1000, -1000, 2895, -1000, 2888, -1000, -1000, 1210, -1000, -1000,
	-1000, -1000, -1000, 973, -1000, 3091, 924, 924, 924, 2353,
	-1000, -1000, -1000, 1103, 2347, -1000, -1000, -1000, 3194, -1000,
	-1000, -1000, -1000, -1000, -1000, 16124, 2986, 3152, 3141, 32366,
	3152, -1000, -333, 1619, -1000, 1925, 154, 1771, 41983, -1000,
	-1000, -1000, 2346, 2341, -273, 109, 3136, 3135, 938, -1000,
	2340, 1101, -258, -1000, -1000, 1004, -1000, -1000, -1000, -258,
	-1000, 1004, -1000, 89, -1000, -1000, 2993, -1000, -1000, 2037,
	-1000, 201, -1000, -1000, -1000, -1000, -1000, -1000, 156, -1000,
	41983, -1000, 1100, 111, -1000, 2525, -1000, -1000, -1000, -1000,
	-1000, 4226, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 10679, -1000, -1000, -1000, 2328, -1000, -1000,
	10679, 2339, 2133, 2336, 2131, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3199,
	-1000, 3134, 1345, 2335, 2333, 1328, 2325, 2324, -1000, 10679,
	2320, 198, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 811,
	340, 2311, 1091, -1000, -1000, -1000, -1000, 340, -1000, 2125,
	170, -1000, -1000, -1000, 2120, 2113, 1883, -1000, -1000, 1935,
	1362, 174, -1000, -1000, -1000, -1000, -1000, -1000, 2005, 1988,
	1602, -353, -1000, 2563, -1000, 1560, 1560, 1560, 41983, 1323,
	-1000, 1560, 1560, 2310, 2306, 2305, -185, 665, 1591, 1589,
	-1000, 1880, 25154, 31765, 31164, 1119, -1000, 1339, -1000, -1000,
	-1000, -1000, -1000, 3163, 665, -1000, 443, 1879, 12494, 2561,
	12494, 2559, 459, 2551, 1309, -1000, 41983, -1000, -1000, 41983,
	344, 2550, -1000, 2549, 2856, 431, 2542, 2541, 41983, 2287,
	-1000, 2981, 41983, 656, 2980, -1000, -1000, -1000, 323, -1000,
	-1000, 468, -1000, 41983, -1000, 41983, -1000, 1441, -1000, 23952,
	-1000, -1000, 1293, -1000, 2111, 2110, -1000, 170, 2100, 5828,
	-1000, -1000, 2939, 2090, -1000, 41983, 1061, 1061, 3199, 41983,
	8254, -1000, -1000, 10679, 2531, -1000, 10679, -1000, -1000, -1000,
	-1000, -1000, 2517, 2969, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1952, -1000, 10679, 10679, -1000, -1000, 690, 13710, -297,
	280, -1000, -1000, -1000, -275, 2087, -1000, -1000, 3133, 2086,
	2039, 41983, -1000, -1000, 1004, 1004, -273, -1000, -1000, 1002,
	-1000, -1000, 43, 543, -1000, 2303, 2255, -1000, 2244, 77,
	-1000, 77, -1000, 199, 10679, -1000, 2085, -1000, -1000, -1000,
	2083, -1000, -1000, 2206, -1000, 2288, 4456, -196, -185, 15523,
	-196, -1000, -1000, 337, -1000, -1000, 314, -1000, -1000, 1847,
	560, -1000, -1000, -1000, 1601, 1752, 2051, 28760, 23952, 24553,
	2081, -1000, -1000, 30563, 1952, 1952, 4811, 239, 4811, -1000,
	2515, 956, 1573, -1000, 1855, -1000, 1843, -1000, 3163, 1119,
	1339, -1000, -1000, 1489, -1000, 956, 2250, 3132, -1000, 3203,
	41983, 2780, 41983, 2508, 1599, 12494, -1000, 645, 2910, -1000,
	-1000, 344, -1000, -1000, 1770, 12494, -1000, -1000, 2078, 24553,
	775, 1586, 1583, 787, 2507, -1000, 489, 3192, -1000, -1000,
	-1000, 866, 2506, -1000, 1716, 1714, -1000, 41983, -1000, 28760,
	28760, 462, 462, 28760, 28760, 2503, 700, -1000, -1000, 12494,
	-1000, -1000, 1560, -1000, -1000, -1000, 1560, 1380, -1000, -1000,
	-1000, -1000, -1000, -1000, 1988, -1000, -1000, 3108, -1000, -1000,
	2525, 41983, 2525, 29962, -1000, 3131, 3130, -1000, 2525, 1000,
	-1000, -333, 41983, 41983, -278, 1836, -1000, 2071, 100, -1000,
	-1000, 1001, -275, -281, 88, 114, 1581, -1000, -1000, -1000,
	-1000, -1000, 2280, -1000, 911, -1000, -1000, -1000, 1000, 2276,
	2275, -1000, -1000, -177, -1000, -1000, 347, -1000, -1000, -1000,
	514, 2068, -1000, -1000, 310, -1000, -1000, 2067, -1000, -1000,
	107, -1000, 1566, 1290, -1000, 2502, 10679, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 619, 4749, -1000, 999, -1000,
	43, 619, 27558, 552, 248, -1000, 1833, -1000, -1000, 3199,
	-1000, 528, -1000, 455, -1000, 1261, -1000, 1249, 29361, 1832,
	2635, -1000, 4586, 759, -1000, -1000, 3652, -1000, -1000, -1000,
	-1000, -1000, -1000, 2064, 2061, -1000, -1000, -1000, -1000, -1000,
	1816, 2499, -50, 3056, 2059, -1000, -1000, 2498, 1242, 1230,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1228,
	1226, 28760, -1000, -1000, 3652, 1804, 23952, 1560, -1000, -1000,
	1221, 1190, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2496,
	-1000, -1000, 3129, -278, -1000, 2058, 705, 92, 114, -1000,
	3128, 97, 3124, 3121, 2057, -1000, -1000, 936, -259, 75,
	74, 60, -1000, -1000, -1000, 10679, -1000, -1000, 41983, 482,
	-1000, -1000, -1000, 155, -1000, -1000, -1000, -1000, 2051, 2050,
	-1000, 28760, 3015, 2132, 435, 3118, 4811, -1000, 1560, -1000,
	435, 1187, -1000, 1560, 1560, -1000, 366, -1000, 1564, -1000,
	1799, -1000, 3108, -1000, 364, -1000, 439, -1000, -1000, -1000,
	1186, -1000, -1000, -1000, 4586, 446, -1000, 609, 2493, -1000,
	-1000, 2261, 10679, 2488, 1560, 2075, -169, 28760, 2855, 2851,
	2773, 2766, 1179, -1000, -1000, 23952, -1000, -1000, 28159, 41983,
	2039, -1000, -1000, 2482, 1796, 109, 93, 3117, -1000, 2039,
	3115, 2039, 2039, 971, 1690, -1000, 72, 68, 66, -1000,
	-1000, -1000, -1000, 500, -1000, 233, -1000, -1000, -1000, 249,
	-1000, -1000, 3015, -1000, 3111, 473, -1000, 23952, -1000, -1000,
	27558, 1952, 1952, -1000, -1000, 1791, -1000, -1000, -1000, -1000,
	1787, -1000, -1000, -1000, 1141, -1000, 41983, 809, 7649, -1000,
	2128, -1000, 41983, -1000, 2867, -1000, 204, 1131, 249, 462,
	249, 462, 249, 462, 249, 462, 226, -1000, -1000, -1000,
	1129, -1000, -1000, 3055, 23351, 85, -1000, -1000, -1000, 2041,
	-1000, 2039, -1000, -1000, -1000, 80, 936, -1000, -1000, -1000,
	2038, -1000, -1000, -1000, -1000, 1560, 1560, 2035, 2033, 356,
	-1000, -1000, -1000, 26957, 449, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 446, 4811, -1000, 7649, 1122, -1000, 2525, -1000,
	700, -1000, -1000, 2866, 2865, 3168, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 41983, -1000, 41983, -1000,
	1110, -1000, -1000, -1000, 1330, -1000, -1000, -1000, -1000, 1553,
	-1000, -314, 1780, 1777, -1000, -1000, 41983, -1000, 41983, 443,
	-1000, 4811, 1107, -1000, 7649, -1000, -1000, 3180, -1000, 3177,
	799, 799, 249, 249, 249, 249, -1000, 970, -1000, 1551,
	-1000, 26356, 41983, 2014, -1000, -1000, 1976, -1000, -1000, -1000,
	1039, 2250, -1000, -1000, -1000, -1000, -1000, 1839, 502, -1000,
	41983, 7044, -1000, 1008, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2525, 41983, -1000,
}

var yyPgo = [...]int{
	0, 173, 3212, 250, 171, 3787, 80, 248, 228, 226,
	245, 3786, 3785, 3784, 3016, 3014, 3782, 3781, 3780, 3778,
	3777, 3776, 3775, 3774, 3773, 3772, 3771, 3768, 3767, 3766,
	3765, 3751, 3750, 3749, 3748, 3746, 3745, 3742, 3741, 3740,
	3739, 3738, 3736, 3735, 3734, 3732, 244, 3731, 3730, 3727,
	3726, 3725, 3724, 3723, 3722, 3708, 3706, 3705, 3703, 3702,
	3688, 3687, 3682, 3681, 3680, 3679, 3678, 3677, 3676, 3674,
	3672, 3671, 3670, 3667, 3666, 3665, 3664, 3661, 3660, 3658,
	211, 3656, 3000, 3654, 3653, 3652, 3651, 3650, 3649, 3648,
	232, 3645, 3641, 3640, 3638, 3637, 3635, 3633, 3632, 3628,
	3627, 3626, 230, 3625, 3624, 3623, 3622, 238, 3620, 219,
	3618, 169, 190, 3616, 3615, 3614, 3613, 3612, 3609, 236,
	188, 71, 3608, 46, 3607, 3602, 221, 3596, 147, 3595,
	144, 3593, 3589, 3588, 3587, 3585, 3584, 3581, 3580, 3579,
	3578, 3577, 3576, 3575, 3572, 3571, 3570, 3569, 3566, 90,
	3563, 257, 3561, 70, 3560, 3559, 120, 97, 187, 264,
	2446, 252, 251, 182, 174, 95, 3558, 2989, 3557, 159,
	223, 153, 28, 3556, 129, 3555, 262, 45, 34, 253,
	136, 56, 158, 115, 3554, 214, 108, 107, 3553, 3552,
	143, 231, 178, 3550, 101, 3547, 3545, 3543, 3540, 3533,
	213, 189, 3529, 3527, 124, 3525, 3522, 119, 3521, 73,
	134, 164, 130, 3519, 181, 121, 114, 117, 91, 3518,
	141, 3517, 3515, 3509, 3508, 177, 3506, 3505, 126, 68,
	3504, 3503, 3502, 69, 3501, 75, 3500, 48, 3499, 58,
	3498, 3497, 3496, 3493, 3492, 3490, 3489, 3482, 3480, 3477,
	3473, 50, 3472, 3471, 7, 14, 17, 3470, 24, 3469,
	166, 3467, 3466, 3462, 3461, 3460, 89, 85, 3459, 86,
	162, 3458, 8, 25, 72, 3455, 3448, 217, 140, 99,
	152, 3444, 299, 3442, 3441, 3440, 156, 3439, 410, 3437,
	3436, 3435, 3434, 3432, 3431, 206, 3429, 209, 39, 3428,
	128, 132, 3427, 37, 47, 192, 210, 3423, 3422, 3419,
	127, 207, 102, 35, 0, 3418, 154, 3417, 3416, 3407,
	255, 3406, 229, 233, 165, 247, 259, 216, 3404, 3403,
	65, 3402, 160, 81, 55, 131, 63, 20, 256, 3401,
	1075, 9, 186, 3400, 201, 3399, 185, 15, 200, 145,
	3398, 3397, 30, 260, 3394, 3391, 3390, 123, 3389, 3387,
	265, 79, 3386, 3384, 3383, 3382, 41, 3381, 33, 12,
	3380, 93, 3378, 239, 3377, 241, 133, 180, 176, 148,
	222, 224, 82, 76, 3376, 1648, 151, 94, 13, 3375,
	225, 3374, 175, 122, 3369, 100, 3368, 243, 261, 204,
	3365, 179, 10, 43, 29, 26, 44, 11, 220, 203,
	3364, 3363, 21, 52, 3362, 125, 3361, 18, 3360, 3359,
	62, 3, 3358, 3357, 16, 19, 3356, 32, 218, 167,
	135, 88, 66, 3354, 3353, 49, 138, 3352, 150, 149,
	155, 3338, 74, 3336, 3335, 3334, 854, 3333, 254, 3331,
	3330, 3326, 3324, 3323, 3322, 3321, 3320, 3319, 3318, 104,
	42, 3314, 3313, 3312, 3311, 77, 139, 3310, 3309, 3308,
	3307, 36, 137, 3306, 23, 3303, 31, 27, 38, 3302,
	98, 3298, 4, 197, 3297, 3296, 5, 3295, 3293, 1,
	2, 3292, 3291, 118, 3290, 87, 22, 163, 105, 3287,
	3285, 83, 208, 146, 3284, 3283, 96, 237, 193, 3282,
	113, 246, 258, 3281, 202, 3279, 3278, 3276, 3274, 3271,
	3269, 1097, 3268, 3267, 249, 67, 92, 110, 3266, 3265,
	3262, 84, 161, 112, 111, 57, 78, 3261, 109, 195,
	3254, 191, 3253, 3251, 3247, 103, 3244, 3243, 3241, 3237,
	183, 3236, 3235, 184, 227, 3234, 3232, 298, 3231, 3230,
	3229, 3228, 3227, 3226, 3225, 3224, 3223, 3220, 242, 342,
	3214,
}

//line mysql_sql.y:11257
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() tree.GroupBy {
	v, _ := st.union.(tree.GroupBy)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) snapshotObjectUnion() tree.ObejectInfo {
	v, _ := st.union.(tree.ObejectInfo)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 563, 566, 566, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 117, 117, 146, 542, 542, 116, 548,
	548, 548, 549, 549, 113, 135, 134, 137, 137, 136,
	136, 133, 133, 129, 132, 132, 131, 131, 130, 125,
	127, 127, 126, 128, 128, 114, 102, 115, 492, 492,
	491, 491, 490, 490, 443, 443, 489, 489, 489, 488,
	488, 488, 487, 487, 486, 486, 485, 485, 483, 483,
	484, 482, 481, 481, 481, 479, 479, 479, 475, 475,
	477, 476, 476, 478, 470, 470, 473, 473, 471, 471,
	471, 471, 474, 469, 469, 469, 468, 468, 101, 101,
	101, 387, 387, 100, 100, 401, 401, 401, 401, 401,
	399, 399, 399, 399, 399, 399, 398, 398, 397, 397,
	402, 402, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 91, 91, 91, 91, 91, 96, 96, 96,
	554, 554, 553, 553, 555, 555, 555, 555, 556, 556,
	94, 94, 94, 95, 396, 396, 396, 92, 93, 93,
	386, 386, 391, 391, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 395, 395, 395,
	393, 393, 392, 392, 394, 394, 85, 85, 85, 88,
	87, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	86, 86, 86, 86, 86, 86, 81, 81, 81, 81,
	81, 80, 80, 82, 82, 383, 383, 382, 97, 97,
	98, 551, 551, 550, 552, 552, 552, 552, 99, 105,
	105, 105, 105, 105, 105, 105, 104, 104, 107, 107,
	106, 108, 90, 90, 90, 90, 90, 90, 89, 89,
	89, 89, 89, 89, 89, 89, 89, 89, 89, 89,
	89, 517, 517, 517, 519, 519, 318, 319, 567, 321,
	317, 317, 317, 513, 513, 514, 515, 516, 516, 516,
	103, 11, 11, 11, 11, 11, 11, 11, 11, 13,
	79, 84, 84, 259, 259, 264, 264, 265, 265, 265,
	270, 270, 271, 271, 260, 260, 260, 260, 260, 260,
	260, 260, 260, 260, 260, 260, 260, 260, 260, 260,
	260, 260, 260, 260, 260, 260, 247, 247, 247, 242,
	242, 242, 242, 243, 243, 244, 244, 245, 245, 245,
	245, 246, 246, 311, 311, 266, 266, 266, 268, 268,
	267, 263, 261, 261, 261, 261, 261, 261, 261, 262,
	262, 262, 262, 269, 269, 77, 83, 83, 83, 530,
	530, 78, 541, 541, 446, 446, 332, 332, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 451, 452, 328, 46, 46, 46,
	46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
	46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
	46, 46, 46, 46, 46, 46, 46, 46, 53, 56,
	57, 52, 52, 52, 372, 372, 51, 568, 568, 306,
	306, 65, 64, 55, 66, 67, 68, 69, 70, 71,
	50, 63, 63, 63, 63, 63, 63, 63, 63, 74,
	464, 464, 570, 570, 570, 72, 73, 445, 445, 445,
	62, 61, 60, 59, 58, 58, 49, 49, 48, 48,
	54, 141, 142, 142, 325, 325, 325, 327, 327, 323,
	569, 569, 415, 415, 326, 326, 47, 47, 47, 47,
	75, 324, 324, 305, 322, 322, 322, 12, 12, 10,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 25, 26, 28, 380, 380,
	377, 27, 19, 18, 18, 22, 21, 17, 17, 20,
	23, 24, 24, 9, 9, 9, 9, 14, 14, 15,
	164, 164, 215, 215, 525, 525, 521, 521, 522, 522,
	522, 523, 523, 524, 524, 109, 458, 458, 458, 458,
	458, 458, 8, 186, 186, 457, 457, 457, 457, 457,
	457, 384, 384, 384, 502, 502, 502, 503, 185, 185,
	180, 180, 459, 459, 349, 504, 504, 467, 467, 466,
	466, 465, 465, 183, 183, 184, 184, 167, 167, 120,
	120, 472, 472, 472, 472, 480, 480, 442, 442, 251,
	251, 298, 298, 299, 299, 157, 157, 158, 158, 158,
	158, 158, 158, 557, 557, 558, 559, 560, 560, 561,
	561, 561, 562, 562, 562, 562, 562, 510, 510, 512,
	512, 511, 182, 182, 178, 178, 179, 179, 179, 177,
	177, 176, 175, 175, 174, 172, 172, 172, 173, 173,
	173, 190, 190, 160, 160, 160, 159, 159, 159, 159,
	159, 282, 282, 282, 282, 282, 282, 282, 282, 282,
	282, 282, 282, 161, 161, 518, 518, 518, 447, 447,
	447, 454, 454, 279, 279, 280, 280, 278, 278, 162,
	162, 163, 163, 163, 163, 277, 277, 276, 165, 165,
	171, 170, 170, 166, 166, 166, 166, 287, 287, 286,
	286, 286, 286, 112, 118, 118, 119, 189, 189, 285,
	284, 284, 284, 188, 188, 187, 187, 181, 181, 169,
	169, 169, 169, 283, 168, 281, 547, 547, 546, 546,
	545, 543, 543, 543, 544, 544, 544, 544, 494, 494,
	494, 494, 494, 312, 312, 312, 316, 316, 315, 315,
	315, 315, 315, 320, 7, 7, 7, 7, 7, 7,
	7, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 38, 199, 200, 39, 201, 201,
	202, 202, 203, 203, 204, 205, 206, 206, 206, 206,
	37, 191, 191, 192, 192, 193, 193, 194, 195, 195,
	195, 198, 196, 197, 197, 565, 565, 564, 36, 36,
	29, 150, 150, 151, 151, 151, 153, 153, 248, 248,
	248, 152, 152, 154, 154, 154, 526, 529, 527, 527,
	531, 531, 531, 532, 532, 532, 532, 533, 533, 30,
	138, 143, 536, 536, 536, 535, 535, 537, 537, 538,
	538, 302, 302, 303, 303, 148, 149, 149, 145, 140,
	156, 156, 156, 156, 156, 139, 144, 147, 528, 534,
	534, 534, 381, 381, 378, 379, 379, 376, 375, 375,
	375, 540, 540, 539, 539, 539, 313, 313, 31, 371,
	371, 373, 374, 374, 374, 365, 365, 365, 365, 35,
	369, 369, 370, 370, 370, 370, 370, 370, 370, 366,
	366, 368, 368, 364, 364, 364, 364, 364, 364, 364,
	34, 155, 155, 363, 363, 360, 360, 358, 358, 359,
	359, 357, 357, 357, 361, 361, 42, 76, 43, 44,
	45, 41, 362, 362, 33, 33, 33, 33, 122, 121,
	121, 121, 121, 121, 124, 124, 301, 301, 300, 300,
	123, 40, 227, 227, 434, 434, 429, 429, 429, 429,
	429, 449, 449, 449, 430, 430, 430, 431, 431, 431,
	433, 433, 433, 432, 432, 432, 432, 432, 448, 448,
	450, 450, 450, 403, 403, 404, 404, 404, 407, 407,
	421, 421, 422, 422, 420, 420, 427, 427, 426, 426,
	425, 425, 424, 424, 423, 423, 423, 423, 418, 418,
	417, 417, 405, 405, 405, 405, 405, 406, 406, 406,
	416, 416, 419, 419, 275, 275, 274, 274, 235, 235,
	236, 236, 273, 273, 233, 233, 234, 234, 234, 272,
	272, 272, 272, 272, 272, 272, 272, 272, 272, 272,
	272, 272, 272, 272, 272, 272, 272, 272, 272, 272,
	272, 272, 272, 272, 272, 272, 272, 272, 272, 272,
	272, 272, 272, 272, 500, 500, 501, 238, 238, 249,
	249, 249, 249, 249, 249, 237, 237, 239, 239, 216,
	216, 214, 214, 207, 207, 208, 208, 209, 209, 209,
	213, 213, 212, 212, 212, 212, 210, 210, 211, 211,
	211, 211, 211, 211, 389, 389, 497, 497, 498, 498,
	493, 493, 493, 496, 496, 496, 496, 496, 496, 496,
	499, 499, 499, 495, 495, 217, 296, 296, 296, 314,
	314, 314, 314, 295, 295, 295, 232, 232, 231, 231,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 388, 388, 329, 329, 330, 330, 258, 257,
	257, 257, 257, 257, 255, 256, 254, 254, 254, 254,
	254, 253, 253, 252, 252, 252, 367, 367, 250, 250,
	241, 241, 241, 240, 240, 240, 428, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 293, 293, 293, 294, 294, 294,
	294, 294, 294, 294, 294, 339, 339, 345, 345, 509,
	509, 508, 218, 218, 218, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 228, 228, 228, 412, 412, 412,
	412, 413, 413, 413, 413, 414, 414, 414, 410, 410,
	411, 411, 350, 351, 351, 455, 455, 456, 456, 408,
	408, 409, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 463, 463, 463, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 520, 520, 520, 505, 505, 505, 506, 506, 506,
	506, 506, 506, 506, 506, 506, 506, 506, 506, 507,
	507, 507, 507, 507, 507, 507, 507, 507, 507, 507,
	507, 507, 507, 507, 507, 507, 291, 291, 291, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 352, 352, 353, 353, 460, 460,
	460, 460, 460, 460, 461, 461, 462, 462, 462, 462,
	453, 453, 453, 453, 453, 453, 453, 453, 453, 453,
	453, 453, 453, 453, 453, 453, 453, 453, 453, 453,
	453, 453, 453, 453, 453, 453, 453, 453, 453, 337,
	288, 288, 288, 354, 346, 346, 347, 347, 348, 348,
	340, 340, 340, 340, 340, 340, 341, 341, 343, 343,
	343, 343, 343, 343, 343, 343, 343, 343, 343, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	342, 342, 344, 344, 356, 356, 356, 355, 355, 355,
	355, 355, 355, 355, 230, 230, 230, 230, 334, 334,
	334, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 220, 220, 220, 220, 224, 224, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 225, 225, 225, 225, 225, 223, 223,
	223, 223, 223, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 110, 111, 111, 222, 297, 297, 435, 435, 438,
	438, 436, 436, 437, 439, 439, 439, 440, 440, 440,
	441, 441, 441, 444, 444, 304, 304, 304, 310, 310,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 6, 6, 6, 1, 2, 4, 0,
	1, 1, 0, 1, 5, 2, 2, 6, 9, 6,
	9, 4, 7, 8, 0, 1, 1, 2, 4, 6,
	1, 2, 4, 0, 2, 10, 10, 2, 0, 2,
	1, 3, 3, 3, 0, 2, 1, 3, 5, 0,
	2, 3, 1, 3, 1, 1, 1, 3, 1, 1,
	1, 1, 0, 3, 3, 0, 3, 3, 0, 1,
	3, 0, 1, 3, 0, 2, 1, 2, 3, 4,
	3, 3, 1, 0, 1, 1, 0, 1, 8, 5,
	7, 0, 3, 8, 5, 1, 3, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 4,
	1, 3, 1, 2, 2, 2, 2, 2, 2, 1,
	2, 2, 2, 2, 1, 1, 2, 2, 1, 1,
	1, 1, 1, 2, 2, 2, 1, 2, 1, 2,
	2, 1, 2, 1, 1, 2, 2, 1, 1, 1,
	3, 2, 2, 2, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 4, 4,
	1, 3, 3, 1, 2, 2, 2, 1, 2, 2,
	3, 4, 4, 6, 1, 1, 1, 2, 4, 6,
	1, 4, 1, 3, 3, 4, 4, 4, 4, 3,
	3, 2, 4, 4, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 2,
	2, 0, 1, 4, 2, 4, 1, 5, 3, 2,
	1, 2, 2, 4, 4, 5, 2, 1, 3, 4,
	4, 1, 2, 9, 7, 1, 3, 3, 1, 1,
	3, 1, 3, 2, 1, 2, 1, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 4, 4, 2, 4,
	3, 3, 1, 1, 1, 1, 1, 1, 2, 3,
	4, 7, 2, 3, 3, 4, 5, 3, 4, 4,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 2, 1, 1, 1, 1,
	6, 1, 1, 1, 1, 1, 1, 1, 1, 10,
	7, 4, 4, 1, 3, 1, 6, 3, 3, 3,
	1, 1, 1, 3, 2, 4, 5, 5, 6, 5,
	5, 3, 2, 2, 1, 3, 4, 3, 7, 5,
	8, 2, 2, 1, 3, 2, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 0, 1, 2, 1, 3,
	2, 1, 2, 2, 1, 2, 3, 2, 2, 3,
	6, 3, 3, 1, 1, 7, 7, 8, 8, 0,
	4, 7, 0, 3, 0, 2, 0, 1, 1, 1,
	1, 4, 2, 2, 3, 3, 4, 5, 3, 4,
	4, 2, 2, 2, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 3,
	3, 2, 5, 5, 0, 2, 7, 0, 1, 0,
	1, 5, 5, 3, 3, 2, 4, 4, 4, 4,
	4, 1, 1, 1, 3, 3, 1, 1, 1, 6,
	0, 1, 1, 1, 1, 5, 5, 0, 1, 1,
	3, 3, 3, 4, 6, 7, 4, 4, 7, 8,
	3, 3, 3, 4, 0, 2, 2, 0, 2, 2,
	1, 1, 1, 1, 0, 1, 4, 4, 5, 4,
	3, 1, 3, 1, 1, 3, 5, 2, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 4, 4, 1, 3,
	1, 4, 6, 6, 4, 4, 4, 4, 4, 3,
	6, 3, 5, 1, 1, 2, 2, 11, 8, 9,
	1, 3, 2, 4, 0, 2, 0, 1, 1, 1,
	1, 0, 1, 0, 1, 4, 2, 1, 5, 4,
	4, 2, 5, 1, 3, 2, 1, 5, 4, 4,
	2, 0, 5, 4, 0, 1, 3, 3, 1, 3,
	1, 3, 1, 3, 4, 0, 1, 0, 1, 1,
	3, 1, 1, 0, 4, 1, 3, 2, 1, 0,
	8, 0, 4, 7, 4, 0, 2, 0, 2, 0,
	2, 0, 4, 1, 3, 1, 1, 6, 4, 5,
	7, 4, 5, 0, 1, 3, 8, 0, 6, 0,
	4, 6, 1, 1, 1, 1, 1, 2, 3, 1,
	3, 6, 0, 3, 0, 1, 2, 4, 4, 0,
	1, 3, 1, 3, 3, 0, 1, 1, 0, 2,
	2, 0, 2, 3, 3, 3, 1, 3, 3, 3,
	3, 1, 2, 2, 1, 2, 2, 1, 2, 2,
	1, 2, 2, 7, 7, 1, 1, 1, 0, 1,
	1, 1, 1, 0, 2, 0, 3, 0, 2, 1,
	3, 1, 2, 3, 5, 0, 1, 2, 1, 3,
	1, 1, 1, 4, 4, 4, 3, 2, 2, 2,
	3, 2, 3, 4, 1, 3, 4, 0, 2, 1,
	1, 2, 2, 0, 1, 2, 4, 1, 3, 1,
	3, 2, 3, 1, 4, 3, 0, 1, 1, 2,
	5, 2, 2, 2, 0, 2, 3, 3, 0, 1,
	3, 1, 3, 0, 1, 2, 1, 1, 0, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 7, 1, 1, 7, 1, 3,
	0, 1, 1, 3, 1, 3, 0, 1, 1, 1,
	14, 1, 3, 0, 1, 1, 3, 1, 1, 2,
	4, 1, 1, 1, 1, 0, 1, 2, 9, 9,
	7, 1, 2, 3, 3, 3, 0, 4, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 4, 1, 1,
	3, 4, 3, 0, 1, 1, 1, 0, 2, 7,
	8, 8, 0, 3, 3, 0, 3, 0, 3, 0,
	5, 1, 3, 0, 3, 3, 0, 2, 9, 6,
	0, 2, 2, 3, 3, 4, 4, 4, 1, 0,
	2, 2, 1, 3, 2, 1, 3, 2, 1, 3,
	2, 0, 1, 3, 4, 3, 1, 1, 4, 1,
	3, 1, 1, 1, 1, 0, 1, 1, 1, 11,
	0, 2, 3, 3, 2, 2, 3, 1, 1, 1,
	3, 3, 4, 0, 2, 2, 2, 2, 2, 2,
	6, 0, 4, 1, 1, 0, 3, 0, 1, 1,
	2, 4, 4, 4, 0, 1, 8, 2, 4, 4,
	4, 9, 0, 2, 11, 9, 11, 8, 2, 2,
	9, 4, 5, 3, 0, 4, 1, 3, 0, 3,
	5, 10, 0, 2, 0, 2, 0, 3, 2, 4,
	3, 0, 2, 1, 0, 2, 3, 0, 2, 3,
	0, 2, 1, 0, 3, 2, 4, 3, 0, 1,
	0, 1, 1, 0, 6, 0, 3, 5, 0, 4,
	0, 3, 1, 3, 4, 5, 0, 3, 1, 3,
	2, 3, 1, 2, 0, 4, 6, 5, 0, 2,
	0, 2, 4, 5, 4, 5, 1, 5, 6, 5,
	0, 3, 0, 1, 1, 3, 3, 3, 0, 4,
	1, 3, 3, 3, 0, 1, 1, 3, 2, 3,
	3, 3, 4, 4, 3, 3, 3, 3, 4, 4,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 1, 5, 4, 1, 3, 3, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 3, 0, 1, 1, 3, 1, 1, 1,
	1, 1, 7, 9, 7, 9, 2, 1, 7, 9,
	7, 9, 8, 5, 0, 1, 0, 1, 1, 1,
	1, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 3, 1, 3, 5, 1,
	1, 1, 1, 1, 3, 5, 0, 1, 1, 2,
	1, 2, 2, 1, 1, 2, 2, 2, 3, 3,
	2, 2, 1, 5, 6, 4, 1, 1, 1, 5,
	4, 1, 1, 2, 0, 1, 1, 2, 5, 0,
	1, 1, 2, 2, 3, 3, 1, 1, 2, 2,
	2, 0, 1, 2, 2, 2, 0, 3, 0, 3,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 1,
	1, 1, 1, 3, 5, 2, 2, 2, 2, 1,
	1, 2, 5, 6, 8, 6, 6, 6, 1, 1,
	1, 1, 1, 1, 4, 4, 4, 7, 9, 7,
	7, 7, 9, 7, 7, 0, 2, 0, 1, 1,
	2, 4, 1, 2, 2, 1, 2, 2, 1, 2,
	2, 2, 2, 2, 0, 1, 1, 1, 2, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 2, 5,
	0, 1, 3, 0, 1, 0, 2, 0, 2, 0,
	1, 6, 8, 8, 6, 6, 5, 5, 5, 6,
	6, 6, 6, 5, 6, 6, 6, 6, 6, 6,
	6, 6, 1, 1, 1, 4, 4, 6, 8, 6,
	4, 5, 4, 4, 4, 3, 4, 6, 6, 7,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 8, 4,
	2, 3, 2, 4, 2, 2, 4, 6, 2, 2,
	4, 6, 4, 2, 0, 1, 2, 3, 1, 1,
	1, 1, 1, 1, 0, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	0, 1, 1, 3, 0, 1, 1, 3, 1, 3,
	3, 3, 3, 3, 2, 1, 1, 1, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 4, 1, 3,
	4, 4, 5, 4, 5, 3, 4, 5, 6, 1,
	0, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 1,
	1, 1, 2, 3, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 2,
	2, 2, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 4, 4,
	1, 2, 3, 5, 1, 1, 3, 0, 1, 0,
	3, 0, 3, 3, 0, 3, 5, 0, 3, 5,
	0, 1, 1, 0, 1, 1, 2, 2, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -563, -566, -2, -5, 613, -1, -4, -111, -85,
	-7, -113, -114, -8, -109, -9, -10, -12, -89, -104,
	-106, -108, -107, -46, -11, -103, -80, -81, -91, -97,
	-100, -101, -102, -115, -110, -112, -157, -116, -117, 603,
	-86, -87, -88, -32, -31, -30, -29, -138, -143, -146,
	609, 447, 14, 496, -14, -15, -510, -16, 259, -317,
	-318, -319, -321, -567, -47, -48, -49, -58, -59, -60,
	-61, -62, -72, -73, -74, -50, -51, -52, -55, -53,
	-65, -64, -66, -67, -68, -69, -70, -71, -54, -141,
	-142, -75, -56, -76, -57, -78, -77, -83, -79, -84,
	-140, -145, -13, 234, -82, 76, -92, -93, -94, -95,
	-96, -98, -99, 371, 377, 434, 602, 61, -158, -160,
	619, 620, 159, 160, 162, 163, -33, -34, -35, -36,
	-37, -38, -40, -39, -41, -42, -43, -44, -45, 230,
	16, 539, -17, -20, -18, -21, -19, -27, -28, -26,
	-23, -25, -139, -24, -144, -22, -147, 254, 253, 38,
	320, 321, 322, 375, 252, 231, 15, 31, 42, 351,
	-159, 82, 531, 532, 534, 232, -161, 13, 624, -6,
	-3, -2, -125, -129, -133, -136, -137, -134, -135, -4,
	-111, 117, 244, 604, -314, 367, 605, 607, 606, 85,
	93, -307, -309, 447, 259, 371, 377, 602, 620, 544,
	545, 546, 547, 548, 549, 550, 551, 553, 554, 555,
	556, 557, 558, 559, 569, 570, 560, 561, 562, 563,
	564, 565, 566, 567, 571, 572, 573, 574, 575, 576,
	577, 578, 579, 580, 581, 582, 583, 584, 499, 589,
	590, 591, 592, 527, 552, 588, 349, 350, 536, 271,
	295, 402, 301, 308, 159, 178, 172, 200, 192, 532,
	167, 275, 313, 276, 92, 162, 482, 107, 459, 431,
	165, 290, 292, 294, 528, 529, 361, 297, 526, 296,
	298, 300, 530, 277, 352, 188, 183, 289, 273, 181,
	278, 40, 279, 205, 280, 281, 541, 455, 348, 461,
	305, 52, 429, 182, 456, 293, 458, 209, 213, 473,
	474, 176, 177, 463, 476, 204, 207, 208, 251, 345,
	346, 43, 538, 263, 477, 211, 203, 199, 485, 309,
	307, 202, 175, 198, 274, 65, 215, 214, 216, 425,
	426, 427, 428, 282, 283, 365, 472, 195, 184, 353,
	168, 23, 480, 258, 460, 378, 284, 302, 310, 210,
	212, 265, 270, 540, 531, 433, 269, 306, 478, 180,
	262, 291, 257, 481, 169, 534, 380, 285, 163, 299,
	475, 484, 64, 393, 174, 166, 248, 160, 267, 272,
	286, 287, 288, 525, 312, 311, 303, 533, 196, 264,
	201, 186, 173, 197, 161, 266, 483, 394, 600, 351,
	412, 194, 191, 268, 241, 479, 462, 164, 416, 395,
	189, 314, 596, 597, 598, 366, 344, 315, 316, 187,
	255, 453, 454, 319, 422, 335, 396, 432, 403, 397,
	222, 223, 323, 465, 467, 206, 599, 324, 325, 326,
	457, 327, 328, 329, 330, 370, 56, 58, 94, 97,
	96, 621, 622, 63, 29, 356, 359, 391, 398, 337,
	601, 537, 334, 338, 339, 360, 25, 414, 382, 418,
	417, 48, 49, 50, 53, 54, 55, 57, 59, 60,
	51, 524, 375, 388, 486, 45, 47, 385, 27, 362,
	413, 435, 333, 415, 446, 46, 444, 445, 466, 26,
	364, 363, 62, 44, 421, 423, 424, 317, 331, 373,
	610, 487, 368, 384, 387, 369, 336, 358, 389, 67,
	66, 381, 611, 376, 374, 332, 542, 543, 340, 568,
	354, 430, 521, 520, 519, 518, 517, 516, 515, 514,
	320, 321, 322, 399, 400, 401, 411, 404, 405, 406,
	407, 408, 409, 410, 449, 450, 612, 468, 470, 471,
	469, 236, 623, 355, 239, 614, 615, 95, 616, 618,
	617, 28, -394, -392, -314, 532, 602, 377, 531, 534,
	371, 351, 620, 375, 259, 320, 321, 322, 447, -201,
	-314, 623, -167, 39, -214, -314, -167, -82, -15, -14,
	-159, -160, -214, 238, -322, 24, 429, -90, 430, 234,
	82, 77, -314, -9, -102, -8, -109, -80, -157, 434,
	-320, -314, 320, 320, -320, 238, -314, 269, 410, -446,
	244, -398, -371, 270, -397, -373, -400, -374, 32, 230,
	232, 231, 266, 16, 375, 240, 14, 13, 376, 252,
	25, 26, 28, 15, 377, 379, 29, 380, 383, 384,
	385, 42, 388, 389, 259, 85, 93, 88, 277, -200,
	-314, -348, -340, 114, -343, -335, -336, -338, -489, -483,
	-333, 82, 141, 142, 149, 115, -337, -428, 36, 117,
	548, 552, 588, 497, -289, -290, -291, -292, -293, -294,
	-314, -484, -482, 88, 98, 100, 104, 105, 103, 101,
	153, 185, 102, 89, 154, -160, 85, -505, 558, -308,
	581, 589, 590, 591, 592, 580, 61, -453, -462, 237,
	-460, 152, 190, 255, 186, 14, 147, 422, 187, 555,
	577, 499, 559, 569, 584, 550, 551, 553, 545, 546,
	547, 549, 560, 562, 576, -463, 572, 582, 583, 568,
	585, 586, 587, 618, 87, 86, 575, 574, 561, 556,
	557, 563, 544, 554, 564, 565, 573, 578, 579, 359,
	107, 360, 361, 489, 352, 362, 244, 429, 70, 363,
	364, 365, 366, 367, 496, 368, 71, 369, 358, 259,
	412, 370, 189, 206, 501, 500, 502, 493, 490, 488,
	491, 492, 494, 495, 566, 567, 571, -118, -119, 594,
	-557, -282, -558, 6, 7, 8, 9, -559, 154, -548,
	431, 540, 88, 164, 161, -385, 164, 113, 169, 168,
	-385, 166, 323, 265, -362, -150, 349, 412, 327, 94,
	269, -365, -363, 528, -448, 317, 313, 289, 239, 110,
	-151, 249, 248, 108, 489, 237, 386, 308, 56, 58,
	-521, -522, 227, 228, 229, -512, 522, -511, -314, 361,
	96, 97, 27, 238, 372, 265, 467, 465, 466, 468,
	469, 470, 471, -63, -464, -445, 462, 461, -326, 454,
	460, 452, 464, 455, 350, 329, 328, 230, 614, 529,
	523, -304, 396, 432, 486, 487, 373, 433, 473, 475,
	456, 107, 193, 190, 239, 241, 238, 349, 489, 412,
	94, 327, -521, 161, 473, 475, 269, 410, 41, -391,
	422, -390, -392, 474, 485, 86, 87, 472, -304, 107,
	453, 453, -557, -282, -158, -160, -112, -510, 530, 530,
	530, 239, 349, 412, 269, 240, 238, 525, 528, 241,
	489, 237, 320, 372, 265, 327, 94, 166, -447, -518,
	32, -454, 224, 225, 226, 33, 34, -1, 121, 624,
	-340, -340, -6, 627, -6, -340, -314, -314, 156, -220,
	-224, -221, -223, -222, -226, -225, 190, 191, 152, 194,
	196, 197, 198, 199, 200, 201, 202, 203, 204, 207,
	208, 205, 31, 206, 255, 186, 187, 188, 189, 209,
	172, 192, 537, 217, 173, 218, 174, 219, 175, 220,
	176, 177, 221, 178, 181, 182, 183, 184, 180, 155,
	82, 155, 88, -183, 261, -214, 155, -183, -557, -176,
	-177, 11, -214, -295, -314, 431, 124, -90, 77, -90,
	430, 77, -513, -514, -515, -517, 234, 430, 429, -107,
	155, 277, 17, -320, -320, 80, -214, -373, 269, -398,
	-371, 36, 79, 156, 242, 156, 79, 82, 373, 349,
	412, 374, 489, 238, 386, 241, 269, 387, 349, 412,
	238, 241, 489, 269, 349, 238, 241, 412, 269, 387,
	452, 453, 241, 27, 378, 381, 382, 453, -468, 485,
	156, 113, 110, 111, 112, -340, 131, -355, 124, 125,
	126, 127, 128, 129, 130, 138, 137, 148, 141, 142,
	143, 144, 145, 146, 147, 139, 140, 134, 114, 132,
	136, 133, 116, -160, -340, -348, 61, -338, -338, -338,
	-338, -428, -345, -340, 82, 82, 82, 82, 155, 101,
	88, -340, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, -461, 82, 82, -352, -353, 82,
	82, -333, -295, 82, 88, 88, 82, 82, 82, 88,
	-353, -353, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, -177, 156, -176, 82, -176,
	-177, -161, -160, 32, 33, 32, 33, 32, 33, 32,
	33, -560, 611, 82, 98, 621, 222, 478, 539, 167,
	168, 169, -360, 244, -199, -314, -201, 372, 241, 525,
	241, -151, -360, -360, -360, -360, -360, 240, -360, 24,
	238, 238, 238, 238, -360, 496, 124, 124, 59, -523,
	171, 156, -512, -182, 82, -325, 132, 136, -325, -278,
	18, 24, 267, 267, 267, -325, 307, -568, -569, 17,
	134, -323, -569, -323, -323, -325, -570, 240, 463, 43,
	268, 267, -178, -179, 22, -178, 457, 453, -415, 458,
	459, -327, -569, -326, -325, -325, -326, -325, -325, -325,
	32, 238, 241, 489, 327, 615, -568, -568, 31, 31,
	-446, -446, -214, -446, 523, -305, -314, -446, -446, -446,
	-524, 243, -554, -553, 476, -556, 478, 161, -392, 161,
	-392, -373, 269, 269, 156, 124, 24, -393, 124, 135,
	-392, -392, -393, -393, -237, 41, -313, 152, -314, 88,
	-237, 41, -551, -550, -214, -177, -161, -160, 83, 83,
	83, 533, 533, 533, -446, -446, -446, -446, -446, -448,
	-446, -446, -446, -446, -446, -320, -191, -314, -201, 244,
	-446, -446, -446, -162, -163, 143, -340, -314, -162, -3,
	-127, -126, 118, 119, 121, 605, 367, 604, 608, 602,
	-392, 41, -441, 394, 393, -435, -437, 82, -436, 82,
	-436, -436, -436, -436, -436, 82, 82, -438, 82, -438,
	-438, -435, -439, 82, -439, -440, 82, -440, -439, -314,
	-346, -348, -314, 39, -457, 61, -157, 82, 31, 82,
	-314, -458, 61, -157, 82, 31, -177, -120, 39, -179,
	21, 155, 98, 88, -107, -90, 77, -107, 83, 156,
	-516, 104, 105, -519, 204, 196, -314, -105, 88, -7,
	-8, -9, -10, -46, -80, -157, -485, -483, 82, 32,
	421, 79, 17, -399, 238, 489, 372, 265, 241, 349,
	-397, -380, -377, -375, -313, -373, -376, -375, -402, -295,
	453, -121, 436, 435, 319, -340, -340, -340, -340, -340,
	103, 114, 344, 104, 105, -335, -356, 32, 315, 316,
	-336, -336, -336, -336, -336, -336, -336, -336, -336, -336,
	-336, -336, -344, -354, -428, 82, 134, 132, 136, 133,
	116, -338, -338, -336, -336, 83, 156, -509, -508, 118,
	-340, -340, -340, -340, -314, -506, -507, 503, 504, 505,
	506, 507, 508, 509, 510, 511, 512, 513, 363, 358,
	364, 362, 352, 370, 365, 366, 189, 520, 521, 514,
	515, 516, 517, 518, 519, -346, -346, -340, -506, -346,
	-288, 33, 32, -348, -348, -348, 83, -340, -520, 342,
	341, 343, -180, -314, -346, 83, 83, 83, 98, -348,
	-348, -346, -336, -346, -507, -288, -288, -288, -288, 143,
	-348, -348, -288, -288, -288, -288, 143, -288, -288, -288,
	-288, -288, -288, -288, -288, 83, 83, 83, 143, -348,
	-178, -119, -466, -465, -340, 41, -120, -179, -561, 612,
	82, -295, -549, 88, 88, 625, 479, 480, 165, 168,
	167, -314, 114, 35, 82, -191, -360, -360, -360, -526,
	-314, -381, -378, -375, -314, -314, -371, -314, -314, -214,
	-360, -360, -360, -360, -214, -248, 53, 54, 55, -375,
	-152, 56, 57, -524, -511, 35, -181, -314, -278, -338,
	-338, -340, -375, 269, -568, -325, -325, -306, -305, -327,
	-322, -327, -327, -278, -323, -325, -325, -340, -327, -323,
	-278, -314, 453, -278, -278, -415, -325, -324, -314, -324,
	-360, -305, -306, -306, -214, -214, -259, -264, -260, -265,
	261, 235, 356, 357, 233, 231, 11, 232, -272, 308,
	-361, 497, -243, -244, 77, 42, -246, 259, 398, 391,
	271, 275, 92, 276, 431, 277, 240, 279, 280, 281,
	296, 298, 251, 282, 283, 284, 422, 285, 160, 297,
	286, 287, 288, 374, -238, 6, 330, 41, 51, 52,
	445, 444, 542, 539, 272, -526, -526, 31, 31, -381,
	-314, -314, -170, -165, -169, -166, -171, -281, -283, -168,
	82, -214, -160, -314, 156, 477, 479, 480, -554, -393,
	-554, -393, 32, 421, -396, 421, 32, -371, -390, 473,
	475, -386, 88, 422, -376, -395, 79, 152, -465, -393,
	-393, -395, -395, 151, 156, -552, 478, 479, 227, -178,
	98, 98, 98, -216, -214, -526, -380, -371, -314, -446,
	-216, -216, -216, -314, -314, 82, 155, 36, -314, -314,
	-314, -277, 156, -276, 17, -315, -314, 35, 88, 155,
	-277, -128, -126, 120, -340, -6, 604, -340, -6, -6,
	-340, -6, -340, -444, 395, 98, 98, -297, 88, -297,
	98, 98, 98, 83, 88, -384, 79, -459, -349, -504,
	594, -185, 83, -180, -502, -503, -180, -184, -314, -459,
	-185, 83, -502, -178, 595, -120, -175, -174, -340, -314,
	24, -107, -90, -514, 155, 156, -181, -399, -379, -376,
	-401, 143, -314, -387, 156, 539, 628, 86, 242, -540,
	-539, 413, 83, 156, -469, 243, 496, 88, 625, 429,
	222, 223, 103, 344, 104, 105, -428, -348, -344, -338,
	-338, -336, -336, -342, 256, -342, 113, -340, -339, -508,
	120, -340, 35, 156, 35, 156, 80, 155, 83, 83,
	17, 17, 83, -340, 83, 83, 83, 83, 17, 17,
	-340, 83, 155, 83, 83, 83, 83, 80, 83, 156,
	83, 156, -348, -348, -340, -348, 83, 83, 83, -340,
	-340, -340, -348, 83, -340, -340, -340, -340, -340, -340,
	-340, -340, -409, 448, -409, -409, 156, 156, 156, 83,
	-120, 82, 98, 156, 622, -301, -300, 88, 166, 169,
	169, 168, 24, 36, -200, -202, -203, -204, -205, -206,
	134, 157, 158, 82, -214, -214, -214, -529, 399, -541,
	156, 41, -539, 489, -148, 319, -364, 80, -155, 17,
	539, -214, -214, -214, -214, -227, 35, 17, -164, -215,
	-314, 82, 83, 156, -372, 80, -314, -306, -278, -278,
	-327, -278, -278, 156, 23, -325, -327, -327, -323, 155,
	-305, -434, 35, -182, 156, 21, 261, -213, -311, -210,
	-212, 246, -330, -211, 249, -498, 247, 245, 108, 250,
	304, 109, 240, -311, -311, 246, -247, 242, 35, -311,
	-262, 240, 347, 304, 247, 21, 261, -261, 240, 109,
	-314, 246, 250, 247, 245, -310, 124, -304, 151, 242,
	43, 374, -310, 543, 261, -310, -310, -310, -310, -310,
	-310, -310, 278, 278, -310, -310, -310, -310, -310, -310,
	-310, -310, -310, -310, -310, 161, -310, -310, -310, -310,
	-310, -310, 82, 273, 274, -530, 399, 31, 355, 355,
	-541, 31, -156, 349, 31, -284, -285, -286, -287, 68,
	72, 74, 69, 70, 71, 75, 31, 156, -312, -316,
	35, -314, 88, -312, -160, -165, -170, -312, 82, -553,
	-555, 481, 478, 484, -395, -395, 242, 82, 124, -395,
	-395, 41, -313, -550, 485, 479, -120, 156, 79, -216,
	-192, -193, -194, -195, -220, -295, 191, 194, 196, 197,
	198, 199, 200, 201, 202, 203, 204, 207, 208, 205,
	206, 255, 186, 187, 188, 189, 209, 172, 192, 537,
	173, 174, 175, 176, 177, 178, 181, 182, 183, 184,
	180, -314, -201, -278, -163, -165, -314, 88, -314, 143,
	-278, 121, -6, 119, -132, -131, -130, 122, 602, 608,
	121, 121, 121, 83, 83, 83, 156, 83, 83, 83,
	156, 83, 156, -472, 458, 40, 156, 82, 83, 156,
	61, 156, 124, 83, 156, 83, 61, -120, 88, 156,
	-172, 37, 38, 155, 431, -314, -483, 83, -401, 156,
	242, 155, 155, -377, 377, -313, -379, 21, 539, -295,
	39, -301, 124, 625, -314, 83, -342, -342, 113, -338,
	-335, 83, 121, -340, 119, -218, -220, 393, 394, -340,
	-218, -219, -225, 152, 190, 255, 189, 188, 186, 393,
	394, -237, -314, -340, -340, 83, -340, -340, 17, -314,
	-237, -336, -340, -177, -177, 83, 83, -408, -409, -408,
	-408, 83, 83, 83, 83, -408, 83, 83, 83, 83,
	83, 83, 83, 83, 82, 98, 100, 98, 100, -465,
	-562, 63, 610, 62, 421, 103, 309, 156, 98, 88,
	626, 156, 124, 169, -542, 313, 349, 385, 83, 156,
	-295, -192, -182, 82, -182, -532, 460, 401, 411, -310,
	-332, -331, 351, 42, -451, 422, 407, 408, -378, 269,
	-314, -538, 95, 124, 79, 334, 338, 339, 335, 336,
	337, -358, -359, -357, -361, -526, 82, 82, 82, 82,
	35, -429, 324, -220, -214, -164, -314, 17, 156, -525,
	155, -1, -314, -371, -325, -278, -340, -340, -278, -325,
	-325, -327, -314, -429, -220, 35, -260, 235, 232, -405,
	306, 307, -406, -419, 309, -421, 82, -217, -295, -211,
	-497, -498, -360, -314, 109, -497, 109, 82, -217, -295,
	-295, -263, -324, -295, -314, -314, -314, -314, -268, -267,
	-295, -270, 32, -271, -314, -314, -314, -314, 109, -314,
	109, -242, 41, 48, 49, 50, -310, -310, 193, -245,
	41, 421, 423, 424, -270, 98, 98, 98, 98, 88,
	88, 88, -310, -310, 98, 88, -316, 88, -499, 168,
	45, 46, 98, 98, 98, 98, 41, 88, -249, 41,
	289, 293, 290, 291, 292, 88, 98, 41, 98, 41,
	98, 41, -314, 82, -500, -501, 88, -532, -310, 355,
	-392, 124, -332, -537, 319, -149, 92, 32, -186, 235,
	232, -526, -383, -382, -295, -169, -169, -169, -169, 68,
	68, 68, 73, 68, 73, 68, -286, -383, -171, -182,
	-316, 83, -547, -546, -545, -543, 76, 243, 77, -346,
	478, 482, 483, -379, -328, 88, -386, -190, 24, -214,
	-214, -450, 299, 300, 83, 156, -220, -280, 19, 155,
	-280, 117, -6, -128, -130, -340, -6, -340, 604, 367,
	605, 88, 98, 98, -480, 442, 437, 439, 109, -349,
	-467, -466, 61, -157, -180, -459, -503, -465, -314, 61,
	-157, -459, -190, -472, -174, -173, 44, -314, 98, 17,
	-376, -371, 143, 143, -314, 378, -387, 88, 400, 88,
	238, 626, 88, -301, -335, -340, 83, -228, 177, 176,
	-228, 35, 83, 83, -436, -436, -435, -438, -435, -228,
	-228, 83, 83, 24, 83, 83, 83, -340, 83, 83,
	156, -455, 498, -456, 570, -408, -408, -408, -408, -408,
	-408, -408, -408, -408, -408, -408, -408, -408, -408, -351,
	-350, 261, 443, 617, 617, 443, 617, 617, 83, 156,
	-506, 156, -300, 88, -314, 88, 88, -204, -220, 83,
	35, -207, -208, -209, -217, -210, -212, 35, -533, 92,
	-527, 88, -314, -534, 92, 402, 154, 353, 41, 403,
	404, 419, 348, 98, 98, 409, -528, -314, -156, -536,
	52, 124, 88, -214, -357, -304, 151, 280, 327, -275,
	-274, -314, 88, -207, -207, -207, -157, -430, 326, 21,
	98, 142, -183, 80, 155, -165, -215, -314, 143, 83,
	-278, -278, -278, -325, -430, -157, -417, 310, 82, -415,
	82, -415, 109, 335, -422, -420, 261, -266, 45, 47,
	-220, -495, -314, -493, -495, -314, -493, -493, -360, -340,
	-266, -217, 242, 31, 232, -269, 332, 333, 338, -388,
	305, 114, -388, 156, -172, 156, -314, -237, -237, 31,
	88, 88, -216, 83, 156, 124, -533, -527, 124, -393,
	88, -534, -538, 124, 88, 156, -186, -186, -278, 156,
	124, -188, -187, 79, 80, -189, 79, -187, 68, 68,
	-278, -545, -544, 24, -498, -498, -498, 83, 83, 15,
	-194, 41, -279, 20, 21, 143, -279, 121, 119, 121,
	121, -314, 83, 83, -442, 596, -476, -478, 437, 21,
	21, 15, 243, 83, -459, -459, -480, 45, 46, -371,
	-387, 422, -214, 156, 626, -218, -340, 83, -340, 83,
	88, 83, 88, -177, 21, 83, 156, 83, 83, 83,
	156, 83, 83, -340, 83, -506, 236, -157, 83, 156,
	-157, 88, -531, 413, 88, 88, 98, 41, 98, 154,
	405, -452, -149, -535, 92, 124, 625, 82, -310, -310,
	-310, -314, 83, 156, -310, -310, 83, 83, 83, -235,
	539, -431, 260, 98, 142, 98, 142, 98, -312, -165,
	-314, -278, -525, 155, -278, -431, -407, 311, 98, -336,
	82, -336, 82, -416, 308, 82, 83, 156, -314, -295,
	-232, -231, -229, 103, 114, 41, 391, -230, 92, 151,
	294, 297, 296, 272, 295, -258, -329, 79, 397, 332,
	333, -361, 596, 527, 245, 108, 109, 379, -330, 82,
	82, 80, 314, 82, 82, -495, 83, -266, -295, 41,
	-269, 41, 345, 305, -267, -314, 151, -237, 83, -501,
	88, -531, 88, -395, -536, 88, -526, -177, -382, -465,
	-340, 82, -340, 82, 68, 11, 19, -333, -340, -348,
	244, -6, 605, 367, -251, 597, 88, 21, 88, -474,
	88, -383, -442, -123, -470, -415, 277, 83, 83, 83,
	-408, -408, -411, -410, -414, 443, 306, 451, -348, 88,
	88, 83, 83, -196, -220, -153, 539, -235, -209, -153,
	21, 539, 352, 41, 98, 41, 406, 124, 104, 105,
	-302, -303, 88, -366, -368, -295, 82, -237, -239, -313,
	152, 88, -274, -333, -333, -233, -234, -272, -361, -122,
	-121, -233, 82, -432, 160, 98, 142, 98, 98, -278,
	-278, -432, -421, 21, 83, -402, 83, -402, 82, 124,
	-336, -420, -423, 61, -229, 103, -336, 88, -239, -240,
	41, 293, 289, 124, 124, -241, 41, 273, 274, -250,
	82, 304, 15, 193, 82, 109, 109, -214, -366, -366,
	-496, 334, 335, 336, 340, 338, 339, 337, -496, -366,
	-366, 82, -389, -388, -336, -310, -310, 151, -535, -178,
	-181, -494, -314, 245, 21, 21, -314, -314, -298, 598,
	98, 88, 439, -251, -443, 599, -479, 442, -473, -471,
	437, 438, 439, 440, 124, 83, -413, 116, 405, 409,
	-334, -337, 98, 100, 185, 154, 83, 83, 538, -154,
	60, 485, 88, 400, 88, 352, 88, 626, 156, 124,
	83, 156, -435, -340, -403, 261, 156, -272, -304, -123,
	-403, -236, -273, -314, 88, -449, 168, 325, 539, 98,
	142, 98, -177, -433, 168, 325, -406, 83, 83, 83,
	-402, 98, 83, -427, -424, 82, -272, 263, 134, 88,
	88, 98, 82, -460, 31, 88, -367, 82, 83, 83,
	83, 83, -366, 98, -237, -310, 83, 83, 156, 82,
	21, -298, 88, -481, 243, -477, -478, 441, -471, 21,
	439, 21, 21, 88, -412, -413, 409, -334, -337, 594,
	449, 449, 449, -198, -314, 304, 422, -303, 88, -369,
	-368, -172, 83, -404, 313, 21, -272, -310, -404, 83,
	156, -310, -310, 325, 98, 142, 98, -178, 325, -418,
	312, 83, -427, -272, -426, -425, 311, 264, 82, 83,
	-340, -352, -310, 83, -253, -252, 535, -366, -369, 80,
	-369, 80, -369, 80, -369, 80, 83, -237, -314, 245,
	-299, -314, -474, -488, 82, 98, -476, -475, -477, 21,
	-474, 21, -474, -474, -124, 156, 113, 450, 450, 450,
	-197, 35, 444, 378, -370, 251, 345, 346, 92, 539,
	332, 333, -172, 21, -405, -237, -273, -333, -333, 98,
	98, 83, 156, -314, 260, 82, -347, -341, -340, 260,
	83, -314, -257, -255, -256, 79, 456, 302, 303, 83,
	-496, -496, -496, -496, -258, 83, 156, -492, 31, 83,
	-487, -486, -296, -482, -314, 442, 443, 88, -474, 446,
	-412, 88, -310, -310, 88, 88, 331, -295, 82, -417,
	-425, -424, -347, 83, 156, -388, -256, 79, -255, 79,
	16, 15, -369, -369, -369, -369, -314, -491, -490, -489,
	83, 156, 155, 124, -565, -564, 616, 98, 98, -314,
	-402, -407, 83, -341, -254, 299, 300, 31, 168, -254,
	156, 124, -486, -314, 88, 88, 83, -421, 103, 41,
	301, -490, 41, -340, 155, -314,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 0,
	266, 267, 268, 864, 865, 866, 867, 868, 869, 870,
	0, 0, 0, 0, 623, 624, 0, 589, 0, 0,
	0, 0, 0, 0, 477, 478, 479, 480, 481, 482,
	483, 484, 485, 486, 487, 488, 489, 490, 491, 492,
	493, 494, 495, 496, 497, 498, 499, 500, 501, 502,
	503, 504, 505, 506, 507, 361, 362, 363, 364, 365,
	366, 367, 368, 0, 291, 287, 212, 213, 214, 215,
	216, 298, 299, 454, 0, 0, 0, 0, 705, -2,
	59, 0, 280, 0, 271, 271, 871, 872, 873, 874,
	875, 876, 877, 878, 879, 880, 881, 882, 883, -2,
	636, 0, 590, 591, 592, 593, 594, 595, 596, 597,
	598, 599, 600, 601, 602, 603, 604, 350, 351, 352,
	346, 347, 349, 348, -2, 0, 636, 0, 0, 0,
	713, 0, 0, 0, 0, 0, 756, 778, 23, 0,
	7, 9, 10, 11, 12, 13, 14, 15, 16, 17,
	18, 0, 0, 19, 0, 19, 0, 0, 0, 1259,
	1260, 1261, 1262, 2033, 2003, -2, 1776, 1753, 1928, 2062,
	2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072,
	2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082,
	2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091, 2092,
	2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100, 2101, 2102,
	2103, 2104, 2105, 2106, 2107, 2108, 1710, 1711, 1712, 1713,
	1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723,
	1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733,
	1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743,
	1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1754,
	1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764,
	1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774,
	1775, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785,
	1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795,
	1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805,
	1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815,
	1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825,
	1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835,
	1836, 1837, 1838, 1839, 1840, 1841, 1843, 1844, 1845, 1846,
	1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856,
	1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866,
	1867, 1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876,
	1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886,
	1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896,
	1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906,
	1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916,
	1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926,
	1927, 1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937,
	1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947,
	1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957,
	1958, 1959, -2, 1961, 1962, 1963, 1964, 1965, 1966, 1967,
	1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977,
	1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987,
	1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997,
	1998, 1999, 2000, 2001, 2002, 2004, 2005, 2006, 2007, 2008,
	2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018,
	-2, -2, -2, 2022, 2023, 2024, 2025, 2026, 2027, 2028,
	2029, 2030, 2031, 2032, 2034, 2035, 2036, 2037, 2038, 2039,
	2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049,
	2050, 2051, 0, 264, 262, 1723, 1753, 1776, 1830, 1841,
	1842, 1876, 1928, 1960, 2003, 2019, 2020, 2021, 2033, 0,
	888, 0, 683, 0, 688, 1211, 683, 292, 625, 626,
	713, 739, 587, 0, 328, 0, 1767, 332, 2010, 0,
	0, 0, 584, 322, 323, 324, 325, 326, 327, 0,
	0, 863, 0, 0, 318, 0, 286, 1832, 2032, 0,
	0, 0, 0, 0, 156, 999, 158, 1001, 162, 169,
	0, 0, 174, 175, 178, 179, 180, 181, 182, 0,
	186, 0, 188, 191, 0, 193, 194, 0, 197, 198,
	199, 0, 209, 210, 211, 1002, 1003, 1004, -2, 87,
	886, 1681, 1568, 0, 1575, 1588, 1599, 1339, 1340, 1341,
	1342, 0, 0, 0, 0, 0, 1349, 1350, 0, 1377,
	2066, 2107, 2108, 0, 1358, 1359, 1360, 1361, 1362, 1363,
	96, 108, 109, 1621, 1622, 1623, 1624, 1625, 1626, 1627,
	0, 1629, 1630, 1631, 1539, 1326, 1259, 0, 2075, 0,
	2097, 2102, 2103, 2104, 2105, 2096, 0, 0, 1524, 0,
	1514, 0, 0, -2, -2, 0, 0, 1901, -2, 2072,
	2093, 2101, 2076, 2077, 2100, 2068, 2069, 2070, 2063, 2064,
	2065, 2067, 2079, 2081, 2092, 0, 2088, 2098, 2099, 2008,
	0, 0, 0, 2049, 110, 111, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 1535, -2, -2, 1538, -2, 1541, -2,
	-2, -2, -2, 1546, 1547, -2, 1549, -2, -2, -2,
	-2, -2, -2, -2, 1526, 1527, 1528, 1529, 1518, 1519,
	1520, 1521, 1522, 1523, -2, -2, -2, 739, 814, 0,
	739, 0, 714, 761, 764, 767, 770, 717, 0, 0,
	60, 61, 0, 281, 282, 270, 272, 0, 276, 0,
	269, 1035, 0, 0, 0, 0, 1035, 1035, 1035, 1035,
	1035, 0, 1035, 0, 0, 0, 0, 0, 1035, 0,
	921, 1006, 1007, 1008, 1033, 1034, 1099, 0, 0, 0,
	641, 637, 638, 639, 640, 727, 0, 729, 732, 564,
	564, 787, 511, 0, 0, 0, 564, 0, 525, 517,
	0, 0, 0, 564, 0, 0, 734, 734, 0, 567,
	574, 564, 564, -2, 564, 564, 564, 0, 0, 1047,
	531, 532, 533, 517, 517, 536, 537, 538, 548, 549,
	575, 1705, 0, 0, 454, 454, 0, 454, 0, 454,
	454, 454, 643, 1871, 1774, 1847, 1832, 2032, 0, 237,
	1901, 242, 0, 1775, 1794, 0, 0, 1812, 0, -2,
	0, 308, 739, 0, 0, 713, 0, 0, 0, 0,
	0, 454, 454, 454, 454, 454, 1098, 454, 454, 454,
	454, 454, 0, 0, 0, 454, 454, 454, 0, 0,
	779, 780, 775, 776, 777, 781, 782, 5, 6, 19,
	0, 0, 0, 0, 0, 0, 66, 65, 0, 1682,
	1700, 1634, 1635, 1636, 1687, 1638, 1691, 1691, 1691, 1691,
	1667, 1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1691,
	1691, 0, 0, 1680, 1658, 1689, 1689, 1689, 1687, 1684,
	1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648,
	1649, 1650, 1651, 1652, 1694, 1694, 1697, 1697, 1694, 0,
	1564, 0, 0, 0, 0, 687, 0, 0, 739, -2,
	0, 0, 588, 329, 1263, 0, 0, 333, 0, 334,
	0, 0, 0, 353, 0, 356, 341, 342, 343, 337,
	0, 136, 0, 320, 321, 0, 0, 288, 0, 0,
	0, 455, 0, 0, 0, 0, 0, 0, 166, 163,
	170, 173, 183, 190, 0, 202, 204, 207, 164, 171,
	176, 177, 184, 205, 165, 167, 168, 172, 206, 208,
	185, 189, 203, 187, 192, 195, 196, 201, 0, 137,
	0, 0, 0, 0, 0, 1574, 0, 0, 1607, 1608,
	1609, 1610, 1611, 1612, 1613, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, -2, 1568, 0, 0, 1345, 1346, 1347,
	1348, 1351, 0, 1378, 0, 0, 0, 0, 0, 1628,
	1632, 0, 1564, 1564, 0, 1564, 1560, 0, 0, 0,
	0, 0, 0, 1564, 1500, 0, 0, 1502, 1515, 0,
	0, 1504, 1505, 0, 1508, 1509, 1564, 0, 1564, 1513,
	1496, 1497, 0, 1560, 1560, 1560, 1560, 0, 0, 1560,
	1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
	1560, 0, 0, 0, 0, 734, 0, 740, 0, -2,
	0, 758, 760, 762, 763, 765, 766, 768, 769, 771,
	772, 719, 0, 0, 62, 0, 0, 0, 0, 274,
	0, 279, 0, 0, 0, 885, 0, 0, 1035, 1035,
	1035, 922, 0, 0, 0, 0, 0, 0, 0, 0,
	1035, 1035, 1035, 1035, 0, 1053, 0, 0, 0, 643,
	642, 0, 728, 0, 0, 787, 0, 0, 509, 510,
	0, 0, 517, 564, 564, 523, 524, 519, 518, 570,
	571, 567, 0, 567, 567, 787, 0, 542, 543, 544,
	564, 564, 550, 735, 0, 551, 552, 567, 0, 572,
	573, 787, 0, 0, 787, 787, 0, 560, 561, 562,
	564, 0, 0, 1035, 0, 580, 519, 519, 1706, 1707,
	0, 0, 1044, 0, 0, 0, 583, 0, 0, 0,
	0, 644, 217, 220, 0, 223, 0, 1871, 0, 1871,
	0, 230, 0, 0, 0, 0, 0, 0, 260, 261,
	0, 0, 0, 0, 251, 254, 1205, 1206, 996, 997,
	255, 256, 300, 301, 0, 734, 757, 759, 753, 754,
	755, 0, 0, 0, 0, 0, 0, 0, 0, 454,
	0, 0, 0, 0, 0, 619, 0, 901, 621, 0,
	0, 0, 0, 795, 789, 791, 858, 96, 795, 8,
	83, 80, 0, 19, 0, 0, 19, 19, 0, 19,
	265, 0, 1703, 1701, 1702, 1637, 1688, 0, 1663, 0,
	1664, 1665, 1666, 1676, 1677, 0, 0, 1659, 0, 1660,
	1661, 1662, 1653, 0, 1654, 1655, 0, 1656, 1657, 263,
	0, 1565, 889, 0, 661, 675, 656, 0, 664, 0,
	1212, 645, 675, 647, 0, 664, 734, 711, 0, 689,
	0, 0, 330, 0, 338, 335, 0, 339, 0, 0,
	355, 357, 358, 359, 344, 345, 585, 316, 317, 309,
	310, 311, 312, 313, 314, 315, 319, 106, 0, 289,
	290, 0, 0, 0, 150, 151, 152, 153, 154, 155,
	157, 141, 608, 610, 988, 1000, 0, 991, 0, 160,
	200, 133, 0, 0, 0, 1569, 1570, 1571, 1572, 1573,
	1578, 0, 1580, 1582, 1584, 1586, 0, 1604, -2, -2,
	1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336,
	1337, 1338, 1589, 1602, 1603, 0, 0, 0, 0, 0,
	0, 1600, 1600, 1595, 0, 1343, 0, 1375, 1379, 0,
	0, 0, 0, 0, 97, 1559, 1467, 1468, 1469, 1470,
	1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480,
	1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490,
	1491, 1492, 1493, 1494, 1495, 0, 0, 1568, 0, 0,
	0, 1561, 1562, 0, 0, 0, 1455, 0, 0, 1461,
	1462, 1463, 0, 670, 0, 1525, 1501, 1516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	813, 815, 0, 679, 681, 682, 708, 689, 715, 0,
	0, 0, 58, 63, 0, 1068, 283, 284, 0, 0,
	278, 0, 0, 0, -2, 0, 0, 0, 0, 0,
	936, 452, 982, 0, 0, 0, 998, 1023, 1031, 0,
	0, 0, 0, 0, 1072, 923, 928, 929, 930, 924,
	925, 931, 932, 0, 730, 0, 0, 827, 508, 565,
	566, 788, 514, 1832, 519, 787, 787, 526, 520, 527,
	569, 528, 529, 530, 567, 787, 787, 736, 564, 567,
	553, 568, 567, 556, 557, 0, 563, 576, 581, 577,
	0, 579, 534, 535, 1074, 732, 371, 372, 373, 375,
	0, 423, 423, 423, 406, 423, 0, 0, 394, 1708,
	0, 0, 0, 0, 403, 1708, 0, 0, 1708, 1708,
	1708, 1708, 1708, 1708, 1708, 0, 0, 1708, 1708, 1708,
	1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708, 0, 1708,
	1708, 1708, 1708, 1708, 1191, 1708, 0, 1045, 413, 414,
	415, 416, 421, 422, 0, 449, 0, 0, 0, 452,
	0, 970, 800, 0, 801, 802, 798, 829, 853, 853,
	0, 853, 833, 1211, 0, 0, 228, 229, 218, 0,
	219, 0, 231, 232, 0, 234, 235, 236, 243, 1774,
	1847, 238, 240, 0, 0, 244, 257, 258, 259, 0,
	0, 249, 250, 0, 0, 303, 304, 306, 0, 689,
	1048, 1049, 1050, 605, 1209, 606, 607, 611, 0, 0,
	614, 615, 616, 617, 618, 903, 0, 0, 975, 976,
	977, 787, 0, 796, 0, 792, 859, 0, 861, 0,
	787, 0, 81, 19, 0, 74, 71, 0, 0, 0,
	0, 0, 1683, 1633, 1704, 0, 0, 0, 1685, 0,
	0, 0, 0, 64, 691, 652, 0, 655, 672, 0,
	676, 0, 0, 668, 660, 665, 0, 0, 685, 646,
	0, 0, 651, 689, 0, 712, 741, 742, 745, 1264,
	0, 340, 336, 354, 0, 0, 0, 0, 144, 985,
	0, 145, 149, 139, 0, 0, 0, 990, 0, 987,
	992, 0, 159, 0, 0, 134, 135, 1059, 1068, 0,
	0, 0, 1579, 1581, 1583, 1585, 1587, 0, 1590, 1600,
	1600, 1596, 0, 1591, 0, 1593, 0, 1569, 0, 1380,
	0, 0, 0, 0, 0, 0, 0, 0, 1445, 1446,
	0, 0, 1450, 0, 1452, 1453, 1454, 1456, 0, 0,
	0, 1460, 0, 1499, 1517, 1503, 1506, 0, 1510, 0,
	1512, 0, 739, 739, 0, 0, 1419, 1419, 1419, 0,
	0, 0, 0, 1419, 0, 0, 0, 0, 0, 0,
	0, 0, 1364, 0, 1365, 1366, 0, 0, 0, 816,
	709, 0, 0, 0, 0, 0, 1066, 0, 285, 273,
	275, 0, 0, 1036, 0, 0, 891, 892, 894, 0,
	897, 898, 899, 903, 732, 0, 732, 943, 1708, 456,
	0, 0, 984, 0, 959, 0, 0, 0, -2, 0,
	0, 0, 0, 0, 0, 1076, 0, 0, 0, 630,
	634, 23, 733, 0, 512, 0, 513, 564, 521, 522,
	787, 545, 546, 0, 0, 787, 564, 564, 567, 0,
	578, 1076, 0, 0, 1044, 1142, 1110, 384, 0, 1220,
	1221, 424, 0, 1227, 1236, 1035, 1296, 0, 1236, 0,
	0, 1238, 1239, 0, 0, 0, 0, 407, 408, 0,
	393, 0, 0, 0, 0, 0, 0, 392, 0, 0,
	434, 0, 0, 0, 0, 0, 1709, 1708, 1708, 0,
	401, 402, 0, 405, 0, 0, 0, 0, 0, 0,
	0, 0, 1708, 1708, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1182, 0, 0, 0, 0,
	0, 0, 0, 1197, 1198, 943, 1708, 0, 0, 0,
	456, 957, 966, 0, 0, 0, 0, 0, 0, 820,
	0, 0, 819, 0, 0, 0, 0, 0, 732, 854,
	0, 856, 857, 831, -2, 0, 800, 836, 1564, 221,
	222, 0, 0, 227, 245, 247, 0, 0, 0, 246,
	248, 252, 253, 302, 305, 307, 751, 0, 0, 1100,
	0, 904, 905, 907, 908, 0, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 1758,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 902, 622, 785, 790, 797, 860, 862, 97, 793,
	785, 0, 84, 19, 83, 75, 76, 0, 19, 0,
	0, 0, 0, 1693, 1692, 1678, 0, 1679, 1690, 1695,
	0, 1698, 0, 695, 0, 0, 675, 677, 0, 0,
	675, 0, 0, 684, 0, 0, 675, 751, 691, 0,
	748, 746, 747, 0, 0, 586, 107, 360, 0, 0,
	0, 0, 0, 609, 0, 989, 141, 0, 0, 161,
	0, 0, 0, 1068, 1063, 1563, 1592, 1594, 0, 1601,
	1597, 1344, 1352, 1376, 0, 0, 1382, 1394, 1394, 0,
	0, 0, 1385, 1691, 1691, 1388, 1687, 1689, 1687, 1394,
	1394, 0, 98, 0, 0, 1451, 0, 0, 0, 671,
	0, 0, 0, 1415, 1417, 1419, 1419, 1426, 1420, 1427,
	1428, 1419, 1419, 1419, 1419, 1433, 1419, 1419, 1419, 1419,
	1419, 1419, 1419, 1419, 1413, 0, 0, 1622, 1623, 680,
	0, 0, 722, 723, 724, 725, 726, 0, 0, 53,
	54, 1068, 0, 277, 55, 56, 0, 0, 0, 896,
	0, 0, 0, 1213, 0, 947, 944, 945, 946, 0,
	979, 457, 458, 459, 460, 0, 0, 0, 983, 0,
	970, 952, 0, 0, 0, 1024, 1025, 1026, 1027, 1028,
	1029, 1030, -2, 1039, 0, 0, 0, 1213, 1213, 1213,
	0, 1084, 0, 1073, 683, 0, -2, 0, 0, 632,
	0, 0, 828, 515, 787, 539, 737, 738, 554, 787,
	787, 564, 582, 1084, 1075, 0, 374, 423, 0, 1130,
	0, 0, 1136, 0, 1143, 377, 0, 425, 0, 1226,
	1253, 1237, 1253, 1297, 1253, 1253, 1035, 0, 425, 0,
	0, 395, 431, 0, 0, 0, 0, 0, 391, 428,
	745, 378, 380, 381, 382, 432, 433, 435, 0, 437,
	438, 397, 409, 410, 411, 412, 0, 0, 0, 404,
	417, 418, 419, 420, 379, 1159, 1160, 1161, 1164, 1165,
	1166, 1167, 0, 0, 1170, 1171, 1172, 1173, 1174, 1250,
	1251, 1252, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1199,
	1200, 1201, 1202, 1203, 1204, 1183, 1184, 1185, 1186, 1187,
	1188, 1189, 1190, 0, 0, 1194, 0, 947, 0, 0,
	0, 0, 979, 959, 0, 969, 0, 971, 972, 0,
	0, 653, 787, 295, 0, 823, 817, 0, 806, 821,
	822, 809, 0, 811, 0, 807, 808, 787, 799, 830,
	855, 832, 835, 837, 838, 844, 0, 0, 0, 0,
	224, 225, 226, 233, 0, 476, 239, 707, 0, 1210,
	612, 613, 1101, 1102, 620, 0, 909, 783, 0, 0,
	783, 79, 82, 0, 77, 0, 0, 0, 0, 69,
	67, 1686, 0, 0, 697, 121, 0, 0, 0, 673,
	0, 678, 675, 659, 669, 658, 666, 667, 686, 675,
	650, 649, 710, 695, 743, 744, 0, 1265, 331, 0,
	986, 141, 146, 147, 148, 142, 140, 993, 0, 995,
	0, 1061, 0, 0, 1598, 1381, 1353, 1383, 1395, 1396,
	1384, 0, 1355, 1356, 1386, 1387, 1389, 1390, 1391, 1392,
	1393, 1357, 1447, 0, 1449, 1457, 1458, 0, 1507, 1511,
	0, 0, 0, 0, 0, 1424, 1425, 1429, 1430, 1431,
	1432, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 739,
	1414, 0, 0, 0, 0, 0, 0, 0, 720, 0,
	0, 0, 1067, 1069, 57, 884, 887, 893, 895, 0,
	0, 0, 1214, 1215, 1217, 1218, 1219, 0, 920, 0,
	0, 938, 939, 949, 0, 0, 0, 462, 463, 0,
	0, 0, 475, 471, 472, 473, 453, 978, 966, 955,
	0, 0, 965, 0, 1040, 1708, 1708, 1708, 0, 0,
	1144, 1708, 1708, 0, 0, 0, 1148, 1087, 0, 0,
	1078, 0, 853, 0, 0, 787, 631, 634, 635, 731,
	516, 558, 555, 787, 1087, 370, 1108, 0, 0, 0,
	0, 0, 1140, 0, 0, 1112, 0, 396, 426, 0,
	-2, 0, 1254, 0, 1240, 1254, 0, 0, 1253, 0,
	385, 425, 0, 0, 0, 439, 443, 444, 0, 441,
	1292, 0, 442, 0, 430, 0, 436, 1162, 1163, 0,
	1168, 1169, 0, 1193, 0, 0, 445, 0, 0, 0,
	446, 451, 952, 0, 967, 0, 973, 974, 739, 0,
	0, 803, 824, 0, 0, 804, 0, 805, 810, 812,
	294, 839, 0, 0, 841, 842, 843, 834, 241, 752,
	906, 0, 773, 0, 0, 794, 774, 0, 19, 0,
	0, 72, 1696, 1699, 699, 0, 696, 122, 0, 0,
	0, 0, 663, 674, 657, 648, 697, 749, 750, 143,
	138, 994, 124, 0, 1062, 0, 0, 1459, 0, 1419,
	1416, 1419, 1418, 1410, 0, 1367, 0, 1369, 1370, 1371,
	0, 1373, 1374, 0, 718, 0, 0, 926, 1148, 0,
	926, 948, 937, 0, 980, 981, 0, 464, 465, 0,
	468, 474, 950, 951, 0, 0, 963, 0, 0, 0,
	0, 1032, 1046, 0, 0, 0, -2, 0, -2, 1057,
	0, 1093, 0, 1085, 0, 1077, 0, 1080, 787, 787,
	-2, 628, 633, 0, 559, 1093, 1110, 0, 1131, 0,
	0, 0, 0, 0, 0, 0, 1111, 0, 1124, 427,
	1255, -2, 1268, 1270, 0, 1045, 1273, 1274, 0, 0,
	0, 0, 0, 0, 1318, 1282, 0, 0, 1286, 1287,
	1288, 0, 0, 1291, 0, 1616, 1617, 0, 1295, 0,
	0, 0, 0, 0, 0, 0, 1234, 386, 387, 0,
	389, 390, 1708, 1293, 429, 383, 1708, 399, 1192, 1195,
	1196, 450, 447, 448, 955, 958, 654, 734, 296, 297,
	825, 0, 818, 848, 845, 0, 0, 910, 784, 786,
	73, 78, 0, 0, 701, 0, 698, 0, 692, 694,
	132, 662, 699, 94, 115, 0, 0, 1354, 1448, 1498,
	1422, 1423, 0, 1411, 0, 1405, 1406, 1407, 1412, 0,
	0, 721, 716, 0, 912, 919, 933, 1051, 1216, 918,
	0, 0, 461, 466, 0, 469, 470, 0, 953, 954,
	0, 961, 0, 0, 1019, 1687, 0, 1041, 1042, 1207,
	1208, 1043, 1145, 1146, 1147, 1103, -2, 1156, 0, 1055,
	124, 1103, 0, 1081, 0, 1088, 0, 1086, 1079, 739,
	629, 1090, 376, 1142, 1132, 0, 1134, 0, 0, 0,
	0, 1113, -2, 0, 1269, 1271, 1272, 1275, 1276, 1277,
	1323, 1324, 1325, 0, 0, 1280, 1320, 1321, 1322, 1281,
	0, 0, 0, 0, 0, 1614, 1615, 1316, 0, 0,
	1241, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1242, 0,
	0, 0, 1233, 1235, 388, 0, 0, 1708, 968, 293,
	0, 0, 849, 851, 846, 847, 68, 70, 85, 0,
	700, 123, 0, 701, 86, 0, 112, 0, 125, 126,
	0, 0, 0, 0, 0, 1421, 1408, 0, 0, 0,
	0, 0, 1618, 1619, 1620, 0, 1368, 1372, 0, 0,
	934, 935, 940, 0, 942, 467, 956, 960, 963, 0,
	1010, 0, 745, 0, 1105, 0, 1044, 1158, 1708, 1058,
	1105, 0, 1150, 1708, 1708, 1071, 0, 1083, 0, 1095,
	0, 1089, 734, 369, 0, 1092, 1128, 1133, 1135, 1137,
	0, 1141, 1139, 1114, -2, 0, 1122, 0, 0, 1278,
	1279, 0, 0, 1514, 1708, 0, 1311, 0, 1010, 1010,
	1010, 1010, 0, 440, 398, 0, 826, 840, 0, 0,
	0, 690, 95, 99, 0, 121, 118, 0, 127, 0,
	0, 0, 0, 1064, 0, 1397, 0, 0, 0, 1401,
	1402, 1403, 1404, 0, 911, 0, 941, 962, 964, 1009,
	1020, 1021, 745, 1054, 0, 1142, 1157, 0, 1056, 1149,
	0, 0, 0, 1082, 1094, 0, 1097, 627, 1091, 1109,
	0, 1138, 1115, 1123, 0, 1118, 0, 0, 0, 1319,
	0, 1285, 0, 1290, 1299, 1312, 0, 0, 1222, 0,
	1224, 0, 1228, 0, 1230, 0, 0, 400, 850, 852,
	0, 703, 693, 88, 0, 0, 116, 117, 119, 0,
	128, 0, 130, 131, 1060, 0, 0, 1398, 1399, 1400,
	0, 913, 914, 927, 1011, 1708, 1708, 0, 0, 0,
	1017, 1018, 1022, 0, 1130, 1162, 1151, 1152, 1153, 1096,
	1129, 1117, 0, -2, 1125, 0, 0, 1566, 1576, 1577,
	1283, 1289, 1298, 1300, 1301, 0, 1313, 1314, 1315, 1317,
	1010, 1010, 1010, 1010, 1232, 702, 0, 1070, 0, 100,
	0, 102, 104, 105, 1256, 113, 114, 120, 129, 0,
	1409, 915, 0, 0, 1014, 1015, 0, 1106, 0, 1108,
	1119, -2, 0, 1127, 0, 1284, 1302, 0, 1303, 0,
	0, 0, 1223, 1225, 1229, 1231, 704, 89, 90, 0,
	101, 0, 0, 0, 900, 916, 0, 1012, 1013, 1016,
	0, 1110, 1126, 1567, 1304, 1306, 1307, 0, 0, 1305,
	0, 0, 103, 1257, 1065, 917, 1107, 1104, 1308, 1310,
	1309, 91, 92, 93, 0, 1258,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 115, 3, 3, 3, 146, 138, 3,
	82, 83, 143, 141, 156, 142, 155, 144, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 627, 624,
	125, 124, 126, 3, 628, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 148, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 625, 137, 626, 149,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	84, 85, 86, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 116, 117, 118, 119, 120, 121, 122, 123, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 139,
	140, 145, 147, 150, 151, 152, 153, 154, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:801
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:808
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:814
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:822
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:828
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:832
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:847
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:851
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:857
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:862
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:866
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:898
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 53:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:906
		{
			yyLOCAL = &tree.BackupStart{
				Timestamp:   yyDollar[2].str,
				IsS3:        false,
				Dir:         yyDollar[4].str,
				Parallelism: yyDollar[6].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 54:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:915
		{
			yyLOCAL = &tree.BackupStart{
				Timestamp: yyDollar[2].str,
				IsS3:      true,
				Option:    yyDollar[5].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 55:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:925
		{
			yyLOCAL = &tree.CreateSnapShot{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Obeject:     yyDollar[6].snapshotObjectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObejectInfo
//line mysql_sql.y:935
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELCLUSTER,
			}
			yyLOCAL = tree.ObejectInfo{
				SLevel:  spLevel,
				ObjName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObejectInfo
//line mysql_sql.y:945
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObejectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 58:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:958
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				return 1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:978
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:984
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:991
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 62:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:999
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1005
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 64:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1014
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1024
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().ToLower()),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1032
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().ToLower()),
			}
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1040
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1048
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().ToLower()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1058
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1066
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().ToLower()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1076
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1083
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().ToLower()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1092
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1102
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1106
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1112
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1116
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1122
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1131
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1141
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1145
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1151
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1160
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1164
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1170
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1191
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1204
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1211
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1215
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1221
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1225
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1231
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1238
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1246
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1250
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1264
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1268
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1272
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1277
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1281
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1285
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1291
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1300
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1311
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1315
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1321
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1325
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1331
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1335
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1341
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1365
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            return 1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1384
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1388
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1392
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1397
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1401
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1410
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1420
		{
			yyVAL.str = ""
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1427
		{
			yyVAL.str = yyDollar[3].str
		}
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1432
		{
			yyVAL.str = "\n"
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1439
		{
			yyVAL.str = yyDollar[3].str
		}
	case 124:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1444
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1448
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1476
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1480
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1486
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1494
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1514
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1533
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1558
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1562
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1566
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1571
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1575
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1581
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1594
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1605
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1618
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1622
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1632
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1645
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1658
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1664
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1670
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: yyDollar[1].cstrUnion().Compare(),
			}
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1677
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  yyDollar[1].cstrUnion().Compare(),
				TabName: yyDollar[3].cstrUnion().Compare(),
			}
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1685
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: yyDollar[1].cstrUnion().Compare(),
			}
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1694
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1698
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1702
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1706
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1710
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1714
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1721
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1725
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1731
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 159:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1738
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1747
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1751
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1757
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1761
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1765
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1769
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1773
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1777
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1781
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1785
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1789
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1793
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1797
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1801
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1805
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1809
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1813
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1817
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1821
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1825
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1829
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1833
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1837
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1841
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1845
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1849
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1853
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1857
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1861
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1865
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1869
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1873
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1877
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1881
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1885
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1889
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1893
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1897
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1901
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1905
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1909
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1913
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1917
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1921
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1925
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1929
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1933
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1937
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1941
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1945
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1949
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1953
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1966
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1973
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1980
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:1990
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:1994
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2000
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2007
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2015
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2019
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2023
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2027
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2033
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2037
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2043
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2050
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2057
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2066
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2096
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2100
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2104
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2110
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2116
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2120
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2127
		{
			yyVAL.str = yyDollar[3].str
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2133
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2137
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2143
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2151
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2160
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2169
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2177
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2185
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2208
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2231
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2238
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2245
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2253
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2260
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2267
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2276
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2280
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2284
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2290
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2294
		{
			yyVAL.str = yyDollar[1].str
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2300
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2304
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2310
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2314
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2325
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2331
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2336
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2340
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2344
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2348
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2352
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2356
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2360
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2364
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2368
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2374
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2378
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2382
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2386
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2391
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 285:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2396
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2402
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2415
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2428
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2441
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2454
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2470
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2477
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2488
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].joinTableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2499
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2503
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2509
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2519
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2525
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2529
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:2535
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2541
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2545
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2549
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2553
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2559
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2571
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2577
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 317:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2581
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2587
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 319:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2591
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2597
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2603
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2614
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2620
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2624
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2628
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2632
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2636
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2640
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2648
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2656
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 336:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2666
		{
			if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2678
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2682
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2690
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2698
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:2737
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:2741
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:2747
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2753
		{
			yyVAL.str = yyDollar[1].str
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2758
		{
			yyVAL.str = "true"
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2759
		{
			yyVAL.str = "false"
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2760
		{
			yyVAL.str = yyDollar[1].str
		}
	case 360:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2765
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 369:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2782
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 370:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2805
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 371:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2815
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 372:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2822
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:2831
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:2835
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2841
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2845
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			partitionDef := &tree.PartitionOption{
				PartBy:     *yyDollar[3].partitionByUnion(),
				SubPartBy:  yyDollar[5].partitionByUnion(),
				Partitions: yyDollar[6].partitionsUnion(),
			}
			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2864
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2874
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2890
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2908
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2912
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2918
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2922
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2928
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 385:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2934
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 386:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2942
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 387:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2952
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 388:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2960
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 389:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2970
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr *tree.AttributeDefault
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 390:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2980
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr *tree.AttributeDefault
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2990
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2997
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3001
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3005
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3009
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 396:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3013
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3020
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3026
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3030
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3034
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3038
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3042
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3046
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3050
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3054
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 406:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3059
		{
			yyVAL.str = ""
		}
	case 423:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3090
		{
			yyVAL.str = ""
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3094
		{
			yyVAL.str = string("COLUMN")
		}
	case 425:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3099
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3105
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3111
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3119
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3123
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3129
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3137
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3144
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3150
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3156
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3162
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3168
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3175
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3182
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3190
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3196
		{
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = int64(yyDollar[6].item.(int64))
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3203
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3209
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3217
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3221
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3228
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].str
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3246
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3260
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3274
		{
			assignments := []*tree.VarAssignmentExpr{
				&tree.VarAssignmentExpr{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3287
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3293
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].str,
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3304
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3317
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3321
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3326
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3330
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3335
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3339
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3355
		{
			yyLOCAL = &tree.UserMiscOptionAccountUnlock{}
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3359
		{
			yyLOCAL = &tree.UserMiscOptionAccountLock{}
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3363
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireNone{}
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3367
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireInterval{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3371
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireNever{}
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3375
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireDefault{}
		}
		yyVAL.union = yyLOCAL
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3379
		{
			yyLOCAL = &tree.UserMiscOptionPasswordHistoryDefault{}
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3383
		{
			yyLOCAL = &tree.UserMiscOptionPasswordHistoryCount{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 466:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3387
		{
			yyLOCAL = &tree.UserMiscOptionPasswordReuseIntervalDefault{}
		}
		yyVAL.union = yyLOCAL
	case 467:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3391
		{
			yyLOCAL = &tree.UserMiscOptionPasswordReuseIntervalCount{Value: yyDollar[4].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3395
		{
			yyLOCAL = &tree.UserMiscOptionPasswordRequireCurrentNone{}
		}
		yyVAL.union = yyLOCAL
	case 469:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3399
		{
			yyLOCAL = &tree.UserMiscOptionPasswordRequireCurrentDefault{}
		}
		yyVAL.union = yyLOCAL
	case 470:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3403
		{
			yyLOCAL = &tree.UserMiscOptionPasswordRequireCurrentOptional{}
		}
		yyVAL.union = yyLOCAL
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3407
		{
			yyLOCAL = &tree.UserMiscOptionFailedLoginAttempts{Value: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3411
		{
			yyLOCAL = &tree.UserMiscOptionPasswordLockTimeCount{Value: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3415
		{
			yyLOCAL = &tree.UserMiscOptionPasswordLockTimeUnbounded{}
		}
		yyVAL.union = yyLOCAL
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:3421
		{
			yyVAL.item = nil
		}
	case 475:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3426
		{
			yyVAL.item = nil
		}
	case 508:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3468
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3477
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3485
		{
			yyLOCAL = &tree.ShowSnapShots{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3493
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 512:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3497
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 513:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3501
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{tree.NewRole(yyDollar[5].cstrUnion().Compare())}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 514:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3510
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3514
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 516:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3520
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3525
		{
		}
	case 519:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3529
		{
		}
	case 521:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3534
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3544
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3554
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3562
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3568
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3574
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3580
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3586
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 529:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3592
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 530:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3598
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3607
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3611
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3615
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3619
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3623
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3627
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3631
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3635
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 539:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3641
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 540:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3650
		{
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3652
		{
		}
	case 545:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3661
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 546:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3671
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 547:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3680
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3684
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3688
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3694
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3700
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3706
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 553:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3712
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 554:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3721
		{
			yyLOCAL = &tree.ShowTables{
				Open:   false,
				Full:   yyDollar[2].fullOptUnion(),
				DBName: yyDollar[4].str,
				Like:   yyDollar[5].comparisionExprUnion(),
				Where:  yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 555:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3731
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 556:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3743
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 557:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3747
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 558:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3753
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 559:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3765
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3779
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3785
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3792
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 563:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3796
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 564:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:3801
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:3805
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:3809
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 567:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3814
		{
			yyVAL.str = ""
		}
	case 568:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3818
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3824
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 574:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3837
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3841
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 576:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3847
		{
			yyLOCAL = &tree.ShowCreateTable{Name: yyDollar[4].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 577:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3852
		{
			yyLOCAL = &tree.ShowCreateView{Name: yyDollar[4].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 578:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3856
		{
			yyLOCAL = &tree.ShowCreateDatabase{IfNotExists: yyDollar[4].ifNotExistsUnion(), Name: yyDollar[5].str}
		}
		yyVAL.union = yyLOCAL
	case 579:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3860
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3866
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3872
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3876
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3882
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3888
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3892
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 586:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3896
		{
			yyLOCAL = tree.SetUnresolvedObjectName(3, [3]string{yyDollar[5].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3902
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3906
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3932
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3940
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].str
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3948
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:3956
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:3960
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:3966
		{
			yyLOCAL = &tree.User{
				Username: yyDollar[1].usernameRecordUnion().Username,
				Hostname: yyDollar[1].usernameRecordUnion().Hostname,
			}
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3975
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3983
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3992
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3998
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4006
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4014
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4022
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4028
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4036
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4042
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4050
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4056
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4066
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4071
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4078
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 628:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4094
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 629:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4107
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4118
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 631:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4122
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 632:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4128
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 633:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4133
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 634:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4140
		{
		}
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4142
		{
		}
	case 636:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4145
		{
		}
	case 641:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4154
		{
		}
	case 643:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4158
		{
		}
	case 645:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4163
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4172
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4179
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4185
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4193
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 650:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4200
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 651:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4207
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				return 1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4227
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4237
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4241
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 655:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4247
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4254
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 657:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4260
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 658:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4268
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 659:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4275
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 660:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4282
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				return 1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 661:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4301
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 662:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4305
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 663:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4309
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 664:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4314
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4318
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 666:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4322
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 667:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:4328
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4337
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 669:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4341
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4347
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 671:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4351
		{
			yyVAL.str = yyDollar[3].cstrUnion().Compare()
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4357
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 673:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4361
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4367
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 675:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4372
		{
		}
	case 677:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4376
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4383
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4387
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4394
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4399
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4403
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4409
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 686:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4413
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 687:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4419
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4423
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4428
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 690:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4432
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 691:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4445
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 692:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4456
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 693:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4467
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 694:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4489
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 695:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:4512
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 696:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:4520
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 697:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4529
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 698:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4533
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 699:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4546
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 700:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4550
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 701:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4555
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 702:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4559
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4566
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 704:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4571
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4578
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4584
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4588
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 709:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4592
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4596
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4600
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4604
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4609
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4613
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4619
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:4629
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				return 1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:4644
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:4648
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				return 1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4662
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4666
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 721:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4672
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4681
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4685
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4689
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4693
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4697
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:4703
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:4710
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:4719
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:4723
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:4729
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4737
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4741
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4746
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4750
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4756
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 737:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4760
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4764
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4769
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4773
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 741:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4779
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4785
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4789
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:4795
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:4800
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:4804
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:4808
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:4813
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:4817
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:4821
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:4826
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:4830
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4838
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4842
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4846
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4860
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4864
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4874
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4884
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4894
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4906
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4914
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4922
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4931
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4939
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4947
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4955
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4963
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4971
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4979
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4987
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4995
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5005
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5016
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5030
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5034
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5038
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 778:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5043
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5047
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5051
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5060
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5064
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5069
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5073
		{
			yyLOCAL = tree.GroupBy(yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5078
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5082
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5088
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5092
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5098
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5102
		{
			yyDollar[2].cstrUnion().SetConfig(0)
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5107
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5111
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5116
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5124
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5130
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5138
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5146
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].joinTableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5156
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5162
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5171
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5180
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5189
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5199
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 808:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5203
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 809:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5213
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 810:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5217
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 811:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5221
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 812:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5225
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 813:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5231
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5241
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5245
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5251
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5257
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5261
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5267
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5273
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 821:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5277
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 822:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5281
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 823:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5287
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5291
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5297
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5301
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5307
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5311
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5317
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5321
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5331
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5344
		{
			yyLOCAL = yyDollar[2].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:5350
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5356
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].cstrUnion().Compare()))
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:  tree.FuncName2ResolvableFunctionReference(name),
					Exprs: yyDollar[3].exprsUnion(),
					Type:  tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:5369
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5380
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5387
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5391
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:5397
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5407
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5411
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5415
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5420
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5424
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5428
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5432
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5437
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5441
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5445
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5449
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5453
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5458
		{
			yyVAL.str = ""
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5462
		{
			yyVAL.str = yyDollar[1].str
		}
	case 855:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5466
		{
			yyVAL.str = yyDollar[2].str
		}
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5472
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 858:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5478
		{
			yyLOCAL = tree.NewCStr("", yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5482
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5486
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5490
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5494
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5500
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 884:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5540
		{
			yyLOCAL = &tree.CreateExtension{
				Language: yyDollar[3].str,
				Name:     tree.Identifier(yyDollar[5].str),
				Filename: tree.Identifier(yyDollar[7].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5550
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5556
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 887:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5562
		{
			yyLOCAL = &tree.CreateProcedure{
				Name: yyDollar[3].procNameUnion(),
				Args: yyDollar[5].procArgsUnion(),
				Body: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:5572
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().ToLower()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 889:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:5577
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().ToLower()), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().ToLower()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 890:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5583
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5590
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 893:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5594
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:5600
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 895:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:5606
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 896:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5611
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5615
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5619
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5623
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 900:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5630
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				return 1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				return 1
			}

			yyLOCAL = &tree.CreateFunction{
				Replace:    yyDollar[2].sourceOptionalUnion(),
				Name:       yyDollar[4].functionNameUnion(),
				Args:       yyDollar[6].funcArgsUnion(),
				ReturnType: yyDollar[9].funcReturnUnion(),
				Language:   yyDollar[11].str,
				Import:     yyDollar[12].boolValUnion(),
				Body:       yyDollar[13].str,
				Handler:    yyDollar[14].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:5654
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 902:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:5659
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5665
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5672
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5676
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:5682
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5688
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 909:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5692
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 910:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5696
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 911:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5702
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 912:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:5708
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5714
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5718
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 915:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5724
		{
			yyVAL.str = ""
		}
	case 917:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5731
		{
			yyVAL.str = yyDollar[2].str
		}
	case 918:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5737
		{
			yyLOCAL = &tree.CreateView{
				Name:        yyDollar[5].tableNameUnion(),
				ColNames:    yyDollar[6].identifierListUnion(),
				AsSource:    yyDollar[8].selectUnion(),
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 919:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5746
		{
			yyLOCAL = &tree.CreateView{
				Replace:     yyDollar[2].sourceOptionalUnion(),
				Name:        yyDollar[5].tableNameUnion(),
				ColNames:    yyDollar[6].identifierListUnion(),
				AsSource:    yyDollar[8].selectUnion(),
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 920:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5758
		{
			yyLOCAL = &tree.CreateAccount{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         yyDollar[4].str,
				AuthOption:   yyDollar[5].accountAuthOptionUnion(),
				StatusOption: yyDollar[6].accountStatusUnion(),
				Comment:      yyDollar[7].accountCommentUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 921:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5770
		{
			yyVAL.str = yyDollar[1].str
		}
	case 922:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5774
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 923:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5780
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 924:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5784
		{
			yyVAL.str = "DEFINER = "
		}
	case 925:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5788
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 926:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5793
		{
			yyVAL.str = ""
		}
	case 927:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:5797
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 933:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5811
		{
			yyVAL.str = ""
		}
	case 936:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5819
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 937:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:5825
		{
			yyLOCAL = tree.AccountAuthOption{
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].str,
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5835
		{
			yyVAL.str = yyDollar[1].str
		}
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5839
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 940:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:5845
		{
			yyLOCAL = tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 941:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:5852
		{
			yyLOCAL = tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 942:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:5858
		{
			yyLOCAL = tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 943:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:5866
		{
			yyLOCAL = tree.AccountStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:5872
		{
			yyLOCAL = tree.AccountStatus{
				Exist:  true,
				Option: tree.AccountStatusOpen,
			}
		}
		yyVAL.union = yyLOCAL
	case 945:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:5879
		{
			yyLOCAL = tree.AccountStatus{
				Exist:  true,
				Option: tree.AccountStatusSuspend,
			}
		}
		yyVAL.union = yyLOCAL
	case 946:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:5886
		{
			yyLOCAL = tree.AccountStatus{
				Exist:  true,
				Option: tree.AccountStatusRestricted,
			}
		}
		yyVAL.union = yyLOCAL
	case 947:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:5894
		{
			yyLOCAL = tree.AccountComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 948:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:5900
		{
			yyLOCAL = tree.AccountComment{
				Exist:   true,
				Comment: yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 949:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5909
		{
			yyLOCAL = &tree.CreateUser{
				IfNotExists:        yyDollar[3].ifNotExistsUnion(),
				Users:              yyDollar[4].usersUnion(),
				Role:               yyDollar[5].accountRoleUnion(),
				MiscOpt:            yyDollar[6].userMiscOptionUnion(),
				CommentOrAttribute: yyDollar[7].accountCommentOrAttributeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 950:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5921
		{
			yyLOCAL = &tree.CreatePublication{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Database:    tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				AccountsSet: yyDollar[7].accountsSetOptionUnion(),
				Comment:     yyDollar[8].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 951:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5933
		{
			yyLOCAL = &tree.CreateStage{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Url:         yyDollar[5].str,
				Credentials: yyDollar[6].stageCredentialsUnion(),
				Status:      yyDollar[7].stageStatusUnion(),
				Comment:     yyDollar[8].stageCommentUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 952:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:5945
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 953:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:5951
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 954:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:5958
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 955:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:5966
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 956:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:5972
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 957:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:5980
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 958:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:5986
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 959:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:5994
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 960:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6000
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 961:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6009
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 962:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6013
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 963:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6018
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6022
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 965:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6029
		{
			yyVAL.str = yyDollar[3].str
		}
	case 966:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6034
		{
			yyVAL.str = ""
		}
	case 967:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6038
		{
			yyVAL.str = yyDollar[2].str
		}
	case 968:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6044
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6057
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var comment = yyDollar[6].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, comment)
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6066
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 971:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6070
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 972:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6076
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6082
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 974:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6088
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 975:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6097
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 976:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6105
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 977:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6113
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropSnapShot(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6121
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 979:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6126
		{
			yyLOCAL = tree.AccountCommentOrAttribute{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 980:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6132
		{
			yyLOCAL = tree.AccountCommentOrAttribute{
				Exist:     true,
				IsComment: true,
				Str:       yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6140
		{
			yyLOCAL = tree.AccountCommentOrAttribute{
				Exist:     true,
				IsComment: false,
				Str:       yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6246
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 983:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6250
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 984:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6256
		{
			yyLOCAL = &tree.User{
				Username:   yyDollar[1].usernameRecordUnion().Username,
				Hostname:   yyDollar[1].usernameRecordUnion().Hostname,
				AuthOption: yyDollar[2].userIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6266
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 986:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6270
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 987:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6276
		{
			yyLOCAL = &tree.User{
				Username:   yyDollar[1].usernameRecordUnion().Username,
				Hostname:   yyDollar[1].usernameRecordUnion().Hostname,
				AuthOption: yyDollar[2].userIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 988:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6286
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 989:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6290
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 990:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6294
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 991:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6299
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 992:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6303
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 993:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6309
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 994:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6316
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 995:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6322
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 996:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6331
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 998:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6338
		{
			yyLOCAL = &tree.CreateRole{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Roles:       yyDollar[4].rolesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:6347
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1000:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:6351
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:6357
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 1002:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6371
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6375
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6379
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1005:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6384
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6388
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6392
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6396
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6402
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = &tree.IndexOption{IType: yyDollar[5].indexTypeUnion()}
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = &tree.IndexOption{IType: tree.INDEX_TYPE_INVALID}
			}
			yyLOCAL = &tree.CreateIndex{
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Table:       yyDollar[7].tableNameUnion(),
				IndexCat:    yyDollar[2].indexCategoryUnion(),
				KeyParts:    yyDollar[9].keyPartsUnion(),
				IndexOption: io,
				MiscOption:  nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6423
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6427
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6453
		{
			yyLOCAL = &tree.IndexOption{KeyBlockSize: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6457
		{
			yyLOCAL = &tree.IndexOption{AlgoParamList: int64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6461
		{
			yyLOCAL = &tree.IndexOption{AlgoParamVectorOpType: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6465
		{
			yyLOCAL = &tree.IndexOption{Comment: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6469
		{
			yyLOCAL = &tree.IndexOption{ParserName: yyDollar[3].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6473
		{
			yyLOCAL = &tree.IndexOption{Visible: tree.VISIBLE_TYPE_VISIBLE}
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6477
		{
			yyLOCAL = &tree.IndexOption{Visible: tree.VISIBLE_TYPE_INVISIBLE}
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:6483
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:6487
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:6493
		{
			// Order is parsed but just ignored as MySQL dtree.
			yyLOCAL = &tree.KeyPart{ColName: yyDollar[1].unresolvedNameUnion(), Length: int(yyDollar[2].lengthOptUnion()), Direction: yyDollar[3].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:6498
		{
			yyLOCAL = &tree.KeyPart{Expr: yyDollar[2].exprUnion(), Direction: yyDollar[4].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6503
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6507
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6511
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6515
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6519
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6523
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6527
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6533
		{
			yyLOCAL = &tree.CreateDatabase{
				IfNotExists:        yyDollar[3].ifNotExistsUnion(),
				Name:               tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				SubscriptionOption: yyDollar[5].subscriptionOptionUnion(),
				CreateOptions:      yyDollar[6].createOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:6544
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:6548
		{
			yyLOCAL = &tree.SubscriptionOption{From: tree.Identifier(yyDollar[2].str), Publication: tree.Identifier(yyDollar[4].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6558
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6562
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6567
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6571
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6577
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6581
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1041:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:6587
		{
			yyLOCAL = &tree.CreateOptionCharset{IsDefault: yyDollar[1].defaultOptionalUnion(), Charset: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:6591
		{
			yyLOCAL = &tree.CreateOptionCollate{IsDefault: yyDollar[1].defaultOptionalUnion(), Collate: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:6595
		{
			yyLOCAL = &tree.CreateOptionEncryption{Encrypt: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 1044:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6600
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1045:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6604
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1046:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6610
		{
			yyLOCAL = &tree.CreateConnector{
				TableName: yyDollar[4].tableNameUnion(),
				Options:   yyDollar[7].connectorOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1047:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6619
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1048:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6625
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1049:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6643
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1050:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6661
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1051:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6679
		{
			yyLOCAL = &tree.CreateSource{
				Replace:     yyDollar[2].sourceOptionalUnion(),
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				SourceName:  yyDollar[5].tableNameUnion(),
				Defs:        yyDollar[7].tableDefsUnion(),
				Options:     yyDollar[9].tableOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1052:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6690
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1053:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6694
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1054:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6700
		{
			yyLOCAL = &tree.CreateTable{
				Temporary:       yyDollar[2].boolValUnion(),
				IfNotExists:     yyDollar[4].ifNotExistsUnion(),
				Table:           *yyDollar[5].tableNameUnion(),
				Defs:            yyDollar[7].tableDefsUnion(),
				Options:         yyDollar[9].tableOptionsUnion(),
				PartitionOption: yyDollar[10].partitionOptionUnion(),
				ClusterByOption: yyDollar[11].clusterByOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1055:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6712
		{
			yyLOCAL = &tree.CreateTable{
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Table:       *yyDollar[5].tableNameUnion(),
				Defs:        yyDollar[7].tableDefsUnion(),
				Param:       yyDollar[9].loadParamUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1056:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6721
		{
			yyLOCAL = &tree.CreateTable{
				IsClusterTable:  true,
				IfNotExists:     yyDollar[4].ifNotExistsUnion(),
				Table:           *yyDollar[5].tableNameUnion(),
				Defs:            yyDollar[7].tableDefsUnion(),
				Options:         yyDollar[9].tableOptionsUnion(),
				PartitionOption: yyDollar[10].partitionOptionUnion(),
				ClusterByOption: yyDollar[11].clusterByOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6733
		{
			yyLOCAL = &tree.CreateTable{
				IsDynamicTable: true,
				IfNotExists:    yyDollar[4].ifNotExistsUnion(),
				Table:          *yyDollar[5].tableNameUnion(),
				AsSource:       yyDollar[7].selectUnion(),
				DTOptions:      yyDollar[8].tableOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6744
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6751
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6761
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6774
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6782
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6791
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6800
		{
			yyVAL.str = ""
		}
	case 1065:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:6804
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1066:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6810
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6814
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6819
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6823
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:6830
		{
			yyLOCAL = &tree.TailParameter{
				Fields:       yyDollar[1].fieldsUnion(),
				Lines:        yyDollar[2].linesUnion(),
				IgnoredLines: uint64(yyDollar[3].int64ValUnion()),
				ColumnList:   yyDollar[4].loadColumnsUnion(),
				Assignments:  yyDollar[5].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6841
		{
			yyLOCAL = &tree.CreateSequence{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        yyDollar[4].tableNameUnion(),
				Type:        yyDollar[5].columnTypeUnion(),
				IncrementBy: yyDollar[6].incrementByOptionUnion(),
				MinValue:    yyDollar[7].minValueOptionUnion(),
				MaxValue:    yyDollar[8].maxValueOptionUnion(),
				StartWith:   yyDollar[9].startWithOptionUnion(),
				Cycle:       yyDollar[10].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6854
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6868
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:6872
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:6876
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:6882
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:6886
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:6893
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:6900
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:6907
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6914
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6918
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6922
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:6926
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:6930
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:6937
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:6944
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:6948
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:6955
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:6962
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:6966
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:6972
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:6978
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:6982
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:6989
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:6996
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1097:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7003
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1098:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7010
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7014
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7019
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1101:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7023
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1102:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7027
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1103:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7032
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7036
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = &tree.PartitionOption{
				PartBy:     *yyDollar[3].partitionByUnion(),
				SubPartBy:  yyDollar[5].partitionByUnion(),
				Partitions: yyDollar[6].partitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1105:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7046
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7050
		{
			yyLOCAL = &tree.ClusterByOption{
				ColumnList: []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()},
			}

		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7057
		{
			yyLOCAL = &tree.ClusterByOption{
				ColumnList: yyDollar[4].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7064
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7068
		{
			yyLOCAL = &tree.PartitionBy{
				IsSubPartition: true,
				PType:          yyDollar[3].partitionByUnion(),
				Num:            uint64(yyDollar[4].int64ValUnion()),
			}
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7077
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7081
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7087
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1113:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7091
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1114:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7097
		{
			yyLOCAL = &tree.Partition{
				Name:    tree.Identifier(yyDollar[2].cstrUnion().Compare()),
				Values:  yyDollar[3].valuesUnion(),
				Options: nil,
				Subs:    yyDollar[4].subPartitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1115:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7106
		{
			yyLOCAL = &tree.Partition{
				Name:    tree.Identifier(yyDollar[2].cstrUnion().Compare()),
				Values:  yyDollar[3].valuesUnion(),
				Options: yyDollar[4].tableOptionsUnion(),
				Subs:    yyDollar[5].subPartitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1116:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7116
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7120
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7126
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7130
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:7136
		{
			yyLOCAL = &tree.SubPartition{
				Name:    tree.Identifier(yyDollar[2].cstrUnion().Compare()),
				Options: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1121:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:7143
		{
			yyLOCAL = &tree.SubPartition{
				Name:    tree.Identifier(yyDollar[2].cstrUnion().Compare()),
				Options: yyDollar[3].tableOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7152
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7156
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7161
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7165
		{
			expr := tree.NewMaxValue()
			yyLOCAL = &tree.ValuesLessThan{ValueList: tree.Exprs{expr}}
		}
		yyVAL.union = yyLOCAL
	case 1126:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7170
		{
			yyLOCAL = &tree.ValuesLessThan{ValueList: yyDollar[5].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7174
		{
			yyLOCAL = &tree.ValuesIn{ValueList: yyDollar[4].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7179
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7183
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				return 1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7193
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7197
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				return 1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1132:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7208
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.RangeType{
					Expr: yyDollar[3].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1133:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7216
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.RangeType{
					ColumnList: yyDollar[4].unresolveNamesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7224
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.ListType{
					Expr: yyDollar[3].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7232
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.ListType{
					ColumnList: yyDollar[4].unresolveNamesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7243
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.KeyType{
					Linear:    yyDollar[1].boolValUnion(),
					Algorithm: yyDollar[3].int64ValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7252
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.KeyType{
					Linear:     yyDollar[1].boolValUnion(),
					ColumnList: yyDollar[5].unresolveNamesUnion(),
					Algorithm:  yyDollar[3].int64ValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1139:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7262
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.HashType{
					Linear: yyDollar[1].boolValUnion(),
					Expr:   yyDollar[4].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1140:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7272
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7276
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7281
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7285
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:7291
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:7295
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:7301
		{
			yyLOCAL = &tree.ConnectorOption{Key: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Val: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:7305
		{
			yyLOCAL = &tree.ConnectorOption{Key: tree.Identifier(yyDollar[1].str), Val: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7310
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7314
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7320
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7324
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7330
		{
			yyLOCAL = &tree.CreateSourceWithOption{Key: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Val: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7334
		{
			yyLOCAL = &tree.CreateSourceWithOption{Key: tree.Identifier(yyDollar[1].str), Val: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7339
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1155:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7343
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1156:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7349
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7353
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7357
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1159:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7363
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7367
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7371
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1162:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7375
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7379
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7383
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1165:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7387
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7392
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7396
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7400
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7404
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7408
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7412
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7416
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7420
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7424
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1175:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7428
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7432
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7436
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7440
		{
			yyLOCAL = &tree.TableOptionPackKeys{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7444
		{
			yyLOCAL = &tree.TableOptionPackKeys{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7448
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1181:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7452
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7456
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7460
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1184:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7464
		{
			yyLOCAL = &tree.TableOptionStatsAutoRecalc{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7468
		{
			yyLOCAL = &tree.TableOptionStatsAutoRecalc{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7472
		{
			yyLOCAL = &tree.TableOptionStatsPersistent{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7476
		{
			yyLOCAL = &tree.TableOptionStatsPersistent{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7480
		{
			yyLOCAL = &tree.TableOptionStatsSamplePages{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7484
		{
			yyLOCAL = &tree.TableOptionStatsSamplePages{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7488
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7492
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7496
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7500
		{
			yyLOCAL = &tree.TableOptionProperties{Preperties: yyDollar[3].propertiesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:7506
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:7510
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:7516
		{
			yyLOCAL = tree.Property{Key: yyDollar[1].str, Value: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7522
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7526
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1199:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7532
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1200:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7536
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1201:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7540
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7544
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7548
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1204:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7552
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7566
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1210:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7570
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1211:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:7579
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1212:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:7584
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1213:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:7590
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1215:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:7597
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:7601
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7607
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7611
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7615
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1220:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7621
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1221:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7625
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1222:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7631
		{
			yyLOCAL = &tree.FullTextIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].str,
				Empty:       true,
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1223:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7640
		{
			yyLOCAL = &tree.FullTextIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].str,
				Empty:       true,
				IndexOption: yyDollar[9].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1224:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7649
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid the type of index")
					return 1
				}
			}
			yyLOCAL = &tree.Index{
				IfNotExists: yyDollar[2].ifNotExistsUnion(),
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				KeyType:     keyTyp,
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1225:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7682
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid type of index")
					return 1
				}
			}
			yyLOCAL = &tree.Index{
				IfNotExists: yyDollar[2].ifNotExistsUnion(),
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				KeyType:     keyTyp,
				IndexOption: yyDollar[9].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7717
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1227:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7731
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1228:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7737
		{
			yyLOCAL = &tree.PrimaryKeyIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1229:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7746
		{
			yyLOCAL = &tree.PrimaryKeyIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[9].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1230:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7755
		{
			yyLOCAL = &tree.UniqueIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1231:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7764
		{
			yyLOCAL = &tree.UniqueIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[9].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1232:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7773
		{
			yyLOCAL = &tree.ForeignKey{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				KeyParts:    yyDollar[6].keyPartsUnion(),
				Name:        yyDollar[4].str,
				Refer:       yyDollar[8].attributeReferenceUnion(),
				Empty:       true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1233:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7783
		{
			yyLOCAL = &tree.CheckIndex{
				Expr:     yyDollar[3].exprUnion(),
				Enforced: yyDollar[5].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1234:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7791
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1236:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7797
		{
			yyVAL.str = ""
		}
	case 1237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7801
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1240:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7811
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1241:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7817
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1242:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7823
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1253:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7844
		{
			yyVAL.str = ""
		}
	case 1254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7848
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1255:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:7854
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1256:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:7860
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1257:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:7864
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1258:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:7868
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1259:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7874
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1260:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7878
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1261:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7882
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1262:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7886
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1263:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:7892
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1264:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:7896
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1265:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:7900
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1266:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:7905
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1267:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:7909
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1268:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:7915
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1269:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:7919
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1270:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7925
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7929
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7933
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7937
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7941
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1275:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7945
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7950
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7954
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1278:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7958
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1279:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7962
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1280:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7966
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1281:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7970
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1282:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7974
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1283:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7978
		{
			yyLOCAL = tree.NewAttributeCheck(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1284:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7982
		{
			yyLOCAL = tree.NewAttributeCheck(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1285:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7986
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[3].str))
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1286:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7999
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1287:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8003
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1288:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8007
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1289:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8011
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1290:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8015
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1291:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8019
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1292:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8025
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1293:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8029
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1294:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8034
		{
			yyVAL.str = ""
		}
	case 1295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8038
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8044
		{
			yyVAL.str = ""
		}
	case 1297:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8048
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1298:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:8054
		{
			yyLOCAL = &tree.AttributeReference{
				TableName: yyDollar[2].tableNameUnion(),
				KeyParts:  yyDollar[3].keyPartsUnion(),
				Match:     yyDollar[4].matchTypeUnion(),
				OnDelete:  yyDollar[5].referenceOnRecordUnion().OnDelete,
				OnUpdate:  yyDollar[5].referenceOnRecordUnion().OnUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 1299:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8066
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1300:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8073
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1301:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8080
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1302:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8087
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1303:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8094
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1304:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8103
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1305:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8109
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1306:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8115
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1307:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8119
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1308:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8123
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1309:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8127
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1310:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8131
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1311:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8136
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1313:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8143
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1314:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8147
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1315:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8151
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1316:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:8156
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1317:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:8160
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1318:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8165
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1319:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8169
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1326:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:8185
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1327:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8191
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1328:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8195
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1329:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8199
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1330:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8203
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1331:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8207
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1332:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8211
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1333:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8215
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1334:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8219
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1335:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8223
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1336:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8227
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1337:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8231
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1338:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8235
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1339:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8239
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1340:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8245
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1341:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8249
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1342:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8253
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1343:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8257
		{
			yyLOCAL = tree.NewParenExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1344:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8261
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1345:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8265
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1346:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8269
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1347:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8273
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1348:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8277
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1349:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8281
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1350:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8285
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1351:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8289
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1352:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8294
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1353:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8302
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1354:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8306
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1355:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8310
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1356:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8314
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1357:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8318
		{
			name := tree.SetUnresolvedName("convert")
			es := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1358:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8327
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1359:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8331
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1360:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8335
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1361:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8339
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1362:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8343
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1363:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8347
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1364:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8353
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1365:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8361
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1366:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8369
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1367:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8379
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1368:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8389
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1369:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8399
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1370:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8408
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1371:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8418
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1372:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8428
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1373:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8438
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1374:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8447
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1375:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8457
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1376:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8461
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1377:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8466
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1378:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8470
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1379:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:8476
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1380:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:8480
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1381:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:8486
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8495
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1383:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8507
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1384:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8524
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1386:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8541
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1387:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8554
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1388:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8567
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1389:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8579
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1390:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8593
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1391:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8608
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1392:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8623
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1393:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8640
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1394:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8655
		{
		}
	case 1398:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8662
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1399:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8666
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1400:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8670
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1401:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8676
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1402:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8680
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1403:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8684
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1404:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8688
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1405:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:8694
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1406:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:8698
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1407:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:8702
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1408:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:8708
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1409:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:8716
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1410:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:8726
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1411:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:8730
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1412:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:8737
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1413:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:8742
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1414:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:8746
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1415:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8751
		{
			yyVAL.str = ","
		}
	case 1416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8755
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1417:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8760
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1418:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8764
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1419:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:8769
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1421:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:8776
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1422:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8802
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1423:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8813
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1424:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8824
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1425:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8834
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1426:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8844
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1427:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8854
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1428:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8863
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1429:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8872
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1430:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8882
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1431:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8892
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1432:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8902
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1433:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8912
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1434:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8922
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1435:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8932
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1436:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8942
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1437:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8952
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1438:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8962
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1439:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8972
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1440:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8982
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1441:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8992
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1445:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9011
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1446:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9019
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1447:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9027
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1448:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9035
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1449:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9043
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1450:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9053
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1451:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9061
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1452:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9070
		{
			name := tree.SetUnresolvedName("nextval")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1453:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9078
		{
			name := tree.SetUnresolvedName("setval")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1454:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9086
		{
			name := tree.SetUnresolvedName("currval")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1455:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9094
		{
			name := tree.SetUnresolvedName("lastval")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1456:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9102
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1457:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9113
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1458:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9123
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1459:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9135
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1460:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9146
		{
			column := tree.SetUnresolvedName(strings.ToLower(yyDollar[3].str))
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9168
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1496:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9204
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1497:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9216
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1498:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9228
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1499:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9239
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1500:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9247
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func: tree.FuncName2ResolvableFunctionReference(name),
			}
		}
		yyVAL.union = yyLOCAL
	case 1501:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9254
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func: tree.FuncName2ResolvableFunctionReference(name),
			}
		}
		yyVAL.union = yyLOCAL
	case 1502:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9261
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1503:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9273
		{
			name := tree.SetUnresolvedName("binary")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1504:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9281
		{
			name := tree.SetUnresolvedName("binary")
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1505:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9291
		{
			name := tree.SetUnresolvedName("binary")
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1506:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9301
		{
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1507:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9309
		{
			cn := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1508:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9320
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("date")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1509:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9329
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("time")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1510:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9338
		{
			name := tree.SetUnresolvedName("insert")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1511:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9346
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.SetUnresolvedName("mod")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1512:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9356
		{
			name := tree.SetUnresolvedName("password")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1513:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9364
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("timestamp")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1514:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9374
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1515:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9378
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1516:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9384
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1517:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9388
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				return 1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(ival), str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1524:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9407
		{
		}
	case 1525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9409
		{
		}
	case 1559:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9450
		{
			name := tree.SetUnresolvedName("interval")
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1560:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:9461
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1561:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:9465
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1562:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:9469
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1563:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:9475
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1564:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9480
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1565:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9484
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1566:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9490
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1567:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9494
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1568:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9500
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1569:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9504
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1570:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9511
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1571:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9515
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1572:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9519
		{
			name := tree.SetUnresolvedName(strings.ToLower("concat"))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1573:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9527
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1574:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9531
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1575:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9535
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1576:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9540
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1577:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9544
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1578:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9550
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1579:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9554
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1580:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9558
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1581:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9562
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1582:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9566
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1583:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9570
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1584:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9574
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1585:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9578
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1586:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9582
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1587:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9586
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1589:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9594
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1590:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9598
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1591:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9602
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1592:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9606
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1593:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9610
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1594:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9614
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1595:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9618
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1596:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9622
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1597:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9626
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1598:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9630
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1600:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9636
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1601:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9640
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1602:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9646
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1603:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9650
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1604:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9657
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1605:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9661
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1606:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9665
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1607:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9671
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1608:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9675
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1609:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9679
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1610:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9683
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1611:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9687
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1612:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9691
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1613:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9695
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1614:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9701
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1615:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9705
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1616:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9709
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1617:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9713
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1618:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9719
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1619:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9732
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1620:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9737
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1621:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9743
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1622:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9747
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1623:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9760
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1624:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9765
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1625:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9769
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1626:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9773
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1627:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9777
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1628:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9781
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1629:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9788
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1630:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9792
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1631:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9796
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1632:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9800
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1633:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9807
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1637:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9818
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1638:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9823
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1639:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9829
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1640:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9841
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1641:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9853
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1642:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9865
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1643:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9878
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1644:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9891
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1645:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9904
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1646:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9917
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1647:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9930
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1648:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9943
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1649:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9956
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1650:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9969
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1651:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9982
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1652:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9995
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1653:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10010
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1654:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10037
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1655:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10079
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				return 1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1656:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10115
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				return 1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1657:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10151
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1658:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10168
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1659:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10180
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				return 1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1660:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10200
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				return 1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1661:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10220
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				return 1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1662:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10240
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1663:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10256
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1664:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10269
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1665:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10282
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1666:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10295
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1667:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10308
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1668:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10320
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1669:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10332
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1670:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10344
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1671:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10356
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1672:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10368
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1673:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10380
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1674:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10392
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1675:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10404
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1676:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10416
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1677:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10429
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1678:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10442
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1679:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10455
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1680:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10468
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1681:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:10483
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1682:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:10491
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1683:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:10500
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1684:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10510
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1685:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:10533
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1686:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:10538
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1687:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10544
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1689:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10551
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1690:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10555
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1691:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10560
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1692:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10564
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1693:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10570
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1694:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:10576
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1695:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:10583
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1696:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:10590
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1697:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:10599
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1698:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:10606
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1699:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:10613
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1700:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:10622
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1701:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:10626
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1702:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:10630
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1703:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10636
		{
		}
	case 1704:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:10638
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1708:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10648
		{
			yyVAL.str = ""
		}
	case 1709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10652
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
