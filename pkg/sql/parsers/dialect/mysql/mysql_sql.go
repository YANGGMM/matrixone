// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const CONNECT = 57367
const MANAGE = 57368
const GRANTS = 57369
const OWNERSHIP = 57370
const REFERENCE = 57371
const LOWER_THAN_SET = 57372
const SET = 57373
const ALL = 57374
const DISTINCT = 57375
const DISTINCTROW = 57376
const AS = 57377
const EXISTS = 57378
const ASC = 57379
const DESC = 57380
const INTO = 57381
const DUPLICATE = 57382
const DEFAULT = 57383
const LOCK = 57384
const KEYS = 57385
const NULLS = 57386
const FIRST = 57387
const LAST = 57388
const AFTER = 57389
const INSTANT = 57390
const INPLACE = 57391
const COPY = 57392
const DISABLE = 57393
const ENABLE = 57394
const UNDEFINED = 57395
const MERGE = 57396
const TEMPTABLE = 57397
const DEFINER = 57398
const INVOKER = 57399
const SQL = 57400
const SECURITY = 57401
const CASCADED = 57402
const VALUES = 57403
const NEXT = 57404
const VALUE = 57405
const SHARE = 57406
const MODE = 57407
const SQL_NO_CACHE = 57408
const SQL_CACHE = 57409
const JOIN = 57410
const STRAIGHT_JOIN = 57411
const LEFT = 57412
const RIGHT = 57413
const INNER = 57414
const OUTER = 57415
const CROSS = 57416
const NATURAL = 57417
const USE = 57418
const FORCE = 57419
const CROSS_L2 = 57420
const LOWER_THAN_ON = 57421
const ON = 57422
const USING = 57423
const SUBQUERY_AS_EXPR = 57424
const LOWER_THAN_STRING = 57425
const ID = 57426
const AT_ID = 57427
const AT_AT_ID = 57428
const STRING = 57429
const VALUE_ARG = 57430
const LIST_ARG = 57431
const COMMENT = 57432
const COMMENT_KEYWORD = 57433
const QUOTE_ID = 57434
const STAGE = 57435
const CREDENTIALS = 57436
const STAGES = 57437
const SNAPSHOTS = 57438
const INTEGRAL = 57439
const HEX = 57440
const FLOAT = 57441
const HEXNUM = 57442
const BIT_LITERAL = 57443
const NULL = 57444
const TRUE = 57445
const FALSE = 57446
const LOWER_THAN_CHARSET = 57447
const CHARSET = 57448
const UNIQUE = 57449
const KEY = 57450
const OR = 57451
const PIPE_CONCAT = 57452
const XOR = 57453
const AND = 57454
const NOT = 57455
const BETWEEN = 57456
const CASE = 57457
const WHEN = 57458
const THEN = 57459
const ELSE = 57460
const END = 57461
const ELSEIF = 57462
const LOWER_THAN_EQ = 57463
const LE = 57464
const GE = 57465
const NE = 57466
const NULL_SAFE_EQUAL = 57467
const IS = 57468
const LIKE = 57469
const REGEXP = 57470
const IN = 57471
const ASSIGNMENT = 57472
const ILIKE = 57473
const SHIFT_LEFT = 57474
const SHIFT_RIGHT = 57475
const DIV = 57476
const MOD = 57477
const UNARY = 57478
const COLLATE = 57479
const BINARY = 57480
const UNDERSCORE_BINARY = 57481
const INTERVAL = 57482
const OUT = 57483
const INOUT = 57484
const BEGIN = 57485
const START = 57486
const TRANSACTION = 57487
const COMMIT = 57488
const ROLLBACK = 57489
const WORK = 57490
const CONSISTENT = 57491
const SNAPSHOT = 57492
const CHAIN = 57493
const NO = 57494
const RELEASE = 57495
const PRIORITY = 57496
const QUICK = 57497
const BIT = 57498
const TINYINT = 57499
const SMALLINT = 57500
const MEDIUMINT = 57501
const INT = 57502
const INTEGER = 57503
const BIGINT = 57504
const INTNUM = 57505
const REAL = 57506
const DOUBLE = 57507
const FLOAT_TYPE = 57508
const DECIMAL = 57509
const NUMERIC = 57510
const DECIMAL_VALUE = 57511
const TIME = 57512
const TIMESTAMP = 57513
const DATETIME = 57514
const YEAR = 57515
const CHAR = 57516
const VARCHAR = 57517
const BOOL = 57518
const CHARACTER = 57519
const VARBINARY = 57520
const NCHAR = 57521
const TEXT = 57522
const TINYTEXT = 57523
const MEDIUMTEXT = 57524
const LONGTEXT = 57525
const DATALINK = 57526
const BLOB = 57527
const TINYBLOB = 57528
const MEDIUMBLOB = 57529
const LONGBLOB = 57530
const JSON = 57531
const ENUM = 57532
const UUID = 57533
const VECF32 = 57534
const VECF64 = 57535
const GEOMETRY = 57536
const POINT = 57537
const LINESTRING = 57538
const POLYGON = 57539
const GEOMETRYCOLLECTION = 57540
const MULTIPOINT = 57541
const MULTILINESTRING = 57542
const MULTIPOLYGON = 57543
const INT1 = 57544
const INT2 = 57545
const INT3 = 57546
const INT4 = 57547
const INT8 = 57548
const S3OPTION = 57549
const STAGEOPTION = 57550
const SQL_SMALL_RESULT = 57551
const SQL_BIG_RESULT = 57552
const SQL_BUFFER_RESULT = 57553
const LOW_PRIORITY = 57554
const HIGH_PRIORITY = 57555
const DELAYED = 57556
const CREATE = 57557
const ALTER = 57558
const DROP = 57559
const RENAME = 57560
const ANALYZE = 57561
const ADD = 57562
const RETURNS = 57563
const SCHEMA = 57564
const TABLE = 57565
const SEQUENCE = 57566
const INDEX = 57567
const VIEW = 57568
const TO = 57569
const IGNORE = 57570
const IF = 57571
const PRIMARY = 57572
const COLUMN = 57573
const CONSTRAINT = 57574
const SPATIAL = 57575
const FULLTEXT = 57576
const FOREIGN = 57577
const KEY_BLOCK_SIZE = 57578
const SHOW = 57579
const DESCRIBE = 57580
const EXPLAIN = 57581
const DATE = 57582
const ESCAPE = 57583
const REPAIR = 57584
const OPTIMIZE = 57585
const TRUNCATE = 57586
const MAXVALUE = 57587
const PARTITION = 57588
const REORGANIZE = 57589
const LESS = 57590
const THAN = 57591
const PROCEDURE = 57592
const TRIGGER = 57593
const STATUS = 57594
const VARIABLES = 57595
const ROLE = 57596
const PROXY = 57597
const AVG_ROW_LENGTH = 57598
const STORAGE = 57599
const DISK = 57600
const MEMORY = 57601
const CHECKSUM = 57602
const COMPRESSION = 57603
const DATA = 57604
const DIRECTORY = 57605
const DELAY_KEY_WRITE = 57606
const ENCRYPTION = 57607
const ENGINE = 57608
const MAX_ROWS = 57609
const MIN_ROWS = 57610
const PACK_KEYS = 57611
const ROW_FORMAT = 57612
const STATS_AUTO_RECALC = 57613
const STATS_PERSISTENT = 57614
const STATS_SAMPLE_PAGES = 57615
const DYNAMIC = 57616
const COMPRESSED = 57617
const REDUNDANT = 57618
const COMPACT = 57619
const FIXED = 57620
const COLUMN_FORMAT = 57621
const AUTO_RANDOM = 57622
const ENGINE_ATTRIBUTE = 57623
const SECONDARY_ENGINE_ATTRIBUTE = 57624
const INSERT_METHOD = 57625
const RESTRICT = 57626
const CASCADE = 57627
const ACTION = 57628
const PARTIAL = 57629
const SIMPLE = 57630
const CHECK = 57631
const ENFORCED = 57632
const RANGE = 57633
const LIST = 57634
const ALGORITHM = 57635
const LINEAR = 57636
const PARTITIONS = 57637
const SUBPARTITION = 57638
const SUBPARTITIONS = 57639
const CLUSTER = 57640
const TYPE = 57641
const ANY = 57642
const SOME = 57643
const EXTERNAL = 57644
const LOCALFILE = 57645
const URL = 57646
const PREPARE = 57647
const DEALLOCATE = 57648
const RESET = 57649
const EXTENSION = 57650
const RETENTION = 57651
const PERIOD = 57652
const INCREMENT = 57653
const CYCLE = 57654
const MINVALUE = 57655
const PUBLICATION = 57656
const SUBSCRIPTIONS = 57657
const PUBLICATIONS = 57658
const PROPERTIES = 57659
const PARSER = 57660
const VISIBLE = 57661
const INVISIBLE = 57662
const BTREE = 57663
const HASH = 57664
const RTREE = 57665
const BSI = 57666
const IVFFLAT = 57667
const MASTER = 57668
const ZONEMAP = 57669
const LEADING = 57670
const BOTH = 57671
const TRAILING = 57672
const UNKNOWN = 57673
const LISTS = 57674
const OP_TYPE = 57675
const REINDEX = 57676
const EXPIRE = 57677
const ACCOUNT = 57678
const ACCOUNTS = 57679
const UNLOCK = 57680
const DAY = 57681
const NEVER = 57682
const PUMP = 57683
const MYSQL_COMPATIBILITY_MODE = 57684
const UNIQUE_CHECK_ON_AUTOINCR = 57685
const MODIFY = 57686
const CHANGE = 57687
const SECOND = 57688
const ASCII = 57689
const COALESCE = 57690
const COLLATION = 57691
const HOUR = 57692
const MICROSECOND = 57693
const MINUTE = 57694
const MONTH = 57695
const QUARTER = 57696
const REPEAT = 57697
const REVERSE = 57698
const ROW_COUNT = 57699
const WEEK = 57700
const REVOKE = 57701
const FUNCTION = 57702
const PRIVILEGES = 57703
const TABLESPACE = 57704
const EXECUTE = 57705
const SUPER = 57706
const GRANT = 57707
const OPTION = 57708
const REFERENCES = 57709
const REPLICATION = 57710
const SLAVE = 57711
const CLIENT = 57712
const USAGE = 57713
const RELOAD = 57714
const FILE = 57715
const TEMPORARY = 57716
const ROUTINE = 57717
const EVENT = 57718
const SHUTDOWN = 57719
const NULLX = 57720
const AUTO_INCREMENT = 57721
const APPROXNUM = 57722
const SIGNED = 57723
const UNSIGNED = 57724
const ZEROFILL = 57725
const ENGINES = 57726
const LOW_CARDINALITY = 57727
const AUTOEXTEND_SIZE = 57728
const ADMIN_NAME = 57729
const RANDOM = 57730
const SUSPEND = 57731
const ATTRIBUTE = 57732
const HISTORY = 57733
const REUSE = 57734
const CURRENT = 57735
const OPTIONAL = 57736
const FAILED_LOGIN_ATTEMPTS = 57737
const PASSWORD_LOCK_TIME = 57738
const UNBOUNDED = 57739
const SECONDARY = 57740
const RESTRICTED = 57741
const USER = 57742
const IDENTIFIED = 57743
const CIPHER = 57744
const ISSUER = 57745
const X509 = 57746
const SUBJECT = 57747
const SAN = 57748
const REQUIRE = 57749
const SSL = 57750
const NONE = 57751
const PASSWORD = 57752
const SHARED = 57753
const EXCLUSIVE = 57754
const MAX_QUERIES_PER_HOUR = 57755
const MAX_UPDATES_PER_HOUR = 57756
const MAX_CONNECTIONS_PER_HOUR = 57757
const MAX_USER_CONNECTIONS = 57758
const FORMAT = 57759
const VERBOSE = 57760
const CONNECTION = 57761
const TRIGGERS = 57762
const PROFILES = 57763
const LOAD = 57764
const INLINE = 57765
const INFILE = 57766
const TERMINATED = 57767
const OPTIONALLY = 57768
const ENCLOSED = 57769
const ESCAPED = 57770
const STARTING = 57771
const LINES = 57772
const ROWS = 57773
const IMPORT = 57774
const DISCARD = 57775
const JSONTYPE = 57776
const MODUMP = 57777
const OVER = 57778
const PRECEDING = 57779
const FOLLOWING = 57780
const GROUPS = 57781
const DATABASES = 57782
const TABLES = 57783
const SEQUENCES = 57784
const EXTENDED = 57785
const FULL = 57786
const PROCESSLIST = 57787
const FIELDS = 57788
const COLUMNS = 57789
const OPEN = 57790
const ERRORS = 57791
const WARNINGS = 57792
const INDEXES = 57793
const SCHEMAS = 57794
const NODE = 57795
const LOCKS = 57796
const ROLES = 57797
const TABLE_NUMBER = 57798
const COLUMN_NUMBER = 57799
const TABLE_VALUES = 57800
const TABLE_SIZE = 57801
const NAMES = 57802
const GLOBAL = 57803
const PERSIST = 57804
const SESSION = 57805
const ISOLATION = 57806
const LEVEL = 57807
const READ = 57808
const WRITE = 57809
const ONLY = 57810
const REPEATABLE = 57811
const COMMITTED = 57812
const UNCOMMITTED = 57813
const SERIALIZABLE = 57814
const LOCAL = 57815
const EVENTS = 57816
const PLUGINS = 57817
const CURRENT_TIMESTAMP = 57818
const DATABASE = 57819
const CURRENT_TIME = 57820
const LOCALTIME = 57821
const LOCALTIMESTAMP = 57822
const UTC_DATE = 57823
const UTC_TIME = 57824
const UTC_TIMESTAMP = 57825
const REPLACE = 57826
const CONVERT = 57827
const SEPARATOR = 57828
const TIMESTAMPDIFF = 57829
const CURRENT_DATE = 57830
const CURRENT_USER = 57831
const CURRENT_ROLE = 57832
const SECOND_MICROSECOND = 57833
const MINUTE_MICROSECOND = 57834
const MINUTE_SECOND = 57835
const HOUR_MICROSECOND = 57836
const HOUR_SECOND = 57837
const HOUR_MINUTE = 57838
const DAY_MICROSECOND = 57839
const DAY_SECOND = 57840
const DAY_MINUTE = 57841
const DAY_HOUR = 57842
const YEAR_MONTH = 57843
const SQL_TSI_HOUR = 57844
const SQL_TSI_DAY = 57845
const SQL_TSI_WEEK = 57846
const SQL_TSI_MONTH = 57847
const SQL_TSI_QUARTER = 57848
const SQL_TSI_YEAR = 57849
const SQL_TSI_SECOND = 57850
const SQL_TSI_MINUTE = 57851
const RECURSIVE = 57852
const CONFIG = 57853
const DRAINER = 57854
const SOURCE = 57855
const STREAM = 57856
const HEADERS = 57857
const CONNECTOR = 57858
const CONNECTORS = 57859
const DAEMON = 57860
const PAUSE = 57861
const CANCEL = 57862
const TASK = 57863
const RESUME = 57864
const MATCH = 57865
const AGAINST = 57866
const BOOLEAN = 57867
const LANGUAGE = 57868
const WITH = 57869
const QUERY = 57870
const EXPANSION = 57871
const WITHOUT = 57872
const VALIDATION = 57873
const UPGRADE = 57874
const RETRY = 57875
const ADDDATE = 57876
const BIT_AND = 57877
const BIT_OR = 57878
const BIT_XOR = 57879
const CAST = 57880
const COUNT = 57881
const APPROX_COUNT = 57882
const APPROX_COUNT_DISTINCT = 57883
const SERIAL_EXTRACT = 57884
const APPROX_PERCENTILE = 57885
const CURDATE = 57886
const CURTIME = 57887
const DATE_ADD = 57888
const DATE_SUB = 57889
const EXTRACT = 57890
const GROUP_CONCAT = 57891
const MAX = 57892
const MID = 57893
const MIN = 57894
const NOW = 57895
const POSITION = 57896
const SESSION_USER = 57897
const STD = 57898
const STDDEV = 57899
const MEDIAN = 57900
const CLUSTER_CENTERS = 57901
const KMEANS = 57902
const STDDEV_POP = 57903
const STDDEV_SAMP = 57904
const SUBDATE = 57905
const SUBSTR = 57906
const SUBSTRING = 57907
const SUM = 57908
const SYSDATE = 57909
const SYSTEM_USER = 57910
const TRANSLATE = 57911
const TRIM = 57912
const VARIANCE = 57913
const VAR_POP = 57914
const VAR_SAMP = 57915
const AVG = 57916
const RANK = 57917
const ROW_NUMBER = 57918
const DENSE_RANK = 57919
const BIT_CAST = 57920
const BITMAP_BIT_POSITION = 57921
const BITMAP_BUCKET_NUMBER = 57922
const BITMAP_COUNT = 57923
const BITMAP_CONSTRUCT_AGG = 57924
const BITMAP_OR_AGG = 57925
const NEXTVAL = 57926
const SETVAL = 57927
const CURRVAL = 57928
const LASTVAL = 57929
const ARROW = 57930
const ROW = 57931
const OUTFILE = 57932
const HEADER = 57933
const MAX_FILE_SIZE = 57934
const FORCE_QUOTE = 57935
const PARALLEL = 57936
const STRICT = 57937
const UNUSED = 57938
const BINDINGS = 57939
const DO = 57940
const DECLARE = 57941
const LOOP = 57942
const WHILE = 57943
const LEAVE = 57944
const ITERATE = 57945
const UNTIL = 57946
const CALL = 57947
const PREV = 57948
const SLIDING = 57949
const FILL = 57950
const SPBEGIN = 57951
const BACKEND = 57952
const SERVERS = 57953
const HANDLER = 57954
const PERCENT = 57955
const SAMPLE = 57956
const MO_TS = 57957
const PITR = 57958
const CDC = 57959
const ROLLUP = 57960
const KILL = 57961
const BACKUP = 57962
const FILESYSTEM = 57963
const PARALLELISM = 57964
const RESTORE = 57965
const QUERY_RESULT = 57966

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"CROSS_L2",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"SNAPSHOTS",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"DATALINK",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"RETENTION",
	"PERIOD",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"UNIQUE_CHECK_ON_AUTOINCR",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UPGRADE",
	"RETRY",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"BITMAP_BIT_POSITION",
	"BITMAP_BUCKET_NUMBER",
	"BITMAP_COUNT",
	"BITMAP_CONSTRUCT_AGG",
	"BITMAP_OR_AGG",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"STRICT",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"MO_TS",
	"PITR",
	"CDC",
	"ROLLUP",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"RESTORE",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:12474

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 133,
	11, 776,
	22, 776,
	-2, 769,
	-1, 156,
	240, 1187,
	242, 1086,
	-2, 1133,
	-1, 183,
	43, 599,
	242, 599,
	269, 606,
	270, 606,
	468, 599,
	-2, 634,
	-1, 223,
	645, 1946,
	-2, 509,
	-1, 525,
	645, 2066,
	-2, 394,
	-1, 583,
	645, 2125,
	-2, 392,
	-1, 584,
	645, 2126,
	-2, 393,
	-1, 585,
	645, 2127,
	-2, 395,
	-1, 719,
	321, 178,
	440, 178,
	441, 178,
	-2, 1851,
	-1, 785,
	83, 1637,
	-2, 2002,
	-1, 786,
	83, 1655,
	-2, 1973,
	-1, 790,
	83, 1656,
	-2, 2001,
	-1, 823,
	83, 1564,
	-2, 2200,
	-1, 824,
	83, 1565,
	-2, 2199,
	-1, 825,
	83, 1566,
	-2, 2189,
	-1, 826,
	83, 2161,
	-2, 2182,
	-1, 827,
	83, 2162,
	-2, 2183,
	-1, 828,
	83, 2163,
	-2, 2191,
	-1, 829,
	83, 2164,
	-2, 2171,
	-1, 830,
	83, 2165,
	-2, 2180,
	-1, 831,
	83, 2166,
	-2, 2192,
	-1, 832,
	83, 2167,
	-2, 2193,
	-1, 833,
	83, 2168,
	-2, 2198,
	-1, 834,
	83, 2169,
	-2, 2203,
	-1, 835,
	83, 2170,
	-2, 2204,
	-1, 836,
	83, 1633,
	-2, 2040,
	-1, 837,
	83, 1634,
	-2, 1835,
	-1, 838,
	83, 1635,
	-2, 2049,
	-1, 839,
	83, 1636,
	-2, 1844,
	-1, 841,
	83, 1639,
	-2, 1852,
	-1, 842,
	83, 1640,
	-2, 2073,
	-1, 844,
	83, 1643,
	-2, 1871,
	-1, 846,
	83, 1645,
	-2, 2085,
	-1, 847,
	83, 1646,
	-2, 2084,
	-1, 848,
	83, 1647,
	-2, 1915,
	-1, 849,
	83, 1648,
	-2, 1997,
	-1, 852,
	83, 1651,
	-2, 2096,
	-1, 854,
	83, 1653,
	-2, 2099,
	-1, 855,
	83, 1654,
	-2, 2101,
	-1, 856,
	83, 1657,
	-2, 2109,
	-1, 857,
	83, 1658,
	-2, 1982,
	-1, 858,
	83, 1659,
	-2, 2027,
	-1, 859,
	83, 1660,
	-2, 1992,
	-1, 860,
	83, 1661,
	-2, 2017,
	-1, 871,
	83, 1542,
	-2, 2194,
	-1, 872,
	83, 1543,
	-2, 2195,
	-1, 873,
	83, 1544,
	-2, 2196,
	-1, 972,
	463, 634,
	464, 634,
	-2, 600,
	-1, 1022,
	125, 1835,
	136, 1835,
	156, 1835,
	-2, 1809,
	-1, 1139,
	22, 803,
	-2, 752,
	-1, 1245,
	11, 776,
	22, 776,
	-2, 1422,
	-1, 1327,
	22, 803,
	-2, 752,
	-1, 1671,
	83, 1708,
	-2, 1999,
	-1, 1672,
	83, 1709,
	-2, 2000,
	-1, 1841,
	84, 958,
	-2, 964,
	-1, 2287,
	108, 1125,
	152, 1125,
	191, 1125,
	194, 1125,
	282, 1125,
	-2, 1118,
	-1, 2442,
	11, 776,
	22, 776,
	-2, 899,
	-1, 2475,
	84, 1795,
	157, 1795,
	-2, 1984,
	-1, 2476,
	84, 1795,
	157, 1795,
	-2, 1983,
	-1, 2477,
	84, 1771,
	157, 1771,
	-2, 1970,
	-1, 2478,
	84, 1772,
	157, 1772,
	-2, 1975,
	-1, 2479,
	84, 1773,
	157, 1773,
	-2, 1903,
	-1, 2480,
	84, 1774,
	157, 1774,
	-2, 1897,
	-1, 2481,
	84, 1775,
	157, 1775,
	-2, 1825,
	-1, 2482,
	84, 1776,
	157, 1776,
	-2, 1972,
	-1, 2483,
	84, 1777,
	157, 1777,
	-2, 1901,
	-1, 2484,
	84, 1778,
	157, 1778,
	-2, 1896,
	-1, 2485,
	84, 1779,
	157, 1779,
	-2, 1885,
	-1, 2486,
	84, 1795,
	157, 1795,
	-2, 1886,
	-1, 2487,
	84, 1795,
	157, 1795,
	-2, 1887,
	-1, 2489,
	84, 1784,
	157, 1784,
	-2, 2017,
	-1, 2490,
	84, 1761,
	157, 1761,
	-2, 2002,
	-1, 2491,
	84, 1793,
	157, 1793,
	-2, 1973,
	-1, 2492,
	84, 1793,
	157, 1793,
	-2, 2001,
	-1, 2493,
	84, 1793,
	157, 1793,
	-2, 1853,
	-1, 2494,
	84, 1791,
	157, 1791,
	-2, 1992,
	-1, 2495,
	84, 1788,
	157, 1788,
	-2, 1876,
	-1, 2496,
	83, 1742,
	84, 1742,
	157, 1742,
	398, 1742,
	399, 1742,
	400, 1742,
	-2, 1824,
	-1, 2497,
	83, 1743,
	84, 1743,
	157, 1743,
	398, 1743,
	399, 1743,
	400, 1743,
	-2, 1826,
	-1, 2498,
	83, 1744,
	84, 1744,
	157, 1744,
	398, 1744,
	399, 1744,
	400, 1744,
	-2, 2045,
	-1, 2499,
	83, 1746,
	84, 1746,
	157, 1746,
	398, 1746,
	399, 1746,
	400, 1746,
	-2, 1974,
	-1, 2500,
	83, 1748,
	84, 1748,
	157, 1748,
	398, 1748,
	399, 1748,
	400, 1748,
	-2, 1955,
	-1, 2501,
	83, 1750,
	84, 1750,
	157, 1750,
	398, 1750,
	399, 1750,
	400, 1750,
	-2, 1902,
	-1, 2502,
	83, 1752,
	84, 1752,
	157, 1752,
	398, 1752,
	399, 1752,
	400, 1752,
	-2, 1881,
	-1, 2503,
	83, 1753,
	84, 1753,
	157, 1753,
	398, 1753,
	399, 1753,
	400, 1753,
	-2, 1882,
	-1, 2504,
	83, 1755,
	84, 1755,
	157, 1755,
	398, 1755,
	399, 1755,
	400, 1755,
	-2, 1823,
	-1, 2505,
	84, 1798,
	157, 1798,
	398, 1798,
	399, 1798,
	400, 1798,
	-2, 1858,
	-1, 2506,
	84, 1798,
	157, 1798,
	398, 1798,
	399, 1798,
	400, 1798,
	-2, 1872,
	-1, 2507,
	84, 1801,
	157, 1801,
	398, 1801,
	399, 1801,
	400, 1801,
	-2, 1854,
	-1, 2508,
	84, 1801,
	157, 1801,
	398, 1801,
	399, 1801,
	400, 1801,
	-2, 1918,
	-1, 2509,
	84, 1798,
	157, 1798,
	398, 1798,
	399, 1798,
	400, 1798,
	-2, 1939,
	-1, 2722,
	108, 1125,
	152, 1125,
	191, 1125,
	194, 1125,
	282, 1125,
	-2, 1119,
	-1, 2740,
	81, 696,
	157, 696,
	-2, 1303,
	-1, 3154,
	194, 1125,
	306, 1390,
	-2, 1362,
	-1, 3333,
	108, 1125,
	152, 1125,
	191, 1125,
	194, 1125,
	-2, 1243,
	-1, 3335,
	108, 1125,
	152, 1125,
	191, 1125,
	194, 1125,
	-2, 1243,
	-1, 3347,
	81, 696,
	157, 696,
	-2, 1303,
	-1, 3368,
	194, 1125,
	306, 1390,
	-2, 1363,
	-1, 3518,
	108, 1125,
	152, 1125,
	191, 1125,
	194, 1125,
	-2, 1244,
	-1, 3546,
	84, 1205,
	157, 1205,
	-2, 1125,
	-1, 3687,
	84, 1205,
	157, 1205,
	-2, 1125,
	-1, 3847,
	84, 1209,
	157, 1209,
	-2, 1125,
	-1, 3895,
	84, 1210,
	157, 1210,
	-2, 1125,
}

const yyPrivate = 57344

const yyLast = 51652

var yyAct = [...]int{
	752, 729, 3941, 754, 3915, 2770, 212, 3934, 3851, 1927,
	1651, 3857, 3353, 3850, 3449, 3775, 3858, 3173, 3749, 3687,
	3140, 3806, 738, 3728, 3245, 2764, 3574, 3382, 1647, 3665,
	731, 2564, 3632, 3722, 1280, 1422, 3246, 3686, 3505, 3753,
	1487, 3506, 3503, 2682, 2767, 3604, 620, 782, 1021, 1140,
	3656, 3315, 3453, 3729, 3731, 1428, 1564, 1874, 3320, 3444,
	638, 1698, 644, 644, 2334, 3149, 3527, 1134, 644, 661,
	670, 1654, 3515, 670, 3097, 3485, 3369, 3071, 727, 3520,
	3111, 3336, 3243, 2743, 2021, 3100, 2473, 2880, 3305, 37,
	2878, 2879, 2859, 3338, 2793, 1712, 3169, 3151, 3285, 3158,
	2599, 197, 2773, 2058, 2875, 3231, 2471, 2133, 2942, 2436,
	2337, 2902, 2035, 3211, 1887, 2711, 1576, 2018, 2298, 678,
	3082, 3076, 1985, 682, 2091, 1480, 3078, 1130, 3120, 3069,
	721, 3074, 3073, 2723, 2367, 3072, 2242, 2266, 3157, 132,
	36, 65, 2241, 3046, 2116, 726, 2543, 2100, 1804, 2129,
	2099, 2989, 2915, 1553, 2525, 2014, 2092, 1560, 667, 945,
	2064, 2925, 1568, 1565, 2437, 2424, 2128, 2700, 1988, 2695,
	2795, 2775, 2419, 2335, 1917, 2735, 208, 8, 2297, 2287,
	2469, 207, 7, 6, 1358, 1645, 1078, 2130, 620, 1391,
	2163, 1850, 730, 1596, 1015, 637, 1527, 1496, 1465, 720,
	2278, 1411, 2140, 1705, 1685, 1575, 1650, 2632, 1886, 15,
	1986, 739, 212, 1636, 212, 1153, 1069, 1070, 1394, 27,
	2330, 2098, 1579, 644, 33, 2080, 1534, 2095, 675, 16,
	2054, 1644, 981, 1014, 1464, 1846, 2444, 1849, 2420, 653,
	619, 1825, 875, 14, 1432, 656, 23, 722, 1518, 1713,
	1423, 685, 728, 944, 1431, 684, 108, 1462, 190, 1407,
	198, 24, 17, 10, 1526, 921, 942, 2631, 194, 927,
	1325, 1281, 2137, 669, 681, 877, 967, 3740, 665, 878,
	3650, 2667, 195, 61, 186, 157, 2446, 2667, 666, 2667,
	1066, 1048, 2959, 663, 3350, 679, 3127, 2958, 662, 2147,
	187, 1135, 935, 3478, 936, 3323, 3238, 178, 1136, 2587,
	1817, 188, 664, 1065, 2531, 1067, 2529, 1213, 1214, 1215,
	1212, 2526, 2528, 1541, 649, 1213, 1214, 1215, 1212, 640,
	131, 1027, 1029, 1030, 1537, 1061, 1213, 1214, 1215, 1212,
	1062, 916, 722, 1062, 1062, 118, 673, 196, 639, 2240,
	3712, 1344, 191, 897, 895, 930, 2246, 926, 1818, 1135,
	1588, 1001, 3056, 1049, 2250, 1347, 3039, 3041, 3036, 3038,
	3926, 1445, 1811, 8, 1340, 1539, 3442, 2938, 7, 2936,
	1060, 1587, 2659, 2657, 2069, 1213, 1214, 1215, 1212, 3717,
	3611, 3605, 645, 1213, 1214, 1215, 1212, 3445, 3244, 2113,
	1275, 3733, 2094, 876, 3016, 2086, 195, 195, 61, 186,
	157, 2375, 3832, 907, 3672, 1211, 3490, 887, 195, 2581,
	1175, 1353, 2573, 3486, 2661, 195, 61, 186, 157, 139,
	140, 3337, 141, 142, 2134, 1043, 1038, 1033, 1037, 1041,
	2289, 1574, 195, 3637, 195, 61, 186, 157, 3786, 1826,
	195, 195, 896, 894, 131, 1829, 3014, 1504, 3673, 1352,
	1583, 1350, 195, 1046, 195, 897, 1025, 1036, 2288, 1594,
	1026, 895, 195, 61, 186, 157, 191, 191, 1031, 680,
	2145, 195, 1354, 1617, 1366, 932, 2729, 925, 191, 1151,
	1580, 1383, 1820, 2873, 2282, 191, 929, 928, 2961, 1591,
	2463, 156, 184, 193, 185, 116, 996, 994, 1605, 995,
	2950, 1210, 1582, 910, 191, 2684, 2450, 917, 1044, 2449,
	191, 1593, 2451, 183, 177, 176, 888, 1047, 1637, 131,
	67, 1641, 191, 3639, 2727, 2031, 1148, 924, 195, 61,
	186, 157, 191, 2464, 1441, 2909, 2910, 1442, 3040, 1034,
	3037, 191, 2908, 2685, 892, 1640, 934, 1998, 1999, 1997,
	866, 923, 865, 867, 868, 922, 869, 870, 1831, 1832,
	3144, 909, 3829, 1045, 1466, 2544, 1468, 915, 3142, 2697,
	1429, 1430, 3861, 3862, 2730, 1190, 1419, 990, 1191, 2698,
	2229, 179, 180, 181, 1901, 3466, 1203, 1002, 3720, 913,
	1653, 1208, 1024, 1183, 1023, 1427, 1185, 3736, 191, 1426,
	1429, 1430, 3735, 1035, 3736, 3819, 1193, 3734, 1365, 998,
	1540, 1538, 1747, 3882, 189, 3825, 156, 1626, 193, 1156,
	2943, 2662, 3735, 3818, 1186, 1444, 3808, 933, 2696, 3811,
	2814, 1642, 644, 644, 3247, 127, 3919, 3920, 183, 182,
	2944, 128, 2945, 644, 1144, 3834, 3835, 3247, 3734, 3817,
	3608, 3808, 1156, 914, 2568, 1639, 1145, 1657, 3830, 3831,
	2149, 2703, 670, 670, 3746, 644, 3723, 3724, 3725, 3726,
	3260, 2015, 2005, 1000, 1632, 3306, 2141, 2009, 3495, 3313,
	1042, 3083, 2687, 2979, 2686, 3093, 2410, 2277, 1188, 3641,
	3642, 2077, 933, 1547, 1546, 1072, 3394, 3827, 129, 1206,
	1207, 2977, 1205, 2578, 182, 2373, 1179, 1178, 2865, 1195,
	3443, 60, 1196, 2937, 2413, 2414, 1039, 3087, 2412, 1040,
	3646, 3492, 3098, 3820, 2680, 3465, 2146, 3629, 1253, 3860,
	931, 716, 1181, 3467, 718, 2466, 2660, 667, 667, 717,
	1198, 3409, 3289, 2418, 1184, 1187, 1143, 2124, 3172, 1200,
	999, 1455, 1189, 3091, 3739, 1343, 636, 3649, 3263, 3146,
	62, 1367, 2681, 1137, 2983, 3406, 2666, 3170, 3171, 920,
	1180, 1136, 1638, 1136, 1144, 1417, 1656, 1655, 1136, 2029,
	2030, 3890, 3109, 1663, 1666, 1667, 3121, 3677, 1443, 1027,
	1029, 1030, 3601, 1170, 1664, 137, 192, 2135, 138, 2135,
	1201, 1202, 3669, 158, 1284, 2152, 2154, 2155, 58, 3088,
	3089, 2135, 2247, 3768, 1819, 1589, 1062, 1158, 1157, 1050,
	1032, 2136, 1194, 3763, 1062, 3090, 1062, 2736, 2861, 1192,
	1062, 3085, 2405, 672, 671, 3099, 1136, 1150, 2871, 1247,
	2960, 668, 890, 2148, 1062, 1062, 2284, 1182, 2957, 3671,
	1158, 1157, 3399, 3833, 3047, 3754, 3770, 665, 665, 2168,
	668, 1199, 1027, 1029, 1030, 3354, 3776, 666, 666, 908,
	906, 3141, 663, 663, 130, 45, 1285, 662, 662, 2527,
	891, 59, 1346, 2769, 1348, 5, 1197, 1542, 668, 997,
	2262, 664, 664, 1147, 1149, 134, 135, 1159, 3298, 136,
	1363, 638, 3361, 62, 3575, 3576, 3577, 3581, 3579, 3580,
	3578, 1139, 1406, 876, 1323, 1138, 3636, 1328, 1167, 1026,
	1627, 192, 62, 1628, 3175, 3296, 2340, 158, 158, 3491,
	3060, 3099, 2582, 2658, 945, 1163, 1164, 2408, 3410, 158,
	1429, 1430, 1254, 2385, 1169, 1827, 158, 3678, 1429, 1430,
	62, 3952, 3745, 3640, 668, 2765, 2766, 3565, 2769, 1821,
	2384, 1132, 3670, 158, 3456, 158, 3297, 3623, 935, 3624,
	936, 158, 158, 3937, 2702, 1161, 1249, 1250, 1251, 1252,
	2406, 2407, 2709, 158, 991, 158, 3560, 644, 3147, 1476,
	1457, 3554, 1425, 158, 644, 3084, 2466, 620, 620, 2980,
	3094, 1418, 158, 1475, 1168, 3643, 1404, 620, 620, 2016,
	1403, 1491, 1491, 2353, 644, 2815, 62, 2816, 2817, 2333,
	2356, 893, 1402, 3626, 1421, 1420, 3777, 1665, 3107, 3826,
	3691, 2706, 2707, 3086, 3849, 670, 1519, 638, 3657, 1489,
	1489, 3150, 1530, 1530, 1131, 3035, 2705, 2376, 3496, 2153,
	3339, 2350, 1493, 212, 3625, 1244, 1296, 1297, 2333, 158,
	3170, 3171, 620, 3250, 2339, 1498, 2006, 993, 1633, 2341,
	992, 2008, 3440, 1359, 680, 3805, 1463, 2355, 2904, 2906,
	3738, 3475, 1360, 1361, 3166, 3051, 1175, 2574, 1370, 1371,
	1372, 1373, 1374, 2843, 1376, 2455, 1364, 2371, 2138, 2004,
	1382, 1983, 1375, 3202, 1456, 2715, 2718, 2719, 2720, 2716,
	2717, 3938, 2982, 1381, 1572, 1380, 3174, 2672, 1823, 1577,
	1379, 2343, 2354, 2342, 1548, 1378, 1586, 1003, 3623, 674,
	3624, 3299, 2150, 2151, 1485, 1486, 3167, 1329, 1327, 1388,
	2920, 2921, 939, 940, 941, 991, 3618, 3567, 2812, 3286,
	937, 1615, 1413, 1414, 2677, 1368, 902, 1397, 3108, 2255,
	3690, 2164, 2991, 2990, 1405, 1491, 1398, 1491, 1144, 2257,
	2256, 1415, 1369, 1174, 2261, 991, 1610, 1611, 1595, 1434,
	1435, 1834, 1437, 1438, 3626, 1439, 2834, 2835, 1357, 2370,
	1835, 1470, 1472, 1408, 1412, 1412, 1412, 1833, 1355, 1356,
	1390, 1483, 1484, 3476, 3312, 3053, 2254, 901, 898, 2397,
	1581, 904, 903, 3848, 3528, 3625, 899, 1592, 1408, 1408,
	3561, 3562, 934, 1551, 3960, 1554, 1555, 3953, 993, 2741,
	667, 992, 1520, 1446, 1447, 1491, 1433, 1556, 1557, 1436,
	1634, 3556, 1625, 3935, 3936, 3555, 3815, 2905, 1562, 1563,
	1585, 1474, 1711, 2344, 2198, 1211, 1543, 2197, 993, 2057,
	2349, 992, 1030, 1699, 2347, 3208, 1760, 2269, 1614, 1030,
	1652, 2466, 1635, 1567, 1570, 1141, 1571, 1613, 3619, 649,
	1450, 1451, 3730, 1453, 1454, 1499, 1458, 1459, 1460, 3945,
	2270, 2271, 2280, 3251, 1511, 1673, 1674, 1675, 1676, 1677,
	1678, 1679, 1680, 1681, 1682, 1683, 1684, 1531, 1517, 3204,
	2833, 1696, 1697, 1532, 3948, 1175, 1649, 1173, 3943, 1506,
	1507, 1508, 1509, 1510, 3932, 1512, 1513, 1514, 1515, 1516,
	1211, 3897, 1144, 1522, 1523, 1524, 1525, 1004, 1822, 3168,
	2673, 1824, 3126, 2844, 2846, 2847, 2848, 2845, 1630, 1802,
	665, 1838, 1839, 1745, 1668, 2546, 1519, 3869, 3863, 1769,
	666, 1847, 1491, 1852, 1853, 663, 1855, 1457, 644, 2742,
	662, 1646, 1623, 644, 3845, 3796, 1491, 1750, 1751, 1752,
	945, 1598, 1620, 1875, 664, 1603, 1604, 2143, 1606, 2313,
	1766, 3944, 1491, 1767, 3771, 723, 1619, 3898, 1457, 2055,
	2434, 1805, 1141, 661, 3898, 1399, 1399, 3302, 2279, 1624,
	1780, 1781, 1175, 1759, 1622, 1621, 1618, 1648, 2742, 1643,
	3262, 1211, 2234, 1900, 2177, 1213, 1214, 1215, 1212, 1801,
	3870, 3653, 1907, 1907, 1813, 1457, 3759, 1457, 1457, 3619,
	1687, 644, 644, 3620, 1974, 1847, 1978, 3846, 3653, 1491,
	1981, 1982, 3710, 1995, 1213, 1214, 1215, 1212, 1172, 3709,
	2573, 1742, 1743, 3179, 1746, 3177, 3045, 2143, 620, 3043,
	1491, 3012, 1761, 1053, 1058, 1059, 2435, 1213, 1214, 1215,
	1212, 1856, 1904, 1694, 1695, 1768, 3704, 1770, 1854, 1771,
	1772, 1773, 2923, 1213, 1214, 1215, 1212, 644, 1847, 1491,
	2176, 2040, 2689, 644, 644, 644, 678, 678, 3703, 3760,
	3702, 1808, 2663, 2050, 2051, 2052, 2053, 2563, 2551, 3701,
	2059, 2134, 1929, 2312, 2032, 3711, 2435, 212, 3681, 3680,
	212, 212, 2302, 212, 1996, 1173, 1976, 2326, 1774, 2174,
	2239, 1843, 1844, 1845, 2435, 3208, 2233, 2232, 1324, 1910,
	2205, 3652, 2125, 1858, 1859, 1860, 1861, 1803, 2027, 3653,
	2340, 2343, 880, 881, 882, 883, 1389, 1702, 1851, 1809,
	3415, 1477, 3350, 1760, 1760, 2102, 2927, 880, 881, 882,
	883, 3653, 1867, 3653, 1760, 1760, 2001, 3363, 2003, 3329,
	2010, 2118, 3653, 2024, 2025, 2744, 2576, 1228, 1881, 2022,
	2023, 2143, 2143, 2575, 1842, 1063, 1064, 1733, 1893, 3278,
	1068, 3274, 1884, 1885, 2567, 2042, 2043, 2044, 1909, 2017,
	1898, 2112, 1875, 2039, 3653, 1876, 1491, 2132, 2068, 1894,
	1895, 2071, 2072, 1872, 2074, 1871, 3187, 1408, 1878, 1879,
	1502, 2320, 1889, 2466, 2104, 1911, 1912, 2193, 2899, 1905,
	2178, 1412, 1883, 2123, 2638, 1851, 1888, 2062, 1890, 1891,
	3364, 3591, 3330, 1412, 2048, 1581, 2630, 1055, 1056, 1057,
	1906, 1908, 1897, 2589, 2571, 767, 133, 1600, 2559, 2126,
	1975, 133, 3279, 2553, 3275, 2548, 1980, 667, 1261, 1984,
	2540, 2538, 2536, 2344, 2000, 1160, 2002, 1128, 2339, 2333,
	2338, 2011, 2336, 2341, 1123, 1646, 2108, 3413, 2534, 3188,
	2301, 885, 1027, 1029, 1030, 1244, 2235, 1030, 2212, 2026,
	2097, 2435, 3131, 1027, 1029, 1030, 885, 1211, 2211, 2196,
	2038, 2097, 2187, 2037, 2045, 2046, 2974, 2034, 1395, 1211,
	2607, 650, 1396, 2186, 133, 900, 1211, 2302, 2185, 3764,
	2065, 2549, 2063, 2142, 3954, 1607, 2554, 2342, 2549, 3122,
	3529, 2161, 2162, 2541, 2539, 2535, 1749, 1748, 1122, 1118,
	1119, 1120, 1121, 1729, 2612, 2082, 2611, 2610, 2608, 3342,
	1726, 2535, 2114, 2302, 1728, 1725, 1727, 1731, 1732, 2234,
	3923, 1211, 1730, 3765, 1440, 2157, 3340, 2041, 2103, 1749,
	1748, 1211, 1211, 1479, 3530, 1211, 2111, 665, 2368, 2244,
	2245, 2109, 2248, 1481, 2122, 2251, 1211, 666, 1027, 1029,
	1030, 1211, 663, 3343, 1482, 3741, 2143, 662, 1608, 3651,
	3615, 721, 3558, 3557, 644, 644, 644, 3123, 2127, 1409,
	3341, 664, 2120, 2121, 2609, 3543, 3499, 3322, 1693, 644,
	644, 644, 644, 1229, 1230, 1231, 1232, 1233, 1234, 1235,
	1228, 3209, 2299, 2526, 1690, 1692, 1689, 1028, 1691, 3200,
	3194, 2156, 133, 2305, 1457, 3189, 2165, 3102, 1786, 2868,
	2867, 3124, 2206, 2207, 2158, 2209, 2713, 133, 905, 133,
	2668, 1687, 2216, 755, 765, 1395, 2586, 2552, 2170, 1396,
	1457, 2457, 2107, 756, 1478, 757, 761, 764, 760, 758,
	759, 1779, 1775, 1776, 1777, 1778, 2106, 2362, 1782, 1783,
	1784, 1785, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794,
	1795, 1796, 2105, 2159, 2160, 1385, 1736, 1737, 1738, 1739,
	1740, 1741, 1734, 1735, 1227, 1226, 1236, 1237, 1229, 1230,
	1231, 1232, 1233, 1234, 1235, 1228, 2066, 1410, 762, 1384,
	2317, 1146, 3236, 2200, 2319, 2596, 2321, 2520, 2369, 1706,
	1535, 2171, 2066, 1706, 1907, 1231, 1232, 1233, 1234, 1235,
	1228, 2439, 2439, 1995, 2439, 2613, 2614, 2929, 1215, 1212,
	763, 1837, 3816, 2236, 1212, 2228, 2230, 2231, 1213, 1214,
	1215, 1212, 3570, 620, 620, 1213, 1214, 1215, 1212, 3239,
	3569, 1144, 2946, 2804, 2322, 2802, 2530, 1491, 644, 2781,
	2779, 2340, 2343, 3549, 1213, 1214, 1215, 1212, 3928, 3951,
	2263, 3927, 644, 3237, 1213, 1214, 1215, 1212, 1144, 2510,
	638, 1284, 2332, 2331, 2281, 2461, 1530, 1263, 1995, 3500,
	3501, 2515, 2651, 2517, 2652, 1764, 3873, 212, 3844, 2374,
	1262, 3493, 2377, 2378, 2379, 2380, 2381, 2382, 2383, 3843,
	1765, 2386, 2387, 2388, 2389, 2390, 2391, 2392, 2393, 2394,
	2395, 2396, 2306, 2398, 2399, 2400, 2401, 2402, 3766, 2403,
	2683, 2441, 3950, 2445, 2325, 3310, 2318, 2556, 1213, 1214,
	1215, 1212, 3706, 3694, 3684, 2443, 2314, 2598, 2855, 2452,
	3674, 2453, 3606, 1285, 2569, 2853, 2622, 1400, 2132, 3494,
	1216, 3532, 1027, 1029, 1030, 1491, 3531, 1491, 1246, 1491,
	2458, 2459, 2345, 2346, 1144, 2351, 2181, 1256, 2309, 1412,
	2474, 2851, 2588, 2315, 2468, 3355, 2316, 1213, 1214, 1215,
	1212, 3344, 3309, 3311, 2344, 2579, 2522, 3190, 2521, 2339,
	2333, 2338, 1264, 2336, 2341, 3092, 2854, 2970, 1491, 2616,
	2514, 2415, 2941, 2852, 2940, 2328, 1219, 1220, 1221, 1222,
	1223, 1224, 1225, 1217, 2623, 2447, 2840, 2838, 3005, 1491,
	2837, 1213, 1214, 1215, 1212, 2189, 1489, 1470, 1472, 2850,
	1536, 1213, 1214, 1215, 1212, 2836, 2828, 2822, 2615, 1535,
	1213, 1214, 1215, 1212, 2821, 2462, 2465, 1489, 2342, 1236,
	1237, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1228, 2624,
	1213, 1214, 1215, 1212, 2820, 2511, 2583, 2670, 2671, 2565,
	2566, 2674, 2513, 2819, 2839, 2664, 2627, 2628, 3004, 2542,
	2600, 2454, 2600, 2238, 2085, 3854, 2084, 2083, 2079, 1144,
	2078, 2033, 2188, 1144, 1830, 1828, 2604, 1601, 1342, 2625,
	1491, 3752, 2712, 1457, 3316, 1213, 1214, 1215, 1212, 1978,
	3947, 2585, 1213, 1214, 1215, 1212, 3321, 2740, 3077, 1213,
	1214, 1215, 1212, 2746, 3946, 2580, 2561, 3471, 1213, 1214,
	1215, 1212, 2594, 3450, 716, 2572, 1126, 718, 2570, 2655,
	2577, 2756, 717, 1213, 1214, 1215, 1212, 3644, 3645, 3921,
	3889, 1144, 3888, 3885, 1213, 1214, 1215, 1212, 3823, 2778,
	3822, 1646, 3633, 133, 133, 1028, 1144, 1144, 1144, 1907,
	2590, 2591, 1144, 3803, 2788, 2789, 2790, 2791, 1144, 2798,
	3748, 2799, 2800, 2606, 2801, 3459, 2803, 2724, 3504, 3727,
	3783, 2690, 3458, 1125, 3718, 2474, 3698, 2798, 3693, 2725,
	2728, 3692, 2737, 3648, 3635, 3634, 3607, 3551, 3511, 2439,
	2757, 3497, 1213, 1214, 1215, 1212, 3479, 2710, 3477, 1213,
	1214, 1215, 1212, 2856, 3473, 3470, 1929, 3469, 3448, 3446,
	3423, 2759, 2699, 620, 3403, 3420, 3417, 2593, 1245, 1978,
	1454, 2860, 1144, 1995, 1995, 1995, 1995, 3308, 2747, 3307,
	3304, 3294, 1030, 3685, 3287, 1144, 1995, 2993, 1473, 2439,
	3271, 1213, 1214, 1215, 1212, 3269, 3197, 2776, 3196, 2784,
	2785, 2776, 2862, 2691, 2787, 3191, 1491, 1529, 1529, 3185,
	2794, 3184, 3103, 2692, 3064, 2694, 2772, 644, 644, 3063,
	2731, 2708, 3059, 3057, 3055, 2739, 3052, 8, 3050, 2633,
	2634, 2783, 7, 2243, 2745, 2639, 1851, 1227, 1226, 1236,
	1237, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1228, 2758,
	2984, 2761, 3266, 2981, 2810, 2811, 2939, 3779, 2774, 2913,
	2849, 3008, 2780, 1213, 1214, 1215, 1212, 2841, 2831, 2826,
	2827, 2786, 2777, 212, 2881, 2748, 2895, 2829, 212, 1213,
	1214, 1215, 1212, 1993, 2753, 2754, 2825, 2881, 1213, 1214,
	1215, 1212, 2824, 2823, 2678, 2864, 2676, 2818, 2669, 2665,
	1760, 2562, 1760, 2830, 2258, 2956, 2253, 3007, 822, 821,
	3101, 2924, 2771, 2252, 1330, 2249, 2088, 2081, 2969, 1836,
	1816, 1877, 1815, 2755, 1491, 1602, 1505, 2976, 1393, 2863,
	1351, 1349, 1292, 2869, 1213, 1214, 1215, 1212, 1288, 1287,
	1129, 889, 1892, 3628, 3627, 643, 643, 3616, 3472, 2894,
	3457, 651, 3335, 2898, 2896, 3334, 3333, 2866, 1899, 3301,
	3283, 1902, 1903, 2914, 3281, 3006, 3280, 1658, 1659, 1660,
	1661, 1662, 2911, 3277, 2930, 3276, 2897, 2649, 3270, 2934,
	1555, 3268, 1805, 2882, 2883, 2884, 2885, 2955, 2951, 3252,
	1556, 1557, 1213, 1214, 1215, 1212, 3242, 3241, 3227, 2962,
	1562, 1563, 2907, 3226, 1213, 1214, 1215, 1212, 3132, 1703,
	3067, 3042, 3010, 1707, 1708, 1709, 1710, 2998, 3003, 3000,
	1567, 1570, 1744, 1571, 3054, 2953, 2995, 2648, 2994, 2932,
	1754, 2928, 3058, 2988, 2931, 2963, 3061, 3062, 2978, 2922,
	1030, 2647, 2688, 2537, 1144, 2533, 2949, 2952, 2973, 2532,
	3080, 1030, 2954, 2947, 1213, 1214, 1215, 1212, 2966, 2965,
	3096, 2217, 1500, 2210, 2964, 644, 650, 2204, 1213, 1214,
	1215, 1212, 2646, 2972, 2203, 2202, 2201, 3112, 1144, 2199,
	2985, 644, 1806, 1144, 1144, 3540, 2195, 195, 2986, 186,
	157, 2194, 1995, 2299, 2192, 3130, 2183, 2180, 133, 1213,
	1214, 1215, 1212, 2179, 2992, 2175, 651, 2087, 1799, 3044,
	1798, 2996, 2997, 1797, 2362, 3001, 3002, 1763, 1762, 2999,
	1753, 1503, 1501, 3106, 3872, 195, 3156, 3066, 3159, 1282,
	3159, 3159, 3778, 3713, 3700, 1144, 3695, 1550, 3585, 1227,
	1226, 1236, 1237, 1229, 1230, 1231, 1232, 1233, 1234, 1235,
	1228, 3568, 2724, 3180, 3049, 1880, 3564, 191, 3542, 3176,
	3048, 1491, 1491, 3903, 2645, 3526, 133, 3433, 3431, 3115,
	3134, 3143, 3145, 133, 3119, 3401, 3178, 3065, 3400, 3397,
	1896, 1213, 1214, 1215, 1212, 3396, 133, 3362, 3359, 1489,
	1489, 1213, 1214, 1215, 1212, 191, 3357, 3324, 133, 1561,
	3139, 3181, 3182, 2173, 3795, 2644, 3105, 3114, 644, 1552,
	3154, 3129, 3117, 3118, 3128, 3080, 3125, 1027, 1029, 1030,
	1566, 1030, 1569, 1558, 1457, 3155, 1030, 1978, 1978, 1392,
	2857, 3164, 1213, 1214, 1215, 1212, 1806, 3138, 2782, 2733,
	2732, 1806, 1806, 2726, 2332, 2331, 2693, 3017, 3018, 3538,
	2650, 3793, 1030, 3019, 3020, 3021, 3022, 2547, 3023, 3024,
	3025, 3026, 3027, 3028, 3029, 3030, 3031, 3032, 3160, 3161,
	3165, 2456, 2404, 2300, 1144, 2272, 2237, 1688, 2616, 1213,
	1214, 1215, 1212, 191, 2047, 1841, 1812, 3240, 1631, 1584,
	1559, 2067, 1341, 1326, 2070, 1322, 1321, 2073, 2643, 1320,
	2075, 1319, 1318, 1227, 1226, 1236, 1237, 1229, 1230, 1231,
	1232, 1233, 1234, 1235, 1228, 1317, 3162, 2642, 1316, 1315,
	3186, 3901, 2641, 1314, 3137, 1213, 1214, 1215, 1212, 2640,
	1313, 3205, 3206, 644, 2421, 3192, 3199, 1312, 3203, 1311,
	3198, 3193, 3195, 1310, 1213, 1214, 1215, 1212, 3216, 1213,
	1214, 1215, 1212, 1309, 1308, 2117, 1213, 1214, 1215, 1212,
	1307, 1306, 1305, 3220, 1304, 3223, 3224, 3225, 1239, 1303,
	1243, 2426, 2430, 2431, 2432, 2427, 2474, 2428, 2433, 1302,
	3229, 2429, 1301, 1300, 3235, 1299, 1240, 1242, 1238, 2637,
	1241, 1227, 1226, 1236, 1237, 1229, 1230, 1231, 1232, 1233,
	1234, 1235, 1228, 2059, 3291, 1298, 1295, 3293, 3791, 3011,
	2636, 2307, 2308, 1294, 1293, 1291, 1213, 1214, 1215, 1212,
	1290, 2310, 2311, 1289, 3255, 3253, 1286, 1279, 1278, 1276,
	2600, 3259, 1275, 3272, 1274, 1273, 3254, 1213, 1214, 1215,
	1212, 1272, 1271, 1270, 3264, 3258, 1269, 1268, 1267, 644,
	1978, 1266, 1265, 1260, 3295, 2592, 1259, 1258, 2167, 1257,
	3328, 1177, 2172, 1227, 1226, 1236, 1237, 1229, 1230, 1231,
	1232, 1233, 1234, 1235, 1228, 1127, 2439, 1995, 3347, 1227,
	1226, 1236, 1237, 1229, 1230, 1231, 1232, 1233, 1234, 1235,
	1228, 3284, 2635, 3212, 3213, 3789, 3398, 3288, 1994, 2304,
	2286, 3365, 1165, 2184, 1144, 3859, 3290, 3215, 3300, 2714,
	2467, 2191, 2090, 3156, 1176, 3303, 3218, 1144, 2891, 1213,
	1214, 1215, 1212, 2892, 2889, 643, 1133, 3217, 1144, 2890,
	3412, 2888, 2887, 2208, 1491, 2886, 1142, 3547, 2213, 2214,
	2215, 2560, 117, 2218, 2219, 2220, 2221, 2222, 2223, 2224,
	2225, 2226, 2227, 644, 3319, 1978, 1386, 2550, 1166, 1144,
	1030, 3317, 1489, 2893, 3349, 2431, 2432, 1030, 64, 3395,
	2968, 3356, 133, 3358, 3414, 133, 133, 2372, 133, 1869,
	1870, 2512, 3352, 2584, 3388, 3345, 63, 3152, 212, 3153,
	2519, 3325, 3326, 3327, 3435, 3408, 2629, 3331, 3332, 3346,
	2545, 1144, 3436, 3424, 3256, 3257, 3366, 3427, 646, 3230,
	1967, 3437, 3402, 3404, 3407, 1864, 1865, 1866, 1028, 3405,
	1544, 133, 3411, 1213, 1214, 1215, 1212, 2619, 1597, 1028,
	2794, 3416, 3419, 1578, 647, 3422, 3418, 2565, 2566, 2595,
	3474, 2259, 2049, 133, 3429, 3426, 3428, 1171, 3075, 3482,
	3068, 3434, 648, 1144, 1213, 1214, 1215, 1212, 1204, 2760,
	3455, 2881, 2734, 3421, 2806, 3425, 1213, 1214, 1215, 1212,
	2324, 2807, 2808, 2809, 2295, 1144, 1491, 1491, 1873, 1840,
	3912, 3112, 1749, 1748, 1337, 1338, 1335, 1336, 3452, 3441,
	3480, 3481, 3451, 3519, 3697, 3519, 1333, 1334, 1331, 1332,
	3439, 3183, 2416, 2881, 1489, 1699, 3222, 2411, 1144, 3536,
	1144, 1979, 3513, 3514, 1449, 1448, 3509, 2916, 3539, 2260,
	3541, 2119, 1401, 1377, 1245, 1424, 3879, 1491, 3877, 3489,
	3488, 3837, 3813, 3487, 3812, 3810, 3484, 3755, 3510, 3714,
	3468, 3599, 3498, 3598, 3537, 644, 3447, 1144, 1144, 3273,
	3249, 1144, 1144, 3248, 3233, 1699, 3523, 1806, 3524, 1806,
	2357, 3512, 2327, 1599, 3232, 2104, 2926, 1399, 3292, 3535,
	2971, 3587, 2675, 3516, 2288, 1701, 3582, 3507, 1806, 1806,
	3545, 3349, 1875, 3395, 3596, 3572, 3573, 2182, 3552, 3583,
	3584, 3544, 1345, 3602, 3603, 3548, 3905, 3904, 3388, 1162,
	3904, 3550, 1213, 1214, 1215, 1212, 1491, 3905, 3566, 3228,
	1652, 1529, 1652, 3593, 1226, 1236, 1237, 1229, 1230, 1231,
	1232, 1233, 1234, 1235, 1228, 1030, 1141, 3630, 199, 3,
	1416, 3592, 72, 2, 1489, 3588, 2749, 3622, 3924, 3594,
	3925, 2752, 880, 881, 882, 883, 3614, 1141, 1, 3507,
	3507, 2656, 1810, 3507, 3507, 1339, 884, 879, 1467, 2448,
	3613, 2555, 3609, 2558, 2028, 1495, 1814, 886, 3617, 3621,
	2900, 2901, 945, 3221, 2903, 2679, 2139, 3666, 3660, 2870,
	1452, 2409, 2276, 3095, 1387, 938, 3460, 1461, 3461, 1755,
	1612, 1052, 1155, 1144, 3589, 1609, 1154, 1152, 3590, 1704,
	3647, 769, 2093, 3683, 2858, 2832, 3689, 1497, 3595, 3911,
	3940, 3871, 3914, 1629, 3654, 753, 3804, 3719, 3875, 3661,
	3721, 3612, 3455, 2144, 1209, 3663, 3662, 2597, 2948, 963,
	2603, 810, 3679, 3675, 780, 1277, 1144, 2617, 2618, 1590,
	3015, 1491, 3013, 1054, 779, 2620, 2621, 3314, 2426, 2430,
	2431, 2432, 2427, 2704, 2428, 2433, 3600, 3658, 2429, 2919,
	3668, 2626, 1051, 964, 3696, 2076, 3716, 3610, 1545, 1489,
	1549, 2323, 3676, 3774, 3705, 3546, 3148, 2768, 1573, 3769,
	3737, 3707, 3360, 3464, 3462, 3463, 686, 2007, 3744, 1658,
	1806, 3732, 618, 1012, 3586, 1652, 2089, 687, 2303, 3828,
	3699, 918, 2285, 919, 1144, 3715, 911, 2722, 2721, 1030,
	1669, 1218, 1686, 3033, 3034, 1255, 725, 2169, 2701, 3756,
	3383, 2912, 71, 70, 69, 68, 220, 771, 2442, 219,
	3742, 3631, 3502, 3800, 3916, 751, 3751, 750, 3507, 749,
	748, 747, 746, 3747, 2425, 3750, 2423, 3773, 2422, 1990,
	1989, 1144, 2056, 3758, 3110, 2797, 2792, 1918, 1916, 1491,
	2352, 3767, 3798, 2359, 3801, 1915, 3856, 3784, 2750, 2751,
	3788, 3790, 3792, 3794, 3785, 3772, 3708, 3563, 2842, 3802,
	3454, 3781, 1863, 2348, 1935, 2813, 1932, 1489, 1931, 3787,
	2805, 3559, 3553, 1994, 1963, 3664, 3518, 3367, 3368, 3797,
	3374, 2294, 133, 1077, 1073, 3809, 3507, 3807, 1491, 1075,
	1076, 3666, 1213, 1214, 1215, 1212, 1074, 2605, 3201, 2329,
	3070, 2268, 2267, 3821, 2265, 2264, 1362, 3847, 3743, 3824,
	2166, 3838, 3483, 3855, 3836, 2472, 1489, 2470, 1124, 3214,
	3840, 3210, 3841, 3842, 2101, 2115, 3757, 2967, 3839, 1991,
	1987, 3761, 3762, 3507, 1227, 1226, 1236, 1237, 1229, 1230,
	1231, 1232, 1233, 1234, 1235, 1228, 3864, 2872, 3865, 2417,
	3866, 3884, 3867, 3638, 3868, 3878, 1868, 3880, 3881, 3876,
	912, 3874, 3782, 2283, 41, 115, 105, 174, 1144, 3732,
	3883, 1733, 56, 173, 55, 113, 171, 54, 100, 3372,
	99, 112, 169, 53, 204, 203, 206, 3689, 205, 3893,
	202, 2523, 3894, 3896, 2524, 201, 1533, 3895, 200, 3814,
	3902, 3910, 3899, 3918, 3900, 3522, 3917, 874, 44, 43,
	175, 42, 106, 3906, 3907, 3908, 3909, 57, 3384, 40,
	39, 3929, 38, 1144, 3922, 34, 13, 12, 35, 22,
	21, 3375, 1616, 3930, 20, 3773, 3931, 3933, 26, 32,
	31, 1857, 3370, 3939, 3942, 126, 1862, 3392, 3393, 125,
	30, 124, 123, 3371, 122, 3133, 121, 120, 119, 29,
	3135, 3136, 2933, 19, 2935, 48, 47, 3949, 46, 9,
	3891, 111, 109, 28, 110, 3918, 3956, 107, 3917, 3955,
	103, 101, 83, 1806, 82, 3942, 3957, 81, 1806, 96,
	3376, 3961, 95, 94, 3886, 3887, 93, 92, 91, 2117,
	89, 90, 962, 80, 79, 78, 133, 77, 76, 98,
	104, 102, 87, 97, 1913, 1914, 133, 88, 86, 85,
	84, 75, 74, 73, 155, 1652, 154, 153, 152, 151,
	149, 150, 148, 147, 2987, 146, 145, 1729, 144, 143,
	49, 50, 51, 52, 1726, 165, 164, 166, 1728, 1725,
	1727, 1731, 1732, 168, 170, 167, 1730, 172, 3009, 162,
	160, 163, 161, 195, 61, 186, 157, 159, 66, 11,
	2036, 114, 18, 25, 4, 0, 2036, 2036, 2036, 0,
	0, 187, 0, 0, 0, 3391, 3207, 2338, 178, 0,
	0, 0, 188, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3219, 0, 0, 0, 0, 0, 0, 0,
	0, 131, 3380, 1227, 1226, 1236, 1237, 1229, 1230, 1231,
	1232, 1233, 1234, 1235, 1228, 0, 118, 0, 0, 0,
	0, 0, 0, 191, 3377, 3381, 3379, 3378, 1994, 1994,
	1994, 1994, 0, 0, 0, 0, 0, 698, 697, 704,
	694, 1994, 0, 0, 0, 0, 0, 0, 0, 701,
	702, 0, 703, 707, 0, 0, 688, 0, 0, 0,
	0, 0, 0, 0, 3386, 3387, 712, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1714,
	1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724,
	1736, 1737, 1738, 1739, 1740, 1741, 1734, 1735, 0, 0,
	139, 140, 1733, 141, 142, 0, 0, 0, 3163, 0,
	716, 0, 3394, 718, 0, 0, 0, 0, 717, 0,
	0, 0, 0, 0, 3373, 0, 0, 0, 133, 0,
	3385, 0, 0, 133, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 133, 0, 0, 0, 0, 0,
	951, 0, 0, 0, 0, 133, 0, 0, 0, 0,
	0, 0, 156, 184, 193, 185, 116, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 183, 177, 176, 0, 0, 0,
	0, 67, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3348, 0, 0, 0, 0,
	948, 949, 0, 0, 3351, 0, 0, 0, 0, 0,
	0, 991, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 689, 691, 690, 0,
	3390, 0, 179, 180, 181, 0, 696, 0, 1729, 0,
	0, 0, 0, 0, 0, 1726, 0, 0, 700, 1728,
	1725, 1727, 1731, 1732, 0, 715, 0, 1730, 0, 0,
	0, 0, 693, 0, 0, 189, 683, 2273, 2274, 2275,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2290, 2291, 2292, 2293, 127, 0, 0, 0,
	182, 0, 128, 0, 993, 0, 0, 992, 0, 0,
	0, 3265, 0, 1028, 0, 133, 3389, 0, 3267, 0,
	133, 0, 0, 0, 0, 0, 0, 1994, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 977, 133, 0, 0, 3282,
	0, 0, 0, 952, 0, 0, 0, 0, 0, 129,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 60, 0, 0, 0, 0, 0, 0, 0,
	954, 0, 0, 0, 695, 699, 705, 0, 706, 708,
	0, 0, 709, 710, 711, 0, 0, 713, 714, 0,
	1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723,
	1724, 1736, 1737, 1738, 1739, 1740, 1741, 1734, 1735, 0,
	0, 62, 3533, 3534, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 976, 974, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 137, 192, 0, 138,
	0, 1497, 0, 0, 158, 0, 0, 973, 0, 58,
	0, 0, 0, 0, 0, 2036, 0, 1964, 0, 947,
	0, 0, 1925, 0, 0, 0, 0, 0, 0, 0,
	953, 986, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1806, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1967, 1934, 982, 1806, 0, 0, 3430, 0,
	0, 3432, 1968, 1969, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 130, 45, 0, 3438, 0,
	0, 0, 59, 0, 0, 0, 0, 0, 1933, 0,
	983, 987, 0, 692, 0, 0, 134, 135, 0, 0,
	136, 0, 0, 0, 1941, 0, 0, 0, 0, 0,
	970, 0, 968, 972, 990, 0, 0, 0, 969, 966,
	965, 0, 971, 956, 957, 955, 958, 959, 960, 961,
	0, 988, 0, 989, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 984, 985, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1957, 0, 0, 0, 0, 0, 0, 0,
	0, 980, 0, 0, 0, 0, 0, 979, 0, 0,
	0, 0, 0, 0, 133, 0, 0, 0, 0, 0,
	0, 133, 975, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 698, 697, 704, 694, 0, 0,
	0, 0, 0, 0, 0, 0, 701, 702, 0, 703,
	707, 0, 0, 688, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 712, 1924, 1926, 1923, 0, 1920, 0,
	0, 0, 1994, 1945, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1951, 0, 0, 0, 0, 0,
	2738, 0, 1936, 0, 1919, 0, 0, 0, 0, 0,
	978, 0, 0, 0, 1939, 1973, 950, 946, 1940, 1942,
	1944, 0, 1946, 1947, 1948, 1952, 1953, 1954, 1956, 1959,
	1960, 1961, 0, 0, 0, 0, 0, 0, 0, 1949,
	1958, 1950, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1928, 0, 0, 0, 1964, 0, 0, 0, 0,
	1925, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1965, 0, 0, 1096, 0,
	0, 0, 0, 0, 3655, 0, 0, 0, 0, 0,
	1967, 1934, 0, 133, 0, 0, 0, 0, 0, 0,
	1968, 1969, 1921, 1922, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1962, 0, 0, 0, 0, 0, 1933, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1938, 0, 0,
	0, 0, 1941, 0, 1937, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 689, 691, 690, 0, 0, 1955, 0,
	2917, 2918, 0, 696, 0, 0, 0, 1943, 0, 0,
	0, 0, 0, 0, 0, 700, 0, 0, 0, 133,
	1971, 1970, 715, 0, 0, 0, 0, 0, 0, 693,
	1081, 0, 1264, 0, 1071, 0, 0, 0, 0, 0,
	1957, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1104, 1108, 1110, 1112, 1114, 1115, 1117, 0, 1122, 1118,
	1119, 1120, 1121, 0, 1099, 1100, 1101, 1102, 1079, 1080,
	1105, 0, 1082, 1930, 1084, 1085, 1086, 1087, 1083, 1088,
	1089, 1090, 1091, 1092, 1095, 1097, 1093, 1094, 1103, 0,
	0, 0, 0, 0, 0, 0, 1107, 1109, 1111, 1113,
	1116, 3780, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1924, 2763, 1923, 1966, 2762, 0, 1972, 0,
	0, 1945, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1951, 0, 1098, 0, 0, 0, 0, 0,
	0, 695, 699, 705, 0, 706, 708, 0, 0, 709,
	710, 711, 1939, 1973, 713, 714, 1940, 1942, 1944, 0,
	1946, 1947, 1948, 1952, 1953, 1954, 1956, 1959, 1960, 1961,
	0, 0, 0, 0, 0, 0, 0, 1949, 1958, 1950,
	0, 0, 0, 0, 3852, 0, 0, 0, 0, 1928,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 133, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1965, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1096, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1921, 1922, 0, 0, 0, 0, 0, 0, 3104, 0,
	0, 0, 0, 0, 0, 3852, 0, 0, 1962, 0,
	0, 0, 0, 0, 3116, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1938, 0, 0, 0, 0,
	0, 0, 1937, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3852, 0, 1955, 0, 0, 0,
	692, 0, 0, 0, 0, 1943, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1971, 1970,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1081, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3959, 0, 0, 0, 0, 0, 0, 0, 1104, 1108,
	1110, 1112, 1114, 1115, 1117, 0, 1122, 1118, 1119, 1120,
	1121, 1930, 1099, 1100, 1101, 1102, 1079, 1080, 1105, 0,
	1082, 2036, 1084, 1085, 1086, 1087, 1083, 1088, 1089, 1090,
	1091, 1092, 1095, 1097, 1093, 1094, 1103, 0, 0, 0,
	0, 0, 0, 0, 1107, 1109, 1111, 1113, 1116, 1106,
	0, 0, 0, 1966, 0, 0, 1972, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1098, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 787, 0, 0, 0, 0,
	0, 0, 0, 0, 385, 0, 509, 542, 531, 615,
	497, 0, 0, 0, 0, 0, 3261, 740, 0, 0,
	0, 325, 0, 0, 355, 546, 528, 538, 529, 514,
	515, 516, 523, 335, 517, 518, 519, 489, 520, 490,
	521, 522, 778, 545, 496, 414, 369, 563, 562, 0,
	0, 845, 853, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 732, 0, 0, 768, 822, 821,
	755, 765, 0, 0, 298, 218, 491, 611, 493, 492,
	756, 0, 757, 761, 764, 760, 758, 759, 0, 837,
	0, 0, 0, 2601, 2602, 0, 724, 736, 0, 741,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 733, 734, 0, 0, 0, 0, 788,
	0, 735, 2036, 0, 783, 762, 766, 0, 0, 0,
	0, 288, 420, 437, 299, 410, 450, 304, 417, 294,
	384, 407, 0, 0, 290, 435, 416, 366, 345, 346,
	289, 0, 402, 323, 337, 320, 382, 763, 786, 790,
	319, 859, 784, 445, 292, 0, 444, 381, 431, 436,
	367, 361, 0, 291, 433, 365, 360, 349, 327, 860,
	350, 351, 341, 393, 359, 394, 342, 371, 370, 372,
	0, 0, 0, 0, 0, 473, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 604,
	781, 0, 608, 0, 447, 0, 0, 843, 0, 0,
	0, 419, 0, 0, 352, 0, 2036, 1106, 785, 0,
	405, 387, 856, 0, 0, 403, 357, 432, 395, 438,
	421, 446, 399, 396, 283, 422, 322, 368, 295, 297,
	317, 324, 326, 328, 329, 377, 378, 390, 409, 423,
	424, 425, 321, 305, 404, 306, 339, 307, 284, 313,
	311, 314, 411, 315, 286, 391, 429, 0, 334, 400,
	364, 287, 363, 392, 428, 427, 296, 454, 460, 461,
	550, 0, 466, 632, 633, 634, 475, 0, 0, 480,
	481, 482, 484, 485, 486, 487, 551, 568, 535, 505,
	468, 559, 502, 506, 507, 571, 1757, 1756, 1758, 459,
	353, 354, 0, 332, 280, 281, 627, 841, 383, 573,
	606, 607, 498, 0, 855, 836, 838, 839, 842, 846,
	847, 848, 849, 850, 852, 854, 858, 626, 0, 552,
	567, 630, 566, 623, 389, 0, 408, 564, 511, 0,
	556, 530, 0, 557, 526, 561, 0, 500, 0, 415,
	440, 452, 469, 472, 501, 586, 587, 588, 285, 471,
	590, 591, 592, 593, 594, 595, 596, 589, 857, 533,
	510, 536, 451, 513, 512, 0, 0, 547, 789, 548,
	549, 373, 374, 375, 376, 844, 574, 303, 470, 398,
	0, 534, 0, 0, 0, 0, 0, 0, 3571, 0,
	539, 540, 537, 635, 0, 597, 598, 0, 0, 464,
	465, 331, 338, 483, 340, 302, 388, 333, 449, 347,
	0, 476, 541, 477, 600, 603, 601, 602, 380, 343,
	344, 412, 348, 358, 401, 448, 386, 406, 300, 439,
	413, 362, 527, 554, 866, 840, 865, 867, 868, 864,
	869, 870, 851, 745, 0, 796, 862, 861, 863, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	582, 581, 580, 579, 578, 577, 576, 575, 0, 0,
	524, 426, 312, 274, 308, 309, 316, 624, 621, 430,
	625, 0, 282, 504, 356, 0, 397, 330, 569, 570,
	0, 0, 829, 803, 804, 805, 742, 806, 800, 801,
	743, 802, 830, 794, 826, 827, 770, 797, 807, 825,
	808, 828, 831, 832, 871, 872, 814, 798, 246, 873,
	811, 833, 824, 823, 809, 795, 834, 835, 777, 772,
	812, 813, 799, 817, 818, 819, 744, 791, 792, 793,
	815, 816, 773, 774, 775, 776, 0, 0, 0, 455,
	456, 457, 479, 0, 441, 503, 622, 0, 0, 0,
	0, 0, 0, 0, 553, 565, 599, 0, 609, 610,
	612, 614, 820, 616, 418, 0, 617, 787, 628, 494,
	495, 629, 605, 0, 737, 0, 385, 0, 509, 542,
	531, 615, 497, 0, 0, 0, 0, 0, 0, 740,
	0, 0, 0, 325, 1807, 0, 355, 546, 528, 538,
	529, 514, 515, 516, 523, 335, 517, 518, 519, 489,
	520, 490, 521, 522, 778, 545, 496, 414, 369, 563,
	562, 0, 0, 845, 853, 0, 0, 0, 0, 0,
	0, 0, 0, 2019, 0, 0, 732, 0, 0, 768,
	822, 821, 755, 765, 0, 0, 298, 218, 491, 611,
	493, 492, 756, 0, 757, 761, 764, 760, 758, 759,
	0, 837, 0, 0, 0, 0, 0, 0, 724, 736,
	0, 741, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 733, 734, 0, 0, 0,
	0, 788, 0, 735, 0, 0, 2020, 762, 766, 0,
	0, 0, 0, 288, 420, 437, 299, 410, 450, 304,
	417, 294, 384, 407, 0, 0, 290, 435, 416, 366,
	345, 346, 289, 0, 402, 323, 337, 320, 382, 763,
	786, 790, 319, 859, 784, 445, 292, 0, 444, 381,
	431, 436, 367, 361, 0, 291, 433, 365, 360, 349,
	327, 860, 350, 351, 341, 393, 359, 394, 342, 371,
	370, 372, 0, 0, 0, 0, 0, 473, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 604, 781, 0, 608, 0, 447, 0, 0, 843,
	0, 0, 0, 419, 0, 0, 352, 0, 0, 0,
	785, 0, 405, 387, 856, 0, 0, 403, 357, 432,
	395, 438, 421, 446, 399, 396, 283, 422, 322, 368,
	295, 297, 317, 324, 326, 328, 329, 377, 378, 390,
	409, 423, 424, 425, 321, 305, 404, 306, 339, 307,
	284, 313, 311, 314, 411, 315, 286, 391, 429, 0,
	334, 400, 364, 287, 363, 392, 428, 427, 296, 454,
	460, 461, 550, 0, 466, 632, 633, 634, 475, 0,
	0, 480, 481, 482, 484, 485, 486, 487, 551, 568,
	535, 505, 468, 559, 502, 506, 507, 571, 0, 0,
	0, 459, 353, 354, 0, 332, 280, 281, 627, 841,
	383, 573, 606, 607, 498, 0, 855, 836, 838, 839,
	842, 846, 847, 848, 849, 850, 852, 854, 858, 626,
	0, 552, 567, 630, 566, 623, 389, 0, 408, 564,
	511, 0, 556, 530, 0, 557, 526, 561, 0, 500,
	0, 415, 440, 452, 469, 472, 501, 586, 587, 588,
	285, 471, 590, 591, 592, 593, 594, 595, 596, 589,
	857, 533, 510, 536, 451, 513, 512, 0, 0, 547,
	789, 548, 549, 373, 374, 375, 376, 844, 574, 303,
	470, 398, 0, 534, 0, 0, 0, 0, 0, 0,
	0, 0, 539, 540, 537, 635, 0, 597, 598, 0,
	0, 464, 465, 331, 338, 483, 340, 302, 388, 333,
	449, 347, 0, 476, 541, 477, 600, 603, 601, 602,
	380, 343, 344, 412, 348, 358, 401, 448, 386, 406,
	300, 439, 413, 362, 527, 554, 866, 840, 865, 867,
	868, 864, 869, 870, 851, 745, 0, 796, 862, 861,
	863, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 582, 581, 580, 579, 578, 577, 576, 575,
	0, 0, 524, 426, 312, 274, 308, 309, 316, 624,
	621, 430, 625, 0, 282, 504, 356, 0, 397, 330,
	569, 570, 0, 0, 829, 803, 804, 805, 742, 806,
	800, 801, 743, 802, 830, 794, 826, 827, 770, 797,
	807, 825, 808, 828, 831, 832, 871, 872, 814, 798,
	246, 873, 811, 833, 824, 823, 809, 795, 834, 835,
	777, 772, 812, 813, 799, 817, 818, 819, 744, 791,
	792, 793, 815, 816, 773, 774, 775, 776, 0, 0,
	0, 455, 456, 457, 479, 0, 441, 503, 622, 0,
	0, 0, 0, 0, 0, 0, 553, 565, 599, 0,
	609, 610, 612, 614, 820, 616, 418, 0, 617, 0,
	628, 494, 495, 629, 605, 0, 737, 195, 787, 0,
	0, 0, 0, 0, 0, 0, 0, 385, 0, 509,
	542, 531, 615, 497, 0, 0, 0, 0, 0, 0,
	740, 0, 0, 0, 325, 0, 0, 355, 546, 528,
	538, 529, 514, 515, 516, 523, 335, 517, 518, 519,
	489, 520, 490, 521, 522, 1248, 545, 496, 414, 369,
	563, 562, 0, 0, 845, 853, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 732, 0, 0,
	768, 822, 821, 755, 765, 0, 0, 298, 218, 491,
	611, 493, 492, 756, 0, 757, 761, 764, 760, 758,
	759, 0, 837, 0, 0, 0, 0, 0, 0, 724,
	736, 0, 741, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 733, 734, 0, 0,
	0, 0, 788, 0, 735, 0, 0, 783, 762, 766,
	0, 0, 0, 0, 288, 420, 437, 299, 410, 450,
	304, 417, 294, 384, 407, 0, 0, 290, 435, 416,
	366, 345, 346, 289, 0, 402, 323, 337, 320, 382,
	763, 786, 790, 319, 859, 784, 445, 292, 0, 444,
	381, 431, 436, 367, 361, 0, 291, 433, 365, 360,
	349, 327, 860, 350, 351, 341, 393, 359, 394, 342,
	371, 370, 372, 0, 0, 0, 0, 0, 473, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 604, 781, 0, 608, 0, 447, 0, 0,
	843, 0, 0, 0, 419, 0, 0, 352, 0, 0,
	0, 785, 0, 405, 387, 856, 0, 0, 403, 357,
	432, 395, 438, 421, 446, 399, 396, 283, 422, 322,
	368, 295, 297, 317, 324, 326, 328, 329, 377, 378,
	390, 409, 423, 424, 425, 321, 305, 404, 306, 339,
	307, 284, 313, 311, 314, 411, 315, 286, 391, 429,
	0, 334, 400, 364, 287, 363, 392, 428, 427, 296,
	454, 460, 461, 550, 0, 466, 632, 633, 634, 475,
	0, 0, 480, 481, 482, 484, 485, 486, 487, 551,
	568, 535, 505, 468, 559, 502, 506, 507, 571, 0,
	0, 0, 459, 353, 354, 0, 332, 280, 281, 627,
	841, 383, 573, 606, 607, 498, 0, 855, 836, 838,
	839, 842, 846, 847, 848, 849, 850, 852, 854, 858,
	626, 0, 552, 567, 630, 566, 623, 389, 0, 408,
	564, 511, 0, 556, 530, 0, 557, 526, 561, 0,
	500, 0, 415, 440, 452, 469, 472, 501, 586, 587,
	588, 285, 471, 590, 591, 592, 593, 594, 595, 596,
	589, 857, 533, 510, 536, 451, 513, 512, 0, 0,
	547, 789, 548, 549, 373, 374, 375, 376, 844, 574,
	303, 470, 398, 0, 534, 0, 0, 0, 0, 0,
	0, 0, 0, 539, 540, 537, 635, 0, 597, 598,
	0, 0, 464, 465, 331, 338, 483, 340, 302, 388,
	333, 449, 347, 0, 476, 541, 477, 600, 603, 601,
	602, 380, 343, 344, 412, 348, 358, 401, 448, 386,
	406, 300, 439, 413, 362, 527, 554, 866, 840, 865,
	867, 868, 864, 869, 870, 851, 745, 0, 796, 862,
	861, 863, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 582, 581, 580, 579, 578, 577, 576,
	575, 0, 0, 524, 426, 312, 274, 308, 309, 316,
	624, 621, 430, 625, 0, 282, 504, 356, 158, 397,
	330, 569, 570, 0, 0, 829, 803, 804, 805, 742,
	806, 800, 801, 743, 802, 830, 794, 826, 827, 770,
	797, 807, 825, 808, 828, 831, 832, 871, 872, 814,
	798, 246, 873, 811, 833, 824, 823, 809, 795, 834,
	835, 777, 772, 812, 813, 799, 817, 818, 819, 744,
	791, 792, 793, 815, 816, 773, 774, 775, 776, 0,
	0, 0, 455, 456, 457, 479, 0, 441, 503, 622,
	0, 0, 0, 0, 0, 0, 0, 553, 565, 599,
	0, 609, 610, 612, 614, 820, 616, 418, 0, 617,
	787, 628, 494, 495, 629, 605, 0, 737, 0, 385,
	0, 509, 542, 531, 615, 497, 0, 0, 0, 0,
	0, 0, 740, 0, 0, 0, 325, 3958, 0, 355,
	546, 528, 538, 529, 514, 515, 516, 523, 335, 517,
	518, 519, 489, 520, 490, 521, 522, 778, 545, 496,
	414, 369, 563, 562, 0, 0, 845, 853, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 732,
	0, 0, 768, 822, 821, 755, 765, 0, 0, 298,
	218, 491, 611, 493, 492, 756, 0, 757, 761, 764,
	760, 758, 759, 0, 837, 0, 0, 0, 0, 0,
	0, 724, 736, 0, 741, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 733, 734,
	0, 0, 0, 0, 788, 0, 735, 0, 0, 783,
	762, 766, 0, 0, 0, 0, 288, 420, 437, 299,
	410, 450, 304, 417, 294, 384, 407, 0, 0, 290,
	435, 416, 366, 345, 346, 289, 0, 402, 323, 337,
	320, 382, 763, 786, 790, 319, 859, 784, 445, 292,
	0, 444, 381, 431, 436, 367, 361, 0, 291, 433,
	365, 360, 349, 327, 860, 350, 351, 341, 393, 359,
	394, 342, 371, 370, 372, 0, 0, 0, 0, 0,
	473, 474, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 604, 781, 0, 608, 0, 447,
	0, 0, 843, 0, 0, 0, 419, 0, 0, 352,
	0, 0, 0, 785, 0, 405, 387, 856, 0, 0,
	403, 357, 432, 395, 438, 421, 446, 399, 396, 283,
	422, 322, 368, 295, 297, 317, 324, 326, 328, 329,
	377, 378, 390, 409, 423, 424, 425, 321, 305, 404,
	306, 339, 307, 284, 313, 311, 314, 411, 315, 286,
	391, 429, 0, 334, 400, 364, 287, 363, 392, 428,
	427, 296, 454, 460, 461, 550, 0, 466, 632, 633,
	634, 475, 0, 0, 480, 481, 482, 484, 485, 486,
	487, 551, 568, 535, 505, 468, 559, 502, 506, 507,
	571, 0, 0, 0, 459, 353, 354, 0, 332, 280,
	281, 627, 841, 383, 573, 606, 607, 498, 0, 855,
	836, 838, 839, 842, 846, 847, 848, 849, 850, 852,
	854, 858, 626, 0, 552, 567, 630, 566, 623, 389,
	0, 408, 564, 511, 0, 556, 530, 0, 557, 526,
	561, 0, 500, 0, 415, 440, 452, 469, 472, 501,
	586, 587, 588, 285, 471, 590, 591, 592, 593, 594,
	595, 596, 589, 857, 533, 510, 536, 451, 513, 512,
	0, 0, 547, 789, 548, 549, 373, 374, 375, 376,
	844, 574, 303, 470, 398, 0, 534, 0, 0, 0,
	0, 0, 0, 0, 0, 539, 540, 537, 635, 0,
	597, 598, 0, 0, 464, 465, 331, 338, 483, 340,
	302, 388, 333, 449, 347, 0, 476, 541, 477, 600,
	603, 601, 602, 380, 343, 344, 412, 348, 358, 401,
	448, 386, 406, 300, 439, 413, 362, 527, 554, 866,
	840, 865, 867, 868, 864, 869, 870, 851, 745, 0,
	796, 862, 861, 863, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 582, 581, 580, 579, 578,
	577, 576, 575, 0, 0, 524, 426, 312, 274, 308,
	309, 316, 624, 621, 430, 625, 0, 282, 504, 356,
	0, 397, 330, 569, 570, 0, 0, 829, 803, 804,
	805, 742, 806, 800, 801, 743, 802, 830, 794, 826,
	827, 770, 797, 807, 825, 808, 828, 831, 832, 871,
	872, 814, 798, 246, 873, 811, 833, 824, 823, 809,
	795, 834, 835, 777, 772, 812, 813, 799, 817, 818,
	819, 744, 791, 792, 793, 815, 816, 773, 774, 775,
	776, 0, 0, 0, 455, 456, 457, 479, 0, 441,
	503, 622, 0, 0, 0, 0, 0, 0, 0, 553,
	565, 599, 0, 609, 610, 612, 614, 820, 616, 418,
	0, 617, 787, 628, 494, 495, 629, 605, 0, 737,
	0, 385, 0, 509, 542, 531, 615, 497, 0, 0,
	0, 0, 0, 0, 740, 0, 0, 0, 325, 0,
	0, 355, 546, 528, 538, 529, 514, 515, 516, 523,
	335, 517, 518, 519, 489, 520, 490, 521, 522, 778,
	545, 496, 414, 369, 563, 562, 0, 0, 845, 853,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 732, 0, 0, 768, 822, 821, 755, 765, 0,
	0, 298, 218, 491, 611, 493, 492, 756, 0, 757,
	761, 764, 760, 758, 759, 0, 837, 0, 0, 0,
	0, 0, 0, 724, 736, 0, 741, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	733, 734, 0, 0, 0, 0, 788, 0, 735, 0,
	0, 783, 762, 766, 0, 0, 0, 0, 288, 420,
	437, 299, 410, 450, 304, 417, 294, 384, 407, 0,
	0, 290, 435, 416, 366, 345, 346, 289, 0, 402,
	323, 337, 320, 382, 763, 786, 790, 319, 859, 784,
	445, 292, 0, 444, 381, 431, 436, 367, 361, 0,
	291, 433, 365, 360, 349, 327, 860, 350, 351, 341,
	393, 359, 394, 342, 371, 370, 372, 0, 0, 0,
	0, 0, 473, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 604, 781, 0, 608,
	0, 447, 0, 0, 843, 0, 0, 0, 419, 0,
	0, 352, 0, 0, 0, 785, 0, 405, 387, 856,
	3853, 0, 403, 357, 432, 395, 438, 421, 446, 399,
	396, 283, 422, 322, 368, 295, 297, 317, 324, 326,
	328, 329, 377, 378, 390, 409, 423, 424, 425, 321,
	305, 404, 306, 339, 307, 284, 313, 311, 314, 411,
	315, 286, 391, 429, 0, 334, 400, 364, 287, 363,
	392, 428, 427, 296, 454, 460, 461, 550, 0, 466,
	632, 633, 634, 475, 0, 0, 480, 481, 482, 484,
	485, 486, 487, 551, 568, 535, 505, 468, 559, 502,
	506, 507, 571, 0, 0, 0, 459, 353, 354, 0,
	332, 280, 281, 627, 841, 383, 573, 606, 607, 498,
	0, 855, 836, 838, 839, 842, 846, 847, 848, 849,
	850, 852, 854, 858, 626, 0, 552, 567, 630, 566,
	623, 389, 0, 408, 564, 511, 0, 556, 530, 0,
	557, 526, 561, 0, 500, 0, 415, 440, 452, 469,
	472, 501, 586, 587, 588, 285, 471, 590, 591, 592,
	593, 594, 595, 596, 589, 857, 533, 510, 536, 451,
	513, 512, 0, 0, 547, 789, 548, 549, 373, 374,
	375, 376, 844, 574, 303, 470, 398, 0, 534, 0,
	0, 0, 0, 0, 0, 0, 0, 539, 540, 537,
	635, 0, 597, 598, 0, 0, 464, 465, 331, 338,
	483, 340, 302, 388, 333, 449, 347, 0, 476, 541,
	477, 600, 603, 601, 602, 380, 343, 344, 412, 348,
	358, 401, 448, 386, 406, 300, 439, 413, 362, 527,
	554, 866, 840, 865, 867, 868, 864, 869, 870, 851,
	745, 0, 796, 862, 861, 863, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 582, 581, 580,
	579, 578, 577, 576, 575, 0, 0, 524, 426, 312,
	274, 308, 309, 316, 624, 621, 430, 625, 0, 282,
	504, 356, 0, 397, 330, 569, 570, 0, 0, 829,
	803, 804, 805, 742, 806, 800, 801, 743, 802, 830,
	794, 826, 827, 770, 797, 807, 825, 808, 828, 831,
	832, 871, 872, 814, 798, 246, 873, 811, 833, 824,
	823, 809, 795, 834, 835, 777, 772, 812, 813, 799,
	817, 818, 819, 744, 791, 792, 793, 815, 816, 773,
	774, 775, 776, 0, 0, 0, 455, 456, 457, 479,
	0, 441, 503, 622, 0, 0, 0, 0, 0, 0,
	0, 553, 565, 599, 0, 609, 610, 612, 614, 820,
	616, 418, 0, 617, 787, 628, 494, 495, 629, 605,
	0, 737, 0, 385, 0, 509, 542, 531, 615, 497,
	0, 0, 0, 0, 0, 0, 740, 0, 0, 0,
	325, 1807, 0, 355, 546, 528, 538, 529, 514, 515,
	516, 523, 335, 517, 518, 519, 489, 520, 490, 521,
	522, 778, 545, 496, 414, 369, 563, 562, 0, 0,
	845, 853, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 732, 0, 0, 768, 822, 821, 755,
	765, 0, 0, 298, 218, 491, 611, 493, 492, 756,
	0, 757, 761, 764, 760, 758, 759, 0, 837, 0,
	0, 0, 0, 0, 0, 724, 736, 0, 741, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 733, 734, 0, 0, 0, 0, 788, 0,
	735, 0, 0, 783, 762, 766, 0, 0, 0, 0,
	288, 420, 437, 299, 410, 450, 304, 417, 294, 384,
	407, 0, 0, 290, 435, 416, 366, 345, 346, 289,
	0, 402, 323, 337, 320, 382, 763, 786, 790, 319,
	859, 784, 445, 292, 0, 444, 381, 431, 436, 367,
	361, 0, 291, 433, 365, 360, 349, 327, 860, 350,
	351, 341, 393, 359, 394, 342, 371, 370, 372, 0,
	0, 0, 0, 0, 473, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 604, 781,
	0, 608, 0, 447, 0, 0, 843, 0, 0, 0,
	419, 0, 0, 352, 0, 0, 0, 785, 0, 405,
	387, 856, 0, 0, 403, 357, 432, 395, 438, 421,
	446, 399, 396, 283, 422, 322, 368, 295, 297, 317,
	324, 326, 328, 329, 377, 378, 390, 409, 423, 424,
	425, 321, 305, 404, 306, 339, 307, 284, 313, 311,
	314, 411, 315, 286, 391, 429, 0, 334, 400, 364,
	287, 363, 392, 428, 427, 296, 454, 460, 461, 550,
	0, 466, 632, 633, 634, 475, 0, 0, 480, 481,
	482, 484, 485, 486, 487, 551, 568, 535, 505, 468,
	559, 502, 506, 507, 571, 0, 0, 0, 459, 353,
	354, 0, 332, 280, 281, 627, 841, 383, 573, 606,
	607, 498, 0, 855, 836, 838, 839, 842, 846, 847,
	848, 849, 850, 852, 854, 858, 626, 0, 552, 567,
	630, 566, 623, 389, 0, 408, 564, 511, 0, 556,
	530, 0, 557, 526, 561, 0, 500, 0, 415, 440,
	452, 469, 472, 501, 586, 587, 588, 285, 471, 590,
	591, 592, 593, 594, 595, 596, 589, 857, 533, 510,
	536, 451, 513, 512, 0, 0, 547, 789, 548, 549,
	373, 374, 375, 376, 844, 574, 303, 470, 398, 0,
	534, 0, 0, 0, 0, 0, 0, 0, 0, 539,
	540, 537, 635, 0, 597, 598, 0, 0, 464, 465,
	331, 338, 483, 340, 302, 388, 333, 449, 347, 0,
	476, 541, 477, 600, 603, 601, 602, 380, 343, 344,
	412, 348, 358, 401, 448, 386, 406, 300, 439, 413,
	362, 527, 554, 866, 840, 865, 867, 868, 864, 869,
	870, 851, 745, 0, 796, 862, 861, 863, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 582,
	581, 580, 579, 578, 577, 576, 575, 0, 0, 524,
	426, 312, 274, 308, 309, 316, 624, 621, 430, 625,
	0, 282, 504, 356, 0, 397, 330, 569, 570, 0,
	0, 829, 803, 804, 805, 742, 806, 800, 801, 743,
	802, 830, 794, 826, 827, 770, 797, 807, 825, 808,
	828, 831, 832, 871, 872, 814, 798, 246, 873, 811,
	833, 824, 823, 809, 795, 834, 835, 777, 772, 812,
	813, 799, 817, 818, 819, 744, 791, 792, 793, 815,
	816, 773, 774, 775, 776, 0, 0, 0, 455, 456,
	457, 479, 0, 441, 503, 622, 0, 0, 0, 0,
	0, 0, 0, 553, 565, 599, 0, 609, 610, 612,
	614, 820, 616, 418, 0, 617, 787, 628, 494, 495,
	629, 605, 0, 737, 0, 385, 0, 509, 542, 531,
	615, 497, 0, 0, 0, 0, 0, 0, 740, 0,
	0, 0, 325, 0, 0, 355, 546, 528, 538, 529,
	514, 515, 516, 523, 335, 517, 518, 519, 489, 520,
	490, 521, 522, 778, 545, 496, 414, 369, 563, 562,
	0, 0, 845, 853, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 732, 0, 0, 768, 822,
	821, 755, 765, 0, 0, 298, 218, 491, 611, 493,
	492, 756, 0, 757, 761, 764, 760, 758, 759, 0,
	837, 0, 0, 0, 0, 0, 0, 724, 736, 0,
	741, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 733, 734, 1528, 0, 0, 0,
	788, 0, 735, 0, 0, 783, 762, 766, 0, 0,
	0, 0, 288, 420, 437, 299, 410, 450, 304, 417,
	294, 384, 407, 0, 0, 290, 435, 416, 366, 345,
	346, 289, 0, 402, 323, 337, 320, 382, 763, 786,
	790, 319, 859, 784, 445, 292, 0, 444, 381, 431,
	436, 367, 361, 0, 291, 433, 365, 360, 349, 327,
	860, 350, 351, 341, 393, 359, 394, 342, 371, 370,
	372, 0, 0, 0, 0, 0, 473, 474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	604, 781, 0, 608, 0, 447, 0, 0, 843, 0,
	0, 0, 419, 0, 0, 352, 0, 0, 0, 785,
	0, 405, 387, 856, 0, 0, 403, 357, 432, 395,
	438, 421, 446, 399, 396, 283, 422, 322, 368, 295,
	297, 317, 324, 326, 328, 329, 377, 378, 390, 409,
	423, 424, 425, 321, 305, 404, 306, 339, 307, 284,
	313, 311, 314, 411, 315, 286, 391, 429, 0, 334,
	400, 364, 287, 363, 392, 428, 427, 296, 454, 460,
	461, 550, 0, 466, 632, 633, 634, 475, 0, 0,
	480, 481, 482, 484, 485, 486, 487, 551, 568, 535,
	505, 468, 559, 502, 506, 507, 571, 0, 0, 0,
	459, 353, 354, 0, 332, 280, 281, 627, 841, 383,
	573, 606, 607, 498, 0, 855, 836, 838, 839, 842,
	846, 847, 848, 849, 850, 852, 854, 858, 626, 0,
	552, 567, 630, 566, 623, 389, 0, 408, 564, 511,
	0, 556, 530, 0, 557, 526, 561, 0, 500, 0,
	415, 440, 452, 469, 472, 501, 586, 587, 588, 285,
	471, 590, 591, 592, 593, 594, 595, 596, 589, 857,
	533, 510, 536, 451, 513, 512, 0, 0, 547, 789,
	548, 549, 373, 374, 375, 376, 844, 574, 303, 470,
	398, 0, 534, 0, 0, 0, 0, 0, 0, 0,
	0, 539, 540, 537, 635, 0, 597, 598, 0, 0,
	464, 465, 331, 338, 483, 340, 302, 388, 333, 449,
	347, 0, 476, 541, 477, 600, 603, 601, 602, 380,
	343, 344, 412, 348, 358, 401, 448, 386, 406, 300,
	439, 413, 362, 527, 554, 866, 840, 865, 867, 868,
	864, 869, 870, 851, 745, 0, 796, 862, 861, 863,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 582, 581, 580, 579, 578, 577, 576, 575, 0,
	0, 524, 426, 312, 274, 308, 309, 316, 624, 621,
	430, 625, 0, 282, 504, 356, 0, 397, 330, 569,
	570, 0, 0, 829, 803, 804, 805, 742, 806, 800,
	801, 743, 802, 830, 794, 826, 827, 770, 797, 807,
	825, 808, 828, 831, 832, 871, 872, 814, 798, 246,
	873, 811, 833, 824, 823, 809, 795, 834, 835, 777,
	772, 812, 813, 799, 817, 818, 819, 744, 791, 792,
	793, 815, 816, 773, 774, 775, 776, 0, 0, 0,
	455, 456, 457, 479, 0, 441, 503, 622, 0, 0,
	0, 0, 0, 0, 0, 553, 565, 599, 0, 609,
	610, 612, 614, 820, 616, 418, 0, 617, 0, 628,
	494, 495, 629, 605, 787, 737, 0, 2190, 0, 0,
	0, 0, 0, 385, 0, 509, 542, 531, 615, 497,
	0, 0, 0, 0, 0, 0, 740, 0, 0, 0,
	325, 0, 0, 355, 546, 528, 538, 529, 514, 515,
	516, 523, 335, 517, 518, 519, 489, 520, 490, 521,
	522, 778, 545, 496, 414, 369, 563, 562, 0, 0,
	845, 853, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 732, 0, 0, 768, 822, 821, 755,
	765, 0, 0, 298, 218, 491, 611, 493, 492, 756,
	0, 757, 761, 764, 760, 758, 759, 0, 837, 0,
	0, 0, 0, 0, 0, 724, 736, 0, 741, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 733, 734, 0, 0, 0, 0, 788, 0,
	735, 0, 0, 783, 762, 766, 0, 0, 0, 0,
	288, 420, 437, 299, 410, 450, 304, 417, 294, 384,
	407, 0, 0, 290, 435, 416, 366, 345, 346, 289,
	0, 402, 323, 337, 320, 382, 763, 786, 790, 319,
	859, 784, 445, 292, 0, 444, 381, 431, 436, 367,
	361, 0, 291, 433, 365, 360, 349, 327, 860, 350,
	351, 341, 393, 359, 394, 342, 371, 370, 372, 0,
	0, 0, 0, 0, 473, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 604, 781,
	0, 608, 0, 447, 0, 0, 843, 0, 0, 0,
	419, 0, 0, 352, 0, 0, 0, 785, 0, 405,
	387, 856, 0, 0, 403, 357, 432, 395, 438, 421,
	446, 399, 396, 283, 422, 322, 368, 295, 297, 317,
	324, 326, 328, 329, 377, 378, 390, 409, 423, 424,
	425, 321, 305, 404, 306, 339, 307, 284, 313, 311,
	314, 411, 315, 286, 391, 429, 0, 334, 400, 364,
	287, 363, 392, 428, 427, 296, 454, 460, 461, 550,
	0, 466, 632, 633, 634, 475, 0, 0, 480, 481,
	482, 484, 485, 486, 487, 551, 568, 535, 505, 468,
	559, 502, 506, 507, 571, 0, 0, 0, 459, 353,
	354, 0, 332, 280, 281, 627, 841, 383, 573, 606,
	607, 498, 0, 855, 836, 838, 839, 842, 846, 847,
	848, 849, 850, 852, 854, 858, 626, 0, 552, 567,
	630, 566, 623, 389, 0, 408, 564, 511, 0, 556,
	530, 0, 557, 526, 561, 0, 500, 0, 415, 440,
	452, 469, 472, 501, 586, 587, 588, 285, 471, 590,
	591, 592, 593, 594, 595, 596, 589, 857, 533, 510,
	536, 451, 513, 512, 0, 0, 547, 789, 548, 549,
	373, 374, 375, 376, 844, 574, 303, 470, 398, 0,
	534, 0, 0, 0, 0, 0, 0, 0, 0, 539,
	540, 537, 635, 0, 597, 598, 0, 0, 464, 465,
	331, 338, 483, 340, 302, 388, 333, 449, 347, 0,
	476, 541, 477, 600, 603, 601, 602, 380, 343, 344,
	412, 348, 358, 401, 448, 386, 406, 300, 439, 413,
	362, 527, 554, 866, 840, 865, 867, 868, 864, 869,
	870, 851, 745, 0, 796, 862, 861, 863, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 582,
	581, 580, 579, 578, 577, 576, 575, 0, 0, 524,
	426, 312, 274, 308, 309, 316, 624, 621, 430, 625,
	0, 282, 504, 356, 0, 397, 330, 569, 570, 0,
	0, 829, 803, 804, 805, 742, 806, 800, 801, 743,
	802, 830, 794, 826, 827, 770, 797, 807, 825, 808,
	828, 831, 832, 871, 872, 814, 798, 246, 873, 811,
	833, 824, 823, 809, 795, 834, 835, 777, 772, 812,
	813, 799, 817, 818, 819, 744, 791, 792, 793, 815,
	816, 773, 774, 775, 776, 0, 0, 0, 455, 456,
	457, 479, 0, 441, 503, 622, 0, 0, 0, 0,
	0, 0, 0, 553, 565, 599, 0, 609, 610, 612,
	614, 820, 616, 418, 0, 617, 787, 628, 494, 495,
	629, 605, 0, 737, 0, 385, 0, 509, 542, 531,
	615, 497, 0, 0, 0, 0, 0, 0, 740, 0,
	0, 0, 325, 0, 0, 355, 546, 528, 538, 529,
	514, 515, 516, 523, 335, 517, 518, 519, 489, 520,
	490, 521, 522, 778, 545, 496, 414, 369, 563, 562,
	0, 0, 845, 853, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 732, 0, 0, 768, 822,
	821, 755, 765, 0, 0, 298, 218, 491, 611, 493,
	492, 756, 0, 757, 761, 764, 760, 758, 759, 0,
	837, 0, 0, 0, 0, 0, 0, 724, 736, 0,
	741, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 733, 734, 1800, 0, 0, 0,
	788, 0, 735, 0, 0, 783, 762, 766, 0, 0,
	0, 0, 288, 420, 437, 299, 410, 450, 304, 417,
	294, 384, 407, 0, 0, 290, 435, 416, 366, 345,
	346, 289, 0, 402, 323, 337, 320, 382, 763, 786,
	790, 319, 859, 784, 445, 292, 0, 444, 381, 431,
	436, 367, 361, 0, 291, 433, 365, 360, 349, 327,
	860, 350, 351, 341, 393, 359, 394, 342, 371, 370,
	372, 0, 0, 0, 0, 0, 473, 474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	604, 781, 0, 608, 0, 447, 0, 0, 843, 0,
	0, 0, 419, 0, 0, 352, 0, 0, 0, 785,
	0, 405, 387, 856, 0, 0, 403, 357, 432, 395,
	438, 421, 446, 399, 396, 283, 422, 322, 368, 295,
	297, 317, 324, 326, 328, 329, 377, 378, 390, 409,
	423, 424, 425, 321, 305, 404, 306, 339, 307, 284,
	313, 311, 314, 411, 315, 286, 391, 429, 0, 334,
	400, 364, 287, 363, 392, 428, 427, 296, 454, 460,
	461, 550, 0, 466, 632, 633, 634, 475, 0, 0,
	480, 481, 482, 484, 485, 486, 487, 551, 568, 535,
	505, 468, 559, 502, 506, 507, 571, 0, 0, 0,
	459, 353, 354, 0, 332, 280, 281, 627, 841, 383,
	573, 606, 607, 498, 0, 855, 836, 838, 839, 842,
	846, 847, 848, 849, 850, 852, 854, 858, 626, 0,
	552, 567, 630, 566, 623, 389, 0, 408, 564, 511,
	0, 556, 530, 0, 557, 526, 561, 0, 500, 0,
	415, 440, 452, 469, 472, 501, 586, 587, 588, 285,
	471, 590, 591, 592, 593, 594, 595, 596, 589, 857,
	533, 510, 536, 451, 513, 512, 0, 0, 547, 789,
	548, 549, 373, 374, 375, 376, 844, 574, 303, 470,
	398, 0, 534, 0, 0, 0, 0, 0, 0, 0,
	0, 539, 540, 537, 635, 0, 597, 598, 0, 0,
	464, 465, 331, 338, 483, 340, 302, 388, 333, 449,
	347, 0, 476, 541, 477, 600, 603, 601, 602, 380,
	343, 344, 412, 348, 358, 401, 448, 386, 406, 300,
	439, 413, 362, 527, 554, 866, 840, 865, 867, 868,
	864, 869, 870, 851, 745, 0, 796, 862, 861, 863,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 582, 581, 580, 579, 578, 577, 576, 575, 0,
	0, 524, 426, 312, 274, 308, 309, 316, 624, 621,
	430, 625, 0, 282, 504, 356, 0, 397, 330, 569,
	570, 0, 0, 829, 803, 804, 805, 742, 806, 800,
	801, 743, 802, 830, 794, 826, 827, 770, 797, 807,
	825, 808, 828, 831, 832, 871, 872, 814, 798, 246,
	873, 811, 833, 824, 823, 809, 795, 834, 835, 777,
	772, 812, 813, 799, 817, 818, 819, 744, 791, 792,
	793, 815, 816, 773, 774, 775, 776, 0, 0, 0,
	455, 456, 457, 479, 0, 441, 503, 622, 0, 0,
	0, 0, 0, 0, 0, 553, 565, 599, 0, 609,
	610, 612, 614, 820, 616, 418, 0, 617, 787, 628,
	494, 495, 629, 605, 0, 737, 0, 385, 0, 509,
	542, 531, 615, 497, 0, 0, 0, 0, 0, 0,
	740, 0, 0, 0, 325, 0, 0, 355, 546, 528,
	538, 529, 514, 515, 516, 523, 335, 517, 518, 519,
	489, 520, 490, 521, 522, 778, 545, 496, 414, 369,
	563, 562, 0, 0, 845, 853, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 732, 0, 0,
	768, 822, 821, 755, 765, 0, 0, 298, 218, 491,
	611, 493, 492, 756, 0, 757, 761, 764, 760, 758,
	759, 0, 837, 0, 0, 0, 0, 0, 0, 724,
	736, 0, 741, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 733, 734, 0, 0,
	0, 0, 788, 0, 735, 0, 0, 783, 762, 766,
	0, 0, 0, 0, 288, 420, 437, 299, 410, 450,
	304, 417, 294, 384, 407, 0, 0, 290, 435, 416,
	366, 345, 346, 289, 0, 402, 323, 337, 320, 382,
	763, 786, 790, 319, 859, 784, 445, 292, 0, 444,
	381, 431, 436, 367, 361, 0, 291, 433, 365, 360,
	349, 327, 860, 350, 351, 341, 393, 359, 394, 342,
	371, 370, 372, 0, 0, 0, 0, 0, 473, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 604, 781, 0, 608, 0, 447, 0, 0,
	843, 0, 0, 0, 419, 0, 0, 352, 0, 0,
	0, 785, 0, 405, 387, 856, 0, 0, 403, 357,
	432, 395, 438, 421, 446, 399, 396, 283, 422, 322,
	368, 295, 297, 317, 324, 326, 328, 329, 377, 378,
	390, 409, 423, 424, 425, 321, 305, 404, 306, 339,
	307, 284, 313, 311, 314, 411, 315, 286, 391, 429,
	0, 334, 400, 364, 287, 363, 392, 428, 427, 296,
	454, 460, 461, 550, 0, 466, 632, 633, 634, 475,
	0, 0, 480, 481, 482, 484, 485, 486, 487, 551,
	568, 535, 505, 468, 559, 502, 506, 507, 571, 0,
	0, 0, 459, 353, 354, 0, 332, 280, 281, 627,
	841, 383, 573, 606, 607, 498, 0, 855, 836, 838,
	839, 842, 846, 847, 848, 849, 850, 852, 854, 858,
	626, 0, 552, 567, 630, 566, 623, 389, 0, 408,
	564, 511, 0, 556, 530, 0, 557, 526, 561, 0,
	500, 0, 415, 440, 452, 469, 472, 501, 586, 587,
	588, 285, 471, 590, 591, 592, 593, 594, 595, 596,
	589, 857, 533, 510, 536, 451, 513, 512, 0, 0,
	547, 789, 548, 549, 373, 374, 375, 376, 844, 574,
	303, 470, 398, 0, 534, 0, 0, 0, 0, 0,
	0, 0, 0, 539, 540, 537, 635, 0, 597, 598,
	0, 0, 464, 465, 331, 338, 483, 340, 302, 388,
	333, 449, 347, 0, 476, 541, 477, 600, 603, 601,
	602, 380, 343, 344, 412, 348, 358, 401, 448, 386,
	406, 300, 439, 413, 362, 527, 554, 866, 840, 865,
	867, 868, 864, 869, 870, 851, 745, 0, 796, 862,
	861, 863, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 582, 581, 580, 579, 578, 577, 576,
	575, 0, 0, 524, 426, 312, 274, 308, 309, 316,
	624, 621, 430, 625, 0, 282, 504, 356, 0, 397,
	330, 569, 570, 0, 0, 829, 803, 804, 805, 742,
	806, 800, 801, 743, 802, 830, 794, 826, 827, 770,
	797, 807, 825, 808, 828, 831, 832, 871, 872, 814,
	798, 246, 873, 811, 833, 824, 823, 809, 795, 834,
	835, 777, 772, 812, 813, 799, 817, 818, 819, 744,
	791, 792, 793, 815, 816, 773, 774, 775, 776, 0,
	0, 0, 455, 456, 457, 479, 0, 441, 503, 622,
	0, 0, 0, 0, 0, 0, 0, 553, 565, 599,
	0, 609, 610, 612, 614, 820, 616, 418, 0, 617,
	787, 628, 494, 495, 629, 605, 0, 737, 0, 385,
	0, 509, 542, 531, 615, 497, 0, 0, 0, 0,
	0, 0, 740, 0, 0, 0, 325, 0, 0, 355,
	546, 528, 538, 529, 514, 515, 516, 523, 335, 517,
	518, 519, 489, 520, 490, 521, 522, 778, 545, 496,
	414, 369, 563, 562, 0, 0, 845, 853, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 732,
	0, 0, 768, 822, 821, 755, 765, 0, 0, 298,
	218, 491, 611, 493, 492, 2653, 0, 2654, 761, 764,
	760, 758, 759, 0, 837, 0, 0, 0, 0, 0,
	0, 724, 736, 0, 741, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 733, 734,
	0, 0, 0, 0, 788, 0, 735, 0, 0, 783,
	762, 766, 0, 0, 0, 0, 288, 420, 437, 299,
	410, 450, 304, 417, 294, 384, 407, 0, 0, 290,
	435, 416, 366, 345, 346, 289, 0, 402, 323, 337,
	320, 382, 763, 786, 790, 319, 859, 784, 445, 292,
	0, 444, 381, 431, 436, 367, 361, 0, 291, 433,
	365, 360, 349, 327, 860, 350, 351, 341, 393, 359,
	394, 342, 371, 370, 372, 0, 0, 0, 0, 0,
	473, 474, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 604, 781, 0, 608, 0, 447,
	0, 0, 843, 0, 0, 0, 419, 0, 0, 352,
	0, 0, 0, 785, 0, 405, 387, 856, 0, 0,
	403, 357, 432, 395, 438, 421, 446, 399, 396, 283,
	422, 322, 368, 295, 297, 317, 324, 326, 328, 329,
	377, 378, 390, 409, 423, 424, 425, 321, 305, 404,
	306, 339, 307, 284, 313, 311, 314, 411, 315, 286,
	391, 429, 0, 334, 400, 364, 287, 363, 392, 428,
	427, 296, 454, 460, 461, 550, 0, 466, 632, 633,
	634, 475, 0, 0, 480, 481, 482, 484, 485, 486,
	487, 551, 568, 535, 505, 468, 559, 502, 506, 507,
	571, 0, 0, 0, 459, 353, 354, 0, 332, 280,
	281, 627, 841, 383, 573, 606, 607, 498, 0, 855,
	836, 838, 839, 842, 846, 847, 848, 849, 850, 852,
	854, 858, 626, 0, 552, 567, 630, 566, 623, 389,
	0, 408, 564, 511, 0, 556, 530, 0, 557, 526,
	561, 0, 500, 0, 415, 440, 452, 469, 472, 501,
	586, 587, 588, 285, 471, 590, 591, 592, 593, 594,
	595, 596, 589, 857, 533, 510, 536, 451, 513, 512,
	0, 0, 547, 789, 548, 549, 373, 374, 375, 376,
	844, 574, 303, 470, 398, 0, 534, 0, 0, 0,
	0, 0, 0, 0, 0, 539, 540, 537, 635, 0,
	597, 598, 0, 0, 464, 465, 331, 338, 483, 340,
	302, 388, 333, 449, 347, 0, 476, 541, 477, 600,
	603, 601, 602, 380, 343, 344, 412, 348, 358, 401,
	448, 386, 406, 300, 439, 413, 362, 527, 554, 866,
	840, 865, 867, 868, 864, 869, 870, 851, 745, 0,
	796, 862, 861, 863, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 582, 581, 580, 579, 578,
	577, 576, 575, 0, 0, 524, 426, 312, 274, 308,
	309, 316, 624, 621, 430, 625, 0, 282, 504, 356,
	0, 397, 330, 569, 570, 0, 0, 829, 803, 804,
	805, 742, 806, 800, 801, 743, 802, 830, 794, 826,
	827, 770, 797, 807, 825, 808, 828, 831, 832, 871,
	872, 814, 798, 246, 873, 811, 833, 824, 823, 809,
	795, 834, 835, 777, 772, 812, 813, 799, 817, 818,
	819, 744, 791, 792, 793, 815, 816, 773, 774, 775,
	776, 0, 0, 0, 455, 456, 457, 479, 0, 441,
	503, 622, 0, 0, 0, 0, 0, 0, 0, 553,
	565, 599, 0, 609, 610, 612, 614, 820, 616, 418,
	0, 617, 787, 628, 494, 495, 629, 605, 0, 737,
	0, 385, 0, 509, 542, 531, 615, 497, 0, 0,
	1670, 0, 0, 0, 740, 0, 0, 0, 325, 0,
	0, 355, 546, 528, 538, 529, 514, 515, 516, 523,
	335, 517, 518, 519, 489, 520, 490, 521, 522, 778,
	545, 496, 414, 369, 563, 562, 0, 0, 845, 853,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 732, 0, 0, 768, 822, 821, 755, 765, 0,
	0, 298, 218, 491, 611, 493, 492, 756, 0, 757,
	761, 764, 760, 758, 759, 0, 837, 0, 0, 0,
	0, 0, 0, 0, 736, 0, 741, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	733, 734, 0, 0, 0, 0, 788, 0, 735, 0,
	0, 783, 762, 766, 0, 0, 0, 0, 288, 420,
	437, 299, 410, 450, 304, 417, 294, 384, 407, 0,
	0, 290, 435, 416, 366, 345, 346, 289, 0, 402,
	323, 337, 320, 382, 763, 786, 790, 319, 859, 784,
	445, 292, 0, 444, 381, 431, 436, 367, 361, 0,
	291, 433, 365, 360, 349, 327, 860, 350, 351, 341,
	393, 359, 394, 342, 371, 370, 372, 0, 0, 0,
	0, 0, 473, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 604, 781, 0, 608,
	0, 447, 0, 0, 843, 0, 0, 0, 419, 0,
	0, 352, 0, 0, 0, 785, 0, 405, 387, 856,
	0, 0, 403, 357, 432, 395, 438, 421, 446, 399,
	396, 283, 422, 322, 368, 295, 297, 317, 324, 326,
	328, 329, 377, 378, 390, 409, 423, 424, 425, 321,
	305, 404, 306, 339, 307, 284, 313, 311, 314, 411,
	315, 286, 391, 429, 0, 334, 400, 364, 287, 363,
	392, 428, 427, 296, 454, 1671, 1672, 550, 0, 466,
	632, 633, 634, 475, 0, 0, 480, 481, 482, 484,
	485, 486, 487, 551, 568, 535, 505, 468, 559, 502,
	506, 507, 571, 0, 0, 0, 459, 353, 354, 0,
	332, 280, 281, 627, 841, 383, 573, 606, 607, 498,
	0, 855, 836, 838, 839, 842, 846, 847, 848, 849,
	850, 852, 854, 858, 626, 0, 552, 567, 630, 566,
	623, 389, 0, 408, 564, 511, 0, 556, 530, 0,
	557, 526, 561, 0, 500, 0, 415, 440, 452, 469,
	472, 501, 586, 587, 588, 285, 471, 590, 591, 592,
	593, 594, 595, 596, 589, 857, 533, 510, 536, 451,
	513, 512, 0, 0, 547, 789, 548, 549, 373, 374,
	375, 376, 844, 574, 303, 470, 398, 0, 534, 0,
	0, 0, 0, 0, 0, 0, 0, 539, 540, 537,
	635, 0, 597, 598, 0, 0, 464, 465, 331, 338,
	483, 340, 302, 388, 333, 449, 347, 0, 476, 541,
	477, 600, 603, 601, 602, 380, 343, 344, 412, 348,
	358, 401, 448, 386, 406, 300, 439, 413, 362, 527,
	554, 866, 840, 865, 867, 868, 864, 869, 870, 851,
	745, 0, 796, 862, 861, 863, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 582, 581, 580,
	579, 578, 577, 576, 575, 0, 0, 524, 426, 312,
	274, 308, 309, 316, 624, 621, 430, 625, 0, 282,
	504, 356, 0, 397, 330, 569, 570, 0, 0, 829,
	803, 804, 805, 742, 806, 800, 801, 743, 802, 830,
	794, 826, 827, 770, 797, 807, 825, 808, 828, 831,
	832, 871, 872, 814, 798, 246, 873, 811, 833, 824,
	823, 809, 795, 834, 835, 777, 772, 812, 813, 799,
	817, 818, 819, 744, 791, 792, 793, 815, 816, 773,
	774, 775, 776, 0, 0, 0, 455, 456, 457, 479,
	0, 441, 503, 622, 0, 0, 0, 0, 0, 0,
	0, 553, 565, 599, 0, 609, 610, 612, 614, 820,
	616, 418, 0, 617, 787, 628, 494, 495, 629, 605,
	0, 737, 0, 385, 0, 509, 542, 531, 615, 497,
	0, 0, 0, 0, 0, 0, 740, 0, 0, 0,
	325, 0, 0, 355, 546, 528, 538, 529, 514, 515,
	516, 523, 335, 517, 518, 519, 489, 520, 490, 521,
	522, 778, 545, 496, 414, 369, 563, 562, 0, 0,
	845, 853, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 732, 0, 0, 768, 822, 821, 755,
	765, 0, 0, 298, 218, 491, 611, 493, 492, 756,
	0, 757, 761, 764, 760, 758, 759, 0, 837, 0,
	0, 0, 0, 0, 0, 0, 736, 0, 741, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 733, 734, 0, 0, 0, 0, 788, 0,
	735, 0, 0, 783, 762, 766, 0, 0, 0, 0,
	288, 420, 437, 299, 410, 450, 304, 417, 294, 384,
	407, 0, 0, 290, 435, 416, 366, 345, 346, 289,
	0, 402, 323, 337, 320, 382, 763, 786, 790, 319,
	859, 784, 445, 292, 0, 444, 381, 431, 436, 367,
	361, 0, 291, 433, 365, 360, 349, 327, 860, 350,
	351, 341, 393, 359, 394, 342, 371, 370, 372, 0,
	0, 0, 0, 0, 473, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 604, 781,
	0, 608, 0, 447, 0, 0, 843, 0, 0, 0,
	419, 0, 0, 352, 0, 0, 0, 785, 0, 405,
	387, 856, 0, 0, 403, 357, 432, 395, 438, 421,
	446, 399, 396, 283, 422, 322, 368, 295, 297, 317,
	324, 326, 328, 329, 377, 378, 390, 409, 423, 424,
	425, 321, 305, 404, 306, 339, 307, 284, 313, 311,
	314, 411, 315, 286, 391, 429, 0, 334, 400, 364,
	287, 363, 392, 428, 427, 296, 454, 460, 461, 550,
	0, 466, 632, 633, 634, 475, 0, 0, 480, 481,
	482, 484, 485, 486, 487, 551, 568, 535, 505, 468,
	559, 502, 506, 507, 571, 0, 0, 0, 459, 353,
	354, 0, 332, 280, 281, 627, 841, 383, 573, 606,
	607, 498, 0, 855, 836, 838, 839, 842, 846, 847,
	848, 849, 850, 852, 854, 858, 626, 0, 552, 567,
	630, 566, 623, 389, 0, 408, 564, 511, 0, 556,
	530, 0, 557, 526, 561, 0, 500, 0, 415, 440,
	452, 469, 472, 501, 586, 587, 588, 285, 471, 590,
	591, 592, 593, 594, 595, 596, 589, 857, 533, 510,
	536, 451, 513, 512, 0, 0, 547, 789, 548, 549,
	373, 374, 375, 376, 844, 574, 303, 470, 398, 0,
	534, 0, 0, 0, 0, 0, 0, 0, 0, 539,
	540, 537, 635, 0, 597, 598, 0, 0, 464, 465,
	331, 338, 483, 340, 302, 388, 333, 449, 347, 0,
	476, 541, 477, 600, 603, 601, 602, 380, 343, 344,
	412, 348, 358, 401, 448, 386, 406, 300, 439, 413,
	362, 527, 554, 866, 840, 865, 867, 868, 864, 869,
	870, 851, 745, 0, 796, 862, 861, 863, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 582,
	581, 580, 579, 578, 577, 576, 575, 0, 0, 524,
	426, 312, 274, 308, 309, 316, 624, 621, 430, 625,
	0, 282, 504, 356, 0, 397, 330, 569, 570, 0,
	0, 829, 803, 804, 805, 742, 806, 800, 801, 743,
	802, 830, 794, 826, 827, 770, 797, 807, 825, 808,
	828, 831, 832, 871, 872, 814, 798, 246, 873, 811,
	833, 824, 823, 809, 795, 834, 835, 777, 772, 812,
	813, 799, 817, 818, 819, 744, 791, 792, 793, 815,
	816, 773, 774, 775, 776, 0, 0, 0, 455, 456,
	457, 479, 0, 441, 503, 622, 0, 0, 0, 0,
	0, 0, 0, 553, 565, 599, 0, 609, 610, 612,
	614, 820, 616, 418, 0, 617, 787, 628, 494, 495,
	629, 605, 0, 737, 0, 385, 0, 509, 542, 531,
	615, 497, 0, 0, 0, 0, 0, 0, 740, 0,
	0, 0, 325, 0, 0, 355, 546, 528, 538, 529,
	514, 515, 516, 523, 335, 517, 518, 519, 489, 520,
	490, 521, 522, 778, 545, 496, 414, 369, 563, 562,
	0, 0, 845, 853, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 768, 822,
	821, 755, 765, 0, 0, 298, 218, 491, 611, 493,
	492, 756, 0, 757, 761, 764, 760, 758, 759, 0,
	837, 0, 0, 0, 0, 0, 0, 724, 736, 0,
	741, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 733, 734, 0, 0, 0, 0,
	788, 0, 735, 0, 0, 783, 762, 766, 0, 0,
	0, 0, 288, 420, 437, 299, 410, 450, 304, 417,
	294, 384, 407, 0, 0, 290, 435, 416, 366, 345,
	346, 289, 0, 402, 323, 337, 320, 382, 763, 786,
	790, 319, 859, 784, 445, 292, 0, 444, 381, 431,
	436, 367, 361, 0, 291, 433, 365, 360, 349, 327,
	860, 350, 351, 341, 393, 359, 394, 342, 371, 370,
	372, 0, 0, 0, 0, 0, 473, 474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	604, 781, 0, 608, 0, 447, 0, 0, 843, 0,
	0, 0, 419, 0, 0, 352, 0, 0, 0, 785,
	0, 405, 387, 856, 0, 0, 403, 357, 432, 395,
	438, 421, 446, 399, 396, 283, 422, 322, 368, 295,
	297, 317, 324, 326, 328, 329, 377, 378, 390, 409,
	423, 424, 425, 321, 305, 404, 306, 339, 307, 284,
	313, 311, 314, 411, 315, 286, 391, 429, 0, 334,
	400, 364, 287, 363, 392, 428, 427, 296, 454, 460,
	461, 550, 0, 466, 632, 633, 634, 475, 0, 0,
	480, 481, 482, 484, 485, 486, 487, 551, 568, 535,
	505, 468, 559, 502, 506, 507, 571, 0, 0, 0,
	459, 353, 354, 0, 332, 280, 281, 627, 841, 383,
	573, 606, 607, 498, 0, 855, 836, 838, 839, 842,
	846, 847, 848, 849, 850, 852, 854, 858, 626, 0,
	552, 567, 630, 566, 623, 389, 0, 408, 564, 511,
	0, 556, 530, 0, 557, 526, 561, 0, 500, 0,
	415, 440, 452, 469, 472, 501, 586, 587, 588, 285,
	471, 590, 591, 592, 593, 594, 595, 596, 589, 857,
	533, 510, 536, 451, 513, 512, 0, 0, 547, 789,
	548, 549, 373, 374, 375, 376, 844, 574, 303, 470,
	398, 0, 534, 0, 0, 0, 0, 0, 0, 0,
	0, 539, 540, 537, 635, 0, 597, 598, 0, 0,
	464, 465, 331, 338, 483, 340, 302, 388, 333, 449,
	347, 0, 476, 541, 477, 600, 603, 601, 602, 380,
	343, 344, 412, 348, 358, 401, 448, 386, 406, 300,
	439, 413, 362, 527, 554, 866, 840, 865, 867, 868,
	864, 869, 870, 851, 745, 0, 796, 862, 861, 863,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 582, 581, 580, 579, 578, 577, 576, 575, 0,
	0, 524, 426, 312, 274, 308, 309, 316, 624, 621,
	430, 625, 0, 282, 504, 356, 0, 397, 330, 569,
	570, 0, 0, 829, 803, 804, 805, 742, 806, 800,
	801, 743, 802, 830, 794, 826, 827, 770, 797, 807,
	825, 808, 828, 831, 832, 871, 872, 814, 798, 246,
	873, 811, 833, 824, 823, 809, 795, 834, 835, 777,
	772, 812, 813, 799, 817, 818, 819, 744, 791, 792,
	793, 815, 816, 773, 774, 775, 776, 0, 0, 0,
	455, 456, 457, 479, 0, 441, 503, 622, 0, 0,
	0, 0, 0, 0, 0, 553, 565, 599, 0, 609,
	610, 612, 614, 820, 616, 418, 0, 617, 0, 628,
	494, 495, 629, 605, 0, 737, 195, 61, 186, 157,
	0, 0, 0, 0, 0, 0, 385, 0, 509, 542,
	531, 615, 497, 0, 187, 0, 0, 0, 0, 0,
	0, 178, 0, 325, 0, 188, 355, 546, 528, 538,
	529, 514, 515, 516, 523, 335, 517, 518, 519, 489,
	520, 490, 521, 522, 131, 545, 496, 414, 369, 563,
	562, 0, 0, 0, 0, 0, 0, 0, 0, 118,
	0, 0, 0, 0, 0, 0, 191, 0, 0, 217,
	0, 0, 0, 0, 0, 0, 298, 218, 491, 611,
	493, 492, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 301, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 209, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 288, 420, 437, 299, 410, 450, 304,
	417, 294, 384, 407, 0, 0, 290, 435, 416, 366,
	345, 346, 289, 0, 402, 323, 337, 320, 382, 0,
	434, 462, 319, 453, 0, 445, 292, 0, 444, 381,
	431, 436, 367, 361, 0, 291, 433, 365, 360, 349,
	327, 478, 350, 351, 341, 393, 359, 394, 342, 371,
	370, 372, 0, 0, 0, 0, 0, 473, 474, 0,
	0, 0, 0, 0, 0, 156, 184, 193, 185, 116,
	0, 604, 0, 0, 608, 0, 447, 0, 0, 210,
	0, 0, 0, 419, 0, 0, 352, 183, 177, 176,
	463, 0, 405, 387, 222, 0, 0, 403, 357, 432,
	395, 438, 421, 446, 399, 396, 283, 422, 322, 368,
	295, 297, 317, 324, 326, 328, 329, 377, 378, 390,
	409, 423, 424, 425, 321, 305, 404, 306, 339, 307,
	284, 313, 311, 314, 411, 315, 286, 391, 429, 0,
	334, 400, 364, 287, 363, 392, 428, 427, 296, 454,
	460, 461, 550, 0, 466, 583, 584, 585, 475, 0,
	0, 480, 481, 482, 484, 485, 486, 487, 551, 568,
	535, 505, 468, 559, 502, 506, 507, 571, 0, 0,
	0, 459, 353, 354, 0, 332, 280, 281, 442, 318,
	383, 573, 606, 607, 498, 0, 560, 499, 508, 310,
	532, 544, 543, 379, 458, 213, 555, 558, 488, 223,
	0, 552, 567, 525, 566, 224, 389, 0, 408, 564,
	511, 0, 556, 530, 0, 557, 526, 561, 0, 500,
	0, 415, 440, 452, 469, 472, 501, 586, 587, 588,
	285, 471, 590, 591, 592, 593, 594, 595, 596, 589,
	443, 533, 510, 536, 451, 513, 512, 0, 0, 547,
	467, 548, 549, 373, 374, 375, 376, 336, 574, 303,
	470, 398, 129, 534, 0, 0, 0, 0, 0, 0,
	0, 0, 539, 540, 537, 221, 0, 597, 598, 0,
	0, 464, 465, 331, 338, 483, 340, 302, 388, 333,
	449, 347, 0, 476, 541, 477, 600, 603, 601, 602,
	380, 343, 344, 412, 348, 358, 401, 448, 386, 406,
	300, 439, 413, 362, 527, 554, 0, 0, 0, 0,
	0, 0, 0, 0, 62, 0, 0, 269, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 582, 581, 580, 579, 578, 577, 576, 575,
	0, 0, 524, 426, 312, 274, 308, 309, 316, 228,
	293, 430, 229, 0, 282, 504, 356, 158, 397, 330,
	569, 570, 58, 0, 230, 231, 232, 233, 234, 235,
	236, 237, 275, 238, 239, 240, 241, 242, 243, 244,
	247, 248, 249, 250, 251, 252, 253, 254, 572, 245,
	246, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 0, 0, 0, 276, 277,
	278, 279, 0, 0, 270, 271, 272, 273, 0, 0,
	0, 455, 456, 457, 479, 0, 441, 503, 225, 45,
	211, 214, 216, 215, 0, 59, 553, 565, 599, 5,
	609, 610, 612, 614, 613, 616, 418, 195, 617, 134,
	226, 494, 495, 227, 605, 0, 0, 385, 0, 509,
	542, 531, 615, 497, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 325, 0, 0, 355, 546, 528,
	538, 529, 514, 515, 516, 523, 335, 517, 518, 519,
	489, 520, 490, 521, 522, 131, 545, 496, 414, 369,
	563, 562, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 191, 0, 0,
	217, 0, 0, 0, 0, 0, 0, 298, 218, 491,
	611, 493, 492, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 2340, 2343, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 288, 420, 437, 299, 410, 450,
	304, 417, 294, 384, 407, 0, 0, 290, 435, 416,
	366, 345, 346, 289, 0, 402, 323, 337, 320, 382,
	0, 434, 462, 319, 453, 0, 445, 292, 0, 444,
	381, 431, 436, 367, 361, 0, 291, 433, 365, 360,
	349, 327, 478, 350, 351, 341, 393, 359, 394, 342,
	371, 370, 372, 0, 0, 0, 0, 0, 473, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 604, 0, 0, 608, 2344, 447, 0, 0,
	0, 2339, 0, 2338, 419, 2336, 2341, 352, 0, 0,
	0, 463, 0, 405, 387, 631, 0, 0, 403, 357,
	432, 395, 438, 421, 446, 399, 396, 283, 422, 322,
	368, 295, 297, 317, 324, 326, 328, 329, 377, 378,
	390, 409, 423, 424, 425, 321, 305, 404, 306, 339,
	307, 284, 313, 311, 314, 411, 315, 286, 391, 429,
	2342, 334, 400, 364, 287, 363, 392, 428, 427, 296,
	454, 460, 461, 550, 0, 466, 632, 633, 634, 475,
	0, 0, 480, 481, 482, 484, 485, 486, 487, 551,
	568, 535, 505, 468, 559, 502, 506, 507, 571, 0,
	0, 0, 459, 353, 354, 0, 332, 280, 281, 627,
	318, 383, 573, 606, 607, 498, 0, 560, 499, 508,
	310, 532, 544, 543, 379, 458, 0, 555, 558, 488,
	626, 0, 552, 567, 630, 566, 623, 389, 0, 408,
	564, 511, 0, 556, 530, 0, 557, 526, 561, 0,
	500, 0, 415, 440, 452, 469, 472, 501, 586, 587,
	588, 285, 471, 590, 591, 592, 593, 594, 595, 596,
	589, 443, 533, 510, 536, 451, 513, 512, 0, 0,
	547, 467, 548, 549, 373, 374, 375, 376, 336, 574,
	303, 470, 398, 0, 534, 0, 0, 0, 0, 0,
	0, 0, 0, 539, 540, 537, 635, 0, 597, 598,
	0, 0, 464, 465, 331, 338, 483, 340, 302, 388,
	333, 449, 347, 0, 476, 541, 477, 600, 603, 601,
	602, 380, 343, 344, 412, 348, 358, 401, 448, 386,
	406, 300, 439, 413, 362, 527, 554, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 269, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 582, 581, 580, 579, 578, 577, 576,
	575, 0, 0, 524, 426, 312, 274, 308, 309, 316,
	624, 621, 430, 625, 0, 282, 504, 356, 158, 397,
	330, 569, 570, 0, 0, 230, 231, 232, 233, 234,
	235, 236, 237, 275, 238, 239, 240, 241, 242, 243,
	244, 247, 248, 249, 250, 251, 252, 253, 254, 572,
	245, 246, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 0, 0, 0, 276,
	277, 278, 279, 0, 0, 270, 271, 272, 273, 0,
	0, 0, 455, 456, 457, 479, 0, 441, 503, 622,
	0, 0, 0, 0, 0, 0, 0, 553, 565, 599,
	0, 609, 610, 612, 614, 613, 616, 418, 0, 617,
	0, 628, 494, 495, 629, 605, 385, 0, 509, 542,
	531, 615, 497, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 325, 0, 0, 355, 546, 528, 538,
	529, 514, 515, 516, 523, 335, 517, 518, 519, 489,
	520, 490, 521, 522, 0, 545, 496, 414, 369, 563,
	562, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1283, 0, 0, 217,
	0, 0, 755, 765, 0, 0, 298, 218, 491, 611,
	493, 492, 756, 0, 757, 761, 764, 760, 758, 759,
	0, 301, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 762, 0, 0,
	0, 0, 0, 288, 420, 437, 299, 410, 450, 304,
	417, 294, 384, 407, 0, 0, 290, 435, 416, 366,
	345, 346, 289, 0, 402, 323, 337, 320, 382, 763,
	434, 462, 319, 453, 0, 445, 292, 0, 444, 381,
	431, 436, 367, 361, 0, 291, 433, 365, 360, 349,
	327, 478, 350, 351, 341, 393, 359, 394, 342, 371,
	370, 372, 0, 0, 0, 0, 0, 473, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 604, 0, 0, 608, 0, 447, 0, 0, 0,
	0, 0, 0, 419, 0, 0, 352, 0, 0, 0,
	463, 0, 405, 387, 631, 0, 0, 403, 357, 432,
	395, 438, 421, 446, 399, 396, 283, 422, 322, 368,
	295, 297, 317, 324, 326, 328, 329, 377, 378, 390,
	409, 423, 424, 425, 321, 305, 404, 306, 339, 307,
	284, 313, 311, 314, 411, 315, 286, 391, 429, 0,
	334, 400, 364, 287, 363, 392, 428, 427, 296, 454,
	460, 461, 550, 0, 466, 632, 633, 634, 475, 0,
	0, 480, 481, 482, 484, 485, 486, 487, 551, 568,
	535, 505, 468, 559, 502, 506, 507, 571, 0, 0,
	0, 459, 353, 354, 0, 332, 280, 281, 627, 318,
	383, 573, 606, 607, 498, 0, 560, 499, 508, 310,
	532, 544, 543, 379, 458, 0, 555, 558, 488, 626,
	0, 552, 567, 630, 566, 623, 389, 0, 408, 564,
	511, 0, 556, 530, 0, 557, 526, 561, 0, 500,
	0, 415, 440, 452, 469, 472, 501, 586, 587, 588,
	285, 471, 590, 591, 592, 593, 594, 595, 596, 589,
	443, 533, 510, 536, 451, 513, 512, 0, 0, 547,
	467, 548, 549, 373, 374, 375, 376, 336, 574, 303,
	470, 398, 0, 534, 0, 0, 0, 0, 0, 0,
	0, 0, 539, 540, 537, 635, 0, 597, 598, 0,
	0, 464, 465, 331, 338, 483, 340, 302, 388, 333,
	449, 347, 0, 476, 541, 477, 600, 603, 601, 602,
	380, 343, 344, 412, 348, 358, 401, 448, 386, 406,
	300, 439, 413, 362, 527, 554, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 269, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 582, 581, 580, 579, 578, 577, 576, 575,
	0, 0, 524, 426, 312, 274, 308, 309, 316, 624,
	621, 430, 625, 0, 282, 504, 356, 0, 397, 330,
	569, 570, 0, 0, 230, 231, 232, 233, 234, 235,
	236, 237, 275, 238, 239, 240, 241, 242, 243, 244,
	247, 248, 249, 250, 251, 252, 253, 254, 572, 245,
	246, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 0, 0, 0, 276, 277,
	278, 279, 0, 0, 270, 271, 272, 273, 0, 0,
	0, 455, 456, 457, 479, 0, 441, 503, 622, 0,
	0, 0, 0, 0, 0, 0, 553, 565, 599, 0,
	609, 610, 612, 614, 613, 616, 418, 0, 617, 0,
	628, 494, 495, 629, 605, 195, 61, 186, 157, 0,
	0, 0, 0, 0, 0, 385, 654, 509, 542, 531,
	615, 497, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 325, 0, 0, 355, 546, 528, 538, 529,
	514, 515, 516, 523, 335, 517, 518, 519, 489, 520,
	490, 521, 522, 0, 545, 496, 414, 369, 563, 562,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 660,
	0, 0, 0, 0, 0, 659, 0, 0, 217, 0,
	0, 0, 0, 0, 0, 298, 218, 491, 611, 493,
	492, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 288, 420, 437, 299, 410, 450, 304, 417,
	294, 384, 407, 0, 0, 290, 435, 416, 366, 345,
	346, 289, 0, 402, 323, 337, 320, 382, 0, 434,
	462, 319, 453, 0, 445, 292, 0, 444, 381, 431,
	436, 367, 361, 0, 291, 433, 365, 360, 349, 327,
	478, 350, 351, 341, 393, 359, 394, 342, 371, 370,
	372, 0, 0, 0, 0, 0, 473, 474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 658, 0,
	604, 0, 0, 608, 0, 447, 0, 0, 0, 0,
	0, 0, 419, 0, 0, 352, 0, 0, 0, 463,
	0, 405, 387, 631, 0, 0, 403, 357, 432, 395,
	438, 421, 446, 399, 396, 283, 422, 322, 368, 295,
	297, 317, 324, 326, 328, 329, 377, 378, 390, 409,
	423, 424, 425, 321, 305, 404, 306, 339, 307, 284,
	313, 311, 314, 411, 315, 286, 391, 429, 0, 334,
	400, 364, 287, 363, 392, 428, 427, 296, 454, 460,
	461, 550, 0, 466, 632, 633, 634, 475, 0, 0,
	480, 481, 482, 484, 485, 486, 487, 551, 568, 535,
	505, 468, 559, 502, 506, 507, 571, 0, 0, 0,
	459, 353, 354, 0, 332, 280, 281, 627, 318, 383,
	573, 606, 607, 498, 0, 560, 499, 508, 310, 532,
	544, 543, 379, 458, 0, 555, 558, 488, 626, 0,
	552, 567, 630, 566, 623, 389, 0, 408, 564, 511,
	0, 556, 530, 0, 557, 526, 561, 0, 500, 0,
	415, 440, 452, 469, 472, 501, 586, 587, 588, 285,
	471, 590, 591, 592, 593, 594, 595, 596, 589, 443,
	533, 510, 536, 451, 513, 512, 0, 0, 547, 467,
	548, 549, 373, 374, 375, 376, 655, 657, 303, 470,
	398, 668, 534, 0, 0, 0, 0, 0, 0, 0,
	0, 539, 540, 537, 635, 0, 597, 598, 0, 0,
	464, 465, 331, 338, 483, 340, 302, 388, 333, 449,
	347, 0, 476, 541, 477, 600, 603, 601, 602, 380,
	343, 344, 412, 348, 358, 401, 448, 386, 406, 300,
	439, 413, 362, 527, 554, 0, 0, 0, 0, 0,
	0, 0, 0, 62, 0, 0, 269, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 582, 581, 580, 579, 578, 577, 576, 575, 0,
	0, 524, 426, 312, 274, 308, 309, 316, 624, 621,
	430, 625, 0, 282, 504, 356, 158, 397, 330, 569,
	570, 0, 0, 230, 231, 232, 233, 234, 235, 236,
	237, 275, 238, 239, 240, 241, 242, 243, 244, 247,
	248, 249, 250, 251, 252, 253, 254, 572, 245, 246,
	255, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 0, 0, 0, 276, 277, 278,
	279, 0, 0, 270, 271, 272, 273, 0, 0, 0,
	455, 456, 457, 479, 0, 441, 503, 622, 0, 0,
	0, 0, 0, 0, 0, 553, 565, 599, 0, 609,
	610, 612, 614, 613, 616, 418, 0, 617, 0, 628,
	494, 495, 629, 605, 385, 0, 509, 542, 531, 615,
	497, 0, 1096, 0, 0, 0, 0, 0, 0, 0,
	0, 325, 0, 0, 355, 546, 528, 538, 529, 514,
	515, 516, 523, 335, 517, 518, 519, 489, 520, 490,
	521, 522, 0, 545, 496, 414, 369, 563, 562, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 217, 0, 0,
	0, 0, 0, 0, 298, 218, 491, 611, 493, 492,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 301,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1081, 0, 0, 0, 0, 0,
	0, 288, 420, 437, 299, 410, 450, 304, 417, 294,
	384, 407, 0, 0, 2496, 2499, 2500, 2501, 2502, 2503,
	2504, 0, 2509, 2505, 2506, 2507, 2508, 0, 2491, 2492,
	2493, 2494, 1079, 2475, 2497, 0, 2476, 381, 2477, 2478,
	2479, 2480, 1083, 2481, 2482, 2483, 2484, 2485, 2488, 2489,
	2486, 2487, 2495, 393, 359, 394, 342, 371, 370, 372,
	1107, 1109, 1111, 1113, 1116, 473, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 604,
	0, 0, 608, 0, 447, 0, 0, 0, 0, 0,
	0, 419, 0, 0, 352, 0, 0, 0, 2490, 0,
	405, 387, 631, 0, 0, 403, 357, 432, 395, 438,
	421, 446, 399, 396, 283, 422, 322, 368, 295, 297,
	317, 324, 326, 328, 329, 377, 378, 390, 409, 423,
	424, 425, 321, 305, 404, 306, 339, 307, 284, 313,
	311, 314, 411, 315, 286, 391, 429, 0, 334, 400,
	364, 287, 363, 392, 428, 427, 296, 454, 460, 461,
	550, 0, 466, 632, 633, 634, 475, 0, 0, 480,
	481, 482, 484, 485, 486, 487, 551, 568, 535, 505,
	468, 559, 502, 506, 507, 571, 0, 0, 0, 459,
	353, 354, 0, 332, 280, 281, 627, 318, 383, 573,
	606, 607, 498, 0, 560, 499, 508, 310, 532, 544,
	543, 379, 458, 0, 555, 558, 488, 626, 0, 552,
	567, 630, 566, 623, 389, 0, 408, 564, 511, 0,
	556, 530, 0, 557, 526, 561, 0, 500, 0, 415,
	440, 452, 469, 472, 501, 586, 587, 588, 285, 471,
	590, 591, 592, 593, 594, 595, 596, 589, 443, 533,
	510, 536, 451, 513, 512, 0, 0, 547, 467, 548,
	549, 373, 374, 375, 376, 336, 574, 303, 470, 398,
	0, 534, 0, 0, 0, 0, 0, 0, 0, 0,
	539, 540, 537, 635, 0, 597, 598, 0, 0, 464,
	465, 331, 338, 483, 340, 302, 388, 333, 449, 347,
	0, 476, 541, 477, 600, 603, 601, 602, 380, 343,
	344, 412, 348, 358, 401, 448, 386, 406, 300, 439,
	413, 362, 527, 554, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 269, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	582, 581, 580, 579, 578, 577, 576, 575, 0, 0,
	524, 426, 312, 274, 308, 309, 316, 624, 621, 430,
	625, 0, 282, 2498, 356, 0, 397, 330, 569, 570,
	0, 0, 230, 231, 232, 233, 234, 235, 236, 237,
	275, 238, 239, 240, 241, 242, 243, 244, 247, 248,
	249, 250, 251, 252, 253, 254, 572, 245, 246, 255,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 0, 0, 0, 276, 277, 278, 279,
	0, 0, 270, 271, 272, 273, 0, 0, 0, 455,
	456, 457, 479, 0, 441, 503, 622, 0, 0, 0,
	0, 0, 0, 0, 553, 565, 599, 0, 609, 610,
	612, 614, 613, 616, 418, 0, 617, 0, 628, 494,
	495, 629, 605, 385, 0, 509, 542, 531, 615, 497,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	325, 0, 0, 355, 546, 528, 538, 529, 514, 515,
	516, 523, 335, 517, 518, 519, 489, 520, 490, 521,
	522, 0, 545, 496, 414, 369, 563, 562, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 217, 0, 0, 0,
	0, 0, 0, 298, 218, 491, 611, 493, 492, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 301, 2340,
	2343, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	288, 420, 437, 299, 410, 450, 304, 417, 294, 384,
	407, 0, 0, 290, 435, 416, 366, 345, 346, 289,
	0, 402, 323, 337, 320, 382, 0, 434, 462, 319,
	453, 0, 445, 292, 0, 444, 381, 431, 436, 367,
	361, 0, 291, 433, 365, 360, 349, 327, 478, 350,
	351, 341, 393, 359, 394, 342, 371, 370, 372, 0,
	0, 0, 0, 0, 473, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 604, 0,
	0, 608, 2344, 447, 0, 0, 0, 2339, 0, 2338,
	419, 2336, 2341, 352, 0, 0, 0, 463, 0, 405,
	387, 631, 0, 0, 403, 357, 432, 395, 438, 421,
	446, 399, 396, 283, 422, 322, 368, 295, 297, 317,
	324, 326, 328, 329, 377, 378, 390, 409, 423, 424,
	425, 321, 305, 404, 306, 339, 307, 284, 313, 311,
	314, 411, 315, 286, 391, 429, 2342, 334, 400, 364,
	287, 363, 392, 428, 427, 296, 454, 460, 461, 550,
	0, 466, 632, 633, 634, 475, 0, 0, 480, 481,
	482, 484, 485, 486, 487, 551, 568, 535, 505, 468,
	559, 502, 506, 507, 571, 0, 0, 0, 459, 353,
	354, 0, 332, 280, 281, 627, 318, 383, 573, 606,
	607, 498, 0, 560, 499, 508, 310, 532, 544, 543,
	379, 458, 0, 555, 558, 488, 626, 0, 552, 567,
	630, 566, 623, 389, 0, 408, 564, 511, 0, 556,
	530, 0, 557, 526, 561, 0, 500, 0, 415, 440,
	452, 469, 472, 501, 586, 587, 588, 285, 471, 590,
	591, 592, 593, 594, 595, 596, 589, 443, 533, 510,
	536, 451, 513, 512, 0, 0, 547, 467, 548, 549,
	373, 374, 375, 376, 336, 574, 303, 470, 398, 0,
	534, 0, 0, 0, 0, 0, 0, 0, 0, 539,
	540, 537, 635, 0, 597, 598, 0, 0, 464, 465,
	331, 338, 483, 340, 302, 388, 333, 449, 347, 0,
	476, 541, 477, 600, 603, 601, 602, 380, 343, 344,
	412, 348, 358, 401, 448, 386, 406, 300, 439, 413,
	362, 527, 554, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 582,
	581, 580, 579, 578, 577, 576, 575, 0, 0, 524,
	426, 312, 274, 308, 309, 316, 624, 621, 430, 625,
	0, 282, 504, 356, 0, 397, 330, 569, 570, 0,
	0, 230, 231, 232, 233, 234, 235, 236, 237, 275,
	238, 239, 240, 241, 242, 243, 244, 247, 248, 249,
	250, 251, 252, 253, 254, 572, 245, 246, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 0, 0, 0, 276, 277, 278, 279, 0,
	0, 270, 271, 272, 273, 0, 0, 0, 455, 456,
	457, 479, 0, 441, 503, 622, 0, 0, 0, 0,
	0, 0, 0, 553, 565, 599, 0, 609, 610, 612,
	614, 613, 616, 418, 0, 617, 0, 628, 494, 495,
	629, 605, 385, 0, 509, 542, 531, 615, 497, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 325,
	0, 0, 355, 546, 528, 538, 529, 514, 515, 516,
	523, 335, 517, 518, 519, 489, 520, 490, 521, 522,
	0, 545, 496, 414, 369, 563, 562, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 217, 0, 0, 0, 0,
	0, 0, 298, 218, 491, 611, 493, 492, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 301, 0, 2361,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 288,
	420, 437, 299, 410, 450, 304, 417, 294, 384, 407,
	0, 0, 290, 435, 416, 366, 345, 346, 289, 0,
	402, 323, 337, 320, 382, 0, 434, 462, 319, 453,
	0, 445, 292, 0, 444, 381, 431, 436, 367, 361,
	0, 291, 433, 365, 360, 349, 327, 478, 350, 351,
	341, 393, 359, 394, 342, 371, 370, 372, 0, 0,
	0, 0, 0, 473, 474, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 604, 0, 0,
	608, 2360, 447, 0, 0, 0, 2366, 2363, 2365, 419,
	0, 2364, 352, 0, 0, 0, 463, 0, 405, 387,
	631, 0, 2358, 403, 357, 432, 395, 438, 421, 446,
	399, 396, 283, 422, 322, 368, 295, 297, 317, 324,
	326, 328, 329, 377, 378, 390, 409, 423, 424, 425,
	321, 305, 404, 306, 339, 307, 284, 313, 311, 314,
	411, 315, 286, 391, 429, 0, 334, 400, 364, 287,
	363, 392, 428, 427, 296, 454, 460, 461, 550, 0,
	466, 632, 633, 634, 475, 0, 0, 480, 481, 482,
	484, 485, 486, 487, 551, 568, 535, 505, 468, 559,
	502, 506, 507, 571, 0, 0, 0, 459, 353, 354,
	0, 332, 280, 281, 627, 318, 383, 573, 606, 607,
	498, 0, 560, 499, 508, 310, 532, 544, 543, 379,
	458, 0, 555, 558, 488, 626, 0, 552, 567, 630,
	566, 623, 389, 0, 408, 564, 511, 0, 556, 530,
	0, 557, 526, 561, 0, 500, 0, 415, 440, 452,
	469, 472, 501, 586, 587, 588, 285, 471, 590, 591,
	592, 593, 594, 595, 596, 589, 443, 533, 510, 536,
	451, 513, 512, 0, 0, 547, 467, 548, 549, 373,
	374, 375, 376, 336, 574, 303, 470, 398, 0, 534,
	0, 0, 0, 0, 0, 0, 0, 0, 539, 540,
	537, 635, 0, 597, 598, 0, 0, 464, 465, 331,
	338, 483, 340, 302, 388, 333, 449, 347, 0, 476,
	541, 477, 600, 603, 601, 602, 380, 343, 344, 412,
	348, 358, 401, 448, 386, 406, 300, 439, 413, 362,
	527, 554, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 269, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 582, 581,
	580, 579, 578, 577, 576, 575, 0, 0, 524, 426,
	312, 274, 308, 309, 316, 624, 621, 430, 625, 0,
	282, 504, 356, 0, 397, 330, 569, 570, 0, 0,
	230, 231, 232, 233, 234, 235, 236, 237, 275, 238,
	239, 240, 241, 242, 243, 244, 247, 248, 249, 250,
	251, 252, 253, 254, 572, 245, 246, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 0, 0, 0, 276, 277, 278, 279, 0, 0,
	270, 271, 272, 273, 0, 0, 0, 455, 456, 457,
	479, 0, 441, 503, 622, 0, 0, 0, 0, 0,
	0, 0, 553, 565, 599, 0, 609, 610, 612, 614,
	613, 616, 418, 0, 617, 0, 628, 494, 495, 629,
	605, 385, 0, 509, 542, 531, 615, 497, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 325, 0,
	0, 355, 546, 528, 538, 529, 514, 515, 516, 523,
	335, 517, 518, 519, 489, 520, 490, 521, 522, 0,
	545, 496, 414, 369, 563, 562, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 217, 0, 0, 0, 0, 0,
	0, 298, 218, 491, 611, 493, 492, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 301, 0, 2361, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 288, 420,
	437, 299, 410, 450, 304, 417, 294, 384, 407, 0,
	0, 290, 435, 416, 366, 345, 346, 289, 0, 402,
	323, 337, 320, 382, 0, 434, 462, 319, 453, 0,
	445, 292, 0, 444, 381, 431, 436, 367, 361, 0,
	291, 433, 365, 360, 349, 327, 478, 350, 351, 341,
	393, 359, 394, 342, 371, 370, 372, 0, 0, 0,
	0, 0, 473, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 604, 0, 0, 608,
	2360, 447, 0, 0, 0, 2366, 2363, 2365, 419, 0,
	2364, 352, 0, 0, 0, 463, 0, 405, 387, 631,
	0, 0, 403, 357, 432, 395, 438, 421, 446, 399,
	396, 283, 422, 322, 368, 295, 297, 317, 324, 326,
	328, 329, 377, 378, 390, 409, 423, 424, 425, 321,
	305, 404, 306, 339, 307, 284, 313, 311, 314, 411,
	315, 286, 391, 429, 0, 334, 400, 364, 287, 363,
	392, 428, 427, 296, 454, 460, 461, 550, 0, 466,
	632, 633, 634, 475, 0, 0, 480, 481, 482, 484,
	485, 486, 487, 551, 568, 535, 505, 468, 559, 502,
	506, 507, 571, 0, 0, 0, 459, 353, 354, 0,
	332, 280, 281, 627, 318, 383, 573, 606, 607, 498,
	0, 560, 499, 508, 310, 532, 544, 543, 379, 458,
	0, 555, 558, 488, 626, 0, 552, 567, 630, 566,
	623, 389, 0, 408, 564, 511, 0, 556, 530, 0,
	557, 526, 561, 0, 500, 0, 415, 440, 452, 469,
	472, 501, 586, 587, 588, 285, 471, 590, 591, 592,
	593, 594, 595, 596, 589, 443, 533, 510, 536, 451,
	513, 512, 0, 0, 547, 467, 548, 549, 373, 374,
	375, 376, 336, 574, 303, 470, 398, 0, 534, 0,
	0, 0, 0, 0, 0, 0, 0, 539, 540, 537,
	635, 0, 597, 598, 0, 0, 464, 465, 331, 338,
	483, 340, 302, 388, 333, 449, 347, 0, 476, 541,
	477, 600, 603, 601, 602, 380, 343, 344, 412, 348,
	358, 401, 448, 386, 406, 300, 439, 413, 362, 527,
	554, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 269, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 582, 581, 580,
	579, 578, 577, 576, 575, 0, 0, 524, 426, 312,
	274, 308, 309, 316, 624, 621, 430, 625, 0, 282,
	504, 356, 0, 397, 330, 569, 570, 0, 0, 230,
	231, 232, 233, 234, 235, 236, 237, 275, 238, 239,
	240, 241, 242, 243, 244, 247, 248, 249, 250, 251,
	252, 253, 254, 572, 245, 246, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	0, 0, 0, 276, 277, 278, 279, 0, 0, 270,
	271, 272, 273, 0, 0, 0, 455, 456, 457, 479,
	0, 441, 503, 622, 0, 0, 0, 0, 0, 0,
	0, 553, 565, 599, 0, 609, 610, 612, 614, 613,
	616, 418, 0, 617, 0, 628, 494, 495, 629, 605,
	385, 0, 509, 542, 531, 615, 497, 0, 0, 0,
	0, 0, 2060, 0, 0, 0, 0, 325, 0, 0,
	355, 546, 528, 538, 529, 514, 515, 516, 523, 335,
	517, 518, 519, 489, 520, 490, 521, 522, 0, 545,
	496, 414, 369, 563, 562, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 217, 0, 0, 2061, 0, 0, 0,
	298, 218, 491, 611, 493, 492, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 1213, 1214,
	1215, 1212, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 288, 420, 437,
	299, 410, 450, 304, 417, 294, 384, 407, 0, 0,
	290, 435, 416, 366, 345, 346, 289, 0, 402, 323,
	337, 320, 382, 0, 434, 462, 319, 453, 0, 445,
	292, 0, 444, 381, 431, 436, 367, 361, 0, 291,
	433, 365, 360, 349, 327, 478, 350, 351, 341, 393,
	359, 394, 342, 371, 370, 372, 0, 0, 0, 0,
	0, 473, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 604, 0, 0, 608, 0,
	447, 0, 0, 0, 0, 0, 0, 419, 0, 0,
	352, 0, 0, 0, 463, 0, 405, 387, 631, 0,
	0, 403, 357, 432, 395, 438, 421, 446, 399, 396,
	283, 422, 322, 368, 295, 297, 317, 324, 326, 328,
	329, 377, 378, 390, 409, 423, 424, 425, 321, 305,
	404, 306, 339, 307, 284, 313, 311, 314, 411, 315,
	286, 391, 429, 0, 334, 400, 364, 287, 363, 392,
	428, 427, 296, 454, 460, 461, 550, 0, 466, 632,
	633, 634, 475, 0, 0, 480, 481, 482, 484, 485,
	486, 487, 551, 568, 535, 505, 468, 559, 502, 506,
	507, 571, 0, 0, 0, 459, 353, 354, 0, 332,
	280, 281, 627, 318, 383, 573, 606, 607, 498, 0,
	560, 499, 508, 310, 532, 544, 543, 379, 458, 0,
	555, 558, 488, 626, 0, 552, 567, 630, 566, 623,
	389, 0, 408, 564, 511, 0, 556, 530, 0, 557,
	526, 561, 0, 500, 0, 415, 440, 452, 469, 472,
	501, 586, 587, 588, 285, 471, 590, 591, 592, 593,
	594, 595, 596, 589, 443, 533, 510, 536, 451, 513,
	512, 0, 0, 547, 467, 548, 549, 373, 374, 375,
	376, 336, 574, 303, 470, 398, 0, 534, 0, 0,
	0, 0, 0, 0, 0, 0, 539, 540, 537, 635,
	0, 597, 598, 0, 0, 464, 465, 331, 338, 483,
	340, 302, 388, 333, 449, 347, 0, 476, 541, 477,
	600, 603, 601, 602, 380, 343, 344, 412, 348, 358,
	401, 448, 386, 406, 300, 439, 413, 362, 527, 554,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 269, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 582, 581, 580, 579,
	578, 577, 576, 575, 0, 0, 524, 426, 312, 274,
	308, 309, 316, 624, 621, 430, 625, 0, 282, 504,
	356, 0, 397, 330, 569, 570, 0, 0, 230, 231,
	232, 233, 234, 235, 236, 237, 275, 238, 239, 240,
	241, 242, 243, 244, 247, 248, 249, 250, 251, 252,
	253, 254, 572, 245, 246, 255, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 0,
	0, 0, 276, 277, 278, 279, 0, 0, 270, 271,
	272, 273, 0, 0, 0, 455, 456, 457, 479, 0,
	441, 503, 622, 0, 0, 0, 0, 0, 0, 0,
	553, 565, 599, 0, 609, 610, 612, 614, 613, 616,
	418, 195, 617, 0, 628, 494, 495, 629, 605, 0,
	0, 385, 0, 509, 542, 531, 615, 497, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 325, 0,
	0, 355, 546, 528, 538, 529, 514, 515, 516, 523,
	335, 517, 518, 519, 489, 520, 490, 521, 522, 131,
	545, 496, 414, 369, 563, 562, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 191, 2110, 0, 217, 0, 0, 0, 0, 0,
	0, 298, 218, 491, 611, 493, 492, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 301, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 288, 420,
	437, 299, 410, 450, 304, 417, 294, 384, 407, 0,
	0, 290, 435, 416, 366, 345, 346, 289, 0, 402,
	323, 337, 320, 382, 0, 434, 462, 319, 453, 0,
	445, 292, 0, 444, 381, 431, 436, 367, 361, 0,
	291, 433, 365, 360, 349, 327, 478, 350, 351, 341,
	393, 359, 394, 342, 371, 370, 372, 0, 0, 0,
	0, 0, 473, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 604, 0, 0, 608,
	0, 447, 0, 0, 0, 0, 0, 0, 419, 0,
	0, 352, 0, 0, 0, 463, 0, 405, 387, 631,
	0, 0, 403, 357, 432, 395, 438, 421, 446, 399,
	396, 283, 422, 322, 368, 295, 297, 317, 324, 326,
	328, 329, 377, 378, 390, 409, 423, 424, 425, 321,
	305, 404, 306, 339, 307, 284, 313, 311, 314, 411,
	315, 286, 391, 429, 0, 334, 400, 364, 287, 363,
	392, 428, 427, 296, 454, 460, 461, 550, 0, 466,
	632, 633, 634, 475, 0, 0, 480, 481, 482, 484,
	485, 486, 487, 551, 568, 535, 505, 468, 559, 502,
	506, 507, 571, 0, 0, 0, 459, 353, 354, 0,
	332, 280, 281, 627, 318, 383, 573, 606, 607, 498,
	0, 560, 499, 508, 310, 532, 544, 543, 379, 458,
	0, 555, 558, 488, 626, 0, 552, 567, 630, 566,
	623, 389, 0, 408, 564, 511, 0, 556, 530, 0,
	557, 526, 561, 0, 500, 0, 415, 440, 452, 469,
	472, 501, 586, 587, 588, 285, 471, 590, 591, 592,
	593, 594, 595, 596, 589, 443, 533, 510, 536, 451,
	513, 512, 0, 0, 547, 467, 548, 549, 373, 374,
	375, 376, 336, 574, 303, 470, 398, 0, 534, 0,
	0, 0, 0, 0, 0, 0, 0, 539, 540, 537,
	635, 0, 597, 598, 0, 0, 464, 465, 331, 338,
	483, 340, 302, 388, 333, 449, 347, 0, 476, 541,
	477, 600, 603, 601, 602, 380, 343, 344, 412, 348,
	358, 401, 448, 386, 406, 300, 439, 413, 362, 527,
	554, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 269, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 582, 581, 580,
	579, 578, 577, 576, 575, 0, 0, 524, 426, 312,
	274, 308, 309, 316, 624, 621, 430, 625, 0, 282,
	504, 356, 158, 397, 330, 569, 570, 0, 0, 230,
	231, 232, 233, 234, 235, 236, 237, 275, 238, 239,
	240, 241, 242, 243, 244, 247, 248, 249, 250, 251,
	252, 253, 254, 572, 245, 246, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	0, 0, 0, 276, 277, 278, 279, 0, 0, 270,
	271, 272, 273, 0, 0, 0, 455, 456, 457, 479,
	0, 441, 503, 622, 0, 0, 0, 0, 0, 0,
	0, 553, 565, 599, 0, 609, 610, 612, 614, 613,
	616, 418, 195, 617, 0, 628, 494, 495, 629, 605,
	0, 0, 385, 0, 509, 542, 531, 615, 497, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 325,
	0, 0, 355, 546, 528, 538, 529, 514, 515, 516,
	523, 335, 517, 518, 519, 489, 520, 490, 521, 522,
	131, 545, 496, 414, 369, 563, 562, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 191, 2096, 0, 217, 0, 0, 0, 0,
	0, 0, 298, 218, 491, 611, 493, 492, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 301, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 288,
	420, 437, 299, 410, 450, 304, 417, 294, 384, 407,
	0, 0, 290, 435, 416, 366, 345, 346, 289, 0,
	402, 323, 337, 320, 382, 0, 434, 462, 319, 453,
	0, 445, 292, 0, 444, 381, 431, 436, 367, 361,
	0, 291, 433, 365, 360, 349, 327, 478, 350, 351,
	341, 393, 359, 394, 342, 371, 370, 372, 0, 0,
	0, 0, 0, 473, 474, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 604, 0, 0,
	608, 0, 447, 0, 0, 0, 0, 0, 0, 419,
	0, 0, 352, 0, 0, 0, 463, 0, 405, 387,
	631, 0, 0, 403, 357, 432, 395, 438, 421, 446,
	399, 396, 283, 422, 322, 368, 295, 297, 317, 324,
	326, 328, 329, 377, 378, 390, 409, 423, 424, 425,
	321, 305, 404, 306, 339, 307, 284, 313, 311, 314,
	411, 315, 286, 391, 429, 0, 334, 400, 364, 287,
	363, 392, 428, 427, 296, 454, 460, 461, 550, 0,
	466, 632, 633, 634, 475, 0, 0, 480, 481, 482,
	484, 485, 486, 487, 551, 568, 535, 505, 468, 559,
	502, 506, 507, 571, 0, 0, 0, 459, 353, 354,
	0, 332, 280, 281, 627, 318, 383, 573, 606, 607,
	498, 0, 560, 499, 508, 310, 532, 544, 543, 379,
	458, 0, 555, 558, 488, 626, 0, 552, 567, 630,
	566, 623, 389, 0, 408, 564, 511, 0, 556, 530,
	0, 557, 526, 561, 0, 500, 0, 415, 440, 452,
	469, 472, 501, 586, 587, 588, 285, 471, 590, 591,
	592, 593, 594, 595, 596, 589, 443, 533, 510, 536,
	451, 513, 512, 0, 0, 547, 467, 548, 549, 373,
	374, 375, 376, 336, 574, 303, 470, 398, 0, 534,
	0, 0, 0, 0, 0, 0, 0, 0, 539, 540,
	537, 635, 0, 597, 598, 0, 0, 464, 465, 331,
	338, 483, 340, 302, 388, 333, 449, 347, 0, 476,
	541, 477, 600, 603, 601, 602, 380, 343, 344, 412,
	348, 358, 401, 448, 386, 406, 300, 439, 413, 362,
	527, 554, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 269, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 582, 581,
	580, 579, 578, 577, 576, 575, 0, 0, 524, 426,
	312, 274, 308, 309, 316, 624, 621, 430, 625, 0,
	282, 504, 356, 158, 397, 330, 569, 570, 0, 0,
	230, 231, 232, 233, 234, 235, 236, 237, 275, 238,
	239, 240, 241, 242, 243, 244, 247, 248, 249, 250,
	251, 252, 253, 254, 572, 245, 246, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 0, 0, 0, 276, 277, 278, 279, 0, 0,
	270, 271, 272, 273, 0, 0, 0, 455, 456, 457,
	479, 0, 441, 503, 622, 0, 0, 0, 0, 0,
	0, 0, 553, 565, 599, 0, 609, 610, 612, 614,
	613, 616, 418, 0, 617, 0, 628, 494, 495, 629,
	605, 385, 0, 509, 542, 531, 615, 497, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 325, 1011,
	0, 355, 546, 528, 538, 529, 514, 515, 516, 523,
	335, 517, 518, 519, 489, 520, 490, 521, 522, 0,
	545, 496, 414, 369, 563, 562, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 217, 1018, 1019, 0, 0, 0,
	0, 298, 218, 491, 611, 493, 492, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1022, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 288, 420,
	1005, 299, 410, 450, 304, 417, 294, 384, 407, 0,
	0, 290, 435, 416, 366, 345, 346, 289, 0, 402,
	323, 337, 320, 382, 0, 434, 462, 319, 453, 993,
	445, 292, 992, 444, 381, 431, 436, 367, 361, 0,
	291, 433, 365, 360, 349, 327, 478, 350, 351, 341,
	393, 359, 394, 342, 371, 370, 372, 0, 0, 0,
	0, 0, 473, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 604, 0, 0, 608,
	0, 447, 0, 0, 0, 0, 0, 0, 419, 0,
	0, 352, 0, 0, 0, 463, 0, 405, 387, 631,
	0, 0, 403, 357, 432, 395, 438, 421, 446, 1009,
	396, 283, 422, 322, 368, 295, 297, 317, 324, 326,
	328, 329, 377, 378, 390, 409, 423, 424, 425, 321,
	305, 404, 306, 339, 307, 284, 313, 311, 314, 411,
	315, 286, 391, 429, 0, 334, 400, 364, 287, 363,
	392, 428, 427, 296, 454, 460, 461, 550, 0, 466,
	632, 633, 634, 475, 0, 0, 480, 481, 482, 484,
	485, 486, 487, 551, 568, 535, 505, 468, 559, 502,
	506, 507, 571, 0, 0, 0, 459, 353, 354, 0,
	332, 280, 281, 627, 318, 383, 573, 606, 607, 498,
	0, 560, 499, 508, 310, 532, 544, 543, 379, 458,
	0, 555, 558, 488, 626, 0, 552, 567, 630, 566,
	623, 389, 0, 408, 564, 511, 0, 556, 530, 0,
	557, 526, 561, 0, 500, 0, 415, 440, 452, 469,
	472, 501, 586, 587, 588, 285, 471, 590, 591, 592,
	593, 594, 595, 1010, 589, 443, 533, 510, 536, 451,
	513, 512, 0, 0, 547, 1013, 548, 549, 373, 374,
	375, 376, 336, 574, 1008, 470, 398, 0, 534, 0,
	0, 0, 0, 0, 0, 0, 0, 539, 540, 537,
	635, 0, 597, 598, 0, 0, 464, 465, 331, 338,
	483, 340, 302, 388, 333, 449, 347, 0, 476, 541,
	477, 600, 603, 601, 602, 1020, 1006, 1016, 1007, 348,
	358, 401, 448, 386, 406, 300, 439, 413, 1017, 527,
	554, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 269, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 582, 581, 580,
	579, 578, 577, 576, 575, 0, 0, 524, 426, 312,
	274, 308, 309, 316, 624, 621, 430, 625, 0, 282,
	504, 356, 0, 397, 330, 569, 570, 0, 0, 230,
	231, 232, 233, 234, 235, 236, 237, 275, 238, 239,
	240, 241, 242, 243, 244, 247, 248, 249, 250, 251,
	252, 253, 254, 572, 245, 246, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	0, 0, 0, 276, 277, 278, 279, 0, 0, 270,
	271, 272, 273, 0, 0, 0, 455, 456, 457, 479,
	0, 441, 503, 622, 0, 0, 0, 0, 0, 0,
	0, 553, 565, 599, 0, 609, 610, 612, 614, 613,
	616, 418, 195, 617, 0, 628, 494, 495, 629, 605,
	0, 0, 385, 0, 509, 542, 531, 615, 497, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 325,
	0, 0, 355, 546, 528, 538, 529, 514, 515, 516,
	523, 335, 517, 518, 519, 489, 520, 490, 521, 522,
	131, 545, 496, 414, 369, 563, 562, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1992, 0, 0, 217, 0, 0, 0, 0,
	0, 0, 298, 218, 491, 611, 493, 492, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 301, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 288,
	420, 437, 299, 410, 450, 304, 417, 294, 384, 407,
	0, 0, 290, 435, 416, 366, 345, 346, 289, 0,
	402, 323, 337, 320, 382, 0, 434, 462, 319, 453,
	0, 445, 292, 0, 444, 381, 431, 436, 367, 361,
	0, 291, 433, 365, 360, 349, 327, 478, 350, 351,
	341, 393, 359, 394, 342, 371, 370, 372, 0, 0,
	0, 0, 0, 473, 474, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 604, 0, 0,
	608, 0, 447, 0, 0, 0, 0, 0, 0, 419,
	0, 0, 352, 0, 0, 0, 463, 0, 405, 387,
	631, 0, 0, 403, 357, 432, 395, 438, 421, 446,
	399, 396, 283, 422, 322, 368, 295, 297, 317, 324,
	326, 328, 329, 377, 378, 390, 409, 423, 424, 425,
	321, 305, 404, 306, 339, 307, 284, 313, 311, 314,
	411, 315, 286, 391, 429, 0, 334, 400, 364, 287,
	363, 392, 428, 427, 296, 454, 460, 461, 550, 0,
	466, 632, 633, 634, 475, 0, 0, 480, 481, 482,
	484, 485, 486, 487, 551, 568, 535, 505, 468, 559,
	502, 506, 507, 571, 0, 0, 0, 459, 353, 354,
	0, 332, 280, 281, 627, 318, 383, 573, 606, 607,
	498, 0, 560, 499, 508, 310, 532, 544, 543, 379,
	458, 0, 555, 558, 488, 626, 0, 552, 567, 630,
	566, 623, 389, 0, 408, 564, 511, 0, 556, 530,
	0, 557, 526, 561, 0, 500, 0, 415, 440, 452,
	469, 472, 501, 586, 587, 588, 285, 471, 590, 591,
	592, 593, 594, 595, 596, 589, 443, 533, 510, 536,
	451, 513, 512, 0, 0, 547, 467, 548, 549, 373,
	374, 375, 376, 336, 574, 303, 470, 398, 0, 534,
	0, 0, 0, 0, 0, 0, 0, 0, 539, 540,
	537, 635, 0, 597, 598, 0, 0, 464, 465, 331,
	338, 483, 340, 302, 388, 333, 449, 347, 0, 476,
	541, 477, 600, 603, 601, 602, 380, 343, 344, 412,
	348, 358, 401, 448, 386, 406, 300, 439, 413, 362,
	527, 554, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 269, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 582, 581,
	580, 579, 578, 577, 576, 575, 0, 0, 524, 426,
	312, 274, 308, 309, 316, 624, 621, 430, 625, 0,
	282, 504, 356, 158, 397, 330, 569, 570, 0, 0,
	230, 231, 232, 233, 234, 235, 236, 237, 275, 238,
	239, 240, 241, 242, 243, 244, 247, 248, 249, 250,
	251, 252, 253, 254, 572, 245, 246, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 0, 0, 0, 276, 277, 278, 279, 0, 0,
	270, 271, 272, 273, 0, 0, 0, 455, 456, 457,
	479, 0, 441, 503, 622, 0, 0, 0, 0, 0,
	0, 0, 553, 565, 599, 0, 609, 610, 612, 614,
	613, 616, 418, 0, 617, 0, 628, 494, 495, 629,
	605, 385, 0, 509, 542, 531, 615, 497, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 325, 0,
	0, 355, 546, 528, 538, 529, 514, 515, 516, 523,
	335, 517, 518, 519, 489, 520, 490, 521, 522, 0,
	545, 496, 414, 369, 563, 562, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 217, 1018, 1019, 0, 0, 0,
	0, 298, 218, 491, 611, 493, 492, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1022, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 288, 420,
	437, 299, 410, 450, 304, 417, 294, 384, 407, 0,
	0, 290, 435, 416, 366, 345, 346, 289, 0, 402,
	323, 337, 320, 382, 0, 434, 462, 319, 453, 993,
	445, 292, 992, 444, 381, 431, 436, 367, 361, 0,
	291, 433, 365, 360, 349, 327, 478, 350, 351, 341,
	393, 359, 394, 342, 371, 370, 372, 0, 0, 0,
	0, 0, 473, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 604, 0, 0, 608,
	0, 447, 0, 0, 0, 0, 0, 0, 419, 0,
	0, 352, 0, 0, 0, 463, 0, 405, 387, 631,
	0, 0, 403, 357, 432, 395, 438, 421, 446, 399,
	396, 283, 422, 322, 368, 295, 297, 317, 324, 326,
	328, 329, 377, 378, 390, 409, 423, 424, 425, 321,
	305, 404, 306, 339, 307, 284, 313, 311, 314, 411,
	315, 286, 391, 429, 0, 334, 400, 364, 287, 363,
	392, 428, 427, 296, 454, 460, 461, 550, 0, 466,
	632, 633, 634, 475, 0, 0, 480, 481, 482, 484,
	485, 486, 487, 551, 568, 535, 505, 468, 559, 502,
	506, 507, 571, 0, 0, 0, 459, 353, 354, 0,
	332, 280, 281, 627, 318, 383, 573, 606, 607, 498,
	0, 560, 499, 508, 310, 532, 544, 543, 379, 458,
	0, 555, 558, 488, 626, 0, 552, 567, 630, 566,
	623, 389, 0, 408, 564, 511, 0, 556, 530, 0,
	557, 526, 561, 0, 500, 0, 415, 440, 452, 469,
	472, 501, 586, 587, 588, 285, 471, 590, 591, 592,
	593, 594, 595, 596, 589, 443, 533, 510, 536, 451,
	513, 512, 0, 0, 547, 467, 548, 549, 373, 374,
	375, 376, 336, 574, 303, 470, 398, 0, 534, 0,
	0, 0, 0, 0, 0, 0, 0, 539, 540, 537,
	635, 0, 597, 598, 0, 0, 464, 465, 331, 338,
	483, 340, 302, 388, 333, 449, 347, 0, 476, 541,
	477, 600, 603, 601, 602, 1020, 2012, 1016, 2013, 348,
	358, 401, 448, 386, 406, 300, 439, 413, 1017, 527,
	554, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 269, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 582, 581, 580,
	579, 578, 577, 576, 575, 0, 0, 524, 426, 312,
	274, 308, 309, 316, 624, 621, 430, 625, 0, 282,
	504, 356, 0, 397, 330, 569, 570, 0, 0, 230,
	231, 232, 233, 234, 235, 236, 237, 275, 238, 239,
	240, 241, 242, 243, 244, 247, 248, 249, 250, 251,
	252, 253, 254, 572, 245, 246, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	0, 0, 0, 276, 277, 278, 279, 0, 0, 270,
	271, 272, 273, 0, 0, 0, 455, 456, 457, 479,
	0, 441, 503, 622, 0, 0, 0, 0, 0, 0,
	0, 553, 565, 599, 0, 609, 610, 612, 614, 613,
	616, 418, 0, 617, 0, 628, 494, 495, 629, 605,
	385, 0, 509, 542, 531, 615, 497, 0, 0, 2874,
	0, 0, 0, 0, 0, 0, 0, 325, 0, 0,
	355, 546, 528, 538, 529, 514, 515, 516, 523, 335,
	517, 518, 519, 489, 520, 490, 521, 522, 0, 545,
	496, 414, 369, 563, 562, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 217, 0, 0, 0, 0, 0, 0,
	298, 218, 491, 611, 493, 492, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 288, 420, 437,
	299, 410, 450, 304, 417, 294, 384, 407, 0, 0,
	290, 435, 416, 366, 345, 346, 289, 0, 402, 323,
	337, 320, 382, 0, 434, 462, 319, 453, 0, 445,
	292, 0, 444, 381, 431, 436, 367, 361, 0, 291,
	433, 365, 360, 349, 327, 478, 350, 351, 341, 393,
	359, 394, 342, 371, 370, 372, 0, 0, 0, 0,
	0, 473, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 2877, 0, 0, 2876, 604, 0, 0, 608, 0,
	447, 0, 0, 0, 0, 0, 0, 419, 0, 0,
	352, 0, 0, 0, 463, 0, 405, 387, 631, 0,
	0, 403, 357, 432, 395, 438, 421, 446, 399, 396,
	283, 422, 322, 368, 295, 297, 317, 324, 326, 328,
	329, 377, 378, 390, 409, 423, 424, 425, 321, 305,
	404, 306, 339, 307, 284, 313, 311, 314, 411, 315,
	286, 391, 429, 0, 334, 400, 364, 287, 363, 392,
	428, 427, 296, 454, 460, 461, 550, 0, 466, 632,
	633, 634, 475, 0, 0, 480, 481, 482, 484, 485,
	486, 487, 551, 568, 535, 505, 468, 559, 502, 506,
	507, 571, 0, 0, 0, 459, 353, 354, 0, 332,
	280, 281, 627, 318, 383, 573, 606, 607, 498, 0,
	560, 499, 508, 310, 532, 544, 543, 379, 458, 0,
	555, 558, 488, 626, 0, 552, 567, 630, 566, 623,
	389, 0, 408, 564, 511, 0, 556, 530, 0, 557,
	526, 561, 0, 500, 0, 415, 440, 452, 469, 472,
	501, 586, 587, 588, 285, 471, 590, 591, 592, 593,
	594, 595, 596, 589, 443, 533, 510, 536, 451, 513,
	512, 0, 0, 547, 467, 548, 549, 373, 374, 375,
	376, 336, 574, 303, 470, 398, 0, 534, 0, 0,
	0, 0, 0, 0, 0, 0, 539, 540, 537, 635,
	0, 597, 598, 0, 0, 464, 465, 331, 338, 483,
	340, 302, 388, 333, 449, 347, 0, 476, 541, 477,
	600, 603, 601, 602, 380, 343, 344, 412, 348, 358,
	401, 448, 386, 406, 300, 439, 413, 362, 527, 554,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 269, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 582, 581, 580, 579,
	578, 577, 576, 575, 0, 0, 524, 426, 312, 274,
	308, 309, 316, 624, 621, 430, 625, 0, 282, 504,
	356, 0, 397, 330, 569, 570, 0, 0, 230, 231,
	232, 233, 234, 235, 236, 237, 275, 238, 239, 240,
	241, 242, 243, 244, 247, 248, 249, 250, 251, 252,
	253, 254, 572, 245, 246, 255, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 0,
	0, 0, 276, 277, 278, 279, 0, 0, 270, 271,
	272, 273, 0, 0, 0, 455, 456, 457, 479, 0,
	441, 503, 622, 0, 0, 0, 0, 0, 0, 0,
	553, 565, 599, 0, 609, 610, 612, 614, 613, 616,
	418, 0, 617, 0, 628, 494, 495, 629, 605, 385,
	0, 509, 542, 531, 615, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 325, 1494, 0, 355,
	546, 528, 538, 529, 514, 515, 516, 523, 335, 517,
	518, 519, 489, 520, 490, 521, 522, 0, 545, 496,
	414, 369, 563, 562, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 217, 0, 0, 1492, 0, 0, 0, 298,
	218, 491, 611, 493, 492, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 301, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1490,
	0, 0, 0, 0, 0, 0, 288, 420, 437, 299,
	410, 450, 304, 417, 294, 384, 407, 0, 0, 290,
	435, 416, 366, 345, 346, 289, 0, 402, 323, 337,
	320, 382, 0, 434, 462, 319, 453, 0, 445, 292,
	0, 444, 381, 431, 436, 367, 361, 0, 291, 433,
	365, 360, 349, 327, 478, 350, 351, 341, 393, 359,
	394, 342, 371, 370, 372, 0, 0, 0, 0, 0,
	473, 474, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 604, 0, 0, 608, 0, 447,
	0, 0, 0, 0, 0, 0, 419, 0, 0, 352,
	0, 0, 0, 463, 0, 405, 387, 631, 0, 0,
	403, 357, 432, 395, 438, 421, 446, 399, 396, 283,
	422, 322, 368, 295, 297, 317, 324, 326, 328, 329,
	377, 378, 390, 409, 423, 424, 425, 321, 305, 404,
	306, 339, 307, 284, 313, 311, 314, 411, 315, 286,
	391, 429, 0, 334, 400, 364, 287, 363, 392, 428,
	427, 296, 454, 460, 461, 550, 0, 466, 632, 633,
	634, 475, 0, 0, 480, 481, 482, 484, 485, 486,
	487, 551, 568, 535, 505, 468, 559, 502, 506, 507,
	571, 0, 0, 0, 459, 353, 354, 0, 332, 280,
	281, 627, 318, 383, 573, 606, 607, 498, 0, 560,
	499, 508, 310, 532, 544, 543, 379, 458, 0, 555,
	558, 488, 626, 0, 552, 567, 630, 566, 623, 389,
	0, 408, 564, 511, 0, 556, 530, 0, 557, 526,
	561, 0, 500, 0, 415, 440, 452, 469, 472, 501,
	586, 587, 588, 285, 471, 590, 591, 592, 593, 594,
	595, 596, 589, 443, 533, 510, 536, 451, 513, 512,
	0, 0, 547, 467, 548, 549, 373, 374, 375, 376,
	336, 574, 303, 470, 398, 0, 534, 0, 0, 0,
	0, 0, 0, 0, 0, 539, 540, 537, 635, 0,
	597, 598, 0, 0, 464, 465, 331, 338, 483, 340,
	302, 388, 333, 449, 347, 0, 476, 541, 477, 600,
	603, 601, 602, 380, 343, 344, 412, 348, 358, 401,
	448, 386, 406, 300, 439, 413, 362, 527, 554, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	269, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 582, 581, 580, 579, 578,
	577, 576, 575, 0, 0, 524, 426, 312, 274, 308,
	309, 316, 624, 621, 430, 625, 0, 282, 504, 356,
	0, 397, 330, 569, 570, 0, 0, 230, 231, 232,
	233, 234, 235, 236, 237, 275, 238, 239, 240, 241,
	242, 243, 244, 247, 248, 249, 250, 251, 252, 253,
	254, 572, 245, 246, 255, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 0, 0,
	0, 276, 277, 278, 279, 0, 0, 270, 271, 272,
	273, 0, 0, 0, 455, 456, 457, 479, 0, 441,
	503, 622, 0, 0, 0, 0, 0, 0, 0, 553,
	565, 599, 0, 609, 610, 612, 614, 613, 616, 418,
	0, 617, 0, 628, 494, 495, 629, 605, 385, 0,
	509, 542, 531, 615, 497, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 325, 1488, 0, 355, 546,
	528, 538, 529, 514, 515, 516, 523, 335, 517, 518,
	519, 489, 520, 490, 521, 522, 0, 545, 496, 414,
	369, 563, 562, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 217, 0, 0, 1492, 0, 0, 0, 298, 218,
	491, 611, 493, 492, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 301, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1490, 0,
	0, 0, 0, 0, 0, 288, 420, 437, 299, 410,
	450, 304, 417, 294, 384, 407, 0, 0, 290, 435,
	416, 366, 345, 346, 289, 0, 402, 323, 337, 320,
	382, 0, 434, 462, 319, 453, 0, 445, 292, 0,
	444, 381, 431, 436, 367, 361, 0, 291, 433, 365,
	360, 349, 327, 478, 350, 351, 341, 393, 359, 394,
	342, 371, 370, 372, 0, 0, 0, 0, 0, 473,
	474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 604, 0, 0, 608, 0, 447, 0,
	0, 0, 0, 0, 0, 419, 0, 0, 352, 0,
	0, 0, 463, 0, 405, 387, 631, 0, 0, 403,
	357, 432, 395, 438, 421, 446, 399, 396, 283, 422,
	322, 368, 295, 297, 317, 324, 326, 328, 329, 377,
	378, 390, 409, 423, 424, 425, 321, 305, 404, 306,
	339, 307, 284, 313, 311, 314, 411, 315, 286, 391,
	429, 0, 334, 400, 364, 287, 363, 392, 428, 427,
	296, 454, 460, 461, 550, 0, 466, 632, 633, 634,
	475, 0, 0, 480, 481, 482, 484, 485, 486, 487,
	551, 568, 535, 505, 468, 559, 502, 506, 507, 571,
	0, 0, 0, 459, 353, 354, 0, 332, 280, 281,
	627, 318, 383, 573, 606, 607, 498, 0, 560, 499,
	508, 310, 532, 544, 543, 379, 458, 0, 555, 558,
	488, 626, 0, 552, 567, 630, 566, 623, 389, 0,
	408, 564, 511, 0, 556, 530, 0, 557, 526, 561,
	0, 500, 0, 415, 440, 452, 469, 472, 501, 586,
	587, 588, 285, 471, 590, 591, 592, 593, 594, 595,
	596, 589, 443, 533, 510, 536, 451, 513, 512, 0,
	0, 547, 467, 548, 549, 373, 374, 375, 376, 336,
	574, 303, 470, 398, 0, 534, 0, 0, 0, 0,
	0, 0, 0, 0, 539, 540, 537, 635, 0, 597,
	598, 0, 0, 464, 465, 331, 338, 483, 340, 302,
	388, 333, 449, 347, 0, 476, 541, 477, 600, 603,
	601, 602, 380, 343, 344, 412, 348, 358, 401, 448,
	386, 406, 300, 439, 413, 362, 527, 554, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 582, 581, 580, 579, 578, 577,
	576, 575, 0, 0, 524, 426, 312, 274, 308, 309,
	316, 624, 621, 430, 625, 0, 282, 504, 356, 0,
	397, 330, 569, 570, 0, 0, 230, 231, 232, 233,
	234, 235, 236, 237, 275, 238, 239, 240, 241, 242,
	243, 244, 247, 248, 249, 250, 251, 252, 253, 254,
	572, 245, 246, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 0, 0, 0,
	276, 277, 278, 279, 0, 0, 270, 271, 272, 273,
	0, 0, 0, 455, 456, 457, 479, 0, 441, 503,
	622, 0, 0, 0, 0, 0, 0, 0, 553, 565,
	599, 0, 609, 610, 612, 614, 613, 616, 418, 0,
	617, 0, 628, 494, 495, 629, 605, 385, 0, 509,
	542, 531, 615, 497, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 325, 0, 0, 355, 546, 528,
	538, 529, 514, 515, 516, 523, 335, 517, 518, 519,
	489, 520, 490, 521, 522, 0, 545, 496, 414, 369,
	563, 562, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3913, 0,
	217, 822, 0, 0, 0, 0, 0, 298, 218, 491,
	611, 493, 492, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 288, 420, 437, 299, 410, 450,
	304, 417, 294, 384, 407, 0, 0, 290, 435, 416,
	366, 345, 346, 289, 0, 402, 323, 337, 320, 382,
	0, 434, 462, 319, 453, 0, 445, 292, 0, 444,
	381, 431, 436, 367, 361, 0, 291, 433, 365, 360,
	349, 327, 478, 350, 351, 341, 393, 359, 394, 342,
	371, 370, 372, 0, 0, 0, 0, 0, 473, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 604, 0, 0, 608, 0, 447, 0, 0,
	0, 0, 0, 0, 419, 0, 0, 352, 0, 0,
	0, 463, 0, 405, 387, 631, 0, 0, 403, 357,
	432, 395, 438, 421, 446, 399, 396, 283, 422, 322,
	368, 295, 297, 317, 324, 326, 328, 329, 377, 378,
	390, 409, 423, 424, 425, 321, 305, 404, 306, 339,
	307, 284, 313, 311, 314, 411, 315, 286, 391, 429,
	0, 334, 400, 364, 287, 363, 392, 428, 427, 296,
	454, 460, 461, 550, 0, 466, 632, 633, 634, 475,
	0, 0, 480, 481, 482, 484, 485, 486, 487, 551,
	568, 535, 505, 468, 559, 502, 506, 507, 571, 0,
	0, 0, 459, 353, 354, 0, 332, 280, 281, 627,
	318, 383, 573, 606, 607, 498, 0, 560, 499, 508,
	310, 532, 544, 543, 379, 458, 0, 555, 558, 488,
	626, 0, 552, 567, 630, 566, 623, 389, 0, 408,
	564, 511, 0, 556, 530, 0, 557, 526, 561, 0,
	500, 0, 415, 440, 452, 469, 472, 501, 586, 587,
	588, 285, 471, 590, 591, 592, 593, 594, 595, 596,
	589, 443, 533, 510, 536, 451, 513, 512, 0, 0,
	547, 467, 548, 549, 373, 374, 375, 376, 336, 574,
	303, 470, 398, 0, 534, 0, 0, 0, 0, 0,
	0, 0, 0, 539, 540, 537, 635, 0, 597, 598,
	0, 0, 464, 465, 331, 338, 483, 340, 302, 388,
	333, 449, 347, 0, 476, 541, 477, 600, 603, 601,
	602, 380, 343, 344, 412, 348, 358, 401, 448, 386,
	406, 300, 439, 413, 362, 527, 554, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 269, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 582, 581, 580, 579, 578, 577, 576,
	575, 0, 0, 524, 426, 312, 274, 308, 309, 316,
	624, 621, 430, 625, 0, 282, 504, 356, 0, 397,
	330, 569, 570, 0, 0, 230, 231, 232, 233, 234,
	235, 236, 237, 275, 238, 239, 240, 241, 242, 243,
	244, 247, 248, 249, 250, 251, 252, 253, 254, 572,
	245, 246, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 0, 0, 0, 276,
	277, 278, 279, 0, 0, 270, 271, 272, 273, 0,
	0, 0, 455, 456, 457, 479, 0, 441, 503, 622,
	0, 0, 0, 0, 0, 0, 0, 553, 565, 599,
	0, 609, 610, 612, 614, 613, 616, 418, 0, 617,
	0, 628, 494, 495, 629, 605, 385, 0, 509, 542,
	531, 615, 497, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 325, 0, 0, 355, 546, 528, 538,
	529, 514, 515, 516, 523, 335, 517, 518, 519, 489,
	520, 490, 521, 522, 0, 545, 496, 414, 369, 563,
	562, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 217,
	0, 0, 1492, 0, 0, 0, 298, 218, 491, 611,
	493, 492, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 301, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1490, 0, 0, 0,
	0, 0, 0, 288, 420, 437, 299, 410, 450, 304,
	417, 294, 384, 407, 0, 0, 290, 435, 416, 366,
	345, 346, 289, 0, 402, 323, 337, 320, 382, 0,
	434, 462, 319, 453, 0, 445, 292, 0, 444, 381,
	431, 436, 367, 361, 0, 291, 433, 365, 360, 349,
	327, 478, 350, 351, 341, 393, 359, 394, 342, 371,
	370, 372, 0, 0, 0, 0, 0, 473, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 604, 0, 0, 608, 0, 447, 0, 0, 0,
	0, 0, 0, 419, 0, 0, 352, 0, 0, 0,
	463, 0, 405, 387, 631, 0, 0, 403, 357, 432,
	395, 438, 421, 446, 399, 396, 283, 422, 322, 368,
	295, 297, 317, 324, 326, 328, 329, 377, 378, 390,
	409, 423, 424, 425, 321, 305, 404, 306, 339, 307,
	284, 313, 311, 314, 411, 315, 286, 391, 429, 0,
	334, 400, 364, 287, 363, 392, 428, 427, 296, 454,
	460, 461, 550, 0, 466, 632, 633, 634, 475, 0,
	0, 480, 481, 482, 484, 485, 486, 487, 551, 568,
	535, 505, 468, 559, 502, 506, 507, 571, 0, 0,
	0, 459, 353, 354, 0, 332, 280, 281, 627, 318,
	383, 573, 606, 607, 498, 0, 560, 499, 508, 310,
	532, 544, 543, 379, 458, 0, 555, 558, 488, 626,
	0, 552, 567, 630, 566, 623, 389, 0, 408, 564,
	511, 0, 556, 530, 0, 557, 526, 561, 0, 500,
	0, 415, 440, 452, 469, 472, 501, 586, 587, 588,
	285, 471, 590, 591, 592, 593, 594, 595, 596, 589,
	443, 533, 510, 536, 451, 513, 512, 0, 0, 547,
	467, 548, 549, 373, 374, 375, 376, 336, 574, 303,
	470, 398, 0, 534, 0, 0, 0, 0, 0, 0,
	0, 0, 539, 540, 537, 635, 0, 597, 598, 0,
	0, 464, 465, 331, 338, 483, 340, 302, 388, 333,
	449, 347, 0, 476, 541, 477, 600, 603, 601, 602,
	380, 343, 344, 412, 348, 358, 401, 448, 386, 406,
	300, 439, 413, 362, 527, 554, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 269, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 582, 581, 580, 579, 578, 577, 576, 575,
	0, 0, 524, 426, 312, 274, 308, 309, 316, 624,
	621, 430, 625, 0, 282, 504, 356, 0, 397, 330,
	569, 570, 0, 0, 230, 231, 232, 233, 234, 235,
	236, 237, 275, 238, 239, 240, 241, 242, 243, 244,
	247, 248, 249, 250, 251, 252, 253, 254, 572, 245,
	246, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 0, 0, 0, 276, 277,
	278, 279, 0, 0, 270, 271, 272, 273, 0, 0,
	0, 455, 456, 457, 479, 0, 441, 503, 622, 0,
	0, 0, 0, 0, 0, 0, 553, 565, 599, 0,
	609, 610, 612, 614, 613, 616, 418, 0, 617, 0,
	628, 494, 495, 629, 605, 385, 0, 509, 542, 531,
	615, 497, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 325, 0, 0, 355, 546, 528, 538, 529,
	514, 515, 516, 523, 335, 517, 518, 519, 489, 520,
	490, 521, 522, 0, 545, 496, 414, 369, 563, 562,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 217, 0,
	0, 0, 0, 0, 0, 298, 218, 491, 611, 493,
	492, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 288, 420, 437, 299, 410, 450, 304, 417,
	294, 384, 407, 0, 0, 290, 435, 416, 366, 345,
	346, 289, 0, 402, 323, 337, 320, 382, 0, 434,
	462, 319, 453, 0, 445, 292, 0, 444, 381, 431,
	436, 367, 361, 0, 291, 433, 365, 360, 349, 327,
	478, 350, 351, 341, 393, 359, 394, 342, 371, 370,
	372, 0, 0, 0, 0, 0, 473, 474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	604, 0, 0, 608, 0, 447, 0, 0, 0, 0,
	0, 0, 419, 0, 0, 352, 0, 0, 0, 463,
	0, 405, 387, 631, 0, 0, 403, 357, 432, 395,
	438, 421, 446, 399, 396, 283, 422, 322, 368, 295,
	297, 317, 324, 326, 328, 329, 377, 378, 390, 409,
	423, 424, 425, 321, 305, 404, 306, 339, 307, 284,
	313, 311, 314, 411, 315, 286, 391, 429, 0, 334,
	400, 364, 287, 363, 392, 428, 427, 296, 454, 460,
	461, 550, 0, 466, 632, 633, 634, 475, 2405, 0,
	480, 481, 482, 484, 485, 486, 487, 551, 568, 535,
	505, 468, 559, 502, 506, 507, 571, 0, 0, 0,
	459, 353, 354, 0, 332, 280, 281, 627, 318, 383,
	573, 606, 607, 498, 0, 560, 499, 508, 310, 532,
	544, 543, 379, 458, 0, 555, 558, 488, 626, 0,
	552, 567, 630, 566, 623, 389, 0, 408, 564, 511,
	0, 556, 530, 0, 557, 526, 561, 0, 500, 0,
	415, 440, 452, 469, 472, 501, 586, 587, 588, 285,
	471, 590, 591, 592, 593, 594, 595, 596, 589, 443,
	533, 510, 536, 451, 513, 512, 0, 0, 547, 467,
	548, 549, 373, 374, 375, 376, 336, 574, 303, 470,
	398, 0, 534, 0, 0, 0, 0, 0, 0, 0,
	0, 539, 540, 537, 635, 0, 597, 598, 0, 0,
	464, 465, 331, 338, 483, 340, 302, 388, 333, 449,
	347, 0, 476, 541, 477, 600, 603, 601, 602, 380,
	343, 344, 412, 348, 358, 401, 448, 386, 406, 300,
	439, 413, 362, 527, 554, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 269, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 582, 581, 580, 579, 578, 577, 576, 575, 943,
	0, 524, 426, 312, 274, 308, 309, 316, 624, 621,
	430, 625, 0, 282, 504, 356, 0, 397, 330, 569,
	570, 0, 0, 230, 231, 232, 233, 234, 235, 236,
	237, 275, 238, 239, 240, 241, 242, 243, 244, 247,
	248, 249, 250, 251, 252, 253, 254, 572, 245, 246,
	255, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 0, 0, 0, 276, 277, 278,
	279, 0, 0, 270, 271, 272, 273, 0, 0, 0,
	455, 456, 457, 479, 0, 441, 503, 622, 0, 0,
	0, 0, 0, 0, 0, 553, 565, 599, 0, 609,
	610, 612, 614, 613, 616, 418, 0, 617, 0, 628,
	494, 495, 629, 605, 385, 0, 509, 542, 531, 615,
	497, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 325, 0, 0, 355, 546, 528, 538, 529, 514,
	515, 516, 523, 335, 517, 518, 519, 489, 520, 490,
	521, 522, 0, 545, 496, 414, 369, 563, 562, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 217, 0, 0,
	1492, 0, 0, 0, 298, 218, 491, 611, 493, 492,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 301,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1700, 0, 0, 0, 0, 0,
	0, 288, 420, 437, 299, 410, 450, 304, 417, 294,
	384, 407, 0, 0, 290, 435, 416, 366, 345, 346,
	289, 0, 402, 323, 337, 320, 382, 0, 434, 462,
	319, 453, 0, 445, 292, 0, 444, 381, 431, 436,
	367, 361, 0, 291, 433, 365, 360, 349, 327, 478,
	350, 351, 341, 393, 359, 394, 342, 371, 370, 372,
	0, 0, 0, 0, 0, 473, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 604,
	0, 0, 608, 0, 447, 0, 0, 0, 0, 0,
	0, 419, 0, 0, 352, 0, 0, 0, 463, 0,
	405, 387, 631, 0, 0, 403, 357, 432, 395, 438,
	421, 446, 399, 396, 283, 422, 322, 368, 295, 297,
	317, 324, 326, 328, 329, 377, 378, 390, 409, 423,
	424, 425, 321, 305, 404, 306, 339, 307, 284, 313,
	311, 314, 411, 315, 286, 391, 429, 0, 334, 400,
	364, 287, 363, 392, 428, 427, 296, 454, 460, 461,
	550, 0, 466, 632, 633, 634, 475, 0, 0, 480,
	481, 482, 484, 485, 486, 487, 551, 568, 535, 505,
	468, 559, 502, 506, 507, 571, 0, 0, 0, 459,
	353, 354, 0, 332, 280, 281, 627, 318, 383, 573,
	606, 607, 498, 0, 560, 499, 508, 310, 532, 544,
	543, 379, 458, 0, 555, 558, 488, 626, 0, 552,
	567, 630, 566, 623, 389, 0, 408, 564, 511, 0,
	556, 530, 0, 557, 526, 561, 0, 500, 0, 415,
	440, 452, 469, 472, 501, 586, 587, 588, 285, 471,
	590, 591, 592, 593, 594, 595, 596, 589, 443, 533,
	510, 536, 451, 513, 512, 0, 0, 547, 467, 548,
	549, 373, 374, 375, 376, 336, 574, 303, 470, 398,
	0, 534, 0, 0, 0, 0, 0, 0, 0, 0,
	539, 540, 537, 635, 0, 597, 598, 0, 0, 464,
	465, 331, 338, 483, 340, 302, 388, 333, 449, 347,
	0, 476, 541, 477, 600, 603, 601, 602, 380, 343,
	344, 412, 348, 358, 401, 448, 386, 406, 300, 439,
	413, 362, 527, 554, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 269, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	582, 581, 580, 579, 578, 577, 576, 575, 0, 0,
	524, 426, 312, 274, 308, 309, 316, 624, 621, 430,
	625, 0, 282, 504, 356, 0, 397, 330, 569, 570,
	0, 0, 230, 231, 232, 233, 234, 235, 236, 237,
	275, 238, 239, 240, 241, 242, 243, 244, 247, 248,
	249, 250, 251, 252, 253, 254, 572, 245, 246, 255,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 0, 0, 0, 276, 277, 278, 279,
	0, 0, 270, 271, 272, 273, 0, 0, 0, 455,
	456, 457, 479, 0, 441, 503, 622, 0, 0, 0,
	0, 0, 0, 0, 553, 565, 599, 0, 609, 610,
	612, 614, 613, 616, 418, 0, 617, 0, 628, 494,
	495, 629, 605, 385, 0, 509, 542, 531, 615, 497,
	0, 0, 0, 0, 0, 2438, 0, 0, 0, 0,
	325, 0, 0, 355, 546, 528, 538, 529, 514, 515,
	516, 523, 335, 517, 518, 519, 489, 520, 490, 521,
	522, 0, 545, 496, 414, 369, 563, 562, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 217, 0, 0, 2440,
	0, 0, 0, 298, 218, 491, 611, 493, 492, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 301, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	288, 420, 437, 299, 410, 450, 304, 417, 294, 384,
	407, 0, 0, 290, 435, 416, 366, 345, 346, 289,
	0, 402, 323, 337, 320, 382, 0, 434, 462, 319,
	453, 0, 445, 292, 0, 444, 381, 431, 436, 367,
	361, 0, 291, 433, 365, 360, 349, 327, 478, 350,
	351, 341, 393, 359, 394, 342, 371, 370, 372, 0,
	0, 0, 0, 0, 473, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 604, 0,
	0, 608, 0, 447, 0, 0, 0, 0, 0, 0,
	419, 0, 0, 352, 0, 0, 0, 463, 0, 405,
	387, 631, 0, 0, 403, 357, 432, 395, 438, 421,
	446, 399, 396, 283, 422, 322, 368, 295, 297, 317,
	324, 326, 328, 329, 377, 378, 390, 409, 423, 424,
	425, 321, 305, 404, 306, 339, 307, 284, 313, 311,
	314, 411, 315, 286, 391, 429, 0, 334, 400, 364,
	287, 363, 392, 428, 427, 296, 454, 460, 461, 550,
	0, 466, 632, 633, 634, 475, 0, 0, 480, 481,
	482, 484, 485, 486, 487, 551, 568, 535, 505, 468,
	559, 502, 506, 507, 571, 0, 0, 0, 459, 353,
	354, 0, 332, 280, 281, 627, 318, 383, 573, 606,
	607, 498, 0, 560, 499, 508, 310, 532, 544, 543,
	379, 458, 0, 555, 558, 488, 626, 0, 552, 567,
	630, 566, 623, 389, 0, 408, 564, 511, 0, 556,
	530, 0, 557, 526, 561, 0, 500, 0, 415, 440,
	452, 469, 472, 501, 586, 587, 588, 285, 471, 590,
	591, 592, 593, 594, 595, 596, 589, 443, 533, 510,
	536, 451, 513, 512, 0, 0, 547, 467, 548, 549,
	373, 374, 375, 376, 336, 574, 303, 470, 398, 0,
	534, 0, 0, 0, 0, 0, 0, 0, 0, 539,
	540, 537, 635, 0, 597, 598, 0, 0, 464, 465,
	331, 338, 483, 340, 302, 388, 333, 449, 347, 0,
	476, 541, 477, 600, 603, 601, 602, 380, 343, 344,
	412, 348, 358, 401, 448, 386, 406, 300, 439, 413,
	362, 527, 554, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 582,
	581, 580, 579, 578, 577, 576, 575, 0, 0, 524,
	426, 312, 274, 308, 309, 316, 624, 621, 430, 625,
	0, 282, 504, 356, 0, 397, 330, 569, 570, 0,
	0, 230, 231, 232, 233, 234, 235, 236, 237, 275,
	238, 239, 240, 241, 242, 243, 244, 247, 248, 249,
	250, 251, 252, 253, 254, 572, 245, 246, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 0, 0, 0, 276, 277, 278, 279, 0,
	0, 270, 271, 272, 273, 0, 0, 0, 455, 456,
	457, 479, 0, 441, 503, 622, 0, 0, 0, 0,
	0, 0, 0, 553, 565, 599, 0, 609, 610, 612,
	614, 613, 616, 418, 0, 617, 0, 628, 494, 495,
	629, 605, 385, 0, 509, 542, 531, 615, 497, 0,
	0, 0, 0, 0, 2060, 0, 0, 0, 0, 325,
	0, 0, 355, 546, 528, 538, 529, 514, 515, 516,
	523, 335, 517, 518, 519, 489, 520, 490, 521, 522,
	0, 545, 496, 414, 369, 563, 562, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 217, 0, 0, 2061, 0,
	0, 0, 298, 218, 491, 611, 493, 492, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 301, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 288,
	420, 437, 299, 410, 450, 304, 417, 294, 384, 407,
	0, 0, 290, 435, 416, 366, 345, 346, 289, 0,
	402, 323, 337, 320, 382, 0, 434, 462, 319, 453,
	0, 445, 292, 0, 444, 381, 431, 436, 367, 361,
	0, 291, 433, 365, 360, 349, 327, 478, 350, 351,
	341, 393, 359, 394, 342, 371, 370, 372, 0, 0,
	0, 0, 0, 473, 474, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 604, 0, 0,
	608, 0, 447, 0, 0, 0, 0, 0, 0, 419,
	0, 0, 352, 0, 0, 0, 463, 0, 405, 387,
	631, 0, 0, 403, 357, 432, 395, 438, 421, 446,
	399, 396, 283, 422, 322, 368, 295, 297, 317, 324,
	326, 328, 329, 377, 378, 390, 409, 423, 424, 425,
	321, 305, 404, 306, 339, 307, 284, 313, 311, 314,
	411, 315, 286, 391, 429, 0, 334, 400, 364, 287,
	363, 392, 428, 427, 296, 454, 460, 461, 550, 0,
	466, 632, 633, 634, 475, 0, 0, 480, 481, 482,
	484, 485, 486, 487, 551, 568, 535, 505, 468, 559,
	502, 506, 507, 571, 0, 0, 0, 459, 353, 354,
	0, 332, 280, 281, 627, 318, 383, 573, 606, 607,
	498, 0, 560, 499, 508, 310, 532, 544, 543, 379,
	458, 0, 555, 558, 488, 626, 0, 552, 567, 630,
	566, 623, 389, 0, 408, 564, 511, 0, 556, 530,
	0, 557, 526, 561, 0, 500, 0, 415, 440, 452,
	469, 472, 501, 586, 587, 588, 285, 471, 590, 591,
	592, 593, 594, 595, 596, 589, 443, 533, 510, 536,
	451, 513, 512, 0, 0, 547, 467, 548, 549, 373,
	374, 375, 376, 336, 574, 303, 470, 398, 0, 534,
	0, 0, 0, 0, 0, 0, 0, 0, 539, 540,
	537, 635, 0, 597, 598, 0, 0, 464, 465, 331,
	338, 483, 340, 302, 388, 333, 449, 347, 0, 476,
	541, 477, 600, 603, 601, 602, 380, 343, 344, 412,
	348, 358, 401, 448, 386, 406, 300, 439, 413, 362,
	527, 554, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 269, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 582, 581,
	580, 579, 578, 577, 576, 575, 0, 0, 524, 426,
	312, 274, 308, 309, 316, 624, 621, 430, 625, 0,
	282, 504, 356, 0, 397, 330, 569, 570, 0, 0,
	230, 231, 232, 233, 234, 235, 236, 237, 275, 238,
	239, 240, 241, 242, 243, 244, 247, 248, 249, 250,
	251, 252, 253, 254, 572, 245, 246, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 0, 0, 0, 276, 277, 278, 279, 0, 0,
	270, 271, 272, 273, 0, 0, 0, 455, 456, 457,
	479, 0, 441, 503, 622, 0, 0, 0, 0, 0,
	0, 0, 553, 565, 599, 0, 609, 610, 612, 614,
	613, 616, 418, 0, 617, 0, 628, 494, 495, 629,
	605, 385, 0, 509, 542, 531, 615, 497, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 325, 0,
	0, 355, 546, 528, 538, 529, 514, 515, 516, 523,
	335, 517, 518, 519, 489, 520, 490, 521, 522, 0,
	545, 496, 414, 369, 563, 562, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 217, 0, 0, 3079, 3081, 0,
	0, 298, 218, 491, 611, 493, 492, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 301, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 288, 420,
	437, 299, 410, 450, 304, 417, 294, 384, 407, 0,
	0, 290, 435, 416, 366, 345, 346, 289, 0, 402,
	323, 337, 320, 382, 0, 434, 462, 319, 453, 0,
	445, 292, 0, 444, 381, 431, 436, 367, 361, 0,
	291, 433, 365, 360, 349, 327, 478, 350, 351, 341,
	393, 359, 394, 342, 371, 370, 372, 0, 0, 0,
	0, 0, 473, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 604, 0, 0, 608,
	0, 447, 0, 0, 0, 0, 0, 0, 419, 0,
	0, 352, 0, 0, 0, 463, 0, 405, 387, 631,
	0, 0, 403, 357, 432, 395, 438, 421, 446, 399,
	396, 283, 422, 322, 368, 295, 297, 317, 324, 326,
	328, 329, 377, 378, 390, 409, 423, 424, 425, 321,
	305, 404, 306, 339, 307, 284, 313, 311, 314, 411,
	315, 286, 391, 429, 0, 334, 400, 364, 287, 363,
	392, 428, 427, 296, 454, 460, 461, 550, 0, 466,
	632, 633, 634, 475, 0, 0, 480, 481, 482, 484,
	485, 486, 487, 551, 568, 535, 505, 468, 559, 502,
	506, 507, 571, 0, 0, 0, 459, 353, 354, 0,
	332, 280, 281, 627, 318, 383, 573, 606, 607, 498,
	0, 560, 499, 508, 310, 532, 544, 543, 379, 458,
	0, 555, 558, 488, 626, 0, 552, 567, 630, 566,
	623, 389, 0, 408, 564, 511, 0, 556, 530, 0,
	557, 526, 561, 0, 500, 0, 415, 440, 452, 469,
	472, 501, 586, 587, 588, 285, 471, 590, 591, 592,
	593, 594, 595, 596, 589, 443, 533, 510, 536, 451,
	513, 512, 0, 0, 547, 467, 548, 549, 373, 374,
	375, 376, 336, 574, 303, 470, 398, 0, 534, 0,
	0, 0, 0, 0, 0, 0, 0, 539, 540, 537,
	635, 0, 597, 598, 0, 0, 464, 465, 331, 338,
	483, 340, 302, 388, 333, 449, 347, 0, 476, 541,
	477, 600, 603, 601, 602, 380, 343, 344, 412, 348,
	358, 401, 448, 386, 406, 300, 439, 413, 362, 527,
	554, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 269, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 582, 581, 580,
	579, 578, 577, 576, 575, 0, 0, 524, 426, 312,
	274, 308, 309, 316, 624, 621, 430, 625, 0, 282,
	504, 356, 0, 397, 330, 569, 570, 0, 0, 230,
	231, 232, 233, 234, 235, 236, 237, 275, 238, 239,
	240, 241, 242, 243, 244, 247, 248, 249, 250, 251,
	252, 253, 254, 572, 245, 246, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	0, 0, 0, 276, 277, 278, 279, 0, 0, 270,
	271, 272, 273, 0, 0, 0, 455, 456, 457, 479,
	0, 441, 503, 622, 0, 0, 0, 0, 0, 0,
	0, 553, 565, 599, 0, 609, 610, 612, 614, 613,
	616, 418, 0, 617, 0, 628, 494, 495, 629, 605,
	385, 0, 509, 542, 531, 615, 497, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 325, 2460, 0,
	355, 546, 528, 538, 529, 514, 515, 516, 523, 335,
	517, 518, 519, 489, 520, 490, 521, 522, 0, 545,
	496, 414, 369, 563, 562, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 217, 0, 0, 1492, 0, 0, 0,
	298, 218, 491, 611, 493, 492, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 288, 420, 437,
	299, 410, 450, 304, 417, 294, 384, 407, 0, 0,
	290, 435, 416, 366, 345, 346, 289, 0, 402, 323,
	337, 320, 382, 0, 434, 462, 319, 453, 0, 445,
	292, 0, 444, 381, 431, 436, 367, 361, 0, 291,
	433, 365, 360, 349, 327, 478, 350, 351, 341, 393,
	359, 394, 342, 371, 370, 372, 0, 0, 0, 0,
	0, 473, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 604, 0, 0, 608, 0,
	447, 0, 0, 0, 0, 0, 0, 419, 0, 0,
	352, 0, 0, 0, 463, 0, 405, 387, 631, 0,
	0, 403, 357, 432, 395, 438, 421, 446, 399, 396,
	283, 422, 322, 368, 295, 297, 317, 324, 326, 328,
	329, 377, 378, 390, 409, 423, 424, 425, 321, 305,
	404, 306, 339, 307, 284, 313, 311, 314, 411, 315,
	286, 391, 429, 0, 334, 400, 364, 287, 363, 392,
	428, 427, 296, 454, 460, 461, 550, 0, 466, 632,
	633, 634, 475, 0, 0, 480, 481, 482, 484, 485,
	486, 487, 551, 568, 535, 505, 468, 559, 502, 506,
	507, 571, 0, 0, 0, 459, 353, 354, 0, 332,
	280, 281, 627, 318, 383, 573, 606, 607, 498, 0,
	560, 499, 508, 310, 532, 544, 543, 379, 458, 0,
	555, 558, 488, 626, 0, 552, 567, 630, 566, 623,
	389, 0, 408, 564, 511, 0, 556, 530, 0, 557,
	526, 561, 0, 500, 0, 415, 440, 452, 469, 472,
	501, 586, 587, 588, 285, 471, 590, 591, 592, 593,
	594, 595, 596, 589, 443, 533, 510, 536, 451, 513,
	512, 0, 0, 547, 467, 548, 549, 373, 374, 375,
	376, 336, 574, 303, 470, 398, 0, 534, 0, 0,
	0, 0, 0, 0, 0, 0, 539, 540, 537, 635,
	0, 597, 598, 0, 0, 464, 465, 331, 338, 483,
	340, 302, 388, 333, 449, 347, 0, 476, 541, 477,
	600, 603, 601, 602, 380, 343, 344, 412, 348, 358,
	401, 448, 386, 406, 300, 439, 413, 362, 527, 554,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 269, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 582, 581, 580, 579,
	578, 577, 576, 575, 0, 0, 524, 426, 312, 274,
	308, 309, 316, 624, 621, 430, 625, 0, 282, 504,
	356, 0, 397, 330, 569, 570, 0, 0, 230, 231,
	232, 233, 234, 235, 236, 237, 275, 238, 239, 240,
	241, 242, 243, 244, 247, 248, 249, 250, 251, 252,
	253, 254, 572, 245, 246, 255, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 0,
	0, 0, 276, 277, 278, 279, 0, 0, 270, 271,
	272, 273, 0, 0, 0, 455, 456, 457, 479, 0,
	441, 503, 622, 0, 0, 0, 0, 0, 0, 0,
	553, 565, 599, 0, 609, 610, 612, 614, 613, 616,
	418, 0, 617, 0, 628, 494, 495, 629, 605, 385,
	0, 509, 542, 531, 615, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 642, 325, 0, 0, 355,
	546, 528, 538, 529, 514, 515, 516, 523, 335, 517,
	518, 519, 489, 520, 490, 521, 522, 0, 545, 496,
	414, 369, 563, 562, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 217, 0, 0, 0, 0, 0, 0, 298,
	218, 491, 611, 493, 492, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 301, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 288, 420, 437, 299,
	410, 450, 304, 417, 294, 384, 407, 0, 0, 290,
	435, 416, 366, 345, 346, 289, 0, 402, 323, 337,
	320, 382, 0, 434, 462, 319, 453, 0, 445, 292,
	0, 444, 381, 431, 436, 367, 361, 0, 291, 433,
	365, 360, 349, 327, 478, 350, 351, 341, 393, 359,
	394, 342, 371, 370, 372, 0, 0, 0, 0, 0,
	473, 474, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 604, 0, 0, 608, 0, 447,
	0, 641, 0, 0, 0, 0, 419, 0, 0, 352,
	0, 0, 0, 463, 0, 405, 387, 631, 0, 0,
	403, 357, 432, 395, 438, 421, 446, 399, 396, 283,
	422, 322, 368, 295, 297, 317, 324, 326, 328, 329,
	377, 378, 390, 409, 423, 424, 425, 321, 305, 404,
	306, 339, 307, 284, 313, 311, 314, 411, 315, 286,
	391, 429, 0, 334, 400, 364, 287, 363, 392, 428,
	427, 296, 454, 460, 461, 550, 0, 466, 632, 633,
	634, 475, 0, 0, 480, 481, 482, 484, 485, 486,
	487, 551, 568, 535, 505, 468, 559, 502, 506, 507,
	571, 0, 0, 0, 459, 353, 354, 0, 332, 280,
	281, 627, 318, 383, 573, 606, 607, 498, 0, 560,
	499, 508, 310, 532, 544, 543, 379, 458, 0, 555,
	558, 488, 626, 0, 552, 567, 630, 566, 623, 389,
	0, 408, 564, 511, 0, 556, 530, 0, 557, 526,
	561, 0, 500, 0, 415, 440, 452, 469, 472, 501,
	586, 587, 588, 285, 471, 590, 591, 592, 593, 594,
	595, 596, 589, 443, 533, 510, 536, 451, 513, 512,
	0, 0, 547, 467, 548, 549, 373, 374, 375, 376,
	336, 574, 303, 470, 398, 0, 534, 0, 0, 0,
	0, 0, 0, 0, 0, 539, 540, 537, 635, 0,
	597, 598, 0, 0, 464, 465, 331, 338, 483, 340,
	302, 388, 333, 449, 347, 0, 476, 541, 477, 600,
	603, 601, 602, 380, 343, 344, 412, 348, 358, 401,
	448, 386, 406, 300, 439, 413, 362, 527, 554, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	269, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 582, 581, 580, 579, 578,
	577, 576, 575, 0, 0, 524, 426, 312, 274, 308,
	309, 316, 624, 621, 430, 625, 0, 282, 504, 356,
	0, 397, 330, 569, 570, 0, 0, 230, 231, 232,
	233, 234, 235, 236, 237, 275, 238, 239, 240, 241,
	242, 243, 244, 247, 248, 249, 250, 251, 252, 253,
	254, 572, 245, 246, 255, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 0, 0,
	0, 276, 277, 278, 279, 0, 0, 270, 271, 272,
	273, 0, 0, 0, 455, 456, 457, 479, 0, 441,
	503, 622, 0, 0, 0, 0, 0, 0, 0, 553,
	565, 599, 0, 609, 610, 612, 614, 613, 616, 418,
	0, 617, 0, 628, 494, 495, 629, 605, 385, 0,
	509, 542, 531, 615, 497, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 325, 0, 0, 355, 546,
	528, 538, 529, 514, 515, 516, 523, 335, 517, 518,
	519, 489, 520, 490, 521, 522, 0, 545, 496, 414,
	369, 563, 562, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 217, 822, 0, 0, 0, 0, 0, 298, 218,
	491, 611, 493, 492, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 301, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 288, 420, 437, 299, 410,
	450, 304, 417, 294, 384, 407, 0, 0, 290, 435,
	416, 366, 345, 346, 289, 0, 402, 323, 337, 320,
	382, 0, 434, 462, 319, 453, 0, 445, 292, 0,
	444, 381, 431, 436, 367, 361, 0, 291, 433, 365,
	360, 349, 327, 478, 350, 351, 341, 393, 359, 394,
	342, 371, 370, 372, 0, 0, 0, 0, 0, 473,
	474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 604, 0, 0, 608, 0, 447, 0,
	0, 0, 0, 0, 0, 419, 0, 0, 352, 0,
	0, 0, 463, 0, 405, 387, 631, 0, 0, 403,
	357, 432, 395, 438, 421, 446, 399, 396, 283, 422,
	322, 368, 295, 297, 317, 324, 326, 328, 329, 377,
	378, 390, 409, 423, 424, 425, 321, 305, 404, 306,
	339, 307, 284, 313, 311, 314, 411, 315, 286, 391,
	429, 0, 334, 400, 364, 287, 363, 392, 428, 427,
	296, 454, 460, 461, 550, 0, 466, 632, 633, 634,
	475, 0, 0, 480, 481, 482, 484, 485, 486, 487,
	551, 568, 535, 505, 468, 559, 502, 506, 507, 571,
	0, 0, 0, 459, 353, 354, 0, 332, 280, 281,
	627, 318, 383, 573, 606, 607, 498, 0, 560, 499,
	508, 310, 532, 544, 543, 379, 458, 0, 555, 558,
	488, 626, 0, 552, 567, 630, 566, 623, 389, 0,
	408, 564, 511, 0, 556, 530, 0, 557, 526, 561,
	0, 500, 0, 415, 440, 452, 469, 472, 501, 586,
	587, 588, 285, 471, 590, 591, 592, 593, 594, 595,
	596, 589, 443, 533, 510, 536, 451, 513, 512, 0,
	0, 547, 467, 548, 549, 373, 374, 375, 376, 336,
	574, 303, 470, 398, 0, 534, 0, 0, 0, 0,
	0, 0, 0, 0, 539, 540, 537, 635, 0, 597,
	598, 0, 0, 464, 465, 331, 338, 483, 340, 302,
	388, 333, 449, 347, 0, 476, 541, 477, 600, 603,
	601, 602, 380, 343, 344, 412, 348, 358, 401, 448,
	386, 406, 300, 439, 413, 362, 527, 554, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 582, 581, 580, 579, 578, 577,
	576, 575, 0, 0, 524, 426, 312, 274, 308, 309,
	316, 624, 621, 430, 625, 0, 282, 504, 356, 0,
	397, 330, 569, 570, 0, 0, 230, 231, 232, 233,
	234, 235, 236, 237, 275, 238, 239, 240, 241, 242,
	243, 244, 247, 248, 249, 250, 251, 252, 253, 254,
	572, 245, 246, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 0, 0, 0,
	276, 277, 278, 279, 0, 0, 270, 271, 272, 273,
	0, 0, 0, 455, 456, 457, 479, 0, 441, 503,
	622, 0, 0, 0, 0, 0, 0, 0, 553, 565,
	599, 0, 609, 610, 612, 614, 613, 616, 418, 0,
	617, 0, 628, 494, 495, 629, 605, 385, 0, 509,
	542, 531, 615, 497, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 325, 0, 0, 355, 546, 528,
	538, 529, 514, 515, 516, 523, 335, 517, 518, 519,
	489, 520, 490, 521, 522, 0, 545, 496, 414, 369,
	563, 562, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3892, 0, 0,
	217, 0, 0, 0, 0, 0, 0, 298, 218, 491,
	611, 493, 492, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 288, 420, 437, 299, 410, 450,
	304, 417, 294, 384, 407, 0, 0, 290, 435, 416,
	366, 345, 346, 289, 0, 402, 323, 337, 320, 382,
	0, 434, 462, 319, 453, 0, 445, 292, 0, 444,
	381, 431, 436, 367, 361, 0, 291, 433, 365, 360,
	349, 327, 478, 350, 351, 341, 393, 359, 394, 342,
	371, 370, 372, 0, 0, 0, 0, 0, 473, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 604, 0, 0, 608, 0, 447, 0, 0,
	0, 0, 0, 0, 419, 0, 0, 352, 0, 0,
	0, 463, 0, 405, 387, 631, 0, 0, 403, 357,
	432, 395, 438, 421, 446, 399, 396, 283, 422, 322,
	368, 295, 297, 317, 324, 326, 328, 329, 377, 378,
	390, 409, 423, 424, 425, 321, 305, 404, 306, 339,
	307, 284, 313, 311, 314, 411, 315, 286, 391, 429,
	0, 334, 400, 364, 287, 363, 392, 428, 427, 296,
	454, 460, 461, 550, 0, 466, 632, 633, 634, 475,
	0, 0, 480, 481, 482, 484, 485, 486, 487, 551,
	568, 535, 505, 468, 559, 502, 506, 507, 571, 0,
	0, 0, 459, 353, 354, 0, 332, 280, 281, 627,
	318, 383, 573, 606, 607, 498, 0, 560, 499, 508,
	310, 532, 544, 543, 379, 458, 0, 555, 558, 488,
	626, 0, 552, 567, 630, 566, 623, 389, 0, 408,
	564, 511, 0, 556, 530, 0, 557, 526, 561, 0,
	500, 0, 415, 440, 452, 469, 472, 501, 586, 587,
	588, 285, 471, 590, 591, 592, 593, 594, 595, 596,
	589, 443, 533, 510, 536, 451, 513, 512, 0, 0,
	547, 467, 548, 549, 373, 374, 375, 376, 336, 574,
	303, 470, 398, 0, 534, 0, 0, 0, 0, 0,
	0, 0, 0, 539, 540, 537, 635, 0, 597, 598,
	0, 0, 464, 465, 331, 338, 483, 340, 302, 388,
	333, 449, 347, 0, 476, 541, 477, 600, 603, 601,
	602, 380, 343, 344, 412, 348, 358, 401, 448, 386,
	406, 300, 439, 413, 362, 527, 554, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 269, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 582, 581, 580, 579, 578, 577, 576,
	575, 0, 0, 524, 426, 312, 274, 308, 309, 316,
	624, 621, 430, 625, 0, 282, 504, 356, 0, 397,
	330, 569, 570, 0, 0, 230, 231, 232, 233, 234,
	235, 236, 237, 275, 238, 239, 240, 241, 242, 243,
	244, 247, 248, 249, 250, 251, 252, 253, 254, 572,
	245, 246, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 0, 0, 0, 276,
	277, 278, 279, 0, 0, 270, 271, 272, 273, 0,
	0, 0, 455, 456, 457, 479, 0, 441, 503, 622,
	0, 0, 0, 0, 0, 0, 0, 553, 565, 599,
	0, 609, 610, 612, 614, 613, 616, 418, 0, 617,
	0, 628, 494, 495, 629, 605, 385, 0, 509, 542,
	531, 615, 497, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 325, 0, 0, 355, 546, 528, 538,
	529, 514, 515, 516, 523, 335, 517, 518, 519, 489,
	520, 490, 521, 522, 0, 545, 496, 414, 369, 563,
	562, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 217,
	0, 0, 3667, 0, 0, 0, 298, 218, 491, 611,
	493, 492, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 301, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 288, 420, 437, 299, 410, 450, 304,
	417, 294, 384, 407, 0, 0, 290, 435, 416, 366,
	345, 346, 289, 0, 402, 323, 337, 320, 382, 0,
	434, 462, 319, 453, 0, 445, 292, 0, 444, 381,
	431, 436, 367, 361, 0, 291, 433, 365, 360, 349,
	327, 478, 350, 351, 341, 393, 359, 394, 342, 371,
	370, 372, 0, 0, 0, 0, 0, 473, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 604, 0, 0, 608, 0, 447, 0, 0, 0,
	0, 0, 0, 419, 0, 0, 352, 0, 0, 0,
	463, 0, 405, 387, 631, 0, 0, 403, 357, 432,
	395, 438, 421, 446, 399, 396, 283, 422, 322, 368,
	295, 297, 317, 324, 326, 328, 329, 377, 378, 390,
	409, 423, 424, 425, 321, 305, 404, 306, 339, 307,
	284, 313, 311, 314, 411, 315, 286, 391, 429, 0,
	334, 400, 364, 287, 363, 392, 428, 427, 296, 454,
	460, 461, 550, 0, 466, 632, 633, 634, 475, 0,
	0, 480, 481, 482, 484, 485, 486, 487, 551, 568,
	535, 505, 468, 559, 502, 506, 507, 571, 0, 0,
	0, 459, 353, 354, 0, 332, 280, 281, 627, 318,
	383, 573, 606, 607, 498, 0, 560, 499, 508, 310,
	532, 544, 543, 379, 458, 0, 555, 558, 488, 626,
	0, 552, 567, 630, 566, 623, 389, 0, 408, 564,
	511, 0, 556, 530, 0, 557, 526, 561, 0, 500,
	0, 415, 440, 452, 469, 472, 501, 586, 587, 588,
	285, 471, 590, 591, 592, 593, 594, 595, 596, 589,
	443, 533, 510, 536, 451, 513, 512, 0, 0, 547,
	467, 548, 549, 373, 374, 375, 376, 336, 574, 303,
	470, 398, 0, 534, 0, 0, 0, 0, 0, 0,
	0, 0, 539, 540, 537, 635, 0, 597, 598, 0,
	0, 464, 465, 331, 338, 483, 340, 302, 388, 333,
	449, 347, 0, 476, 541, 477, 600, 603, 601, 602,
	380, 343, 344, 412, 348, 358, 401, 448, 386, 406,
	300, 439, 413, 362, 527, 554, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 269, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 582, 581, 580, 579, 578, 577, 576, 575,
	0, 0, 524, 426, 312, 274, 308, 309, 316, 624,
	621, 430, 625, 0, 282, 504, 356, 0, 397, 330,
	569, 570, 0, 0, 230, 231, 232, 233, 234, 235,
	236, 237, 275, 238, 239, 240, 241, 242, 243, 244,
	247, 248, 249, 250, 251, 252, 253, 254, 572, 245,
	246, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 0, 0, 0, 276, 277,
	278, 279, 0, 0, 270, 271, 272, 273, 0, 0,
	0, 455, 456, 457, 479, 0, 441, 503, 622, 0,
	0, 0, 0, 0, 0, 0, 553, 565, 599, 0,
	609, 610, 612, 614, 613, 616, 418, 0, 617, 0,
	628, 494, 495, 629, 605, 385, 0, 509, 542, 531,
	615, 497, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 325, 0, 0, 355, 546, 528, 538, 529,
	514, 515, 516, 523, 335, 517, 518, 519, 489, 520,
	490, 521, 522, 0, 545, 496, 414, 369, 563, 562,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 217, 0,
	0, 0, 0, 0, 0, 298, 218, 491, 611, 493,
	492, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 288, 420, 437, 299, 410, 450, 304, 417,
	294, 384, 407, 0, 0, 290, 435, 416, 366, 345,
	346, 289, 0, 402, 323, 337, 320, 382, 0, 434,
	462, 319, 453, 0, 445, 292, 0, 444, 381, 431,
	436, 367, 361, 0, 291, 433, 365, 360, 349, 327,
	478, 350, 351, 341, 393, 359, 394, 342, 371, 370,
	372, 0, 0, 0, 0, 0, 473, 474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	604, 0, 0, 608, 0, 447, 0, 0, 0, 3799,
	0, 0, 419, 0, 0, 352, 0, 0, 0, 463,
	0, 405, 387, 631, 0, 0, 403, 357, 432, 395,
	438, 421, 446, 399, 396, 283, 422, 322, 368, 295,
	297, 317, 324, 326, 328, 329, 377, 378, 390, 409,
	423, 424, 425, 321, 305, 404, 306, 339, 307, 284,
	313, 311, 314, 411, 315, 286, 391, 429, 0, 334,
	400, 364, 287, 363, 392, 428, 427, 296, 454, 460,
	461, 550, 0, 466, 632, 633, 634, 475, 0, 0,
	480, 481, 482, 484, 485, 486, 487, 551, 568, 535,
	505, 468, 559, 502, 506, 507, 571, 0, 0, 0,
	459, 353, 354, 0, 332, 280, 281, 627, 318, 383,
	573, 606, 607, 498, 0, 560, 499, 508, 310, 532,
	544, 543, 379, 458, 0, 555, 558, 488, 626, 0,
	552, 567, 630, 566, 623, 389, 0, 408, 564, 511,
	0, 556, 530, 0, 557, 526, 561, 0, 500, 0,
	415, 440, 452, 469, 472, 501, 586, 587, 588, 285,
	471, 590, 591, 592, 593, 594, 595, 596, 589, 443,
	533, 510, 536, 451, 513, 512, 0, 0, 547, 467,
	548, 549, 373, 374, 375, 376, 336, 574, 303, 470,
	398, 0, 534, 0, 0, 0, 0, 0, 0, 0,
	0, 539, 540, 537, 635, 0, 597, 598, 0, 0,
	464, 465, 331, 338, 483, 340, 302, 388, 333, 449,
	347, 0, 476, 541, 477, 600, 603, 601, 602, 380,
	343, 344, 412, 348, 358, 401, 448, 386, 406, 300,
	439, 413, 362, 527, 554, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 269, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 582, 581, 580, 579, 578, 577, 576, 575, 0,
	0, 524, 426, 312, 274, 308, 309, 316, 624, 621,
	430, 625, 0, 282, 504, 356, 0, 397, 330, 569,
	570, 0, 0, 230, 231, 232, 233, 234, 235, 236,
	237, 275, 238, 239, 240, 241, 242, 243, 244, 247,
	248, 249, 250, 251, 252, 253, 254, 572, 245, 246,
	255, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 0, 0, 0, 276, 277, 278,
	279, 0, 0, 270, 271, 272, 273, 0, 0, 0,
	455, 456, 457, 479, 0, 441, 503, 622, 0, 0,
	0, 0, 0, 0, 0, 553, 565, 599, 0, 609,
	610, 612, 614, 613, 616, 418, 0, 617, 0, 628,
	494, 495, 629, 605, 385, 0, 509, 542, 531, 615,
	497, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 325, 0, 0, 355, 546, 528, 538, 529, 514,
	515, 516, 523, 335, 517, 518, 519, 489, 520, 490,
	521, 522, 0, 545, 496, 414, 369, 563, 562, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3508, 0, 0, 217, 0, 0,
	0, 0, 0, 0, 298, 218, 491, 611, 493, 492,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 301,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 288, 420, 437, 299, 410, 450, 304, 417, 294,
	384, 407, 0, 0, 290, 435, 416, 366, 345, 346,
	289, 0, 402, 323, 337, 320, 382, 0, 434, 462,
	319, 453, 0, 445, 292, 0, 444, 381, 431, 436,
	367, 361, 0, 291, 433, 365, 360, 349, 327, 478,
	350, 351, 341, 393, 359, 394, 342, 371, 370, 372,
	0, 0, 0, 0, 0, 473, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 604,
	0, 0, 608, 0, 447, 0, 0, 0, 0, 0,
	0, 419, 0, 0, 352, 0, 0, 0, 463, 0,
	405, 387, 631, 0, 0, 403, 357, 432, 395, 438,
	421, 446, 399, 396, 283, 422, 322, 368, 295, 297,
	317, 324, 326, 328, 329, 377, 378, 390, 409, 423,
	424, 425, 321, 305, 404, 306, 339, 307, 284, 313,
	311, 314, 411, 315, 286, 391, 429, 0, 334, 400,
	364, 287, 363, 392, 428, 427, 296, 454, 460, 461,
	550, 0, 466, 632, 633, 634, 475, 0, 0, 480,
	481, 482, 484, 485, 486, 487, 551, 568, 535, 505,
	468, 559, 502, 506, 507, 571, 0, 0, 0, 459,
	353, 354, 0, 332, 280, 281, 627, 318, 383, 573,
	606, 607, 498, 0, 560, 499, 508, 310, 532, 544,
	543, 379, 458, 0, 555, 558, 488, 626, 0, 552,
	567, 630, 566, 623, 389, 0, 408, 564, 511, 0,
	556, 530, 0, 557, 526, 561, 0, 500, 0, 415,
	440, 452, 469, 472, 501, 586, 587, 588, 285, 471,
	590, 591, 592, 593, 594, 595, 596, 589, 443, 533,
	510, 536, 451, 513, 512, 0, 0, 547, 467, 548,
	549, 373, 374, 375, 376, 336, 574, 303, 470, 398,
	0, 534, 0, 0, 0, 0, 0, 0, 0, 0,
	539, 540, 537, 635, 0, 597, 598, 0, 0, 464,
	465, 331, 338, 483, 340, 302, 388, 333, 449, 347,
	0, 476, 541, 477, 600, 603, 601, 602, 380, 343,
	344, 412, 348, 358, 401, 448, 386, 406, 300, 439,
	413, 362, 527, 554, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 269, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	582, 581, 580, 579, 578, 577, 576, 575, 0, 0,
	524, 426, 312, 274, 308, 309, 316, 624, 621, 430,
	625, 0, 282, 504, 356, 0, 397, 330, 569, 570,
	0, 0, 230, 231, 232, 233, 234, 235, 236, 237,
	275, 238, 239, 240, 241, 242, 243, 244, 247, 248,
	249, 250, 251, 252, 253, 254, 572, 245, 246, 255,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 0, 0, 0, 276, 277, 278, 279,
	0, 0, 270, 271, 272, 273, 0, 0, 0, 455,
	456, 457, 479, 0, 441, 503, 622, 0, 0, 0,
	0, 0, 0, 0, 553, 565, 599, 0, 609, 610,
	612, 614, 613, 616, 418, 0, 617, 0, 628, 494,
	495, 629, 605, 385, 0, 509, 542, 531, 615, 497,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	325, 0, 0, 355, 546, 528, 538, 529, 514, 515,
	516, 523, 335, 517, 518, 519, 489, 520, 490, 521,
	522, 0, 545, 496, 414, 369, 563, 562, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3682, 0, 217, 0, 0, 0,
	0, 0, 0, 298, 218, 491, 611, 493, 492, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 301, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	288, 420, 437, 299, 410, 450, 304, 417, 294, 384,
	407, 0, 0, 290, 435, 416, 366, 345, 346, 289,
	0, 402, 323, 337, 320, 382, 0, 434, 462, 319,
	453, 0, 445, 292, 0, 444, 381, 431, 436, 367,
	361, 0, 291, 433, 365, 360, 349, 327, 478, 350,
	351, 341, 393, 359, 394, 342, 371, 370, 372, 0,
	0, 0, 0, 0, 473, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 604, 0,
	0, 608, 0, 447, 0, 0, 0, 0, 0, 0,
	419, 0, 0, 352, 0, 0, 0, 463, 0, 405,
	387, 631, 0, 0, 403, 357, 432, 395, 438, 421,
	446, 399, 396, 283, 422, 322, 368, 295, 297, 317,
	324, 326, 328, 329, 377, 378, 390, 409, 423, 424,
	425, 321, 305, 404, 306, 339, 307, 284, 313, 311,
	314, 411, 315, 286, 391, 429, 0, 334, 400, 364,
	287, 363, 392, 428, 427, 296, 454, 460, 461, 550,
	0, 466, 632, 633, 634, 475, 0, 0, 480, 481,
	482, 484, 485, 486, 487, 551, 568, 535, 505, 468,
	559, 502, 506, 507, 571, 0, 0, 0, 459, 353,
	354, 0, 332, 280, 281, 627, 318, 383, 573, 606,
	607, 498, 0, 560, 499, 508, 310, 532, 544, 543,
	379, 458, 0, 555, 558, 488, 626, 0, 552, 567,
	630, 566, 623, 389, 0, 408, 564, 511, 0, 556,
	530, 0, 557, 526, 561, 0, 500, 0, 415, 440,
	452, 469, 472, 501, 586, 587, 588, 285, 471, 590,
	591, 592, 593, 594, 595, 596, 589, 443, 533, 510,
	536, 451, 513, 512, 0, 0, 547, 467, 548, 549,
	373, 374, 375, 376, 336, 574, 303, 470, 398, 0,
	534, 0, 0, 0, 0, 0, 0, 0, 0, 539,
	540, 537, 635, 0, 597, 598, 0, 0, 464, 465,
	331, 338, 483, 340, 302, 388, 333, 449, 347, 0,
	476, 541, 477, 600, 603, 601, 602, 380, 343, 344,
	412, 348, 358, 401, 448, 386, 406, 300, 439, 413,
	362, 527, 554, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 582,
	581, 580, 579, 578, 577, 576, 575, 0, 0, 524,
	426, 312, 274, 308, 309, 316, 624, 621, 430, 625,
	0, 282, 504, 356, 0, 397, 330, 569, 570, 0,
	0, 230, 231, 232, 233, 234, 235, 236, 237, 275,
	238, 239, 240, 241, 242, 243, 244, 247, 248, 249,
	250, 251, 252, 253, 254, 572, 245, 246, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 0, 0, 0, 276, 277, 278, 279, 0,
	0, 270, 271, 272, 273, 0, 0, 0, 455, 456,
	457, 479, 0, 441, 503, 622, 0, 0, 0, 0,
	0, 0, 0, 553, 565, 599, 0, 609, 610, 612,
	614, 613, 616, 418, 0, 617, 0, 628, 494, 495,
	629, 605, 385, 0, 509, 542, 531, 615, 497, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 325,
	0, 0, 355, 546, 528, 538, 529, 514, 515, 516,
	523, 335, 517, 518, 519, 489, 520, 490, 521, 522,
	0, 545, 496, 414, 369, 563, 562, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 217, 0, 0, 0, 0,
	0, 0, 298, 218, 491, 611, 493, 492, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 301, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 288,
	420, 437, 299, 410, 450, 304, 417, 294, 384, 407,
	0, 0, 290, 435, 416, 366, 345, 346, 289, 0,
	402, 323, 337, 320, 382, 0, 434, 462, 319, 453,
	0, 445, 292, 0, 444, 381, 431, 436, 367, 361,
	0, 291, 433, 365, 360, 349, 327, 478, 350, 351,
	341, 393, 359, 394, 342, 371, 370, 372, 0, 0,
	0, 0, 0, 473, 474, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 604, 0, 0,
	608, 0, 447, 0, 0, 0, 3597, 0, 0, 419,
	0, 0, 352, 0, 0, 0, 463, 0, 405, 387,
	631, 0, 0, 403, 357, 432, 395, 438, 421, 446,
	399, 396, 283, 422, 322, 368, 295, 297, 317, 324,
	326, 328, 329, 377, 378, 390, 409, 423, 424, 425,
	321, 305, 404, 306, 339, 307, 284, 313, 311, 314,
	411, 315, 286, 391, 429, 0, 334, 400, 364, 287,
	363, 392, 428, 427, 296, 454, 460, 461, 550, 0,
	466, 632, 633, 634, 475, 0, 0, 480, 481, 482,
	484, 485, 486, 487, 551, 568, 535, 505, 468, 559,
	502, 506, 507, 571, 0, 0, 0, 459, 353, 354,
	0, 332, 280, 281, 627, 318, 383, 573, 606, 607,
	498, 0, 560, 499, 508, 310, 532, 544, 543, 379,
	458, 0, 555, 558, 488, 626, 0, 552, 567, 630,
	566, 623, 389, 0, 408, 564, 511, 0, 556, 530,
	0, 557, 526, 561, 0, 500, 0, 415, 440, 452,
	469, 472, 501, 586, 587, 588, 285, 471, 590, 591,
	592, 593, 594, 595, 596, 589, 443, 533, 510, 536,
	451, 513, 512, 0, 0, 547, 467, 548, 549, 373,
	374, 375, 376, 336, 574, 303, 470, 398, 0, 534,
	0, 0, 0, 0, 0, 0, 0, 0, 539, 540,
	537, 635, 0, 597, 598, 0, 0, 464, 465, 331,
	338, 483, 340, 302, 388, 333, 449, 347, 0, 476,
	541, 477, 600, 603, 601, 602, 380, 343, 344, 412,
	348, 358, 401, 448, 386, 406, 300, 439, 413, 362,
	527, 554, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 269, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 582, 581,
	580, 579, 578, 577, 576, 575, 0, 0, 524, 426,
	312, 274, 308, 309, 316, 624, 621, 430, 625, 0,
	282, 504, 356, 0, 397, 330, 569, 570, 0, 0,
	230, 231, 232, 233, 234, 235, 236, 237, 275, 238,
	239, 240, 241, 242, 243, 244, 247, 248, 249, 250,
	251, 252, 253, 254, 572, 245, 246, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 0, 0, 0, 276, 277, 278, 279, 0, 0,
	270, 271, 272, 273, 0, 0, 0, 455, 456, 457,
	479, 0, 441, 503, 622, 0, 0, 0, 0, 0,
	0, 0, 553, 565, 599, 0, 609, 610, 612, 614,
	613, 616, 418, 0, 617, 0, 628, 494, 495, 629,
	605, 385, 0, 509, 542, 531, 615, 497, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 325, 0,
	0, 355, 546, 528, 538, 529, 514, 515, 516, 523,
	335, 517, 518, 519, 489, 520, 490, 521, 522, 0,
	545, 496, 414, 369, 563, 562, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 217, 0, 0, 3113, 0, 0,
	0, 298, 218, 491, 611, 493, 492, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 301, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 288, 420,
	437, 299, 410, 450, 304, 417, 294, 384, 407, 0,
	0, 290, 435, 416, 366, 345, 346, 289, 0, 402,
	323, 337, 320, 382, 0, 434, 462, 319, 453, 0,
	445, 292, 0, 444, 381, 431, 436, 367, 361, 0,
	291, 433, 365, 360, 349, 327, 478, 350, 351, 341,
	393, 359, 394, 342, 371, 370, 372, 0, 0, 0,
	0, 0, 473, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 604, 0, 0, 608,
	0, 447, 0, 0, 0, 0, 0, 0, 419, 0,
	0, 352, 0, 0, 0, 463, 0, 405, 387, 631,
	0, 0, 403, 357, 432, 395, 438, 421, 446, 399,
	396, 283, 422, 322, 368, 295, 297, 317, 324, 326,
	328, 329, 377, 378, 390, 409, 423, 424, 425, 321,
	305, 404, 306, 339, 307, 284, 313, 311, 314, 411,
	315, 286, 391, 429, 0, 334, 400, 364, 287, 363,
	392, 428, 427, 296, 454, 460, 461, 550, 0, 466,
	632, 633, 634, 475, 0, 0, 480, 481, 482, 484,
	485, 486, 487, 551, 568, 535, 505, 468, 559, 502,
	506, 507, 571, 0, 0, 0, 459, 353, 354, 0,
	332, 280, 281, 627, 318, 383, 573, 606, 607, 498,
	0, 560, 499, 508, 310, 532, 544, 543, 379, 458,
	0, 555, 558, 488, 626, 0, 552, 567, 630, 566,
	623, 389, 0, 408, 564, 511, 0, 556, 530, 0,
	557, 526, 561, 0, 500, 0, 415, 440, 452, 469,
	472, 501, 586, 587, 588, 285, 471, 590, 591, 592,
	593, 594, 595, 596, 589, 443, 533, 510, 536, 451,
	513, 512, 0, 0, 547, 467, 548, 549, 373, 374,
	375, 376, 336, 574, 303, 470, 398, 0, 534, 0,
	0, 0, 0, 0, 0, 0, 0, 539, 540, 537,
	635, 0, 597, 598, 0, 0, 464, 465, 331, 338,
	483, 340, 302, 388, 333, 449, 347, 0, 476, 541,
	477, 600, 603, 601, 602, 380, 343, 344, 412, 348,
	358, 401, 448, 386, 406, 300, 439, 413, 362, 527,
	554, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 269, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 582, 581, 580,
	579, 578, 577, 576, 575, 0, 0, 524, 426, 312,
	274, 308, 309, 316, 624, 621, 430, 625, 0, 282,
	504, 356, 0, 397, 330, 569, 570, 0, 0, 230,
	231, 232, 233, 234, 235, 236, 237, 275, 238, 239,
	240, 241, 242, 243, 244, 247, 248, 249, 250, 251,
	252, 253, 254, 572, 245, 246, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	0, 0, 0, 276, 277, 278, 279, 0, 0, 270,
	271, 272, 273, 0, 0, 0, 455, 456, 457, 479,
	0, 441, 503, 622, 0, 0, 0, 0, 0, 0,
	0, 553, 565, 599, 0, 609, 610, 612, 614, 613,
	616, 418, 0, 617, 0, 628, 494, 495, 629, 605,
	385, 0, 509, 542, 531, 615, 497, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 325, 0, 0,
	355, 546, 528, 538, 529, 514, 515, 516, 523, 335,
	517, 518, 519, 489, 520, 490, 521, 522, 0, 545,
	496, 414, 369, 563, 562, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 217, 0, 0, 0, 0, 0, 0,
	298, 218, 491, 611, 493, 492, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3131, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 288, 420, 437,
	299, 410, 450, 304, 417, 294, 384, 407, 0, 0,
	290, 435, 416, 366, 345, 346, 289, 0, 402, 323,
	337, 320, 382, 0, 434, 462, 319, 453, 0, 445,
	292, 0, 444, 381, 431, 436, 367, 361, 0, 291,
	433, 365, 360, 349, 327, 478, 350, 351, 341, 393,
	359, 394, 342, 371, 370, 372, 0, 0, 0, 0,
	0, 473, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 604, 0, 0, 608, 0,
	447, 0, 0, 0, 0, 0, 0, 419, 0, 0,
	352, 0, 0, 0, 463, 0, 405, 387, 631, 0,
	0, 403, 357, 432, 395, 438, 421, 446, 399, 396,
	283, 422, 322, 368, 295, 297, 317, 324, 326, 328,
	329, 377, 378, 390, 409, 423, 424, 425, 321, 305,
	404, 306, 339, 307, 284, 313, 311, 314, 411, 315,
	286, 391, 429, 0, 334, 400, 364, 287, 363, 392,
	428, 427, 296, 454, 460, 461, 550, 0, 466, 632,
	633, 634, 475, 0, 0, 480, 481, 482, 484, 485,
	486, 487, 551, 568, 535, 505, 468, 559, 502, 506,
	507, 571, 0, 0, 0, 459, 353, 354, 0, 332,
	280, 281, 627, 318, 383, 573, 606, 607, 498, 0,
	560, 499, 508, 310, 532, 544, 543, 379, 458, 0,
	555, 558, 488, 626, 0, 552, 567, 630, 566, 623,
	389, 0, 408, 564, 511, 0, 556, 530, 0, 557,
	526, 561, 0, 500, 0, 415, 440, 452, 469, 472,
	501, 586, 587, 588, 285, 471, 590, 591, 592, 593,
	594, 595, 596, 589, 443, 533, 510, 536, 451, 513,
	512, 0, 0, 547, 467, 548, 549, 373, 374, 375,
	376, 336, 574, 303, 470, 398, 0, 534, 0, 0,
	0, 0, 0, 0, 0, 0, 539, 540, 537, 635,
	0, 597, 598, 0, 0, 464, 465, 331, 338, 483,
	340, 302, 388, 333, 449, 347, 0, 476, 541, 477,
	600, 603, 601, 602, 380, 343, 344, 412, 348, 358,
	401, 448, 386, 406, 300, 439, 413, 362, 527, 554,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 269, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 582, 581, 580, 579,
	578, 577, 576, 575, 0, 0, 524, 426, 312, 274,
	308, 309, 316, 624, 621, 430, 625, 0, 282, 504,
	356, 0, 397, 330, 569, 570, 0, 0, 230, 231,
	232, 233, 234, 235, 236, 237, 275, 238, 239, 240,
	241, 242, 243, 244, 247, 248, 249, 250, 251, 252,
	253, 254, 572, 245, 246, 255, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 0,
	0, 0, 276, 277, 278, 279, 0, 0, 270, 271,
	272, 273, 0, 0, 0, 455, 456, 457, 479, 0,
	441, 503, 622, 0, 0, 0, 0, 0, 0, 0,
	553, 565, 599, 0, 609, 610, 612, 614, 613, 616,
	418, 0, 617, 0, 628, 494, 495, 629, 605, 385,
	0, 509, 542, 531, 615, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 325, 0, 0, 355,
	546, 528, 538, 529, 514, 515, 516, 523, 335, 517,
	518, 519, 489, 520, 490, 521, 522, 0, 545, 496,
	414, 369, 563, 562, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1992,
	0, 0, 217, 0, 0, 0, 0, 0, 0, 298,
	218, 491, 611, 493, 492, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 301, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 288, 420, 437, 299,
	410, 450, 304, 417, 294, 384, 407, 0, 0, 290,
	435, 416, 366, 345, 346, 289, 0, 402, 323, 337,
	320, 382, 0, 434, 462, 319, 453, 0, 445, 292,
	0, 444, 381, 431, 436, 367, 361, 0, 291, 433,
	365, 360, 349, 327, 478, 350, 351, 341, 393, 359,
	394, 342, 371, 370, 372, 0, 0, 0, 0, 0,
	473, 474, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 604, 0, 0, 608, 0, 447,
	0, 0, 0, 0, 0, 0, 419, 0, 0, 352,
	0, 0, 0, 463, 0, 405, 387, 631, 0, 0,
	403, 357, 432, 395, 438, 421, 446, 399, 396, 283,
	422, 322, 368, 295, 297, 317, 324, 326, 328, 329,
	377, 378, 390, 409, 423, 424, 425, 321, 305, 404,
	306, 339, 307, 284, 313, 311, 314, 411, 315, 286,
	391, 429, 0, 334, 400, 364, 287, 363, 392, 428,
	427, 296, 454, 460, 461, 550, 0, 466, 632, 633,
	634, 475, 0, 0, 480, 481, 482, 484, 485, 486,
	487, 551, 568, 535, 505, 468, 559, 502, 506, 507,
	571, 0, 0, 0, 459, 353, 354, 0, 332, 280,
	281, 627, 318, 383, 573, 606, 607, 498, 0, 560,
	499, 508, 310, 532, 544, 543, 379, 458, 0, 555,
	558, 488, 626, 0, 552, 567, 630, 566, 623, 389,
	0, 408, 564, 511, 0, 556, 530, 0, 557, 526,
	561, 0, 500, 0, 415, 440, 452, 469, 472, 501,
	586, 587, 588, 285, 471, 590, 591, 592, 593, 594,
	595, 596, 589, 443, 533, 510, 536, 451, 513, 512,
	0, 0, 547, 467, 548, 549, 373, 374, 375, 376,
	336, 574, 303, 470, 398, 0, 534, 0, 0, 0,
	0, 0, 0, 0, 0, 539, 540, 537, 635, 0,
	597, 598, 0, 0, 464, 465, 331, 338, 483, 340,
	302, 388, 333, 449, 347, 0, 476, 541, 477, 600,
	603, 601, 602, 380, 343, 344, 412, 348, 358, 401,
	448, 386, 406, 300, 439, 413, 362, 527, 554, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	269, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 582, 581, 580, 579, 578,
	577, 576, 575, 0, 0, 524, 426, 312, 274, 308,
	309, 316, 624, 621, 430, 625, 0, 282, 504, 356,
	0, 397, 330, 569, 570, 0, 0, 230, 231, 232,
	233, 234, 235, 236, 237, 275, 238, 239, 240, 241,
	242, 243, 244, 247, 248, 249, 250, 251, 252, 253,
	254, 572, 245, 246, 255, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 0, 0,
	0, 276, 277, 278, 279, 0, 0, 270, 271, 272,
	273, 0, 0, 0, 455, 456, 457, 479, 0, 441,
	503, 622, 0, 0, 0, 0, 0, 0, 0, 553,
	565, 599, 0, 609, 610, 612, 614, 613, 616, 418,
	0, 617, 0, 628, 494, 495, 629, 605, 385, 0,
	509, 542, 531, 615, 497, 0, 0, 3318, 0, 0,
	0, 0, 0, 0, 0, 325, 0, 0, 355, 546,
	528, 538, 529, 514, 515, 516, 523, 335, 517, 518,
	519, 489, 520, 490, 521, 522, 0, 545, 496, 414,
	369, 563, 562, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 217, 0, 0, 0, 0, 0, 0, 298, 218,
	491, 611, 493, 492, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 301, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 288, 420, 437, 299, 410,
	450, 304, 417, 294, 384, 407, 0, 0, 290, 435,
	416, 366, 345, 346, 289, 0, 402, 323, 337, 320,
	382, 0, 434, 462, 319, 453, 0, 445, 292, 0,
	444, 381, 431, 436, 367, 361, 0, 291, 433, 365,
	360, 349, 327, 478, 350, 351, 341, 393, 359, 394,
	342, 371, 370, 372, 0, 0, 0, 0, 0, 473,
	474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 604, 0, 0, 608, 0, 447, 0,
	0, 0, 0, 0, 0, 419, 0, 0, 352, 0,
	0, 0, 463, 0, 405, 387, 631, 0, 0, 403,
	357, 432, 395, 438, 421, 446, 399, 396, 283, 422,
	322, 368, 295, 297, 317, 324, 326, 328, 329, 377,
	378, 390, 409, 423, 424, 425, 321, 305, 404, 306,
	339, 307, 284, 313, 311, 314, 411, 315, 286, 391,
	429, 0, 334, 400, 364, 287, 363, 392, 428, 427,
	296, 454, 460, 461, 550, 0, 466, 632, 633, 634,
	475, 0, 0, 480, 481, 482, 484, 485, 486, 487,
	551, 568, 535, 505, 468, 559, 502, 506, 507, 571,
	0, 0, 0, 459, 353, 354, 0, 332, 280, 281,
	627, 318, 383, 573, 606, 607, 498, 0, 560, 499,
	508, 310, 532, 544, 543, 379, 458, 0, 555, 558,
	488, 626, 0, 552, 567, 630, 566, 623, 389, 0,
	408, 564, 511, 0, 556, 530, 0, 557, 526, 561,
	0, 500, 0, 415, 440, 452, 469, 472, 501, 586,
	587, 588, 285, 471, 590, 591, 592, 593, 594, 595,
	596, 589, 443, 533, 510, 536, 451, 513, 512, 0,
	0, 547, 467, 548, 549, 373, 374, 375, 376, 336,
	574, 303, 470, 398, 0, 534, 0, 0, 0, 0,
	0, 0, 0, 0, 539, 540, 537, 635, 0, 597,
	598, 0, 0, 464, 465, 331, 338, 483, 340, 302,
	388, 333, 449, 347, 0, 476, 541, 477, 600, 603,
	601, 602, 380, 343, 344, 412, 348, 358, 401, 448,
	386, 406, 300, 439, 413, 362, 527, 554, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 582, 581, 580, 579, 578, 577,
	576, 575, 0, 0, 524, 426, 312, 274, 308, 309,
	316, 624, 621, 430, 625, 0, 282, 504, 356, 0,
	397, 330, 569, 570, 0, 0, 230, 231, 232, 233,
	234, 235, 236, 237, 275, 238, 239, 240, 241, 242,
	243, 244, 247, 248, 249, 250, 251, 252, 253, 254,
	572, 245, 246, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 0, 0, 0,
	276, 277, 278, 279, 0, 0, 270, 271, 272, 273,
	0, 0, 0, 455, 456, 457, 479, 0, 441, 503,
	622, 0, 0, 0, 0, 0, 0, 0, 553, 565,
	599, 0, 609, 610, 612, 614, 613, 616, 418, 0,
	617, 0, 628, 494, 495, 629, 605, 385, 0, 509,
	542, 531, 615, 497, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 325, 0, 0, 355, 546, 528,
	538, 529, 514, 515, 516, 523, 335, 517, 518, 519,
	489, 520, 490, 521, 522, 0, 545, 496, 414, 369,
	563, 562, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	217, 0, 0, 0, 0, 0, 0, 298, 218, 491,
	611, 493, 492, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3234, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 288, 420, 437, 299, 410, 450,
	304, 417, 294, 384, 407, 0, 0, 290, 435, 416,
	366, 345, 346, 289, 0, 402, 323, 337, 320, 382,
	0, 434, 462, 319, 453, 0, 445, 292, 0, 444,
	381, 431, 436, 367, 361, 0, 291, 433, 365, 360,
	349, 327, 478, 350, 351, 341, 393, 359, 394, 342,
	371, 370, 372, 0, 0, 0, 0, 0, 473, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 604, 0, 0, 608, 0, 447, 0, 0,
	0, 0, 0, 0, 419, 0, 0, 352, 0, 0,
	0, 463, 0, 405, 387, 631, 0, 0, 403, 357,
	432, 395, 438, 421, 446, 399, 396, 283, 422, 322,
	368, 295, 297, 317, 324, 326, 328, 329, 377, 378,
	390, 409, 423, 424, 425, 321, 305, 404, 306, 339,
	307, 284, 313, 311, 314, 411, 315, 286, 391, 429,
	0, 334, 400, 364, 287, 363, 392, 428, 427, 296,
	454, 460, 461, 550, 0, 466, 632, 633, 634, 475,
	0, 0, 480, 481, 482, 484, 485, 486, 487, 551,
	568, 535, 505, 468, 559, 502, 506, 507, 571, 0,
	0, 0, 459, 353, 354, 0, 332, 280, 281, 627,
	318, 383, 573, 606, 607, 498, 0, 560, 499, 508,
	310, 532, 544, 543, 379, 458, 0, 555, 558, 488,
	626, 0, 552, 567, 630, 566, 623, 389, 0, 408,
	564, 511, 0, 556, 530, 0, 557, 526, 561, 0,
	500, 0, 415, 440, 452, 469, 472, 501, 586, 587,
	588, 285, 471, 590, 591, 592, 593, 594, 595, 596,
	589, 443, 533, 510, 536, 451, 513, 512, 0, 0,
	547, 467, 548, 549, 373, 374, 375, 376, 336, 574,
	303, 470, 398, 0, 534, 0, 0, 0, 0, 0,
	0, 0, 0, 539, 540, 537, 635, 0, 597, 598,
	0, 0, 464, 465, 331, 338, 483, 340, 302, 388,
	333, 449, 347, 0, 476, 541, 477, 600, 603, 601,
	602, 380, 343, 344, 412, 348, 358, 401, 448, 386,
	406, 300, 439, 413, 362, 527, 554, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 269, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 582, 581, 580, 579, 578, 577, 576,
	575, 0, 0, 524, 426, 312, 274, 308, 309, 316,
	624, 621, 430, 625, 0, 282, 504, 356, 0, 397,
	330, 569, 570, 0, 0, 230, 231, 232, 233, 234,
	235, 236, 237, 275, 238, 239, 240, 241, 242, 243,
	244, 247, 248, 249, 250, 251, 252, 253, 254, 572,
	245, 246, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 0, 0, 0, 276,
	277, 278, 279, 0, 0, 270, 271, 272, 273, 0,
	0, 0, 455, 456, 457, 479, 0, 441, 503, 622,
	0, 0, 0, 0, 0, 0, 0, 553, 565, 599,
	0, 609, 610, 612, 614, 613, 616, 418, 0, 617,
	0, 628, 494, 495, 629, 605, 385, 0, 509, 542,
	531, 615, 497, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 325, 0, 0, 355, 546, 528, 538,
	529, 514, 515, 516, 523, 335, 517, 518, 519, 489,
	520, 490, 521, 522, 0, 545, 496, 414, 369, 563,
	562, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 217,
	0, 0, 0, 0, 0, 0, 298, 218, 491, 611,
	493, 492, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 301, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2975, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 288, 420, 437, 299, 410, 450, 304,
	417, 294, 384, 407, 0, 0, 290, 435, 416, 366,
	345, 346, 289, 0, 402, 323, 337, 320, 382, 0,
	434, 462, 319, 453, 0, 445, 292, 0, 444, 381,
	431, 436, 367, 361, 0, 291, 433, 365, 360, 349,
	327, 478, 350, 351, 341, 393, 359, 394, 342, 371,
	370, 372, 0, 0, 0, 0, 0, 473, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 604, 0, 0, 608, 0, 447, 0, 0, 0,
	0, 0, 0, 419, 0, 0, 352, 0, 0, 0,
	463, 0, 405, 387, 631, 0, 0, 403, 357, 432,
	395, 438, 421, 446, 399, 396, 283, 422, 322, 368,
	295, 297, 317, 324, 326, 328, 329, 377, 378, 390,
	409, 423, 424, 425, 321, 305, 404, 306, 339, 307,
	284, 313, 311, 314, 411, 315, 286, 391, 429, 0,
	334, 400, 364, 287, 363, 392, 428, 427, 296, 454,
	460, 461, 550, 0, 466, 632, 633, 634, 475, 0,
	0, 480, 481, 482, 484, 485, 486, 487, 551, 568,
	535, 505, 468, 559, 502, 506, 507, 571, 0, 0,
	0, 459, 353, 354, 0, 332, 280, 281, 627, 318,
	383, 573, 606, 607, 498, 0, 560, 499, 508, 310,
	532, 544, 543, 379, 458, 0, 555, 558, 488, 626,
	0, 552, 567, 630, 566, 623, 389, 0, 408, 564,
	511, 0, 556, 530, 0, 557, 526, 561, 0, 500,
	0, 415, 440, 452, 469, 472, 501, 586, 587, 588,
	285, 471, 590, 591, 592, 593, 594, 595, 596, 589,
	443, 533, 510, 536, 451, 513, 512, 0, 0, 547,
	467, 548, 549, 373, 374, 375, 376, 336, 574, 303,
	470, 398, 0, 534, 0, 0, 0, 0, 0, 0,
	0, 0, 539, 540, 537, 635, 0, 597, 598, 0,
	0, 464, 465, 331, 338, 483, 340, 302, 388, 333,
	449, 347, 0, 476, 541, 477, 600, 603, 601, 602,
	380, 343, 344, 412, 348, 358, 401, 448, 386, 406,
	300, 439, 413, 362, 527, 554, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 269, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 582, 581, 580, 579, 578, 577, 576, 575,
	0, 0, 524, 426, 312, 274, 308, 309, 316, 624,
	621, 430, 625, 0, 282, 504, 356, 0, 397, 330,
	569, 570, 0, 0, 230, 231, 232, 233, 234, 235,
	236, 237, 275, 238, 239, 240, 241, 242, 243, 244,
	247, 248, 249, 250, 251, 252, 253, 254, 572, 245,
	246, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 0, 0, 0, 276, 277,
	278, 279, 0, 0, 270, 271, 272, 273, 0, 0,
	0, 455, 456, 457, 479, 0, 441, 503, 622, 0,
	0, 0, 0, 0, 0, 0, 553, 565, 599, 0,
	609, 610, 612, 614, 613, 616, 418, 0, 617, 0,
	628, 494, 495, 629, 605, 385, 0, 509, 542, 531,
	615, 497, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 325, 0, 0, 355, 546, 528, 538, 529,
	514, 515, 516, 523, 335, 517, 518, 519, 489, 520,
	490, 521, 522, 0, 545, 496, 414, 369, 563, 562,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 217, 0,
	0, 1492, 0, 0, 0, 298, 218, 491, 611, 493,
	492, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 288, 420, 437, 299, 410, 450, 304, 417,
	294, 384, 407, 0, 0, 290, 435, 416, 366, 345,
	346, 289, 0, 402, 323, 337, 320, 382, 0, 434,
	462, 319, 453, 0, 445, 292, 0, 444, 381, 431,
	436, 367, 361, 0, 291, 433, 365, 360, 349, 327,
	478, 350, 351, 341, 393, 359, 394, 342, 371, 370,
	372, 0, 0, 0, 0, 0, 473, 474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	604, 0, 0, 608, 0, 447, 0, 0, 0, 0,
	0, 0, 419, 0, 0, 352, 0, 0, 0, 463,
	0, 405, 387, 631, 0, 0, 403, 357, 432, 395,
	438, 421, 446, 399, 396, 283, 422, 322, 368, 295,
	297, 317, 324, 326, 328, 329, 377, 378, 390, 409,
	423, 424, 425, 321, 305, 404, 306, 339, 307, 284,
	313, 311, 314, 411, 315, 286, 391, 429, 0, 334,
	400, 364, 287, 363, 392, 428, 427, 296, 454, 460,
	461, 550, 0, 466, 632, 633, 634, 475, 0, 0,
	480, 481, 482, 484, 485, 486, 487, 551, 568, 535,
	505, 468, 559, 502, 506, 507, 571, 0, 0, 0,
	459, 353, 354, 0, 332, 280, 281, 627, 318, 383,
	573, 606, 607, 498, 0, 560, 499, 508, 310, 532,
	544, 543, 379, 458, 0, 555, 558, 488, 626, 0,
	552, 567, 630, 566, 623, 389, 0, 408, 564, 511,
	0, 556, 530, 0, 557, 526, 561, 0, 500, 0,
	415, 440, 452, 469, 472, 501, 586, 587, 588, 285,
	471, 590, 591, 592, 593, 594, 595, 596, 589, 443,
	533, 510, 536, 451, 513, 512, 0, 0, 547, 467,
	548, 549, 373, 374, 375, 376, 336, 574, 303, 470,
	398, 0, 534, 0, 0, 0, 0, 0, 0, 0,
	0, 539, 540, 537, 635, 0, 597, 598, 0, 0,
	464, 465, 331, 338, 483, 340, 302, 388, 333, 449,
	347, 0, 476, 541, 477, 600, 603, 601, 602, 380,
	343, 344, 412, 348, 358, 401, 448, 386, 406, 300,
	439, 413, 362, 527, 554, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 269, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 582, 581, 580, 579, 578, 577, 576, 575, 0,
	0, 524, 426, 312, 274, 308, 309, 316, 624, 621,
	430, 625, 0, 282, 504, 356, 0, 397, 330, 569,
	570, 0, 0, 230, 231, 232, 233, 234, 235, 236,
	237, 275, 238, 239, 240, 241, 242, 243, 244, 247,
	248, 249, 250, 251, 252, 253, 254, 572, 245, 246,
	255, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 0, 0, 0, 276, 277, 278,
	279, 0, 0, 270, 271, 272, 273, 0, 0, 0,
	455, 456, 457, 479, 0, 441, 503, 622, 0, 0,
	0, 0, 0, 0, 0, 553, 565, 599, 0, 609,
	610, 612, 614, 613, 616, 418, 0, 617, 0, 628,
	494, 495, 629, 605, 385, 0, 509, 542, 531, 615,
	497, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 325, 0, 0, 355, 546, 528, 538, 529, 514,
	515, 516, 523, 335, 517, 518, 519, 489, 520, 490,
	521, 522, 0, 545, 496, 414, 369, 563, 562, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 217, 0, 0,
	2440, 0, 0, 0, 298, 218, 491, 611, 493, 492,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 301,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 288, 420, 437, 299, 410, 450, 304, 417, 294,
	384, 407, 0, 0, 290, 435, 416, 366, 345, 346,
	289, 0, 402, 323, 337, 320, 382, 0, 434, 462,
	319, 453, 0, 445, 292, 0, 444, 381, 431, 436,
	367, 361, 0, 291, 433, 365, 360, 349, 327, 478,
	350, 351, 341, 393, 359, 394, 342, 371, 370, 372,
	0, 0, 0, 0, 0, 473, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 604,
	0, 0, 608, 0, 447, 0, 0, 0, 0, 0,
	0, 419, 0, 0, 352, 0, 0, 0, 463, 0,
	405, 387, 631, 0, 0, 403, 357, 432, 395, 438,
	421, 446, 399, 396, 283, 422, 322, 368, 295, 297,
	317, 324, 326, 328, 329, 377, 378, 390, 409, 423,
	424, 425, 321, 305, 404, 306, 339, 307, 284, 313,
	311, 314, 411, 315, 286, 391, 429, 0, 334, 400,
	364, 287, 363, 392, 428, 427, 296, 454, 460, 461,
	550, 0, 466, 632, 633, 634, 475, 0, 0, 480,
	481, 482, 484, 485, 486, 487, 551, 568, 535, 505,
	468, 559, 502, 506, 507, 571, 0, 0, 0, 459,
	353, 354, 0, 332, 280, 281, 627, 318, 383, 573,
	606, 607, 498, 0, 560, 499, 508, 310, 532, 544,
	543, 379, 458, 0, 555, 558, 488, 626, 0, 552,
	567, 630, 566, 623, 389, 0, 408, 564, 511, 0,
	556, 530, 0, 557, 526, 561, 0, 500, 0, 415,
	440, 452, 469, 472, 501, 586, 587, 588, 285, 471,
	590, 591, 592, 593, 594, 595, 596, 589, 443, 533,
	510, 536, 451, 513, 512, 0, 0, 547, 467, 548,
	549, 373, 374, 375, 376, 336, 574, 303, 470, 398,
	0, 534, 0, 0, 0, 0, 0, 0, 0, 0,
	539, 540, 537, 635, 0, 597, 598, 0, 0, 464,
	465, 331, 338, 483, 340, 302, 388, 333, 449, 347,
	0, 476, 541, 477, 600, 603, 601, 602, 380, 343,
	344, 412, 348, 358, 401, 448, 386, 406, 300, 439,
	413, 362, 527, 554, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 269, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	582, 581, 580, 579, 578, 577, 576, 575, 0, 0,
	524, 426, 312, 274, 308, 309, 316, 624, 621, 430,
	625, 0, 282, 504, 356, 0, 397, 330, 569, 570,
	0, 0, 230, 231, 232, 233, 234, 235, 236, 237,
	275, 238, 239, 240, 241, 242, 243, 244, 247, 248,
	249, 250, 251, 252, 253, 254, 572, 245, 246, 255,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 0, 0, 0, 276, 277, 278, 279,
	0, 0, 270, 271, 272, 273, 0, 0, 0, 455,
	456, 457, 479, 0, 441, 503, 622, 0, 0, 0,
	0, 0, 0, 0, 553, 565, 599, 0, 609, 610,
	612, 614, 613, 616, 418, 0, 617, 0, 628, 494,
	495, 629, 605, 385, 0, 509, 542, 531, 615, 497,
	0, 0, 2796, 0, 0, 0, 0, 0, 0, 0,
	325, 0, 0, 355, 546, 528, 538, 529, 514, 515,
	516, 523, 335, 517, 518, 519, 489, 520, 490, 521,
	522, 0, 545, 496, 414, 369, 563, 562, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 217, 0, 0, 0,
	0, 0, 0, 298, 218, 491, 611, 493, 492, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 301, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	288, 420, 437, 299, 410, 450, 304, 417, 294, 384,
	407, 0, 0, 290, 435, 416, 366, 345, 346, 289,
	0, 402, 323, 337, 320, 382, 0, 434, 462, 319,
	453, 0, 445, 292, 0, 444, 381, 431, 436, 367,
	361, 0, 291, 433, 365, 360, 349, 327, 478, 350,
	351, 341, 393, 359, 394, 342, 371, 370, 372, 0,
	0, 0, 0, 0, 473, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 604, 0,
	0, 608, 0, 447, 0, 0, 0, 0, 0, 0,
	419, 0, 0, 352, 0, 0, 0, 463, 0, 405,
	387, 631, 0, 0, 403, 357, 432, 395, 438, 421,
	446, 399, 396, 283, 422, 322, 368, 295, 297, 317,
	324, 326, 328, 329, 377, 378, 390, 409, 423, 424,
	425, 321, 305, 404, 306, 339, 307, 284, 313, 311,
	314, 411, 315, 286, 391, 429, 0, 334, 400, 364,
	287, 363, 392, 428, 427, 296, 454, 460, 461, 550,
	0, 466, 632, 633, 634, 475, 0, 0, 480, 481,
	482, 484, 485, 486, 487, 551, 568, 535, 505, 468,
	559, 502, 506, 507, 571, 0, 0, 0, 459, 353,
	354, 0, 332, 280, 281, 627, 318, 383, 573, 606,
	607, 498, 0, 560, 499, 508, 310, 532, 544, 543,
	379, 458, 0, 555, 558, 488, 626, 0, 552, 567,
	630, 566, 623, 389, 0, 408, 564, 511, 0, 556,
	530, 0, 557, 526, 561, 0, 500, 0, 415, 440,
	452, 469, 472, 501, 586, 587, 588, 285, 471, 590,
	591, 592, 593, 594, 595, 596, 589, 443, 533, 510,
	536, 451, 513, 512, 0, 0, 547, 467, 548, 549,
	373, 374, 375, 376, 336, 574, 303, 470, 398, 0,
	534, 0, 0, 0, 0, 0, 0, 0, 0, 539,
	540, 537, 635, 0, 597, 598, 0, 0, 464, 465,
	331, 338, 483, 340, 302, 388, 333, 449, 347, 0,
	476, 541, 477, 600, 603, 601, 602, 380, 343, 344,
	412, 348, 358, 401, 448, 386, 406, 300, 439, 413,
	362, 527, 554, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 582,
	581, 580, 579, 578, 577, 576, 575, 0, 0, 524,
	426, 312, 274, 308, 309, 316, 624, 621, 430, 625,
	0, 282, 504, 356, 0, 397, 330, 569, 570, 0,
	0, 230, 231, 232, 233, 234, 235, 236, 237, 275,
	238, 239, 240, 241, 242, 243, 244, 247, 248, 249,
	250, 251, 252, 253, 254, 572, 245, 246, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 0, 0, 0, 276, 277, 278, 279, 0,
	0, 270, 271, 272, 273, 0, 0, 0, 455, 456,
	457, 479, 0, 441, 503, 622, 0, 0, 0, 0,
	0, 0, 0, 553, 565, 599, 0, 609, 610, 612,
	614, 613, 616, 418, 0, 617, 0, 628, 494, 495,
	629, 605, 385, 0, 509, 542, 531, 615, 497, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 325,
	0, 0, 355, 546, 528, 538, 529, 514, 515, 516,
	523, 335, 517, 518, 519, 489, 520, 490, 521, 522,
	0, 545, 496, 414, 369, 563, 562, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 217, 0, 0, 0, 0,
	0, 0, 298, 218, 491, 611, 493, 492, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 301, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2131, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 288,
	420, 437, 299, 410, 450, 304, 417, 294, 384, 407,
	0, 0, 290, 435, 416, 366, 345, 346, 289, 0,
	402, 323, 337, 320, 382, 0, 434, 462, 319, 453,
	0, 445, 292, 0, 444, 381, 431, 436, 367, 361,
	0, 291, 433, 365, 360, 349, 327, 478, 350, 351,
	341, 393, 359, 394, 342, 371, 370, 372, 0, 0,
	0, 0, 0, 473, 474, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 604, 0, 0,
	608, 0, 447, 0, 0, 0, 0, 0, 0, 419,
	0, 0, 352, 0, 0, 0, 463, 0, 405, 387,
	631, 0, 0, 403, 357, 432, 395, 438, 421, 446,
	399, 396, 283, 422, 322, 368, 295, 297, 317, 324,
	326, 328, 329, 377, 378, 390, 409, 423, 424, 425,
	321, 305, 404, 306, 339, 307, 284, 313, 311, 314,
	411, 315, 286, 391, 429, 0, 334, 400, 364, 287,
	363, 392, 428, 427, 296, 454, 460, 461, 550, 0,
	466, 632, 633, 634, 475, 0, 0, 480, 481, 482,
	484, 485, 486, 487, 551, 568, 535, 505, 468, 559,
	502, 506, 507, 571, 0, 0, 0, 459, 353, 354,
	0, 332, 280, 281, 627, 318, 383, 573, 606, 607,
	498, 0, 560, 499, 508, 310, 532, 544, 543, 379,
	458, 0, 555, 558, 488, 626, 0, 552, 567, 630,
	566, 623, 389, 0, 408, 564, 511, 0, 556, 530,
	0, 557, 526, 561, 0, 500, 0, 415, 440, 452,
	469, 472, 501, 586, 587, 588, 285, 471, 590, 591,
	592, 593, 594, 595, 596, 589, 443, 533, 510, 536,
	451, 513, 512, 0, 0, 547, 467, 548, 549, 373,
	374, 375, 376, 336, 574, 303, 470, 398, 0, 534,
	0, 0, 0, 0, 0, 0, 0, 0, 539, 540,
	537, 635, 0, 597, 598, 0, 0, 464, 465, 331,
	338, 483, 340, 302, 388, 333, 449, 347, 0, 476,
	541, 477, 600, 603, 601, 602, 380, 343, 344, 412,
	348, 358, 401, 448, 386, 406, 300, 439, 413, 362,
	527, 554, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 269, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 582, 581,
	580, 579, 578, 577, 576, 575, 0, 0, 524, 426,
	312, 274, 308, 309, 316, 624, 621, 430, 625, 0,
	282, 504, 356, 0, 397, 330, 569, 570, 0, 0,
	230, 231, 232, 233, 234, 235, 236, 237, 275, 238,
	239, 240, 241, 242, 243, 244, 247, 248, 249, 250,
	251, 252, 253, 254, 572, 245, 246, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 0, 0, 0, 276, 277, 278, 279, 0, 0,
	270, 271, 272, 273, 0, 0, 0, 455, 456, 457,
	479, 0, 441, 503, 622, 0, 0, 0, 0, 0,
	0, 0, 553, 565, 599, 0, 609, 610, 612, 614,
	613, 616, 418, 0, 617, 0, 628, 494, 495, 629,
	605, 385, 0, 509, 542, 531, 615, 497, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 325, 0,
	0, 355, 546, 528, 538, 529, 514, 515, 516, 523,
	335, 517, 518, 519, 489, 520, 490, 521, 522, 0,
	545, 496, 414, 369, 563, 562, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 217, 0, 0, 2557, 0, 0,
	0, 298, 218, 491, 611, 493, 492, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 301, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 288, 420,
	437, 299, 410, 450, 304, 417, 294, 384, 407, 0,
	0, 290, 435, 416, 366, 345, 346, 289, 0, 402,
	323, 337, 320, 382, 0, 434, 462, 319, 453, 0,
	445, 292, 0, 444, 381, 431, 436, 367, 361, 0,
	291, 433, 365, 360, 349, 327, 478, 350, 351, 341,
	393, 359, 394, 342, 371, 370, 372, 0, 0, 0,
	0, 0, 473, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 604, 0, 0, 608,
	0, 447, 0, 0, 0, 0, 0, 0, 419, 0,
	0, 352, 0, 0, 0, 463, 0, 405, 387, 631,
	0, 0, 403, 357, 432, 395, 438, 421, 446, 399,
	396, 283, 422, 322, 368, 295, 297, 317, 324, 326,
	328, 329, 377, 378, 390, 409, 423, 424, 425, 321,
	305, 404, 306, 339, 307, 284, 313, 311, 314, 411,
	315, 286, 391, 429, 0, 334, 400, 364, 287, 363,
	392, 428, 427, 296, 454, 460, 461, 550, 0, 466,
	632, 633, 634, 475, 0, 0, 480, 481, 482, 484,
	485, 486, 487, 551, 568, 535, 505, 468, 559, 502,
	506, 507, 571, 0, 0, 0, 459, 353, 354, 0,
	332, 280, 281, 627, 318, 383, 573, 606, 607, 498,
	0, 560, 499, 508, 310, 532, 544, 543, 379, 458,
	0, 555, 558, 488, 626, 0, 552, 567, 630, 566,
	623, 389, 0, 408, 564, 511, 0, 556, 530, 0,
	557, 526, 561, 0, 500, 0, 415, 440, 452, 469,
	472, 501, 586, 587, 588, 285, 471, 590, 591, 592,
	593, 594, 595, 596, 589, 443, 533, 510, 536, 451,
	513, 512, 0, 0, 547, 467, 548, 549, 373, 374,
	375, 376, 336, 574, 303, 470, 398, 0, 534, 0,
	0, 0, 0, 0, 0, 0, 0, 539, 540, 537,
	635, 0, 597, 598, 0, 0, 464, 465, 331, 338,
	483, 340, 302, 388, 333, 449, 347, 0, 476, 541,
	477, 600, 603, 601, 602, 380, 343, 344, 412, 348,
	358, 401, 448, 386, 406, 300, 439, 413, 362, 527,
	554, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 269, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 582, 581, 580,
	579, 578, 577, 576, 575, 0, 0, 524, 426, 312,
	274, 308, 309, 316, 624, 621, 430, 625, 0, 282,
	504, 356, 0, 397, 330, 569, 570, 0, 0, 230,
	231, 232, 233, 234, 235, 236, 237, 275, 238, 239,
	240, 241, 242, 243, 244, 247, 248, 249, 250, 251,
	252, 253, 254, 572, 245, 246, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	0, 0, 0, 276, 277, 278, 279, 0, 0, 270,
	271, 272, 273, 0, 0, 0, 455, 456, 457, 479,
	0, 441, 503, 622, 0, 0, 0, 0, 0, 0,
	0, 553, 565, 599, 0, 609, 610, 612, 614, 613,
	616, 418, 0, 617, 0, 628, 494, 495, 629, 605,
	385, 0, 509, 542, 531, 615, 497, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 325, 0, 0,
	355, 546, 528, 538, 529, 514, 515, 516, 523, 335,
	517, 518, 519, 489, 520, 490, 521, 522, 0, 545,
	496, 414, 369, 563, 562, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 217, 0, 0, 0, 0, 0, 0,
	298, 218, 491, 611, 493, 492, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2518, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 288, 420, 437,
	299, 410, 450, 304, 417, 294, 384, 407, 0, 0,
	290, 435, 416, 366, 345, 346, 289, 0, 402, 323,
	337, 320, 382, 0, 434, 462, 319, 453, 0, 445,
	292, 0, 444, 381, 431, 436, 367, 361, 0, 291,
	433, 365, 360, 349, 327, 478, 350, 351, 341, 393,
	359, 394, 342, 371, 370, 372, 0, 0, 0, 0,
	0, 473, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 604, 0, 0, 608, 0,
	447, 0, 0, 0, 0, 0, 0, 419, 0, 0,
	352, 0, 0, 0, 463, 0, 405, 387, 631, 0,
	0, 403, 357, 432, 395, 438, 421, 446, 399, 396,
	283, 422, 322, 368, 295, 297, 317, 324, 326, 328,
	329, 377, 378, 390, 409, 423, 424, 425, 321, 305,
	404, 306, 339, 307, 284, 313, 311, 314, 411, 315,
	286, 391, 429, 0, 334, 400, 364, 287, 363, 392,
	428, 427, 296, 454, 460, 461, 550, 0, 466, 632,
	633, 634, 475, 0, 0, 480, 481, 482, 484, 485,
	486, 487, 551, 568, 535, 505, 468, 559, 502, 506,
	507, 571, 0, 0, 0, 459, 353, 354, 0, 332,
	280, 281, 627, 318, 383, 573, 606, 607, 498, 0,
	560, 499, 508, 310, 532, 544, 543, 379, 458, 0,
	555, 558, 488, 626, 0, 552, 567, 630, 566, 623,
	389, 0, 408, 564, 511, 0, 556, 530, 0, 557,
	526, 561, 0, 500, 0, 415, 440, 452, 469, 472,
	501, 586, 587, 588, 285, 471, 590, 591, 592, 593,
	594, 595, 596, 589, 443, 533, 510, 536, 451, 513,
	512, 0, 0, 547, 467, 548, 549, 373, 374, 375,
	376, 336, 574, 303, 470, 398, 0, 534, 0, 0,
	0, 0, 0, 0, 0, 0, 539, 540, 537, 635,
	0, 597, 598, 0, 0, 464, 465, 331, 338, 483,
	340, 302, 388, 333, 449, 347, 0, 476, 541, 477,
	600, 603, 601, 602, 380, 343, 344, 412, 348, 358,
	401, 448, 386, 406, 300, 439, 413, 362, 527, 554,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 269, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 582, 581, 580, 579,
	578, 577, 576, 575, 0, 0, 524, 426, 312, 274,
	308, 309, 316, 624, 621, 430, 625, 0, 282, 504,
	356, 0, 397, 330, 569, 570, 0, 0, 230, 231,
	232, 233, 234, 235, 236, 237, 275, 238, 239, 240,
	241, 242, 243, 244, 247, 248, 249, 250, 251, 252,
	253, 254, 572, 245, 246, 255, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 0,
	0, 0, 276, 277, 278, 279, 0, 0, 270, 271,
	272, 273, 0, 0, 0, 455, 456, 457, 479, 0,
	441, 503, 622, 0, 0, 0, 0, 0, 0, 0,
	553, 565, 599, 0, 609, 610, 612, 614, 613, 616,
	418, 0, 617, 0, 628, 494, 495, 629, 605, 385,
	0, 509, 542, 531, 615, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 325, 0, 0, 355,
	546, 528, 538, 529, 514, 515, 516, 523, 335, 517,
	518, 519, 489, 520, 490, 521, 522, 0, 545, 496,
	414, 369, 563, 562, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 217, 0, 0, 2516, 0, 0, 0, 298,
	218, 491, 611, 493, 492, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 301, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 288, 420, 437, 299,
	410, 450, 304, 417, 294, 384, 407, 0, 0, 290,
	435, 416, 366, 345, 346, 289, 0, 402, 323, 337,
	320, 382, 0, 434, 462, 319, 453, 0, 445, 292,
	0, 444, 381, 431, 436, 367, 361, 0, 291, 433,
	365, 360, 349, 327, 478, 350, 351, 341, 393, 359,
	394, 342, 371, 370, 372, 0, 0, 0, 0, 0,
	473, 474, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 604, 0, 0, 608, 0, 447,
	0, 0, 0, 0, 0, 0, 419, 0, 0, 352,
	0, 0, 0, 463, 0, 405, 387, 631, 0, 0,
	403, 357, 432, 395, 438, 421, 446, 399, 396, 283,
	422, 322, 368, 295, 297, 317, 324, 326, 328, 329,
	377, 378, 390, 409, 423, 424, 425, 321, 305, 404,
	306, 339, 307, 284, 313, 311, 314, 411, 315, 286,
	391, 429, 0, 334, 400, 364, 287, 363, 392, 428,
	427, 296, 454, 460, 461, 550, 0, 466, 632, 633,
	634, 475, 0, 0, 480, 481, 482, 484, 485, 486,
	487, 551, 568, 535, 505, 468, 559, 502, 506, 507,
	571, 0, 0, 0, 459, 353, 354, 0, 332, 280,
	281, 627, 318, 383, 573, 606, 607, 498, 0, 560,
	499, 508, 310, 532, 544, 543, 379, 458, 0, 555,
	558, 488, 626, 0, 552, 567, 630, 566, 623, 389,
	0, 408, 564, 511, 0, 556, 530, 0, 557, 526,
	561, 0, 500, 0, 415, 440, 452, 469, 472, 501,
	586, 587, 588, 285, 471, 590, 591, 592, 593, 594,
	595, 596, 589, 443, 533, 510, 536, 451, 513, 512,
	0, 0, 547, 467, 548, 549, 373, 374, 375, 376,
	336, 574, 303, 470, 398, 0, 534, 0, 0, 0,
	0, 0, 0, 0, 0, 539, 540, 537, 635, 0,
	597, 598, 0, 0, 464, 465, 331, 338, 483, 340,
	302, 388, 333, 449, 347, 0, 476, 541, 477, 600,
	603, 601, 602, 380, 343, 344, 412, 348, 358, 401,
	448, 386, 406, 300, 439, 413, 362, 527, 554, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	269, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 582, 581, 580, 579, 578,
	577, 576, 575, 0, 0, 524, 426, 312, 274, 308,
	309, 316, 624, 621, 430, 625, 0, 282, 504, 356,
	0, 397, 330, 569, 570, 0, 0, 230, 231, 232,
	233, 234, 235, 236, 237, 275, 238, 239, 240, 241,
	242, 243, 244, 247, 248, 249, 250, 251, 252, 253,
	254, 572, 245, 246, 255, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 0, 0,
	0, 276, 277, 278, 279, 0, 0, 270, 271, 272,
	273, 0, 0, 0, 455, 456, 457, 479, 0, 441,
	503, 622, 0, 0, 0, 0, 0, 0, 0, 553,
	565, 599, 0, 609, 610, 612, 614, 613, 616, 418,
	0, 617, 2296, 628, 494, 495, 629, 605, 385, 0,
	509, 542, 531, 615, 497, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 325, 0, 0, 355, 546,
	528, 538, 529, 514, 515, 516, 523, 335, 517, 518,
	519, 489, 520, 490, 521, 522, 0, 545, 496, 414,
	369, 563, 562, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 217, 0, 0, 0, 0, 0, 0, 298, 218,
	491, 611, 493, 492, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 301, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 288, 420, 437, 299, 410,
	450, 304, 417, 294, 384, 407, 0, 0, 290, 435,
	416, 366, 345, 346, 289, 0, 402, 323, 337, 320,
	382, 0, 434, 462, 319, 453, 0, 445, 292, 0,
	444, 381, 431, 436, 367, 361, 0, 291, 433, 365,
	360, 349, 327, 478, 350, 351, 341, 393, 359, 394,
	342, 371, 370, 372, 0, 0, 0, 0, 0, 473,
	474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 604, 0, 0, 608, 0, 447, 0,
	0, 0, 0, 0, 0, 419, 0, 0, 352, 0,
	0, 0, 463, 0, 405, 387, 631, 0, 0, 403,
	357, 432, 395, 438, 421, 446, 399, 396, 283, 422,
	322, 368, 295, 297, 317, 324, 326, 328, 329, 377,
	378, 390, 409, 423, 424, 425, 321, 305, 404, 306,
	339, 307, 284, 313, 311, 314, 411, 315, 286, 391,
	429, 0, 334, 400, 364, 287, 363, 392, 428, 427,
	296, 454, 460, 461, 550, 0, 466, 632, 633, 634,
	475, 0, 0, 480, 481, 482, 484, 485, 486, 487,
	551, 568, 535, 505, 468, 559, 502, 506, 507, 571,
	0, 0, 0, 459, 353, 354, 0, 332, 280, 281,
	627, 318, 383, 573, 606, 607, 498, 0, 560, 499,
	508, 310, 532, 544, 543, 379, 458, 0, 555, 558,
	488, 626, 0, 552, 567, 630, 566, 623, 389, 0,
	408, 564, 511, 0, 556, 530, 0, 557, 526, 561,
	0, 500, 0, 415, 440, 452, 469, 472, 501, 586,
	587, 588, 285, 471, 590, 591, 592, 593, 594, 595,
	596, 589, 443, 533, 510, 536, 451, 513, 512, 0,
	0, 547, 467, 548, 549, 373, 374, 375, 376, 336,
	574, 303, 470, 398, 0, 534, 0, 0, 0, 0,
	0, 0, 0, 0, 539, 540, 537, 635, 0, 597,
	598, 0, 0, 464, 465, 331, 338, 483, 340, 302,
	388, 333, 449, 347, 0, 476, 541, 477, 600, 603,
	601, 602, 380, 343, 344, 412, 348, 358, 401, 448,
	386, 406, 300, 439, 413, 362, 527, 554, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 582, 581, 580, 579, 578, 577,
	576, 575, 0, 0, 524, 426, 312, 274, 308, 309,
	316, 624, 621, 430, 625, 0, 282, 504, 356, 0,
	397, 330, 569, 570, 0, 0, 230, 231, 232, 233,
	234, 235, 236, 237, 275, 238, 239, 240, 241, 242,
	243, 244, 247, 248, 249, 250, 251, 252, 253, 254,
	572, 245, 246, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 0, 0, 0,
	276, 277, 278, 279, 0, 0, 270, 271, 272, 273,
	0, 0, 0, 455, 456, 457, 479, 0, 441, 503,
	622, 0, 0, 0, 0, 0, 0, 0, 553, 565,
	599, 0, 609, 610, 612, 614, 613, 616, 418, 0,
	617, 0, 628, 494, 495, 629, 605, 385, 0, 509,
	542, 531, 615, 497, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 325, 0, 0, 355, 546, 528,
	538, 529, 514, 515, 516, 523, 335, 517, 518, 519,
	489, 520, 490, 521, 522, 0, 545, 496, 414, 369,
	563, 562, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	217, 0, 0, 0, 1848, 0, 0, 298, 218, 491,
	611, 493, 492, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 288, 420, 437, 299, 410, 450,
	304, 417, 294, 384, 407, 0, 0, 290, 435, 416,
	366, 345, 346, 289, 0, 402, 323, 337, 320, 382,
	0, 434, 462, 319, 453, 0, 445, 292, 0, 444,
	381, 431, 436, 367, 361, 0, 291, 433, 365, 360,
	349, 327, 478, 350, 351, 341, 393, 359, 394, 342,
	371, 370, 372, 0, 0, 0, 0, 0, 473, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 604, 0, 0, 608, 0, 447, 0, 0,
	0, 0, 0, 0, 419, 0, 0, 352, 0, 0,
	0, 463, 0, 405, 387, 631, 0, 0, 403, 357,
	432, 395, 438, 421, 446, 399, 396, 283, 422, 322,
	368, 295, 297, 317, 324, 326, 328, 329, 377, 378,
	390, 409, 423, 424, 425, 321, 305, 404, 306, 339,
	307, 284, 313, 311, 314, 411, 315, 286, 391, 429,
	0, 334, 400, 364, 287, 363, 392, 428, 427, 296,
	454, 460, 461, 550, 0, 466, 632, 633, 634, 475,
	0, 0, 480, 481, 482, 484, 485, 486, 487, 551,
	568, 535, 505, 468, 559, 502, 506, 507, 571, 0,
	0, 0, 459, 353, 354, 0, 332, 280, 281, 627,
	318, 383, 573, 606, 607, 498, 0, 560, 499, 508,
	310, 532, 544, 543, 379, 458, 0, 555, 558, 488,
	626, 0, 552, 567, 630, 566, 623, 389, 0, 408,
	564, 511, 0, 556, 530, 0, 557, 526, 561, 0,
	500, 0, 415, 440, 452, 469, 472, 501, 586, 587,
	588, 285, 471, 590, 591, 592, 593, 594, 595, 596,
	589, 443, 533, 510, 536, 451, 513, 512, 0, 0,
	547, 467, 548, 549, 373, 374, 375, 376, 336, 574,
	303, 470, 398, 0, 534, 0, 0, 0, 0, 0,
	0, 0, 0, 539, 540, 537, 635, 0, 597, 598,
	0, 0, 464, 465, 331, 338, 483, 340, 302, 388,
	333, 449, 347, 0, 476, 541, 477, 600, 603, 601,
	602, 380, 343, 344, 412, 348, 358, 401, 448, 386,
	406, 300, 439, 413, 362, 527, 554, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 269, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 582, 581, 580, 579, 578, 577, 576,
	575, 0, 0, 524, 426, 312, 274, 308, 309, 316,
	624, 621, 430, 625, 0, 282, 504, 356, 0, 397,
	330, 569, 570, 0, 0, 230, 231, 232, 233, 234,
	235, 236, 237, 275, 238, 239, 240, 241, 242, 243,
	244, 247, 248, 249, 250, 251, 252, 253, 254, 572,
	245, 246, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 0, 0, 0, 276,
	277, 278, 279, 0, 0, 270, 271, 272, 273, 0,
	0, 0, 455, 456, 457, 479, 0, 441, 503, 622,
	0, 0, 0, 0, 0, 0, 0, 553, 565, 599,
	0, 609, 610, 612, 614, 613, 616, 418, 0, 617,
	0, 628, 494, 495, 629, 605, 385, 0, 509, 542,
	531, 615, 497, 0, 1977, 0, 0, 0, 0, 0,
	0, 0, 0, 325, 0, 0, 355, 546, 528, 538,
	529, 514, 515, 516, 523, 335, 517, 518, 519, 489,
	520, 490, 521, 522, 0, 545, 496, 414, 369, 563,
	562, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 217,
	0, 0, 0, 0, 0, 0, 298, 218, 491, 611,
	493, 492, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 301, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 288, 420, 437, 299, 410, 450, 304,
	417, 294, 384, 407, 0, 0, 290, 435, 416, 366,
	345, 346, 289, 0, 402, 323, 337, 320, 382, 0,
	434, 462, 319, 453, 0, 445, 292, 0, 444, 381,
	431, 436, 367, 361, 0, 291, 433, 365, 360, 349,
	327, 478, 350, 351, 341, 393, 359, 394, 342, 371,
	370, 372, 0, 0, 0, 0, 0, 473, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 604, 0, 0, 608, 0, 447, 0, 0, 0,
	0, 0, 0, 419, 0, 0, 352, 0, 0, 0,
	463, 0, 405, 387, 631, 0, 0, 403, 357, 432,
	395, 438, 421, 446, 399, 396, 283, 422, 322, 368,
	295, 297, 317, 324, 326, 328, 329, 377, 378, 390,
	409, 423, 424, 425, 321, 305, 404, 306, 339, 307,
	284, 313, 311, 314, 411, 315, 286, 391, 429, 0,
	334, 400, 364, 287, 363, 392, 428, 427, 296, 454,
	460, 461, 550, 0, 466, 632, 633, 634, 475, 0,
	0, 480, 481, 482, 484, 485, 486, 487, 551, 568,
	535, 505, 468, 559, 502, 506, 507, 571, 0, 0,
	0, 459, 353, 354, 0, 332, 280, 281, 627, 318,
	383, 573, 606, 607, 498, 0, 560, 499, 508, 310,
	532, 544, 543, 379, 458, 0, 555, 558, 488, 626,
	0, 552, 567, 630, 566, 623, 389, 0, 408, 564,
	511, 0, 556, 530, 0, 557, 526, 561, 0, 500,
	0, 415, 440, 452, 469, 472, 501, 586, 587, 588,
	285, 471, 590, 591, 592, 593, 594, 595, 596, 589,
	443, 533, 510, 536, 451, 513, 512, 0, 0, 547,
	467, 548, 549, 373, 374, 375, 376, 336, 574, 303,
	470, 398, 0, 534, 0, 0, 0, 0, 0, 0,
	0, 0, 539, 540, 537, 635, 0, 597, 598, 0,
	0, 464, 465, 331, 338, 483, 340, 302, 388, 333,
	449, 347, 0, 476, 541, 477, 600, 603, 601, 602,
	380, 343, 344, 412, 348, 358, 401, 448, 386, 406,
	300, 439, 413, 362, 527, 554, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 269, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 582, 581, 580, 579, 578, 577, 576, 575,
	0, 0, 524, 426, 312, 274, 308, 309, 316, 624,
	621, 430, 625, 0, 282, 504, 356, 0, 397, 330,
	569, 570, 0, 0, 230, 231, 232, 233, 234, 235,
	236, 237, 275, 238, 239, 240, 241, 242, 243, 244,
	247, 248, 249, 250, 251, 252, 253, 254, 572, 245,
	246, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 0, 0, 0, 276, 277,
	278, 279, 0, 0, 270, 271, 272, 273, 0, 0,
	0, 455, 456, 457, 479, 0, 441, 503, 622, 0,
	0, 0, 0, 0, 0, 0, 553, 565, 599, 0,
	609, 610, 612, 614, 613, 616, 418, 0, 617, 0,
	628, 494, 495, 629, 605, 385, 0, 509, 542, 531,
	615, 497, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 325, 0, 0, 355, 546, 528, 538, 529,
	514, 515, 516, 523, 335, 517, 518, 519, 489, 520,
	490, 521, 522, 0, 545, 496, 414, 369, 563, 562,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 217, 0,
	0, 1492, 0, 0, 0, 298, 218, 491, 611, 493,
	492, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 288, 420, 437, 299, 410, 450, 304, 417,
	294, 384, 407, 0, 0, 290, 435, 416, 366, 345,
	346, 289, 0, 402, 323, 337, 320, 382, 0, 434,
	462, 319, 453, 0, 445, 292, 0, 444, 381, 431,
	436, 367, 361, 0, 291, 433, 365, 360, 349, 327,
	478, 350, 351, 341, 393, 359, 394, 342, 371, 370,
	372, 0, 0, 0, 0, 0, 473, 474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	604, 0, 0, 608, 0, 447, 0, 0, 0, 0,
	0, 0, 419, 0, 0, 352, 0, 0, 0, 463,
	0, 405, 387, 631, 0, 0, 403, 357, 432, 395,
	438, 421, 446, 1882, 396, 283, 422, 322, 368, 295,
	297, 317, 324, 326, 328, 329, 377, 378, 390, 409,
	423, 424, 425, 321, 305, 404, 306, 339, 307, 284,
	313, 311, 314, 411, 315, 286, 391, 429, 0, 334,
	400, 364, 287, 363, 392, 428, 427, 296, 454, 460,
	461, 550, 0, 466, 632, 633, 634, 475, 0, 0,
	480, 481, 482, 484, 485, 486, 487, 551, 568, 535,
	505, 468, 559, 502, 506, 507, 571, 0, 0, 0,
	459, 353, 354, 0, 332, 280, 281, 627, 318, 383,
	573, 606, 607, 498, 0, 560, 499, 508, 310, 532,
	544, 543, 379, 458, 0, 555, 558, 488, 626, 0,
	552, 567, 630, 566, 623, 389, 0, 408, 564, 511,
	0, 556, 530, 0, 557, 526, 561, 0, 500, 0,
	415, 440, 452, 469, 472, 501, 586, 587, 588, 285,
	471, 590, 591, 592, 593, 594, 595, 596, 589, 443,
	533, 510, 536, 451, 513, 512, 0, 0, 547, 467,
	548, 549, 373, 374, 375, 376, 336, 574, 303, 470,
	398, 0, 534, 0, 0, 0, 0, 0, 0, 0,
	0, 539, 540, 537, 635, 0, 597, 598, 0, 0,
	464, 465, 331, 338, 483, 340, 302, 388, 333, 449,
	347, 0, 476, 541, 477, 600, 603, 601, 602, 380,
	343, 344, 412, 348, 358, 401, 448, 386, 406, 300,
	439, 413, 362, 527, 554, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 269, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 582, 581, 580, 579, 578, 577, 576, 575, 0,
	0, 524, 426, 312, 274, 308, 309, 316, 624, 621,
	430, 625, 0, 282, 504, 356, 0, 397, 330, 569,
	570, 0, 0, 230, 231, 232, 233, 234, 235, 236,
	237, 275, 238, 239, 240, 241, 242, 243, 244, 247,
	248, 249, 250, 251, 252, 253, 254, 572, 245, 246,
	255, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 0, 0, 0, 276, 277, 278,
	279, 0, 0, 270, 271, 272, 273, 0, 0, 0,
	455, 456, 457, 479, 0, 441, 503, 622, 0, 0,
	0, 0, 0, 0, 0, 553, 565, 599, 0, 609,
	610, 612, 614, 613, 616, 418, 0, 617, 0, 628,
	494, 495, 629, 605, 385, 0, 509, 542, 531, 615,
	497, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 325, 0, 0, 355, 546, 528, 538, 529, 514,
	515, 516, 523, 335, 517, 518, 519, 489, 520, 490,
	521, 522, 0, 545, 496, 414, 369, 563, 562, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 217, 0, 0,
	0, 0, 0, 0, 298, 218, 491, 611, 493, 492,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 301,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 288, 420, 437, 299, 410, 450, 304, 417, 294,
	384, 407, 0, 0, 290, 435, 416, 366, 345, 346,
	289, 0, 402, 323, 337, 320, 382, 0, 434, 462,
	319, 453, 0, 445, 292, 0, 444, 381, 431, 436,
	367, 361, 0, 291, 433, 365, 360, 349, 327, 478,
	350, 351, 341, 393, 359, 394, 342, 371, 370, 372,
	0, 0, 0, 0, 0, 473, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 604,
	0, 0, 608, 0, 447, 0, 0, 1521, 0, 0,
	0, 419, 0, 0, 352, 0, 0, 0, 463, 0,
	405, 387, 631, 0, 0, 403, 357, 432, 395, 438,
	421, 446, 399, 396, 283, 422, 322, 368, 295, 297,
	317, 324, 326, 328, 329, 377, 378, 390, 409, 423,
	424, 425, 321, 305, 404, 306, 339, 307, 284, 313,
	311, 314, 411, 315, 286, 391, 429, 0, 334, 400,
	364, 287, 363, 392, 428, 427, 296, 454, 460, 461,
	550, 0, 466, 632, 633, 634, 475, 0, 0, 480,
	481, 482, 484, 485, 486, 487, 551, 568, 535, 505,
	468, 559, 502, 506, 507, 571, 0, 0, 0, 459,
	353, 354, 0, 332, 280, 281, 627, 318, 383, 573,
	606, 607, 498, 0, 560, 499, 508, 310, 532, 544,
	543, 379, 458, 0, 555, 558, 488, 626, 0, 552,
	567, 630, 566, 623, 389, 0, 408, 564, 511, 0,
	556, 530, 0, 557, 526, 561, 0, 500, 0, 415,
	440, 452, 469, 472, 501, 586, 587, 588, 285, 471,
	590, 591, 592, 593, 594, 595, 596, 589, 443, 533,
	510, 536, 451, 513, 512, 0, 0, 547, 467, 548,
	549, 373, 374, 375, 376, 336, 574, 303, 470, 398,
	0, 534, 0, 0, 0, 0, 0, 0, 0, 0,
	539, 540, 537, 635, 0, 597, 598, 0, 0, 464,
	465, 331, 338, 483, 340, 302, 388, 333, 449, 347,
	0, 476, 541, 477, 600, 603, 601, 602, 380, 343,
	344, 412, 348, 358, 401, 448, 386, 406, 300, 439,
	413, 362, 527, 554, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 269, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	582, 581, 580, 579, 578, 577, 576, 575, 0, 0,
	524, 426, 312, 274, 308, 309, 316, 624, 621, 430,
	625, 0, 282, 504, 356, 0, 397, 330, 569, 570,
	0, 0, 230, 231, 232, 233, 234, 235, 236, 237,
	275, 238, 239, 240, 241, 242, 243, 244, 247, 248,
	249, 250, 251, 252, 253, 254, 572, 245, 246, 255,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 0, 0, 0, 276, 277, 278, 279,
	0, 0, 270, 271, 272, 273, 0, 0, 0, 455,
	456, 457, 479, 0, 441, 503, 622, 0, 0, 0,
	0, 0, 0, 0, 553, 565, 599, 0, 609, 610,
	612, 614, 613, 616, 418, 0, 617, 0, 628, 494,
	495, 629, 605, 385, 0, 509, 542, 531, 615, 497,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 642,
	325, 0, 0, 355, 546, 528, 538, 529, 514, 515,
	516, 523, 335, 517, 518, 519, 489, 520, 490, 521,
	522, 0, 545, 496, 414, 369, 563, 562, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 217, 0, 0, 0,
	0, 0, 0, 298, 218, 491, 611, 493, 492, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 301, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	288, 420, 437, 299, 410, 450, 304, 417, 294, 384,
	407, 0, 0, 290, 435, 416, 366, 345, 346, 289,
	0, 402, 323, 337, 320, 382, 0, 434, 462, 319,
	453, 0, 445, 292, 0, 444, 381, 431, 436, 367,
	361, 0, 291, 433, 365, 360, 349, 327, 478, 350,
	351, 341, 393, 359, 394, 342, 371, 370, 372, 0,
	0, 0, 0, 0, 473, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 604, 0,
	0, 608, 0, 447, 0, 0, 0, 0, 0, 0,
	419, 0, 0, 352, 0, 0, 0, 463, 0, 405,
	387, 631, 0, 0, 403, 357, 432, 395, 438, 421,
	446, 399, 396, 283, 422, 322, 368, 295, 297, 317,
	324, 326, 328, 329, 377, 378, 390, 409, 423, 424,
	425, 321, 305, 404, 306, 339, 307, 284, 313, 311,
	314, 411, 315, 286, 391, 429, 0, 334, 400, 364,
	287, 363, 392, 428, 427, 296, 454, 460, 461, 550,
	0, 466, 632, 633, 634, 475, 0, 0, 480, 481,
	482, 484, 485, 486, 487, 551, 568, 535, 505, 468,
	559, 502, 506, 507, 571, 0, 0, 0, 459, 353,
	354, 0, 332, 280, 281, 627, 318, 383, 573, 606,
	607, 498, 0, 560, 499, 508, 310, 532, 544, 543,
	379, 458, 0, 555, 558, 488, 626, 0, 552, 567,
	630, 566, 623, 389, 0, 408, 564, 511, 0, 556,
	530, 0, 557, 526, 561, 0, 500, 0, 415, 440,
	452, 469, 472, 501, 586, 587, 588, 285, 471, 590,
	591, 592, 593, 594, 595, 596, 589, 443, 533, 510,
	536, 451, 513, 512, 0, 0, 547, 467, 548, 549,
	373, 374, 375, 376, 336, 574, 303, 470, 398, 0,
	534, 0, 0, 0, 0, 0, 0, 0, 0, 539,
	540, 537, 635, 0, 597, 598, 0, 0, 464, 465,
	331, 338, 483, 340, 302, 388, 333, 449, 347, 0,
	476, 541, 477, 600, 603, 601, 602, 380, 343, 344,
	412, 348, 358, 401, 448, 386, 406, 300, 439, 413,
	362, 527, 554, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 582,
	581, 580, 579, 578, 577, 576, 575, 0, 0, 524,
	426, 312, 274, 308, 309, 316, 624, 621, 430, 625,
	0, 282, 504, 356, 0, 397, 330, 569, 570, 0,
	0, 230, 231, 232, 233, 234, 235, 236, 237, 275,
	238, 239, 240, 241, 242, 243, 244, 247, 248, 249,
	250, 251, 252, 253, 254, 572, 245, 246, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 0, 0, 0, 276, 277, 278, 279, 0,
	0, 270, 271, 272, 273, 0, 0, 0, 455, 456,
	457, 479, 0, 441, 503, 622, 0, 0, 0, 0,
	0, 0, 0, 553, 565, 599, 0, 609, 610, 612,
	614, 613, 616, 418, 0, 617, 0, 628, 494, 495,
	629, 605, 385, 0, 509, 542, 531, 615, 497, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 325,
	0, 0, 355, 546, 528, 538, 529, 514, 515, 516,
	523, 335, 517, 518, 519, 489, 520, 490, 521, 522,
	0, 545, 496, 414, 369, 563, 562, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 217, 0, 0, 0, 0,
	0, 0, 298, 218, 491, 611, 493, 492, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 301, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 288,
	420, 437, 299, 410, 450, 304, 417, 294, 384, 407,
	0, 0, 290, 435, 416, 366, 345, 346, 289, 0,
	402, 323, 337, 320, 382, 0, 434, 462, 319, 453,
	0, 445, 292, 0, 444, 381, 431, 436, 367, 361,
	0, 291, 433, 365, 360, 349, 327, 478, 350, 351,
	341, 393, 359, 394, 342, 371, 370, 372, 0, 0,
	0, 0, 0, 473, 474, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 604, 0, 652,
	608, 0, 447, 0, 0, 0, 0, 0, 0, 419,
	0, 0, 352, 0, 0, 0, 463, 0, 405, 387,
	631, 0, 0, 403, 357, 432, 395, 438, 421, 446,
	399, 396, 283, 422, 322, 368, 295, 297, 317, 324,
	326, 328, 329, 377, 378, 390, 409, 423, 424, 425,
	321, 305, 404, 306, 339, 307, 284, 313, 311, 314,
	411, 315, 286, 391, 429, 0, 334, 400, 364, 287,
	363, 392, 428, 427, 296, 454, 460, 461, 550, 0,
	466, 632, 633, 634, 475, 0, 0, 480, 481, 482,
	484, 485, 486, 487, 551, 568, 535, 505, 468, 559,
	502, 506, 507, 571, 0, 0, 0, 459, 353, 354,
	0, 332, 280, 281, 627, 318, 383, 573, 606, 607,
	498, 0, 560, 499, 508, 310, 532, 544, 543, 379,
	458, 0, 555, 558, 488, 626, 0, 552, 567, 630,
	566, 623, 389, 0, 408, 564, 511, 0, 556, 530,
	0, 557, 526, 561, 0, 500, 0, 415, 440, 452,
	469, 472, 501, 586, 587, 588, 285, 471, 590, 591,
	592, 593, 594, 595, 596, 589, 443, 533, 510, 536,
	451, 513, 512, 0, 0, 547, 467, 548, 549, 373,
	374, 375, 376, 336, 574, 303, 470, 398, 0, 534,
	0, 0, 0, 0, 0, 0, 0, 0, 539, 540,
	537, 635, 0, 597, 598, 0, 0, 464, 465, 331,
	338, 483, 340, 302, 388, 333, 449, 347, 0, 476,
	541, 477, 600, 603, 601, 602, 380, 343, 344, 412,
	348, 358, 401, 448, 386, 406, 300, 439, 413, 362,
	527, 554, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 269, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 582, 581,
	580, 579, 578, 577, 576, 575, 0, 0, 524, 426,
	312, 274, 308, 309, 316, 624, 621, 430, 625, 0,
	282, 504, 356, 0, 397, 330, 569, 570, 0, 0,
	230, 231, 232, 233, 234, 235, 236, 237, 275, 238,
	239, 240, 241, 242, 243, 244, 247, 248, 249, 250,
	251, 252, 253, 254, 572, 245, 246, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 0, 0, 0, 276, 277, 278, 279, 0, 0,
	270, 271, 272, 273, 0, 0, 0, 455, 456, 457,
	479, 0, 441, 503, 622, 0, 0, 0, 0, 0,
	0, 0, 553, 565, 599, 0, 609, 610, 612, 614,
	613, 616, 418, 0, 617, 0, 628, 494, 495, 629,
	605, 385, 0, 509, 542, 531, 615, 497, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 325, 0,
	0, 355, 546, 528, 538, 529, 514, 515, 516, 523,
	335, 517, 518, 519, 489, 520, 490, 521, 522, 0,
	545, 496, 414, 369, 563, 562, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 217, 0, 0, 0, 0, 0,
	0, 298, 218, 491, 611, 493, 492, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 301, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 288, 420,
	437, 299, 410, 450, 304, 417, 294, 384, 407, 0,
	0, 290, 435, 416, 366, 345, 346, 289, 0, 402,
	323, 337, 320, 382, 0, 434, 462, 319, 453, 0,
	445, 292, 0, 444, 381, 431, 436, 367, 361, 0,
	291, 433, 365, 360, 349, 327, 478, 350, 351, 341,
	393, 359, 394, 342, 371, 370, 372, 0, 0, 0,
	0, 0, 473, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 604, 0, 0, 608,
	0, 447, 0, 0, 0, 0, 0, 0, 419, 0,
	0, 352, 0, 0, 0, 463, 0, 405, 387, 631,
	0, 0, 403, 357, 432, 395, 438, 421, 446, 399,
	396, 283, 422, 322, 368, 295, 297, 317, 324, 326,
	328, 329, 377, 378, 390, 409, 423, 424, 425, 321,
	305, 404, 306, 339, 307, 284, 313, 311, 314, 411,
	315, 286, 391, 429, 0, 334, 400, 364, 287, 363,
	392, 428, 427, 296, 454, 460, 461, 550, 0, 466,
	632, 633, 634, 475, 0, 0, 480, 481, 482, 484,
	485, 486, 487, 551, 568, 535, 505, 468, 559, 502,
	506, 507, 571, 0, 0, 0, 459, 353, 354, 0,
	332, 280, 281, 627, 318, 383, 573, 606, 607, 498,
	0, 560, 499, 508, 310, 532, 544, 543, 379, 458,
	0, 555, 558, 488, 626, 0, 552, 567, 630, 566,
	623, 389, 0, 408, 564, 511, 0, 556, 530, 0,
	557, 526, 561, 0, 500, 0, 415, 440, 452, 469,
	472, 501, 586, 587, 588, 285, 471, 590, 591, 592,
	593, 594, 595, 596, 589, 443, 533, 510, 536, 451,
	513, 512, 0, 0, 547, 467, 548, 549, 373, 374,
	375, 376, 336, 574, 303, 470, 398, 0, 534, 0,
	0, 0, 0, 0, 0, 0, 0, 539, 540, 537,
	635, 0, 597, 598, 0, 0, 464, 465, 331, 338,
	483, 340, 302, 388, 333, 449, 347, 0, 476, 541,
	477, 600, 603, 601, 602, 380, 343, 344, 412, 348,
	358, 401, 448, 386, 406, 300, 439, 413, 362, 527,
	554, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 269, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 582, 581, 580,
	579, 578, 577, 576, 575, 943, 0, 524, 426, 312,
	274, 308, 309, 316, 624, 621, 430, 625, 0, 282,
	504, 356, 0, 397, 330, 569, 570, 0, 0, 230,
	231, 232, 233, 234, 235, 236, 237, 275, 238, 239,
	240, 241, 242, 243, 244, 247, 248, 249, 250, 251,
	252, 253, 254, 572, 245, 246, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	0, 0, 0, 276, 277, 278, 279, 0, 0, 270,
	271, 272, 273, 0, 0, 0, 455, 456, 457, 479,
	0, 441, 503, 622, 0, 0, 0, 0, 0, 0,
	0, 553, 565, 599, 0, 609, 610, 612, 614, 613,
	616, 418, 0, 617, 0, 628, 494, 495, 629, 605,
	385, 0, 509, 542, 531, 615, 497, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 325, 0, 0,
	355, 546, 528, 538, 529, 514, 515, 516, 523, 335,
	517, 518, 519, 489, 520, 490, 521, 522, 0, 545,
	496, 414, 369, 563, 562, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 217, 0, 0, 0, 0, 0, 0,
	298, 218, 491, 611, 493, 492, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 288, 420, 437,
	299, 410, 450, 304, 417, 294, 384, 407, 0, 0,
	290, 435, 416, 366, 345, 346, 289, 0, 402, 323,
	337, 320, 382, 0, 434, 462, 319, 453, 0, 445,
	292, 0, 444, 381, 431, 436, 367, 361, 0, 291,
	433, 365, 360, 349, 327, 478, 350, 351, 341, 393,
	359, 394, 342, 371, 370, 372, 0, 0, 0, 0,
	0, 473, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 604, 0, 0, 608, 0,
	447, 0, 0, 0, 0, 0, 0, 419, 0, 0,
	352, 0, 0, 0, 463, 0, 405, 387, 631, 0,
	0, 403, 357, 432, 395, 438, 421, 446, 399, 396,
	283, 422, 322, 368, 295, 297, 317, 324, 326, 328,
	329, 377, 378, 390, 409, 423, 424, 425, 321, 305,
	404, 306, 339, 307, 284, 313, 311, 314, 411, 315,
	286, 391, 429, 0, 334, 400, 364, 287, 363, 392,
	428, 427, 296, 454, 460, 461, 550, 0, 466, 632,
	633, 634, 475, 0, 0, 480, 481, 482, 484, 485,
	486, 487, 551, 568, 535, 505, 468, 559, 502, 506,
	507, 571, 0, 0, 0, 459, 353, 354, 0, 332,
	280, 281, 627, 318, 383, 573, 606, 607, 498, 0,
	560, 499, 508, 310, 532, 544, 543, 379, 458, 0,
	555, 558, 488, 626, 0, 552, 567, 630, 566, 623,
	389, 0, 408, 564, 511, 0, 556, 530, 0, 557,
	526, 561, 0, 500, 0, 415, 440, 452, 469, 472,
	501, 586, 587, 588, 285, 471, 590, 591, 592, 593,
	594, 595, 596, 589, 443, 533, 510, 536, 451, 513,
	512, 0, 0, 547, 467, 548, 549, 373, 374, 375,
	376, 336, 574, 303, 470, 398, 0, 534, 0, 0,
	0, 0, 0, 0, 0, 0, 539, 540, 537, 635,
	0, 597, 598, 0, 0, 464, 465, 331, 338, 483,
	340, 302, 388, 333, 449, 347, 0, 476, 541, 477,
	600, 603, 601, 602, 380, 343, 344, 412, 348, 358,
	401, 448, 386, 406, 300, 439, 413, 362, 527, 554,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 269, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 582, 581, 580, 579,
	578, 577, 576, 575, 0, 0, 524, 426, 312, 274,
	308, 309, 316, 624, 621, 430, 625, 0, 282, 504,
	356, 0, 397, 330, 569, 570, 0, 0, 230, 231,
	232, 233, 234, 235, 236, 237, 275, 238, 239, 240,
	241, 242, 243, 244, 247, 248, 249, 250, 251, 252,
	253, 254, 572, 245, 246, 255, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 0,
	0, 0, 276, 277, 278, 279, 0, 0, 270, 271,
	272, 273, 0, 0, 0, 455, 456, 457, 479, 0,
	441, 503, 622, 0, 0, 0, 0, 0, 0, 0,
	553, 565, 599, 0, 609, 610, 612, 614, 613, 616,
	418, 0, 617, 0, 628, 494, 495, 629, 605, 385,
	0, 509, 542, 531, 615, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 325, 0, 0, 355,
	546, 528, 538, 529, 514, 515, 516, 523, 335, 517,
	518, 519, 489, 520, 490, 521, 522, 0, 545, 496,
	414, 369, 563, 562, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 217, 0, 0, 0, 0, 0, 0, 298,
	218, 491, 611, 493, 492, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 301, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 288, 420, 1471, 299,
	410, 450, 304, 417, 294, 384, 407, 0, 0, 290,
	435, 416, 366, 345, 346, 289, 0, 402, 323, 337,
	320, 382, 0, 434, 462, 319, 453, 0, 445, 292,
	0, 444, 381, 431, 436, 367, 361, 0, 291, 433,
	365, 360, 349, 327, 478, 350, 351, 341, 393, 359,
	394, 342, 371, 370, 372, 0, 0, 0, 0, 0,
	473, 474, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 604, 0, 0, 608, 0, 447,
	0, 0, 0, 0, 0, 0, 419, 0, 0, 352,
	0, 0, 0, 463, 0, 405, 387, 631, 0, 0,
	403, 357, 432, 395, 438, 421, 446, 399, 396, 283,
	422, 322, 368, 295, 297, 317, 324, 326, 328, 329,
	377, 378, 390, 409, 423, 424, 425, 321, 305, 404,
	306, 339, 307, 284, 313, 311, 314, 411, 315, 286,
	391, 429, 0, 334, 400, 364, 287, 363, 392, 428,
	427, 296, 454, 460, 461, 550, 0, 466, 632, 633,
	634, 475, 0, 0, 480, 481, 482, 484, 485, 486,
	487, 551, 568, 535, 505, 468, 559, 502, 506, 507,
	571, 0, 0, 0, 459, 353, 354, 0, 332, 280,
	281, 627, 318, 383, 573, 606, 607, 498, 0, 560,
	499, 508, 310, 532, 544, 543, 379, 458, 0, 555,
	558, 488, 626, 0, 552, 567, 630, 566, 623, 389,
	0, 408, 564, 511, 0, 556, 530, 0, 557, 526,
	561, 0, 500, 0, 415, 440, 452, 469, 472, 501,
	586, 587, 588, 285, 471, 590, 591, 592, 593, 594,
	595, 596, 589, 443, 533, 510, 536, 451, 513, 512,
	0, 0, 547, 467, 548, 549, 373, 374, 375, 376,
	336, 574, 303, 470, 398, 0, 534, 0, 0, 0,
	0, 0, 0, 0, 0, 539, 540, 537, 635, 0,
	597, 598, 0, 0, 464, 465, 331, 338, 483, 340,
	302, 388, 333, 449, 347, 0, 476, 541, 477, 600,
	603, 601, 602, 380, 343, 344, 412, 348, 358, 401,
	448, 386, 406, 300, 439, 413, 362, 527, 554, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	269, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 582, 581, 580, 579, 578,
	577, 576, 575, 0, 0, 524, 426, 312, 274, 308,
	309, 316, 624, 621, 430, 625, 0, 282, 504, 356,
	0, 397, 330, 569, 570, 0, 0, 230, 231, 232,
	233, 234, 235, 236, 237, 275, 238, 239, 240, 241,
	242, 243, 244, 247, 248, 249, 250, 251, 252, 253,
	254, 572, 245, 246, 255, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 0, 0,
	0, 276, 277, 278, 279, 0, 0, 270, 271, 272,
	273, 0, 0, 0, 455, 456, 457, 479, 0, 441,
	503, 622, 0, 0, 0, 0, 0, 0, 0, 553,
	565, 599, 0, 609, 610, 612, 614, 613, 616, 418,
	0, 617, 0, 628, 494, 495, 629, 605, 385, 0,
	509, 542, 531, 615, 497, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 325, 0, 0, 355, 546,
	528, 538, 529, 514, 515, 516, 523, 335, 517, 518,
	519, 489, 520, 490, 521, 522, 0, 545, 496, 414,
	369, 563, 562, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 217, 0, 0, 0, 0, 0, 0, 298, 218,
	491, 611, 493, 492, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 301, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 288, 420, 1469, 299, 410,
	450, 304, 417, 294, 384, 407, 0, 0, 290, 435,
	416, 366, 345, 346, 289, 0, 402, 323, 337, 320,
	382, 0, 434, 462, 319, 453, 0, 445, 292, 0,
	444, 381, 431, 436, 367, 361, 0, 291, 433, 365,
	360, 349, 327, 478, 350, 351, 341, 393, 359, 394,
	342, 371, 370, 372, 0, 0, 0, 0, 0, 473,
	474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 604, 0, 0, 608, 0, 447, 0,
	0, 0, 0, 0, 0, 419, 0, 0, 352, 0,
	0, 0, 463, 0, 405, 387, 631, 0, 0, 403,
	357, 432, 395, 438, 421, 446, 399, 396, 283, 422,
	322, 368, 295, 297, 317, 324, 326, 328, 329, 377,
	378, 390, 409, 423, 424, 425, 321, 305, 404, 306,
	339, 307, 284, 313, 311, 314, 411, 315, 286, 391,
	429, 0, 334, 400, 364, 287, 363, 392, 428, 427,
	296, 454, 460, 461, 550, 0, 466, 632, 633, 634,
	475, 0, 0, 480, 481, 482, 484, 485, 486, 487,
	551, 568, 535, 505, 468, 559, 502, 506, 507, 571,
	0, 0, 0, 459, 353, 354, 0, 332, 280, 281,
	627, 318, 383, 573, 606, 607, 498, 0, 560, 499,
	508, 310, 532, 544, 543, 379, 458, 0, 555, 558,
	488, 626, 0, 552, 567, 630, 566, 623, 389, 0,
	408, 564, 511, 0, 556, 530, 0, 557, 526, 561,
	0, 500, 0, 415, 440, 452, 469, 472, 501, 586,
	587, 588, 285, 471, 590, 591, 592, 593, 594, 595,
	596, 589, 443, 533, 510, 536, 451, 513, 512, 0,
	0, 547, 467, 548, 549, 373, 374, 375, 376, 336,
	574, 303, 470, 398, 0, 534, 0, 0, 0, 0,
	0, 0, 0, 0, 539, 540, 537, 635, 0, 597,
	598, 0, 0, 464, 465, 331, 338, 483, 340, 302,
	388, 333, 449, 347, 0, 476, 541, 477, 600, 603,
	601, 602, 380, 343, 344, 412, 348, 358, 401, 448,
	386, 406, 300, 439, 413, 362, 527, 554, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 582, 581, 580, 579, 578, 577,
	576, 575, 0, 0, 524, 426, 312, 274, 308, 309,
	316, 624, 621, 430, 625, 0, 282, 504, 356, 0,
	397, 330, 569, 570, 0, 0, 230, 231, 232, 233,
	234, 235, 236, 237, 275, 238, 239, 240, 241, 242,
	243, 244, 247, 248, 249, 250, 251, 252, 253, 254,
	572, 245, 246, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 0, 0, 0,
	276, 277, 278, 279, 0, 0, 270, 271, 272, 273,
	0, 0, 0, 455, 456, 457, 479, 0, 441, 503,
	622, 0, 0, 0, 0, 0, 0, 0, 553, 565,
	599, 0, 609, 610, 612, 614, 613, 616, 418, 0,
	617, 0, 628, 494, 495, 629, 605, 385, 0, 509,
	542, 531, 615, 497, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 325, 0, 0, 355, 546, 528,
	538, 529, 514, 515, 516, 523, 335, 517, 518, 519,
	489, 520, 490, 521, 522, 0, 545, 496, 414, 369,
	563, 562, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	217, 0, 0, 0, 0, 0, 0, 298, 218, 491,
	611, 493, 492, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 288, 420, 437, 299, 410, 450,
	304, 417, 294, 384, 407, 0, 0, 290, 435, 416,
	366, 345, 346, 289, 0, 402, 323, 337, 320, 382,
	0, 434, 462, 319, 453, 0, 445, 292, 0, 444,
	381, 431, 436, 367, 361, 0, 291, 433, 365, 360,
	349, 327, 478, 350, 351, 341, 393, 359, 394, 342,
	371, 370, 372, 0, 0, 0, 0, 0, 473, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 604, 0, 0, 608, 0, 447, 0, 0,
	0, 0, 0, 0, 419, 0, 0, 352, 0, 0,
	0, 463, 0, 405, 387, 631, 0, 0, 403, 357,
	432, 395, 438, 421, 446, 399, 396, 283, 422, 322,
	368, 295, 297, 719, 324, 326, 328, 329, 377, 378,
	390, 409, 423, 424, 425, 321, 305, 404, 306, 339,
	307, 284, 313, 311, 314, 411, 315, 286, 391, 429,
	0, 334, 400, 364, 287, 363, 392, 428, 427, 296,
	454, 460, 461, 550, 0, 466, 632, 633, 634, 475,
	0, 0, 480, 481, 482, 484, 485, 486, 487, 551,
	568, 535, 505, 468, 559, 502, 506, 507, 571, 0,
	0, 0, 459, 353, 354, 0, 332, 280, 281, 627,
	318, 383, 573, 606, 607, 498, 0, 560, 499, 508,
	310, 532, 544, 543, 379, 458, 0, 555, 558, 488,
	626, 0, 552, 567, 630, 566, 623, 389, 0, 408,
	564, 511, 0, 556, 530, 0, 557, 526, 561, 0,
	500, 0, 415, 440, 452, 469, 472, 501, 586, 587,
	588, 285, 471, 590, 591, 592, 593, 594, 595, 596,
	589, 443, 533, 510, 536, 451, 513, 512, 0, 0,
	547, 467, 548, 549, 373, 374, 375, 376, 336, 574,
	303, 470, 398, 0, 534, 0, 0, 0, 0, 0,
	0, 0, 0, 539, 540, 537, 635, 0, 597, 598,
	0, 0, 464, 465, 331, 338, 483, 340, 302, 388,
	333, 449, 347, 0, 476, 541, 477, 600, 603, 601,
	602, 380, 343, 344, 412, 348, 358, 401, 448, 386,
	406, 300, 439, 413, 362, 527, 554, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 269, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 582, 581, 580, 579, 578, 577, 576,
	575, 0, 0, 524, 426, 312, 274, 308, 309, 316,
	624, 621, 430, 625, 0, 282, 504, 356, 0, 397,
	330, 569, 570, 0, 0, 230, 231, 232, 233, 234,
	235, 236, 237, 275, 238, 239, 240, 241, 242, 243,
	244, 247, 248, 249, 250, 251, 252, 253, 254, 572,
	245, 246, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 0, 0, 0, 276,
	277, 278, 279, 0, 0, 270, 271, 272, 273, 0,
	0, 0, 455, 456, 457, 479, 0, 441, 503, 622,
	0, 0, 0, 0, 0, 0, 0, 553, 565, 599,
	0, 609, 610, 612, 614, 613, 616, 418, 0, 617,
	0, 628, 494, 495, 629, 605, 385, 0, 509, 542,
	531, 615, 497, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 325, 0, 0, 355, 546, 528, 538,
	529, 514, 515, 516, 523, 335, 517, 518, 519, 489,
	520, 490, 521, 522, 0, 545, 496, 414, 369, 563,
	562, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 217,
	0, 0, 0, 0, 0, 0, 298, 218, 491, 611,
	493, 492, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 301, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 288, 420, 437, 299, 410, 450, 304,
	417, 294, 384, 407, 0, 0, 290, 435, 416, 366,
	345, 346, 289, 0, 402, 323, 337, 320, 382, 0,
	434, 462, 319, 453, 0, 445, 292, 0, 444, 381,
	431, 436, 367, 361, 0, 291, 433, 365, 360, 349,
	327, 478, 350, 351, 341, 393, 359, 394, 342, 371,
	370, 372, 0, 0, 0, 0, 0, 473, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 604, 0, 0, 608, 0, 447, 0, 0, 0,
	0, 0, 0, 419, 0, 0, 352, 0, 0, 0,
	463, 0, 405, 387, 631, 0, 0, 403, 357, 432,
	395, 438, 421, 446, 676, 396, 283, 422, 322, 368,
	295, 297, 317, 324, 326, 328, 329, 377, 378, 390,
	409, 423, 424, 425, 321, 305, 404, 306, 339, 307,
	284, 313, 311, 314, 411, 315, 286, 391, 429, 0,
	334, 400, 364, 287, 363, 392, 428, 427, 296, 454,
	460, 461, 550, 0, 466, 632, 633, 634, 475, 0,
	0, 480, 481, 482, 484, 485, 486, 487, 551, 568,
	535, 505, 468, 559, 502, 506, 507, 571, 0, 0,
	0, 459, 353, 354, 0, 332, 280, 281, 627, 318,
	383, 573, 606, 607, 498, 0, 560, 499, 508, 310,
	532, 544, 543, 379, 458, 0, 555, 558, 488, 626,
	0, 552, 567, 630, 566, 623, 389, 0, 408, 564,
	511, 0, 556, 530, 0, 557, 526, 561, 0, 500,
	0, 415, 440, 452, 469, 472, 501, 586, 587, 588,
	285, 471, 590, 591, 592, 593, 594, 595, 677, 589,
	443, 533, 510, 536, 451, 513, 512, 0, 0, 547,
	467, 548, 549, 373, 374, 375, 376, 336, 574, 303,
	470, 398, 0, 534, 0, 0, 0, 0, 0, 0,
	0, 0, 539, 540, 537, 635, 0, 597, 598, 0,
	0, 464, 465, 331, 338, 483, 340, 302, 388, 333,
	449, 347, 0, 476, 541, 477, 600, 603, 601, 602,
	380, 343, 344, 412, 348, 358, 401, 448, 386, 406,
	300, 439, 413, 362, 527, 554, 0, 0, 0, 0,
	0, 0, 0, 1096, 0, 0, 0, 269, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 582, 581, 580, 579, 578, 577, 576, 575,
	0, 0, 524, 426, 312, 274, 308, 309, 316, 624,
	621, 430, 625, 0, 282, 504, 356, 0, 397, 330,
	569, 570, 0, 0, 230, 231, 232, 233, 234, 235,
	236, 237, 275, 238, 239, 240, 241, 242, 243, 244,
	247, 248, 249, 250, 251, 252, 253, 254, 572, 245,
	246, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 0, 0, 0, 276, 277,
	278, 279, 0, 0, 270, 271, 272, 273, 0, 0,
	0, 455, 456, 457, 479, 0, 441, 503, 622, 0,
	0, 0, 0, 0, 0, 1081, 553, 565, 599, 0,
	609, 610, 612, 614, 613, 616, 418, 0, 617, 0,
	628, 494, 495, 629, 605, 1104, 1108, 1110, 1112, 1114,
	1115, 1117, 0, 1122, 1118, 1119, 1120, 1121, 0, 1099,
	1100, 1101, 1102, 1079, 1080, 1105, 0, 1082, 0, 1084,
	1085, 1086, 1087, 1083, 1088, 1089, 1090, 1091, 1092, 1095,
	1097, 1093, 1094, 1103, 698, 697, 704, 694, 0, 0,
	0, 1107, 1109, 1111, 1113, 1116, 701, 702, 1964, 703,
	707, 0, 0, 688, 0, 195, 0, 0, 0, 0,
	0, 0, 0, 712, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3517, 0, 1098,
	0, 0, 0, 1967, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1964, 0, 0, 0, 0, 716, 0, 0,
	718, 0, 0, 0, 0, 717, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 191, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1941, 0, 1967, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3688,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1941,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1957, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 689, 691, 690, 0, 1957, 0, 0,
	0, 0, 0, 696, 0, 0, 0, 0, 1964, 0,
	0, 0, 0, 0, 0, 700, 0, 0, 0, 0,
	0, 0, 715, 0, 1945, 0, 0, 0, 0, 693,
	0, 0, 0, 0, 0, 1951, 0, 0, 0, 0,
	0, 0, 0, 1967, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1939, 1973, 0, 0, 1940,
	1942, 1944, 0, 1946, 1947, 1948, 1952, 1953, 1954, 1956,
	1959, 1960, 1961, 1964, 0, 0, 0, 0, 1945, 0,
	1949, 1958, 1950, 0, 0, 0, 0, 0, 0, 1951,
	0, 0, 0, 0, 0, 1941, 0, 0, 0, 0,
	0, 0, 0, 0, 1106, 0, 0, 0, 1967, 1939,
	1973, 0, 0, 1940, 1942, 1944, 1965, 1946, 1947, 1948,
	1952, 1953, 1954, 1956, 1959, 1960, 1961, 0, 0, 0,
	0, 0, 0, 0, 1949, 1958, 1950, 0, 0, 0,
	0, 695, 699, 705, 0, 706, 708, 0, 0, 709,
	710, 711, 0, 0, 713, 714, 0, 0, 0, 3659,
	1941, 1962, 0, 1957, 0, 0, 0, 0, 0, 0,
	1965, 0, 0, 0, 0, 0, 0, 0, 1938, 0,
	0, 0, 0, 0, 0, 1937, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1955,
	0, 0, 0, 0, 0, 1962, 0, 0, 1943, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1957, 0,
	0, 0, 1938, 0, 0, 0, 0, 0, 0, 1937,
	0, 0, 0, 0, 1945, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1951, 0, 0, 0, 0,
	0, 0, 0, 1955, 0, 0, 0, 0, 0, 0,
	0, 0, 1943, 0, 0, 1939, 1973, 0, 0, 1940,
	1942, 1944, 0, 1946, 1947, 1948, 1952, 1953, 1954, 1956,
	1959, 1960, 1961, 0, 0, 0, 0, 0, 0, 0,
	1949, 1958, 1950, 0, 0, 0, 0, 0, 0, 1945,
	692, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1951, 0, 0, 0, 0, 0, 3521, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1965, 0, 0, 0,
	1939, 1973, 0, 0, 1940, 1942, 1944, 0, 1946, 1947,
	1948, 1952, 1953, 1954, 1956, 1959, 1960, 1961, 0, 0,
	0, 0, 0, 0, 0, 1949, 1958, 1950, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3525, 1962, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1938, 0,
	0, 1965, 0, 0, 0, 1937, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1955,
	0, 0, 0, 0, 0, 0, 0, 0, 1943, 0,
	0, 0, 0, 0, 0, 0, 1962, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1938, 0, 0, 0, 0, 0, 0,
	1937, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1955, 0, 0, 0, 0, 0,
	0, 0, 0, 1943, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3525, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3525,
}

var yyPact = [...]int{
	269, -1000, -1000, -1000, -295, 14213, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 47657, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 413, 47657,
	-293, 29706, 45800, -1000, -1000, 2724, -1000, 46419, 16082, 47657,
	522, 521, 47657, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 899, -1000, 50133, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 838, 4104, 49514,
	11094, -203, -1000, 1581, -19, 2502, 537, -181, -182, 1053,
	1064, 1052, 1052, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 246, 923, 47038, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 4213, 266, 897, 923, 21038, 146, 144,
	1581, 468, -57, 196, -1000, 1451, 4020, 213, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 11094,
	11094, 14213, -355, 14213, 11094, 47657, 47657, -1000, -1000, -1000,
	-1000, -293, 46419, 838, 4104, 11094, 2502, 537, -181, -182,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -57, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 144, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 4877, -1000,
	1558, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2284, 3042, 1551, 2501,
	791, 45800, 47657, -1000, 145, 791, -1000, -1000, -1000, 1581,
	3486, -1000, 47657, 47657, 230, 1846, -1000, 459, 412, 393,
	334, 1549, -1000, -1000, -1000, -1000, -1000, -1000, 706, 3432,
	-1000, 47657, 47657, 3071, 47657, -1000, 2228, 743, -1000, 50801,
	3261, 1388, 939, 3084, -1000, -1000, 3028, -1000, 339, 363,
	345, 479, 406, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	353, -1000, 3281, -1000, -1000, 329, -1000, -1000, 323, -1000,
	-1000, -1000, 143, -1000, -1000, -1000, -1000, -1000, -1000, 21,
	-1000, -1000, 1108, 1933, 11094, 2061, -1000, 2903, 1573, -1000,
	-1000, -1000, 6734, 12960, 12960, 12960, 12960, 47657, -1000, -1000,
	2850, 11094, 3026, 3024, 3023, 3020, -1000, -1000, -1000, -1000,
	-1000, -1000, 1542, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1968, -1000, -1000, -1000, 13582, -1000, 3019, 3018,
	3015, 3014, 3013, 3010, 3009, 3008, 3002, 3001, 2999, 2996,
	2995, 2994, 2696, 15453, 2993, 2500, 2499, 2990, 2987, 2982,
	2493, 2981, 2980, 2973, 2696, 2696, 2972, 2952, 2950, 2949,
	2946, 2936, 2931, 2929, 2928, 2927, 2921, 2920, 2910, 2906,
	2904, 2897, 2890, 2886, 2885, 2882, 2869, 2868, 2866, 2863,
	2862, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1401, -1000, 2860, 3465, 2762, -1000,
	3316, 3314, 3304, 3302, -250, 2859, 2179, -1000, -1000, 127,
	3425, 47657, -268, 47657, 2492, -77, 2491, -79, -1000, -62,
	-1000, -1000, 1040, -1000, 1028, -1000, 837, 837, 837, 47657,
	47657, 241, 922, 837, 837, 837, 837, 837, 870, 837,
	3349, 895, 890, 885, 883, 837, -10, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1844, 1820, 3147, 977, -1000, -1000,
	-1000, -1000, 1419, 47657, -1000, 2796, 2489, 1615, 1615, 3399,
	3399, 3348, 763, 751, 747, 1615, 613, -1000, 1832, 1832,
	1832, 1832, 1615, 543, 765, 3353, 3353, 147, 1832, 126,
	1615, 1615, 126, 1615, 1615, -1000, 1772, 304, -257, -1000,
	-1000, -1000, -1000, 1832, 1832, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 3334, 3333, 838, 838, 47657, 838, 233, 47657,
	838, 838, 838, 47657, 841, 93, 48895, 48276, 2352, 2228,
	742, 728, 1424, 1789, -1000, 1698, 47657, 47657, 1698, 1698,
	24135, 23516, -1000, 47657, -1000, 3465, 2762, 2688, 1566, 2687,
	2762, -81, 2487, 838, 838, 838, 838, 838, 311, 838,
	838, 838, 838, 838, 47657, 47657, 45181, 838, 838, 838,
	838, 9222, 9222, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 14213, 2100, 2090, 212, 3, -298, 282, -1000,
	-1000, 47657, 3229, 305, -1000, -1000, -1000, 2704, -1000, 2776,
	2776, 2776, 2776, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2776, 2776, 2790, 2857, -1000, -1000, 2766,
	2766, 2766, 2704, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2787, 2787,
	2789, 2789, 2787, 47657, -103, -1000, -1000, 11094, 47657, 3244,
	429, 2856, 791, -1000, -1000, 47657, 193, 438, 3465, 3239,
	3353, 3392, -1000, -1000, 1531, 2178, 2486, -1000, 334, -1000,
	431, 334, 1681, -1000, 1081, -1000, -1000, -1000, -1000, -1000,
	47657, 21, 394, -1000, -1000, 2471, 2855, -1000, 652, 1170,
	1265, -1000, 288, 4761, 38372, 2228, 38372, 47657, -1000, -1000,
	-1000, -1000, -1000, -1000, 142, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 346,
	-1000, 11094, 11094, 11094, 11094, 11094, -1000, 689, 12338, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 12960, 12960, 12960, 12960,
	12960, 12960, 12960, 12960, 12960, 12960, 12960, 12960, 2844, 1741,
	12960, 12960, 12960, 12960, 26611, 1566, 3341, 1420, 317, 1573,
	1573, 1573, 1573, 11094, -1000, 1864, 1933, 11094, 11094, 11094,
	11094, 47657, -1000, -1000, 3651, 11094, 11094, 3992, 11094, 3300,
	11094, 11094, 11094, 2686, 5481, 47657, 11094, -1000, 2684, 2683,
	-1000, -1000, 1981, 11094, -1000, -1000, 11094, -1000, -1000, 11094,
	12960, 11094, -1000, 11094, 11094, 11094, -1000, -1000, 1427, 3300,
	3300, 3300, 1777, 11094, 11094, 3300, 3300, 3300, 1744, 3300,
	3300, 3300, 3300, 3300, 3300, 3300, 3300, 3300, 3300, 2679,
	2676, 2674, 10472, 3353, -203, -1000, 8600, 3239, 3353, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -253,
	2853, 47657, 2483, 2481, -333, 191, 475, 47657, 1111, 417,
	2176, -83, 2175, 84, 1041, 1022, 1032, -1000, 2480, 1886,
	47657, 47657, 3294, -1000, 2852, 47657, 837, 837, 837, -1000,
	43324, 38372, 47657, 47657, 2228, 47657, 47657, 47657, 837, 837,
	837, 837, 47657, -1000, 3212, 38372, 3173, 841, -1000, 47657,
	1419, 3293, 47657, 417, 3399, 12960, 12960, -1000, -1000, 11094,
	-1000, 44562, 1832, 1615, 1615, -1000, -1000, 47657, -1000, -1000,
	-1000, 1832, 47657, 1832, 1832, 3399, 1832, -1000, -1000, -1000,
	1615, 1615, -1000, -1000, 11094, -1000, -1000, 1832, 1832, -1000,
	-1000, 3399, 47657, 136, 3399, 3399, 117, -1000, -1000, -1000,
	1615, 47657, 47657, 837, 47657, -1000, 47657, 47657, -1000, -1000,
	47657, 47657, 4571, 47657, 43324, 43943, 3330, -1000, 38372, 47657,
	47657, 867, 35896, -1000, 1387, -1000, 77, -1000, 73, 93,
	1698, 93, 1698, 865, -1000, 650, 655, 22278, 592, 38372,
	6103, -1000, -1000, 1698, 1698, 6103, 6103, 1577, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1411, -1000, 306, 3353, -1000,
	-1000, -1000, -1000, -1000, 2172, 417, 47657, 43324, 38372, 2228,
	47657, 838, 47657, 47657, 47657, 47657, 47657, -1000, 2851, 1518,
	-1000, 3256, 47657, 47657, 47657, 47657, 1252, -1000, -1000, 19177,
	1511, 1252, -1000, 1861, -1000, 11094, 14213, -233, 11094, 14213,
	14213, 11094, 14213, -1000, 11094, 301, -1000, -1000, -1000, -1000,
	2171, -1000, 2169, -1000, -1000, -1000, -1000, -1000, 2478, 2478,
	-1000, 2168, -1000, -1000, -1000, -1000, 2167, -1000, -1000, 2165,
	-1000, -1000, -1000, -1000, -145, 2673, 1108, -1000, 2477, 3082,
	-204, -1000, 20419, 47657, 47657, 429, -335, 1817, 1801, 1787,
	-1000, -204, -1000, 19798, 47657, 3353, -1000, -208, 3239, 11094,
	47657, -1000, 3347, -1000, -1000, 334, -1000, 525, 426, -1000,
	-1000, -1000, -1000, -1000, -1000, 1507, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 404, -64, -70, 1405,
	-1000, 47657, -1000, -1000, 288, 38372, 40229, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 277, -1000, -1000, 185, -1000, 864,
	268, 1679, -1000, -1000, 235, 210, 236, 918, 1933, -1000,
	1885, 1885, 1890, -1000, 711, -1000, -1000, -1000, -1000, 2850,
	-1000, -1000, -1000, 2089, 3325, -1000, 1841, 1841, 1458, 1458,
	1458, 1458, 1458, 1721, 1721, -1000, -1000, -1000, 6734, 2844,
	12960, 12960, 12960, 12960, 913, 913, 3945, 3666, -1000, -1000,
	-1000, -1000, 11094, 225, 1860, -1000, 11094, 2818, 1392, 2720,
	1353, 1504, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2669, 2663, 2129, 3420, 2662, 11094, -1000, -1000,
	1674, 1669, 1658, -1000, 2188, 9850, -1000, -1000, -1000, 2660,
	1501, 2657, -1000, -1000, -1000, 2652, 1655, 1183, 2645, 1816,
	2642, 2641, 2640, 2633, 1403, 11094, 11094, 11094, 11094, 2629,
	1654, 1644, 11094, 11094, 11094, 11094, 2627, 11094, 11094, 11094,
	11094, 11094, 11094, 11094, 11094, 11094, 11094, 137, 137, 137,
	1400, 1399, -1000, -1000, 1642, -1000, 1933, -1000, -1000, 3239,
	-1000, 2843, 2164, 1393, -1000, -1000, -290, 2394, 47657, 47657,
	189, 47657, 2476, -269, 47657, -1000, -1000, 2474, -1000, 2467,
	-1000, -1000, -1000, 1049, 999, 1010, 2465, 3255, 3345, 876,
	47657, 1142, 2842, 47657, 47657, 47657, 293, -1000, -1000, 1261,
	-1000, 268, 0, 535, 1168, 3069, 3407, -104, 47657, 47657,
	47657, 47657, 3289, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 42705, -1000, 2840, 1636, -1000, -1000, -1000, 1573, 1573,
	1933, 3068, 47657, 47657, 3399, 3399, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1832, 3399, 3399, 1376, 1615, 1832, -1000,
	-1000, 1832, -335, -1000, 1832, -1000, -335, 1495, -335, 47657,
	-1000, -1000, -1000, 3285, 2796, 1390, -1000, -1000, -1000, 3391,
	1922, 820, 820, 1026, 781, 3389, 17939, -1000, 1693, 1047,
	863, 3184, 336, -1000, 1693, -137, 794, 1693, 1693, 1693,
	1693, 1693, 1693, 1693, 690, 673, 1693, 1693, 1693, 1693,
	1693, 1693, 1693, 1693, 1693, 1693, 1693, 1057, 1693, 1693,
	1693, 1693, 1693, -1000, 1693, 2839, 516, -1000, -1000, -1000,
	-1000, -1000, -1000, 715, 639, 292, 3326, 369, -1000, 365,
	1261, 3321, 400, 47657, 2953, 1379, -1000, -1000, -1000, -1000,
	27230, 27230, 21659, 27230, -1000, 203, 93, 33, -1000, -1000,
	1387, 6103, 1387, 6103, 2162, -1000, -1000, 861, -1000, -1000,
	1168, -1000, 47657, 47657, -1000, -1000, 2838, 1786, -1000, -1000,
	15453, -1000, 6103, 6103, -1000, -1000, 29087, 47657, -1000, 10,
	-1000, 59, 3239, -1000, -1000, 1124, -1000, -1000, 1374, 1168,
	3080, 47657, 1124, 1124, 1124, -1000, -1000, 16701, 47657, 47657,
	-1000, -1000, -1000, -1000, 3399, 9222, -1000, 35896, -1000, -1000,
	42086, -1000, 41467, 3399, 1855, -1000, 14213, 2046, 198, -1000,
	274, -299, 194, 1904, 192, 1933, -1000, -1000, 2615, 2611,
	1634, -1000, 1618, 2609, 1617, 1616, 2160, -1000, 112, -1000,
	3210, 1208, -1000, 2824, -1000, 1611, 3146, -1000, 1371, -1000,
	1782, 1609, -1000, -1000, -1000, 11094, 40848, 11094, 1208, 1604,
	3130, 1371, 3239, 2462, -1000, 1370, -1000, 2212, 1468, 228,
	-1000, -1000, -1000, 47657, 838, 2471, 1600, 40229, 1313, -1000,
	853, 1457, 1450, -1000, 38372, 331, 38372, -1000, 38372, -1000,
	-1000, 398, -1000, 47657, 3194, -1000, -1000, -1000, 2394, 1781,
	-334, 47657, -1000, -1000, -1000, -1000, -1000, 1599, -1000, 913,
	913, 3945, 2991, -1000, 12960, -1000, 12960, 3205, -1000, 1853,
	-1000, 11094, 1997, 5195, 11094, 5195, 1597, 25373, 47657, -1000,
	-1000, 11094, 11094, -1000, 3193, -1000, -1000, -1000, -1000, 11094,
	11094, 2109, -1000, 47657, -1000, -1000, -1000, -1000, 25373, -1000,
	12960, -1000, -1000, -1000, -1000, 11094, 1274, 1274, 3162, 1592,
	137, 137, 137, 3058, 2976, 2955, 1580, 137, 2895, 2888,
	2883, 2864, 2771, 2730, 2638, 2607, 2593, 2543, -1000, 2817,
	-1000, -1000, 1963, 11716, 8600, -1000, -1000, 320, 1365, 2156,
	2460, 132, -1000, 1775, -1000, 2459, 47657, 47657, 1110, -1000,
	47657, 3405, -1000, 2457, -1000, -1000, -1000, 994, 2455, -1000,
	419, 2001, 200, 302, 2608, 1355, -1000, -1000, 47657, -1000,
	-1000, -1000, 16701, 2796, 2813, 2796, 173, 1693, 629, 38372,
	721, -1000, 47657, 2186, 1771, 3079, 777, 3219, 47657, 2810,
	451, 2807, 2806, 3277, 509, 50602, 47657, 1222, -1000, 1449,
	4020, -1000, 47657, -1000, 2228, -1000, 1615, -1000, -1000, 3399,
	-1000, -1000, 11094, 11094, 3399, 1615, 1615, -1000, 1832, -1000,
	47657, -1000, -335, 509, 50602, 3274, 4879, 657, 2479, -1000,
	47657, -1000, -1000, -1000, 827, -1000, 1021, 837, 47657, 1920,
	1021, 1919, 2805, -1000, -1000, 47657, 47657, 47657, 47657, -1000,
	-1000, 47657, -1000, 47657, 47657, 47657, 47657, 47657, 39610, -1000,
	47657, 47657, -1000, 47657, 1915, 47657, 1913, 3273, -1000, 1693,
	1693, 964, -1000, -1000, 599, -1000, 39610, 2154, 2145, 2125,
	2118, 2454, 2453, 2447, 1693, 1693, 2117, 2438, 38991, 2429,
	1151, 2116, 2101, 2098, 2155, 2428, 1062, -1000, 2421, 2110,
	2084, 2077, 47657, 2797, 2332, 511, -1000, -1000, 2001, 173,
	1693, 359, 47657, 1765, 1764, 629, 527, -1, 22897, -1000,
	-1000, 47657, 35896, 35896, 35896, 35896, -1000, 3117, 3114, 3113,
	-1000, 3106, 3100, 3145, 47657, 35896, 2796, -1000, 38991, -1000,
	-1000, -1000, 1566, 1574, 3530, 1012, 11094, -1000, -1000, 69,
	58, -1000, -1000, -1000, -1000, 38372, 2420, 592, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 3343, 47657, 47657, 849, 2605,
	1345, -1000, -1000, -1000, 50602, 2776, 2776, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2776, 2776, 2790, -1000,
	-1000, 2766, 2766, 2766, 2704, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2787, 2787, 2789, 2789, 2787,
	-1000, -1000, 3397, -1000, 1329, -1000, -1000, 1430, -1000, 3397,
	1879, -302, 14213, 1845, 1750, -1000, 11094, 14213, 11094, -238,
	351, -241, -1000, -1000, -1000, 2417, -1000, -1000, -1000, 2085,
	-1000, 2083, -1000, 183, 208, 1912, -204, 8600, 449, 47657,
	-204, 47657, 8600, -1000, 47657, 214, -347, -352, 206, 437,
	-204, 3343, 112, 11094, 3176, -1000, -1000, 47657, 2078, -1000,
	-1000, -1000, 3403, 38372, 2228, 1602, 37753, -1000, 328, -1000,
	265, 604, 2414, -1000, 882, 130, 2411, 2394, -1000, -1000,
	-1000, -1000, 12960, 1573, -1000, -1000, -1000, 1933, 11094, 2599,
	-1000, 995, 995, 2402, 2594, 2592, -1000, 2776, 2776, -1000,
	2704, 2766, 2704, 995, 995, 2584, -1000, 2174, 2531, -1000,
	2473, 2427, 11094, -1000, 2578, 2975, 1324, -47, -173, 137,
	137, -1000, -1000, -1000, -1000, 137, 137, 137, 137, -1000,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	792, -80, -261, -82, -263, -1000, 2577, 1322, -1000, -1000,
	-1000, -1000, -1000, 3992, 1319, 548, 548, 2394, 2389, -1000,
	851, 2387, 1048, 47657, 2385, -271, -1000, -1000, 2384, -1000,
	-1000, 47657, 2383, -1000, 632, 47657, 47657, 2380, 2375, 1142,
	50602, 2576, 3265, 17320, 3263, 2205, -1000, -1000, -1000, 28468,
	598, -1000, -1000, -1000, 686, 411, 2076, 596, -1000, 47657,
	492, 2508, 1762, 2373, 47657, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 3219, -1000, 886, 461, 34658, 14834, -1000, 405,
	47657, -1000, 17320, 17320, 405, 466, 1748, -1000, 791, 1271,
	140, 35896, 47657, -1000, 35277, 2574, -1000, 1168, 3399, -1000,
	1933, 1933, -335, 3399, 3399, 1615, -1000, -1000, 466, -1000,
	405, -1000, 1461, 18558, 569, 495, 487, -1000, 659, -1000,
	-1000, 788, 3192, 50602, -1000, 47657, -1000, 47657, -1000, 47657,
	47657, 837, 11094, 3192, 47657, 850, -1000, 1115, 441, 416,
	819, 819, 1318, -1000, 3250, -1000, -1000, 1316, -1000, -1000,
	-1000, -1000, 47657, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	25373, 25373, 3320, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2372, 2370, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 47657, 1562, -1000,
	1760, 2068, 2366, 2205, 28468, 1755, 1698, 2359, 2357, 598,
	2186, 1754, 873, 47657, -1000, 1162, 47657, 47657, -1000, 1398,
	-1000, 1746, 3063, 3077, 3063, -1000, -1000, -1000, -1000, -1000,
	3109, -1000, 3098, -1000, -1000, 1398, -1000, -1000, -1000, -1000,
	-1000, 1012, -1000, 3332, 1021, 1021, 1021, 2569, -1000, -1000,
	-1000, 1313, 2564, -1000, -1000, -1000, 3444, -1000, -1000, -1000,
	-1000, -1000, -1000, 16701, 3218, 3394, 3383, 37134, 3394, -1000,
	-302, 1850, -1000, 1923, 184, 1897, 47657, -1000, -1000, -1000,
	2563, 2562, -210, 202, 3382, 3379, 1058, -1000, 2555, 1275,
	-204, -1000, -1000, 1208, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -204, -1000, 1208, -1000, 183, -1000, -1000, 3209, -1000,
	-1000, 2228, -1000, 263, -1000, -1000, -1000, -1000, -1000, -1000,
	253, -1000, 47657, -1000, 1273, 124, -1000, 1933, -1000, -1000,
	-1000, -1000, -1000, 5195, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 11094, -1000, -1000, -1000, 2418,
	-1000, -1000, 11094, 2547, 2356, 2544, 2351, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 3465, -1000, 3378, 1537, 2541, 2539, 1535,
	2532, 2530, -1000, 11094, 2526, 3992, 971, 2345, 971, -1000,
	-1000, 399, 27849, 47657, 3401, -1000, 47657, 2342, -1000, -1000,
	2001, 627, 668, -1000, -1000, -1000, -1000, 903, 405, 2525,
	1260, -1000, -1000, -1000, -1000, 405, -1000, 2341, 267, -1000,
	-1000, -1000, -1000, 2340, 2338, 2063, -1000, -1000, 2064, 1059,
	279, -1000, -1000, -1000, -1000, -1000, -1000, 2191, 47657, 36515,
	2203, 1732, -338, -1000, 2764, -1000, 1693, 1693, 1693, 47657,
	1515, -1000, 1693, 1693, 2522, -1000, -1000, 2521, 2518, -113,
	798, 1707, 1690, -1000, 2062, 27230, 35896, 35277, 1397, -1000,
	1426, -1000, -1000, -1000, -1000, -1000, -1000, 3399, 798, -1000,
	562, 2056, 12960, 2763, 12960, 2755, 602, 2754, 1513, -1000,
	47657, -1000, -1000, 47657, 3808, 2752, -1000, 2746, 3065, 546,
	2745, 2742, 47657, 2330, -1000, 3192, 47657, 734, 3204, -1000,
	-1000, -1000, 402, -1000, -1000, 641, -1000, 47657, -1000, 47657,
	-1000, 1565, -1000, 25373, -1000, -1000, 1496, -1000, 2332, 2327,
	3992, -1000, -1000, 267, 2326, 6103, -1000, -1000, -1000, 2508,
	2321, 2191, 47657, -1000, 47657, 1162, 1162, 3465, 47657, 8600,
	-1000, -1000, 11094, 2735, -1000, 11094, -1000, -1000, -1000, -1000,
	-1000, 2734, 3233, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1814, -1000, 11094, 11094, -1000, -1000, 836, 14213, -242, 348,
	-1000, -1000, -1000, -212, 2320, -1000, -1000, 3375, 2319, 2224,
	47657, -1000, -1000, 1208, 1208, -210, -1000, -1000, 1168, -1000,
	-1000, 1077, 695, -1000, 2516, 2288, -1000, 2281, 137, -1000,
	137, -1000, 287, 11094, -1000, 2318, -1000, -1000, -1000, 2316,
	-1000, -1000, 2223, -1000, 2514, -1000, 2315, -1000, -1000, 47657,
	-1000, 847, 1046, 2309, -340, 2307, 2001, 2001, 47657, 50602,
	-121, -113, 17320, -121, -1000, -1000, 395, -1000, -1000, 375,
	-1000, -1000, 2030, 647, -1000, -1000, 2302, 588, -1000, 1162,
	-1000, 1731, 1954, 2279, 32801, 25373, 26611, 2299, -1000, -1000,
	34658, 1814, 1814, 50822, 346, 51107, -1000, 2732, 1063, 1671,
	-1000, 2037, -1000, 2032, -1000, 3399, 1397, 138, -1000, -1000,
	1588, -1000, 1063, 2479, 3373, -1000, 2815, 47657, 2651, 47657,
	2725, 1730, 12960, -1000, 788, 3126, -1000, -1000, 3808, -1000,
	-1000, 1929, 12960, -1000, -1000, 2298, 26611, 960, 1718, 1717,
	955, 2723, -1000, 661, 3443, -1000, -1000, -1000, 963, 2718,
	-1000, 1910, 1902, -1000, 47657, -1000, 32801, 32801, 576, 576,
	32801, 32801, 2705, 819, -1000, -1000, 12960, -1000, -1000, 1693,
	-1000, -1000, -1000, 1693, 1519, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2203, -1000, -1000, 1124, -1000, 3353, -1000, -1000,
	1933, 47657, 1933, 34039, -1000, 3372, 3370, -1000, 1933, 258,
	-1000, -302, 47657, 47657, -219, 2023, -1000, 2297, 216, -1000,
	-1000, 1118, -212, -221, 117, 25373, 1715, -1000, -1000, -1000,
	-1000, -1000, 2513, -1000, 1039, -1000, -1000, -1000, 1108, 2510,
	2509, -1000, -1000, -1000, -1000, 384, 47657, -1000, 2253, -1000,
	2296, 2295, 618, -100, -1000, -1000, 473, -1000, -1000, -1000,
	610, 2238, -1000, -1000, 374, -1000, -1000, -1000, 2191, 2294,
	-1000, -1000, 123, -1000, 1714, 1477, -1000, 2704, 11094, -1000,
	-1000, -1000, -1000, -1000, -1000, 785, -1000, 405, 51042, -1000,
	1047, 25992, -1000, 1077, 785, 516, 31563, 643, 315, -1000,
	2021, -1000, -1000, 3465, -1000, 628, -1000, 582, -1000, 1455,
	-1000, 1454, 33420, 2015, 2349, -1000, 50876, 905, -1000, -1000,
	3945, -1000, -1000, -1000, -1000, -1000, -1000, 2292, 2289, -1000,
	-1000, -1000, -1000, -1000, 2014, 2703, 67, 3313, 2287, -1000,
	-1000, 2701, 1445, 1436, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1434, 1412, 32801, -1000, -1000, 3945, 2013,
	25373, 1693, -1000, -1000, 1385, 1378, -1000, -1000, -1000, -1000,
	-1000, -285, -1000, -1000, -1000, 2700, -1000, -1000, 3368, -219,
	-223, 2285, 151, 234, -1000, 2280, -1000, -1000, 878, -205,
	163, 158, 153, -1000, -1000, -1000, 11094, -1000, -1000, 47657,
	846, 120, -1000, 1710, -1000, -1000, 2001, 47657, 656, -1000,
	-1000, -1000, -1000, 247, -1000, -1000, -1000, -1000, -1000, -1000,
	2279, 2271, -1000, 32801, 3250, 2197, 550, 3366, -1000, 51107,
	-1000, 1693, -1000, 550, 1362, -1000, 1693, 1693, -1000, 504,
	-1000, 1660, -1000, 1999, -1000, 3353, -1000, 494, -1000, 552,
	-1000, -1000, -1000, 1320, -1000, -1000, -1000, 50876, 563, -1000,
	770, 2699, -1000, -1000, 2423, 11094, 2696, 1693, 2286, -92,
	32801, 3064, 2977, 2820, 2773, 1301, -1000, -1000, 25373, -1000,
	-1000, 32182, -1000, 47657, 2224, -1000, -1000, 2264, -1000, 840,
	215, 234, -1000, 3364, 195, 3363, 3361, 1099, 1888, -1000,
	204, 178, 160, -1000, -1000, -1000, -1000, -1000, 380, -1000,
	2253, 2251, 2249, 590, -1000, 324, -1000, -1000, -1000, 319,
	-1000, -1000, 3250, -1000, 3360, 657, -1000, 25373, -1000, -1000,
	31563, 1814, 1814, -1000, -1000, 1980, -1000, -1000, -1000, -1000,
	1969, -1000, -1000, -1000, 1300, -1000, 47657, 961, 7978, -1000,
	2181, -1000, 47657, -1000, 3075, -1000, 278, 1284, 319, 576,
	319, 576, 319, 576, 319, 576, 322, -1000, -1000, -1000,
	1283, -1000, -1000, -1000, 2691, 1967, 202, 190, 3357, -1000,
	2224, 3355, 2224, 2224, -1000, 172, 878, -1000, -1000, -1000,
	47657, -1000, -1000, -1000, 2244, -1000, -1000, -1000, -1000, 1693,
	1693, 2243, 2241, 456, -1000, -1000, -1000, 30944, 569, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 563, 51107, -1000, 7978,
	1257, -1000, 1933, -1000, 819, -1000, -1000, 2891, 2733, 3431,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	47657, 3299, 24754, 199, -1000, -1000, -1000, 2240, -1000, 2224,
	-1000, -1000, 1675, -1000, -1000, -259, 1942, 1939, -1000, -1000,
	47657, -1000, 47657, 562, -1000, 51107, 1250, -1000, 7978, -1000,
	-1000, 3442, -1000, 3434, 952, 952, 319, 319, 319, 319,
	-1000, -1000, 47657, -1000, 1244, -1000, -1000, -1000, 1143, -1000,
	-1000, -1000, -1000, 2215, -1000, -1000, 2201, -1000, -1000, -1000,
	1240, 2479, -1000, -1000, -1000, -1000, -1000, 1998, 658, -1000,
	1080, -1000, 1639, -1000, 30325, 47657, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 47657, 7356, -1000, 1078, -1000, -1000, 1933,
	47657, -1000,
}

var yyPgo = [...]int{
	0, 183, 3478, 260, 181, 4044, 101, 263, 243, 229,
	262, 4043, 4042, 4041, 4039, 3236, 3218, 4038, 4037, 4032,
	4031, 4030, 4029, 4027, 4025, 4024, 4023, 4017, 4016, 4015,
	4013, 4012, 4011, 4010, 4009, 4008, 4006, 4005, 4003, 4002,
	4001, 4000, 3999, 3998, 3997, 3996, 3994, 261, 3993, 3992,
	3991, 3990, 3989, 3988, 3987, 3983, 3982, 3981, 3980, 3979,
	3978, 3977, 3975, 3974, 3973, 3972, 3971, 3970, 3968, 3967,
	3966, 3963, 3962, 3959, 3957, 3954, 3952, 3951, 3950, 256,
	3947, 3944, 219, 3943, 3192, 3942, 3941, 3939, 3938, 3936,
	3935, 3933, 245, 3929, 3928, 3927, 3926, 3924, 3922, 3921,
	3920, 3919, 3915, 3910, 3909, 224, 3908, 3904, 3902, 3900,
	246, 3899, 209, 3898, 176, 140, 3897, 3896, 3895, 3892,
	3890, 3889, 3887, 3882, 3881, 3880, 3879, 3878, 3877, 242,
	193, 71, 3875, 52, 3869, 3868, 226, 3866, 160, 3865,
	154, 3864, 3861, 3860, 3858, 3856, 3855, 3854, 3853, 3852,
	3851, 3850, 3848, 3847, 3846, 3845, 3844, 3843, 3842, 3837,
	3836, 3835, 3834, 3833, 51, 3830, 269, 3826, 75, 3823,
	179, 3819, 74, 3817, 89, 139, 258, 1685, 268, 264,
	196, 178, 122, 3800, 329, 3799, 210, 236, 168, 31,
	3797, 144, 3795, 270, 49, 35, 250, 147, 57, 189,
	127, 3794, 227, 104, 113, 3791, 3789, 152, 3788, 248,
	180, 3787, 106, 3785, 3782, 3779, 3778, 3776, 199, 195,
	3775, 3774, 137, 3772, 3771, 67, 129, 3770, 77, 132,
	173, 131, 3769, 2533, 118, 112, 3768, 135, 100, 3767,
	86, 3766, 3760, 3759, 3754, 186, 3753, 3751, 151, 76,
	3750, 3748, 3747, 72, 3746, 81, 3745, 40, 3744, 61,
	3742, 3741, 3740, 3738, 3736, 3735, 3734, 3733, 3732, 3730,
	3728, 3727, 59, 3724, 3717, 7, 11, 16, 3716, 27,
	3715, 174, 3713, 3710, 172, 3708, 3707, 97, 94, 3706,
	96, 170, 3705, 9, 29, 80, 3704, 3702, 230, 1176,
	105, 161, 3700, 279, 3699, 3698, 3696, 165, 3694, 622,
	3692, 3691, 3690, 3689, 3687, 3685, 102, 3684, 1, 225,
	45, 3683, 136, 142, 3682, 42, 32, 3681, 48, 114,
	208, 143, 98, 3679, 3677, 3676, 134, 220, 109, 28,
	0, 103, 228, 164, 3675, 3674, 3673, 273, 3672, 239,
	201, 238, 218, 276, 254, 3671, 3670, 64, 3668, 167,
	30, 54, 145, 78, 22, 252, 3667, 1405, 8, 190,
	3666, 204, 3665, 205, 13, 116, 156, 3664, 3663, 34,
	271, 3662, 3661, 3660, 133, 3658, 3657, 184, 79, 3656,
	3653, 3652, 3651, 38, 3650, 41, 18, 3649, 123, 3648,
	251, 3647, 206, 149, 185, 191, 166, 231, 237, 87,
	91, 3646, 1755, 155, 107, 17, 3644, 233, 3643, 194,
	125, 3642, 117, 3637, 255, 274, 213, 3636, 187, 10,
	50, 39, 25, 44, 12, 267, 207, 3635, 3634, 23,
	53, 3633, 55, 3632, 20, 3629, 3628, 43, 3627, 65,
	5, 3626, 3625, 19, 15, 3623, 37, 211, 175, 128,
	93, 66, 3622, 3621, 56, 153, 3620, 157, 163, 162,
	3618, 82, 3617, 3616, 3615, 3613, 295, 3612, 265, 3610,
	3609, 3606, 3603, 3597, 3594, 3593, 3592, 3590, 222, 3589,
	124, 47, 3585, 3584, 3581, 3579, 84, 148, 3578, 3574,
	3573, 3571, 33, 146, 3570, 14, 3568, 24, 21, 36,
	3567, 108, 3566, 3, 192, 3565, 3563, 4, 3562, 3561,
	2, 3560, 3559, 138, 3558, 99, 26, 171, 110, 3555,
	3554, 92, 221, 150, 3552, 3551, 95, 249, 203, 3549,
	141, 253, 266, 3547, 215, 3546, 3545, 3542, 3541, 3540,
	3539, 1160, 3535, 3534, 257, 83, 90, 3533, 235, 126,
	3532, 3531, 88, 169, 121, 120, 58, 85, 3529, 115,
	202, 3526, 200, 3525, 241, 3524, 3523, 111, 3521, 3520,
	3517, 3516, 197, 3515, 3514, 198, 234, 3509, 3508, 275,
	3507, 3506, 3505, 3502, 3501, 3498, 3490, 3488, 3483, 3482,
	259, 244, 3480,
}

//line mysql_sql.y:12474
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) allCDCOptionUnion() *tree.AllOrNotCDC {
	v, _ := st.union.(*tree.AllOrNotCDC)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) atTimeStampUnion() *tree.AtTimeStamp {
	v, _ := st.union.(*tree.AtTimeStamp)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() *tree.GroupByClause {
	v, _ := st.union.(*tree.GroupByClause)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) retentionOptionUnion() *tree.RetentionOption {
	v, _ := st.union.(*tree.RetentionOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) snapshotObjectUnion() tree.ObjectInfo {
	v, _ := st.union.(tree.ObjectInfo)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) upgrade_targetUnion() *tree.Target {
	v, _ := st.union.(*tree.Target)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 595, 598, 598, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 120,
	120, 331, 331, 332, 332, 122, 327, 327, 326, 326,
	123, 124, 125, 574, 574, 126, 127, 156, 573, 573,
	158, 158, 158, 158, 158, 447, 121, 121, 121, 121,
	121, 121, 121, 162, 162, 162, 162, 162, 119, 580,
	580, 580, 581, 581, 116, 145, 144, 147, 147, 146,
	146, 143, 143, 139, 142, 142, 141, 141, 140, 135,
	137, 137, 136, 138, 138, 117, 105, 118, 522, 522,
	521, 521, 520, 520, 472, 472, 473, 473, 318, 318,
	318, 519, 519, 519, 518, 518, 517, 517, 516, 516,
	514, 514, 515, 513, 512, 512, 512, 510, 510, 510,
	506, 506, 508, 507, 507, 509, 501, 501, 504, 504,
	502, 502, 502, 502, 505, 500, 500, 500, 499, 499,
	104, 104, 104, 414, 414, 103, 103, 428, 428, 428,
	428, 428, 426, 426, 426, 426, 426, 426, 425, 425,
	424, 424, 429, 429, 427, 427, 427, 427, 427, 427,
	427, 427, 427, 427, 427, 427, 427, 427, 427, 427,
	427, 427, 427, 427, 427, 427, 427, 427, 427, 427,
	427, 427, 427, 427, 427, 427, 427, 427, 427, 427,
	427, 427, 427, 427, 427, 427, 427, 427, 427, 427,
	427, 427, 427, 427, 427, 93, 93, 93, 93, 93,
	93, 98, 98, 98, 99, 586, 586, 585, 585, 587,
	587, 587, 587, 588, 588, 96, 96, 96, 97, 423,
	423, 423, 94, 95, 95, 413, 413, 418, 418, 417,
	417, 417, 417, 417, 417, 417, 417, 417, 417, 417,
	417, 417, 422, 422, 422, 420, 420, 419, 419, 421,
	421, 87, 87, 87, 90, 89, 412, 412, 412, 412,
	412, 412, 412, 412, 412, 88, 88, 88, 88, 88,
	88, 83, 83, 83, 83, 83, 82, 82, 84, 84,
	410, 410, 409, 100, 100, 101, 583, 583, 582, 584,
	584, 584, 584, 102, 108, 108, 108, 108, 108, 108,
	108, 108, 107, 107, 110, 110, 109, 111, 92, 92,
	92, 92, 92, 92, 91, 91, 91, 91, 91, 91,
	91, 91, 91, 91, 91, 91, 91, 547, 547, 547,
	549, 549, 345, 346, 599, 348, 344, 344, 344, 543,
	543, 544, 545, 546, 546, 546, 106, 14, 208, 208,
	446, 446, 11, 11, 11, 11, 11, 11, 11, 11,
	11, 13, 81, 86, 86, 86, 280, 280, 285, 285,
	161, 286, 286, 286, 291, 291, 292, 292, 281, 281,
	281, 281, 281, 281, 281, 281, 281, 281, 281, 281,
	281, 281, 281, 281, 281, 281, 281, 281, 281, 281,
	267, 267, 267, 262, 262, 262, 262, 263, 263, 264,
	264, 265, 265, 265, 265, 266, 266, 337, 337, 287,
	287, 287, 289, 289, 288, 284, 282, 282, 282, 282,
	282, 282, 282, 283, 283, 283, 283, 290, 290, 79,
	85, 85, 85, 85, 561, 561, 80, 572, 572, 476,
	476, 359, 359, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 482,
	483, 355, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 54, 57, 58, 160,
	53, 53, 53, 399, 399, 52, 600, 600, 330, 330,
	67, 66, 56, 68, 69, 70, 71, 72, 73, 51,
	65, 65, 65, 65, 65, 65, 65, 65, 76, 495,
	495, 602, 602, 602, 74, 75, 475, 475, 475, 64,
	63, 62, 61, 60, 60, 50, 50, 49, 49, 55,
	151, 59, 152, 152, 352, 352, 352, 354, 354, 350,
	601, 601, 442, 442, 353, 353, 48, 48, 48, 48,
	77, 351, 351, 329, 349, 349, 349, 12, 12, 10,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 26, 27, 29,
	407, 407, 404, 28, 20, 19, 19, 23, 22, 18,
	18, 21, 24, 25, 25, 9, 9, 9, 9, 15,
	15, 16, 181, 181, 234, 234, 555, 555, 551, 551,
	552, 552, 552, 553, 553, 554, 554, 112, 489, 489,
	489, 489, 489, 489, 8, 8, 203, 203, 488, 488,
	488, 488, 488, 488, 411, 411, 411, 532, 532, 532,
	533, 202, 202, 197, 197, 490, 490, 376, 534, 534,
	498, 498, 497, 497, 496, 496, 200, 200, 201, 201,
	184, 184, 130, 130, 503, 503, 503, 503, 511, 511,
	471, 471, 272, 272, 320, 320, 321, 321, 174, 174,
	175, 175, 175, 175, 175, 175, 589, 589, 590, 591,
	592, 592, 593, 593, 593, 594, 594, 594, 594, 594,
	540, 540, 542, 542, 541, 199, 199, 195, 195, 196,
	196, 196, 194, 194, 193, 192, 192, 191, 189, 189,
	189, 190, 190, 190, 207, 207, 177, 177, 177, 176,
	176, 176, 176, 176, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 303, 178, 178, 548, 548,
	548, 477, 477, 477, 485, 485, 300, 300, 301, 301,
	481, 481, 299, 299, 179, 179, 180, 180, 180, 180,
	298, 298, 297, 182, 182, 188, 187, 187, 183, 183,
	183, 183, 308, 308, 307, 307, 307, 307, 115, 128,
	128, 129, 206, 206, 306, 305, 305, 305, 305, 205,
	205, 204, 204, 198, 198, 186, 186, 186, 186, 304,
	185, 302, 579, 579, 578, 578, 577, 575, 575, 575,
	576, 576, 576, 576, 524, 524, 524, 524, 524, 338,
	338, 338, 343, 343, 341, 341, 341, 341, 341, 347,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 39, 217, 218, 40, 219, 219, 220, 220,
	221, 221, 222, 223, 224, 224, 224, 224, 38, 209,
	209, 210, 210, 211, 211, 212, 213, 213, 213, 216,
	214, 215, 215, 597, 597, 596, 37, 37, 30, 165,
	165, 166, 166, 166, 168, 168, 268, 268, 268, 167,
	167, 169, 169, 169, 556, 558, 558, 560, 559, 559,
	559, 562, 562, 562, 562, 562, 563, 563, 563, 563,
	564, 564, 31, 148, 148, 172, 172, 153, 567, 567,
	567, 566, 566, 568, 568, 569, 569, 324, 324, 325,
	325, 163, 164, 164, 155, 150, 171, 171, 171, 171,
	171, 173, 173, 236, 236, 149, 154, 157, 159, 557,
	565, 565, 565, 408, 408, 405, 406, 406, 403, 402,
	402, 402, 571, 571, 570, 570, 570, 339, 339, 32,
	398, 398, 400, 401, 401, 401, 392, 392, 392, 392,
	36, 396, 396, 397, 397, 397, 397, 397, 397, 397,
	393, 393, 395, 395, 391, 391, 391, 391, 391, 391,
	391, 35, 170, 170, 390, 390, 387, 387, 385, 385,
	386, 386, 384, 384, 384, 388, 388, 43, 78, 44,
	45, 46, 42, 389, 389, 34, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 132, 131, 131, 131, 131,
	131, 134, 134, 323, 323, 322, 322, 133, 269, 269,
	41, 247, 247, 463, 463, 458, 458, 458, 458, 458,
	479, 479, 479, 459, 459, 459, 460, 460, 460, 462,
	462, 462, 461, 461, 461, 461, 461, 478, 478, 480,
	480, 480, 430, 430, 431, 431, 431, 434, 434, 450,
	450, 451, 451, 449, 449, 456, 456, 455, 455, 454,
	454, 453, 453, 452, 452, 452, 452, 445, 445, 444,
	444, 432, 432, 432, 432, 432, 433, 433, 433, 443,
	443, 448, 448, 296, 296, 295, 295, 255, 255, 256,
	256, 294, 294, 253, 253, 254, 254, 254, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 530, 530, 531, 258, 258, 270,
	270, 270, 270, 270, 270, 257, 257, 259, 259, 235,
	235, 233, 233, 225, 225, 225, 225, 225, 226, 226,
	227, 227, 228, 228, 228, 232, 232, 231, 231, 231,
	231, 229, 229, 230, 230, 230, 230, 230, 230, 416,
	416, 527, 527, 528, 528, 523, 523, 523, 526, 526,
	526, 526, 526, 526, 526, 529, 529, 529, 525, 525,
	237, 317, 317, 317, 340, 340, 340, 340, 342, 316,
	316, 316, 252, 252, 251, 251, 249, 249, 249, 249,
	249, 249, 249, 249, 249, 249, 249, 249, 249, 249,
	249, 249, 249, 249, 249, 249, 249, 249, 415, 415,
	356, 356, 357, 357, 279, 278, 278, 278, 278, 278,
	276, 277, 275, 275, 275, 275, 275, 274, 274, 273,
	273, 273, 394, 394, 271, 271, 261, 261, 261, 260,
	260, 260, 457, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 365, 365, 365, 365,
	365, 365, 365, 365, 365, 365, 365, 365, 365, 365,
	365, 365, 365, 365, 365, 365, 365, 365, 365, 365,
	365, 365, 314, 314, 314, 315, 315, 315, 315, 315,
	315, 315, 315, 366, 366, 372, 372, 539, 539, 538,
	238, 238, 238, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 248, 248, 248, 439, 439, 439, 439, 440,
	440, 440, 440, 441, 441, 441, 437, 437, 438, 438,
	377, 378, 378, 486, 486, 487, 487, 435, 435, 436,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 494, 494, 494, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 550, 550, 550, 535, 535, 535, 536, 536, 536,
	536, 536, 536, 536, 536, 536, 536, 536, 536, 537,
	537, 537, 537, 537, 537, 537, 537, 537, 537, 537,
	537, 537, 537, 537, 537, 537, 312, 312, 312, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 379, 379, 380,
	380, 491, 491, 491, 491, 491, 491, 492, 492, 493,
	493, 493, 493, 484, 484, 484, 484, 484, 484, 484,
	484, 484, 484, 484, 484, 484, 484, 484, 484, 484,
	484, 484, 484, 484, 484, 484, 484, 484, 484, 484,
	484, 484, 364, 309, 309, 309, 381, 373, 373, 374,
	374, 375, 375, 367, 367, 367, 367, 367, 367, 368,
	368, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 369, 369, 371, 371, 383, 383, 383,
	382, 382, 382, 382, 382, 382, 382, 250, 250, 250,
	250, 361, 361, 361, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 240, 240, 240, 240,
	244, 244, 246, 246, 246, 246, 246, 246, 246, 246,
	246, 246, 246, 246, 246, 246, 245, 245, 245, 245,
	245, 243, 243, 243, 243, 243, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 113, 114, 114, 242, 319,
	319, 464, 464, 467, 467, 465, 465, 466, 468, 468,
	468, 469, 469, 469, 470, 470, 470, 474, 474, 328,
	328, 328, 336, 336, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 334, 334, 334, 334, 334, 334, 334, 334, 334,
	334, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 8,
	8, 0, 2, 0, 2, 11, 1, 3, 0, 3,
	4, 4, 4, 1, 2, 5, 6, 6, 1, 2,
	7, 9, 10, 10, 12, 1, 5, 6, 8, 10,
	9, 11, 13, 5, 7, 9, 8, 6, 4, 0,
	1, 1, 0, 1, 5, 2, 2, 6, 9, 6,
	9, 4, 7, 8, 0, 1, 1, 2, 4, 6,
	1, 2, 4, 0, 2, 10, 11, 2, 0, 2,
	1, 3, 3, 3, 0, 2, 0, 2, 1, 3,
	5, 0, 2, 3, 1, 3, 1, 1, 1, 3,
	1, 1, 1, 1, 0, 3, 3, 0, 3, 3,
	0, 1, 3, 0, 1, 3, 0, 2, 1, 2,
	3, 4, 3, 3, 1, 0, 1, 1, 0, 1,
	8, 5, 7, 0, 3, 8, 5, 1, 3, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 4, 1, 3, 1, 2, 2, 2, 2, 2,
	2, 2, 1, 2, 2, 2, 2, 1, 1, 2,
	2, 1, 1, 1, 1, 1, 2, 2, 2, 1,
	2, 1, 2, 2, 1, 2, 1, 1, 2, 2,
	1, 1, 1, 3, 2, 2, 2, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 4, 4, 5, 1, 3, 3, 1, 2,
	2, 2, 1, 2, 2, 3, 4, 4, 6, 1,
	1, 1, 2, 4, 6, 1, 4, 1, 3, 3,
	4, 4, 4, 4, 3, 3, 2, 4, 4, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 3, 1,
	3, 1, 1, 1, 2, 2, 0, 1, 4, 2,
	4, 1, 5, 3, 2, 1, 2, 2, 4, 4,
	5, 2, 1, 3, 4, 4, 1, 2, 9, 7,
	1, 3, 3, 1, 1, 3, 1, 3, 2, 1,
	2, 1, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 4, 2, 4, 3, 3, 1, 1,
	1, 1, 1, 1, 2, 3, 4, 7, 2, 3,
	3, 4, 5, 3, 4, 4, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 2, 1, 1, 1, 1, 6, 4, 1, 1,
	0, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 10, 7, 4, 4, 5, 1, 3, 1, 6,
	7, 3, 3, 3, 1, 1, 1, 3, 2, 4,
	5, 5, 6, 5, 5, 3, 2, 2, 1, 3,
	4, 3, 7, 5, 8, 2, 2, 1, 3, 2,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 0,
	1, 2, 1, 3, 2, 1, 2, 2, 1, 2,
	3, 2, 2, 3, 6, 3, 3, 1, 1, 7,
	7, 7, 8, 8, 0, 4, 7, 0, 3, 0,
	2, 0, 1, 1, 1, 1, 4, 2, 2, 3,
	3, 4, 5, 3, 4, 4, 2, 2, 2, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 3, 3, 3,
	2, 5, 5, 0, 2, 7, 0, 1, 0, 1,
	5, 5, 3, 3, 2, 4, 4, 4, 4, 4,
	1, 1, 1, 3, 3, 1, 1, 1, 6, 0,
	1, 1, 1, 1, 5, 5, 0, 1, 1, 3,
	3, 3, 4, 7, 7, 5, 4, 7, 8, 3,
	3, 2, 3, 4, 0, 2, 2, 0, 2, 2,
	1, 1, 1, 1, 0, 1, 5, 5, 6, 4,
	3, 1, 3, 1, 1, 3, 5, 2, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 4, 4,
	1, 3, 1, 4, 6, 6, 4, 4, 4, 4,
	4, 3, 6, 3, 5, 1, 1, 2, 2, 11,
	8, 9, 1, 3, 2, 4, 0, 2, 0, 1,
	1, 1, 1, 0, 1, 0, 1, 4, 2, 1,
	5, 4, 4, 2, 5, 5, 1, 3, 2, 1,
	5, 4, 4, 2, 0, 5, 4, 0, 1, 3,
	3, 1, 3, 1, 3, 1, 3, 4, 0, 1,
	0, 1, 1, 3, 1, 1, 0, 4, 1, 3,
	2, 1, 0, 8, 0, 4, 7, 4, 0, 2,
	0, 2, 0, 2, 0, 4, 1, 3, 1, 1,
	6, 4, 5, 7, 4, 5, 0, 1, 3, 8,
	0, 6, 0, 4, 6, 1, 1, 1, 1, 1,
	2, 3, 1, 3, 6, 0, 3, 0, 1, 2,
	4, 4, 0, 1, 3, 1, 3, 3, 0, 1,
	1, 0, 2, 2, 0, 2, 3, 3, 3, 1,
	3, 3, 3, 3, 1, 2, 2, 1, 2, 2,
	1, 2, 2, 1, 2, 2, 7, 7, 1, 1,
	1, 0, 1, 1, 1, 1, 0, 2, 0, 4,
	0, 2, 0, 2, 1, 3, 1, 2, 3, 5,
	0, 1, 2, 1, 3, 1, 1, 1, 4, 4,
	4, 3, 2, 2, 2, 3, 2, 3, 4, 1,
	3, 4, 0, 2, 1, 1, 2, 2, 2, 0,
	1, 2, 4, 1, 3, 1, 3, 2, 3, 1,
	4, 3, 0, 1, 1, 2, 5, 2, 2, 2,
	0, 2, 3, 3, 0, 1, 3, 1, 3, 0,
	1, 2, 1, 1, 0, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 7, 1, 1, 7, 1, 3, 0, 1,
	1, 3, 1, 3, 0, 1, 1, 1, 14, 1,
	3, 0, 1, 1, 3, 1, 1, 2, 4, 1,
	1, 1, 1, 0, 1, 2, 9, 9, 7, 1,
	2, 3, 3, 3, 0, 4, 1, 1, 1, 1,
	1, 0, 1, 1, 1, 1, 1, 4, 1, 1,
	1, 3, 3, 4, 3, 3, 0, 1, 1, 1,
	0, 2, 7, 8, 10, 2, 2, 8, 0, 3,
	3, 0, 3, 0, 3, 0, 5, 1, 3, 0,
	3, 3, 0, 2, 9, 8, 0, 2, 2, 3,
	3, 0, 2, 0, 2, 4, 4, 4, 4, 1,
	0, 2, 2, 1, 3, 2, 1, 3, 2, 1,
	3, 2, 0, 1, 3, 4, 3, 1, 1, 4,
	1, 3, 1, 1, 1, 1, 0, 1, 1, 1,
	11, 0, 2, 3, 3, 2, 2, 3, 1, 1,
	1, 3, 3, 4, 0, 2, 2, 2, 2, 2,
	2, 6, 0, 4, 1, 1, 0, 3, 0, 1,
	1, 2, 4, 4, 4, 0, 1, 8, 2, 4,
	4, 4, 9, 0, 2, 11, 9, 11, 8, 6,
	9, 7, 10, 7, 6, 2, 2, 9, 4, 5,
	3, 0, 4, 1, 3, 0, 3, 6, 0, 2,
	10, 0, 2, 0, 2, 0, 3, 2, 4, 3,
	0, 2, 1, 0, 2, 3, 0, 2, 3, 0,
	2, 1, 0, 3, 2, 4, 3, 0, 1, 0,
	1, 1, 0, 6, 0, 3, 5, 0, 4, 0,
	3, 1, 3, 4, 5, 0, 3, 1, 3, 2,
	3, 1, 2, 0, 4, 6, 5, 0, 2, 0,
	2, 4, 5, 4, 5, 1, 5, 6, 5, 0,
	3, 0, 1, 1, 3, 3, 3, 0, 4, 1,
	3, 3, 3, 0, 1, 1, 3, 2, 3, 3,
	3, 4, 4, 3, 3, 3, 3, 4, 4, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 5, 4, 5, 1, 3, 3, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 2, 4, 0, 5, 5, 5, 5, 0, 1,
	1, 3, 1, 1, 1, 1, 1, 7, 9, 7,
	9, 2, 1, 7, 9, 7, 9, 8, 5, 0,
	1, 0, 1, 1, 1, 1, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	3, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	3, 5, 0, 1, 1, 2, 1, 2, 2, 1,
	1, 2, 2, 2, 3, 3, 2, 2, 1, 5,
	6, 4, 1, 1, 1, 5, 4, 1, 1, 2,
	0, 1, 1, 2, 5, 0, 1, 1, 2, 2,
	3, 3, 1, 1, 2, 2, 2, 0, 1, 2,
	2, 2, 0, 3, 0, 3, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 1, 1, 1, 1, 3,
	5, 2, 2, 2, 2, 4, 1, 1, 2, 5,
	6, 8, 6, 6, 6, 1, 1, 1, 1, 1,
	1, 3, 4, 4, 4, 7, 9, 7, 7, 7,
	9, 7, 7, 0, 2, 0, 1, 1, 2, 4,
	1, 2, 2, 1, 2, 2, 1, 2, 2, 2,
	2, 2, 0, 1, 1, 1, 2, 2, 2, 2,
	2, 2, 2, 1, 1, 1, 2, 5, 0, 1,
	3, 0, 1, 0, 2, 0, 2, 0, 1, 6,
	8, 8, 6, 6, 5, 5, 5, 6, 6, 6,
	6, 5, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 1, 1, 1, 4, 4, 6, 8, 6,
	4, 5, 4, 4, 4, 3, 4, 6, 6, 7,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 8, 4,
	2, 3, 2, 4, 2, 2, 4, 6, 2, 2,
	4, 6, 4, 2, 4, 4, 4, 0, 1, 2,
	3, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 1, 1, 3, 0, 1, 1,
	3, 1, 3, 3, 3, 3, 3, 2, 1, 1,
	1, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	4, 1, 3, 4, 4, 5, 4, 5, 3, 4,
	5, 6, 1, 0, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 1, 1, 2, 3, 1, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 4, 4, 1, 2, 3, 5, 1, 1,
	3, 0, 1, 0, 3, 0, 3, 3, 0, 3,
	5, 0, 3, 5, 0, 1, 1, 0, 1, 1,
	2, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1,
}

var yyChk = [...]int{
	-1000, -595, -598, -2, -5, 626, -1, -4, -114, -87,
	-7, -14, -116, -117, -8, -112, -9, -10, -12, -91,
	-107, -109, -111, -110, -47, -11, -106, -82, -83, -93,
	-100, -103, -104, -105, -118, -113, -115, -174, -119, -120,
	-121, -162, -124, -126, -127, 616, -88, -89, -90, -33,
	-32, -31, -30, -148, -153, -156, -158, -122, 549, 622,
	452, 14, 501, -15, -16, -540, -17, 261, -344, -345,
	-346, -348, -599, -48, -49, -50, -60, -61, -62, -63,
	-64, -74, -75, -76, -51, -52, -53, -56, -54, -67,
	-66, -68, -69, -70, -71, -72, -73, -55, -59, -151,
	-152, -77, -57, -78, -58, -160, -123, -80, -79, -85,
	-81, -86, -150, -155, -13, -161, 236, -84, 76, -94,
	-95, -96, -97, -98, -99, -101, -102, 376, 382, 439,
	615, 61, -175, -177, 636, 637, 640, 536, 539, 160,
	161, 163, 164, -34, -35, -36, -37, -38, -39, -41,
	-40, -42, -43, -44, -45, -46, 232, 16, 544, -18,
	-21, -19, -22, -20, -28, -29, -27, -24, -26, -149,
	-25, -154, -23, -157, -159, -125, 256, 255, 38, 322,
	323, 324, 380, 254, 233, 235, 15, 31, 42, 355,
	-176, 83, 537, 234, -178, 13, 642, -6, -3, -2,
	-135, -139, -143, -146, -147, -144, -145, -4, -114, 118,
	246, 617, -340, 372, 618, 620, 619, 86, 94, -333,
	-335, 452, 261, 376, 382, 615, 637, 640, 536, 539,
	551, 552, 553, 554, 555, 556, 557, 558, 560, 561,
	562, 563, 564, 565, 566, 576, 577, 567, 568, 569,
	570, 571, 572, 573, 574, 578, 579, 580, 581, 582,
	583, 584, 585, 586, 587, 588, 589, 590, 591, 504,
	601, 602, 603, 604, 532, 559, 595, 596, 597, 598,
	353, 354, 541, 273, 297, 407, 303, 310, 160, 179,
	173, 202, 193, 537, 168, 277, 315, 278, 93, 163,
	487, 108, 464, 436, 166, 292, 294, 296, 533, 534,
	366, 299, 531, 298, 300, 302, 535, 279, 356, 189,
	184, 291, 275, 182, 280, 40, 281, 207, 282, 283,
	546, 460, 352, 466, 307, 52, 434, 183, 461, 295,
	463, 211, 215, 478, 479, 177, 178, 468, 481, 206,
	209, 210, 253, 349, 350, 43, 543, 265, 482, 213,
	205, 200, 490, 311, 309, 204, 176, 199, 276, 65,
	217, 216, 218, 430, 431, 432, 433, 284, 285, 370,
	477, 196, 185, 357, 169, 23, 485, 260, 465, 383,
	286, 304, 312, 212, 214, 267, 272, 545, 438, 271,
	308, 483, 181, 264, 293, 259, 486, 170, 385, 287,
	164, 301, 480, 489, 64, 398, 175, 167, 633, 250,
	161, 269, 274, 288, 289, 290, 530, 314, 313, 305,
	538, 197, 266, 203, 187, 174, 198, 162, 268, 488,
	399, 613, 355, 417, 195, 192, 270, 243, 484, 467,
	165, 421, 400, 190, 316, 608, 609, 610, 371, 348,
	317, 318, 188, 257, 458, 459, 321, 427, 339, 401,
	437, 408, 402, 224, 225, 325, 470, 472, 208, 611,
	328, 329, 330, 462, 331, 332, 333, 334, 375, 56,
	58, 95, 98, 97, 638, 639, 63, 29, 361, 364,
	396, 403, 341, 614, 542, 338, 342, 343, 365, 25,
	419, 387, 423, 422, 48, 49, 50, 53, 54, 55,
	57, 59, 60, 51, 529, 380, 393, 491, 45, 47,
	390, 27, 367, 418, 440, 337, 420, 451, 46, 449,
	450, 471, 26, 369, 368, 62, 44, 426, 428, 429,
	319, 335, 378, 623, 492, 373, 389, 392, 374, 340,
	363, 394, 67, 66, 386, 624, 381, 379, 336, 547,
	548, 344, 575, 358, 435, 526, 525, 524, 523, 522,
	521, 520, 519, 322, 323, 324, 404, 405, 406, 416,
	409, 410, 411, 412, 413, 414, 415, 454, 455, 625,
	473, 475, 476, 474, 238, 641, 359, 360, 241, 627,
	628, 96, 629, 631, 630, 28, 632, 635, -421, -419,
	-340, 537, 615, 382, 536, 539, 376, 355, 637, 640,
	380, 261, 322, 323, 324, 452, 353, -219, -340, 641,
	-184, 245, 39, -233, -340, -184, -84, -16, -15, -176,
	-177, -233, 240, -349, 24, 434, -92, 435, 236, 83,
	77, -340, -9, -105, -8, -112, -82, -174, 439, -347,
	-340, 322, 322, -347, 240, -342, 271, 415, -340, -476,
	246, -425, -398, 272, -424, -400, -427, -401, 32, 232,
	234, 233, 549, 268, 16, 380, 242, 14, 13, 381,
	254, 25, 26, 28, 15, 382, 384, 29, 385, 388,
	389, 390, 42, 393, 394, 261, 86, 94, 89, 279,
	-218, -340, -375, -367, 115, -370, -362, -363, -365, -318,
	-514, -360, 83, 142, 143, 150, 116, 643, -364, -457,
	36, 118, 555, 559, 595, 502, -310, -311, -312, -313,
	-314, -315, -340, -515, -513, 89, 99, 101, 105, 106,
	104, 102, 154, 186, 103, 90, 155, -177, 86, -535,
	565, -334, 588, 601, 602, 603, 604, 587, 61, -484,
	-493, 239, -491, 153, 191, 257, 187, 14, 148, 427,
	188, 596, 597, 598, 562, 584, 504, 566, 576, 591,
	557, 558, 560, 552, 553, 554, 556, 567, 569, 583,
	-494, 579, 589, 590, 575, 599, 600, 592, 593, 594,
	631, 88, 87, 582, 581, 568, 563, 564, 570, 551,
	561, 571, 572, 580, 585, 586, 364, 108, 365, 366,
	494, 356, 367, 246, 434, 70, 368, 369, 370, 371,
	372, 501, 373, 71, 374, 363, 261, 417, 375, 190,
	208, 506, 505, 507, 498, 495, 493, 496, 497, 499,
	500, 573, 574, 578, -128, -129, 606, -589, -303, -590,
	6, 7, 8, 9, -591, 155, -580, 436, 545, 89,
	315, 353, 17, 494, 634, 535, 634, 535, 165, 162,
	-412, 165, 114, 170, 169, -412, 634, 167, 633, 325,
	267, -389, -165, 353, 417, 331, 95, 271, -392, -390,
	533, -478, 319, 315, 291, 241, 111, -166, 251, 250,
	109, 494, 239, 391, 310, 56, 58, -551, -552, 229,
	230, 231, -542, 527, -541, -340, 634, 366, 97, 98,
	633, 27, 240, 377, 267, 472, 470, 471, 473, 474,
	475, 476, -65, -495, -475, 467, 466, -353, 459, 465,
	457, 469, 460, 354, 333, 549, 332, 232, 627, 534,
	528, -328, 401, 437, 491, 492, 378, 438, 478, 480,
	461, 108, 194, 191, 241, 243, 240, 633, 353, 494,
	417, 95, 331, 240, -551, 162, 478, 480, 436, 271,
	415, 41, -418, 427, -417, -419, 479, 490, 87, 88,
	477, -328, 108, 458, 458, -589, -303, -175, -177, -115,
	-540, 535, 634, 241, 353, 417, 271, 242, 240, 530,
	533, 243, 494, 239, 322, 377, 267, 331, 95, 167,
	633, -477, -548, 32, -485, 226, 227, 228, 33, 34,
	-1, 122, 642, -367, -367, -6, 645, -6, -367, -340,
	-340, 157, -240, -244, -241, -243, -242, -246, -245, 191,
	192, 153, 195, 201, 197, 198, 199, 200, 202, 203,
	204, 205, 206, 209, 210, 207, 31, 208, 257, 187,
	188, 189, 190, 211, 173, 193, 542, 219, 174, 220,
	175, 221, 176, 222, 177, 178, 223, 179, 182, 183,
	184, 185, 181, 156, -208, 89, 32, 83, 156, 89,
	-200, 263, -184, -233, -225, 156, 643, -200, -589, -193,
	-194, 11, -233, -316, -340, 436, 125, -92, 77, -92,
	435, 77, -543, -544, -545, -547, 236, 435, 434, -110,
	156, 279, 17, -347, -347, 81, -233, -400, 271, -425,
	-398, 36, 80, 157, 244, 157, 80, 83, 378, 353,
	417, 379, 494, 240, 391, 243, 271, 392, 353, 417,
	240, 243, 494, 271, 353, 240, 243, 417, 271, 392,
	353, 457, 458, 243, 27, 383, 386, 387, 458, -499,
	490, 157, 114, 111, 112, 113, -367, 132, -382, 125,
	126, 127, 128, 129, 130, 131, 139, 138, 149, 142,
	143, 144, 145, 146, 147, 148, 140, 141, 135, 115,
	133, 137, 134, 117, 152, -177, -367, -375, 61, -365,
	-365, -365, -365, -340, -457, -372, -367, 83, 83, 83,
	83, 156, 102, 89, -367, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, -492, 83, 83,
	-379, -380, 83, 83, -360, -316, 83, 89, 89, 83,
	83, 83, 89, 83, 83, 83, -380, -380, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, -194, 157, -193, 83, -193, -194, -178,
	-177, 32, 33, 32, 33, 32, 33, 32, 33, -592,
	624, 83, 99, 638, 224, 17, -340, 633, -340, 89,
	538, 89, 538, 483, 544, 168, 169, 170, -387, 246,
	-387, -387, -217, -340, -219, 377, 243, 530, 243, -166,
	-387, -387, -387, -387, -387, 242, -387, 24, 240, 240,
	240, 240, -387, 501, 125, 125, 59, -553, 172, 157,
	-542, -199, 83, 89, -352, 133, 137, -352, -299, 18,
	-299, 24, 269, 269, 269, -352, 309, -600, -601, 17,
	135, -350, -601, -350, -350, -352, -602, 242, 468, 43,
	270, 269, -195, -196, 22, -195, 462, 458, -442, 463,
	464, -354, -601, -353, -352, -352, -353, -352, -352, -352,
	32, 240, 243, 494, 331, 628, -600, -600, 31, 31,
	-476, -476, -233, -476, -476, 528, -329, -340, -476, -476,
	-476, -233, -554, 245, -586, -585, 481, -588, 483, 162,
	-419, 162, -419, 86, -400, 271, 271, 157, 125, 24,
	-420, 125, 136, -419, -419, -420, -420, -257, 41, -339,
	153, -340, 89, -257, 41, -583, -582, -233, -194, -178,
	-177, 84, 84, 84, 538, 89, -476, -476, -476, -476,
	-476, -478, -476, -476, -476, -476, -476, -347, -209, -340,
	-219, 246, -476, -476, -476, -476, -179, -180, 144, -367,
	-340, -179, -3, -137, -136, 119, 120, 122, 618, 372,
	617, 621, 615, -419, 41, -470, 399, 398, -464, -466,
	83, -465, 83, -465, -465, -465, -465, -465, 83, 83,
	-467, 83, -467, -467, -464, -468, 83, -468, -469, 83,
	-469, -468, -340, -446, 544, -373, -375, -340, 39, -488,
	61, -174, 83, 31, 83, -200, -340, 188, 167, 632,
	-489, 61, -174, 83, 31, -194, -130, 39, -196, 21,
	156, 99, 89, -110, -92, 77, -110, 84, 157, -546,
	105, 106, -549, 206, 197, -340, -108, 89, -7, -8,
	-9, -10, -47, -82, -79, -174, 233, 536, 539, -516,
	-514, 83, 32, 426, 80, 17, -426, 240, 494, 377,
	267, 243, 353, -424, -407, -404, -402, -339, -400, -403,
	-402, -429, -316, 458, -131, 441, 440, 321, -367, -367,
	-367, -367, -367, 104, 115, 348, 105, 106, -362, -383,
	32, 317, 318, -363, -363, -363, -363, -363, -363, -363,
	-363, -363, -363, -363, -363, -371, -381, -457, 83, 135,
	133, 137, 134, 117, -365, -365, -363, -363, -259, -339,
	153, 84, 157, -367, -539, -538, 119, -367, -367, -367,
	-367, -340, -536, -537, 508, 509, 510, 511, 512, 513,
	514, 515, 516, 517, 518, 368, 363, 369, 367, 356,
	375, 370, 371, 190, 525, 526, 519, 520, 521, 522,
	523, 524, -373, -373, -367, -536, -373, -309, 33, 32,
	-375, -375, -375, 84, -367, -550, 346, 345, 347, -197,
	-340, -373, 84, 84, 84, 99, -375, -375, -373, -363,
	-373, -373, -373, -373, -537, -309, -309, -309, -309, 144,
	-375, -375, -309, -309, -309, -309, 144, -309, -309, -309,
	-309, -309, -309, -309, -309, -309, -309, 84, 84, 84,
	144, -375, -195, -129, -497, -496, -367, 41, -130, -196,
	-593, 625, 83, -316, -581, 89, 89, 643, 167, 633,
	17, 494, -340, 17, 240, -574, 32, 538, 99, 538,
	99, 484, 485, 166, 169, 168, 89, 115, -340, -340,
	35, 83, -209, -387, -387, -387, -558, -340, 90, -408,
	-405, -402, -340, -340, -398, -340, -329, -233, -387, -387,
	-387, -387, -233, -268, 53, 54, 55, -402, -167, 56,
	57, -554, -541, 35, -198, -340, -574, -299, -365, -365,
	-367, -402, 271, -600, -352, -352, -330, -329, -354, -349,
	-354, -354, -299, -350, -352, -352, -367, -354, -350, -299,
	-340, 458, -299, -299, -442, -352, -351, -340, -351, -387,
	-329, -330, -330, -233, -233, -280, -285, -281, -286, 263,
	237, 361, 362, 235, 233, 11, 234, -293, 310, -388,
	502, -263, -264, 77, 42, -266, 261, 403, 396, 273,
	277, 93, 278, 436, 279, 242, 281, 282, 283, 298,
	300, 253, 284, 285, 286, 427, 287, 161, 299, 288,
	289, 290, 379, -258, 6, 334, 544, 41, 51, 52,
	450, 449, 547, 274, -340, -558, -556, 31, -340, 31,
	-408, -340, -340, 244, -187, -182, -186, -183, -188, -302,
	-304, -185, 83, -233, -177, -340, 157, 482, 484, 485,
	-586, -420, -586, -420, 244, 32, 426, -423, 426, 32,
	-398, -417, 478, 480, -413, 89, 427, -403, -422, 80,
	153, -496, -420, -420, -422, -422, 152, 157, -584, 483,
	484, 229, -195, 99, -574, -235, -233, -558, -407, -398,
	-340, -476, -235, -235, -235, -342, -342, 83, 156, 36,
	-340, -340, -340, -340, -298, 157, -297, 17, -341, -340,
	35, 89, 156, -298, -138, -136, 121, -367, -6, 617,
	-367, -6, -6, -367, -6, -367, -474, 400, 99, 99,
	-319, 89, -319, 99, 99, 99, 550, 84, 89, -411,
	80, -490, -376, -534, 606, -202, 84, -197, -532, -533,
	-197, -201, -340, -488, -225, 125, 125, 125, -490, -202,
	84, -532, -195, 607, -130, -192, -191, -367, -340, 24,
	-110, -92, -544, 156, 353, 157, -198, -426, -406, -403,
	-428, 144, -340, -414, 157, 544, 646, 87, 244, -571,
	-570, 418, 84, 157, -500, 245, 501, 89, 643, 434,
	224, 225, 104, 348, 105, 106, -457, -375, -371, -365,
	-365, -363, -363, -369, 258, -369, 114, -367, 644, -366,
	-538, 121, -367, 35, 157, 35, 157, 81, 156, 84,
	84, 17, 17, 84, -367, 84, 84, 84, 84, 17,
	17, -367, 84, 156, 84, 84, 84, 84, 81, 84,
	157, 84, 84, 84, 84, 157, -375, -375, -367, -375,
	84, 84, 84, -367, -367, -367, -375, 84, -367, -367,
	-367, -367, -367, -367, -367, -367, -367, -367, -436, 453,
	-436, -436, 157, 157, 157, 84, -130, 83, 99, 157,
	639, -323, -322, 89, -340, -340, 167, 633, -340, 89,
	633, -340, 89, 89, 167, 170, 170, 169, 89, 36,
	24, 308, 24, -218, -220, -221, -222, -223, -224, 135,
	158, 159, 83, -233, -233, -233, -560, 404, -572, 157,
	41, -570, 494, -163, 321, -391, 81, -170, 17, 544,
	-233, -233, -233, -233, -247, 35, 17, -181, -234, -340,
	83, 84, 157, -399, 81, -340, -330, -299, -299, -354,
	-299, -299, 157, 23, -352, -354, -354, -225, -350, -225,
	156, -225, -329, -463, 35, -199, 157, 21, 263, -232,
	-337, -229, -231, 248, -357, -230, 251, -528, 249, 247,
	109, 252, 306, 110, 242, -337, -337, 248, -267, 244,
	35, -337, -283, 242, 351, 306, 249, 21, 263, -282,
	242, 110, -340, 248, 252, 249, 247, -336, 125, -328,
	152, 244, 43, 379, -336, 548, 263, -336, -336, -336,
	-336, -336, -336, -336, 280, 280, -336, -336, -336, -336,
	-336, -336, -336, -336, -336, -336, -336, 162, -336, -336,
	-336, -336, -336, -336, 83, 326, 275, 276, 308, -561,
	404, 31, 359, 359, 360, -572, 31, -171, 353, -284,
	-351, 31, -305, -306, -307, -308, 68, 72, 74, 78,
	69, 70, 71, 75, 31, 157, -338, -343, 35, -340,
	89, -338, -177, -182, -187, -338, 83, -585, -587, 486,
	483, 489, -422, -422, 99, 244, 83, 125, -422, -422,
	41, -339, -582, 490, 484, -130, 157, 80, -235, -210,
	-211, -212, -213, -240, -316, 192, 195, 197, 198, 199,
	200, 202, 203, 204, 205, 206, 209, 210, 207, 208,
	257, 187, 188, 189, 190, 211, 173, 193, 542, 174,
	175, 176, 177, 178, 179, 182, 183, 184, 185, 181,
	-340, -219, -299, -180, -182, -340, 89, -340, 144, -299,
	122, -6, 120, -142, -141, -140, 123, 615, 621, 122,
	122, 122, 84, 84, 84, 157, 84, 84, 84, 157,
	84, 157, 99, -503, 463, 40, 157, 83, 84, 157,
	61, 157, 125, 84, 157, -367, -340, 89, -367, 84,
	61, -130, 89, 157, -189, 37, 38, 156, 436, -340,
	-514, 84, -428, 157, 244, 156, 156, -404, 382, -339,
	-406, 21, 544, -316, 39, -323, 125, 643, -340, 84,
	-369, -369, 114, -365, -362, 84, 122, -367, 120, -238,
	-240, 398, 399, -367, -238, -239, -245, 153, 191, 257,
	190, 189, 187, 398, 399, -257, -340, -367, -367, 84,
	-367, -367, 17, -340, -257, -363, -367, -194, -194, 84,
	84, -435, -436, -435, -435, 84, 84, 84, 84, -435,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	83, 99, 101, 99, 101, -496, -594, 63, 623, 62,
	426, 104, 311, 157, 99, 89, 644, 157, 125, 89,
	-340, -340, 17, 240, -340, 17, 89, 170, 89, -573,
	315, 353, -447, 99, 315, 353, 494, 390, 84, 157,
	-316, -210, -199, 83, -199, -563, 465, 406, 416, -336,
	-359, -358, 355, 42, -482, 427, 412, 413, -405, 271,
	-329, -569, 96, 125, 80, 338, 342, 343, 339, 340,
	341, -385, -386, -384, -388, -556, 83, 83, -174, 35,
	133, -170, 83, 83, 35, -458, 328, -240, -233, -181,
	-340, 17, 157, -555, 156, -1, -340, -398, -352, -299,
	-367, -367, -299, -352, -352, -354, -340, -225, -458, -240,
	35, -281, 237, 234, -432, 308, 309, -433, -448, 311,
	-450, 83, -237, -316, -230, -527, -528, -387, -340, 110,
	-527, 110, 83, -237, -316, -316, -284, -316, -340, -340,
	-340, -340, -289, -288, -316, -291, 32, -292, -340, -340,
	-340, -340, 110, -340, 110, -262, 41, 48, 49, 50,
	-336, -336, 194, -265, 41, 426, 428, 429, -291, 99,
	99, 99, 99, 89, 89, 89, -336, -336, 99, 89,
	-343, 89, -529, 169, 45, 46, 99, 99, 99, 99,
	41, 89, -270, 41, 291, 295, 292, 293, 294, 89,
	99, 41, 99, 41, 99, 41, -340, 83, -530, -531,
	89, 327, -447, -563, -336, 359, -419, 125, 125, -359,
	-568, 321, -173, 494, 32, -203, 237, 234, -556, -410,
	-409, -316, -186, -186, -186, -186, 68, 68, 68, 68,
	73, 68, 73, 68, -307, -410, -188, -199, -343, 84,
	-579, -578, -577, -575, 76, 245, 77, -373, 483, 487,
	488, -406, -355, 89, -413, -207, 24, -233, -233, -480,
	301, 302, 84, 157, -240, -301, 19, 156, -301, 118,
	-6, -138, -140, -367, -6, -367, 617, 372, 618, 89,
	99, 99, -511, 447, 442, 444, 110, -376, -498, -497,
	61, -174, -197, -490, -533, -496, -340, 644, 644, 644,
	644, 61, -174, -490, -207, -503, -191, -190, 44, -340,
	99, 17, -403, -398, 144, 144, -340, 383, -414, 89,
	405, 89, 240, 644, 89, -323, -362, -367, 84, -248,
	178, 177, -248, 35, 84, 84, -465, -465, -464, -467,
	-464, -248, -248, 84, 84, 24, 84, 84, 84, -367,
	84, 84, 157, -486, 503, -487, 577, -435, -435, -435,
	-435, -435, -435, -435, -435, -435, -435, -435, -435, -435,
	-435, -435, -435, -378, -377, 263, 448, 630, 630, 448,
	630, 630, 84, 157, -536, 157, -331, 316, -331, -322,
	89, 244, 89, 167, -340, 89, 633, 89, -340, 89,
	308, -340, -340, 89, 89, -222, -240, 84, 35, -226,
	-227, -228, -237, -229, -231, 35, -564, 93, -559, 89,
	-340, 90, -565, 93, 407, 155, 357, 41, 408, 409,
	424, 352, 99, 99, 414, -557, -340, -172, 240, 353,
	-567, 52, 125, 89, -233, -384, -328, 152, 282, 331,
	-296, -295, -340, 89, -226, -174, -233, -226, -226, -174,
	-459, 330, 21, 99, 143, -200, 81, 156, -182, -234,
	-340, 144, 84, -299, -225, -299, -299, -352, -459, -174,
	-444, 312, 83, -442, 83, -442, 110, 339, -451, -449,
	263, -287, 45, 47, -240, -525, -340, -523, -525, -340,
	-523, -523, -387, -367, -287, -237, 244, 31, 234, -290,
	336, 337, 342, -415, 307, 115, -415, 157, -189, 157,
	-340, -257, -257, 31, 89, 89, -235, 84, 157, 125,
	99, 89, -564, -559, 125, -420, 89, 89, -565, -569,
	125, -236, 240, -329, 157, -203, -203, -299, 157, 125,
	-205, -204, 80, 81, -206, 80, -204, 68, 68, -299,
	-577, -576, 24, -528, -528, -528, 84, 84, 15, -212,
	41, -300, 20, 21, 144, -300, 122, 120, 122, 122,
	-340, 84, 84, -471, 608, -507, -509, 442, 21, 21,
	15, 245, 84, -490, -490, -511, 45, 46, -398, -414,
	427, -233, 157, 644, -238, -367, 84, -367, 84, 89,
	84, 89, -194, 21, 84, 157, 84, 84, 84, 157,
	84, 84, -367, 84, -536, -332, 188, 89, -332, 353,
	-341, -340, 17, -340, 89, -447, 308, 308, 240, 238,
	-174, 84, 157, -174, 89, -562, 418, 89, 89, 99,
	41, 99, 155, 410, -483, -164, 93, -235, 32, -203,
	-566, 93, 125, 643, 83, -336, -336, -336, -340, 84,
	157, -336, -336, 84, 84, 84, -255, 544, -460, 262,
	99, 143, 99, 143, 99, -338, -182, -340, -299, -555,
	156, -299, -460, -434, 313, 99, -363, 83, -363, 83,
	-443, 310, 83, 84, 157, -340, -316, -252, -251, -249,
	104, 115, 41, 396, -250, 93, 152, 296, 299, 298,
	274, 297, -279, -356, 80, 402, 336, 337, -388, 608,
	532, 247, 109, 110, 384, -357, 83, 83, 81, 316,
	83, 83, -525, 84, -287, -316, 41, -290, 41, 349,
	307, -288, -340, 152, -257, 84, -531, 89, -536, -562,
	89, -422, -567, 89, -164, -235, -556, -194, -409, -496,
	-367, 83, -367, 83, 68, 11, 19, -360, -367, -375,
	246, -6, 618, 372, -272, 609, 89, 21, 89, -505,
	89, -410, -471, -133, -269, -328, 279, 84, 84, 84,
	-435, -435, -438, -437, -441, 448, 308, 456, -375, 89,
	89, 84, 84, 89, -340, 244, 167, 89, 643, 89,
	-447, -447, -340, -214, -240, -168, 544, -255, -228, -168,
	21, 544, 356, 41, 99, 41, 411, 89, -172, 125,
	105, 106, -324, -325, 89, -393, -395, -316, 83, -257,
	-259, 89, -295, -360, -360, -253, -174, 35, -254, -293,
	-388, 544, -132, -131, -253, 544, 83, -461, 161, 99,
	143, 99, 99, -299, -299, -461, -450, 21, 84, -429,
	84, -429, 83, 125, -363, -449, -452, 61, -249, 104,
	-363, 89, -259, -260, 41, 295, 291, 125, 125, -261,
	41, 275, 276, -271, 83, 306, 15, 194, 83, 110,
	110, -233, -393, -393, -526, 338, 339, 340, 344, 342,
	343, 341, -526, -393, -393, 83, -416, -415, -363, -336,
	-336, 152, -566, -195, -198, -524, -340, 247, 21, 21,
	-481, 544, -340, -340, -320, 610, 99, 89, 444, -272,
	-472, 611, -501, -442, -257, 125, 84, -440, 117, 410,
	414, -361, -364, 99, 101, 186, 155, 84, 84, 353,
	-340, -327, -326, 89, 89, 89, 308, 543, -169, 60,
	490, 89, 90, 405, 89, 90, 356, -164, 89, 644,
	157, 125, 84, 157, -464, -367, -430, 263, -174, 157,
	-293, -328, -133, -430, -256, -294, -340, 89, -479, 169,
	329, 544, 99, 143, 99, -194, -462, 169, 329, -433,
	84, 84, 84, -429, 99, 84, -456, -453, 83, -293,
	265, 135, 89, 89, 99, 83, -491, 31, 89, -394,
	83, 84, 84, 84, 84, -393, 99, -257, -336, 84,
	84, 157, 635, 83, 21, -320, -473, 612, 89, -510,
	447, -504, -502, 442, 443, 444, 445, 89, -439, -440,
	414, -361, -364, 606, 454, 454, 454, -340, 244, 644,
	157, 125, -447, -216, -340, 306, 427, -325, 89, -396,
	-395, -189, 84, -431, 315, 21, -293, -336, -431, 84,
	157, -336, -336, 329, 99, 143, 99, -195, 329, -445,
	314, 84, -456, -293, -455, -454, 313, 266, 83, 84,
	-367, -379, -336, 84, -274, -273, 540, -393, -396, 81,
	-396, 81, -396, 81, -396, 81, 84, -257, -340, 247,
	-321, -340, -505, 89, -512, 245, -508, -509, 446, -502,
	21, 444, 21, 21, -134, 157, 114, 455, 455, 455,
	353, -326, 89, 89, -215, 35, 449, 383, -397, 253,
	349, 350, 93, 544, 336, 337, -189, 21, -432, -257,
	-294, -360, -360, 99, 99, 84, 157, -340, 262, 83,
	-374, -368, -367, 262, 84, -340, -278, -276, -277, 80,
	461, 304, 305, 84, -526, -526, -526, -526, -279, 84,
	157, -519, 83, 99, -507, -506, -508, 21, -505, 21,
	-505, -505, 451, -439, -340, 89, -336, -336, 89, 89,
	335, -316, 83, -444, -454, -453, -374, 84, 157, -415,
	-277, 80, -276, 80, 16, 15, -396, -396, -396, -396,
	-340, -522, 31, 84, -518, -517, -317, -513, -340, 447,
	448, 89, -505, 125, -597, -596, 629, 99, 99, -340,
	-429, -434, 84, -368, -275, 301, 302, 31, 169, -275,
	-521, -520, -318, 84, 157, 156, 89, 89, 84, -450,
	104, 41, 303, 157, 125, -517, -340, -520, 41, -367,
	156, -340,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 0, 311, 312, 313, 930,
	931, 932, 933, 934, 935, 936, 937, 938, 0, 0,
	0, 0, 0, 685, 686, 0, 649, 0, 0, 0,
	0, 0, 0, 532, 533, 534, 535, 536, 537, 538,
	539, 540, 541, 542, 543, 544, 545, 546, 547, 548,
	549, 550, 551, 552, 553, 554, 555, 556, 557, 558,
	559, 560, 561, 562, 563, 564, 565, 412, 413, 414,
	415, 416, 417, 418, 419, 420, 0, 336, 332, 255,
	256, 257, 258, 259, 260, 343, 344, 509, 0, 0,
	0, 0, 768, -2, 99, 0, 0, 0, 0, 325,
	0, 316, 316, 939, 940, 941, 942, 943, 944, 945,
	946, 947, 948, 949, 950, 951, -2, 698, 0, 650,
	651, 652, 653, 654, 655, 656, 657, 658, 659, 660,
	661, 662, 663, 664, 665, 666, 396, 397, 398, 392,
	393, 395, 394, -2, 0, 0, 698, 0, 0, 0,
	776, 0, 0, 0, 819, 841, 23, 0, 7, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 0,
	0, 19, 0, 19, 0, 0, 0, 1354, 1355, 1356,
	1357, 2139, 2109, -2, 1880, 1857, 2033, 2034, 1934, 1945,
	2171, 2172, 2173, 2174, 2175, 2176, 2177, 2178, 2179, 2180,
	2181, 2182, 2183, 2184, 2185, 2186, 2187, 2188, 2189, 2190,
	2191, 2192, 2193, 2194, 2195, 2196, 2197, 2198, 2199, 2200,
	2201, 2202, 2203, 2204, 2205, 2206, 2207, 2208, 2209, 2210,
	2211, 2212, 2213, 2214, 2215, 2216, 2217, 2218, 2219, 2220,
	1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823,
	1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833,
	1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843,
	1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853,
	1854, 1855, 1856, 1858, 1859, 1860, 1861, 1862, 1863, 1864,
	1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873, 1874,
	1875, 1876, 1877, 1878, 1879, 1881, 1882, 1883, 1884, 1885,
	1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895,
	1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905,
	1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915,
	1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925,
	1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1935, 1936,
	1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1947, 1948,
	1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958,
	1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968,
	1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978,
	1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988,
	1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
	1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
	2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018,
	2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028,
	2029, 2030, 2031, 2032, 2035, 2036, 2037, 2038, 2039, 2040,
	2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050,
	2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060,
	2061, 2062, 2063, 2064, 2065, -2, 2067, 2068, 2069, 2070,
	2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080,
	2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090,
	2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100,
	2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108, 2110, 2111,
	2112, 2113, 2114, 2115, 2116, 2117, 2118, 2119, 2120, 2121,
	2122, 2123, 2124, -2, -2, -2, 2128, 2129, 2130, 2131,
	2132, 2133, 2134, 2135, 2136, 2137, 2138, 2140, 2141, 2142,
	2143, 2144, 2145, 2146, 2147, 2148, 2149, 2150, 2151, 2152,
	2153, 2154, 2155, 2156, 2157, 2158, 2159, 2160, 0, 309,
	307, 1827, 1857, 1880, 1934, 1945, 1946, 1981, 2033, 2034,
	2066, 2109, 2125, 2126, 2127, 2139, 0, 0, 956, 0,
	746, 0, 0, 751, 1303, 746, 337, 687, 688, 776,
	802, 647, 0, 374, 0, 1871, 378, 2116, 0, 0,
	0, 644, 368, 369, 370, 371, 372, 373, 0, 0,
	929, 0, 0, 364, 0, 331, 1936, 2138, 1358, 0,
	0, 0, 0, 0, 198, 1080, 200, 1082, 204, 212,
	0, 0, 0, 217, 218, 221, 222, 223, 224, 225,
	0, 229, 0, 231, 234, 0, 236, 237, 0, 240,
	241, 242, 0, 252, 253, 254, 1083, 1084, 1085, -2,
	127, 954, 1785, 1671, 0, 1678, 1691, 1702, 1435, 1436,
	1437, 1438, 0, 0, 0, 0, 0, 0, 1446, 1447,
	0, 1475, 2175, 2216, 2217, 0, 1455, 1456, 1457, 1458,
	1459, 1460, 138, 150, 151, 1724, 1725, 1726, 1727, 1728,
	1729, 1730, 0, 1732, 1733, 1734, 1642, 1422, 1354, 0,
	2184, 0, 2206, 2211, 2212, 2213, 2214, 2205, 0, 0,
	1627, 0, 1617, 0, 0, -2, -2, 0, 0, 2006,
	-2, 2218, 2219, 2220, 2181, 2202, 2210, 2185, 2186, 2209,
	2177, 2178, 2179, 2172, 2173, 2174, 2176, 2188, 2190, 2201,
	0, 2197, 2207, 2208, 2114, 0, 0, 0, 0, 0,
	2156, 152, 153, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	1638, -2, -2, 1641, -2, 1644, -2, -2, -2, -2,
	1649, 1650, -2, 1652, -2, -2, -2, -2, -2, -2,
	-2, 1629, 1630, 1631, 1632, 1621, 1622, 1623, 1624, 1625,
	1626, -2, -2, -2, 802, 879, 0, 802, 0, 777,
	824, 827, 830, 833, 780, 0, 0, 100, 101, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 326, 327,
	315, 317, 0, 321, 0, 314, 1116, 1116, 1116, 0,
	0, 0, 0, 1116, 1116, 1116, 1116, 1116, 0, 1116,
	0, 0, 0, 0, 0, 1116, 0, 989, 1087, 1088,
	1089, 1114, 1115, 1188, 0, 0, 0, 703, 699, 700,
	701, 702, 790, 0, 792, 795, 0, 624, 624, 852,
	852, 570, 0, 0, 0, 624, 0, 584, 576, 0,
	0, 0, 624, 0, 0, 797, 797, 0, 627, 634,
	624, 624, -2, 624, 624, 621, 624, 0, 0, 1128,
	590, 591, 592, 576, 576, 595, 596, 597, 607, 608,
	635, 1809, 0, 0, 509, 509, 0, 509, 509, 0,
	509, 509, 509, 0, 705, 1976, 1878, 1951, 1837, 1936,
	2138, 0, 282, 2006, 287, 0, 1879, 1898, 0, 0,
	1916, 0, -2, 0, 353, 802, 0, 0, 776, 0,
	0, 0, 0, 509, 509, 509, 509, 509, 1187, 509,
	509, 509, 509, 509, 0, 0, 0, 509, 509, 509,
	509, 0, 0, 842, 843, 838, 839, 840, 844, 845,
	5, 6, 19, 0, 0, 0, 0, 0, 0, 106,
	105, 0, 1786, 1804, 1737, 1738, 1739, 1791, 1741, 1795,
	1795, 1795, 1795, 1770, 1771, 1772, 1773, 1774, 1775, 1776,
	1777, 1778, 1779, 1795, 1795, 0, 0, 1784, 1761, 1793,
	1793, 1793, 1791, 1788, 1742, 1743, 1744, 1745, 1746, 1747,
	1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755, 1798, 1798,
	1801, 1801, 1798, 0, 410, 408, 409, 1667, 0, 0,
	0, 0, 746, 750, 1301, 0, 0, 0, 802, -2,
	0, 0, 648, 375, 1359, 0, 0, 379, 0, 380,
	0, 0, 0, 399, 0, 402, 387, 388, 389, 383,
	0, 178, 0, 366, 367, 0, 0, 333, 0, 0,
	0, 510, 0, 0, 0, 0, 0, 0, 209, 205,
	213, 216, 226, 233, 0, 245, 247, 250, 206, 214,
	219, 220, 227, 248, 207, 210, 211, 215, 249, 251,
	208, 228, 232, 246, 230, 235, 238, 239, 244, 0,
	179, 0, 0, 0, 0, 0, 1677, 0, 0, 1710,
	1711, 1712, 1713, 1714, 1715, 1716, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, -2, 1671, 0, 0, 1441,
	1442, 1443, 1444, 0, 1448, 0, 1476, 0, 0, 0,
	0, 0, 1731, 1735, 0, 1667, 1667, 0, 1667, 1663,
	0, 0, 0, 0, 0, 0, 1667, 1600, 0, 0,
	1602, 1618, 0, 0, 1604, 1605, 0, 1608, 1609, 1667,
	0, 1667, 1613, 1667, 1667, 1667, 1596, 1597, 0, 1663,
	1663, 1663, 1663, 0, 0, 1663, 1663, 1663, 1663, 1663,
	1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663, 0,
	0, 0, 0, 797, 0, 803, 0, -2, 0, 821,
	823, 825, 826, 828, 829, 831, 832, 834, 835, 782,
	0, 0, 102, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 319, 0, 324, 0, 0,
	0, 0, 0, 953, 0, 0, 1116, 1116, 1116, 990,
	0, 0, 0, 0, 0, 0, 0, 0, 1116, 1116,
	1116, 1116, 0, 1134, 0, 0, 0, 705, 704, 0,
	791, 0, 0, 0, 852, 0, 0, 567, 568, 0,
	569, 0, 576, 624, 624, 582, 583, 578, 577, 630,
	631, 627, 0, 627, 627, 852, 0, 601, 602, 603,
	624, 624, 609, 798, 0, 610, 611, 627, 0, 632,
	633, 852, 0, 0, 852, 852, 0, 619, 620, 622,
	624, 0, 0, 1116, 0, 640, 578, 578, 1810, 1811,
	0, 0, 1125, 0, 0, 0, 0, 643, 0, 0,
	0, 0, 0, 706, 261, 265, 0, 268, 0, 1976,
	0, 1976, 0, 0, 275, 0, 0, 0, 0, 0,
	0, 305, 306, 0, 0, 0, 0, 296, 299, 1295,
	1296, 1077, 1078, 300, 301, 345, 346, 0, 797, 820,
	822, 816, 817, 818, 0, 0, 0, 0, 0, 0,
	0, 509, 0, 0, 0, 0, 0, 681, 0, 969,
	683, 0, 0, 0, 0, 0, 860, 854, 856, 924,
	138, 860, 8, 123, 120, 0, 19, 0, 0, 19,
	19, 0, 19, 310, 0, 1807, 1805, 1806, 1740, 1792,
	0, 1766, 0, 1767, 1768, 1769, 1780, 1781, 0, 0,
	1762, 0, 1763, 1764, 1765, 1756, 0, 1757, 1758, 0,
	1759, 1760, 308, 407, 0, 0, 1668, 957, 0, 724,
	738, 719, 0, 727, 0, 0, 1303, 0, 0, 0,
	707, 738, 709, 0, 727, 797, 774, 0, 752, 0,
	0, 376, 0, 384, 381, 0, 385, 0, 0, 401,
	403, 404, 405, 390, 391, 645, 362, 363, 354, 355,
	356, 357, 358, 359, 360, 361, 0, 0, 0, 365,
	148, 0, 334, 335, 0, 0, 0, 192, 193, 194,
	195, 196, 197, 199, 183, 670, 672, 1069, 1081, 0,
	1072, 0, 202, 243, 175, 0, 0, 0, 1672, 1673,
	1674, 1675, 1676, 1681, 0, 1683, 1685, 1687, 1689, 0,
	1707, -2, -2, 1423, 1424, 1425, 1426, 1427, 1428, 1429,
	1430, 1431, 1432, 1433, 1434, 1692, 1705, 1706, 0, 0,
	0, 0, 0, 0, 1703, 1703, 1698, 0, 1461, 1297,
	1298, 1439, 0, 0, 1473, 1477, 0, 0, 0, 0,
	0, 139, 1662, 1567, 1568, 1569, 1570, 1571, 1572, 1573,
	1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583,
	1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593,
	1594, 1595, 0, 0, 1671, 0, 0, 0, 1664, 1665,
	0, 0, 0, 1555, 0, 0, 1561, 1562, 1563, 0,
	733, 0, 1628, 1601, 1619, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 878, 880, 0, 742, 744, 745, 771, 752,
	778, 0, 0, 0, 98, 103, 0, 1155, 0, 0,
	0, 0, 0, 0, 0, 71, 73, 0, 1129, 0,
	1131, 328, 329, 0, 0, 323, 0, 0, 0, 0,
	0, -2, 0, 0, 0, 0, 0, 1005, 1006, 507,
	1063, 0, 0, 0, 1079, 1104, 1112, 0, 0, 0,
	0, 0, 1161, 991, 996, 997, 998, 992, 993, 999,
	1000, 0, 793, 0, 0, 893, 70, 566, 625, 626,
	853, 573, 1936, 578, 852, 852, 585, 579, 586, 629,
	587, 588, 589, 627, 852, 852, 799, 624, 627, 612,
	628, 627, 1303, 616, 0, 623, 1303, 641, 1303, 0,
	639, 593, 594, 1163, 795, 423, 424, 426, 428, 0,
	477, 477, 477, 460, 477, 0, 0, 448, 1812, 0,
	0, 0, 0, 457, 1812, 0, 0, 1812, 1812, 1812,
	1812, 1812, 1812, 1812, 0, 0, 1812, 1812, 1812, 1812,
	1812, 1812, 1812, 1812, 1812, 1812, 1812, 0, 1812, 1812,
	1812, 1812, 1812, 1280, 1812, 0, 476, 1126, 467, 468,
	469, 470, 475, 0, 0, 504, 0, 0, 1004, 0,
	507, 0, 1046, 0, 865, 0, 866, 867, 863, 895,
	919, 919, 0, 919, 899, 1303, 0, 0, 273, 274,
	262, 0, 263, 0, 0, 276, 277, 0, 279, 280,
	281, 288, 1878, 1951, 283, 285, 0, 0, 289, 302,
	303, 304, 0, 0, 294, 295, 0, 0, 348, 349,
	351, 0, 752, 1130, 72, 667, 1299, 668, 669, 673,
	0, 0, 676, 677, 678, 679, 680, 971, 0, 0,
	1055, 1056, 1057, 1058, 852, 0, 861, 0, 857, 925,
	0, 927, 0, 852, 0, 121, 19, 0, 114, 111,
	0, 0, 0, 0, 0, 1787, 1736, 1808, 0, 0,
	0, 1789, 0, 0, 0, 0, 0, 104, 754, 714,
	0, 718, 735, 0, 739, 0, 0, 731, 723, 728,
	0, 0, 748, 715, 1302, 0, 0, 0, 708, 0,
	0, 713, 752, 0, 775, 804, 805, 808, 1360, 0,
	386, 382, 400, 0, 509, 0, 0, 0, 186, 1066,
	0, 187, 191, 181, 0, 0, 0, 1071, 0, 1068,
	1073, 0, 201, 0, 0, 176, 177, 1146, 1155, 0,
	0, 0, 1682, 1684, 1686, 1688, 1690, 0, 1693, 1703,
	1703, 1699, 0, 1694, 0, 1696, 0, 1672, 1445, 0,
	1478, 0, 0, 0, 0, 0, 0, 0, 0, 1545,
	1546, 0, 0, 1550, 0, 1552, 1553, 1554, 1556, 0,
	0, 0, 1560, 0, 1599, 1620, 1603, 1606, 0, 1610,
	0, 1612, 1614, 1615, 1616, 0, 802, 802, 0, 0,
	1517, 1517, 1517, 0, 0, 0, 0, 1517, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1462, 0,
	1463, 1464, 0, 0, 0, 881, 772, 0, 0, 0,
	0, 0, 1153, 0, 86, 0, 0, 0, 0, 93,
	0, 0, 74, 75, 330, 318, 320, 0, 0, 1117,
	0, 0, 0, 0, 0, 959, 960, 962, 0, 965,
	966, 967, 971, 795, 0, 795, 1016, 1812, 511, 0,
	0, 1065, 0, 1035, 0, 0, 0, -2, 0, 0,
	1112, 0, 0, 0, 1165, 0, 0, 0, 692, 696,
	23, 796, 0, 571, 0, 572, 624, 580, 581, 852,
	604, 605, 0, 0, 852, 624, 624, 615, 627, 636,
	0, 637, 1303, 1165, 0, 0, 1125, 1231, 1199, 438,
	0, 1315, 1316, 478, 0, 1322, 1331, 1116, 1392, 0,
	1331, 0, 0, 1333, 1334, 0, 0, 0, 0, 461,
	462, 0, 447, 0, 0, 0, 0, 0, 0, 446,
	0, 0, 488, 0, 0, 0, 0, 0, 1813, 1812,
	1812, 0, 455, 456, 0, 459, 0, 0, 0, 0,
	0, 0, 0, 0, 1812, 1812, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1271, 0, 0,
	0, 0, 0, 0, 0, 0, 1287, 1288, 0, 1016,
	1812, 0, 0, 0, 0, 511, 1033, 1051, 0, 425,
	485, 0, 0, 0, 0, 0, 885, 0, 0, 0,
	884, 0, 0, 0, 0, 0, 795, 920, 0, 922,
	923, 897, -2, 0, 865, 902, 1667, 266, 267, 0,
	0, 272, 290, 292, 264, 0, 0, 0, 291, 293,
	297, 298, 347, 350, 352, 814, 0, 0, 1189, 0,
	972, 973, 975, 976, 0, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 1862, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	970, 684, 848, 855, 862, 926, 928, 139, 858, 848,
	0, 124, 19, 123, 115, 116, 0, 19, 0, 0,
	0, 0, 1797, 1796, 1782, 0, 1783, 1794, 1799, 0,
	1802, 0, 411, 758, 0, 0, 738, 740, 0, 0,
	738, 0, 0, 747, 0, 0, 0, 0, 0, 0,
	738, 814, 754, 0, 811, 809, 810, 0, 0, 646,
	149, 406, 0, 0, 0, 0, 0, 671, 0, 1070,
	183, 0, 0, 203, 0, 0, 0, 1155, 1150, 1666,
	1695, 1697, 0, 1704, 1700, 1440, 1449, 1474, 0, 0,
	1480, 1492, 1492, 0, 0, 0, 1483, 1795, 1795, 1486,
	1791, 1793, 1791, 1492, 1492, 0, 140, 0, 0, 1551,
	0, 0, 0, 734, 0, 0, 0, 1513, 1515, 1517,
	1517, 1524, 1518, 1525, 1526, 1517, 1517, 1517, 1517, 1531,
	1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517,
	1511, 0, 0, 1725, 1726, 743, 0, 0, 785, 786,
	787, 788, 789, 0, 0, 61, 61, 1155, 0, 97,
	87, 0, 0, 0, 0, 0, 76, 322, 0, 77,
	78, 0, 0, 85, 0, 0, 0, 0, 0, 964,
	0, 0, 0, 1308, 0, 1020, 1017, 1018, 1019, 0,
	1060, 512, 513, 514, 515, 0, 0, 0, 1064, 0,
	0, 1028, 0, 0, 0, 1105, 1106, 1107, 1108, 1109,
	1110, 1111, -2, 1120, 0, 0, 0, 1308, 1139, 0,
	0, 1144, 1308, 1308, 0, 1173, 0, 1162, 746, 0,
	-2, 0, 0, 694, 0, 0, 894, 574, 852, 598,
	800, 801, 1303, 852, 852, 624, 642, 638, 1173, 1164,
	0, 427, 477, 0, 1219, 0, 0, 1225, 0, 1232,
	431, 0, 479, 0, 1321, 1348, 1332, 1348, 1393, 1348,
	1348, 1116, 0, 479, 0, 0, 449, 0, 0, 0,
	0, 0, 445, 482, 808, 432, 434, 435, 436, 486,
	487, 489, 0, 491, 492, 451, 463, 464, 465, 466,
	0, 0, 0, 458, 471, 472, 473, 474, 433, 1248,
	1249, 1250, 1253, 1254, 1255, 1256, 0, 0, 1259, 1260,
	1261, 1262, 1263, 1345, 1346, 1347, 1264, 1265, 1266, 1267,
	1268, 1269, 1270, 1289, 1290, 1291, 1292, 1293, 1294, 1272,
	1273, 1274, 1275, 1276, 1277, 1278, 1279, 0, 0, 1284,
	0, 0, 0, 1020, 0, 0, 0, 0, 0, 1060,
	1035, 0, 1053, 0, 1047, 1048, 0, 0, 716, 852,
	340, 0, 889, 882, 0, 871, 886, 887, 888, 874,
	0, 876, 0, 872, 873, 852, 864, 896, 921, 898,
	901, 903, 904, 910, 0, 0, 0, 0, 269, 270,
	271, 278, 0, 531, 284, 770, 0, 1300, 674, 675,
	1190, 1191, 682, 0, 977, 846, 0, 0, 846, 119,
	122, 0, 117, 0, 0, 0, 0, 109, 107, 1790,
	0, 0, 760, 163, 0, 0, 0, 736, 0, 741,
	738, 722, 732, 721, 729, 730, 749, 1304, 1305, 1306,
	1307, 738, 712, 711, 773, 758, 806, 807, 0, 1361,
	377, 0, 1067, 183, 188, 189, 190, 184, 182, 1074,
	0, 1076, 0, 1148, 0, 0, 1701, 1479, 1450, 1481,
	1493, 1494, 1482, 0, 1452, 1453, 1484, 1485, 1487, 1488,
	1489, 1490, 1491, 1454, 1547, 0, 1549, 1557, 1558, 0,
	1607, 1611, 0, 0, 0, 0, 0, 1522, 1523, 1527,
	1528, 1529, 1530, 1532, 1533, 1534, 1535, 1536, 1537, 1538,
	1539, 1540, 1541, 802, 1512, 0, 0, 0, 0, 0,
	0, 0, 783, 0, 0, 0, 63, 0, 63, 1154,
	1156, 0, 924, 0, 0, 94, 0, 0, 79, 80,
	0, 0, 0, 952, 955, 961, 963, 0, 0, 0,
	1309, 1310, 1312, 1313, 1314, 0, 988, 0, 0, 1008,
	1009, 1010, 1022, 0, 0, 0, 517, 518, 0, 0,
	0, 530, 526, 527, 528, 508, 1059, 1042, 0, 0,
	1031, 0, 0, 1041, 0, 1121, 1812, 1812, 1812, 0,
	0, 1233, 1812, 1812, 0, 1141, 1143, 0, 0, 1237,
	1176, 0, 0, 1167, 0, 919, 0, 0, 852, 693,
	696, 697, 794, 575, 613, 617, 614, 852, 1176, 422,
	1197, 0, 0, 0, 0, 0, 1229, 0, 0, 1201,
	0, 450, 480, 0, -2, 0, 1349, 0, 1335, 1349,
	0, 0, 1348, 0, 439, 479, 0, 0, 0, 493,
	497, 498, 0, 495, 1388, 0, 496, 0, 484, 0,
	490, 1251, 1252, 0, 1257, 1258, 0, 1282, 0, 0,
	0, 430, 499, 0, 0, 0, 500, 501, 506, 1028,
	0, 1042, 0, 1052, 0, 1049, 1050, 802, 0, 0,
	868, 890, 0, 0, 869, 0, 870, 875, 877, 339,
	905, 0, 0, 907, 908, 909, 900, 286, 815, 974,
	0, 836, 0, 0, 859, 837, 0, 19, 0, 0,
	112, 1800, 1803, 762, 0, 759, 164, 0, 0, 0,
	0, 726, 737, 720, 710, 760, 812, 813, 185, 180,
	1075, 1158, 0, 1149, 0, 0, 1559, 0, 1517, 1514,
	1517, 1516, 1508, 0, 1465, 0, 1467, 1468, 1469, 0,
	1471, 1472, 0, 781, 0, 59, 0, 62, 60, 0,
	96, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	994, 1237, 0, 994, 1021, 1007, 0, 1061, 1062, 0,
	519, 520, 0, 523, 529, 1023, 0, 0, 1025, 1026,
	1027, 0, 0, 1039, 0, 0, 0, 0, 1113, 1127,
	0, 0, 0, -2, 0, -2, 1138, 0, 1182, 0,
	1174, 0, 1166, 0, 1169, 852, 852, -2, 690, 695,
	0, 618, 1182, 1199, 0, 1220, 0, 0, 0, 0,
	0, 0, 0, 1200, 0, 1213, 481, 1350, -2, 1364,
	1366, 0, 1126, 1369, 1370, 0, 0, 0, 0, 0,
	0, 1414, 1378, 0, 0, 1382, 1383, 1384, 0, 0,
	1387, 0, 1719, 1720, 0, 1391, 0, 0, 0, 0,
	0, 0, 0, 1329, 440, 441, 0, 443, 444, 1812,
	1389, 483, 437, 1812, 453, 1281, 1285, 1286, 1283, 505,
	502, 503, 1031, 1034, 1045, 1054, 717, 797, 341, 342,
	891, 0, 883, 914, 911, 0, 0, 978, 847, 850,
	113, 118, 0, 0, 764, 0, 761, 0, 755, 757,
	174, 725, 762, 134, 166, 0, 0, 1451, 1548, 1598,
	1520, 1521, 0, 1509, 0, 1503, 1504, 1505, 1510, 0,
	0, 784, 779, 64, 90, 0, 0, 95, 68, 81,
	0, 0, 0, 0, 980, 987, 1001, 1132, 1311, 986,
	0, 0, 516, 521, 0, 524, 525, 1043, 1042, 0,
	1029, 1030, 0, 1037, 0, 0, 1100, 1791, 0, 1122,
	1123, 1124, 1234, 1235, 1236, 1192, 1140, 0, -2, 1245,
	0, 0, 1136, 1158, 1192, 0, 0, 1170, 0, 1177,
	0, 1175, 1168, 802, 691, 1179, 429, 1231, 1221, 0,
	1223, 0, 0, 0, 0, 1202, -2, 0, 1365, 1367,
	1368, 1371, 1372, 1373, 1419, 1420, 1421, 0, 0, 1376,
	1416, 1417, 1418, 1377, 0, 0, 0, 0, 0, 1717,
	1718, 1412, 0, 0, 1336, 1338, 1339, 1340, 1341, 1342,
	1343, 1344, 1337, 0, 0, 0, 1328, 1330, 442, 0,
	0, 1812, 1044, 338, 0, 0, 915, 917, 912, 913,
	849, 0, 108, 110, 125, 0, 763, 165, 0, 764,
	136, 0, 157, 0, 1159, 0, 1519, 1506, 0, 0,
	0, 0, 0, 1721, 1722, 1723, 0, 1466, 1470, 0,
	89, 0, 66, 0, 82, 83, 0, 0, 0, 1002,
	1003, 1011, 1012, 0, 1014, 1015, 522, 1024, 1032, 1036,
	1039, 0, 1091, 0, 808, 0, 1194, 0, 1142, 1125,
	1247, 1812, 1145, 1194, 0, 1239, 1812, 1812, 1160, 0,
	1172, 0, 1184, 0, 1178, 797, 421, 0, 1181, 1217,
	1222, 1224, 1226, 0, 1230, 1228, 1203, -2, 0, 1211,
	0, 0, 1374, 1375, 0, 0, 1617, 1812, 0, 1407,
	0, 1091, 1091, 1091, 1091, 0, 494, 452, 0, 892,
	906, 0, 851, 0, 0, 753, 126, 0, 135, 154,
	0, 167, 168, 0, 0, 0, 0, 1151, 0, 1495,
	0, 0, 0, 1499, 1500, 1501, 1502, 91, 0, 65,
	68, 0, 0, 0, 979, 0, 1013, 1038, 1040, 1090,
	1101, 1102, 808, 1135, 0, 1231, 1246, 0, 1137, 1238,
	0, 0, 0, 1171, 1183, 0, 1186, 689, 1180, 1198,
	0, 1227, 1204, 1212, 0, 1207, 0, 0, 0, 1415,
	0, 1381, 0, 1386, 1395, 1408, 0, 0, 1317, 0,
	1319, 0, 1323, 0, 1325, 0, 0, 454, 916, 918,
	0, 766, 756, 137, 141, 0, 163, 160, 0, 169,
	0, 0, 0, 0, 1147, 0, 0, 1496, 1497, 1498,
	0, 67, 69, 84, 0, 981, 982, 995, 1092, 1812,
	1812, 0, 0, 0, 1098, 1099, 1103, 0, 1219, 1251,
	1240, 1241, 1242, 1185, 1218, 1206, 0, -2, 1214, 0,
	0, 1669, 1679, 1680, 1379, 1385, 1394, 1396, 1397, 0,
	1409, 1410, 1411, 1413, 1091, 1091, 1091, 1091, 1327, 765,
	0, 128, 0, 0, 158, 159, 161, 0, 170, 0,
	172, 173, 0, 1507, 92, 983, 0, 0, 1095, 1096,
	0, 1195, 0, 1197, 1208, -2, 0, 1216, 0, 1380,
	1398, 0, 1399, 0, 0, 0, 1318, 1320, 1324, 1326,
	767, 1157, 0, 142, 0, 144, 146, 147, 1351, 155,
	156, 162, 171, 0, 968, 984, 0, 1093, 1094, 1097,
	0, 1199, 1215, 1670, 1400, 1402, 1403, 0, 0, 1401,
	129, 130, 0, 143, 0, 0, 1152, 985, 1196, 1193,
	1404, 1406, 1405, 0, 0, 145, 1352, 131, 132, 133,
	0, 1353,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 116, 3, 3, 3, 147, 139, 3,
	83, 84, 144, 142, 157, 143, 156, 145, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 645, 642,
	126, 125, 127, 3, 646, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 149, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 643, 138, 644, 150,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 85, 86, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 117, 118, 119, 120, 121, 122, 123, 124,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	140, 141, 146, 148, 151, 152, 153, 154, 155, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 57956, 631, 57957, 632, 57958, 633, 57959, 634,
	57960, 635, 57961, 636, 57962, 637, 57963, 638, 57964, 639,
	57965, 640, 57966, 641, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:828
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:835
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:841
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:849
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:855
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:859
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:874
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:878
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:884
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:889
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:893
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:926
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:940
		{
			var timestamp = yyDollar[2].str
			var isS3 = false
			var dir = yyDollar[4].str
			var parallelism = yyDollar[6].str
			var option []string
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:951
		{
			var timestamp = yyDollar[2].str
			var isS3 = true
			var dir string
			var parallelism string
			var option = yyDollar[5].strsUnion()
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:963
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:967
		{
			yyVAL.str = yyDollar[2].str
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:972
		{
			yyVAL.str = ""
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:976
		{
			yyVAL.str = yyDollar[2].str
		}
	case 65:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:982
		{
			yyLOCAL = &tree.CreateCDC{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				TaskName:    yyDollar[4].str,
				SourceUri:   yyDollar[5].str,
				SinkType:    yyDollar[6].str,
				SinkUri:     yyDollar[7].str,
				Tables:      yyDollar[8].str,
				Option:      yyDollar[10].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:996
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1000
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1004
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1008
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1015
		{
			yyLOCAL = &tree.ShowCDC{
				SourceUri: yyDollar[3].str,
				Option:    yyDollar[4].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1024
		{
			yyLOCAL = &tree.PauseCDC{
				SourceUri: yyDollar[3].str,
				Option:    yyDollar[4].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1033
		{
			yyLOCAL = tree.NewDropCDC(yyDollar[3].str, yyDollar[4].allCDCOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1039
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      true,
				TaskName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1046
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      false,
				TaskName: yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1055
		{
			yyLOCAL = &tree.ResumeCDC{
				SourceUri: yyDollar[3].str,
				TaskName:  yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1064
		{
			yyLOCAL = &tree.RestartCDC{
				SourceUri: yyDollar[3].str,
				TaskName:  yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1073
		{
			yyLOCAL = &tree.CreateSnapShot{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Object:      yyDollar[6].snapshotObjectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1083
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELCLUSTER,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1093
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1105
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				PitrValue:   yyDollar[6].int64ValUnion(),
				PitrUnit:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1115
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELCLUSTER,
				PitrValue:   yyDollar[8].int64ValUnion(),
				PitrUnit:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1125
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				AccountName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:   yyDollar[9].int64ValUnion(),
				PitrUnit:    yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1136
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:    yyDollar[9].int64ValUnion(),
				PitrUnit:     yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-12 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1147
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[9].cstrUnion().Compare()),
				PitrValue:    yyDollar[11].int64ValUnion(),
				PitrUnit:     yyDollar[12].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1161
		{
			yyLOCAL = yyDollar[1].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1169
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELCLUSTER,
				SnapShotName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}

		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1177
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELACCOUNT,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[6].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1185
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELDATABASE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1194
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELTABLE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[10].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1204
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELACCOUNT,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[9].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1213
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELDATABASE,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName:  tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[11].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-13 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1223
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELTABLE,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName:  tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:     tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[10].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[13].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1236
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELACCOUNT,
				Name:      tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				TimeStamp: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1244
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1253
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				TimeStamp:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1263
		{
			yyLOCAL = &tree.RestorePitr{
				Level:          tree.RESTORELEVELACCOUNT,
				AccountName:    tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:           tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:      yyDollar[7].str,
				SrcAccountName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1273
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELCLUSTER,
				Name:      tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TimeStamp: yyDollar[6].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1283
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1303
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1309
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1316
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1324
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1330
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1339
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1349
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1357
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1365
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1373
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1383
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1391
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1401
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1408
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1417
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1427
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1431
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1437
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1441
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1447
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1456
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1466
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1470
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1476
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1485
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1489
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1495
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1516
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
			yyLOCAL.(*tree.Load).Param.Strict = yyDollar[11].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1530
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1537
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1541
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1547
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1551
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1557
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1564
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1572
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1576
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error strict flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1588
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1592
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1606
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1610
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1615
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1622
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1626
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1630
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1636
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1645
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1656
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1660
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1666
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1670
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1676
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1680
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1686
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1710
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            goto ret1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1729
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1733
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1737
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1742
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1746
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1755
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1765
		{
			yyVAL.str = ""
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1772
		{
			yyVAL.str = yyDollar[3].str
		}
	case 163:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1777
		{
			yyVAL.str = "\n"
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1784
		{
			yyVAL.str = yyDollar[3].str
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1789
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1793
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1821
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1825
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1831
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1839
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1859
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1878
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1903
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1907
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1911
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1916
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1920
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1926
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1939
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1950
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1963
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1967
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1977
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1990
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2003
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2009
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2015
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2023
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  dbName,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2033
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2043
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2047
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2051
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2055
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2059
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2063
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2070
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2074
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2080
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2087
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2096
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2100
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2106
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2110
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2114
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2118
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2122
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPGRADE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2126
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2130
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2134
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2138
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2142
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2146
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2150
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2154
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2158
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2162
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2166
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2170
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2174
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2178
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2182
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2186
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2190
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2194
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2198
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2202
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2206
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2210
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2214
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2218
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2222
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2226
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2230
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2234
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2238
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2242
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2246
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2250
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2254
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2258
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2262
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2266
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2270
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2274
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2278
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2282
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2286
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2290
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2294
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2298
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2302
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2306
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2320
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2327
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2334
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 264:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2343
		{
			var connID uint32
			switch v := yyDollar[5].item.(type) {
			case uint64:
				connID = uint32(v)
			case int64:
				connID = uint32(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.SetConnectionID{
				ConnectionID: connID,
			}
		}
		yyVAL.union = yyLOCAL
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2361
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2365
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2371
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2378
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2386
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2390
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2394
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2398
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2404
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2408
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2414
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2421
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2428
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2437
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2467
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2471
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2475
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2481
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2487
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2491
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2498
		{
			yyVAL.str = yyDollar[3].str
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2504
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2508
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2514
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2522
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2531
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2540
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2548
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2556
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2579
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2602
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2609
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2616
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2624
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2631
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2638
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2647
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2651
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2655
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2661
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2665
		{
			yyVAL.str = yyDollar[1].str
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2671
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2675
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2681
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2685
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2696
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2702
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2707
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2711
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2715
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2719
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 320:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2723
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2727
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2731
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2735
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2739
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2745
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2749
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2753
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2757
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2762
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2767
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2773
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2786
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2799
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 334:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2812
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2825
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2841
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2848
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2859
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].joinTableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2870
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2874
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2880
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2890
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2896
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2900
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:2906
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2912
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2916
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2920
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2924
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2930
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2943
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 362:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2949
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 363:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2953
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2959
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 365:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2963
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2969
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2975
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2986
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2992
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2996
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3000
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3004
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3008
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3012
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3020
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3028
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3038
		{
			if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3050
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 384:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3054
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 385:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3062
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 386:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3070
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3109
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3113
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:3119
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3125
		{
			yyVAL.str = yyDollar[1].str
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3130
		{
			yyVAL.str = "true"
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3131
		{
			yyVAL.str = "false"
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3132
		{
			yyVAL.str = yyDollar[1].str
		}
	case 406:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3137
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 407:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3143
		{
			yyLOCAL = &tree.UpgradeStatement{
				Target: yyDollar[3].upgrade_targetUnion(),
				Retry:  yyDollar[4].int64ValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3152
		{
			yyLOCAL = &tree.Target{
				AccountName:  yyDollar[1].str,
				IsALLAccount: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3159
		{
			yyLOCAL = &tree.Target{
				AccountName:  "",
				IsALLAccount: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 410:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3167
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3171
		{
			res := yyDollar[3].item.(int64)
			if res <= 0 {
				yylex.Error("retry value can not less than 0")
				yyLOCAL = -1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 421:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3195
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 422:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3218
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 423:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3228
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 424:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3235
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 425:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3242
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			opt := tree.AlterTableOption(yyDollar[5].alterTableOptionUnion())
			alterTable.Options = []tree.AlterTableOption{opt}
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3252
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3256
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3262
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3266
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()

			partitionDef := tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)

			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 430:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3290
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var pitrValue = yyDollar[6].int64ValUnion()
			var pitrUnit = yyDollar[7].str
			yyLOCAL = tree.NewAlterPitr(ifExists, name, pitrValue, pitrUnit)
		}
		yyVAL.union = yyLOCAL
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3300
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3310
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3326
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3344
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3348
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3354
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3358
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3364
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 439:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3370
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3378
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 441:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3388
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3396
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3406
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3416
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3426
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3433
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3437
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3441
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3445
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3449
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3456
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3462
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3466
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3470
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3474
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3478
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3482
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3486
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3490
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3495
		{
			yyVAL.str = ""
		}
	case 477:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3526
		{
			yyVAL.str = ""
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3530
		{
			yyVAL.str = string("COLUMN")
		}
	case 479:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3535
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3541
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3547
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3555
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3559
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3565
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3573
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterOptionTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3580
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3586
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3592
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3598
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3604
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3611
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3618
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3626
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 494:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3632
		{
			val := int64(yyDollar[6].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = val
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3644
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3650
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3658
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3662
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 499:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3669
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 500:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3687
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 501:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3702
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.UNIQUE_CHECK_ON_AUTOINCR,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 502:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3717
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 503:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3732
		{
			assignments := []*tree.VarAssignmentExpr{
				{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 504:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3745
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 505:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3751
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].exprUnion(),
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 506:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3762
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 507:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3775
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 508:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3779
		{
			var UserName = yyDollar[3].str
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 509:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3787
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3791
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 511:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3796
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3800
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3816
		{
			yyLOCAL = tree.NewUserMiscOptionAccountUnlock()
		}
		yyVAL.union = yyLOCAL
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3820
		{
			yyLOCAL = tree.NewUserMiscOptionAccountLock()
		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3824
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNone()
		}
		yyVAL.union = yyLOCAL
	case 516:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3828
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireInterval(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3835
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNever()
		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3839
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireDefault()
		}
		yyVAL.union = yyLOCAL
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3843
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryDefault()
		}
		yyVAL.union = yyLOCAL
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3847
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 521:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3854
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalDefault()
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3858
		{
			var Value = yyDollar[4].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3865
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentNone()
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3869
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentDefault()
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3873
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentOptional()
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3877
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionFailedLoginAttempts(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3884
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3891
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeUnbounded()
		}
		yyVAL.union = yyLOCAL
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:3897
		{
			yyVAL.item = nil
		}
	case 530:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3902
		{
			yyVAL.item = nil
		}
	case 566:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3947
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3956
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3964
		{
			yyLOCAL = &tree.ShowSnapShots{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3972
		{
			yyLOCAL = &tree.ShowPitr{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3980
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 571:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3984
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 572:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3988
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{
				{UserName: yyDollar[5].cstrUnion().Compare()},
			}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 573:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3999
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 574:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4003
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 575:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4009
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 576:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4014
		{
		}
	case 578:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4018
		{
		}
	case 580:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4023
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 581:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4033
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4043
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4051
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4057
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 585:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4063
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 586:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4069
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 587:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4075
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 588:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4081
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 589:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4087
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4096
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4100
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4104
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4108
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4112
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4116
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4120
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4124
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 598:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4130
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 599:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4139
		{
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4141
		{
		}
	case 604:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4150
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4160
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4169
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4173
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4177
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4183
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4189
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4195
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4201
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4210
		{
			yyLOCAL = &tree.ShowTables{
				Open:     false,
				Full:     yyDollar[2].fullOptUnion(),
				DBName:   yyDollar[4].str,
				Like:     yyDollar[5].comparisionExprUnion(),
				Where:    yyDollar[6].whereUnion(),
				AtTsExpr: yyDollar[7].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4221
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4233
		{
			yyLOCAL = &tree.ShowDatabases{
				Like:     yyDollar[3].comparisionExprUnion(),
				Where:    yyDollar[4].whereUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4241
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4247
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4259
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4273
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4279
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4285
		{
			yyLOCAL = &tree.ShowAccountUpgrade{}
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4292
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4296
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 624:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4301
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4305
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4309
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4314
		{
			yyVAL.str = ""
		}
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4318
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 629:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4324
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 634:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4339
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4343
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 636:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4349
		{
			yyLOCAL = &tree.ShowCreateTable{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 637:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4357
		{
			yyLOCAL = &tree.ShowCreateView{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 638:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4364
		{
			yyLOCAL = &tree.ShowCreateDatabase{
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Name:        yyDollar[5].str,
				AtTsExpr:    yyDollar[6].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 639:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4372
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4378
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4384
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 642:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4389
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4397
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4403
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 645:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4408
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4414
		{
			yyLOCAL = tree.NewUnresolvedObjectName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4420
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4424
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 667:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4452
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 668:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4460
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 669:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4468
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4476
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 671:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4480
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:4486
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption *tree.AccountIdentified
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 673:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4499
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4507
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 675:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4516
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 676:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4522
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 677:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4530
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 678:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4538
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 679:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4546
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4552
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 681:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4560
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 682:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4566
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4574
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4580
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 687:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4590
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 688:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4595
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4602
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 690:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4618
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 691:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4631
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4642
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 693:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4646
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 694:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4652
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 695:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4658
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 696:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4667
		{
		}
	case 697:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4669
		{
		}
	case 698:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4672
		{
		}
	case 703:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4681
		{
		}
	case 705:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4685
		{
		}
	case 707:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4690
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4699
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4706
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4712
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4720
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4727
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4734
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4754
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4762
		{
			ins := yyDollar[5].insertUnion()
			ins.Table = yyDollar[3].tableExprUnion()
			ins.PartitionNames = yyDollar[4].identifierListUnion()
			ins.OnDuplicateUpdate = []*tree.UpdateExpr{nil}
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4772
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4776
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4782
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4789
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4795
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 721:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4803
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4810
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4817
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4836
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4840
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4844
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4849
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4853
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4857
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:4863
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4872
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4876
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4882
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 734:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4886
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4892
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4896
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 737:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4902
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4907
		{
		}
	case 740:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4911
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4918
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4922
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4929
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4934
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4938
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4944
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4948
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4954
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4958
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4963
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4967
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4980
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4991
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5002
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5024
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5047
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5055
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5064
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5068
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5081
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5085
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5090
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5094
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5101
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5106
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5113
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5119
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5123
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5127
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5131
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5135
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5139
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 776:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5144
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5148
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5154
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:5164
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5179
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5183
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5197
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5201
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5207
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5216
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5220
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5224
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5228
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5232
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5238
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5245
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5254
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5258
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:5264
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5272
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5276
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5281
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5285
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5291
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5295
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5299
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5304
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5308
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5314
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5320
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5324
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:5330
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5335
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5339
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5343
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5348
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5352
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5356
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5361
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5365
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5373
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5377
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5381
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5395
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5399
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5409
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5419
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5429
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5441
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5449
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5457
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5466
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5474
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5482
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5490
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5498
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5506
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5514
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5522
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5530
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5540
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 837:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5551
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5565
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5569
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5573
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 841:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5578
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5582
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5586
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5595
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5599
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5604
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5608
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprs: yyDollar[3].exprsUnion(),
				RollUp:       yyDollar[4].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5616
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5620
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5625
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5629
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5635
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 855:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5639
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5645
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5649
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5653
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5657
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion(), yyDollar[3].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5662
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix, nil)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5670
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5676
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5684
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 864:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5692
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].joinTableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5702
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 868:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5708
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 869:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5717
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 870:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5726
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 871:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5735
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 872:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5745
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 873:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5749
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 874:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5759
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 875:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5763
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 876:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5767
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 877:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5771
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 878:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5777
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5787
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 880:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5791
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 881:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5797
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 882:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5803
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 883:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5807
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5813
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5819
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 886:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5823
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 887:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5827
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 888:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5831
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS_L2
		}
	case 889:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5837
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5841
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 891:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5847
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 892:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5851
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5857
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 894:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5861
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5867
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 896:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5871
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 897:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5881
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 898:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5894
		{
			yyLOCAL = yyDollar[2].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:5900
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 900:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5906
		{
			name := tree.NewUnresolvedName(yyDollar[1].cstrUnion())
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:     tree.FuncName2ResolvableFunctionReference(name),
					FuncName: yyDollar[1].cstrUnion(),
					Exprs:    yyDollar[3].exprsUnion(),
					Type:     tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 901:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:5920
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 902:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5931
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5938
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 905:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5942
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:5948
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5958
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5962
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 909:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5966
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 910:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5971
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 911:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5975
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 912:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5979
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 913:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5983
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 914:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5988
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 915:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5992
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 916:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5996
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 917:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6000
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 918:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6004
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 919:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6009
		{
			yyVAL.str = ""
		}
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6013
		{
			yyVAL.str = yyDollar[1].str
		}
	case 921:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6017
		{
			yyVAL.str = yyDollar[2].str
		}
	case 922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6023
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 923:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6027
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].str)
		}
	case 924:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6032
		{
			yyLOCAL = tree.NewCStr("", 1)
		}
		yyVAL.union = yyLOCAL
	case 925:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6036
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 926:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6040
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 927:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6044
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 928:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6048
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 929:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6054
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 952:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6096
		{
			var Language = yyDollar[3].str
			var Name = tree.Identifier(yyDollar[5].str)
			var Filename = tree.Identifier(yyDollar[7].str)
			yyLOCAL = tree.NewCreateExtension(
				Language,
				Name,
				Filename,
			)
		}
		yyVAL.union = yyLOCAL
	case 953:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6109
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 954:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6115
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 955:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6121
		{
			var Name = yyDollar[3].procNameUnion()
			var Args = yyDollar[5].procArgsUnion()
			var Body = yyDollar[7].str
			yyLOCAL = tree.NewCreateProcedure(
				Name,
				Args,
				Body,
			)
		}
		yyVAL.union = yyLOCAL
	case 956:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6134
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 957:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6139
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 958:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6146
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 960:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6153
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 961:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6157
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:6163
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 963:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:6169
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6174
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 965:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6178
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 966:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6182
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6186
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 968:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6193
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				goto ret1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				goto ret1
			}

			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[4].functionNameUnion()
			var Args = yyDollar[6].funcArgsUnion()
			var ReturnType = yyDollar[9].funcReturnUnion()
			var Language = yyDollar[11].str
			var Import = yyDollar[12].boolValUnion()
			var Body = yyDollar[13].str
			var Handler = yyDollar[14].str

			yyLOCAL = tree.NewCreateFunction(
				Replace,
				Name,
				Args,
				ReturnType,
				Language,
				Import,
				Body,
				Handler,
			)
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6226
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6231
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 971:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6238
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6245
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 974:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6249
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 975:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:6255
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6261
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 977:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6265
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 978:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6269
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6275
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:6281
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6287
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6291
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 983:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6297
		{
			yyVAL.str = ""
		}
	case 985:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6304
		{
			yyVAL.str = yyDollar[2].str
		}
	case 986:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6310
		{
			var Replace bool
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 987:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6325
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 988:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6342
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = yyDollar[4].exprUnion()
			var AuthOption = yyDollar[5].accountAuthOptionUnion()
			var StatusOption = yyDollar[6].accountStatusUnion()
			var Comment = yyDollar[7].accountCommentUnion()
			yyLOCAL = tree.NewCreateAccount(
				IfNotExists,
				Name,
				AuthOption,
				StatusOption,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 989:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6359
		{
			yyVAL.str = yyDollar[1].str
		}
	case 990:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6363
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 991:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6369
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 992:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6373
		{
			yyVAL.str = "DEFINER = "
		}
	case 993:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6377
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 994:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6382
		{
			yyVAL.str = ""
		}
	case 995:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:6386
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 1001:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6400
		{
			yyVAL.str = ""
		}
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6408
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6414
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6419
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1007:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:6425
		{
			var Equal = yyDollar[2].str
			var AdminName = yyDollar[3].exprUnion()
			var IdentifiedType = yyDollar[4].accountIdentifiedUnion()
			yyLOCAL = *tree.NewAccountAuthOption(
				Equal,
				AdminName,
				IdentifiedType,
			)
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6438
		{
			var str = yyDollar[1].str
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6443
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6448
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6454
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6461
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6468
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByRandomPassword,
				nil,
			)
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6475
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6482
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6490
		{
			as := tree.NewAccountStatus()
			as.Exist = false
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6496
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusOpen
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6503
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusSuspend
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6510
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusRestricted
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6518
		{
			ac := tree.NewAccountComment()
			ac.Exist = false
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6524
		{
			ac := tree.NewAccountComment()
			ac.Exist = true
			ac.Comment = yyDollar[2].str
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6533
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Users = yyDollar[4].usersUnion()
			var Role = yyDollar[5].accountRoleUnion()
			var MiscOpt = yyDollar[6].userMiscOptionUnion()
			var CommentOrAttribute = yyDollar[7].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewCreateUser(
				IfNotExists,
				Users,
				Role,
				MiscOpt,
				CommentOrAttribute,
			)
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6550
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				nil,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6566
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var Table = yyDollar[8].tableNamesUnion()
			var AccountsSet = yyDollar[9].accountsSetOptionUnion()
			var Comment = yyDollar[10].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				Table,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6585
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6591
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6600
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Url = yyDollar[5].str
			var Credentials = yyDollar[6].stageCredentialsUnion()
			var Status = yyDollar[7].stageStatusUnion()
			var Comment = yyDollar[8].stageCommentUnion()
			yyLOCAL = tree.NewCreateStage(
				IfNotExists,
				Name,
				Url,
				Credentials,
				Status,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6618
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6624
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6631
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6639
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6645
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1033:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6653
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1034:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6659
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6667
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6673
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6682
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6686
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6691
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6695
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1041:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6702
		{
			yyVAL.str = yyDollar[3].str
		}
	case 1042:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6707
		{
			yyVAL.str = ""
		}
	case 1043:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6711
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1044:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6717
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 1045:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6730
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var dbName = yyDollar[6].str
			var table = yyDollar[7].tableNamesUnion()
			var comment = yyDollar[8].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, dbName, table, comment)
		}
		yyVAL.union = yyLOCAL
	case 1046:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6741
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1047:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6745
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1048:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6751
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1049:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6757
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1050:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6763
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1051:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6770
		{
			yyVAL.str = ""
		}
	case 1052:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6774
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1053:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:6779
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1054:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:6783
		{
			yyLOCAL = yyDollar[2].tableNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1055:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6789
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1056:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6797
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6805
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropSnapShot(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6813
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPitr(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6821
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1060:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6826
		{
			var Exist = false
			var IsComment bool
			var Str string
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)

		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6838
		{
			var Exist = true
			var IsComment = true
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6849
		{
			var Exist = true
			var IsComment = false
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6958
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6962
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6968
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6981
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6985
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6991
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7004
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7008
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7012
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7017
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7021
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7027
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7034
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7040
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7049
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1079:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7056
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewCreateRole(
				IfNotExists,
				Roles,
			)
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7067
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7071
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:7077
		{
			var UserName = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7086
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7090
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7094
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7099
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7103
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7107
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7111
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7117
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = tree.NewIndexOption()
				io.IType = yyDollar[5].indexTypeUnion()
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = tree.NewIndexOption()
				io.IType = tree.INDEX_TYPE_INVALID
			}
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Table = yyDollar[7].tableNameUnion()
			var ifNotExists = false
			var IndexCat = yyDollar[2].indexCategoryUnion()
			var KeyParts = yyDollar[9].keyPartsUnion()
			var IndexOption = io
			var MiscOption []tree.MiscOption
			yyLOCAL = tree.NewCreateIndex(
				Name,
				Table,
				ifNotExists,
				IndexCat,
				KeyParts,
				IndexOption,
				MiscOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7148
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7152
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7178
		{
			io := tree.NewIndexOption()
			io.KeyBlockSize = uint64(yyDollar[3].item.(int64))
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7184
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}

			io := tree.NewIndexOption()
			io.AlgoParamList = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7196
		{
			io := tree.NewIndexOption()
			io.AlgoParamVectorOpType = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7202
		{
			io := tree.NewIndexOption()
			io.Comment = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1097:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7208
		{
			io := tree.NewIndexOption()
			io.ParserName = yyDollar[3].cstrUnion().Compare()
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1098:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7214
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_VISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7220
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_INVISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7228
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1101:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7232
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1102:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7238
		{
			// Order is parsed but just ignored as MySQL dtree.
			var ColName = yyDollar[1].unresolvedNameUnion()
			var Length = int(yyDollar[2].lengthOptUnion())
			var Direction = yyDollar[3].directionUnion()
			var Expr tree.Expr
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1103:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7252
		{
			var ColName *tree.UnresolvedName
			var Length int
			var Expr = yyDollar[2].exprUnion()
			var Direction = yyDollar[4].directionUnion()
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7266
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1105:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7270
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7274
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7278
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7282
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7286
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7290
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7296
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].str)
			var SubscriptionOption = yyDollar[5].subscriptionOptionUnion()
			var CreateOptions = yyDollar[6].createOptionsUnion()
			yyLOCAL = tree.NewCreateDatabase(
				IfNotExists,
				Name,
				SubscriptionOption,
				CreateOptions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7311
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1113:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7315
		{
			var From = tree.Identifier(yyDollar[2].str)
			var Publication = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewSubscriptionOption(From, Publication)
		}
		yyVAL.union = yyLOCAL
	case 1116:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7326
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7330
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7335
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7339
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7345
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1121:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7349
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7355
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Charset = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCharset(
				IsDefault,
				Charset,
			)
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7364
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Collate = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCollate(
				IsDefault,
				Collate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7373
		{
			var Encrypt = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionEncryption(Encrypt)
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7379
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1126:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7383
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7389
		{
			var TableName = yyDollar[4].tableNameUnion()
			var Options = yyDollar[7].connectorOptionsUnion()
			yyLOCAL = tree.NewCreateConnector(
				TableName,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7400
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7406
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7424
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7442
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1132:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7460
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			var SourceName = yyDollar[5].tableNameUnion()
			var Defs = yyDollar[7].tableDefsUnion()
			var Options = yyDollar[9].tableOptionsUnion()
			yyLOCAL = tree.NewCreateSource(
				Replace,
				IfNotExists,
				SourceName,
				Defs,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1133:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7476
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7480
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7489
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7501
		{
			t := tree.NewCreateTable()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Param = yyDollar[9].loadParamUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7510
		{
			t := tree.NewCreateTable()
			t.IsClusterTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7522
		{
			t := tree.NewCreateTable()
			t.IsDynamicTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			t.DTOptions = yyDollar[8].tableOptionsUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1139:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7532
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[6].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1140:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7542
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[9].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7553
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7563
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[10].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7574
		{
			t := tree.NewCreateTable()
			t.IsAsLike = true
			t.Table = *yyDollar[5].tableNameUnion()
			t.LikeTableName = *yyDollar[7].tableNameUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7582
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.SubscriptionOption = yyDollar[6].subscriptionOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7593
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7600
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7610
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7623
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7631
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1150:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7640
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7649
		{
			yyVAL.str = ""
		}
	case 1152:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:7653
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1153:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7659
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7663
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1155:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7668
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1156:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7672
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:7679
		{
			yyLOCAL = &tree.TailParameter{
				Charset:      yyDollar[1].str,
				Fields:       yyDollar[2].fieldsUnion(),
				Lines:        yyDollar[3].linesUnion(),
				IgnoredLines: uint64(yyDollar[4].int64ValUnion()),
				ColumnList:   yyDollar[5].loadColumnsUnion(),
				Assignments:  yyDollar[6].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7691
		{
			yyVAL.str = ""
		}
	case 1159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7695
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1160:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7701
		{
			var Name = yyDollar[4].tableNameUnion()
			var Type = yyDollar[5].columnTypeUnion()
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var IncrementBy = yyDollar[6].incrementByOptionUnion()
			var MinValue = yyDollar[7].minValueOptionUnion()
			var MaxValue = yyDollar[8].maxValueOptionUnion()
			var StartWith = yyDollar[9].startWithOptionUnion()
			var Cycle = yyDollar[10].boolValUnion()
			yyLOCAL = tree.NewCreateSequence(
				Name,
				Type,
				IfNotExists,
				IncrementBy,
				MinValue,
				MaxValue,
				StartWith,
				Cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7722
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1162:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7736
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7740
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7744
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1165:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7750
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7754
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7761
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7768
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7775
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7782
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7786
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7790
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7794
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7798
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1175:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7805
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7812
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7816
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7823
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7830
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7834
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1181:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7840
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7846
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7850
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1184:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7857
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7864
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7871
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7878
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7882
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7887
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7891
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7895
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7900
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7904
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()
			yyLOCAL = tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1194:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7917
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7921
		{
			var ColumnList = []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)

		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7929
		{
			var ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7937
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1198:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7941
		{
			var IsSubPartition = true
			var PType = yyDollar[3].partitionByUnion()
			var Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = tree.NewPartitionBy2(
				IsSubPartition,
				PType,
				Num,
			)
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7953
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1200:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7957
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1201:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7963
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7967
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7973
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options []tree.TableOption
			var Subs = yyDollar[4].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1204:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7986
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options = yyDollar[4].tableOptionsUnion()
			var Subs = yyDollar[5].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1205:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8000
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8004
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1207:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8010
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1208:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8014
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8020
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options []tree.TableOption
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1210:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8029
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options = yyDollar[3].tableOptionsUnion()
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1211:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8040
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1212:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8044
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1213:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8049
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1214:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8053
		{
			expr := tree.NewMaxValue()
			var valueList = tree.Exprs{expr}
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1215:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8059
		{
			var valueList = yyDollar[5].exprsUnion()
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8064
		{
			var valueList = yyDollar[4].exprsUnion()
			yyLOCAL = tree.NewValuesIn(
				valueList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8072
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8076
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8086
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1220:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8090
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1221:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8101
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1222:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8109
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1223:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8117
		{
			listTyp := tree.NewListType()
			listTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1224:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8125
		{
			listTyp := tree.NewListType()
			listTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8136
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1227:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8145
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			keyTyp.ColumnList = yyDollar[5].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1228:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8155
		{
			Linear := yyDollar[1].boolValUnion()
			Expr := yyDollar[4].exprUnion()
			hashTyp := tree.NewHashType(Linear, Expr)
			yyLOCAL = tree.NewPartitionBy(
				hashTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1229:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8165
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1230:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8169
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1231:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8174
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1232:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8178
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1233:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8184
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1234:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8188
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1235:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8194
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1236:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8203
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1237:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8213
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1238:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8217
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1239:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8223
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1240:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8227
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1241:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8233
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1242:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8242
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1243:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8252
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1244:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8256
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1245:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8262
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1246:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8266
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1247:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8270
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1248:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8276
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1249:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8280
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1250:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8284
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1251:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8288
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1252:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8292
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1253:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8296
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1254:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8300
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1255:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8305
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1256:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8309
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1257:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8313
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1258:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8317
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1259:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8321
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1260:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8325
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1261:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8329
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1262:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8333
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1263:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8337
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1264:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8341
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1265:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8345
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1266:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8349
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1267:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8353
		{
			t := tree.NewTableOptionPackKeys()
			t.Value = yyDollar[3].item.(int64)
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1268:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8359
		{
			t := tree.NewTableOptionPackKeys()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1269:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8365
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1270:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8369
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8373
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8377
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8381
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8387
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1275:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8393
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8399
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8405
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1278:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8411
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1279:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8417
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1280:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8421
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1281:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8425
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1282:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8429
		{
			var Preperties = yyDollar[3].propertiesUnion()
			yyLOCAL = tree.NewTableOptionProperties(Preperties)
		}
		yyVAL.union = yyLOCAL
	case 1283:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8434
		{
			var retentionPeriod = uint64(yyDollar[4].item.(int64))
			var retentionUnit = strings.ToLower(yyDollar[5].str)
			yyLOCAL = tree.NewRetentionOption(
				retentionPeriod,
				retentionUnit,
			)
		}
		yyVAL.union = yyLOCAL
	case 1284:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8445
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1285:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8449
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1286:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:8455
		{
			var Key = yyDollar[1].str
			var Value = yyDollar[3].str
			yyLOCAL = *tree.NewProperty(
				Key,
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 1287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8466
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1288:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8470
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1289:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8476
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1290:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8480
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1291:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8484
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1292:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8488
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1293:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8492
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1294:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8496
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1299:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8510
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1300:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8514
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1301:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8523
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[2].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1302:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8529
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[4].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1303:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8537
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1304:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8541
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPTIME,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1305:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8548
		{
			var str = yyDollar[4].cstrUnion().Compare()
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yylex.(*Lexer).GetDbOrTblName(yyDollar[4].cstrUnion().Origin()),
				Expr:         tree.NewNumVal(str, str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1306:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8557
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yyDollar[4].str,
				Expr:         tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1307:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8565
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATMOTIMESTAMP,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1308:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8573
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1310:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8580
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1311:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8584
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1312:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8590
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1313:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8594
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1314:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8598
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1315:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8604
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1316:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8608
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1317:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8614
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1318:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8627
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1319:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8640
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid the type of index")
					goto ret1
				}
			}

			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1320:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8679
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid type of index")
					goto ret1
				}
			}
			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1321:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8719
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1322:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8733
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1323:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8739
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1324:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8752
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1325:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8765
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1326:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8778
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1327:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8791
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var KeyParts = yyDollar[6].keyPartsUnion()
			var Name = yyDollar[4].str
			var Refer = yyDollar[8].attributeReferenceUnion()
			var Empty = true
			yyLOCAL = tree.NewForeignKey(
				IfNotExists,
				KeyParts,
				Name,
				Refer,
				Empty,
			)
		}
		yyVAL.union = yyLOCAL
	case 1328:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8806
		{
			var Expr = yyDollar[3].exprUnion()
			var Enforced = yyDollar[5].boolValUnion()
			yyLOCAL = tree.NewCheckIndex(
				Expr,
				Enforced,
			)
		}
		yyVAL.union = yyLOCAL
	case 1329:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8816
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8822
		{
			yyVAL.str = ""
		}
	case 1332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8826
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1335:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8836
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1336:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8842
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1337:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8848
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1348:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8869
		{
			yyVAL.str = ""
		}
	case 1349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8873
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1350:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:8879
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1351:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8885
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1352:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8889
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1353:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8894
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1354:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8902
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1355:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8906
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1356:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8910
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1357:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8914
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1358:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8920
		{
			yyLOCAL = yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
		}
		yyVAL.union = yyLOCAL
	case 1359:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8926
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1360:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8930
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1361:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8935
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1362:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8942
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1363:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8946
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1364:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8952
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1365:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8956
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1366:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8962
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1367:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8966
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1368:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8970
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1369:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8974
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1370:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8978
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1371:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8982
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumVal(str, str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1372:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8987
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1373:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8991
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1374:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8995
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1375:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8999
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1376:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9003
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1377:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9007
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1378:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9011
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1379:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9015
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1380:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9019
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1381:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9023
		{
			name := tree.NewUnresolvedColName(yyDollar[3].str)
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[3].str, 1),
				Exprs:    es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1382:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9037
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1383:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9041
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1384:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9045
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1385:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9049
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1386:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9053
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1387:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9057
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1388:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9063
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1389:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9067
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1390:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9072
		{
			yyVAL.str = ""
		}
	case 1391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9076
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9082
		{
			yyVAL.str = ""
		}
	case 1393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9086
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1394:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:9092
		{
			var TableName = yyDollar[2].tableNameUnion()
			var KeyParts = yyDollar[3].keyPartsUnion()
			var Match = yyDollar[4].matchTypeUnion()
			var OnDelete = yyDollar[5].referenceOnRecordUnion().OnDelete
			var OnUpdate = yyDollar[5].referenceOnRecordUnion().OnUpdate
			yyLOCAL = tree.NewAttributeReference(
				TableName,
				KeyParts,
				Match,
				OnDelete,
				OnUpdate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1395:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9109
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1396:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9116
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1397:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9123
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1398:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9130
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1399:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9137
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1400:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9146
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1401:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9152
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1402:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9158
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1403:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9162
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1404:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9166
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1405:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9170
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1406:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9174
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1407:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9179
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1409:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9186
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1410:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9190
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1411:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9194
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1412:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9199
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1413:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9203
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1414:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9208
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1415:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9212
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1422:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:9228
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1423:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9234
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1424:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9238
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1425:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9242
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1426:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9246
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1427:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9250
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1428:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9254
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1429:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9258
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1430:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9262
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1431:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9266
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1432:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9270
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1433:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9274
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1434:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9278
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1435:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9282
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1436:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9288
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1437:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9292
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1438:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9296
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1439:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9300
		{
			yyLOCAL = tree.NewParentExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1440:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9304
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1441:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9308
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1442:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9312
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1443:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9316
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1444:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9320
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1445:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9324
		{
			hint := strings.ToLower(yyDollar[2].cstrUnion().Compare())
			switch hint {
			case "d":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "DATETIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "t":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimeFamily,
						FamilyString: "TIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "ts":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "TIMESTAMP",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			default:
				yylex.Error("Invalid type")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1446:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9366
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1447:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9370
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1448:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9374
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1449:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9379
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1450:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9387
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1451:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9391
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1452:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9395
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1453:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9399
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1454:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9403
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1455:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9413
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1456:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9417
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1457:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9421
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1458:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9425
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1459:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9429
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1460:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9433
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1461:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9437
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1462:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9443
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1463:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9452
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1464:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9461
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1465:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9472
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1466:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9482
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1467:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9492
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1468:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9501
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1469:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9511
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1470:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9521
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1471:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9531
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1472:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9540
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1473:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9550
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1474:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9554
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1475:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9559
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1476:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9563
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1477:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9569
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1478:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9573
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1479:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:9579
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9588
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1481:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9600
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1482:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9617
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1484:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9634
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1485:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9647
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1486:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9660
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1487:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9672
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1488:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9686
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1489:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9701
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1490:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9716
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1491:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9733
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1492:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9748
		{
		}
	case 1496:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9755
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1497:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9759
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1498:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9763
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1499:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9769
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1500:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9773
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1501:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9777
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1502:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9781
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1503:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9787
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1504:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9791
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1505:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9795
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1506:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9801
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1507:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9809
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1508:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9819
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1509:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9823
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1510:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9830
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1511:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9835
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1512:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9839
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1513:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9844
		{
			yyVAL.str = ","
		}
	case 1514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9848
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1515:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9853
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9857
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1517:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9862
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1519:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9869
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1520:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9895
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1521:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9907
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1522:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9919
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1523:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9930
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1524:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9941
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1525:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9952
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1526:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9962
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1527:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9972
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1528:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9983
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1529:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9994
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1530:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10005
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1531:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10016
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1532:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10027
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1533:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10038
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1534:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10049
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1535:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10060
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1536:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10071
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1537:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10082
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1538:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10093
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1539:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10104
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1540:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10115
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1541:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10126
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1545:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10144
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1546:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10153
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1547:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10162
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1548:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10171
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1549:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10180
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1550:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10191
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1551:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10200
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[4].exprUnion()},
				Type:     yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1552:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10210
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1553:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10219
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1554:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10228
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1555:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10237
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1556:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10246
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1557:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10258
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1558:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10269
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1559:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10282
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1560:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10294
		{
			column := tree.NewUnresolvedColName(yyDollar[3].str)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10317
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1596:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10353
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1597:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10366
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1598:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10379
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1599:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10391
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1600:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10400
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1601:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10408
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1602:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10416
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1603:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10429
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1604:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10438
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1605:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10449
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1606:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10460
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1607:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10469
		{
			cn := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1608:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10481
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1609:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10491
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1610:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10501
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1611:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10510
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1612:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10521
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1613:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10530
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1614:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10540
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1615:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10549
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1616:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10558
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1617:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10568
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1618:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10572
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1619:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10578
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1620:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10582
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumVal(ival, str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1627:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10601
		{
		}
	case 1628:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10603
		{
		}
	case 1662:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10644
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1663:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10656
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1664:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10660
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1665:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10664
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1666:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:10670
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1667:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10675
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1668:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10679
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1669:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10685
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1670:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10689
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1671:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10695
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1672:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10699
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1673:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10706
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1674:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10710
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1675:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10714
		{
			name := tree.NewUnresolvedColName("concat")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr("concat", 1),
				Exprs:    tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1676:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10723
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1677:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10727
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1678:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10731
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1679:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10736
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1680:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10740
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1681:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10746
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1682:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10750
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1683:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10754
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1684:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10758
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1685:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10762
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1686:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10766
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1687:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10770
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1688:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10774
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1689:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10778
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1690:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10782
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1692:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10790
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1693:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10794
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1694:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10798
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1695:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10802
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1696:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10806
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1697:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10810
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1698:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10814
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1699:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10818
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1700:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10822
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1701:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10826
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1703:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10832
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1704:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10836
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1705:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10842
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1706:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10846
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1707:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10853
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1708:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10857
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1709:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10861
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1710:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10867
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1711:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10871
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1712:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10875
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1713:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10879
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1714:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10883
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1715:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10887
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1716:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10891
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1717:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10897
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1718:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10901
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1719:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10905
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1720:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10909
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1721:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10915
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1722:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10928
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1723:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10933
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1724:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10939
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1725:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10943
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1726:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10956
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1727:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10961
		{
			yyLOCAL = tree.NewNumVal(true, "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1728:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10965
		{
			yyLOCAL = tree.NewNumVal(false, "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1729:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10969
		{
			yyLOCAL = tree.NewNumVal("null", "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1730:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10973
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1731:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10977
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1732:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10984
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1733:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10988
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1734:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10992
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1735:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10996
		{
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1736:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11003
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1740:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11014
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1741:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11019
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1742:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11025
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1743:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11037
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1744:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11049
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1745:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11061
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1746:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11074
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1747:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11087
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1748:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11100
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1749:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11113
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1750:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11126
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1751:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11139
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1752:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11152
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1753:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11165
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1754:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11178
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1755:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11191
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1756:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11206
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1757:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11233
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1758:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11275
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1759:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11311
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1760:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11347
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1761:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11364
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1762:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11376
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1763:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11396
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1764:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11416
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1765:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11436
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1766:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11452
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1767:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11465
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1768:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11478
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1769:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11491
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1770:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11504
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1771:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11516
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1772:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11528
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1773:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11540
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1774:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11552
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1775:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11564
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1776:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11576
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1777:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11588
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1778:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11600
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1779:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11612
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1780:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11624
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1781:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11637
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1782:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11650
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1783:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11663
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1784:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11676
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1785:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11691
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1786:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11699
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumVal("null", "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1787:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11708
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1788:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11718
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1789:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11741
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1790:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11746
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1791:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11752
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1793:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11759
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1794:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11763
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1795:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11768
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1796:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11772
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1797:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11778
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1798:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11784
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1799:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11791
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1800:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11798
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1801:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11807
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1802:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11814
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1803:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11821
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1804:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11830
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1805:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11834
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1806:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11838
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1807:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11844
		{
		}
	case 1808:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11846
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1812:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11856
		{
			yyVAL.str = ""
		}
	case 1813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:11860
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
