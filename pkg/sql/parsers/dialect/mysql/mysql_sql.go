// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const CONNECT = 57367
const MANAGE = 57368
const GRANTS = 57369
const OWNERSHIP = 57370
const REFERENCE = 57371
const LOWER_THAN_SET = 57372
const SET = 57373
const ALL = 57374
const DISTINCT = 57375
const DISTINCTROW = 57376
const AS = 57377
const EXISTS = 57378
const ASC = 57379
const DESC = 57380
const INTO = 57381
const DUPLICATE = 57382
const DEFAULT = 57383
const LOCK = 57384
const KEYS = 57385
const NULLS = 57386
const FIRST = 57387
const LAST = 57388
const AFTER = 57389
const INSTANT = 57390
const INPLACE = 57391
const COPY = 57392
const DISABLE = 57393
const ENABLE = 57394
const UNDEFINED = 57395
const MERGE = 57396
const TEMPTABLE = 57397
const DEFINER = 57398
const INVOKER = 57399
const SQL = 57400
const SECURITY = 57401
const CASCADED = 57402
const VALUES = 57403
const NEXT = 57404
const VALUE = 57405
const SHARE = 57406
const MODE = 57407
const SQL_NO_CACHE = 57408
const SQL_CACHE = 57409
const JOIN = 57410
const STRAIGHT_JOIN = 57411
const LEFT = 57412
const RIGHT = 57413
const INNER = 57414
const OUTER = 57415
const CROSS = 57416
const NATURAL = 57417
const USE = 57418
const FORCE = 57419
const CROSS_L2 = 57420
const LOWER_THAN_ON = 57421
const ON = 57422
const USING = 57423
const SUBQUERY_AS_EXPR = 57424
const LOWER_THAN_STRING = 57425
const ID = 57426
const AT_ID = 57427
const AT_AT_ID = 57428
const STRING = 57429
const VALUE_ARG = 57430
const LIST_ARG = 57431
const COMMENT = 57432
const COMMENT_KEYWORD = 57433
const QUOTE_ID = 57434
const STAGE = 57435
const CREDENTIALS = 57436
const STAGES = 57437
const SNAPSHOTS = 57438
const INTEGRAL = 57439
const HEX = 57440
const FLOAT = 57441
const HEXNUM = 57442
const BIT_LITERAL = 57443
const NULL = 57444
const TRUE = 57445
const FALSE = 57446
const LOWER_THAN_CHARSET = 57447
const CHARSET = 57448
const UNIQUE = 57449
const KEY = 57450
const OR = 57451
const PIPE_CONCAT = 57452
const XOR = 57453
const AND = 57454
const NOT = 57455
const BETWEEN = 57456
const CASE = 57457
const WHEN = 57458
const THEN = 57459
const ELSE = 57460
const END = 57461
const ELSEIF = 57462
const LOWER_THAN_EQ = 57463
const LE = 57464
const GE = 57465
const NE = 57466
const NULL_SAFE_EQUAL = 57467
const IS = 57468
const LIKE = 57469
const REGEXP = 57470
const IN = 57471
const ASSIGNMENT = 57472
const ILIKE = 57473
const SHIFT_LEFT = 57474
const SHIFT_RIGHT = 57475
const DIV = 57476
const MOD = 57477
const UNARY = 57478
const COLLATE = 57479
const BINARY = 57480
const UNDERSCORE_BINARY = 57481
const INTERVAL = 57482
const OUT = 57483
const INOUT = 57484
const BEGIN = 57485
const START = 57486
const TRANSACTION = 57487
const COMMIT = 57488
const ROLLBACK = 57489
const WORK = 57490
const CONSISTENT = 57491
const SNAPSHOT = 57492
const CHAIN = 57493
const NO = 57494
const RELEASE = 57495
const PRIORITY = 57496
const QUICK = 57497
const BIT = 57498
const TINYINT = 57499
const SMALLINT = 57500
const MEDIUMINT = 57501
const INT = 57502
const INTEGER = 57503
const BIGINT = 57504
const INTNUM = 57505
const REAL = 57506
const DOUBLE = 57507
const FLOAT_TYPE = 57508
const DECIMAL = 57509
const NUMERIC = 57510
const DECIMAL_VALUE = 57511
const TIME = 57512
const TIMESTAMP = 57513
const DATETIME = 57514
const YEAR = 57515
const CHAR = 57516
const VARCHAR = 57517
const BOOL = 57518
const CHARACTER = 57519
const VARBINARY = 57520
const NCHAR = 57521
const TEXT = 57522
const TINYTEXT = 57523
const MEDIUMTEXT = 57524
const LONGTEXT = 57525
const DATALINK = 57526
const BLOB = 57527
const TINYBLOB = 57528
const MEDIUMBLOB = 57529
const LONGBLOB = 57530
const JSON = 57531
const ENUM = 57532
const UUID = 57533
const VECF32 = 57534
const VECF64 = 57535
const GEOMETRY = 57536
const POINT = 57537
const LINESTRING = 57538
const POLYGON = 57539
const GEOMETRYCOLLECTION = 57540
const MULTIPOINT = 57541
const MULTILINESTRING = 57542
const MULTIPOLYGON = 57543
const INT1 = 57544
const INT2 = 57545
const INT3 = 57546
const INT4 = 57547
const INT8 = 57548
const S3OPTION = 57549
const STAGEOPTION = 57550
const SQL_SMALL_RESULT = 57551
const SQL_BIG_RESULT = 57552
const SQL_BUFFER_RESULT = 57553
const LOW_PRIORITY = 57554
const HIGH_PRIORITY = 57555
const DELAYED = 57556
const CREATE = 57557
const ALTER = 57558
const DROP = 57559
const RENAME = 57560
const ANALYZE = 57561
const ADD = 57562
const RETURNS = 57563
const SCHEMA = 57564
const TABLE = 57565
const SEQUENCE = 57566
const INDEX = 57567
const VIEW = 57568
const TO = 57569
const IGNORE = 57570
const IF = 57571
const PRIMARY = 57572
const COLUMN = 57573
const CONSTRAINT = 57574
const SPATIAL = 57575
const FULLTEXT = 57576
const FOREIGN = 57577
const KEY_BLOCK_SIZE = 57578
const SHOW = 57579
const DESCRIBE = 57580
const EXPLAIN = 57581
const DATE = 57582
const ESCAPE = 57583
const REPAIR = 57584
const OPTIMIZE = 57585
const TRUNCATE = 57586
const MAXVALUE = 57587
const PARTITION = 57588
const REORGANIZE = 57589
const LESS = 57590
const THAN = 57591
const PROCEDURE = 57592
const TRIGGER = 57593
const STATUS = 57594
const VARIABLES = 57595
const ROLE = 57596
const PROXY = 57597
const AVG_ROW_LENGTH = 57598
const STORAGE = 57599
const DISK = 57600
const MEMORY = 57601
const CHECKSUM = 57602
const COMPRESSION = 57603
const DATA = 57604
const DIRECTORY = 57605
const DELAY_KEY_WRITE = 57606
const ENCRYPTION = 57607
const ENGINE = 57608
const MAX_ROWS = 57609
const MIN_ROWS = 57610
const PACK_KEYS = 57611
const ROW_FORMAT = 57612
const STATS_AUTO_RECALC = 57613
const STATS_PERSISTENT = 57614
const STATS_SAMPLE_PAGES = 57615
const DYNAMIC = 57616
const COMPRESSED = 57617
const REDUNDANT = 57618
const COMPACT = 57619
const FIXED = 57620
const COLUMN_FORMAT = 57621
const AUTO_RANDOM = 57622
const ENGINE_ATTRIBUTE = 57623
const SECONDARY_ENGINE_ATTRIBUTE = 57624
const INSERT_METHOD = 57625
const RESTRICT = 57626
const CASCADE = 57627
const ACTION = 57628
const PARTIAL = 57629
const SIMPLE = 57630
const CHECK = 57631
const ENFORCED = 57632
const RANGE = 57633
const LIST = 57634
const ALGORITHM = 57635
const LINEAR = 57636
const PARTITIONS = 57637
const SUBPARTITION = 57638
const SUBPARTITIONS = 57639
const CLUSTER = 57640
const TYPE = 57641
const ANY = 57642
const SOME = 57643
const EXTERNAL = 57644
const LOCALFILE = 57645
const URL = 57646
const PREPARE = 57647
const DEALLOCATE = 57648
const RESET = 57649
const EXTENSION = 57650
const RETENTION = 57651
const PERIOD = 57652
const INCREMENT = 57653
const CYCLE = 57654
const MINVALUE = 57655
const PUBLICATION = 57656
const SUBSCRIPTIONS = 57657
const PUBLICATIONS = 57658
const PROPERTIES = 57659
const PARSER = 57660
const VISIBLE = 57661
const INVISIBLE = 57662
const BTREE = 57663
const HASH = 57664
const RTREE = 57665
const BSI = 57666
const IVFFLAT = 57667
const MASTER = 57668
const ZONEMAP = 57669
const LEADING = 57670
const BOTH = 57671
const TRAILING = 57672
const UNKNOWN = 57673
const LISTS = 57674
const OP_TYPE = 57675
const REINDEX = 57676
const EXPIRE = 57677
const ACCOUNT = 57678
const ACCOUNTS = 57679
const UNLOCK = 57680
const DAY = 57681
const NEVER = 57682
const PUMP = 57683
const MYSQL_COMPATIBILITY_MODE = 57684
const UNIQUE_CHECK_ON_AUTOINCR = 57685
const MODIFY = 57686
const CHANGE = 57687
const SECOND = 57688
const ASCII = 57689
const COALESCE = 57690
const COLLATION = 57691
const HOUR = 57692
const MICROSECOND = 57693
const MINUTE = 57694
const MONTH = 57695
const QUARTER = 57696
const REPEAT = 57697
const REVERSE = 57698
const ROW_COUNT = 57699
const WEEK = 57700
const REVOKE = 57701
const FUNCTION = 57702
const PRIVILEGES = 57703
const TABLESPACE = 57704
const EXECUTE = 57705
const SUPER = 57706
const GRANT = 57707
const OPTION = 57708
const REFERENCES = 57709
const REPLICATION = 57710
const SLAVE = 57711
const CLIENT = 57712
const USAGE = 57713
const RELOAD = 57714
const FILE = 57715
const TEMPORARY = 57716
const ROUTINE = 57717
const EVENT = 57718
const SHUTDOWN = 57719
const NULLX = 57720
const AUTO_INCREMENT = 57721
const APPROXNUM = 57722
const SIGNED = 57723
const UNSIGNED = 57724
const ZEROFILL = 57725
const ENGINES = 57726
const LOW_CARDINALITY = 57727
const AUTOEXTEND_SIZE = 57728
const ADMIN_NAME = 57729
const RANDOM = 57730
const SUSPEND = 57731
const ATTRIBUTE = 57732
const HISTORY = 57733
const REUSE = 57734
const CURRENT = 57735
const OPTIONAL = 57736
const FAILED_LOGIN_ATTEMPTS = 57737
const PASSWORD_LOCK_TIME = 57738
const UNBOUNDED = 57739
const SECONDARY = 57740
const RESTRICTED = 57741
const USER = 57742
const IDENTIFIED = 57743
const CIPHER = 57744
const ISSUER = 57745
const X509 = 57746
const SUBJECT = 57747
const SAN = 57748
const REQUIRE = 57749
const SSL = 57750
const NONE = 57751
const PASSWORD = 57752
const SHARED = 57753
const EXCLUSIVE = 57754
const MAX_QUERIES_PER_HOUR = 57755
const MAX_UPDATES_PER_HOUR = 57756
const MAX_CONNECTIONS_PER_HOUR = 57757
const MAX_USER_CONNECTIONS = 57758
const FORMAT = 57759
const VERBOSE = 57760
const CONNECTION = 57761
const TRIGGERS = 57762
const PROFILES = 57763
const LOAD = 57764
const INLINE = 57765
const INFILE = 57766
const TERMINATED = 57767
const OPTIONALLY = 57768
const ENCLOSED = 57769
const ESCAPED = 57770
const STARTING = 57771
const LINES = 57772
const ROWS = 57773
const IMPORT = 57774
const DISCARD = 57775
const JSONTYPE = 57776
const MODUMP = 57777
const OVER = 57778
const PRECEDING = 57779
const FOLLOWING = 57780
const GROUPS = 57781
const DATABASES = 57782
const TABLES = 57783
const SEQUENCES = 57784
const EXTENDED = 57785
const FULL = 57786
const PROCESSLIST = 57787
const FIELDS = 57788
const COLUMNS = 57789
const OPEN = 57790
const ERRORS = 57791
const WARNINGS = 57792
const INDEXES = 57793
const SCHEMAS = 57794
const NODE = 57795
const LOCKS = 57796
const ROLES = 57797
const TABLE_NUMBER = 57798
const COLUMN_NUMBER = 57799
const TABLE_VALUES = 57800
const TABLE_SIZE = 57801
const NAMES = 57802
const GLOBAL = 57803
const PERSIST = 57804
const SESSION = 57805
const ISOLATION = 57806
const LEVEL = 57807
const READ = 57808
const WRITE = 57809
const ONLY = 57810
const REPEATABLE = 57811
const COMMITTED = 57812
const UNCOMMITTED = 57813
const SERIALIZABLE = 57814
const LOCAL = 57815
const EVENTS = 57816
const PLUGINS = 57817
const CURRENT_TIMESTAMP = 57818
const DATABASE = 57819
const CURRENT_TIME = 57820
const LOCALTIME = 57821
const LOCALTIMESTAMP = 57822
const UTC_DATE = 57823
const UTC_TIME = 57824
const UTC_TIMESTAMP = 57825
const REPLACE = 57826
const CONVERT = 57827
const SEPARATOR = 57828
const TIMESTAMPDIFF = 57829
const CURRENT_DATE = 57830
const CURRENT_USER = 57831
const CURRENT_ROLE = 57832
const SECOND_MICROSECOND = 57833
const MINUTE_MICROSECOND = 57834
const MINUTE_SECOND = 57835
const HOUR_MICROSECOND = 57836
const HOUR_SECOND = 57837
const HOUR_MINUTE = 57838
const DAY_MICROSECOND = 57839
const DAY_SECOND = 57840
const DAY_MINUTE = 57841
const DAY_HOUR = 57842
const YEAR_MONTH = 57843
const SQL_TSI_HOUR = 57844
const SQL_TSI_DAY = 57845
const SQL_TSI_WEEK = 57846
const SQL_TSI_MONTH = 57847
const SQL_TSI_QUARTER = 57848
const SQL_TSI_YEAR = 57849
const SQL_TSI_SECOND = 57850
const SQL_TSI_MINUTE = 57851
const RECURSIVE = 57852
const CONFIG = 57853
const DRAINER = 57854
const SOURCE = 57855
const STREAM = 57856
const HEADERS = 57857
const CONNECTOR = 57858
const CONNECTORS = 57859
const DAEMON = 57860
const PAUSE = 57861
const CANCEL = 57862
const TASK = 57863
const RESUME = 57864
const MATCH = 57865
const AGAINST = 57866
const BOOLEAN = 57867
const LANGUAGE = 57868
const WITH = 57869
const QUERY = 57870
const EXPANSION = 57871
const WITHOUT = 57872
const VALIDATION = 57873
const UPGRADE = 57874
const RETRY = 57875
const ADDDATE = 57876
const BIT_AND = 57877
const BIT_OR = 57878
const BIT_XOR = 57879
const CAST = 57880
const COUNT = 57881
const APPROX_COUNT = 57882
const APPROX_COUNT_DISTINCT = 57883
const SERIAL_EXTRACT = 57884
const APPROX_PERCENTILE = 57885
const CURDATE = 57886
const CURTIME = 57887
const DATE_ADD = 57888
const DATE_SUB = 57889
const EXTRACT = 57890
const GROUP_CONCAT = 57891
const MAX = 57892
const MID = 57893
const MIN = 57894
const NOW = 57895
const POSITION = 57896
const SESSION_USER = 57897
const STD = 57898
const STDDEV = 57899
const MEDIAN = 57900
const CLUSTER_CENTERS = 57901
const KMEANS = 57902
const STDDEV_POP = 57903
const STDDEV_SAMP = 57904
const SUBDATE = 57905
const SUBSTR = 57906
const SUBSTRING = 57907
const SUM = 57908
const SYSDATE = 57909
const SYSTEM_USER = 57910
const TRANSLATE = 57911
const TRIM = 57912
const VARIANCE = 57913
const VAR_POP = 57914
const VAR_SAMP = 57915
const AVG = 57916
const RANK = 57917
const ROW_NUMBER = 57918
const DENSE_RANK = 57919
const BIT_CAST = 57920
const BITMAP_BIT_POSITION = 57921
const BITMAP_BUCKET_NUMBER = 57922
const BITMAP_COUNT = 57923
const BITMAP_CONSTRUCT_AGG = 57924
const BITMAP_OR_AGG = 57925
const NEXTVAL = 57926
const SETVAL = 57927
const CURRVAL = 57928
const LASTVAL = 57929
const ARROW = 57930
const ROW = 57931
const OUTFILE = 57932
const HEADER = 57933
const MAX_FILE_SIZE = 57934
const FORCE_QUOTE = 57935
const PARALLEL = 57936
const STRICT = 57937
const UNUSED = 57938
const BINDINGS = 57939
const DO = 57940
const DECLARE = 57941
const LOOP = 57942
const WHILE = 57943
const LEAVE = 57944
const ITERATE = 57945
const UNTIL = 57946
const CALL = 57947
const PREV = 57948
const SLIDING = 57949
const FILL = 57950
const SPBEGIN = 57951
const BACKEND = 57952
const SERVERS = 57953
const HANDLER = 57954
const PERCENT = 57955
const SAMPLE = 57956
const MO_TS = 57957
const PITR = 57958
const CDC = 57959
const KILL = 57960
const BACKUP = 57961
const FILESYSTEM = 57962
const PARALLELISM = 57963
const RESTORE = 57964
const QUERY_RESULT = 57965

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"CROSS_L2",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"SNAPSHOTS",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"DATALINK",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"RETENTION",
	"PERIOD",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"UNIQUE_CHECK_ON_AUTOINCR",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UPGRADE",
	"RETRY",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"BITMAP_BIT_POSITION",
	"BITMAP_BUCKET_NUMBER",
	"BITMAP_COUNT",
	"BITMAP_CONSTRUCT_AGG",
	"BITMAP_OR_AGG",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"STRICT",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"MO_TS",
	"PITR",
	"CDC",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"RESTORE",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:12464

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 134,
	11, 778,
	22, 778,
	-2, 771,
	-1, 157,
	240, 1187,
	242, 1086,
	-2, 1133,
	-1, 184,
	43, 601,
	242, 601,
	269, 608,
	270, 608,
	468, 601,
	-2, 636,
	-1, 224,
	644, 1946,
	-2, 511,
	-1, 526,
	644, 2066,
	-2, 392,
	-1, 584,
	644, 2125,
	-2, 390,
	-1, 585,
	644, 2126,
	-2, 391,
	-1, 586,
	644, 2127,
	-2, 393,
	-1, 719,
	321, 176,
	440, 176,
	441, 176,
	-2, 1851,
	-1, 785,
	83, 1637,
	-2, 2002,
	-1, 786,
	83, 1655,
	-2, 1973,
	-1, 790,
	83, 1656,
	-2, 2001,
	-1, 823,
	83, 1564,
	-2, 2199,
	-1, 824,
	83, 1565,
	-2, 2198,
	-1, 825,
	83, 1566,
	-2, 2188,
	-1, 826,
	83, 2160,
	-2, 2181,
	-1, 827,
	83, 2161,
	-2, 2182,
	-1, 828,
	83, 2162,
	-2, 2190,
	-1, 829,
	83, 2163,
	-2, 2170,
	-1, 830,
	83, 2164,
	-2, 2179,
	-1, 831,
	83, 2165,
	-2, 2191,
	-1, 832,
	83, 2166,
	-2, 2192,
	-1, 833,
	83, 2167,
	-2, 2197,
	-1, 834,
	83, 2168,
	-2, 2202,
	-1, 835,
	83, 2169,
	-2, 2203,
	-1, 836,
	83, 1633,
	-2, 2040,
	-1, 837,
	83, 1634,
	-2, 1835,
	-1, 838,
	83, 1635,
	-2, 2049,
	-1, 839,
	83, 1636,
	-2, 1844,
	-1, 841,
	83, 1639,
	-2, 1852,
	-1, 842,
	83, 1640,
	-2, 2073,
	-1, 844,
	83, 1643,
	-2, 1871,
	-1, 846,
	83, 1645,
	-2, 2085,
	-1, 847,
	83, 1646,
	-2, 2084,
	-1, 848,
	83, 1647,
	-2, 1915,
	-1, 849,
	83, 1648,
	-2, 1997,
	-1, 852,
	83, 1651,
	-2, 2096,
	-1, 854,
	83, 1653,
	-2, 2099,
	-1, 855,
	83, 1654,
	-2, 2101,
	-1, 856,
	83, 1657,
	-2, 2109,
	-1, 857,
	83, 1658,
	-2, 1982,
	-1, 858,
	83, 1659,
	-2, 2027,
	-1, 859,
	83, 1660,
	-2, 1992,
	-1, 860,
	83, 1661,
	-2, 2017,
	-1, 871,
	83, 1542,
	-2, 2193,
	-1, 872,
	83, 1543,
	-2, 2194,
	-1, 873,
	83, 1544,
	-2, 2195,
	-1, 972,
	463, 636,
	464, 636,
	-2, 602,
	-1, 1022,
	125, 1835,
	136, 1835,
	156, 1835,
	-2, 1809,
	-1, 1139,
	22, 805,
	-2, 754,
	-1, 1245,
	11, 778,
	22, 778,
	-2, 1422,
	-1, 1327,
	22, 805,
	-2, 754,
	-1, 1673,
	83, 1708,
	-2, 1999,
	-1, 1674,
	83, 1709,
	-2, 2000,
	-1, 1843,
	84, 958,
	-2, 964,
	-1, 2290,
	108, 1125,
	152, 1125,
	191, 1125,
	194, 1125,
	282, 1125,
	-2, 1118,
	-1, 2446,
	11, 778,
	22, 778,
	-2, 899,
	-1, 2479,
	84, 1795,
	157, 1795,
	-2, 1984,
	-1, 2480,
	84, 1795,
	157, 1795,
	-2, 1983,
	-1, 2481,
	84, 1771,
	157, 1771,
	-2, 1970,
	-1, 2482,
	84, 1772,
	157, 1772,
	-2, 1975,
	-1, 2483,
	84, 1773,
	157, 1773,
	-2, 1903,
	-1, 2484,
	84, 1774,
	157, 1774,
	-2, 1897,
	-1, 2485,
	84, 1775,
	157, 1775,
	-2, 1825,
	-1, 2486,
	84, 1776,
	157, 1776,
	-2, 1972,
	-1, 2487,
	84, 1777,
	157, 1777,
	-2, 1901,
	-1, 2488,
	84, 1778,
	157, 1778,
	-2, 1896,
	-1, 2489,
	84, 1779,
	157, 1779,
	-2, 1885,
	-1, 2490,
	84, 1795,
	157, 1795,
	-2, 1886,
	-1, 2491,
	84, 1795,
	157, 1795,
	-2, 1887,
	-1, 2493,
	84, 1784,
	157, 1784,
	-2, 2017,
	-1, 2494,
	84, 1761,
	157, 1761,
	-2, 2002,
	-1, 2495,
	84, 1793,
	157, 1793,
	-2, 1973,
	-1, 2496,
	84, 1793,
	157, 1793,
	-2, 2001,
	-1, 2497,
	84, 1793,
	157, 1793,
	-2, 1853,
	-1, 2498,
	84, 1791,
	157, 1791,
	-2, 1992,
	-1, 2499,
	84, 1788,
	157, 1788,
	-2, 1876,
	-1, 2500,
	83, 1742,
	84, 1742,
	157, 1742,
	398, 1742,
	399, 1742,
	400, 1742,
	-2, 1824,
	-1, 2501,
	83, 1743,
	84, 1743,
	157, 1743,
	398, 1743,
	399, 1743,
	400, 1743,
	-2, 1826,
	-1, 2502,
	83, 1744,
	84, 1744,
	157, 1744,
	398, 1744,
	399, 1744,
	400, 1744,
	-2, 2045,
	-1, 2503,
	83, 1746,
	84, 1746,
	157, 1746,
	398, 1746,
	399, 1746,
	400, 1746,
	-2, 1974,
	-1, 2504,
	83, 1748,
	84, 1748,
	157, 1748,
	398, 1748,
	399, 1748,
	400, 1748,
	-2, 1955,
	-1, 2505,
	83, 1750,
	84, 1750,
	157, 1750,
	398, 1750,
	399, 1750,
	400, 1750,
	-2, 1902,
	-1, 2506,
	83, 1752,
	84, 1752,
	157, 1752,
	398, 1752,
	399, 1752,
	400, 1752,
	-2, 1881,
	-1, 2507,
	83, 1753,
	84, 1753,
	157, 1753,
	398, 1753,
	399, 1753,
	400, 1753,
	-2, 1882,
	-1, 2508,
	83, 1755,
	84, 1755,
	157, 1755,
	398, 1755,
	399, 1755,
	400, 1755,
	-2, 1823,
	-1, 2509,
	84, 1798,
	157, 1798,
	398, 1798,
	399, 1798,
	400, 1798,
	-2, 1858,
	-1, 2510,
	84, 1798,
	157, 1798,
	398, 1798,
	399, 1798,
	400, 1798,
	-2, 1872,
	-1, 2511,
	84, 1801,
	157, 1801,
	398, 1801,
	399, 1801,
	400, 1801,
	-2, 1854,
	-1, 2512,
	84, 1801,
	157, 1801,
	398, 1801,
	399, 1801,
	400, 1801,
	-2, 1918,
	-1, 2513,
	84, 1798,
	157, 1798,
	398, 1798,
	399, 1798,
	400, 1798,
	-2, 1939,
	-1, 2726,
	108, 1125,
	152, 1125,
	191, 1125,
	194, 1125,
	282, 1125,
	-2, 1119,
	-1, 2744,
	81, 698,
	157, 698,
	-2, 1303,
	-1, 3158,
	194, 1125,
	306, 1390,
	-2, 1362,
	-1, 3337,
	108, 1125,
	152, 1125,
	191, 1125,
	194, 1125,
	-2, 1243,
	-1, 3339,
	108, 1125,
	152, 1125,
	191, 1125,
	194, 1125,
	-2, 1243,
	-1, 3351,
	81, 698,
	157, 698,
	-2, 1303,
	-1, 3372,
	194, 1125,
	306, 1390,
	-2, 1363,
	-1, 3521,
	108, 1125,
	152, 1125,
	191, 1125,
	194, 1125,
	-2, 1244,
	-1, 3549,
	84, 1205,
	157, 1205,
	-2, 1125,
	-1, 3687,
	84, 1205,
	157, 1205,
	-2, 1125,
	-1, 3843,
	84, 1209,
	157, 1209,
	-2, 1125,
	-1, 3890,
	84, 1210,
	157, 1210,
	-2, 1125,
}

const yyPrivate = 57344

const yyLast = 51289

var yyAct = [...]int{
	752, 729, 3936, 754, 3910, 2774, 213, 3929, 3847, 1929,
	1653, 3453, 3357, 3746, 3854, 3853, 3846, 3687, 3727, 3144,
	3772, 738, 3177, 2777, 3803, 2768, 3249, 3577, 3665, 3386,
	3632, 2568, 731, 3721, 1280, 1649, 3250, 3509, 3508, 3686,
	1489, 3506, 3750, 1422, 2686, 782, 620, 2771, 3605, 1566,
	1021, 3656, 3728, 3457, 37, 3730, 1140, 3448, 1428, 1656,
	638, 1876, 644, 644, 3319, 727, 3153, 2747, 644, 661,
	670, 3324, 1700, 670, 3518, 3115, 2337, 3373, 3101, 3247,
	3530, 3488, 2477, 3075, 3523, 3340, 2883, 2024, 65, 2884,
	2038, 2882, 3104, 2021, 3309, 1714, 2863, 2797, 3342, 3173,
	1988, 198, 3155, 2061, 2879, 2946, 3162, 2440, 2603, 1134,
	3289, 2136, 2094, 1996, 3235, 682, 1578, 2475, 2906, 2715,
	678, 2340, 1889, 667, 3215, 1482, 3082, 3086, 3124, 3080,
	2301, 721, 3076, 1130, 3078, 3050, 3073, 2727, 3161, 3077,
	133, 1398, 2269, 36, 2244, 2245, 2993, 2119, 1806, 2547,
	1562, 726, 2919, 2103, 2102, 2132, 2529, 2095, 2017, 2067,
	945, 2441, 1570, 1991, 2929, 2131, 1989, 2428, 1391, 2704,
	2699, 2799, 2423, 2779, 2300, 643, 643, 2338, 2739, 2290,
	6, 651, 2473, 1919, 1852, 1647, 1078, 2133, 730, 620,
	2166, 1498, 1567, 1598, 1529, 637, 1015, 1462, 1467, 2333,
	1888, 2281, 2636, 720, 2143, 1638, 1707, 739, 1577, 1687,
	209, 8, 1153, 213, 2101, 213, 2098, 1069, 1070, 208,
	7, 1431, 728, 2083, 644, 1581, 1536, 675, 27, 2057,
	1848, 1555, 1646, 1014, 2448, 981, 1411, 1851, 1466, 2424,
	1423, 656, 619, 653, 767, 134, 875, 23, 722, 1407,
	134, 1520, 1715, 684, 108, 16, 1827, 199, 15, 1652,
	14, 944, 2635, 24, 1528, 33, 1464, 17, 10, 927,
	967, 921, 942, 669, 191, 1325, 2140, 685, 1281, 195,
	681, 1030, 877, 878, 3737, 1213, 1214, 1215, 1212, 3650,
	1213, 1214, 1215, 1212, 1432, 2671, 2671, 666, 2450, 2671,
	1066, 1048, 2963, 935, 3354, 936, 1213, 1214, 1215, 1212,
	650, 1394, 3131, 134, 1065, 2962, 1067, 2150, 3481, 1135,
	640, 1358, 3327, 3242, 662, 1136, 2591, 665, 2532, 664,
	2530, 2535, 2533, 1027, 663, 1819, 1029, 651, 1062, 1543,
	649, 1539, 916, 722, 1061, 197, 673, 1344, 1062, 639,
	2243, 897, 895, 2249, 1820, 3060, 930, 2253, 926, 1062,
	1347, 1590, 3045, 3042, 3921, 3043, 3040, 2663, 2661, 1445,
	1813, 1135, 1340, 1049, 1541, 3446, 2942, 2940, 1060, 2072,
	3716, 3612, 1589, 645, 3606, 1213, 1214, 1215, 1212, 1213,
	1214, 1215, 1212, 3449, 3248, 2116, 3732, 1275, 1001, 2097,
	876, 3020, 2089, 2378, 3828, 1175, 196, 3493, 8, 2665,
	2291, 196, 196, 3489, 907, 887, 2585, 7, 1353, 2577,
	196, 2137, 196, 3672, 196, 3341, 2292, 1576, 2733, 3637,
	1585, 3783, 1828, 1831, 1506, 1352, 1350, 1028, 1596, 897,
	895, 196, 134, 1031, 680, 1043, 1038, 1033, 1037, 1041,
	896, 894, 196, 61, 187, 158, 3018, 134, 2148, 134,
	1582, 196, 196, 61, 187, 158, 1383, 3673, 1593, 2877,
	132, 2285, 2965, 1046, 1025, 1026, 2731, 1036, 2467, 1354,
	188, 192, 1584, 2688, 1822, 3639, 932, 179, 925, 2954,
	1595, 189, 192, 1210, 192, 2034, 1366, 929, 928, 196,
	61, 187, 158, 196, 61, 187, 158, 2913, 2914, 132,
	132, 192, 2001, 2002, 910, 2468, 1151, 892, 917, 2912,
	1190, 2689, 192, 1191, 888, 119, 2734, 2548, 1044, 1833,
	1834, 192, 192, 1639, 2000, 990, 1643, 1047, 924, 1468,
	3470, 1470, 1903, 996, 994, 2370, 995, 3044, 3041, 1429,
	1430, 1193, 196, 61, 187, 158, 1655, 934, 1441, 1034,
	1642, 1442, 923, 1607, 3825, 2454, 922, 1208, 2453, 192,
	2701, 2455, 909, 192, 1024, 3857, 3858, 1419, 915, 1619,
	2702, 2232, 1023, 1045, 3735, 3148, 3878, 1203, 196, 61,
	187, 158, 866, 3146, 865, 867, 868, 3821, 869, 870,
	913, 1427, 3719, 3735, 3816, 1426, 1429, 1430, 3734, 140,
	141, 3733, 142, 143, 3734, 3815, 2666, 3251, 2947, 1542,
	1540, 3805, 192, 1035, 3733, 3814, 3808, 3914, 3915, 2700,
	1365, 3805, 3609, 1188, 1002, 2948, 2572, 2949, 933, 3251,
	1145, 2018, 644, 644, 1659, 1156, 1644, 3830, 3831, 1444,
	2152, 2818, 1148, 644, 1144, 2008, 998, 3743, 192, 3310,
	3826, 3827, 2690, 1156, 914, 3722, 3723, 3724, 3725, 3264,
	1641, 3095, 670, 670, 1634, 644, 2144, 1143, 3498, 3317,
	3469, 157, 185, 194, 186, 117, 2413, 2280, 3471, 3087,
	3624, 3097, 3625, 933, 2080, 2582, 2707, 1189, 1549, 1548,
	1042, 1072, 2691, 184, 178, 177, 3398, 2983, 3619, 3823,
	67, 2981, 667, 667, 2149, 3641, 3642, 1206, 1207, 1205,
	1000, 183, 157, 1628, 194, 2376, 1455, 3092, 3093, 1178,
	3447, 2664, 3856, 2941, 2416, 2417, 1039, 2012, 1253, 1040,
	3624, 931, 3625, 3094, 184, 3091, 3627, 2869, 1030, 2032,
	2033, 2415, 3646, 3495, 3102, 643, 1133, 3293, 2421, 2127,
	1343, 1200, 3413, 1658, 1657, 636, 1142, 3150, 3176, 3885,
	3736, 180, 181, 182, 1192, 3649, 1417, 3626, 3113, 1137,
	920, 3267, 2987, 1367, 1144, 2670, 2470, 1640, 1166, 3677,
	1136, 716, 2138, 3125, 718, 1170, 3627, 999, 1136, 717,
	1027, 1201, 1202, 1029, 190, 1136, 2138, 1285, 2138, 2684,
	3174, 3175, 1443, 3765, 3760, 890, 1284, 2964, 3410, 2250,
	1821, 1030, 2961, 2740, 3669, 128, 1591, 3626, 2865, 183,
	2408, 129, 3403, 672, 2139, 1665, 1668, 1669, 2171, 1050,
	1032, 671, 1062, 1158, 1157, 2875, 1666, 2685, 1062, 1247,
	1062, 1062, 2287, 891, 3051, 3829, 3751, 1136, 3767, 3089,
	1062, 1158, 1157, 1062, 2155, 2157, 2158, 3103, 3671, 3358,
	2151, 3773, 3145, 1027, 1150, 2773, 1029, 3365, 668, 3302,
	908, 906, 2769, 2770, 2265, 2773, 666, 666, 130, 2531,
	1406, 3636, 1346, 1544, 1348, 3179, 3300, 3064, 2411, 1147,
	1149, 60, 134, 134, 1028, 3414, 3742, 679, 1159, 3568,
	1363, 638, 3947, 662, 662, 3640, 665, 665, 664, 664,
	876, 2713, 3460, 663, 663, 668, 1139, 2388, 2662, 3557,
	3494, 1323, 1138, 1026, 1328, 1161, 997, 159, 1829, 2586,
	62, 2387, 159, 159, 945, 1163, 1164, 3301, 1254, 3678,
	62, 159, 1478, 159, 1167, 159, 1249, 1250, 1251, 1252,
	1169, 1823, 1132, 1477, 1183, 1429, 1430, 1185, 935, 2356,
	936, 1168, 159, 1429, 1430, 2336, 2359, 1245, 668, 2019,
	1421, 1420, 3103, 159, 3670, 138, 193, 62, 139, 3563,
	2343, 1404, 159, 159, 893, 1186, 3151, 644, 58, 1403,
	1457, 3620, 1418, 3088, 644, 3621, 3098, 620, 620, 2706,
	1425, 3822, 1195, 1402, 668, 1196, 3774, 620, 620, 3932,
	3845, 1493, 1493, 2984, 644, 2470, 1629, 193, 3657, 1630,
	159, 3643, 3691, 2358, 159, 3343, 2819, 3154, 2820, 2821,
	62, 2409, 2410, 1198, 1131, 670, 1521, 638, 3499, 2009,
	3039, 3620, 1532, 1532, 2379, 3729, 1491, 1491, 2336, 1244,
	2353, 3090, 1495, 213, 131, 45, 2710, 2711, 1635, 3444,
	1359, 59, 620, 1296, 1297, 5, 62, 1179, 2357, 1667,
	680, 2709, 1500, 159, 135, 136, 3254, 3178, 137, 3802,
	991, 1465, 1400, 3578, 3579, 3580, 3584, 3582, 3583, 3581,
	3170, 1175, 3055, 1181, 1375, 2578, 1364, 2459, 2156, 2374,
	1452, 2141, 2346, 3174, 3175, 1184, 1187, 1463, 2007, 159,
	1986, 2676, 1456, 1330, 1574, 1194, 3206, 1550, 2342, 1579,
	1825, 2011, 2986, 2344, 3111, 1381, 1588, 1499, 1380, 1379,
	1378, 1180, 1003, 674, 1487, 1488, 2719, 2722, 2723, 2724,
	2720, 2721, 3303, 1327, 3171, 1368, 3570, 3933, 1329, 2908,
	2910, 1617, 3690, 991, 1199, 2167, 2153, 2154, 2264, 2924,
	2925, 1612, 1613, 993, 2681, 1493, 992, 1493, 1144, 3559,
	2816, 3290, 1369, 3558, 1388, 1583, 2258, 2345, 1174, 1197,
	2995, 2994, 1594, 2260, 2259, 1597, 937, 1413, 1414, 3844,
	1357, 1654, 1836, 1472, 1474, 667, 1837, 2343, 2346, 939,
	940, 941, 3479, 1485, 1486, 3057, 1390, 1627, 1182, 1030,
	1355, 1356, 934, 3564, 3565, 2257, 1030, 2838, 2839, 1360,
	1361, 1835, 898, 1446, 1447, 1370, 1371, 1372, 1373, 1374,
	1433, 1376, 1522, 1436, 2347, 1493, 993, 1382, 2400, 992,
	899, 1564, 1565, 1408, 1412, 1412, 1412, 3531, 2201, 1399,
	1397, 2200, 1713, 1616, 3112, 3130, 1587, 1405, 1545, 2352,
	3943, 1502, 1615, 2350, 1415, 650, 1762, 3948, 1408, 1408,
	1701, 1636, 1434, 1435, 1572, 1437, 1438, 1476, 1439, 3930,
	3931, 3938, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682,
	1683, 1684, 1685, 1686, 902, 649, 1501, 134, 1698, 1699,
	1513, 1553, 1569, 1556, 1557, 1573, 3255, 1533, 1519, 3812,
	1534, 3927, 1211, 3212, 3892, 1558, 1559, 2470, 2909, 3208,
	1175, 2438, 1651, 1399, 1211, 1053, 1058, 1059, 2847, 3865,
	2347, 2746, 1144, 2146, 2677, 2342, 2336, 2341, 1824, 2339,
	2344, 2837, 2550, 1826, 1632, 901, 1771, 3172, 1173, 904,
	903, 1840, 1841, 1747, 3939, 1815, 1521, 1804, 3859, 3306,
	1670, 1849, 1493, 1854, 1855, 134, 1857, 1457, 644, 666,
	2316, 1600, 134, 644, 1004, 3841, 1493, 1752, 1753, 1754,
	945, 1625, 1606, 1877, 3893, 134, 1605, 3893, 2439, 1608,
	1768, 2272, 1493, 1769, 2345, 2180, 662, 134, 1457, 665,
	3793, 664, 3866, 661, 1807, 3768, 663, 1626, 1622, 3756,
	1782, 1783, 991, 1621, 2273, 2274, 1624, 1645, 3710, 1761,
	1623, 1620, 2745, 1902, 1648, 1213, 1214, 1215, 1212, 1803,
	3266, 3653, 1909, 1909, 2060, 1457, 1689, 1457, 1457, 3709,
	3704, 644, 644, 1650, 1976, 1849, 1980, 2439, 3842, 1493,
	1983, 1984, 3703, 1696, 1697, 1998, 2373, 723, 1213, 1214,
	1215, 1212, 3212, 3702, 1744, 1745, 3701, 1748, 2237, 3681,
	620, 2179, 1493, 3653, 2577, 1763, 1141, 3183, 2146, 3680,
	1856, 1859, 3757, 3652, 2283, 1906, 1864, 3419, 1770, 1858,
	1772, 3711, 1773, 1774, 1775, 993, 3367, 3333, 992, 644,
	1849, 1493, 3181, 2043, 2315, 644, 644, 644, 678, 678,
	3282, 1810, 2305, 3653, 1141, 2053, 2054, 2055, 2056, 1055,
	1056, 1057, 2062, 3049, 3047, 3653, 1879, 1931, 1172, 213,
	3278, 3191, 213, 213, 2035, 213, 3653, 1978, 2903, 3653,
	2439, 1776, 2146, 1213, 1214, 1215, 1212, 1894, 1213, 1214,
	1215, 1212, 2146, 2927, 1915, 1916, 3653, 1912, 2693, 1811,
	2470, 1805, 2746, 1901, 1637, 2667, 1904, 1905, 2567, 3368,
	3334, 2027, 2028, 2555, 2058, 1762, 1762, 2105, 2848, 2850,
	2851, 2852, 2849, 3283, 2013, 2642, 1762, 1762, 2004, 3016,
	2006, 2634, 2593, 2121, 2177, 2045, 2046, 2047, 2137, 1999,
	2282, 2025, 2026, 3279, 3192, 1173, 2329, 1844, 1880, 1881,
	2575, 2439, 2039, 880, 881, 882, 883, 2042, 2039, 2039,
	2039, 1853, 1211, 1890, 1877, 1892, 1893, 2020, 1493, 2135,
	2071, 2115, 1583, 2074, 2075, 1869, 2077, 1913, 1914, 1899,
	1878, 1874, 1885, 1895, 1873, 2242, 1891, 880, 881, 882,
	883, 1883, 2236, 2235, 667, 1900, 2208, 2128, 1211, 2563,
	1324, 2557, 2030, 1030, 1211, 1211, 1030, 2552, 1063, 1064,
	2544, 1908, 1910, 1068, 1030, 1977, 2542, 1985, 1845, 1846,
	1847, 1389, 1704, 2305, 1479, 2129, 1982, 1408, 2107, 1987,
	1860, 1861, 1862, 1863, 2540, 2538, 2111, 2304, 2238, 1997,
	2003, 1412, 2005, 2014, 1175, 1886, 1887, 2215, 1853, 2214,
	2199, 3955, 3940, 1412, 3354, 1027, 2931, 2190, 1029, 2189,
	2748, 2580, 1896, 1897, 2579, 1504, 1027, 2188, 2100, 1029,
	2040, 2145, 2553, 2041, 2558, 2048, 2049, 1609, 2571, 2100,
	2553, 2323, 1907, 2545, 2196, 2181, 2126, 2065, 3316, 2543,
	2164, 2165, 2068, 2066, 2037, 1911, 2051, 2611, 1602, 1261,
	1648, 1160, 885, 3761, 1128, 1123, 1228, 2539, 2539, 1030,
	2305, 2237, 3594, 134, 3417, 2085, 134, 134, 3135, 134,
	1211, 1244, 1211, 1211, 2117, 1122, 1118, 1119, 1120, 1121,
	1211, 2616, 1211, 2615, 2614, 2612, 885, 2160, 2029, 3126,
	1211, 2114, 2112, 2106, 2146, 3532, 3346, 3762, 1751, 1750,
	1610, 2247, 2248, 2125, 2251, 1751, 1750, 2254, 3344, 1028,
	2978, 1027, 134, 1395, 1029, 900, 1409, 1396, 666, 1483,
	1028, 2530, 2130, 721, 3949, 1481, 644, 644, 644, 3918,
	1484, 2124, 2371, 3738, 134, 2123, 3651, 3616, 3561, 3533,
	3347, 644, 644, 644, 644, 662, 3560, 3546, 665, 3502,
	664, 2613, 3345, 1695, 2302, 663, 3326, 3213, 3204, 2159,
	1440, 1213, 1214, 1215, 1212, 2308, 1457, 3127, 2168, 1692,
	1694, 1691, 3243, 1693, 2209, 2210, 3198, 2212, 3193, 1689,
	3106, 2161, 1450, 1451, 2219, 1453, 1454, 2872, 1458, 1459,
	1460, 2069, 1457, 2173, 2871, 2162, 2163, 1227, 1226, 1236,
	1237, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1228, 2365,
	1788, 3128, 2717, 2672, 2590, 1245, 2203, 1781, 2596, 2556,
	2461, 1508, 1509, 1510, 1511, 1512, 1480, 1514, 1515, 1516,
	1517, 1518, 2110, 2109, 1410, 1524, 1525, 1526, 1527, 2276,
	2277, 2278, 1227, 1226, 1236, 1237, 1229, 1230, 1231, 1232,
	1233, 1234, 1235, 1228, 2293, 2294, 2295, 2296, 2108, 905,
	1385, 1395, 2372, 1384, 1146, 1396, 644, 1909, 1231, 1232,
	1233, 1234, 1235, 1228, 2443, 2443, 1998, 2443, 1213, 1214,
	1215, 1212, 2231, 2233, 2234, 2239, 3240, 2600, 2524, 2534,
	1708, 2933, 2617, 2618, 2320, 3813, 620, 620, 2322, 1708,
	2324, 2174, 1839, 1537, 1144, 2069, 2343, 2346, 2310, 2311,
	1493, 644, 1215, 1212, 2325, 1212, 3573, 3572, 2313, 2314,
	1213, 1214, 1215, 1212, 2950, 644, 2266, 1285, 2808, 3241,
	2806, 1144, 2514, 638, 2785, 2783, 1284, 2335, 2284, 1532,
	3552, 1998, 2334, 3496, 2519, 2465, 2521, 3923, 3503, 3504,
	213, 3946, 3922, 3869, 2478, 1229, 1230, 1231, 1232, 1233,
	1234, 1235, 1228, 3314, 1030, 2328, 2309, 1219, 1220, 1221,
	1222, 1223, 1224, 1225, 1217, 2655, 2447, 2656, 2456, 1463,
	2457, 3840, 2445, 1263, 2449, 1213, 1214, 1215, 1212, 3839,
	2560, 3763, 2687, 1766, 2602, 2859, 1262, 2312, 3706, 2462,
	2463, 3497, 2318, 2348, 2349, 2319, 2354, 2573, 1767, 3320,
	3009, 2135, 3694, 2857, 3945, 2472, 1027, 2855, 1493, 1029,
	1493, 3315, 1493, 2321, 1499, 3684, 3674, 1144, 1213, 1214,
	1215, 1212, 2844, 3607, 2997, 2592, 3535, 2526, 2039, 2347,
	3534, 2518, 3359, 3348, 2342, 2336, 2341, 2178, 2339, 2344,
	2587, 2525, 3313, 2858, 2716, 2583, 1213, 1214, 1215, 1212,
	2331, 1493, 2620, 2422, 2418, 1538, 1213, 1214, 1215, 1212,
	3008, 2856, 1216, 3194, 1537, 2854, 3096, 2627, 2451, 2516,
	1246, 1412, 1493, 2569, 2570, 3325, 2974, 2192, 2523, 1256,
	2843, 2317, 1472, 1474, 2945, 2944, 1491, 1213, 1214, 1215,
	1212, 2619, 2466, 2345, 1213, 1214, 1215, 1212, 3850, 2469,
	1213, 1214, 1215, 1212, 1264, 3749, 2626, 1491, 2842, 2841,
	2446, 2840, 2628, 1213, 1214, 1215, 1212, 2832, 2515, 2826,
	2674, 2675, 2825, 2517, 2678, 1213, 1214, 1215, 1212, 2604,
	2824, 2604, 1213, 1214, 1215, 1212, 2631, 2632, 2823, 2629,
	2668, 2546, 1144, 2458, 2191, 2241, 1144, 1213, 1214, 1215,
	1212, 2088, 2087, 1493, 2086, 2082, 1457, 2608, 2081, 3081,
	2036, 2184, 1980, 1832, 1830, 2694, 2589, 1603, 1342, 2478,
	2744, 1213, 1214, 1215, 1212, 1997, 2750, 2584, 3475, 2565,
	3644, 3645, 716, 1126, 134, 718, 3463, 2574, 2576, 3942,
	717, 2598, 3941, 2581, 2760, 2659, 3454, 3916, 3884, 3883,
	1213, 1214, 1215, 1212, 1144, 1213, 1214, 1215, 1212, 3880,
	3819, 2176, 2782, 1213, 1214, 1215, 1212, 3818, 2732, 1144,
	1144, 1144, 1909, 2594, 2595, 1144, 3633, 2792, 2793, 2794,
	2795, 1144, 2802, 1475, 2803, 2804, 2610, 2805, 3800, 2807,
	1125, 3462, 3745, 2788, 2789, 2728, 3780, 3507, 2791, 3726,
	2802, 2741, 1030, 2729, 2798, 1213, 1214, 1215, 1212, 3717,
	2597, 3698, 2443, 3693, 3692, 3776, 3648, 1648, 1213, 1214,
	1215, 1212, 3635, 3634, 3407, 3608, 2860, 3554, 2714, 3629,
	2763, 3514, 3500, 2742, 1931, 3482, 620, 1213, 1214, 1215,
	1212, 2044, 1980, 2751, 3480, 3477, 1144, 1998, 1998, 1998,
	1998, 1213, 1214, 1215, 1212, 2761, 3474, 3473, 3452, 1144,
	1998, 3450, 3427, 2443, 3424, 2696, 3421, 2698, 2864, 2885,
	3312, 3311, 3308, 3298, 2753, 3291, 2866, 3275, 2695, 2756,
	1493, 2780, 2885, 3273, 3201, 2780, 2776, 2712, 3200, 3195,
	3189, 644, 644, 2735, 2743, 3188, 3107, 2637, 2638, 3068,
	3067, 2787, 2377, 2643, 2749, 2380, 2381, 2382, 2383, 2384,
	2385, 2386, 3063, 3061, 2389, 2390, 2391, 2392, 2393, 2394,
	2395, 2396, 2397, 2398, 2399, 2762, 2401, 2402, 2403, 2404,
	2405, 2775, 2406, 2765, 8, 2778, 3059, 2784, 3056, 1531,
	1531, 3054, 2246, 7, 2790, 2899, 2988, 213, 2985, 2943,
	2917, 2853, 213, 2845, 2835, 2833, 2829, 2828, 134, 2827,
	2682, 2680, 1853, 2759, 2673, 2669, 3270, 2566, 134, 2261,
	2256, 2822, 2255, 2834, 1762, 2252, 1762, 822, 821, 2960,
	2091, 2928, 1236, 1237, 1229, 1230, 1231, 1232, 1233, 1234,
	1235, 1228, 2973, 1213, 1214, 1215, 1212, 2084, 1493, 1838,
	1818, 2980, 1817, 2867, 2921, 2922, 3012, 1604, 2873, 1507,
	1393, 3628, 1351, 2886, 2887, 2888, 2889, 1349, 1292, 1288,
	1287, 1129, 889, 2900, 2902, 2898, 3617, 2955, 3011, 2901,
	3476, 3461, 2870, 1213, 1214, 1215, 1212, 3339, 2966, 3338,
	2918, 2752, 3337, 3305, 3287, 2915, 3010, 3285, 2934, 3284,
	2757, 2758, 3281, 2938, 3280, 1213, 1214, 1215, 1212, 1807,
	3274, 1030, 3272, 196, 2959, 187, 158, 1564, 1565, 3256,
	3246, 3245, 1030, 1213, 1214, 1215, 1212, 3231, 3230, 2911,
	3136, 3071, 2781, 3046, 3002, 1749, 3004, 2957, 3014, 3007,
	2999, 1997, 1997, 1997, 1997, 1572, 2998, 2967, 3058, 1660,
	1661, 1662, 1663, 1664, 1997, 2936, 3062, 2935, 2932, 2992,
	3065, 3066, 2926, 2692, 2977, 2541, 2982, 2537, 1144, 2536,
	2953, 2220, 2213, 1569, 3084, 2207, 1573, 2956, 2951, 2206,
	2958, 2205, 1557, 192, 3100, 2970, 2969, 2204, 2968, 644,
	2202, 1705, 1558, 1559, 2198, 1709, 1710, 1711, 1712, 2197,
	2195, 3116, 1144, 2976, 1746, 644, 2989, 1144, 1144, 3792,
	2186, 2183, 1756, 2182, 755, 765, 1998, 2302, 2990, 3134,
	2090, 1801, 1800, 2996, 756, 1799, 757, 761, 764, 760,
	758, 759, 1765, 3048, 3005, 3006, 3003, 1764, 2365, 1755,
	1505, 134, 2653, 1503, 3868, 196, 134, 3070, 1282, 3110,
	3160, 3775, 3163, 3712, 3163, 3163, 3700, 1735, 3119, 1144,
	3695, 1552, 3588, 3123, 1808, 3571, 3567, 134, 3545, 1213,
	1214, 1215, 1212, 3529, 3437, 3435, 3052, 3184, 134, 762,
	2652, 2728, 3405, 3404, 3401, 1493, 1493, 3053, 3180, 3143,
	1030, 3400, 1030, 3366, 3363, 3361, 2703, 1030, 3147, 3149,
	3182, 3328, 3108, 1563, 1554, 1568, 3069, 1213, 1214, 1215,
	1212, 763, 1571, 3000, 3001, 192, 3132, 1560, 3120, 1392,
	1491, 1491, 2861, 1030, 2786, 3185, 3186, 2737, 2736, 2730,
	3158, 2697, 644, 2654, 3109, 2551, 3138, 1882, 3118, 3084,
	2460, 2407, 1027, 3121, 3122, 1029, 3129, 3133, 1457, 2303,
	2275, 1980, 1980, 2240, 1690, 192, 3159, 2050, 1843, 1814,
	3168, 3142, 1898, 1633, 3137, 1586, 3021, 3022, 1561, 3139,
	3140, 2335, 3023, 3024, 3025, 3026, 2334, 3027, 3028, 3029,
	3030, 3031, 3032, 3033, 3034, 3035, 3036, 2651, 2814, 2815,
	1341, 3169, 3164, 3165, 1326, 1322, 1321, 1320, 1144, 1319,
	1318, 1317, 2620, 2830, 2831, 1316, 1315, 1314, 1313, 1312,
	1311, 3244, 1310, 1309, 1213, 1214, 1215, 1212, 1308, 1307,
	1808, 2478, 3190, 1731, 1306, 1808, 1808, 1305, 1304, 2868,
	1728, 1303, 1302, 1301, 1730, 1727, 1729, 1733, 1734, 1300,
	1299, 1298, 1732, 1295, 1294, 2039, 1028, 1293, 134, 1291,
	1290, 1289, 1286, 134, 1279, 3209, 3210, 644, 2650, 1278,
	1997, 3898, 2649, 1276, 3203, 3197, 3199, 3196, 3790, 2648,
	3207, 3202, 1275, 1274, 1273, 2070, 1272, 1271, 2073, 134,
	2647, 2076, 1270, 3220, 2078, 1213, 1214, 1215, 1212, 1213,
	1214, 1215, 1212, 2646, 3224, 3211, 1213, 1214, 1215, 1212,
	3227, 3228, 3229, 1269, 1268, 1454, 2645, 1213, 1214, 1215,
	1212, 3223, 1267, 1266, 1265, 3233, 1260, 3239, 1259, 1258,
	1213, 1214, 1215, 1212, 2644, 1257, 1177, 2062, 3295, 1127,
	3788, 3297, 3786, 1213, 1214, 1215, 1212, 3257, 2641, 2120,
	3402, 3141, 3216, 3217, 2307, 3259, 2289, 1165, 3258, 3896,
	2604, 1213, 1214, 1215, 1212, 3855, 3219, 2718, 2471, 3263,
	2093, 3262, 1176, 3222, 3276, 1213, 1214, 1215, 1212, 2897,
	3265, 2435, 2436, 644, 1980, 2895, 3268, 3166, 2640, 3299,
	2896, 3221, 2639, 2892, 3332, 2891, 1738, 1739, 1740, 1741,
	1742, 1743, 1736, 1737, 2633, 2890, 3550, 3304, 2893, 118,
	2443, 1998, 3351, 2894, 3307, 1213, 1214, 1215, 1212, 1213,
	1214, 1215, 1212, 2564, 64, 3288, 1386, 2554, 3105, 3439,
	2623, 1213, 1214, 1215, 1212, 3369, 63, 3440, 1144, 2972,
	3294, 1030, 2599, 3292, 1871, 1872, 2375, 3160, 1030, 1703,
	3412, 1144, 2170, 1866, 1867, 1868, 2175, 1213, 1214, 1215,
	1212, 3370, 1144, 3234, 3416, 3156, 1969, 3157, 1493, 1213,
	1214, 1215, 1212, 3321, 3409, 646, 1213, 1214, 1215, 1212,
	3260, 3261, 3353, 1546, 2549, 2798, 3438, 644, 3323, 1980,
	647, 2810, 3360, 1144, 3362, 2588, 2039, 2187, 2811, 2812,
	2813, 1599, 648, 1491, 1580, 2194, 2569, 2570, 3418, 2262,
	2052, 3350, 1171, 3079, 3072, 3399, 2885, 3349, 2764, 2738,
	2327, 3356, 213, 3392, 2298, 1875, 1842, 2211, 1751, 1750,
	1337, 1338, 2216, 2217, 2218, 1144, 3907, 2221, 2222, 2223,
	2224, 2225, 2226, 2227, 2228, 2229, 2230, 3441, 3431, 3697,
	3428, 3411, 3408, 3406, 3352, 1335, 1336, 3187, 2885, 3415,
	1333, 1334, 2419, 3355, 1331, 1332, 2414, 1981, 1449, 3420,
	3422, 1448, 3423, 3425, 3478, 1204, 3426, 3429, 3226, 2920,
	3430, 3433, 3432, 3485, 2263, 2122, 1401, 1144, 2430, 2434,
	2435, 2436, 2431, 1377, 2432, 2437, 3459, 134, 2433, 1424,
	2039, 3875, 3873, 3833, 134, 3810, 3809, 3807, 3752, 1144,
	1493, 1493, 3713, 3602, 3601, 3116, 3540, 3451, 3277, 3456,
	3253, 3455, 3252, 3445, 3237, 3483, 3484, 3522, 2360, 3522,
	2330, 1601, 3510, 3236, 3443, 2930, 1399, 3900, 3899, 1141,
	3296, 2975, 1144, 3539, 1144, 1491, 1701, 2679, 3516, 3517,
	3512, 2291, 3542, 2185, 3544, 1997, 1345, 1162, 1416, 3899,
	3900, 1493, 3569, 3232, 72, 1654, 3487, 1654, 2, 3492,
	3491, 3490, 3519, 3919, 3472, 200, 3, 3920, 3526, 644,
	3501, 1144, 1144, 3513, 1, 1144, 1144, 2660, 1812, 1339,
	3515, 884, 879, 1469, 3527, 2452, 1701, 2031, 1497, 3353,
	1816, 886, 2904, 2905, 3510, 3510, 1030, 3225, 3510, 3510,
	3590, 3585, 3547, 2907, 2683, 3548, 1877, 3538, 3599, 3575,
	3576, 2142, 3553, 3586, 3587, 2874, 2412, 3603, 3604, 3399,
	3551, 2279, 3099, 3555, 1387, 938, 1757, 3392, 1614, 1052,
	1493, 2107, 880, 881, 882, 883, 1155, 1141, 1611, 1154,
	1152, 1706, 1808, 769, 1808, 3596, 3591, 2096, 2862, 2836,
	3630, 3598, 3906, 3935, 3867, 3909, 134, 1631, 753, 3801,
	3623, 3536, 3537, 1808, 1808, 1491, 3718, 3597, 3595, 3871,
	3615, 1226, 1236, 1237, 1229, 1230, 1231, 1232, 1233, 1234,
	1235, 1228, 3574, 3720, 3610, 3613, 2147, 3614, 1209, 2952,
	963, 3618, 810, 780, 3622, 945, 1531, 1277, 1592, 3019,
	3666, 3660, 3017, 1054, 779, 3464, 3318, 3465, 2708, 2923,
	3668, 3685, 1051, 964, 2079, 3715, 1144, 3611, 1547, 1551,
	2326, 3676, 3771, 3549, 3152, 2772, 3683, 1575, 3766, 3689,
	3654, 3364, 3468, 3466, 3467, 686, 3647, 2010, 618, 1654,
	1012, 3589, 2092, 687, 3661, 3658, 2559, 3459, 2562, 3663,
	3662, 2425, 134, 2306, 3824, 3699, 918, 2288, 3679, 1144,
	919, 911, 2726, 3675, 1493, 1227, 1226, 1236, 1237, 1229,
	1230, 1231, 1232, 1233, 1234, 1235, 1228, 2725, 1671, 1030,
	1218, 1688, 3510, 3037, 3038, 3696, 1255, 725, 2430, 2434,
	2435, 2436, 2431, 2172, 2432, 2437, 2705, 3705, 2433, 1491,
	3387, 2916, 71, 70, 3707, 69, 68, 221, 3741, 771,
	220, 3731, 2601, 3631, 3505, 2607, 3797, 3911, 751, 750,
	749, 748, 2621, 2622, 1144, 747, 3329, 3330, 3331, 3714,
	2624, 2625, 3335, 3336, 746, 2429, 2427, 2426, 1993, 3753,
	1992, 2059, 3114, 2801, 2796, 1920, 2630, 3510, 1918, 1461,
	2355, 3739, 2362, 1917, 3852, 3781, 3748, 3782, 3566, 2846,
	3458, 3747, 3744, 1865, 2351, 1937, 2817, 3770, 1934, 1933,
	2809, 1144, 3562, 3556, 1660, 1808, 3755, 1965, 3664, 1493,
	3521, 3371, 3795, 3798, 3372, 3785, 3787, 3789, 3791, 3764,
	3378, 2297, 1077, 1073, 3510, 3799, 1075, 3769, 1076, 1074,
	2609, 3778, 3205, 2332, 3074, 2271, 2270, 2268, 2267, 3784,
	1362, 3740, 3543, 3820, 1491, 3486, 2476, 2474, 1124, 3794,
	3218, 3214, 2104, 2118, 3806, 1493, 3804, 2971, 3666, 1994,
	1990, 2876, 2420, 3638, 1870, 134, 912, 2286, 3817, 41,
	115, 105, 175, 56, 3843, 174, 55, 113, 3834, 172,
	3851, 3832, 54, 2754, 2755, 100, 3836, 99, 112, 170,
	1491, 3837, 3838, 53, 205, 3835, 1227, 1226, 1236, 1237,
	1229, 1230, 1231, 1232, 1233, 1234, 1235, 1228, 204, 207,
	206, 203, 2527, 2528, 3860, 202, 3861, 1535, 3862, 3874,
	3863, 3876, 3877, 3864, 201, 3811, 3525, 874, 44, 3872,
	3870, 43, 3879, 176, 1144, 3731, 42, 106, 57, 40,
	39, 38, 34, 13, 12, 951, 35, 22, 21, 1618,
	20, 26, 32, 3689, 3888, 31, 127, 3886, 126, 30,
	125, 3890, 3891, 3889, 124, 123, 122, 3905, 3895, 3913,
	3897, 121, 3912, 3894, 3901, 3902, 3903, 3904, 120, 29,
	19, 48, 47, 46, 9, 116, 3924, 3917, 1144, 111,
	109, 28, 110, 107, 196, 61, 187, 158, 3925, 103,
	3770, 3926, 3928, 101, 83, 82, 81, 96, 3934, 3937,
	95, 1654, 188, 94, 93, 948, 949, 92, 91, 179,
	89, 90, 962, 189, 80, 79, 991, 78, 77, 76,
	98, 104, 3944, 102, 87, 97, 88, 86, 85, 84,
	3913, 3951, 132, 3912, 3950, 75, 74, 73, 156, 155,
	3937, 3952, 154, 153, 152, 150, 3956, 119, 151, 3592,
	149, 148, 147, 3593, 192, 1777, 1778, 1779, 1780, 3376,
	146, 1784, 1785, 1786, 1787, 1789, 1790, 1791, 1792, 1793,
	1794, 1795, 1796, 1797, 1798, 145, 144, 49, 1213, 1214,
	1215, 1212, 50, 51, 52, 166, 165, 167, 2937, 169,
	2939, 171, 168, 173, 163, 161, 164, 162, 3388, 993,
	160, 66, 992, 11, 114, 18, 25, 4, 0, 1808,
	0, 3379, 0, 0, 1808, 0, 0, 0, 0, 0,
	0, 0, 3374, 0, 0, 2120, 0, 3396, 3397, 0,
	0, 140, 141, 3375, 142, 143, 0, 0, 0, 0,
	977, 0, 0, 0, 0, 0, 0, 0, 952, 0,
	0, 0, 0, 0, 3541, 0, 0, 1735, 0, 0,
	2991, 0, 0, 1239, 0, 1243, 0, 0, 0, 0,
	3380, 0, 0, 0, 0, 954, 0, 0, 0, 0,
	0, 1240, 1242, 1238, 3013, 1241, 1227, 1226, 1236, 1237,
	1229, 1230, 1231, 1232, 1233, 1234, 1235, 1228, 0, 0,
	0, 0, 0, 157, 185, 194, 186, 117, 1227, 1226,
	1236, 1237, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1228,
	2169, 0, 0, 0, 0, 184, 178, 177, 0, 0,
	3708, 0, 67, 0, 0, 0, 0, 0, 0, 0,
	976, 974, 0, 0, 1227, 1226, 1236, 1237, 1229, 1230,
	1231, 1232, 1233, 1234, 1235, 1228, 0, 0, 0, 0,
	0, 0, 973, 0, 0, 3395, 0, 2341, 0, 0,
	0, 0, 0, 0, 947, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 953, 986, 0, 0, 0,
	0, 0, 3384, 180, 181, 182, 0, 3754, 0, 0,
	0, 0, 3758, 3759, 0, 0, 0, 0, 0, 982,
	0, 0, 0, 0, 3381, 3385, 3383, 3382, 0, 0,
	0, 0, 0, 1731, 0, 0, 190, 0, 0, 0,
	1728, 0, 0, 3779, 1730, 1727, 1729, 1733, 1734, 0,
	0, 0, 1732, 0, 3167, 983, 987, 128, 0, 0,
	0, 183, 0, 129, 3390, 3391, 0, 0, 0, 0,
	0, 1966, 0, 0, 0, 970, 1927, 968, 972, 990,
	0, 0, 0, 969, 966, 965, 0, 971, 956, 957,
	955, 958, 959, 960, 961, 0, 988, 0, 989, 0,
	0, 0, 0, 0, 0, 0, 1969, 1936, 0, 984,
	985, 0, 3398, 0, 0, 0, 1970, 1971, 0, 0,
	130, 0, 0, 0, 3377, 0, 0, 0, 0, 0,
	3389, 0, 0, 60, 0, 0, 0, 0, 0, 0,
	0, 0, 1935, 0, 0, 0, 980, 0, 0, 0,
	3015, 0, 979, 0, 0, 0, 0, 0, 1943, 0,
	0, 0, 0, 0, 0, 0, 0, 975, 0, 0,
	0, 3881, 3882, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 62, 0, 0, 1716, 1717, 1718, 1719, 1720,
	1721, 1722, 1723, 1724, 1725, 1726, 1738, 1739, 1740, 1741,
	1742, 1743, 1736, 1737, 1227, 1226, 1236, 1237, 1229, 1230,
	1231, 1232, 1233, 1234, 1235, 1228, 0, 138, 193, 0,
	139, 0, 0, 0, 0, 159, 1959, 0, 0, 0,
	58, 1227, 1226, 1236, 1237, 1229, 1230, 1231, 1232, 1233,
	1234, 1235, 1228, 0, 1096, 978, 0, 0, 0, 0,
	0, 950, 946, 0, 0, 0, 0, 0, 0, 0,
	3394, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3269, 0, 0,
	0, 0, 0, 0, 3271, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 131, 45, 1926, 1928,
	1925, 0, 1922, 59, 0, 0, 0, 1947, 0, 0,
	0, 0, 0, 0, 0, 3286, 135, 136, 1953, 0,
	137, 0, 1966, 0, 0, 0, 1938, 1927, 1921, 0,
	0, 0, 0, 0, 0, 0, 3393, 0, 1941, 1975,
	1735, 0, 1942, 1944, 1946, 0, 1948, 1949, 1950, 1954,
	1955, 1956, 1958, 1961, 1962, 1963, 0, 1969, 1936, 0,
	0, 0, 0, 1951, 1960, 1952, 1081, 1970, 1971, 0,
	1071, 0, 0, 0, 0, 1930, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1104, 1108, 1110, 1112,
	1114, 1115, 1117, 1935, 1122, 1118, 1119, 1120, 1121, 1967,
	1099, 1100, 1101, 1102, 1079, 1080, 1105, 0, 1082, 1943,
	1084, 1085, 1086, 1087, 1083, 1088, 1089, 1090, 1091, 1092,
	1095, 1097, 1093, 1094, 1103, 0, 1923, 1924, 0, 0,
	0, 0, 1107, 1109, 1111, 1113, 1116, 0, 0, 0,
	0, 0, 0, 0, 1964, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1940, 0, 0, 0, 0, 0, 1808, 1939, 0,
	1098, 0, 0, 0, 0, 0, 0, 1959, 0, 0,
	0, 1808, 0, 0, 3434, 0, 0, 3436, 0, 0,
	0, 0, 1957, 0, 0, 0, 0, 0, 0, 0,
	0, 1945, 0, 0, 3442, 0, 1731, 0, 0, 0,
	0, 0, 0, 1728, 1973, 1972, 0, 1730, 1727, 1729,
	1733, 1734, 0, 0, 0, 1732, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1926,
	2767, 1925, 0, 2766, 0, 0, 0, 0, 1947, 0,
	0, 0, 0, 0, 0, 0, 0, 1932, 0, 1953,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1941,
	1975, 0, 0, 1942, 1944, 1946, 0, 1948, 1949, 1950,
	1954, 1955, 1956, 1958, 1961, 1962, 1963, 0, 0, 1968,
	0, 0, 1974, 0, 1951, 1960, 1952, 0, 698, 697,
	704, 694, 0, 0, 0, 0, 1930, 0, 0, 0,
	701, 702, 0, 703, 707, 0, 0, 688, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 712, 0, 0,
	1967, 0, 0, 1096, 0, 0, 0, 0, 1716, 1717,
	1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726, 1738,
	1739, 1740, 1741, 1742, 1743, 1736, 1737, 1923, 1924, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 716, 0, 0, 718, 1964, 0, 0, 0, 717,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1940, 0, 0, 0, 0, 0, 0, 1939,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1957, 0, 0, 1096, 0, 0, 0,
	0, 0, 1945, 0, 0, 1106, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1973, 1972, 0, 0, 0,
	0, 0, 0, 0, 0, 1081, 0, 0, 0, 3655,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1104, 1108, 1110, 1112, 1114,
	1115, 1117, 0, 1122, 1118, 1119, 1120, 1121, 0, 1099,
	1100, 1101, 1102, 1079, 1080, 1105, 0, 1082, 1932, 1084,
	1085, 1086, 1087, 1083, 1088, 1089, 1090, 1091, 1092, 1095,
	1097, 1093, 1094, 1103, 0, 0, 0, 689, 691, 690,
	0, 1107, 1109, 1111, 1113, 1116, 0, 696, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 700,
	1968, 0, 0, 1974, 0, 0, 715, 0, 1081, 0,
	0, 0, 0, 693, 0, 0, 0, 683, 0, 1098,
	0, 0, 0, 0, 0, 0, 0, 0, 1104, 1108,
	1110, 1112, 1114, 1115, 1117, 1264, 1122, 1118, 1119, 1120,
	1121, 0, 1099, 1100, 1101, 1102, 1079, 1080, 1105, 0,
	1082, 0, 1084, 1085, 1086, 1087, 1083, 1088, 1089, 1090,
	1091, 1092, 1095, 1097, 1093, 1094, 1103, 0, 0, 0,
	0, 0, 0, 0, 1107, 1109, 1111, 1113, 1116, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3777, 0, 0, 0, 0, 0, 0,
	0, 0, 1098, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 695, 699, 705, 0, 706,
	708, 0, 0, 709, 710, 711, 0, 0, 713, 714,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2605, 2606, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3848, 0, 0, 0, 0, 0, 0,
	0, 787, 0, 0, 0, 0, 0, 0, 0, 0,
	386, 0, 510, 543, 532, 616, 498, 0, 0, 0,
	0, 0, 0, 740, 0, 0, 0, 326, 0, 0,
	356, 547, 529, 539, 530, 515, 516, 517, 524, 336,
	518, 519, 520, 490, 521, 491, 522, 523, 778, 546,
	497, 415, 370, 564, 563, 0, 0, 845, 853, 0,
	0, 0, 0, 3848, 0, 0, 0, 0, 0, 0,
	732, 0, 0, 768, 822, 821, 755, 765, 0, 0,
	299, 219, 492, 612, 494, 493, 756, 0, 757, 761,
	764, 760, 758, 759, 0, 837, 0, 0, 0, 0,
	0, 0, 724, 736, 692, 741, 0, 0, 0, 0,
	0, 3848, 0, 0, 1106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 733,
	734, 0, 0, 0, 0, 788, 0, 735, 0, 0,
	783, 762, 766, 0, 0, 0, 0, 289, 421, 438,
	300, 411, 451, 305, 418, 295, 385, 408, 0, 0,
	291, 436, 417, 367, 346, 347, 290, 3954, 403, 324,
	338, 321, 383, 763, 786, 790, 320, 859, 784, 446,
	293, 0, 445, 382, 432, 437, 368, 362, 0, 292,
	434, 366, 361, 350, 328, 860, 351, 352, 342, 394,
	360, 395, 343, 372, 371, 373, 0, 1106, 0, 0,
	0, 474, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 781, 0, 609, 0,
	448, 0, 0, 843, 0, 0, 0, 420, 0, 0,
	353, 0, 0, 0, 785, 0, 406, 388, 856, 0,
	0, 404, 358, 433, 396, 439, 422, 447, 400, 397,
	284, 423, 323, 369, 296, 298, 318, 325, 327, 329,
	330, 378, 379, 391, 410, 424, 425, 426, 322, 306,
	405, 307, 340, 308, 285, 314, 312, 315, 412, 316,
	287, 392, 430, 0, 335, 401, 365, 288, 364, 393,
	429, 428, 297, 455, 461, 462, 551, 0, 467, 632,
	633, 634, 476, 0, 0, 481, 482, 483, 485, 486,
	487, 488, 552, 569, 536, 506, 469, 560, 503, 507,
	508, 572, 1759, 1758, 1760, 460, 354, 355, 0, 333,
	281, 282, 627, 841, 384, 574, 607, 608, 499, 0,
	855, 836, 838, 839, 842, 846, 847, 848, 849, 850,
	852, 854, 858, 626, 0, 553, 568, 630, 567, 623,
	390, 0, 409, 565, 512, 0, 557, 531, 0, 558,
	527, 562, 0, 501, 0, 416, 441, 453, 470, 473,
	502, 587, 588, 589, 286, 472, 591, 592, 593, 594,
	595, 596, 597, 590, 857, 534, 511, 537, 452, 514,
	513, 0, 0, 548, 789, 549, 550, 374, 375, 376,
	377, 844, 575, 304, 471, 399, 0, 535, 0, 0,
	0, 0, 0, 0, 0, 0, 540, 541, 538, 635,
	0, 598, 599, 0, 0, 465, 466, 332, 339, 484,
	341, 303, 389, 334, 450, 348, 0, 477, 542, 478,
	601, 604, 602, 603, 381, 344, 345, 413, 349, 359,
	402, 449, 387, 407, 301, 440, 414, 363, 528, 555,
	866, 840, 865, 867, 868, 864, 869, 870, 851, 745,
	0, 796, 862, 861, 863, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 583, 582, 581, 580,
	579, 578, 577, 576, 0, 0, 525, 427, 313, 275,
	309, 310, 317, 624, 621, 431, 625, 0, 283, 505,
	357, 0, 398, 331, 570, 571, 0, 0, 829, 803,
	804, 805, 742, 806, 800, 801, 743, 802, 830, 794,
	826, 827, 770, 797, 807, 825, 808, 828, 831, 832,
	871, 872, 814, 798, 247, 873, 811, 833, 824, 823,
	809, 795, 834, 835, 777, 772, 812, 813, 799, 817,
	818, 819, 744, 791, 792, 793, 815, 816, 773, 774,
	775, 776, 0, 0, 0, 456, 457, 458, 480, 0,
	442, 504, 622, 0, 0, 0, 0, 0, 0, 0,
	554, 566, 600, 0, 610, 611, 613, 615, 820, 617,
	419, 787, 0, 628, 495, 496, 629, 606, 0, 737,
	386, 0, 510, 543, 532, 616, 498, 0, 0, 0,
	0, 0, 0, 740, 0, 0, 0, 326, 1809, 0,
	356, 547, 529, 539, 530, 515, 516, 517, 524, 336,
	518, 519, 520, 490, 521, 491, 522, 523, 778, 546,
	497, 415, 370, 564, 563, 0, 0, 845, 853, 0,
	0, 0, 0, 0, 0, 0, 0, 2022, 0, 0,
	732, 0, 0, 768, 822, 821, 755, 765, 0, 0,
	299, 219, 492, 612, 494, 493, 756, 0, 757, 761,
	764, 760, 758, 759, 0, 837, 0, 0, 0, 0,
	0, 0, 724, 736, 0, 741, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 733,
	734, 0, 0, 0, 0, 788, 0, 735, 0, 0,
	2023, 762, 766, 0, 0, 0, 0, 289, 421, 438,
	300, 411, 451, 305, 418, 295, 385, 408, 0, 0,
	291, 436, 417, 367, 346, 347, 290, 0, 403, 324,
	338, 321, 383, 763, 786, 790, 320, 859, 784, 446,
	293, 0, 445, 382, 432, 437, 368, 362, 0, 292,
	434, 366, 361, 350, 328, 860, 351, 352, 342, 394,
	360, 395, 343, 372, 371, 373, 0, 0, 0, 0,
	0, 474, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 781, 0, 609, 0,
	448, 0, 0, 843, 0, 0, 0, 420, 0, 0,
	353, 0, 0, 0, 785, 0, 406, 388, 856, 0,
	0, 404, 358, 433, 396, 439, 422, 447, 400, 397,
	284, 423, 323, 369, 296, 298, 318, 325, 327, 329,
	330, 378, 379, 391, 410, 424, 425, 426, 322, 306,
	405, 307, 340, 308, 285, 314, 312, 315, 412, 316,
	287, 392, 430, 0, 335, 401, 365, 288, 364, 393,
	429, 428, 297, 455, 461, 462, 551, 0, 467, 632,
	633, 634, 476, 0, 0, 481, 482, 483, 485, 486,
	487, 488, 552, 569, 536, 506, 469, 560, 503, 507,
	508, 572, 0, 0, 0, 460, 354, 355, 0, 333,
	281, 282, 627, 841, 384, 574, 607, 608, 499, 0,
	855, 836, 838, 839, 842, 846, 847, 848, 849, 850,
	852, 854, 858, 626, 0, 553, 568, 630, 567, 623,
	390, 0, 409, 565, 512, 0, 557, 531, 0, 558,
	527, 562, 0, 501, 0, 416, 441, 453, 470, 473,
	502, 587, 588, 589, 286, 472, 591, 592, 593, 594,
	595, 596, 597, 590, 857, 534, 511, 537, 452, 514,
	513, 0, 0, 548, 789, 549, 550, 374, 375, 376,
	377, 844, 575, 304, 471, 399, 0, 535, 0, 0,
	0, 0, 0, 0, 0, 0, 540, 541, 538, 635,
	0, 598, 599, 0, 0, 465, 466, 332, 339, 484,
	341, 303, 389, 334, 450, 348, 0, 477, 542, 478,
	601, 604, 602, 603, 381, 344, 345, 413, 349, 359,
	402, 449, 387, 407, 301, 440, 414, 363, 528, 555,
	866, 840, 865, 867, 868, 864, 869, 870, 851, 745,
	0, 796, 862, 861, 863, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 583, 582, 581, 580,
	579, 578, 577, 576, 0, 0, 525, 427, 313, 275,
	309, 310, 317, 624, 621, 431, 625, 0, 283, 505,
	357, 0, 398, 331, 570, 571, 0, 0, 829, 803,
	804, 805, 742, 806, 800, 801, 743, 802, 830, 794,
	826, 827, 770, 797, 807, 825, 808, 828, 831, 832,
	871, 872, 814, 798, 247, 873, 811, 833, 824, 823,
	809, 795, 834, 835, 777, 772, 812, 813, 799, 817,
	818, 819, 744, 791, 792, 793, 815, 816, 773, 774,
	775, 776, 0, 0, 0, 456, 457, 458, 480, 0,
	442, 504, 622, 0, 0, 0, 0, 0, 0, 0,
	554, 566, 600, 0, 610, 611, 613, 615, 820, 617,
	419, 196, 787, 628, 495, 496, 629, 606, 0, 737,
	0, 386, 0, 510, 543, 532, 616, 498, 0, 0,
	0, 0, 0, 0, 740, 0, 0, 0, 326, 0,
	0, 356, 547, 529, 539, 530, 515, 516, 517, 524,
	336, 518, 519, 520, 490, 521, 491, 522, 523, 1248,
	546, 497, 415, 370, 564, 563, 0, 0, 845, 853,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 732, 0, 0, 768, 822, 821, 755, 765, 0,
	0, 299, 219, 492, 612, 494, 493, 756, 0, 757,
	761, 764, 760, 758, 759, 0, 837, 0, 0, 0,
	0, 0, 0, 724, 736, 0, 741, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	733, 734, 0, 0, 0, 0, 788, 0, 735, 0,
	0, 783, 762, 766, 0, 0, 0, 0, 289, 421,
	438, 300, 411, 451, 305, 418, 295, 385, 408, 0,
	0, 291, 436, 417, 367, 346, 347, 290, 0, 403,
	324, 338, 321, 383, 763, 786, 790, 320, 859, 784,
	446, 293, 0, 445, 382, 432, 437, 368, 362, 0,
	292, 434, 366, 361, 350, 328, 860, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 474, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 781, 0, 609,
	0, 448, 0, 0, 843, 0, 0, 0, 420, 0,
	0, 353, 0, 0, 0, 785, 0, 406, 388, 856,
	0, 0, 404, 358, 433, 396, 439, 422, 447, 400,
	397, 284, 423, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 410, 424, 425, 426, 322,
	306, 405, 307, 340, 308, 285, 314, 312, 315, 412,
	316, 287, 392, 430, 0, 335, 401, 365, 288, 364,
	393, 429, 428, 297, 455, 461, 462, 551, 0, 467,
	632, 633, 634, 476, 0, 0, 481, 482, 483, 485,
	486, 487, 488, 552, 569, 536, 506, 469, 560, 503,
	507, 508, 572, 0, 0, 0, 460, 354, 355, 0,
	333, 281, 282, 627, 841, 384, 574, 607, 608, 499,
	0, 855, 836, 838, 839, 842, 846, 847, 848, 849,
	850, 852, 854, 858, 626, 0, 553, 568, 630, 567,
	623, 390, 0, 409, 565, 512, 0, 557, 531, 0,
	558, 527, 562, 0, 501, 0, 416, 441, 453, 470,
	473, 502, 587, 588, 589, 286, 472, 591, 592, 593,
	594, 595, 596, 597, 590, 857, 534, 511, 537, 452,
	514, 513, 0, 0, 548, 789, 549, 550, 374, 375,
	376, 377, 844, 575, 304, 471, 399, 0, 535, 0,
	0, 0, 0, 0, 0, 0, 0, 540, 541, 538,
	635, 0, 598, 599, 0, 0, 465, 466, 332, 339,
	484, 341, 303, 389, 334, 450, 348, 0, 477, 542,
	478, 601, 604, 602, 603, 381, 344, 345, 413, 349,
	359, 402, 449, 387, 407, 301, 440, 414, 363, 528,
	555, 866, 840, 865, 867, 868, 864, 869, 870, 851,
	745, 0, 796, 862, 861, 863, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 583, 582, 581,
	580, 579, 578, 577, 576, 0, 0, 525, 427, 313,
	275, 309, 310, 317, 624, 621, 431, 625, 0, 283,
	505, 357, 159, 398, 331, 570, 571, 0, 0, 829,
	803, 804, 805, 742, 806, 800, 801, 743, 802, 830,
	794, 826, 827, 770, 797, 807, 825, 808, 828, 831,
	832, 871, 872, 814, 798, 247, 873, 811, 833, 824,
	823, 809, 795, 834, 835, 777, 772, 812, 813, 799,
	817, 818, 819, 744, 791, 792, 793, 815, 816, 773,
	774, 775, 776, 0, 0, 0, 456, 457, 458, 480,
	0, 442, 504, 622, 0, 0, 0, 0, 0, 0,
	0, 554, 566, 600, 0, 610, 611, 613, 615, 820,
	617, 419, 787, 0, 628, 495, 496, 629, 606, 0,
	737, 386, 0, 510, 543, 532, 616, 498, 0, 0,
	0, 0, 0, 0, 740, 0, 0, 0, 326, 3953,
	0, 356, 547, 529, 539, 530, 515, 516, 517, 524,
	336, 518, 519, 520, 490, 521, 491, 522, 523, 778,
	546, 497, 415, 370, 564, 563, 0, 0, 845, 853,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 732, 0, 0, 768, 822, 821, 755, 765, 0,
	0, 299, 219, 492, 612, 494, 493, 756, 0, 757,
	761, 764, 760, 758, 759, 0, 837, 0, 0, 0,
	0, 0, 0, 724, 736, 0, 741, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	733, 734, 0, 0, 0, 0, 788, 0, 735, 0,
	0, 783, 762, 766, 0, 0, 0, 0, 289, 421,
	438, 300, 411, 451, 305, 418, 295, 385, 408, 0,
	0, 291, 436, 417, 367, 346, 347, 290, 0, 403,
	324, 338, 321, 383, 763, 786, 790, 320, 859, 784,
	446, 293, 0, 445, 382, 432, 437, 368, 362, 0,
	292, 434, 366, 361, 350, 328, 860, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 474, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 781, 0, 609,
	0, 448, 0, 0, 843, 0, 0, 0, 420, 0,
	0, 353, 0, 0, 0, 785, 0, 406, 388, 856,
	0, 0, 404, 358, 433, 396, 439, 422, 447, 400,
	397, 284, 423, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 410, 424, 425, 426, 322,
	306, 405, 307, 340, 308, 285, 314, 312, 315, 412,
	316, 287, 392, 430, 0, 335, 401, 365, 288, 364,
	393, 429, 428, 297, 455, 461, 462, 551, 0, 467,
	632, 633, 634, 476, 0, 0, 481, 482, 483, 485,
	486, 487, 488, 552, 569, 536, 506, 469, 560, 503,
	507, 508, 572, 0, 0, 0, 460, 354, 355, 0,
	333, 281, 282, 627, 841, 384, 574, 607, 608, 499,
	0, 855, 836, 838, 839, 842, 846, 847, 848, 849,
	850, 852, 854, 858, 626, 0, 553, 568, 630, 567,
	623, 390, 0, 409, 565, 512, 0, 557, 531, 0,
	558, 527, 562, 0, 501, 0, 416, 441, 453, 470,
	473, 502, 587, 588, 589, 286, 472, 591, 592, 593,
	594, 595, 596, 597, 590, 857, 534, 511, 537, 452,
	514, 513, 0, 0, 548, 789, 549, 550, 374, 375,
	376, 377, 844, 575, 304, 471, 399, 0, 535, 0,
	0, 0, 0, 0, 0, 0, 0, 540, 541, 538,
	635, 0, 598, 599, 0, 0, 465, 466, 332, 339,
	484, 341, 303, 389, 334, 450, 348, 0, 477, 542,
	478, 601, 604, 602, 603, 381, 344, 345, 413, 349,
	359, 402, 449, 387, 407, 301, 440, 414, 363, 528,
	555, 866, 840, 865, 867, 868, 864, 869, 870, 851,
	745, 0, 796, 862, 861, 863, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 583, 582, 581,
	580, 579, 578, 577, 576, 0, 0, 525, 427, 313,
	275, 309, 310, 317, 624, 621, 431, 625, 0, 283,
	505, 357, 0, 398, 331, 570, 571, 0, 0, 829,
	803, 804, 805, 742, 806, 800, 801, 743, 802, 830,
	794, 826, 827, 770, 797, 807, 825, 808, 828, 831,
	832, 871, 872, 814, 798, 247, 873, 811, 833, 824,
	823, 809, 795, 834, 835, 777, 772, 812, 813, 799,
	817, 818, 819, 744, 791, 792, 793, 815, 816, 773,
	774, 775, 776, 0, 0, 0, 456, 457, 458, 480,
	0, 442, 504, 622, 0, 0, 0, 0, 0, 0,
	0, 554, 566, 600, 0, 610, 611, 613, 615, 820,
	617, 419, 787, 0, 628, 495, 496, 629, 606, 0,
	737, 386, 0, 510, 543, 532, 616, 498, 0, 0,
	0, 0, 0, 0, 740, 0, 0, 0, 326, 0,
	0, 356, 547, 529, 539, 530, 515, 516, 517, 524,
	336, 518, 519, 520, 490, 521, 491, 522, 523, 778,
	546, 497, 415, 370, 564, 563, 0, 0, 845, 853,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 732, 0, 0, 768, 822, 821, 755, 765, 0,
	0, 299, 219, 492, 612, 494, 493, 756, 0, 757,
	761, 764, 760, 758, 759, 0, 837, 0, 0, 0,
	0, 0, 0, 724, 736, 0, 741, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	733, 734, 0, 0, 0, 0, 788, 0, 735, 0,
	0, 783, 762, 766, 0, 0, 0, 0, 289, 421,
	438, 300, 411, 451, 305, 418, 295, 385, 408, 0,
	0, 291, 436, 417, 367, 346, 347, 290, 0, 403,
	324, 338, 321, 383, 763, 786, 790, 320, 859, 784,
	446, 293, 0, 445, 382, 432, 437, 368, 362, 0,
	292, 434, 366, 361, 350, 328, 860, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 474, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 781, 0, 609,
	0, 448, 0, 0, 843, 0, 0, 0, 420, 0,
	0, 353, 0, 0, 0, 785, 0, 406, 388, 856,
	3849, 0, 404, 358, 433, 396, 439, 422, 447, 400,
	397, 284, 423, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 410, 424, 425, 426, 322,
	306, 405, 307, 340, 308, 285, 314, 312, 315, 412,
	316, 287, 392, 430, 0, 335, 401, 365, 288, 364,
	393, 429, 428, 297, 455, 461, 462, 551, 0, 467,
	632, 633, 634, 476, 0, 0, 481, 482, 483, 485,
	486, 487, 488, 552, 569, 536, 506, 469, 560, 503,
	507, 508, 572, 0, 0, 0, 460, 354, 355, 0,
	333, 281, 282, 627, 841, 384, 574, 607, 608, 499,
	0, 855, 836, 838, 839, 842, 846, 847, 848, 849,
	850, 852, 854, 858, 626, 0, 553, 568, 630, 567,
	623, 390, 0, 409, 565, 512, 0, 557, 531, 0,
	558, 527, 562, 0, 501, 0, 416, 441, 453, 470,
	473, 502, 587, 588, 589, 286, 472, 591, 592, 593,
	594, 595, 596, 597, 590, 857, 534, 511, 537, 452,
	514, 513, 0, 0, 548, 789, 549, 550, 374, 375,
	376, 377, 844, 575, 304, 471, 399, 0, 535, 0,
	0, 0, 0, 0, 0, 0, 0, 540, 541, 538,
	635, 0, 598, 599, 0, 0, 465, 466, 332, 339,
	484, 341, 303, 389, 334, 450, 348, 0, 477, 542,
	478, 601, 604, 602, 603, 381, 344, 345, 413, 349,
	359, 402, 449, 387, 407, 301, 440, 414, 363, 528,
	555, 866, 840, 865, 867, 868, 864, 869, 870, 851,
	745, 0, 796, 862, 861, 863, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 583, 582, 581,
	580, 579, 578, 577, 576, 0, 0, 525, 427, 313,
	275, 309, 310, 317, 624, 621, 431, 625, 0, 283,
	505, 357, 0, 398, 331, 570, 571, 0, 0, 829,
	803, 804, 805, 742, 806, 800, 801, 743, 802, 830,
	794, 826, 827, 770, 797, 807, 825, 808, 828, 831,
	832, 871, 872, 814, 798, 247, 873, 811, 833, 824,
	823, 809, 795, 834, 835, 777, 772, 812, 813, 799,
	817, 818, 819, 744, 791, 792, 793, 815, 816, 773,
	774, 775, 776, 0, 0, 0, 456, 457, 458, 480,
	0, 442, 504, 622, 0, 0, 0, 0, 0, 0,
	0, 554, 566, 600, 0, 610, 611, 613, 615, 820,
	617, 419, 787, 0, 628, 495, 496, 629, 606, 0,
	737, 386, 0, 510, 543, 532, 616, 498, 0, 0,
	0, 0, 0, 0, 740, 0, 0, 0, 326, 1809,
	0, 356, 547, 529, 539, 530, 515, 516, 517, 524,
	336, 518, 519, 520, 490, 521, 491, 522, 523, 778,
	546, 497, 415, 370, 564, 563, 0, 0, 845, 853,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 732, 0, 0, 768, 822, 821, 755, 765, 0,
	0, 299, 219, 492, 612, 494, 493, 756, 0, 757,
	761, 764, 760, 758, 759, 0, 837, 0, 0, 0,
	0, 0, 0, 724, 736, 0, 741, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	733, 734, 0, 0, 0, 0, 788, 0, 735, 0,
	0, 783, 762, 766, 0, 0, 0, 0, 289, 421,
	438, 300, 411, 451, 305, 418, 295, 385, 408, 0,
	0, 291, 436, 417, 367, 346, 347, 290, 0, 403,
	324, 338, 321, 383, 763, 786, 790, 320, 859, 784,
	446, 293, 0, 445, 382, 432, 437, 368, 362, 0,
	292, 434, 366, 361, 350, 328, 860, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 474, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 781, 0, 609,
	0, 448, 0, 0, 843, 0, 0, 0, 420, 0,
	0, 353, 0, 0, 0, 785, 0, 406, 388, 856,
	0, 0, 404, 358, 433, 396, 439, 422, 447, 400,
	397, 284, 423, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 410, 424, 425, 426, 322,
	306, 405, 307, 340, 308, 285, 314, 312, 315, 412,
	316, 287, 392, 430, 0, 335, 401, 365, 288, 364,
	393, 429, 428, 297, 455, 461, 462, 551, 0, 467,
	632, 633, 634, 476, 0, 0, 481, 482, 483, 485,
	486, 487, 488, 552, 569, 536, 506, 469, 560, 503,
	507, 508, 572, 0, 0, 0, 460, 354, 355, 0,
	333, 281, 282, 627, 841, 384, 574, 607, 608, 499,
	0, 855, 836, 838, 839, 842, 846, 847, 848, 849,
	850, 852, 854, 858, 626, 0, 553, 568, 630, 567,
	623, 390, 0, 409, 565, 512, 0, 557, 531, 0,
	558, 527, 562, 0, 501, 0, 416, 441, 453, 470,
	473, 502, 587, 588, 589, 286, 472, 591, 592, 593,
	594, 595, 596, 597, 590, 857, 534, 511, 537, 452,
	514, 513, 0, 0, 548, 789, 549, 550, 374, 375,
	376, 377, 844, 575, 304, 471, 399, 0, 535, 0,
	0, 0, 0, 0, 0, 0, 0, 540, 541, 538,
	635, 0, 598, 599, 0, 0, 465, 466, 332, 339,
	484, 341, 303, 389, 334, 450, 348, 0, 477, 542,
	478, 601, 604, 602, 603, 381, 344, 345, 413, 349,
	359, 402, 449, 387, 407, 301, 440, 414, 363, 528,
	555, 866, 840, 865, 867, 868, 864, 869, 870, 851,
	745, 0, 796, 862, 861, 863, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 583, 582, 581,
	580, 579, 578, 577, 576, 0, 0, 525, 427, 313,
	275, 309, 310, 317, 624, 621, 431, 625, 0, 283,
	505, 357, 0, 398, 331, 570, 571, 0, 0, 829,
	803, 804, 805, 742, 806, 800, 801, 743, 802, 830,
	794, 826, 827, 770, 797, 807, 825, 808, 828, 831,
	832, 871, 872, 814, 798, 247, 873, 811, 833, 824,
	823, 809, 795, 834, 835, 777, 772, 812, 813, 799,
	817, 818, 819, 744, 791, 792, 793, 815, 816, 773,
	774, 775, 776, 0, 0, 0, 456, 457, 458, 480,
	0, 442, 504, 622, 0, 0, 0, 0, 0, 0,
	0, 554, 566, 600, 0, 610, 611, 613, 615, 820,
	617, 419, 787, 0, 628, 495, 496, 629, 606, 0,
	737, 386, 0, 510, 543, 532, 616, 498, 0, 0,
	0, 0, 0, 0, 740, 0, 0, 0, 326, 0,
	0, 356, 547, 529, 539, 530, 515, 516, 517, 524,
	336, 518, 519, 520, 490, 521, 491, 522, 523, 778,
	546, 497, 415, 370, 564, 563, 0, 0, 845, 853,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 732, 0, 0, 768, 822, 821, 755, 765, 0,
	0, 299, 219, 492, 612, 494, 493, 756, 0, 757,
	761, 764, 760, 758, 759, 0, 837, 0, 0, 0,
	0, 0, 0, 724, 736, 0, 741, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	733, 734, 1530, 0, 0, 0, 788, 0, 735, 0,
	0, 783, 762, 766, 0, 0, 0, 0, 289, 421,
	438, 300, 411, 451, 305, 418, 295, 385, 408, 0,
	0, 291, 436, 417, 367, 346, 347, 290, 0, 403,
	324, 338, 321, 383, 763, 786, 790, 320, 859, 784,
	446, 293, 0, 445, 382, 432, 437, 368, 362, 0,
	292, 434, 366, 361, 350, 328, 860, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 474, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 781, 0, 609,
	0, 448, 0, 0, 843, 0, 0, 0, 420, 0,
	0, 353, 0, 0, 0, 785, 0, 406, 388, 856,
	0, 0, 404, 358, 433, 396, 439, 422, 447, 400,
	397, 284, 423, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 410, 424, 425, 426, 322,
	306, 405, 307, 340, 308, 285, 314, 312, 315, 412,
	316, 287, 392, 430, 0, 335, 401, 365, 288, 364,
	393, 429, 428, 297, 455, 461, 462, 551, 0, 467,
	632, 633, 634, 476, 0, 0, 481, 482, 483, 485,
	486, 487, 488, 552, 569, 536, 506, 469, 560, 503,
	507, 508, 572, 0, 0, 0, 460, 354, 355, 0,
	333, 281, 282, 627, 841, 384, 574, 607, 608, 499,
	0, 855, 836, 838, 839, 842, 846, 847, 848, 849,
	850, 852, 854, 858, 626, 0, 553, 568, 630, 567,
	623, 390, 0, 409, 565, 512, 0, 557, 531, 0,
	558, 527, 562, 0, 501, 0, 416, 441, 453, 470,
	473, 502, 587, 588, 589, 286, 472, 591, 592, 593,
	594, 595, 596, 597, 590, 857, 534, 511, 537, 452,
	514, 513, 0, 0, 548, 789, 549, 550, 374, 375,
	376, 377, 844, 575, 304, 471, 399, 0, 535, 0,
	0, 0, 0, 0, 0, 0, 0, 540, 541, 538,
	635, 0, 598, 599, 0, 0, 465, 466, 332, 339,
	484, 341, 303, 389, 334, 450, 348, 0, 477, 542,
	478, 601, 604, 602, 603, 381, 344, 345, 413, 349,
	359, 402, 449, 387, 407, 301, 440, 414, 363, 528,
	555, 866, 840, 865, 867, 868, 864, 869, 870, 851,
	745, 0, 796, 862, 861, 863, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 583, 582, 581,
	580, 579, 578, 577, 576, 0, 0, 525, 427, 313,
	275, 309, 310, 317, 624, 621, 431, 625, 0, 283,
	505, 357, 0, 398, 331, 570, 571, 0, 0, 829,
	803, 804, 805, 742, 806, 800, 801, 743, 802, 830,
	794, 826, 827, 770, 797, 807, 825, 808, 828, 831,
	832, 871, 872, 814, 798, 247, 873, 811, 833, 824,
	823, 809, 795, 834, 835, 777, 772, 812, 813, 799,
	817, 818, 819, 744, 791, 792, 793, 815, 816, 773,
	774, 775, 776, 0, 0, 0, 456, 457, 458, 480,
	0, 442, 504, 622, 0, 0, 0, 0, 0, 0,
	0, 554, 566, 600, 0, 610, 611, 613, 615, 820,
	617, 419, 0, 0, 628, 495, 496, 629, 606, 787,
	737, 0, 2193, 0, 0, 0, 0, 0, 386, 0,
	510, 543, 532, 616, 498, 0, 0, 0, 0, 0,
	0, 740, 0, 0, 0, 326, 0, 0, 356, 547,
	529, 539, 530, 515, 516, 517, 524, 336, 518, 519,
	520, 490, 521, 491, 522, 523, 778, 546, 497, 415,
	370, 564, 563, 0, 0, 845, 853, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 732, 0,
	0, 768, 822, 821, 755, 765, 0, 0, 299, 219,
	492, 612, 494, 493, 756, 0, 757, 761, 764, 760,
	758, 759, 0, 837, 0, 0, 0, 0, 0, 0,
	724, 736, 0, 741, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 733, 734, 0,
	0, 0, 0, 788, 0, 735, 0, 0, 783, 762,
	766, 0, 0, 0, 0, 289, 421, 438, 300, 411,
	451, 305, 418, 295, 385, 408, 0, 0, 291, 436,
	417, 367, 346, 347, 290, 0, 403, 324, 338, 321,
	383, 763, 786, 790, 320, 859, 784, 446, 293, 0,
	445, 382, 432, 437, 368, 362, 0, 292, 434, 366,
	361, 350, 328, 860, 351, 352, 342, 394, 360, 395,
	343, 372, 371, 373, 0, 0, 0, 0, 0, 474,
	475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 605, 781, 0, 609, 0, 448, 0,
	0, 843, 0, 0, 0, 420, 0, 0, 353, 0,
	0, 0, 785, 0, 406, 388, 856, 0, 0, 404,
	358, 433, 396, 439, 422, 447, 400, 397, 284, 423,
	323, 369, 296, 298, 318, 325, 327, 329, 330, 378,
	379, 391, 410, 424, 425, 426, 322, 306, 405, 307,
	340, 308, 285, 314, 312, 315, 412, 316, 287, 392,
	430, 0, 335, 401, 365, 288, 364, 393, 429, 428,
	297, 455, 461, 462, 551, 0, 467, 632, 633, 634,
	476, 0, 0, 481, 482, 483, 485, 486, 487, 488,
	552, 569, 536, 506, 469, 560, 503, 507, 508, 572,
	0, 0, 0, 460, 354, 355, 0, 333, 281, 282,
	627, 841, 384, 574, 607, 608, 499, 0, 855, 836,
	838, 839, 842, 846, 847, 848, 849, 850, 852, 854,
	858, 626, 0, 553, 568, 630, 567, 623, 390, 0,
	409, 565, 512, 0, 557, 531, 0, 558, 527, 562,
	0, 501, 0, 416, 441, 453, 470, 473, 502, 587,
	588, 589, 286, 472, 591, 592, 593, 594, 595, 596,
	597, 590, 857, 534, 511, 537, 452, 514, 513, 0,
	0, 548, 789, 549, 550, 374, 375, 376, 377, 844,
	575, 304, 471, 399, 0, 535, 0, 0, 0, 0,
	0, 0, 0, 0, 540, 541, 538, 635, 0, 598,
	599, 0, 0, 465, 466, 332, 339, 484, 341, 303,
	389, 334, 450, 348, 0, 477, 542, 478, 601, 604,
	602, 603, 381, 344, 345, 413, 349, 359, 402, 449,
	387, 407, 301, 440, 414, 363, 528, 555, 866, 840,
	865, 867, 868, 864, 869, 870, 851, 745, 0, 796,
	862, 861, 863, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 583, 582, 581, 580, 579, 578,
	577, 576, 0, 0, 525, 427, 313, 275, 309, 310,
	317, 624, 621, 431, 625, 0, 283, 505, 357, 0,
	398, 331, 570, 571, 0, 0, 829, 803, 804, 805,
	742, 806, 800, 801, 743, 802, 830, 794, 826, 827,
	770, 797, 807, 825, 808, 828, 831, 832, 871, 872,
	814, 798, 247, 873, 811, 833, 824, 823, 809, 795,
	834, 835, 777, 772, 812, 813, 799, 817, 818, 819,
	744, 791, 792, 793, 815, 816, 773, 774, 775, 776,
	0, 0, 0, 456, 457, 458, 480, 0, 442, 504,
	622, 0, 0, 0, 0, 0, 0, 0, 554, 566,
	600, 0, 610, 611, 613, 615, 820, 617, 419, 787,
	0, 628, 495, 496, 629, 606, 0, 737, 386, 0,
	510, 543, 532, 616, 498, 0, 0, 0, 0, 0,
	0, 740, 0, 0, 0, 326, 0, 0, 356, 547,
	529, 539, 530, 515, 516, 517, 524, 336, 518, 519,
	520, 490, 521, 491, 522, 523, 778, 546, 497, 415,
	370, 564, 563, 0, 0, 845, 853, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 732, 0,
	0, 768, 822, 821, 755, 765, 0, 0, 299, 219,
	492, 612, 494, 493, 756, 0, 757, 761, 764, 760,
	758, 759, 0, 837, 0, 0, 0, 0, 0, 0,
	724, 736, 0, 741, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 733, 734, 1802,
	0, 0, 0, 788, 0, 735, 0, 0, 783, 762,
	766, 0, 0, 0, 0, 289, 421, 438, 300, 411,
	451, 305, 418, 295, 385, 408, 0, 0, 291, 436,
	417, 367, 346, 347, 290, 0, 403, 324, 338, 321,
	383, 763, 786, 790, 320, 859, 784, 446, 293, 0,
	445, 382, 432, 437, 368, 362, 0, 292, 434, 366,
	361, 350, 328, 860, 351, 352, 342, 394, 360, 395,
	343, 372, 371, 373, 0, 0, 0, 0, 0, 474,
	475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 605, 781, 0, 609, 0, 448, 0,
	0, 843, 0, 0, 0, 420, 0, 0, 353, 0,
	0, 0, 785, 0, 406, 388, 856, 0, 0, 404,
	358, 433, 396, 439, 422, 447, 400, 397, 284, 423,
	323, 369, 296, 298, 318, 325, 327, 329, 330, 378,
	379, 391, 410, 424, 425, 426, 322, 306, 405, 307,
	340, 308, 285, 314, 312, 315, 412, 316, 287, 392,
	430, 0, 335, 401, 365, 288, 364, 393, 429, 428,
	297, 455, 461, 462, 551, 0, 467, 632, 633, 634,
	476, 0, 0, 481, 482, 483, 485, 486, 487, 488,
	552, 569, 536, 506, 469, 560, 503, 507, 508, 572,
	0, 0, 0, 460, 354, 355, 0, 333, 281, 282,
	627, 841, 384, 574, 607, 608, 499, 0, 855, 836,
	838, 839, 842, 846, 847, 848, 849, 850, 852, 854,
	858, 626, 0, 553, 568, 630, 567, 623, 390, 0,
	409, 565, 512, 0, 557, 531, 0, 558, 527, 562,
	0, 501, 0, 416, 441, 453, 470, 473, 502, 587,
	588, 589, 286, 472, 591, 592, 593, 594, 595, 596,
	597, 590, 857, 534, 511, 537, 452, 514, 513, 0,
	0, 548, 789, 549, 550, 374, 375, 376, 377, 844,
	575, 304, 471, 399, 0, 535, 0, 0, 0, 0,
	0, 0, 0, 0, 540, 541, 538, 635, 0, 598,
	599, 0, 0, 465, 466, 332, 339, 484, 341, 303,
	389, 334, 450, 348, 0, 477, 542, 478, 601, 604,
	602, 603, 381, 344, 345, 413, 349, 359, 402, 449,
	387, 407, 301, 440, 414, 363, 528, 555, 866, 840,
	865, 867, 868, 864, 869, 870, 851, 745, 0, 796,
	862, 861, 863, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 583, 582, 581, 580, 579, 578,
	577, 576, 0, 0, 525, 427, 313, 275, 309, 310,
	317, 624, 621, 431, 625, 0, 283, 505, 357, 0,
	398, 331, 570, 571, 0, 0, 829, 803, 804, 805,
	742, 806, 800, 801, 743, 802, 830, 794, 826, 827,
	770, 797, 807, 825, 808, 828, 831, 832, 871, 872,
	814, 798, 247, 873, 811, 833, 824, 823, 809, 795,
	834, 835, 777, 772, 812, 813, 799, 817, 818, 819,
	744, 791, 792, 793, 815, 816, 773, 774, 775, 776,
	0, 0, 0, 456, 457, 458, 480, 0, 442, 504,
	622, 0, 0, 0, 0, 0, 0, 0, 554, 566,
	600, 0, 610, 611, 613, 615, 820, 617, 419, 787,
	0, 628, 495, 496, 629, 606, 0, 737, 386, 0,
	510, 543, 532, 616, 498, 0, 0, 0, 0, 0,
	0, 740, 0, 0, 0, 326, 0, 0, 356, 547,
	529, 539, 530, 515, 516, 517, 524, 336, 518, 519,
	520, 490, 521, 491, 522, 523, 778, 546, 497, 415,
	370, 564, 563, 0, 0, 845, 853, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 732, 0,
	0, 768, 822, 821, 755, 765, 0, 0, 299, 219,
	492, 612, 494, 493, 756, 0, 757, 761, 764, 760,
	758, 759, 0, 837, 0, 0, 0, 0, 0, 0,
	724, 736, 0, 741, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 733, 734, 0,
	0, 0, 0, 788, 0, 735, 0, 0, 783, 762,
	766, 0, 0, 0, 0, 289, 421, 438, 300, 411,
	451, 305, 418, 295, 385, 408, 0, 0, 291, 436,
	417, 367, 346, 347, 290, 0, 403, 324, 338, 321,
	383, 763, 786, 790, 320, 859, 784, 446, 293, 0,
	445, 382, 432, 437, 368, 362, 0, 292, 434, 366,
	361, 350, 328, 860, 351, 352, 342, 394, 360, 395,
	343, 372, 371, 373, 0, 0, 0, 0, 0, 474,
	475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 605, 781, 0, 609, 0, 448, 0,
	0, 843, 0, 0, 0, 420, 0, 0, 353, 0,
	0, 0, 785, 0, 406, 388, 856, 0, 0, 404,
	358, 433, 396, 439, 422, 447, 400, 397, 284, 423,
	323, 369, 296, 298, 318, 325, 327, 329, 330, 378,
	379, 391, 410, 424, 425, 426, 322, 306, 405, 307,
	340, 308, 285, 314, 312, 315, 412, 316, 287, 392,
	430, 0, 335, 401, 365, 288, 364, 393, 429, 428,
	297, 455, 461, 462, 551, 0, 467, 632, 633, 634,
	476, 0, 0, 481, 482, 483, 485, 486, 487, 488,
	552, 569, 536, 506, 469, 560, 503, 507, 508, 572,
	0, 0, 0, 460, 354, 355, 0, 333, 281, 282,
	627, 841, 384, 574, 607, 608, 499, 0, 855, 836,
	838, 839, 842, 846, 847, 848, 849, 850, 852, 854,
	858, 626, 0, 553, 568, 630, 567, 623, 390, 0,
	409, 565, 512, 0, 557, 531, 0, 558, 527, 562,
	0, 501, 0, 416, 441, 453, 470, 473, 502, 587,
	588, 589, 286, 472, 591, 592, 593, 594, 595, 596,
	597, 590, 857, 534, 511, 537, 452, 514, 513, 0,
	0, 548, 789, 549, 550, 374, 375, 376, 377, 844,
	575, 304, 471, 399, 0, 535, 0, 0, 0, 0,
	0, 0, 0, 0, 540, 541, 538, 635, 0, 598,
	599, 0, 0, 465, 466, 332, 339, 484, 341, 303,
	389, 334, 450, 348, 0, 477, 542, 478, 601, 604,
	602, 603, 381, 344, 345, 413, 349, 359, 402, 449,
	387, 407, 301, 440, 414, 363, 528, 555, 866, 840,
	865, 867, 868, 864, 869, 870, 851, 745, 0, 796,
	862, 861, 863, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 583, 582, 581, 580, 579, 578,
	577, 576, 0, 0, 525, 427, 313, 275, 309, 310,
	317, 624, 621, 431, 625, 0, 283, 505, 357, 0,
	398, 331, 570, 571, 0, 0, 829, 803, 804, 805,
	742, 806, 800, 801, 743, 802, 830, 794, 826, 827,
	770, 797, 807, 825, 808, 828, 831, 832, 871, 872,
	814, 798, 247, 873, 811, 833, 824, 823, 809, 795,
	834, 835, 777, 772, 812, 813, 799, 817, 818, 819,
	744, 791, 792, 793, 815, 816, 773, 774, 775, 776,
	0, 0, 0, 456, 457, 458, 480, 0, 442, 504,
	622, 0, 0, 0, 0, 0, 0, 0, 554, 566,
	600, 0, 610, 611, 613, 615, 820, 617, 419, 787,
	0, 628, 495, 496, 629, 606, 0, 737, 386, 0,
	510, 543, 532, 616, 498, 0, 0, 0, 0, 0,
	0, 740, 0, 0, 0, 326, 0, 0, 356, 547,
	529, 539, 530, 515, 516, 517, 524, 336, 518, 519,
	520, 490, 521, 491, 522, 523, 778, 546, 497, 415,
	370, 564, 563, 0, 0, 845, 853, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 732, 0,
	0, 768, 822, 821, 755, 765, 0, 0, 299, 219,
	492, 612, 494, 493, 2657, 0, 2658, 761, 764, 760,
	758, 759, 0, 837, 0, 0, 0, 0, 0, 0,
	724, 736, 0, 741, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 733, 734, 0,
	0, 0, 0, 788, 0, 735, 0, 0, 783, 762,
	766, 0, 0, 0, 0, 289, 421, 438, 300, 411,
	451, 305, 418, 295, 385, 408, 0, 0, 291, 436,
	417, 367, 346, 347, 290, 0, 403, 324, 338, 321,
	383, 763, 786, 790, 320, 859, 784, 446, 293, 0,
	445, 382, 432, 437, 368, 362, 0, 292, 434, 366,
	361, 350, 328, 860, 351, 352, 342, 394, 360, 395,
	343, 372, 371, 373, 0, 0, 0, 0, 0, 474,
	475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 605, 781, 0, 609, 0, 448, 0,
	0, 843, 0, 0, 0, 420, 0, 0, 353, 0,
	0, 0, 785, 0, 406, 388, 856, 0, 0, 404,
	358, 433, 396, 439, 422, 447, 400, 397, 284, 423,
	323, 369, 296, 298, 318, 325, 327, 329, 330, 378,
	379, 391, 410, 424, 425, 426, 322, 306, 405, 307,
	340, 308, 285, 314, 312, 315, 412, 316, 287, 392,
	430, 0, 335, 401, 365, 288, 364, 393, 429, 428,
	297, 455, 461, 462, 551, 0, 467, 632, 633, 634,
	476, 0, 0, 481, 482, 483, 485, 486, 487, 488,
	552, 569, 536, 506, 469, 560, 503, 507, 508, 572,
	0, 0, 0, 460, 354, 355, 0, 333, 281, 282,
	627, 841, 384, 574, 607, 608, 499, 0, 855, 836,
	838, 839, 842, 846, 847, 848, 849, 850, 852, 854,
	858, 626, 0, 553, 568, 630, 567, 623, 390, 0,
	409, 565, 512, 0, 557, 531, 0, 558, 527, 562,
	0, 501, 0, 416, 441, 453, 470, 473, 502, 587,
	588, 589, 286, 472, 591, 592, 593, 594, 595, 596,
	597, 590, 857, 534, 511, 537, 452, 514, 513, 0,
	0, 548, 789, 549, 550, 374, 375, 376, 377, 844,
	575, 304, 471, 399, 0, 535, 0, 0, 0, 0,
	0, 0, 0, 0, 540, 541, 538, 635, 0, 598,
	599, 0, 0, 465, 466, 332, 339, 484, 341, 303,
	389, 334, 450, 348, 0, 477, 542, 478, 601, 604,
	602, 603, 381, 344, 345, 413, 349, 359, 402, 449,
	387, 407, 301, 440, 414, 363, 528, 555, 866, 840,
	865, 867, 868, 864, 869, 870, 851, 745, 0, 796,
	862, 861, 863, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 583, 582, 581, 580, 579, 578,
	577, 576, 0, 0, 525, 427, 313, 275, 309, 310,
	317, 624, 621, 431, 625, 0, 283, 505, 357, 0,
	398, 331, 570, 571, 0, 0, 829, 803, 804, 805,
	742, 806, 800, 801, 743, 802, 830, 794, 826, 827,
	770, 797, 807, 825, 808, 828, 831, 832, 871, 872,
	814, 798, 247, 873, 811, 833, 824, 823, 809, 795,
	834, 835, 777, 772, 812, 813, 799, 817, 818, 819,
	744, 791, 792, 793, 815, 816, 773, 774, 775, 776,
	0, 0, 0, 456, 457, 458, 480, 0, 442, 504,
	622, 0, 0, 0, 0, 0, 0, 0, 554, 566,
	600, 0, 610, 611, 613, 615, 820, 617, 419, 787,
	0, 628, 495, 496, 629, 606, 0, 737, 386, 0,
	510, 543, 532, 616, 498, 0, 0, 1672, 0, 0,
	0, 740, 0, 0, 0, 326, 0, 0, 356, 547,
	529, 539, 530, 515, 516, 517, 524, 336, 518, 519,
	520, 490, 521, 491, 522, 523, 778, 546, 497, 415,
	370, 564, 563, 0, 0, 845, 853, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 732, 0,
	0, 768, 822, 821, 755, 765, 0, 0, 299, 219,
	492, 612, 494, 493, 756, 0, 757, 761, 764, 760,
	758, 759, 0, 837, 0, 0, 0, 0, 0, 0,
	0, 736, 0, 741, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 733, 734, 0,
	0, 0, 0, 788, 0, 735, 0, 0, 783, 762,
	766, 0, 0, 0, 0, 289, 421, 438, 300, 411,
	451, 305, 418, 295, 385, 408, 0, 0, 291, 436,
	417, 367, 346, 347, 290, 0, 403, 324, 338, 321,
	383, 763, 786, 790, 320, 859, 784, 446, 293, 0,
	445, 382, 432, 437, 368, 362, 0, 292, 434, 366,
	361, 350, 328, 860, 351, 352, 342, 394, 360, 395,
	343, 372, 371, 373, 0, 0, 0, 0, 0, 474,
	475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 605, 781, 0, 609, 0, 448, 0,
	0, 843, 0, 0, 0, 420, 0, 0, 353, 0,
	0, 0, 785, 0, 406, 388, 856, 0, 0, 404,
	358, 433, 396, 439, 422, 447, 400, 397, 284, 423,
	323, 369, 296, 298, 318, 325, 327, 329, 330, 378,
	379, 391, 410, 424, 425, 426, 322, 306, 405, 307,
	340, 308, 285, 314, 312, 315, 412, 316, 287, 392,
	430, 0, 335, 401, 365, 288, 364, 393, 429, 428,
	297, 455, 1673, 1674, 551, 0, 467, 632, 633, 634,
	476, 0, 0, 481, 482, 483, 485, 486, 487, 488,
	552, 569, 536, 506, 469, 560, 503, 507, 508, 572,
	0, 0, 0, 460, 354, 355, 0, 333, 281, 282,
	627, 841, 384, 574, 607, 608, 499, 0, 855, 836,
	838, 839, 842, 846, 847, 848, 849, 850, 852, 854,
	858, 626, 0, 553, 568, 630, 567, 623, 390, 0,
	409, 565, 512, 0, 557, 531, 0, 558, 527, 562,
	0, 501, 0, 416, 441, 453, 470, 473, 502, 587,
	588, 589, 286, 472, 591, 592, 593, 594, 595, 596,
	597, 590, 857, 534, 511, 537, 452, 514, 513, 0,
	0, 548, 789, 549, 550, 374, 375, 376, 377, 844,
	575, 304, 471, 399, 0, 535, 0, 0, 0, 0,
	0, 0, 0, 0, 540, 541, 538, 635, 0, 598,
	599, 0, 0, 465, 466, 332, 339, 484, 341, 303,
	389, 334, 450, 348, 0, 477, 542, 478, 601, 604,
	602, 603, 381, 344, 345, 413, 349, 359, 402, 449,
	387, 407, 301, 440, 414, 363, 528, 555, 866, 840,
	865, 867, 868, 864, 869, 870, 851, 745, 0, 796,
	862, 861, 863, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 583, 582, 581, 580, 579, 578,
	577, 576, 0, 0, 525, 427, 313, 275, 309, 310,
	317, 624, 621, 431, 625, 0, 283, 505, 357, 0,
	398, 331, 570, 571, 0, 0, 829, 803, 804, 805,
	742, 806, 800, 801, 743, 802, 830, 794, 826, 827,
	770, 797, 807, 825, 808, 828, 831, 832, 871, 872,
	814, 798, 247, 873, 811, 833, 824, 823, 809, 795,
	834, 835, 777, 772, 812, 813, 799, 817, 818, 819,
	744, 791, 792, 793, 815, 816, 773, 774, 775, 776,
	0, 0, 0, 456, 457, 458, 480, 0, 442, 504,
	622, 0, 0, 0, 0, 0, 0, 0, 554, 566,
	600, 0, 610, 611, 613, 615, 820, 617, 419, 787,
	0, 628, 495, 496, 629, 606, 0, 737, 386, 0,
	510, 543, 532, 616, 498, 0, 0, 0, 0, 0,
	0, 740, 0, 0, 0, 326, 0, 0, 356, 547,
	529, 539, 530, 515, 516, 517, 524, 336, 518, 519,
	520, 490, 521, 491, 522, 523, 778, 546, 497, 415,
	370, 564, 563, 0, 0, 845, 853, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 732, 0,
	0, 768, 822, 821, 755, 765, 0, 0, 299, 219,
	492, 612, 494, 493, 756, 0, 757, 761, 764, 760,
	758, 759, 0, 837, 0, 0, 0, 0, 0, 0,
	0, 736, 0, 741, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 733, 734, 0,
	0, 0, 0, 788, 0, 735, 0, 0, 783, 762,
	766, 0, 0, 0, 0, 289, 421, 438, 300, 411,
	451, 305, 418, 295, 385, 408, 0, 0, 291, 436,
	417, 367, 346, 347, 290, 0, 403, 324, 338, 321,
	383, 763, 786, 790, 320, 859, 784, 446, 293, 0,
	445, 382, 432, 437, 368, 362, 0, 292, 434, 366,
	361, 350, 328, 860, 351, 352, 342, 394, 360, 395,
	343, 372, 371, 373, 0, 0, 0, 0, 0, 474,
	475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 605, 781, 0, 609, 0, 448, 0,
	0, 843, 0, 0, 0, 420, 0, 0, 353, 0,
	0, 0, 785, 0, 406, 388, 856, 0, 0, 404,
	358, 433, 396, 439, 422, 447, 400, 397, 284, 423,
	323, 369, 296, 298, 318, 325, 327, 329, 330, 378,
	379, 391, 410, 424, 425, 426, 322, 306, 405, 307,
	340, 308, 285, 314, 312, 315, 412, 316, 287, 392,
	430, 0, 335, 401, 365, 288, 364, 393, 429, 428,
	297, 455, 461, 462, 551, 0, 467, 632, 633, 634,
	476, 0, 0, 481, 482, 483, 485, 486, 487, 488,
	552, 569, 536, 506, 469, 560, 503, 507, 508, 572,
	0, 0, 0, 460, 354, 355, 0, 333, 281, 282,
	627, 841, 384, 574, 607, 608, 499, 0, 855, 836,
	838, 839, 842, 846, 847, 848, 849, 850, 852, 854,
	858, 626, 0, 553, 568, 630, 567, 623, 390, 0,
	409, 565, 512, 0, 557, 531, 0, 558, 527, 562,
	0, 501, 0, 416, 441, 453, 470, 473, 502, 587,
	588, 589, 286, 472, 591, 592, 593, 594, 595, 596,
	597, 590, 857, 534, 511, 537, 452, 514, 513, 0,
	0, 548, 789, 549, 550, 374, 375, 376, 377, 844,
	575, 304, 471, 399, 0, 535, 0, 0, 0, 0,
	0, 0, 0, 0, 540, 541, 538, 635, 0, 598,
	599, 0, 0, 465, 466, 332, 339, 484, 341, 303,
	389, 334, 450, 348, 0, 477, 542, 478, 601, 604,
	602, 603, 381, 344, 345, 413, 349, 359, 402, 449,
	387, 407, 301, 440, 414, 363, 528, 555, 866, 840,
	865, 867, 868, 864, 869, 870, 851, 745, 0, 796,
	862, 861, 863, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 583, 582, 581, 580, 579, 578,
	577, 576, 0, 0, 525, 427, 313, 275, 309, 310,
	317, 624, 621, 431, 625, 0, 283, 505, 357, 0,
	398, 331, 570, 571, 0, 0, 829, 803, 804, 805,
	742, 806, 800, 801, 743, 802, 830, 794, 826, 827,
	770, 797, 807, 825, 808, 828, 831, 832, 871, 872,
	814, 798, 247, 873, 811, 833, 824, 823, 809, 795,
	834, 835, 777, 772, 812, 813, 799, 817, 818, 819,
	744, 791, 792, 793, 815, 816, 773, 774, 775, 776,
	0, 0, 0, 456, 457, 458, 480, 0, 442, 504,
	622, 0, 0, 0, 0, 0, 0, 0, 554, 566,
	600, 0, 610, 611, 613, 615, 820, 617, 419, 787,
	0, 628, 495, 496, 629, 606, 0, 737, 386, 0,
	510, 543, 532, 616, 498, 0, 0, 0, 0, 0,
	0, 740, 0, 0, 0, 326, 0, 0, 356, 547,
	529, 539, 530, 515, 516, 517, 524, 336, 518, 519,
	520, 490, 521, 491, 522, 523, 778, 546, 497, 415,
	370, 564, 563, 0, 0, 845, 853, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 768, 822, 821, 755, 765, 0, 0, 299, 219,
	492, 612, 494, 493, 756, 0, 757, 761, 764, 760,
	758, 759, 0, 837, 0, 0, 0, 0, 0, 0,
	724, 736, 0, 741, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 733, 734, 0,
	0, 0, 0, 788, 0, 735, 0, 0, 783, 762,
	766, 0, 0, 0, 0, 289, 421, 438, 300, 411,
	451, 305, 418, 295, 385, 408, 0, 0, 291, 436,
	417, 367, 346, 347, 290, 0, 403, 324, 338, 321,
	383, 763, 786, 790, 320, 859, 784, 446, 293, 0,
	445, 382, 432, 437, 368, 362, 0, 292, 434, 366,
	361, 350, 328, 860, 351, 352, 342, 394, 360, 395,
	343, 372, 371, 373, 0, 0, 0, 0, 0, 474,
	475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 605, 781, 0, 609, 0, 448, 0,
	0, 843, 0, 0, 0, 420, 0, 0, 353, 0,
	0, 0, 785, 0, 406, 388, 856, 0, 0, 404,
	358, 433, 396, 439, 422, 447, 400, 397, 284, 423,
	323, 369, 296, 298, 318, 325, 327, 329, 330, 378,
	379, 391, 410, 424, 425, 426, 322, 306, 405, 307,
	340, 308, 285, 314, 312, 315, 412, 316, 287, 392,
	430, 0, 335, 401, 365, 288, 364, 393, 429, 428,
	297, 455, 461, 462, 551, 0, 467, 632, 633, 634,
	476, 0, 0, 481, 482, 483, 485, 486, 487, 488,
	552, 569, 536, 506, 469, 560, 503, 507, 508, 572,
	0, 0, 0, 460, 354, 355, 0, 333, 281, 282,
	627, 841, 384, 574, 607, 608, 499, 0, 855, 836,
	838, 839, 842, 846, 847, 848, 849, 850, 852, 854,
	858, 626, 0, 553, 568, 630, 567, 623, 390, 0,
	409, 565, 512, 0, 557, 531, 0, 558, 527, 562,
	0, 501, 0, 416, 441, 453, 470, 473, 502, 587,
	588, 589, 286, 472, 591, 592, 593, 594, 595, 596,
	597, 590, 857, 534, 511, 537, 452, 514, 513, 0,
	0, 548, 789, 549, 550, 374, 375, 376, 377, 844,
	575, 304, 471, 399, 0, 535, 0, 0, 0, 0,
	0, 0, 0, 0, 540, 541, 538, 635, 0, 598,
	599, 0, 0, 465, 466, 332, 339, 484, 341, 303,
	389, 334, 450, 348, 0, 477, 542, 478, 601, 604,
	602, 603, 381, 344, 345, 413, 349, 359, 402, 449,
	387, 407, 301, 440, 414, 363, 528, 555, 866, 840,
	865, 867, 868, 864, 869, 870, 851, 745, 0, 796,
	862, 861, 863, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 583, 582, 581, 580, 579, 578,
	577, 576, 0, 0, 525, 427, 313, 275, 309, 310,
	317, 624, 621, 431, 625, 0, 283, 505, 357, 0,
	398, 331, 570, 571, 0, 0, 829, 803, 804, 805,
	742, 806, 800, 801, 743, 802, 830, 794, 826, 827,
	770, 797, 807, 825, 808, 828, 831, 832, 871, 872,
	814, 798, 247, 873, 811, 833, 824, 823, 809, 795,
	834, 835, 777, 772, 812, 813, 799, 817, 818, 819,
	744, 791, 792, 793, 815, 816, 773, 774, 775, 776,
	0, 0, 0, 456, 457, 458, 480, 0, 442, 504,
	622, 0, 0, 0, 0, 0, 0, 0, 554, 566,
	600, 0, 610, 611, 613, 615, 820, 617, 419, 0,
	0, 628, 495, 496, 629, 606, 0, 737, 196, 61,
	187, 158, 0, 0, 0, 0, 0, 0, 386, 0,
	510, 543, 532, 616, 498, 0, 188, 0, 0, 0,
	0, 0, 0, 179, 0, 326, 0, 189, 356, 547,
	529, 539, 530, 515, 516, 517, 524, 336, 518, 519,
	520, 490, 521, 491, 522, 523, 132, 546, 497, 415,
	370, 564, 563, 0, 0, 0, 0, 0, 0, 0,
	0, 119, 0, 0, 0, 0, 0, 0, 192, 0,
	0, 218, 0, 0, 0, 0, 0, 0, 299, 219,
	492, 612, 494, 493, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 302, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 210, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 289, 421, 438, 300, 411,
	451, 305, 418, 295, 385, 408, 0, 0, 291, 436,
	417, 367, 346, 347, 290, 0, 403, 324, 338, 321,
	383, 0, 435, 463, 320, 454, 0, 446, 293, 0,
	445, 382, 432, 437, 368, 362, 0, 292, 434, 366,
	361, 350, 328, 479, 351, 352, 342, 394, 360, 395,
	343, 372, 371, 373, 0, 0, 0, 0, 0, 474,
	475, 0, 0, 0, 0, 0, 0, 157, 185, 194,
	186, 117, 0, 605, 0, 0, 609, 0, 448, 0,
	0, 211, 0, 0, 0, 420, 0, 0, 353, 184,
	178, 177, 464, 0, 406, 388, 223, 0, 0, 404,
	358, 433, 396, 439, 422, 447, 400, 397, 284, 423,
	323, 369, 296, 298, 318, 325, 327, 329, 330, 378,
	379, 391, 410, 424, 425, 426, 322, 306, 405, 307,
	340, 308, 285, 314, 312, 315, 412, 316, 287, 392,
	430, 0, 335, 401, 365, 288, 364, 393, 429, 428,
	297, 455, 461, 462, 551, 0, 467, 584, 585, 586,
	476, 0, 0, 481, 482, 483, 485, 486, 487, 488,
	552, 569, 536, 506, 469, 560, 503, 507, 508, 572,
	0, 0, 0, 460, 354, 355, 0, 333, 281, 282,
	443, 319, 384, 574, 607, 608, 499, 0, 561, 500,
	509, 311, 533, 545, 544, 380, 459, 214, 556, 559,
	489, 224, 0, 553, 568, 526, 567, 225, 390, 0,
	409, 565, 512, 0, 557, 531, 0, 558, 527, 562,
	0, 501, 0, 416, 441, 453, 470, 473, 502, 587,
	588, 589, 286, 472, 591, 592, 593, 594, 595, 596,
	597, 590, 444, 534, 511, 537, 452, 514, 513, 0,
	0, 548, 468, 549, 550, 374, 375, 376, 377, 337,
	575, 304, 471, 399, 130, 535, 0, 0, 0, 0,
	0, 0, 0, 0, 540, 541, 538, 222, 0, 598,
	599, 0, 0, 465, 466, 332, 339, 484, 341, 303,
	389, 334, 450, 348, 0, 477, 542, 478, 601, 604,
	602, 603, 381, 344, 345, 413, 349, 359, 402, 449,
	387, 407, 301, 440, 414, 363, 528, 555, 0, 0,
	0, 0, 0, 0, 0, 0, 62, 0, 0, 270,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 583, 582, 581, 580, 579, 578,
	577, 576, 0, 0, 525, 427, 313, 275, 309, 310,
	317, 229, 294, 431, 230, 0, 283, 505, 357, 159,
	398, 331, 570, 571, 58, 0, 231, 232, 233, 234,
	235, 236, 237, 238, 276, 239, 240, 241, 242, 243,
	244, 245, 248, 249, 250, 251, 252, 253, 254, 255,
	573, 246, 247, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 0, 0, 0,
	277, 278, 279, 280, 0, 0, 271, 272, 273, 274,
	0, 0, 0, 456, 457, 458, 480, 0, 442, 504,
	226, 45, 212, 215, 217, 216, 0, 59, 554, 566,
	600, 5, 610, 611, 613, 615, 614, 617, 419, 196,
	135, 227, 495, 496, 228, 606, 0, 0, 0, 386,
	0, 510, 543, 532, 616, 498, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 326, 0, 0, 356,
	547, 529, 539, 530, 515, 516, 517, 524, 336, 518,
	519, 520, 490, 521, 491, 522, 523, 132, 546, 497,
	415, 370, 564, 563, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 192,
	0, 0, 218, 0, 0, 0, 0, 0, 0, 299,
	219, 492, 612, 494, 493, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 302, 2343, 2346, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 289, 421, 438, 300,
	411, 451, 305, 418, 295, 385, 408, 0, 0, 291,
	436, 417, 367, 346, 347, 290, 0, 403, 324, 338,
	321, 383, 0, 435, 463, 320, 454, 0, 446, 293,
	0, 445, 382, 432, 437, 368, 362, 0, 292, 434,
	366, 361, 350, 328, 479, 351, 352, 342, 394, 360,
	395, 343, 372, 371, 373, 0, 0, 0, 0, 0,
	474, 475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 605, 0, 0, 609, 2347, 448,
	0, 0, 0, 2342, 0, 2341, 420, 2339, 2344, 353,
	0, 0, 0, 464, 0, 406, 388, 631, 0, 0,
	404, 358, 433, 396, 439, 422, 447, 400, 397, 284,
	423, 323, 369, 296, 298, 318, 325, 327, 329, 330,
	378, 379, 391, 410, 424, 425, 426, 322, 306, 405,
	307, 340, 308, 285, 314, 312, 315, 412, 316, 287,
	392, 430, 2345, 335, 401, 365, 288, 364, 393, 429,
	428, 297, 455, 461, 462, 551, 0, 467, 632, 633,
	634, 476, 0, 0, 481, 482, 483, 485, 486, 487,
	488, 552, 569, 536, 506, 469, 560, 503, 507, 508,
	572, 0, 0, 0, 460, 354, 355, 0, 333, 281,
	282, 627, 319, 384, 574, 607, 608, 499, 0, 561,
	500, 509, 311, 533, 545, 544, 380, 459, 0, 556,
	559, 489, 626, 0, 553, 568, 630, 567, 623, 390,
	0, 409, 565, 512, 0, 557, 531, 0, 558, 527,
	562, 0, 501, 0, 416, 441, 453, 470, 473, 502,
	587, 588, 589, 286, 472, 591, 592, 593, 594, 595,
	596, 597, 590, 444, 534, 511, 537, 452, 514, 513,
	0, 0, 548, 468, 549, 550, 374, 375, 376, 377,
	337, 575, 304, 471, 399, 0, 535, 0, 0, 0,
	0, 0, 0, 0, 0, 540, 541, 538, 635, 0,
	598, 599, 0, 0, 465, 466, 332, 339, 484, 341,
	303, 389, 334, 450, 348, 0, 477, 542, 478, 601,
	604, 602, 603, 381, 344, 345, 413, 349, 359, 402,
	449, 387, 407, 301, 440, 414, 363, 528, 555, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 583, 582, 581, 580, 579,
	578, 577, 576, 0, 0, 525, 427, 313, 275, 309,
	310, 317, 624, 621, 431, 625, 0, 283, 505, 357,
	159, 398, 331, 570, 571, 0, 0, 231, 232, 233,
	234, 235, 236, 237, 238, 276, 239, 240, 241, 242,
	243, 244, 245, 248, 249, 250, 251, 252, 253, 254,
	255, 573, 246, 247, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 0, 0,
	0, 277, 278, 279, 280, 0, 0, 271, 272, 273,
	274, 0, 0, 0, 456, 457, 458, 480, 0, 442,
	504, 622, 0, 0, 0, 0, 0, 0, 0, 554,
	566, 600, 0, 610, 611, 613, 615, 614, 617, 419,
	0, 0, 628, 495, 496, 629, 606, 386, 0, 510,
	543, 532, 616, 498, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 0, 356, 547, 529,
	539, 530, 515, 516, 517, 524, 336, 518, 519, 520,
	490, 521, 491, 522, 523, 0, 546, 497, 415, 370,
	564, 563, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1283, 0, 0,
	218, 0, 0, 755, 765, 0, 0, 299, 219, 492,
	612, 494, 493, 756, 0, 757, 761, 764, 760, 758,
	759, 0, 302, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 762, 0,
	0, 0, 0, 0, 289, 421, 438, 300, 411, 451,
	305, 418, 295, 385, 408, 0, 0, 291, 436, 417,
	367, 346, 347, 290, 0, 403, 324, 338, 321, 383,
	763, 435, 463, 320, 454, 0, 446, 293, 0, 445,
	382, 432, 437, 368, 362, 0, 292, 434, 366, 361,
	350, 328, 479, 351, 352, 342, 394, 360, 395, 343,
	372, 371, 373, 0, 0, 0, 0, 0, 474, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 0, 0, 609, 0, 448, 0, 0,
	0, 0, 0, 0, 420, 0, 0, 353, 0, 0,
	0, 464, 0, 406, 388, 631, 0, 0, 404, 358,
	433, 396, 439, 422, 447, 400, 397, 284, 423, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 410, 424, 425, 426, 322, 306, 405, 307, 340,
	308, 285, 314, 312, 315, 412, 316, 287, 392, 430,
	0, 335, 401, 365, 288, 364, 393, 429, 428, 297,
	455, 461, 462, 551, 0, 467, 632, 633, 634, 476,
	0, 0, 481, 482, 483, 485, 486, 487, 488, 552,
	569, 536, 506, 469, 560, 503, 507, 508, 572, 0,
	0, 0, 460, 354, 355, 0, 333, 281, 282, 627,
	319, 384, 574, 607, 608, 499, 0, 561, 500, 509,
	311, 533, 545, 544, 380, 459, 0, 556, 559, 489,
	626, 0, 553, 568, 630, 567, 623, 390, 0, 409,
	565, 512, 0, 557, 531, 0, 558, 527, 562, 0,
	501, 0, 416, 441, 453, 470, 473, 502, 587, 588,
	589, 286, 472, 591, 592, 593, 594, 595, 596, 597,
	590, 444, 534, 511, 537, 452, 514, 513, 0, 0,
	548, 468, 549, 550, 374, 375, 376, 377, 337, 575,
	304, 471, 399, 0, 535, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 541, 538, 635, 0, 598, 599,
	0, 0, 465, 466, 332, 339, 484, 341, 303, 389,
	334, 450, 348, 0, 477, 542, 478, 601, 604, 602,
	603, 381, 344, 345, 413, 349, 359, 402, 449, 387,
	407, 301, 440, 414, 363, 528, 555, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 583, 582, 581, 580, 579, 578, 577,
	576, 0, 0, 525, 427, 313, 275, 309, 310, 317,
	624, 621, 431, 625, 0, 283, 505, 357, 0, 398,
	331, 570, 571, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 573,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 456, 457, 458, 480, 0, 442, 504, 622,
	0, 0, 0, 0, 0, 0, 0, 554, 566, 600,
	0, 610, 611, 613, 615, 614, 617, 419, 0, 0,
	628, 495, 496, 629, 606, 196, 61, 187, 158, 0,
	0, 0, 0, 0, 0, 386, 654, 510, 543, 532,
	616, 498, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 326, 0, 0, 356, 547, 529, 539, 530,
	515, 516, 517, 524, 336, 518, 519, 520, 490, 521,
	491, 522, 523, 0, 546, 497, 415, 370, 564, 563,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 660,
	0, 0, 0, 0, 0, 659, 0, 0, 218, 0,
	0, 0, 0, 0, 0, 299, 219, 492, 612, 494,
	493, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	302, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 289, 421, 438, 300, 411, 451, 305, 418,
	295, 385, 408, 0, 0, 291, 436, 417, 367, 346,
	347, 290, 0, 403, 324, 338, 321, 383, 0, 435,
	463, 320, 454, 0, 446, 293, 0, 445, 382, 432,
	437, 368, 362, 0, 292, 434, 366, 361, 350, 328,
	479, 351, 352, 342, 394, 360, 395, 343, 372, 371,
	373, 0, 0, 0, 0, 0, 474, 475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 658, 0,
	605, 0, 0, 609, 0, 448, 0, 0, 0, 0,
	0, 0, 420, 0, 0, 353, 0, 0, 0, 464,
	0, 406, 388, 631, 0, 0, 404, 358, 433, 396,
	439, 422, 447, 400, 397, 284, 423, 323, 369, 296,
	298, 318, 325, 327, 329, 330, 378, 379, 391, 410,
	424, 425, 426, 322, 306, 405, 307, 340, 308, 285,
	314, 312, 315, 412, 316, 287, 392, 430, 0, 335,
	401, 365, 288, 364, 393, 429, 428, 297, 455, 461,
	462, 551, 0, 467, 632, 633, 634, 476, 0, 0,
	481, 482, 483, 485, 486, 487, 488, 552, 569, 536,
	506, 469, 560, 503, 507, 508, 572, 0, 0, 0,
	460, 354, 355, 0, 333, 281, 282, 627, 319, 384,
	574, 607, 608, 499, 0, 561, 500, 509, 311, 533,
	545, 544, 380, 459, 0, 556, 559, 489, 626, 0,
	553, 568, 630, 567, 623, 390, 0, 409, 565, 512,
	0, 557, 531, 0, 558, 527, 562, 0, 501, 0,
	416, 441, 453, 470, 473, 502, 587, 588, 589, 286,
	472, 591, 592, 593, 594, 595, 596, 597, 590, 444,
	534, 511, 537, 452, 514, 513, 0, 0, 548, 468,
	549, 550, 374, 375, 376, 377, 655, 657, 304, 471,
	399, 668, 535, 0, 0, 0, 0, 0, 0, 0,
	0, 540, 541, 538, 635, 0, 598, 599, 0, 0,
	465, 466, 332, 339, 484, 341, 303, 389, 334, 450,
	348, 0, 477, 542, 478, 601, 604, 602, 603, 381,
	344, 345, 413, 349, 359, 402, 449, 387, 407, 301,
	440, 414, 363, 528, 555, 0, 0, 0, 0, 0,
	0, 0, 0, 62, 0, 0, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 583, 582, 581, 580, 579, 578, 577, 576, 0,
	0, 525, 427, 313, 275, 309, 310, 317, 624, 621,
	431, 625, 0, 283, 505, 357, 159, 398, 331, 570,
	571, 0, 0, 231, 232, 233, 234, 235, 236, 237,
	238, 276, 239, 240, 241, 242, 243, 244, 245, 248,
	249, 250, 251, 252, 253, 254, 255, 573, 246, 247,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 0, 0, 0, 277, 278, 279,
	280, 0, 0, 271, 272, 273, 274, 0, 0, 0,
	456, 457, 458, 480, 0, 442, 504, 622, 0, 0,
	0, 0, 0, 0, 0, 554, 566, 600, 0, 610,
	611, 613, 615, 614, 617, 419, 0, 0, 628, 495,
	496, 629, 606, 386, 0, 510, 543, 532, 616, 498,
	0, 1096, 0, 0, 0, 0, 0, 0, 0, 0,
	326, 0, 0, 356, 547, 529, 539, 530, 515, 516,
	517, 524, 336, 518, 519, 520, 490, 521, 491, 522,
	523, 0, 546, 497, 415, 370, 564, 563, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 0, 0, 0,
	0, 0, 0, 299, 219, 492, 612, 494, 493, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 302, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1081, 0, 0, 0, 0, 0, 0,
	289, 421, 438, 300, 411, 451, 305, 418, 295, 385,
	408, 0, 0, 2500, 2503, 2504, 2505, 2506, 2507, 2508,
	0, 2513, 2509, 2510, 2511, 2512, 0, 2495, 2496, 2497,
	2498, 1079, 2479, 2501, 0, 2480, 382, 2481, 2482, 2483,
	2484, 1083, 2485, 2486, 2487, 2488, 2489, 2492, 2493, 2490,
	2491, 2499, 394, 360, 395, 343, 372, 371, 373, 1107,
	1109, 1111, 1113, 1116, 474, 475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 605, 0,
	0, 609, 0, 448, 0, 0, 0, 0, 0, 0,
	420, 0, 0, 353, 0, 0, 0, 2494, 0, 406,
	388, 631, 0, 0, 404, 358, 433, 396, 439, 422,
	447, 400, 397, 284, 423, 323, 369, 296, 298, 318,
	325, 327, 329, 330, 378, 379, 391, 410, 424, 425,
	426, 322, 306, 405, 307, 340, 308, 285, 314, 312,
	315, 412, 316, 287, 392, 430, 0, 335, 401, 365,
	288, 364, 393, 429, 428, 297, 455, 461, 462, 551,
	0, 467, 632, 633, 634, 476, 0, 0, 481, 482,
	483, 485, 486, 487, 488, 552, 569, 536, 506, 469,
	560, 503, 507, 508, 572, 0, 0, 0, 460, 354,
	355, 0, 333, 281, 282, 627, 319, 384, 574, 607,
	608, 499, 0, 561, 500, 509, 311, 533, 545, 544,
	380, 459, 0, 556, 559, 489, 626, 0, 553, 568,
	630, 567, 623, 390, 0, 409, 565, 512, 0, 557,
	531, 0, 558, 527, 562, 0, 501, 0, 416, 441,
	453, 470, 473, 502, 587, 588, 589, 286, 472, 591,
	592, 593, 594, 595, 596, 597, 590, 444, 534, 511,
	537, 452, 514, 513, 0, 0, 548, 468, 549, 550,
	374, 375, 376, 377, 337, 575, 304, 471, 399, 0,
	535, 0, 0, 0, 0, 0, 0, 0, 0, 540,
	541, 538, 635, 0, 598, 599, 0, 0, 465, 466,
	332, 339, 484, 341, 303, 389, 334, 450, 348, 0,
	477, 542, 478, 601, 604, 602, 603, 381, 344, 345,
	413, 349, 359, 402, 449, 387, 407, 301, 440, 414,
	363, 528, 555, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 270, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 583,
	582, 581, 580, 579, 578, 577, 576, 0, 0, 525,
	427, 313, 275, 309, 310, 317, 624, 621, 431, 625,
	0, 283, 2502, 357, 0, 398, 331, 570, 571, 0,
	0, 231, 232, 233, 234, 235, 236, 237, 238, 276,
	239, 240, 241, 242, 243, 244, 245, 248, 249, 250,
	251, 252, 253, 254, 255, 573, 246, 247, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 0, 0, 0, 277, 278, 279, 280, 0,
	0, 271, 272, 273, 274, 0, 0, 0, 456, 457,
	458, 480, 0, 442, 504, 622, 0, 0, 0, 0,
	0, 0, 0, 554, 566, 600, 0, 610, 611, 613,
	615, 614, 617, 419, 0, 0, 628, 495, 496, 629,
	606, 386, 0, 510, 543, 532, 616, 498, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 326, 0,
	0, 356, 547, 529, 539, 530, 515, 516, 517, 524,
	336, 518, 519, 520, 490, 521, 491, 522, 523, 0,
	546, 497, 415, 370, 564, 563, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 0, 0, 0,
	0, 299, 219, 492, 612, 494, 493, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 2343, 2346, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 421,
	438, 300, 411, 451, 305, 418, 295, 385, 408, 0,
	0, 291, 436, 417, 367, 346, 347, 290, 0, 403,
	324, 338, 321, 383, 0, 435, 463, 320, 454, 0,
	446, 293, 0, 445, 382, 432, 437, 368, 362, 0,
	292, 434, 366, 361, 350, 328, 479, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 474, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 0, 0, 609,
	2347, 448, 0, 0, 0, 2342, 0, 2341, 420, 2339,
	2344, 353, 0, 0, 0, 464, 0, 406, 388, 631,
	0, 0, 404, 358, 433, 396, 439, 422, 447, 400,
	397, 284, 423, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 410, 424, 425, 426, 322,
	306, 405, 307, 340, 308, 285, 314, 312, 315, 412,
	316, 287, 392, 430, 2345, 335, 401, 365, 288, 364,
	393, 429, 428, 297, 455, 461, 462, 551, 0, 467,
	632, 633, 634, 476, 0, 0, 481, 482, 483, 485,
	486, 487, 488, 552, 569, 536, 506, 469, 560, 503,
	507, 508, 572, 0, 0, 0, 460, 354, 355, 0,
	333, 281, 282, 627, 319, 384, 574, 607, 608, 499,
	0, 561, 500, 509, 311, 533, 545, 544, 380, 459,
	0, 556, 559, 489, 626, 0, 553, 568, 630, 567,
	623, 390, 0, 409, 565, 512, 0, 557, 531, 0,
	558, 527, 562, 0, 501, 0, 416, 441, 453, 470,
	473, 502, 587, 588, 589, 286, 472, 591, 592, 593,
	594, 595, 596, 597, 590, 444, 534, 511, 537, 452,
	514, 513, 0, 0, 548, 468, 549, 550, 374, 375,
	376, 377, 337, 575, 304, 471, 399, 0, 535, 0,
	0, 0, 0, 0, 0, 0, 0, 540, 541, 538,
	635, 0, 598, 599, 0, 0, 465, 466, 332, 339,
	484, 341, 303, 389, 334, 450, 348, 0, 477, 542,
	478, 601, 604, 602, 603, 381, 344, 345, 413, 349,
	359, 402, 449, 387, 407, 301, 440, 414, 363, 528,
	555, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 583, 582, 581,
	580, 579, 578, 577, 576, 0, 0, 525, 427, 313,
	275, 309, 310, 317, 624, 621, 431, 625, 0, 283,
	505, 357, 0, 398, 331, 570, 571, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 573, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 456, 457, 458, 480,
	0, 442, 504, 622, 0, 0, 0, 0, 0, 0,
	0, 554, 566, 600, 0, 610, 611, 613, 615, 614,
	617, 419, 0, 0, 628, 495, 496, 629, 606, 386,
	0, 510, 543, 532, 616, 498, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 326, 0, 0, 356,
	547, 529, 539, 530, 515, 516, 517, 524, 336, 518,
	519, 520, 490, 521, 491, 522, 523, 0, 546, 497,
	415, 370, 564, 563, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 0, 0, 0, 0, 0, 0, 299,
	219, 492, 612, 494, 493, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 302, 0, 2364, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 289, 421, 438, 300,
	411, 451, 305, 418, 295, 385, 408, 0, 0, 291,
	436, 417, 367, 346, 347, 290, 0, 403, 324, 338,
	321, 383, 0, 435, 463, 320, 454, 0, 446, 293,
	0, 445, 382, 432, 437, 368, 362, 0, 292, 434,
	366, 361, 350, 328, 479, 351, 352, 342, 394, 360,
	395, 343, 372, 371, 373, 0, 0, 0, 0, 0,
	474, 475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 605, 0, 0, 609, 2363, 448,
	0, 0, 0, 2369, 2366, 2368, 420, 0, 2367, 353,
	0, 0, 0, 464, 0, 406, 388, 631, 0, 2361,
	404, 358, 433, 396, 439, 422, 447, 400, 397, 284,
	423, 323, 369, 296, 298, 318, 325, 327, 329, 330,
	378, 379, 391, 410, 424, 425, 426, 322, 306, 405,
	307, 340, 308, 285, 314, 312, 315, 412, 316, 287,
	392, 430, 0, 335, 401, 365, 288, 364, 393, 429,
	428, 297, 455, 461, 462, 551, 0, 467, 632, 633,
	634, 476, 0, 0, 481, 482, 483, 485, 486, 487,
	488, 552, 569, 536, 506, 469, 560, 503, 507, 508,
	572, 0, 0, 0, 460, 354, 355, 0, 333, 281,
	282, 627, 319, 384, 574, 607, 608, 499, 0, 561,
	500, 509, 311, 533, 545, 544, 380, 459, 0, 556,
	559, 489, 626, 0, 553, 568, 630, 567, 623, 390,
	0, 409, 565, 512, 0, 557, 531, 0, 558, 527,
	562, 0, 501, 0, 416, 441, 453, 470, 473, 502,
	587, 588, 589, 286, 472, 591, 592, 593, 594, 595,
	596, 597, 590, 444, 534, 511, 537, 452, 514, 513,
	0, 0, 548, 468, 549, 550, 374, 375, 376, 377,
	337, 575, 304, 471, 399, 0, 535, 0, 0, 0,
	0, 0, 0, 0, 0, 540, 541, 538, 635, 0,
	598, 599, 0, 0, 465, 466, 332, 339, 484, 341,
	303, 389, 334, 450, 348, 0, 477, 542, 478, 601,
	604, 602, 603, 381, 344, 345, 413, 349, 359, 402,
	449, 387, 407, 301, 440, 414, 363, 528, 555, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 583, 582, 581, 580, 579,
	578, 577, 576, 0, 0, 525, 427, 313, 275, 309,
	310, 317, 624, 621, 431, 625, 0, 283, 505, 357,
	0, 398, 331, 570, 571, 0, 0, 231, 232, 233,
	234, 235, 236, 237, 238, 276, 239, 240, 241, 242,
	243, 244, 245, 248, 249, 250, 251, 252, 253, 254,
	255, 573, 246, 247, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 0, 0,
	0, 277, 278, 279, 280, 0, 0, 271, 272, 273,
	274, 0, 0, 0, 456, 457, 458, 480, 0, 442,
	504, 622, 0, 0, 0, 0, 0, 0, 0, 554,
	566, 600, 0, 610, 611, 613, 615, 614, 617, 419,
	0, 0, 628, 495, 496, 629, 606, 386, 0, 510,
	543, 532, 616, 498, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 0, 356, 547, 529,
	539, 530, 515, 516, 517, 524, 336, 518, 519, 520,
	490, 521, 491, 522, 523, 0, 546, 497, 415, 370,
	564, 563, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 0, 0, 0, 0, 0, 0, 299, 219, 492,
	612, 494, 493, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 302, 0, 2364, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 289, 421, 438, 300, 411, 451,
	305, 418, 295, 385, 408, 0, 0, 291, 436, 417,
	367, 346, 347, 290, 0, 403, 324, 338, 321, 383,
	0, 435, 463, 320, 454, 0, 446, 293, 0, 445,
	382, 432, 437, 368, 362, 0, 292, 434, 366, 361,
	350, 328, 479, 351, 352, 342, 394, 360, 395, 343,
	372, 371, 373, 0, 0, 0, 0, 0, 474, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 0, 0, 609, 2363, 448, 0, 0,
	0, 2369, 2366, 2368, 420, 0, 2367, 353, 0, 0,
	0, 464, 0, 406, 388, 631, 0, 0, 404, 358,
	433, 396, 439, 422, 447, 400, 397, 284, 423, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 410, 424, 425, 426, 322, 306, 405, 307, 340,
	308, 285, 314, 312, 315, 412, 316, 287, 392, 430,
	0, 335, 401, 365, 288, 364, 393, 429, 428, 297,
	455, 461, 462, 551, 0, 467, 632, 633, 634, 476,
	0, 0, 481, 482, 483, 485, 486, 487, 488, 552,
	569, 536, 506, 469, 560, 503, 507, 508, 572, 0,
	0, 0, 460, 354, 355, 0, 333, 281, 282, 627,
	319, 384, 574, 607, 608, 499, 0, 561, 500, 509,
	311, 533, 545, 544, 380, 459, 0, 556, 559, 489,
	626, 0, 553, 568, 630, 567, 623, 390, 0, 409,
	565, 512, 0, 557, 531, 0, 558, 527, 562, 0,
	501, 0, 416, 441, 453, 470, 473, 502, 587, 588,
	589, 286, 472, 591, 592, 593, 594, 595, 596, 597,
	590, 444, 534, 511, 537, 452, 514, 513, 0, 0,
	548, 468, 549, 550, 374, 375, 376, 377, 337, 575,
	304, 471, 399, 0, 535, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 541, 538, 635, 0, 598, 599,
	0, 0, 465, 466, 332, 339, 484, 341, 303, 389,
	334, 450, 348, 0, 477, 542, 478, 601, 604, 602,
	603, 381, 344, 345, 413, 349, 359, 402, 449, 387,
	407, 301, 440, 414, 363, 528, 555, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 583, 582, 581, 580, 579, 578, 577,
	576, 0, 0, 525, 427, 313, 275, 309, 310, 317,
	624, 621, 431, 625, 0, 283, 505, 357, 0, 398,
	331, 570, 571, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 573,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 456, 457, 458, 480, 0, 442, 504, 622,
	0, 0, 0, 0, 0, 0, 0, 554, 566, 600,
	0, 610, 611, 613, 615, 614, 617, 419, 0, 0,
	628, 495, 496, 629, 606, 386, 0, 510, 543, 532,
	616, 498, 0, 0, 0, 0, 0, 2063, 0, 0,
	0, 0, 326, 0, 0, 356, 547, 529, 539, 530,
	515, 516, 517, 524, 336, 518, 519, 520, 490, 521,
	491, 522, 523, 0, 546, 497, 415, 370, 564, 563,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 0,
	0, 2064, 0, 0, 0, 299, 219, 492, 612, 494,
	493, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	302, 0, 0, 1213, 1214, 1215, 1212, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 289, 421, 438, 300, 411, 451, 305, 418,
	295, 385, 408, 0, 0, 291, 436, 417, 367, 346,
	347, 290, 0, 403, 324, 338, 321, 383, 0, 435,
	463, 320, 454, 0, 446, 293, 0, 445, 382, 432,
	437, 368, 362, 0, 292, 434, 366, 361, 350, 328,
	479, 351, 352, 342, 394, 360, 395, 343, 372, 371,
	373, 0, 0, 0, 0, 0, 474, 475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 0, 0, 609, 0, 448, 0, 0, 0, 0,
	0, 0, 420, 0, 0, 353, 0, 0, 0, 464,
	0, 406, 388, 631, 0, 0, 404, 358, 433, 396,
	439, 422, 447, 400, 397, 284, 423, 323, 369, 296,
	298, 318, 325, 327, 329, 330, 378, 379, 391, 410,
	424, 425, 426, 322, 306, 405, 307, 340, 308, 285,
	314, 312, 315, 412, 316, 287, 392, 430, 0, 335,
	401, 365, 288, 364, 393, 429, 428, 297, 455, 461,
	462, 551, 0, 467, 632, 633, 634, 476, 0, 0,
	481, 482, 483, 485, 486, 487, 488, 552, 569, 536,
	506, 469, 560, 503, 507, 508, 572, 0, 0, 0,
	460, 354, 355, 0, 333, 281, 282, 627, 319, 384,
	574, 607, 608, 499, 0, 561, 500, 509, 311, 533,
	545, 544, 380, 459, 0, 556, 559, 489, 626, 0,
	553, 568, 630, 567, 623, 390, 0, 409, 565, 512,
	0, 557, 531, 0, 558, 527, 562, 0, 501, 0,
	416, 441, 453, 470, 473, 502, 587, 588, 589, 286,
	472, 591, 592, 593, 594, 595, 596, 597, 590, 444,
	534, 511, 537, 452, 514, 513, 0, 0, 548, 468,
	549, 550, 374, 375, 376, 377, 337, 575, 304, 471,
	399, 0, 535, 0, 0, 0, 0, 0, 0, 0,
	0, 540, 541, 538, 635, 0, 598, 599, 0, 0,
	465, 466, 332, 339, 484, 341, 303, 389, 334, 450,
	348, 0, 477, 542, 478, 601, 604, 602, 603, 381,
	344, 345, 413, 349, 359, 402, 449, 387, 407, 301,
	440, 414, 363, 528, 555, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 583, 582, 581, 580, 579, 578, 577, 576, 0,
	0, 525, 427, 313, 275, 309, 310, 317, 624, 621,
	431, 625, 0, 283, 505, 357, 0, 398, 331, 570,
	571, 0, 0, 231, 232, 233, 234, 235, 236, 237,
	238, 276, 239, 240, 241, 242, 243, 244, 245, 248,
	249, 250, 251, 252, 253, 254, 255, 573, 246, 247,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 0, 0, 0, 277, 278, 279,
	280, 0, 0, 271, 272, 273, 274, 0, 0, 0,
	456, 457, 458, 480, 0, 442, 504, 622, 0, 0,
	0, 0, 0, 0, 0, 554, 566, 600, 0, 610,
	611, 613, 615, 614, 617, 419, 196, 0, 628, 495,
	496, 629, 606, 0, 0, 0, 386, 0, 510, 543,
	532, 616, 498, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 547, 529, 539,
	530, 515, 516, 517, 524, 336, 518, 519, 520, 490,
	521, 491, 522, 523, 132, 546, 497, 415, 370, 564,
	563, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 192, 2113, 0, 218,
	0, 0, 0, 0, 0, 0, 299, 219, 492, 612,
	494, 493, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 421, 438, 300, 411, 451, 305,
	418, 295, 385, 408, 0, 0, 291, 436, 417, 367,
	346, 347, 290, 0, 403, 324, 338, 321, 383, 0,
	435, 463, 320, 454, 0, 446, 293, 0, 445, 382,
	432, 437, 368, 362, 0, 292, 434, 366, 361, 350,
	328, 479, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 474, 475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 605, 0, 0, 609, 0, 448, 0, 0, 0,
	0, 0, 0, 420, 0, 0, 353, 0, 0, 0,
	464, 0, 406, 388, 631, 0, 0, 404, 358, 433,
	396, 439, 422, 447, 400, 397, 284, 423, 323, 369,
	296, 298, 318, 325, 327, 329, 330, 378, 379, 391,
	410, 424, 425, 426, 322, 306, 405, 307, 340, 308,
	285, 314, 312, 315, 412, 316, 287, 392, 430, 0,
	335, 401, 365, 288, 364, 393, 429, 428, 297, 455,
	461, 462, 551, 0, 467, 632, 633, 634, 476, 0,
	0, 481, 482, 483, 485, 486, 487, 488, 552, 569,
	536, 506, 469, 560, 503, 507, 508, 572, 0, 0,
	0, 460, 354, 355, 0, 333, 281, 282, 627, 319,
	384, 574, 607, 608, 499, 0, 561, 500, 509, 311,
	533, 545, 544, 380, 459, 0, 556, 559, 489, 626,
	0, 553, 568, 630, 567, 623, 390, 0, 409, 565,
	512, 0, 557, 531, 0, 558, 527, 562, 0, 501,
	0, 416, 441, 453, 470, 473, 502, 587, 588, 589,
	286, 472, 591, 592, 593, 594, 595, 596, 597, 590,
	444, 534, 511, 537, 452, 514, 513, 0, 0, 548,
	468, 549, 550, 374, 375, 376, 377, 337, 575, 304,
	471, 399, 0, 535, 0, 0, 0, 0, 0, 0,
	0, 0, 540, 541, 538, 635, 0, 598, 599, 0,
	0, 465, 466, 332, 339, 484, 341, 303, 389, 334,
	450, 348, 0, 477, 542, 478, 601, 604, 602, 603,
	381, 344, 345, 413, 349, 359, 402, 449, 387, 407,
	301, 440, 414, 363, 528, 555, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 583, 582, 581, 580, 579, 578, 577, 576,
	0, 0, 525, 427, 313, 275, 309, 310, 317, 624,
	621, 431, 625, 0, 283, 505, 357, 159, 398, 331,
	570, 571, 0, 0, 231, 232, 233, 234, 235, 236,
	237, 238, 276, 239, 240, 241, 242, 243, 244, 245,
	248, 249, 250, 251, 252, 253, 254, 255, 573, 246,
	247, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 0, 0, 0, 277, 278,
	279, 280, 0, 0, 271, 272, 273, 274, 0, 0,
	0, 456, 457, 458, 480, 0, 442, 504, 622, 0,
	0, 0, 0, 0, 0, 0, 554, 566, 600, 0,
	610, 611, 613, 615, 614, 617, 419, 196, 0, 628,
	495, 496, 629, 606, 0, 0, 0, 386, 0, 510,
	543, 532, 616, 498, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 0, 356, 547, 529,
	539, 530, 515, 516, 517, 524, 336, 518, 519, 520,
	490, 521, 491, 522, 523, 132, 546, 497, 415, 370,
	564, 563, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 192, 2099, 0,
	218, 0, 0, 0, 0, 0, 0, 299, 219, 492,
	612, 494, 493, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 302, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 289, 421, 438, 300, 411, 451,
	305, 418, 295, 385, 408, 0, 0, 291, 436, 417,
	367, 346, 347, 290, 0, 403, 324, 338, 321, 383,
	0, 435, 463, 320, 454, 0, 446, 293, 0, 445,
	382, 432, 437, 368, 362, 0, 292, 434, 366, 361,
	350, 328, 479, 351, 352, 342, 394, 360, 395, 343,
	372, 371, 373, 0, 0, 0, 0, 0, 474, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 0, 0, 609, 0, 448, 0, 0,
	0, 0, 0, 0, 420, 0, 0, 353, 0, 0,
	0, 464, 0, 406, 388, 631, 0, 0, 404, 358,
	433, 396, 439, 422, 447, 400, 397, 284, 423, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 410, 424, 425, 426, 322, 306, 405, 307, 340,
	308, 285, 314, 312, 315, 412, 316, 287, 392, 430,
	0, 335, 401, 365, 288, 364, 393, 429, 428, 297,
	455, 461, 462, 551, 0, 467, 632, 633, 634, 476,
	0, 0, 481, 482, 483, 485, 486, 487, 488, 552,
	569, 536, 506, 469, 560, 503, 507, 508, 572, 0,
	0, 0, 460, 354, 355, 0, 333, 281, 282, 627,
	319, 384, 574, 607, 608, 499, 0, 561, 500, 509,
	311, 533, 545, 544, 380, 459, 0, 556, 559, 489,
	626, 0, 553, 568, 630, 567, 623, 390, 0, 409,
	565, 512, 0, 557, 531, 0, 558, 527, 562, 0,
	501, 0, 416, 441, 453, 470, 473, 502, 587, 588,
	589, 286, 472, 591, 592, 593, 594, 595, 596, 597,
	590, 444, 534, 511, 537, 452, 514, 513, 0, 0,
	548, 468, 549, 550, 374, 375, 376, 377, 337, 575,
	304, 471, 399, 0, 535, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 541, 538, 635, 0, 598, 599,
	0, 0, 465, 466, 332, 339, 484, 341, 303, 389,
	334, 450, 348, 0, 477, 542, 478, 601, 604, 602,
	603, 381, 344, 345, 413, 349, 359, 402, 449, 387,
	407, 301, 440, 414, 363, 528, 555, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 583, 582, 581, 580, 579, 578, 577,
	576, 0, 0, 525, 427, 313, 275, 309, 310, 317,
	624, 621, 431, 625, 0, 283, 505, 357, 159, 398,
	331, 570, 571, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 573,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 456, 457, 458, 480, 0, 442, 504, 622,
	0, 0, 0, 0, 0, 0, 0, 554, 566, 600,
	0, 610, 611, 613, 615, 614, 617, 419, 0, 0,
	628, 495, 496, 629, 606, 386, 0, 510, 543, 532,
	616, 498, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 326, 1011, 0, 356, 547, 529, 539, 530,
	515, 516, 517, 524, 336, 518, 519, 520, 490, 521,
	491, 522, 523, 0, 546, 497, 415, 370, 564, 563,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 1018,
	1019, 0, 0, 0, 0, 299, 219, 492, 612, 494,
	493, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1022, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 289, 421, 1005, 300, 411, 451, 305, 418,
	295, 385, 408, 0, 0, 291, 436, 417, 367, 346,
	347, 290, 0, 403, 324, 338, 321, 383, 0, 435,
	463, 320, 454, 993, 446, 293, 992, 445, 382, 432,
	437, 368, 362, 0, 292, 434, 366, 361, 350, 328,
	479, 351, 352, 342, 394, 360, 395, 343, 372, 371,
	373, 0, 0, 0, 0, 0, 474, 475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 0, 0, 609, 0, 448, 0, 0, 0, 0,
	0, 0, 420, 0, 0, 353, 0, 0, 0, 464,
	0, 406, 388, 631, 0, 0, 404, 358, 433, 396,
	439, 422, 447, 1009, 397, 284, 423, 323, 369, 296,
	298, 318, 325, 327, 329, 330, 378, 379, 391, 410,
	424, 425, 426, 322, 306, 405, 307, 340, 308, 285,
	314, 312, 315, 412, 316, 287, 392, 430, 0, 335,
	401, 365, 288, 364, 393, 429, 428, 297, 455, 461,
	462, 551, 0, 467, 632, 633, 634, 476, 0, 0,
	481, 482, 483, 485, 486, 487, 488, 552, 569, 536,
	506, 469, 560, 503, 507, 508, 572, 0, 0, 0,
	460, 354, 355, 0, 333, 281, 282, 627, 319, 384,
	574, 607, 608, 499, 0, 561, 500, 509, 311, 533,
	545, 544, 380, 459, 0, 556, 559, 489, 626, 0,
	553, 568, 630, 567, 623, 390, 0, 409, 565, 512,
	0, 557, 531, 0, 558, 527, 562, 0, 501, 0,
	416, 441, 453, 470, 473, 502, 587, 588, 589, 286,
	472, 591, 592, 593, 594, 595, 596, 1010, 590, 444,
	534, 511, 537, 452, 514, 513, 0, 0, 548, 1013,
	549, 550, 374, 375, 376, 377, 337, 575, 1008, 471,
	399, 0, 535, 0, 0, 0, 0, 0, 0, 0,
	0, 540, 541, 538, 635, 0, 598, 599, 0, 0,
	465, 466, 332, 339, 484, 341, 303, 389, 334, 450,
	348, 0, 477, 542, 478, 601, 604, 602, 603, 1020,
	1006, 1016, 1007, 349, 359, 402, 449, 387, 407, 301,
	440, 414, 1017, 528, 555, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 583, 582, 581, 580, 579, 578, 577, 576, 0,
	0, 525, 427, 313, 275, 309, 310, 317, 624, 621,
	431, 625, 0, 283, 505, 357, 0, 398, 331, 570,
	571, 0, 0, 231, 232, 233, 234, 235, 236, 237,
	238, 276, 239, 240, 241, 242, 243, 244, 245, 248,
	249, 250, 251, 252, 253, 254, 255, 573, 246, 247,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 0, 0, 0, 277, 278, 279,
	280, 0, 0, 271, 272, 273, 274, 0, 0, 0,
	456, 457, 458, 480, 0, 442, 504, 622, 0, 0,
	0, 0, 0, 0, 0, 554, 566, 600, 0, 610,
	611, 613, 615, 614, 617, 419, 196, 0, 628, 495,
	496, 629, 606, 0, 0, 0, 386, 0, 510, 543,
	532, 616, 498, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 547, 529, 539,
	530, 515, 516, 517, 524, 336, 518, 519, 520, 490,
	521, 491, 522, 523, 132, 546, 497, 415, 370, 564,
	563, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1995, 0, 0, 218,
	0, 0, 0, 0, 0, 0, 299, 219, 492, 612,
	494, 493, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 421, 438, 300, 411, 451, 305,
	418, 295, 385, 408, 0, 0, 291, 436, 417, 367,
	346, 347, 290, 0, 403, 324, 338, 321, 383, 0,
	435, 463, 320, 454, 0, 446, 293, 0, 445, 382,
	432, 437, 368, 362, 0, 292, 434, 366, 361, 350,
	328, 479, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 474, 475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 605, 0, 0, 609, 0, 448, 0, 0, 0,
	0, 0, 0, 420, 0, 0, 353, 0, 0, 0,
	464, 0, 406, 388, 631, 0, 0, 404, 358, 433,
	396, 439, 422, 447, 400, 397, 284, 423, 323, 369,
	296, 298, 318, 325, 327, 329, 330, 378, 379, 391,
	410, 424, 425, 426, 322, 306, 405, 307, 340, 308,
	285, 314, 312, 315, 412, 316, 287, 392, 430, 0,
	335, 401, 365, 288, 364, 393, 429, 428, 297, 455,
	461, 462, 551, 0, 467, 632, 633, 634, 476, 0,
	0, 481, 482, 483, 485, 486, 487, 488, 552, 569,
	536, 506, 469, 560, 503, 507, 508, 572, 0, 0,
	0, 460, 354, 355, 0, 333, 281, 282, 627, 319,
	384, 574, 607, 608, 499, 0, 561, 500, 509, 311,
	533, 545, 544, 380, 459, 0, 556, 559, 489, 626,
	0, 553, 568, 630, 567, 623, 390, 0, 409, 565,
	512, 0, 557, 531, 0, 558, 527, 562, 0, 501,
	0, 416, 441, 453, 470, 473, 502, 587, 588, 589,
	286, 472, 591, 592, 593, 594, 595, 596, 597, 590,
	444, 534, 511, 537, 452, 514, 513, 0, 0, 548,
	468, 549, 550, 374, 375, 376, 377, 337, 575, 304,
	471, 399, 0, 535, 0, 0, 0, 0, 0, 0,
	0, 0, 540, 541, 538, 635, 0, 598, 599, 0,
	0, 465, 466, 332, 339, 484, 341, 303, 389, 334,
	450, 348, 0, 477, 542, 478, 601, 604, 602, 603,
	381, 344, 345, 413, 349, 359, 402, 449, 387, 407,
	301, 440, 414, 363, 528, 555, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 583, 582, 581, 580, 579, 578, 577, 576,
	0, 0, 525, 427, 313, 275, 309, 310, 317, 624,
	621, 431, 625, 0, 283, 505, 357, 159, 398, 331,
	570, 571, 0, 0, 231, 232, 233, 234, 235, 236,
	237, 238, 276, 239, 240, 241, 242, 243, 244, 245,
	248, 249, 250, 251, 252, 253, 254, 255, 573, 246,
	247, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 0, 0, 0, 277, 278,
	279, 280, 0, 0, 271, 272, 273, 274, 0, 0,
	0, 456, 457, 458, 480, 0, 442, 504, 622, 0,
	0, 0, 0, 0, 0, 0, 554, 566, 600, 0,
	610, 611, 613, 615, 614, 617, 419, 0, 0, 628,
	495, 496, 629, 606, 386, 0, 510, 543, 532, 616,
	498, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 326, 0, 0, 356, 547, 529, 539, 530, 515,
	516, 517, 524, 336, 518, 519, 520, 490, 521, 491,
	522, 523, 0, 546, 497, 415, 370, 564, 563, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 1018, 1019,
	0, 0, 0, 0, 299, 219, 492, 612, 494, 493,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1022,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 289, 421, 438, 300, 411, 451, 305, 418, 295,
	385, 408, 0, 0, 291, 436, 417, 367, 346, 347,
	290, 0, 403, 324, 338, 321, 383, 0, 435, 463,
	320, 454, 993, 446, 293, 992, 445, 382, 432, 437,
	368, 362, 0, 292, 434, 366, 361, 350, 328, 479,
	351, 352, 342, 394, 360, 395, 343, 372, 371, 373,
	0, 0, 0, 0, 0, 474, 475, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 605,
	0, 0, 609, 0, 448, 0, 0, 0, 0, 0,
	0, 420, 0, 0, 353, 0, 0, 0, 464, 0,
	406, 388, 631, 0, 0, 404, 358, 433, 396, 439,
	422, 447, 400, 397, 284, 423, 323, 369, 296, 298,
	318, 325, 327, 329, 330, 378, 379, 391, 410, 424,
	425, 426, 322, 306, 405, 307, 340, 308, 285, 314,
	312, 315, 412, 316, 287, 392, 430, 0, 335, 401,
	365, 288, 364, 393, 429, 428, 297, 455, 461, 462,
	551, 0, 467, 632, 633, 634, 476, 0, 0, 481,
	482, 483, 485, 486, 487, 488, 552, 569, 536, 506,
	469, 560, 503, 507, 508, 572, 0, 0, 0, 460,
	354, 355, 0, 333, 281, 282, 627, 319, 384, 574,
	607, 608, 499, 0, 561, 500, 509, 311, 533, 545,
	544, 380, 459, 0, 556, 559, 489, 626, 0, 553,
	568, 630, 567, 623, 390, 0, 409, 565, 512, 0,
	557, 531, 0, 558, 527, 562, 0, 501, 0, 416,
	441, 453, 470, 473, 502, 587, 588, 589, 286, 472,
	591, 592, 593, 594, 595, 596, 597, 590, 444, 534,
	511, 537, 452, 514, 513, 0, 0, 548, 468, 549,
	550, 374, 375, 376, 377, 337, 575, 304, 471, 399,
	0, 535, 0, 0, 0, 0, 0, 0, 0, 0,
	540, 541, 538, 635, 0, 598, 599, 0, 0, 465,
	466, 332, 339, 484, 341, 303, 389, 334, 450, 348,
	0, 477, 542, 478, 601, 604, 602, 603, 1020, 2015,
	1016, 2016, 349, 359, 402, 449, 387, 407, 301, 440,
	414, 1017, 528, 555, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 270, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	583, 582, 581, 580, 579, 578, 577, 576, 0, 0,
	525, 427, 313, 275, 309, 310, 317, 624, 621, 431,
	625, 0, 283, 505, 357, 0, 398, 331, 570, 571,
	0, 0, 231, 232, 233, 234, 235, 236, 237, 238,
	276, 239, 240, 241, 242, 243, 244, 245, 248, 249,
	250, 251, 252, 253, 254, 255, 573, 246, 247, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 0, 0, 0, 277, 278, 279, 280,
	0, 0, 271, 272, 273, 274, 0, 0, 0, 456,
	457, 458, 480, 0, 442, 504, 622, 0, 0, 0,
	0, 0, 0, 0, 554, 566, 600, 0, 610, 611,
	613, 615, 614, 617, 419, 0, 0, 628, 495, 496,
	629, 606, 386, 0, 510, 543, 532, 616, 498, 0,
	0, 2878, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 0, 356, 547, 529, 539, 530, 515, 516, 517,
	524, 336, 518, 519, 520, 490, 521, 491, 522, 523,
	0, 546, 497, 415, 370, 564, 563, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 0, 0, 0, 0,
	0, 0, 299, 219, 492, 612, 494, 493, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 302, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 289,
	421, 438, 300, 411, 451, 305, 418, 295, 385, 408,
	0, 0, 291, 436, 417, 367, 346, 347, 290, 0,
	403, 324, 338, 321, 383, 0, 435, 463, 320, 454,
	0, 446, 293, 0, 445, 382, 432, 437, 368, 362,
	0, 292, 434, 366, 361, 350, 328, 479, 351, 352,
	342, 394, 360, 395, 343, 372, 371, 373, 0, 0,
	0, 0, 0, 474, 475, 0, 0, 0, 0, 0,
	0, 0, 0, 2881, 0, 0, 2880, 605, 0, 0,
	609, 0, 448, 0, 0, 0, 0, 0, 0, 420,
	0, 0, 353, 0, 0, 0, 464, 0, 406, 388,
	631, 0, 0, 404, 358, 433, 396, 439, 422, 447,
	400, 397, 284, 423, 323, 369, 296, 298, 318, 325,
	327, 329, 330, 378, 379, 391, 410, 424, 425, 426,
	322, 306, 405, 307, 340, 308, 285, 314, 312, 315,
	412, 316, 287, 392, 430, 0, 335, 401, 365, 288,
	364, 393, 429, 428, 297, 455, 461, 462, 551, 0,
	467, 632, 633, 634, 476, 0, 0, 481, 482, 483,
	485, 486, 487, 488, 552, 569, 536, 506, 469, 560,
	503, 507, 508, 572, 0, 0, 0, 460, 354, 355,
	0, 333, 281, 282, 627, 319, 384, 574, 607, 608,
	499, 0, 561, 500, 509, 311, 533, 545, 544, 380,
	459, 0, 556, 559, 489, 626, 0, 553, 568, 630,
	567, 623, 390, 0, 409, 565, 512, 0, 557, 531,
	0, 558, 527, 562, 0, 501, 0, 416, 441, 453,
	470, 473, 502, 587, 588, 589, 286, 472, 591, 592,
	593, 594, 595, 596, 597, 590, 444, 534, 511, 537,
	452, 514, 513, 0, 0, 548, 468, 549, 550, 374,
	375, 376, 377, 337, 575, 304, 471, 399, 0, 535,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 541,
	538, 635, 0, 598, 599, 0, 0, 465, 466, 332,
	339, 484, 341, 303, 389, 334, 450, 348, 0, 477,
	542, 478, 601, 604, 602, 603, 381, 344, 345, 413,
	349, 359, 402, 449, 387, 407, 301, 440, 414, 363,
	528, 555, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 270, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 583, 582,
	581, 580, 579, 578, 577, 576, 0, 0, 525, 427,
	313, 275, 309, 310, 317, 624, 621, 431, 625, 0,
	283, 505, 357, 0, 398, 331, 570, 571, 0, 0,
	231, 232, 233, 234, 235, 236, 237, 238, 276, 239,
	240, 241, 242, 243, 244, 245, 248, 249, 250, 251,
	252, 253, 254, 255, 573, 246, 247, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 0, 0, 0, 277, 278, 279, 280, 0, 0,
	271, 272, 273, 274, 0, 0, 0, 456, 457, 458,
	480, 0, 442, 504, 622, 0, 0, 0, 0, 0,
	0, 0, 554, 566, 600, 0, 610, 611, 613, 615,
	614, 617, 419, 0, 0, 628, 495, 496, 629, 606,
	386, 0, 510, 543, 532, 616, 498, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 1496, 0,
	356, 547, 529, 539, 530, 515, 516, 517, 524, 336,
	518, 519, 520, 490, 521, 491, 522, 523, 0, 546,
	497, 415, 370, 564, 563, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 0, 0, 1494, 0, 0, 0,
	299, 219, 492, 612, 494, 493, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 302, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1492, 0, 0, 0, 0, 0, 0, 289, 421, 438,
	300, 411, 451, 305, 418, 295, 385, 408, 0, 0,
	291, 436, 417, 367, 346, 347, 290, 0, 403, 324,
	338, 321, 383, 0, 435, 463, 320, 454, 0, 446,
	293, 0, 445, 382, 432, 437, 368, 362, 0, 292,
	434, 366, 361, 350, 328, 479, 351, 352, 342, 394,
	360, 395, 343, 372, 371, 373, 0, 0, 0, 0,
	0, 474, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 0, 0, 609, 0,
	448, 0, 0, 0, 0, 0, 0, 420, 0, 0,
	353, 0, 0, 0, 464, 0, 406, 388, 631, 0,
	0, 404, 358, 433, 396, 439, 422, 447, 400, 397,
	284, 423, 323, 369, 296, 298, 318, 325, 327, 329,
	330, 378, 379, 391, 410, 424, 425, 426, 322, 306,
	405, 307, 340, 308, 285, 314, 312, 315, 412, 316,
	287, 392, 430, 0, 335, 401, 365, 288, 364, 393,
	429, 428, 297, 455, 461, 462, 551, 0, 467, 632,
	633, 634, 476, 0, 0, 481, 482, 483, 485, 486,
	487, 488, 552, 569, 536, 506, 469, 560, 503, 507,
	508, 572, 0, 0, 0, 460, 354, 355, 0, 333,
	281, 282, 627, 319, 384, 574, 607, 608, 499, 0,
	561, 500, 509, 311, 533, 545, 544, 380, 459, 0,
	556, 559, 489, 626, 0, 553, 568, 630, 567, 623,
	390, 0, 409, 565, 512, 0, 557, 531, 0, 558,
	527, 562, 0, 501, 0, 416, 441, 453, 470, 473,
	502, 587, 588, 589, 286, 472, 591, 592, 593, 594,
	595, 596, 597, 590, 444, 534, 511, 537, 452, 514,
	513, 0, 0, 548, 468, 549, 550, 374, 375, 376,
	377, 337, 575, 304, 471, 399, 0, 535, 0, 0,
	0, 0, 0, 0, 0, 0, 540, 541, 538, 635,
	0, 598, 599, 0, 0, 465, 466, 332, 339, 484,
	341, 303, 389, 334, 450, 348, 0, 477, 542, 478,
	601, 604, 602, 603, 381, 344, 345, 413, 349, 359,
	402, 449, 387, 407, 301, 440, 414, 363, 528, 555,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 270, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 583, 582, 581, 580,
	579, 578, 577, 576, 0, 0, 525, 427, 313, 275,
	309, 310, 317, 624, 621, 431, 625, 0, 283, 505,
	357, 0, 398, 331, 570, 571, 0, 0, 231, 232,
	233, 234, 235, 236, 237, 238, 276, 239, 240, 241,
	242, 243, 244, 245, 248, 249, 250, 251, 252, 253,
	254, 255, 573, 246, 247, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 0,
	0, 0, 277, 278, 279, 280, 0, 0, 271, 272,
	273, 274, 0, 0, 0, 456, 457, 458, 480, 0,
	442, 504, 622, 0, 0, 0, 0, 0, 0, 0,
	554, 566, 600, 0, 610, 611, 613, 615, 614, 617,
	419, 0, 0, 628, 495, 496, 629, 606, 386, 0,
	510, 543, 532, 616, 498, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 326, 1490, 0, 356, 547,
	529, 539, 530, 515, 516, 517, 524, 336, 518, 519,
	520, 490, 521, 491, 522, 523, 0, 546, 497, 415,
	370, 564, 563, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 0, 0, 1494, 0, 0, 0, 299, 219,
	492, 612, 494, 493, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 302, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1492, 0,
	0, 0, 0, 0, 0, 289, 421, 438, 300, 411,
	451, 305, 418, 295, 385, 408, 0, 0, 291, 436,
	417, 367, 346, 347, 290, 0, 403, 324, 338, 321,
	383, 0, 435, 463, 320, 454, 0, 446, 293, 0,
	445, 382, 432, 437, 368, 362, 0, 292, 434, 366,
	361, 350, 328, 479, 351, 352, 342, 394, 360, 395,
	343, 372, 371, 373, 0, 0, 0, 0, 0, 474,
	475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 605, 0, 0, 609, 0, 448, 0,
	0, 0, 0, 0, 0, 420, 0, 0, 353, 0,
	0, 0, 464, 0, 406, 388, 631, 0, 0, 404,
	358, 433, 396, 439, 422, 447, 400, 397, 284, 423,
	323, 369, 296, 298, 318, 325, 327, 329, 330, 378,
	379, 391, 410, 424, 425, 426, 322, 306, 405, 307,
	340, 308, 285, 314, 312, 315, 412, 316, 287, 392,
	430, 0, 335, 401, 365, 288, 364, 393, 429, 428,
	297, 455, 461, 462, 551, 0, 467, 632, 633, 634,
	476, 0, 0, 481, 482, 483, 485, 486, 487, 488,
	552, 569, 536, 506, 469, 560, 503, 507, 508, 572,
	0, 0, 0, 460, 354, 355, 0, 333, 281, 282,
	627, 319, 384, 574, 607, 608, 499, 0, 561, 500,
	509, 311, 533, 545, 544, 380, 459, 0, 556, 559,
	489, 626, 0, 553, 568, 630, 567, 623, 390, 0,
	409, 565, 512, 0, 557, 531, 0, 558, 527, 562,
	0, 501, 0, 416, 441, 453, 470, 473, 502, 587,
	588, 589, 286, 472, 591, 592, 593, 594, 595, 596,
	597, 590, 444, 534, 511, 537, 452, 514, 513, 0,
	0, 548, 468, 549, 550, 374, 375, 376, 377, 337,
	575, 304, 471, 399, 0, 535, 0, 0, 0, 0,
	0, 0, 0, 0, 540, 541, 538, 635, 0, 598,
	599, 0, 0, 465, 466, 332, 339, 484, 341, 303,
	389, 334, 450, 348, 0, 477, 542, 478, 601, 604,
	602, 603, 381, 344, 345, 413, 349, 359, 402, 449,
	387, 407, 301, 440, 414, 363, 528, 555, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 583, 582, 581, 580, 579, 578,
	577, 576, 0, 0, 525, 427, 313, 275, 309, 310,
	317, 624, 621, 431, 625, 0, 283, 505, 357, 0,
	398, 331, 570, 571, 0, 0, 231, 232, 233, 234,
	235, 236, 237, 238, 276, 239, 240, 241, 242, 243,
	244, 245, 248, 249, 250, 251, 252, 253, 254, 255,
	573, 246, 247, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 0, 0, 0,
	277, 278, 279, 280, 0, 0, 271, 272, 273, 274,
	0, 0, 0, 456, 457, 458, 480, 0, 442, 504,
	622, 0, 0, 0, 0, 0, 0, 0, 554, 566,
	600, 0, 610, 611, 613, 615, 614, 617, 419, 0,
	0, 628, 495, 496, 629, 606, 386, 0, 510, 543,
	532, 616, 498, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 547, 529, 539,
	530, 515, 516, 517, 524, 336, 518, 519, 520, 490,
	521, 491, 522, 523, 0, 546, 497, 415, 370, 564,
	563, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3908, 0, 218,
	822, 0, 0, 0, 0, 0, 299, 219, 492, 612,
	494, 493, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 421, 438, 300, 411, 451, 305,
	418, 295, 385, 408, 0, 0, 291, 436, 417, 367,
	346, 347, 290, 0, 403, 324, 338, 321, 383, 0,
	435, 463, 320, 454, 0, 446, 293, 0, 445, 382,
	432, 437, 368, 362, 0, 292, 434, 366, 361, 350,
	328, 479, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 474, 475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 605, 0, 0, 609, 0, 448, 0, 0, 0,
	0, 0, 0, 420, 0, 0, 353, 0, 0, 0,
	464, 0, 406, 388, 631, 0, 0, 404, 358, 433,
	396, 439, 422, 447, 400, 397, 284, 423, 323, 369,
	296, 298, 318, 325, 327, 329, 330, 378, 379, 391,
	410, 424, 425, 426, 322, 306, 405, 307, 340, 308,
	285, 314, 312, 315, 412, 316, 287, 392, 430, 0,
	335, 401, 365, 288, 364, 393, 429, 428, 297, 455,
	461, 462, 551, 0, 467, 632, 633, 634, 476, 0,
	0, 481, 482, 483, 485, 486, 487, 488, 552, 569,
	536, 506, 469, 560, 503, 507, 508, 572, 0, 0,
	0, 460, 354, 355, 0, 333, 281, 282, 627, 319,
	384, 574, 607, 608, 499, 0, 561, 500, 509, 311,
	533, 545, 544, 380, 459, 0, 556, 559, 489, 626,
	0, 553, 568, 630, 567, 623, 390, 0, 409, 565,
	512, 0, 557, 531, 0, 558, 527, 562, 0, 501,
	0, 416, 441, 453, 470, 473, 502, 587, 588, 589,
	286, 472, 591, 592, 593, 594, 595, 596, 597, 590,
	444, 534, 511, 537, 452, 514, 513, 0, 0, 548,
	468, 549, 550, 374, 375, 376, 377, 337, 575, 304,
	471, 399, 0, 535, 0, 0, 0, 0, 0, 0,
	0, 0, 540, 541, 538, 635, 0, 598, 599, 0,
	0, 465, 466, 332, 339, 484, 341, 303, 389, 334,
	450, 348, 0, 477, 542, 478, 601, 604, 602, 603,
	381, 344, 345, 413, 349, 359, 402, 449, 387, 407,
	301, 440, 414, 363, 528, 555, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 583, 582, 581, 580, 579, 578, 577, 576,
	0, 0, 525, 427, 313, 275, 309, 310, 317, 624,
	621, 431, 625, 0, 283, 505, 357, 0, 398, 331,
	570, 571, 0, 0, 231, 232, 233, 234, 235, 236,
	237, 238, 276, 239, 240, 241, 242, 243, 244, 245,
	248, 249, 250, 251, 252, 253, 254, 255, 573, 246,
	247, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 0, 0, 0, 277, 278,
	279, 280, 0, 0, 271, 272, 273, 274, 0, 0,
	0, 456, 457, 458, 480, 0, 442, 504, 622, 0,
	0, 0, 0, 0, 0, 0, 554, 566, 600, 0,
	610, 611, 613, 615, 614, 617, 419, 0, 0, 628,
	495, 496, 629, 606, 386, 0, 510, 543, 532, 616,
	498, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 326, 0, 0, 356, 547, 529, 539, 530, 515,
	516, 517, 524, 336, 518, 519, 520, 490, 521, 491,
	522, 523, 0, 546, 497, 415, 370, 564, 563, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 0, 0,
	1494, 0, 0, 0, 299, 219, 492, 612, 494, 493,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 302,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1492, 0, 0, 0, 0, 0,
	0, 289, 421, 438, 300, 411, 451, 305, 418, 295,
	385, 408, 0, 0, 291, 436, 417, 367, 346, 347,
	290, 0, 403, 324, 338, 321, 383, 0, 435, 463,
	320, 454, 0, 446, 293, 0, 445, 382, 432, 437,
	368, 362, 0, 292, 434, 366, 361, 350, 328, 479,
	351, 352, 342, 394, 360, 395, 343, 372, 371, 373,
	0, 0, 0, 0, 0, 474, 475, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 605,
	0, 0, 609, 0, 448, 0, 0, 0, 0, 0,
	0, 420, 0, 0, 353, 0, 0, 0, 464, 0,
	406, 388, 631, 0, 0, 404, 358, 433, 396, 439,
	422, 447, 400, 397, 284, 423, 323, 369, 296, 298,
	318, 325, 327, 329, 330, 378, 379, 391, 410, 424,
	425, 426, 322, 306, 405, 307, 340, 308, 285, 314,
	312, 315, 412, 316, 287, 392, 430, 0, 335, 401,
	365, 288, 364, 393, 429, 428, 297, 455, 461, 462,
	551, 0, 467, 632, 633, 634, 476, 0, 0, 481,
	482, 483, 485, 486, 487, 488, 552, 569, 536, 506,
	469, 560, 503, 507, 508, 572, 0, 0, 0, 460,
	354, 355, 0, 333, 281, 282, 627, 319, 384, 574,
	607, 608, 499, 0, 561, 500, 509, 311, 533, 545,
	544, 380, 459, 0, 556, 559, 489, 626, 0, 553,
	568, 630, 567, 623, 390, 0, 409, 565, 512, 0,
	557, 531, 0, 558, 527, 562, 0, 501, 0, 416,
	441, 453, 470, 473, 502, 587, 588, 589, 286, 472,
	591, 592, 593, 594, 595, 596, 597, 590, 444, 534,
	511, 537, 452, 514, 513, 0, 0, 548, 468, 549,
	550, 374, 375, 376, 377, 337, 575, 304, 471, 399,
	0, 535, 0, 0, 0, 0, 0, 0, 0, 0,
	540, 541, 538, 635, 0, 598, 599, 0, 0, 465,
	466, 332, 339, 484, 341, 303, 389, 334, 450, 348,
	0, 477, 542, 478, 601, 604, 602, 603, 381, 344,
	345, 413, 349, 359, 402, 449, 387, 407, 301, 440,
	414, 363, 528, 555, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 270, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	583, 582, 581, 580, 579, 578, 577, 576, 0, 0,
	525, 427, 313, 275, 309, 310, 317, 624, 621, 431,
	625, 0, 283, 505, 357, 0, 398, 331, 570, 571,
	0, 0, 231, 232, 233, 234, 235, 236, 237, 238,
	276, 239, 240, 241, 242, 243, 244, 245, 248, 249,
	250, 251, 252, 253, 254, 255, 573, 246, 247, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 0, 0, 0, 277, 278, 279, 280,
	0, 0, 271, 272, 273, 274, 0, 0, 0, 456,
	457, 458, 480, 0, 442, 504, 622, 0, 0, 0,
	0, 0, 0, 0, 554, 566, 600, 0, 610, 611,
	613, 615, 614, 617, 419, 0, 0, 628, 495, 496,
	629, 606, 386, 0, 510, 543, 532, 616, 498, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 0, 356, 547, 529, 539, 530, 515, 516, 517,
	524, 336, 518, 519, 520, 490, 521, 491, 522, 523,
	0, 546, 497, 415, 370, 564, 563, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 0, 0, 0, 0,
	0, 0, 299, 219, 492, 612, 494, 493, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 302, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 289,
	421, 438, 300, 411, 451, 305, 418, 295, 385, 408,
	0, 0, 291, 436, 417, 367, 346, 347, 290, 0,
	403, 324, 338, 321, 383, 0, 435, 463, 320, 454,
	0, 446, 293, 0, 445, 382, 432, 437, 368, 362,
	0, 292, 434, 366, 361, 350, 328, 479, 351, 352,
	342, 394, 360, 395, 343, 372, 371, 373, 0, 0,
	0, 0, 0, 474, 475, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 605, 0, 0,
	609, 0, 448, 0, 0, 0, 0, 0, 0, 420,
	0, 0, 353, 0, 0, 0, 464, 0, 406, 388,
	631, 0, 0, 404, 358, 433, 396, 439, 422, 447,
	400, 397, 284, 423, 323, 369, 296, 298, 318, 325,
	327, 329, 330, 378, 379, 391, 410, 424, 425, 426,
	322, 306, 405, 307, 340, 308, 285, 314, 312, 315,
	412, 316, 287, 392, 430, 0, 335, 401, 365, 288,
	364, 393, 429, 428, 297, 455, 461, 462, 551, 0,
	467, 632, 633, 634, 476, 2408, 0, 481, 482, 483,
	485, 486, 487, 488, 552, 569, 536, 506, 469, 560,
	503, 507, 508, 572, 0, 0, 0, 460, 354, 355,
	0, 333, 281, 282, 627, 319, 384, 574, 607, 608,
	499, 0, 561, 500, 509, 311, 533, 545, 544, 380,
	459, 0, 556, 559, 489, 626, 0, 553, 568, 630,
	567, 623, 390, 0, 409, 565, 512, 0, 557, 531,
	0, 558, 527, 562, 0, 501, 0, 416, 441, 453,
	470, 473, 502, 587, 588, 589, 286, 472, 591, 592,
	593, 594, 595, 596, 597, 590, 444, 534, 511, 537,
	452, 514, 513, 0, 0, 548, 468, 549, 550, 374,
	375, 376, 377, 337, 575, 304, 471, 399, 0, 535,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 541,
	538, 635, 0, 598, 599, 0, 0, 465, 466, 332,
	339, 484, 341, 303, 389, 334, 450, 348, 0, 477,
	542, 478, 601, 604, 602, 603, 381, 344, 345, 413,
	349, 359, 402, 449, 387, 407, 301, 440, 414, 363,
	528, 555, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 270, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 583, 582,
	581, 580, 579, 578, 577, 576, 943, 0, 525, 427,
	313, 275, 309, 310, 317, 624, 621, 431, 625, 0,
	283, 505, 357, 0, 398, 331, 570, 571, 0, 0,
	231, 232, 233, 234, 235, 236, 237, 238, 276, 239,
	240, 241, 242, 243, 244, 245, 248, 249, 250, 251,
	252, 253, 254, 255, 573, 246, 247, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 0, 0, 0, 277, 278, 279, 280, 0, 0,
	271, 272, 273, 274, 0, 0, 0, 456, 457, 458,
	480, 0, 442, 504, 622, 0, 0, 0, 0, 0,
	0, 0, 554, 566, 600, 0, 610, 611, 613, 615,
	614, 617, 419, 0, 0, 628, 495, 496, 629, 606,
	386, 0, 510, 543, 532, 616, 498, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 547, 529, 539, 530, 515, 516, 517, 524, 336,
	518, 519, 520, 490, 521, 491, 522, 523, 0, 546,
	497, 415, 370, 564, 563, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 0, 0, 1494, 0, 0, 0,
	299, 219, 492, 612, 494, 493, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 302, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1702, 0, 0, 0, 0, 0, 0, 289, 421, 438,
	300, 411, 451, 305, 418, 295, 385, 408, 0, 0,
	291, 436, 417, 367, 346, 347, 290, 0, 403, 324,
	338, 321, 383, 0, 435, 463, 320, 454, 0, 446,
	293, 0, 445, 382, 432, 437, 368, 362, 0, 292,
	434, 366, 361, 350, 328, 479, 351, 352, 342, 394,
	360, 395, 343, 372, 371, 373, 0, 0, 0, 0,
	0, 474, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 0, 0, 609, 0,
	448, 0, 0, 0, 0, 0, 0, 420, 0, 0,
	353, 0, 0, 0, 464, 0, 406, 388, 631, 0,
	0, 404, 358, 433, 396, 439, 422, 447, 400, 397,
	284, 423, 323, 369, 296, 298, 318, 325, 327, 329,
	330, 378, 379, 391, 410, 424, 425, 426, 322, 306,
	405, 307, 340, 308, 285, 314, 312, 315, 412, 316,
	287, 392, 430, 0, 335, 401, 365, 288, 364, 393,
	429, 428, 297, 455, 461, 462, 551, 0, 467, 632,
	633, 634, 476, 0, 0, 481, 482, 483, 485, 486,
	487, 488, 552, 569, 536, 506, 469, 560, 503, 507,
	508, 572, 0, 0, 0, 460, 354, 355, 0, 333,
	281, 282, 627, 319, 384, 574, 607, 608, 499, 0,
	561, 500, 509, 311, 533, 545, 544, 380, 459, 0,
	556, 559, 489, 626, 0, 553, 568, 630, 567, 623,
	390, 0, 409, 565, 512, 0, 557, 531, 0, 558,
	527, 562, 0, 501, 0, 416, 441, 453, 470, 473,
	502, 587, 588, 589, 286, 472, 591, 592, 593, 594,
	595, 596, 597, 590, 444, 534, 511, 537, 452, 514,
	513, 0, 0, 548, 468, 549, 550, 374, 375, 376,
	377, 337, 575, 304, 471, 399, 0, 535, 0, 0,
	0, 0, 0, 0, 0, 0, 540, 541, 538, 635,
	0, 598, 599, 0, 0, 465, 466, 332, 339, 484,
	341, 303, 389, 334, 450, 348, 0, 477, 542, 478,
	601, 604, 602, 603, 381, 344, 345, 413, 349, 359,
	402, 449, 387, 407, 301, 440, 414, 363, 528, 555,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 270, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 583, 582, 581, 580,
	579, 578, 577, 576, 0, 0, 525, 427, 313, 275,
	309, 310, 317, 624, 621, 431, 625, 0, 283, 505,
	357, 0, 398, 331, 570, 571, 0, 0, 231, 232,
	233, 234, 235, 236, 237, 238, 276, 239, 240, 241,
	242, 243, 244, 245, 248, 249, 250, 251, 252, 253,
	254, 255, 573, 246, 247, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 0,
	0, 0, 277, 278, 279, 280, 0, 0, 271, 272,
	273, 274, 0, 0, 0, 456, 457, 458, 480, 0,
	442, 504, 622, 0, 0, 0, 0, 0, 0, 0,
	554, 566, 600, 0, 610, 611, 613, 615, 614, 617,
	419, 0, 0, 628, 495, 496, 629, 606, 386, 0,
	510, 543, 532, 616, 498, 0, 0, 0, 0, 0,
	2442, 0, 0, 0, 0, 326, 0, 0, 356, 547,
	529, 539, 530, 515, 516, 517, 524, 336, 518, 519,
	520, 490, 521, 491, 522, 523, 0, 546, 497, 415,
	370, 564, 563, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 0, 0, 2444, 0, 0, 0, 299, 219,
	492, 612, 494, 493, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 302, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 289, 421, 438, 300, 411,
	451, 305, 418, 295, 385, 408, 0, 0, 291, 436,
	417, 367, 346, 347, 290, 0, 403, 324, 338, 321,
	383, 0, 435, 463, 320, 454, 0, 446, 293, 0,
	445, 382, 432, 437, 368, 362, 0, 292, 434, 366,
	361, 350, 328, 479, 351, 352, 342, 394, 360, 395,
	343, 372, 371, 373, 0, 0, 0, 0, 0, 474,
	475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 605, 0, 0, 609, 0, 448, 0,
	0, 0, 0, 0, 0, 420, 0, 0, 353, 0,
	0, 0, 464, 0, 406, 388, 631, 0, 0, 404,
	358, 433, 396, 439, 422, 447, 400, 397, 284, 423,
	323, 369, 296, 298, 318, 325, 327, 329, 330, 378,
	379, 391, 410, 424, 425, 426, 322, 306, 405, 307,
	340, 308, 285, 314, 312, 315, 412, 316, 287, 392,
	430, 0, 335, 401, 365, 288, 364, 393, 429, 428,
	297, 455, 461, 462, 551, 0, 467, 632, 633, 634,
	476, 0, 0, 481, 482, 483, 485, 486, 487, 488,
	552, 569, 536, 506, 469, 560, 503, 507, 508, 572,
	0, 0, 0, 460, 354, 355, 0, 333, 281, 282,
	627, 319, 384, 574, 607, 608, 499, 0, 561, 500,
	509, 311, 533, 545, 544, 380, 459, 0, 556, 559,
	489, 626, 0, 553, 568, 630, 567, 623, 390, 0,
	409, 565, 512, 0, 557, 531, 0, 558, 527, 562,
	0, 501, 0, 416, 441, 453, 470, 473, 502, 587,
	588, 589, 286, 472, 591, 592, 593, 594, 595, 596,
	597, 590, 444, 534, 511, 537, 452, 514, 513, 0,
	0, 548, 468, 549, 550, 374, 375, 376, 377, 337,
	575, 304, 471, 399, 0, 535, 0, 0, 0, 0,
	0, 0, 0, 0, 540, 541, 538, 635, 0, 598,
	599, 0, 0, 465, 466, 332, 339, 484, 341, 303,
	389, 334, 450, 348, 0, 477, 542, 478, 601, 604,
	602, 603, 381, 344, 345, 413, 349, 359, 402, 449,
	387, 407, 301, 440, 414, 363, 528, 555, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 583, 582, 581, 580, 579, 578,
	577, 576, 0, 0, 525, 427, 313, 275, 309, 310,
	317, 624, 621, 431, 625, 0, 283, 505, 357, 0,
	398, 331, 570, 571, 0, 0, 231, 232, 233, 234,
	235, 236, 237, 238, 276, 239, 240, 241, 242, 243,
	244, 245, 248, 249, 250, 251, 252, 253, 254, 255,
	573, 246, 247, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 0, 0, 0,
	277, 278, 279, 280, 0, 0, 271, 272, 273, 274,
	0, 0, 0, 456, 457, 458, 480, 0, 442, 504,
	622, 0, 0, 0, 0, 0, 0, 0, 554, 566,
	600, 0, 610, 611, 613, 615, 614, 617, 419, 0,
	0, 628, 495, 496, 629, 606, 386, 0, 510, 543,
	532, 616, 498, 0, 0, 0, 0, 0, 2063, 0,
	0, 0, 0, 326, 0, 0, 356, 547, 529, 539,
	530, 515, 516, 517, 524, 336, 518, 519, 520, 490,
	521, 491, 522, 523, 0, 546, 497, 415, 370, 564,
	563, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	0, 0, 2064, 0, 0, 0, 299, 219, 492, 612,
	494, 493, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 421, 438, 300, 411, 451, 305,
	418, 295, 385, 408, 0, 0, 291, 436, 417, 367,
	346, 347, 290, 0, 403, 324, 338, 321, 383, 0,
	435, 463, 320, 454, 0, 446, 293, 0, 445, 382,
	432, 437, 368, 362, 0, 292, 434, 366, 361, 350,
	328, 479, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 474, 475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 605, 0, 0, 609, 0, 448, 0, 0, 0,
	0, 0, 0, 420, 0, 0, 353, 0, 0, 0,
	464, 0, 406, 388, 631, 0, 0, 404, 358, 433,
	396, 439, 422, 447, 400, 397, 284, 423, 323, 369,
	296, 298, 318, 325, 327, 329, 330, 378, 379, 391,
	410, 424, 425, 426, 322, 306, 405, 307, 340, 308,
	285, 314, 312, 315, 412, 316, 287, 392, 430, 0,
	335, 401, 365, 288, 364, 393, 429, 428, 297, 455,
	461, 462, 551, 0, 467, 632, 633, 634, 476, 0,
	0, 481, 482, 483, 485, 486, 487, 488, 552, 569,
	536, 506, 469, 560, 503, 507, 508, 572, 0, 0,
	0, 460, 354, 355, 0, 333, 281, 282, 627, 319,
	384, 574, 607, 608, 499, 0, 561, 500, 509, 311,
	533, 545, 544, 380, 459, 0, 556, 559, 489, 626,
	0, 553, 568, 630, 567, 623, 390, 0, 409, 565,
	512, 0, 557, 531, 0, 558, 527, 562, 0, 501,
	0, 416, 441, 453, 470, 473, 502, 587, 588, 589,
	286, 472, 591, 592, 593, 594, 595, 596, 597, 590,
	444, 534, 511, 537, 452, 514, 513, 0, 0, 548,
	468, 549, 550, 374, 375, 376, 377, 337, 575, 304,
	471, 399, 0, 535, 0, 0, 0, 0, 0, 0,
	0, 0, 540, 541, 538, 635, 0, 598, 599, 0,
	0, 465, 466, 332, 339, 484, 341, 303, 389, 334,
	450, 348, 0, 477, 542, 478, 601, 604, 602, 603,
	381, 344, 345, 413, 349, 359, 402, 449, 387, 407,
	301, 440, 414, 363, 528, 555, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 583, 582, 581, 580, 579, 578, 577, 576,
	0, 0, 525, 427, 313, 275, 309, 310, 317, 624,
	621, 431, 625, 0, 283, 505, 357, 0, 398, 331,
	570, 571, 0, 0, 231, 232, 233, 234, 235, 236,
	237, 238, 276, 239, 240, 241, 242, 243, 244, 245,
	248, 249, 250, 251, 252, 253, 254, 255, 573, 246,
	247, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 0, 0, 0, 277, 278,
	279, 280, 0, 0, 271, 272, 273, 274, 0, 0,
	0, 456, 457, 458, 480, 0, 442, 504, 622, 0,
	0, 0, 0, 0, 0, 0, 554, 566, 600, 0,
	610, 611, 613, 615, 614, 617, 419, 0, 0, 628,
	495, 496, 629, 606, 386, 0, 510, 543, 532, 616,
	498, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 326, 0, 0, 356, 547, 529, 539, 530, 515,
	516, 517, 524, 336, 518, 519, 520, 490, 521, 491,
	522, 523, 0, 546, 497, 415, 370, 564, 563, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 0, 0,
	3083, 3085, 0, 0, 299, 219, 492, 612, 494, 493,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 302,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 289, 421, 438, 300, 411, 451, 305, 418, 295,
	385, 408, 0, 0, 291, 436, 417, 367, 346, 347,
	290, 0, 403, 324, 338, 321, 383, 0, 435, 463,
	320, 454, 0, 446, 293, 0, 445, 382, 432, 437,
	368, 362, 0, 292, 434, 366, 361, 350, 328, 479,
	351, 352, 342, 394, 360, 395, 343, 372, 371, 373,
	0, 0, 0, 0, 0, 474, 475, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 605,
	0, 0, 609, 0, 448, 0, 0, 0, 0, 0,
	0, 420, 0, 0, 353, 0, 0, 0, 464, 0,
	406, 388, 631, 0, 0, 404, 358, 433, 396, 439,
	422, 447, 400, 397, 284, 423, 323, 369, 296, 298,
	318, 325, 327, 329, 330, 378, 379, 391, 410, 424,
	425, 426, 322, 306, 405, 307, 340, 308, 285, 314,
	312, 315, 412, 316, 287, 392, 430, 0, 335, 401,
	365, 288, 364, 393, 429, 428, 297, 455, 461, 462,
	551, 0, 467, 632, 633, 634, 476, 0, 0, 481,
	482, 483, 485, 486, 487, 488, 552, 569, 536, 506,
	469, 560, 503, 507, 508, 572, 0, 0, 0, 460,
	354, 355, 0, 333, 281, 282, 627, 319, 384, 574,
	607, 608, 499, 0, 561, 500, 509, 311, 533, 545,
	544, 380, 459, 0, 556, 559, 489, 626, 0, 553,
	568, 630, 567, 623, 390, 0, 409, 565, 512, 0,
	557, 531, 0, 558, 527, 562, 0, 501, 0, 416,
	441, 453, 470, 473, 502, 587, 588, 589, 286, 472,
	591, 592, 593, 594, 595, 596, 597, 590, 444, 534,
	511, 537, 452, 514, 513, 0, 0, 548, 468, 549,
	550, 374, 375, 376, 377, 337, 575, 304, 471, 399,
	0, 535, 0, 0, 0, 0, 0, 0, 0, 0,
	540, 541, 538, 635, 0, 598, 599, 0, 0, 465,
	466, 332, 339, 484, 341, 303, 389, 334, 450, 348,
	0, 477, 542, 478, 601, 604, 602, 603, 381, 344,
	345, 413, 349, 359, 402, 449, 387, 407, 301, 440,
	414, 363, 528, 555, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 270, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	583, 582, 581, 580, 579, 578, 577, 576, 0, 0,
	525, 427, 313, 275, 309, 310, 317, 624, 621, 431,
	625, 0, 283, 505, 357, 0, 398, 331, 570, 571,
	0, 0, 231, 232, 233, 234, 235, 236, 237, 238,
	276, 239, 240, 241, 242, 243, 244, 245, 248, 249,
	250, 251, 252, 253, 254, 255, 573, 246, 247, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 0, 0, 0, 277, 278, 279, 280,
	0, 0, 271, 272, 273, 274, 0, 0, 0, 456,
	457, 458, 480, 0, 442, 504, 622, 0, 0, 0,
	0, 0, 0, 0, 554, 566, 600, 0, 610, 611,
	613, 615, 614, 617, 419, 0, 0, 628, 495, 496,
	629, 606, 386, 0, 510, 543, 532, 616, 498, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	2464, 0, 356, 547, 529, 539, 530, 515, 516, 517,
	524, 336, 518, 519, 520, 490, 521, 491, 522, 523,
	0, 546, 497, 415, 370, 564, 563, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 0, 0, 1494, 0,
	0, 0, 299, 219, 492, 612, 494, 493, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 302, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 289,
	421, 438, 300, 411, 451, 305, 418, 295, 385, 408,
	0, 0, 291, 436, 417, 367, 346, 347, 290, 0,
	403, 324, 338, 321, 383, 0, 435, 463, 320, 454,
	0, 446, 293, 0, 445, 382, 432, 437, 368, 362,
	0, 292, 434, 366, 361, 350, 328, 479, 351, 352,
	342, 394, 360, 395, 343, 372, 371, 373, 0, 0,
	0, 0, 0, 474, 475, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 605, 0, 0,
	609, 0, 448, 0, 0, 0, 0, 0, 0, 420,
	0, 0, 353, 0, 0, 0, 464, 0, 406, 388,
	631, 0, 0, 404, 358, 433, 396, 439, 422, 447,
	400, 397, 284, 423, 323, 369, 296, 298, 318, 325,
	327, 329, 330, 378, 379, 391, 410, 424, 425, 426,
	322, 306, 405, 307, 340, 308, 285, 314, 312, 315,
	412, 316, 287, 392, 430, 0, 335, 401, 365, 288,
	364, 393, 429, 428, 297, 455, 461, 462, 551, 0,
	467, 632, 633, 634, 476, 0, 0, 481, 482, 483,
	485, 486, 487, 488, 552, 569, 536, 506, 469, 560,
	503, 507, 508, 572, 0, 0, 0, 460, 354, 355,
	0, 333, 281, 282, 627, 319, 384, 574, 607, 608,
	499, 0, 561, 500, 509, 311, 533, 545, 544, 380,
	459, 0, 556, 559, 489, 626, 0, 553, 568, 630,
	567, 623, 390, 0, 409, 565, 512, 0, 557, 531,
	0, 558, 527, 562, 0, 501, 0, 416, 441, 453,
	470, 473, 502, 587, 588, 589, 286, 472, 591, 592,
	593, 594, 595, 596, 597, 590, 444, 534, 511, 537,
	452, 514, 513, 0, 0, 548, 468, 549, 550, 374,
	375, 376, 377, 337, 575, 304, 471, 399, 0, 535,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 541,
	538, 635, 0, 598, 599, 0, 0, 465, 466, 332,
	339, 484, 341, 303, 389, 334, 450, 348, 0, 477,
	542, 478, 601, 604, 602, 603, 381, 344, 345, 413,
	349, 359, 402, 449, 387, 407, 301, 440, 414, 363,
	528, 555, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 270, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 583, 582,
	581, 580, 579, 578, 577, 576, 0, 0, 525, 427,
	313, 275, 309, 310, 317, 624, 621, 431, 625, 0,
	283, 505, 357, 0, 398, 331, 570, 571, 0, 0,
	231, 232, 233, 234, 235, 236, 237, 238, 276, 239,
	240, 241, 242, 243, 244, 245, 248, 249, 250, 251,
	252, 253, 254, 255, 573, 246, 247, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 0, 0, 0, 277, 278, 279, 280, 0, 0,
	271, 272, 273, 274, 0, 0, 0, 456, 457, 458,
	480, 0, 442, 504, 622, 0, 0, 0, 0, 0,
	0, 0, 554, 566, 600, 0, 610, 611, 613, 615,
	614, 617, 419, 0, 0, 628, 495, 496, 629, 606,
	386, 0, 510, 543, 532, 616, 498, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 642, 326, 0, 0,
	356, 547, 529, 539, 530, 515, 516, 517, 524, 336,
	518, 519, 520, 490, 521, 491, 522, 523, 0, 546,
	497, 415, 370, 564, 563, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 0, 0, 0, 0, 0, 0,
	299, 219, 492, 612, 494, 493, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 302, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 289, 421, 438,
	300, 411, 451, 305, 418, 295, 385, 408, 0, 0,
	291, 436, 417, 367, 346, 347, 290, 0, 403, 324,
	338, 321, 383, 0, 435, 463, 320, 454, 0, 446,
	293, 0, 445, 382, 432, 437, 368, 362, 0, 292,
	434, 366, 361, 350, 328, 479, 351, 352, 342, 394,
	360, 395, 343, 372, 371, 373, 0, 0, 0, 0,
	0, 474, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 0, 0, 609, 0,
	448, 0, 641, 0, 0, 0, 0, 420, 0, 0,
	353, 0, 0, 0, 464, 0, 406, 388, 631, 0,
	0, 404, 358, 433, 396, 439, 422, 447, 400, 397,
	284, 423, 323, 369, 296, 298, 318, 325, 327, 329,
	330, 378, 379, 391, 410, 424, 425, 426, 322, 306,
	405, 307, 340, 308, 285, 314, 312, 315, 412, 316,
	287, 392, 430, 0, 335, 401, 365, 288, 364, 393,
	429, 428, 297, 455, 461, 462, 551, 0, 467, 632,
	633, 634, 476, 0, 0, 481, 482, 483, 485, 486,
	487, 488, 552, 569, 536, 506, 469, 560, 503, 507,
	508, 572, 0, 0, 0, 460, 354, 355, 0, 333,
	281, 282, 627, 319, 384, 574, 607, 608, 499, 0,
	561, 500, 509, 311, 533, 545, 544, 380, 459, 0,
	556, 559, 489, 626, 0, 553, 568, 630, 567, 623,
	390, 0, 409, 565, 512, 0, 557, 531, 0, 558,
	527, 562, 0, 501, 0, 416, 441, 453, 470, 473,
	502, 587, 588, 589, 286, 472, 591, 592, 593, 594,
	595, 596, 597, 590, 444, 534, 511, 537, 452, 514,
	513, 0, 0, 548, 468, 549, 550, 374, 375, 376,
	377, 337, 575, 304, 471, 399, 0, 535, 0, 0,
	0, 0, 0, 0, 0, 0, 540, 541, 538, 635,
	0, 598, 599, 0, 0, 465, 466, 332, 339, 484,
	341, 303, 389, 334, 450, 348, 0, 477, 542, 478,
	601, 604, 602, 603, 381, 344, 345, 413, 349, 359,
	402, 449, 387, 407, 301, 440, 414, 363, 528, 555,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 270, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 583, 582, 581, 580,
	579, 578, 577, 576, 0, 0, 525, 427, 313, 275,
	309, 310, 317, 624, 621, 431, 625, 0, 283, 505,
	357, 0, 398, 331, 570, 571, 0, 0, 231, 232,
	233, 234, 235, 236, 237, 238, 276, 239, 240, 241,
	242, 243, 244, 245, 248, 249, 250, 251, 252, 253,
	254, 255, 573, 246, 247, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 0,
	0, 0, 277, 278, 279, 280, 0, 0, 271, 272,
	273, 274, 0, 0, 0, 456, 457, 458, 480, 0,
	442, 504, 622, 0, 0, 0, 0, 0, 0, 0,
	554, 566, 600, 0, 610, 611, 613, 615, 614, 617,
	419, 0, 0, 628, 495, 496, 629, 606, 386, 0,
	510, 543, 532, 616, 498, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 326, 0, 0, 356, 547,
	529, 539, 530, 515, 516, 517, 524, 336, 518, 519,
	520, 490, 521, 491, 522, 523, 0, 546, 497, 415,
	370, 564, 563, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 822, 0, 0, 0, 0, 0, 299, 219,
	492, 612, 494, 493, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 302, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 289, 421, 438, 300, 411,
	451, 305, 418, 295, 385, 408, 0, 0, 291, 436,
	417, 367, 346, 347, 290, 0, 403, 324, 338, 321,
	383, 0, 435, 463, 320, 454, 0, 446, 293, 0,
	445, 382, 432, 437, 368, 362, 0, 292, 434, 366,
	361, 350, 328, 479, 351, 352, 342, 394, 360, 395,
	343, 372, 371, 373, 0, 0, 0, 0, 0, 474,
	475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 605, 0, 0, 609, 0, 448, 0,
	0, 0, 0, 0, 0, 420, 0, 0, 353, 0,
	0, 0, 464, 0, 406, 388, 631, 0, 0, 404,
	358, 433, 396, 439, 422, 447, 400, 397, 284, 423,
	323, 369, 296, 298, 318, 325, 327, 329, 330, 378,
	379, 391, 410, 424, 425, 426, 322, 306, 405, 307,
	340, 308, 285, 314, 312, 315, 412, 316, 287, 392,
	430, 0, 335, 401, 365, 288, 364, 393, 429, 428,
	297, 455, 461, 462, 551, 0, 467, 632, 633, 634,
	476, 0, 0, 481, 482, 483, 485, 486, 487, 488,
	552, 569, 536, 506, 469, 560, 503, 507, 508, 572,
	0, 0, 0, 460, 354, 355, 0, 333, 281, 282,
	627, 319, 384, 574, 607, 608, 499, 0, 561, 500,
	509, 311, 533, 545, 544, 380, 459, 0, 556, 559,
	489, 626, 0, 553, 568, 630, 567, 623, 390, 0,
	409, 565, 512, 0, 557, 531, 0, 558, 527, 562,
	0, 501, 0, 416, 441, 453, 470, 473, 502, 587,
	588, 589, 286, 472, 591, 592, 593, 594, 595, 596,
	597, 590, 444, 534, 511, 537, 452, 514, 513, 0,
	0, 548, 468, 549, 550, 374, 375, 376, 377, 337,
	575, 304, 471, 399, 0, 535, 0, 0, 0, 0,
	0, 0, 0, 0, 540, 541, 538, 635, 0, 598,
	599, 0, 0, 465, 466, 332, 339, 484, 341, 303,
	389, 334, 450, 348, 0, 477, 542, 478, 601, 604,
	602, 603, 381, 344, 345, 413, 349, 359, 402, 449,
	387, 407, 301, 440, 414, 363, 528, 555, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 583, 582, 581, 580, 579, 578,
	577, 576, 0, 0, 525, 427, 313, 275, 309, 310,
	317, 624, 621, 431, 625, 0, 283, 505, 357, 0,
	398, 331, 570, 571, 0, 0, 231, 232, 233, 234,
	235, 236, 237, 238, 276, 239, 240, 241, 242, 243,
	244, 245, 248, 249, 250, 251, 252, 253, 254, 255,
	573, 246, 247, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 0, 0, 0,
	277, 278, 279, 280, 0, 0, 271, 272, 273, 274,
	0, 0, 0, 456, 457, 458, 480, 0, 442, 504,
	622, 0, 0, 0, 0, 0, 0, 0, 554, 566,
	600, 0, 610, 611, 613, 615, 614, 617, 419, 0,
	0, 628, 495, 496, 629, 606, 386, 0, 510, 543,
	532, 616, 498, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 547, 529, 539,
	530, 515, 516, 517, 524, 336, 518, 519, 520, 490,
	521, 491, 522, 523, 0, 546, 497, 415, 370, 564,
	563, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3887, 0, 0, 218,
	0, 0, 0, 0, 0, 0, 299, 219, 492, 612,
	494, 493, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 421, 438, 300, 411, 451, 305,
	418, 295, 385, 408, 0, 0, 291, 436, 417, 367,
	346, 347, 290, 0, 403, 324, 338, 321, 383, 0,
	435, 463, 320, 454, 0, 446, 293, 0, 445, 382,
	432, 437, 368, 362, 0, 292, 434, 366, 361, 350,
	328, 479, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 474, 475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 605, 0, 0, 609, 0, 448, 0, 0, 0,
	0, 0, 0, 420, 0, 0, 353, 0, 0, 0,
	464, 0, 406, 388, 631, 0, 0, 404, 358, 433,
	396, 439, 422, 447, 400, 397, 284, 423, 323, 369,
	296, 298, 318, 325, 327, 329, 330, 378, 379, 391,
	410, 424, 425, 426, 322, 306, 405, 307, 340, 308,
	285, 314, 312, 315, 412, 316, 287, 392, 430, 0,
	335, 401, 365, 288, 364, 393, 429, 428, 297, 455,
	461, 462, 551, 0, 467, 632, 633, 634, 476, 0,
	0, 481, 482, 483, 485, 486, 487, 488, 552, 569,
	536, 506, 469, 560, 503, 507, 508, 572, 0, 0,
	0, 460, 354, 355, 0, 333, 281, 282, 627, 319,
	384, 574, 607, 608, 499, 0, 561, 500, 509, 311,
	533, 545, 544, 380, 459, 0, 556, 559, 489, 626,
	0, 553, 568, 630, 567, 623, 390, 0, 409, 565,
	512, 0, 557, 531, 0, 558, 527, 562, 0, 501,
	0, 416, 441, 453, 470, 473, 502, 587, 588, 589,
	286, 472, 591, 592, 593, 594, 595, 596, 597, 590,
	444, 534, 511, 537, 452, 514, 513, 0, 0, 548,
	468, 549, 550, 374, 375, 376, 377, 337, 575, 304,
	471, 399, 0, 535, 0, 0, 0, 0, 0, 0,
	0, 0, 540, 541, 538, 635, 0, 598, 599, 0,
	0, 465, 466, 332, 339, 484, 341, 303, 389, 334,
	450, 348, 0, 477, 542, 478, 601, 604, 602, 603,
	381, 344, 345, 413, 349, 359, 402, 449, 387, 407,
	301, 440, 414, 363, 528, 555, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 583, 582, 581, 580, 579, 578, 577, 576,
	0, 0, 525, 427, 313, 275, 309, 310, 317, 624,
	621, 431, 625, 0, 283, 505, 357, 0, 398, 331,
	570, 571, 0, 0, 231, 232, 233, 234, 235, 236,
	237, 238, 276, 239, 240, 241, 242, 243, 244, 245,
	248, 249, 250, 251, 252, 253, 254, 255, 573, 246,
	247, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 0, 0, 0, 277, 278,
	279, 280, 0, 0, 271, 272, 273, 274, 0, 0,
	0, 456, 457, 458, 480, 0, 442, 504, 622, 0,
	0, 0, 0, 0, 0, 0, 554, 566, 600, 0,
	610, 611, 613, 615, 614, 617, 419, 0, 0, 628,
	495, 496, 629, 606, 386, 0, 510, 543, 532, 616,
	498, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 326, 0, 0, 356, 547, 529, 539, 530, 515,
	516, 517, 524, 336, 518, 519, 520, 490, 521, 491,
	522, 523, 0, 546, 497, 415, 370, 564, 563, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 0, 0,
	3667, 0, 0, 0, 299, 219, 492, 612, 494, 493,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 302,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 289, 421, 438, 300, 411, 451, 305, 418, 295,
	385, 408, 0, 0, 291, 436, 417, 367, 346, 347,
	290, 0, 403, 324, 338, 321, 383, 0, 435, 463,
	320, 454, 0, 446, 293, 0, 445, 382, 432, 437,
	368, 362, 0, 292, 434, 366, 361, 350, 328, 479,
	351, 352, 342, 394, 360, 395, 343, 372, 371, 373,
	0, 0, 0, 0, 0, 474, 475, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 605,
	0, 0, 609, 0, 448, 0, 0, 0, 0, 0,
	0, 420, 0, 0, 353, 0, 0, 0, 464, 0,
	406, 388, 631, 0, 0, 404, 358, 433, 396, 439,
	422, 447, 400, 397, 284, 423, 323, 369, 296, 298,
	318, 325, 327, 329, 330, 378, 379, 391, 410, 424,
	425, 426, 322, 306, 405, 307, 340, 308, 285, 314,
	312, 315, 412, 316, 287, 392, 430, 0, 335, 401,
	365, 288, 364, 393, 429, 428, 297, 455, 461, 462,
	551, 0, 467, 632, 633, 634, 476, 0, 0, 481,
	482, 483, 485, 486, 487, 488, 552, 569, 536, 506,
	469, 560, 503, 507, 508, 572, 0, 0, 0, 460,
	354, 355, 0, 333, 281, 282, 627, 319, 384, 574,
	607, 608, 499, 0, 561, 500, 509, 311, 533, 545,
	544, 380, 459, 0, 556, 559, 489, 626, 0, 553,
	568, 630, 567, 623, 390, 0, 409, 565, 512, 0,
	557, 531, 0, 558, 527, 562, 0, 501, 0, 416,
	441, 453, 470, 473, 502, 587, 588, 589, 286, 472,
	591, 592, 593, 594, 595, 596, 597, 590, 444, 534,
	511, 537, 452, 514, 513, 0, 0, 548, 468, 549,
	550, 374, 375, 376, 377, 337, 575, 304, 471, 399,
	0, 535, 0, 0, 0, 0, 0, 0, 0, 0,
	540, 541, 538, 635, 0, 598, 599, 0, 0, 465,
	466, 332, 339, 484, 341, 303, 389, 334, 450, 348,
	0, 477, 542, 478, 601, 604, 602, 603, 381, 344,
	345, 413, 349, 359, 402, 449, 387, 407, 301, 440,
	414, 363, 528, 555, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 270, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	583, 582, 581, 580, 579, 578, 577, 576, 0, 0,
	525, 427, 313, 275, 309, 310, 317, 624, 621, 431,
	625, 0, 283, 505, 357, 0, 398, 331, 570, 571,
	0, 0, 231, 232, 233, 234, 235, 236, 237, 238,
	276, 239, 240, 241, 242, 243, 244, 245, 248, 249,
	250, 251, 252, 253, 254, 255, 573, 246, 247, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 0, 0, 0, 277, 278, 279, 280,
	0, 0, 271, 272, 273, 274, 0, 0, 0, 456,
	457, 458, 480, 0, 442, 504, 622, 0, 0, 0,
	0, 0, 0, 0, 554, 566, 600, 0, 610, 611,
	613, 615, 614, 617, 419, 0, 0, 628, 495, 496,
	629, 606, 386, 0, 510, 543, 532, 616, 498, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 0, 356, 547, 529, 539, 530, 515, 516, 517,
	524, 336, 518, 519, 520, 490, 521, 491, 522, 523,
	0, 546, 497, 415, 370, 564, 563, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 0, 0, 0, 0,
	0, 0, 299, 219, 492, 612, 494, 493, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 302, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 289,
	421, 438, 300, 411, 451, 305, 418, 295, 385, 408,
	0, 0, 291, 436, 417, 367, 346, 347, 290, 0,
	403, 324, 338, 321, 383, 0, 435, 463, 320, 454,
	0, 446, 293, 0, 445, 382, 432, 437, 368, 362,
	0, 292, 434, 366, 361, 350, 328, 479, 351, 352,
	342, 394, 360, 395, 343, 372, 371, 373, 0, 0,
	0, 0, 0, 474, 475, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 605, 0, 0,
	609, 0, 448, 0, 0, 0, 3796, 0, 0, 420,
	0, 0, 353, 0, 0, 0, 464, 0, 406, 388,
	631, 0, 0, 404, 358, 433, 396, 439, 422, 447,
	400, 397, 284, 423, 323, 369, 296, 298, 318, 325,
	327, 329, 330, 378, 379, 391, 410, 424, 425, 426,
	322, 306, 405, 307, 340, 308, 285, 314, 312, 315,
	412, 316, 287, 392, 430, 0, 335, 401, 365, 288,
	364, 393, 429, 428, 297, 455, 461, 462, 551, 0,
	467, 632, 633, 634, 476, 0, 0, 481, 482, 483,
	485, 486, 487, 488, 552, 569, 536, 506, 469, 560,
	503, 507, 508, 572, 0, 0, 0, 460, 354, 355,
	0, 333, 281, 282, 627, 319, 384, 574, 607, 608,
	499, 0, 561, 500, 509, 311, 533, 545, 544, 380,
	459, 0, 556, 559, 489, 626, 0, 553, 568, 630,
	567, 623, 390, 0, 409, 565, 512, 0, 557, 531,
	0, 558, 527, 562, 0, 501, 0, 416, 441, 453,
	470, 473, 502, 587, 588, 589, 286, 472, 591, 592,
	593, 594, 595, 596, 597, 590, 444, 534, 511, 537,
	452, 514, 513, 0, 0, 548, 468, 549, 550, 374,
	375, 376, 377, 337, 575, 304, 471, 399, 0, 535,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 541,
	538, 635, 0, 598, 599, 0, 0, 465, 466, 332,
	339, 484, 341, 303, 389, 334, 450, 348, 0, 477,
	542, 478, 601, 604, 602, 603, 381, 344, 345, 413,
	349, 359, 402, 449, 387, 407, 301, 440, 414, 363,
	528, 555, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 270, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 583, 582,
	581, 580, 579, 578, 577, 576, 0, 0, 525, 427,
	313, 275, 309, 310, 317, 624, 621, 431, 625, 0,
	283, 505, 357, 0, 398, 331, 570, 571, 0, 0,
	231, 232, 233, 234, 235, 236, 237, 238, 276, 239,
	240, 241, 242, 243, 244, 245, 248, 249, 250, 251,
	252, 253, 254, 255, 573, 246, 247, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 0, 0, 0, 277, 278, 279, 280, 0, 0,
	271, 272, 273, 274, 0, 0, 0, 456, 457, 458,
	480, 0, 442, 504, 622, 0, 0, 0, 0, 0,
	0, 0, 554, 566, 600, 0, 610, 611, 613, 615,
	614, 617, 419, 0, 0, 628, 495, 496, 629, 606,
	386, 0, 510, 543, 532, 616, 498, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 547, 529, 539, 530, 515, 516, 517, 524, 336,
	518, 519, 520, 490, 521, 491, 522, 523, 0, 546,
	497, 415, 370, 564, 563, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3511, 0, 0, 218, 0, 0, 0, 0, 0, 0,
	299, 219, 492, 612, 494, 493, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 302, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 289, 421, 438,
	300, 411, 451, 305, 418, 295, 385, 408, 0, 0,
	291, 436, 417, 367, 346, 347, 290, 0, 403, 324,
	338, 321, 383, 0, 435, 463, 320, 454, 0, 446,
	293, 0, 445, 382, 432, 437, 368, 362, 0, 292,
	434, 366, 361, 350, 328, 479, 351, 352, 342, 394,
	360, 395, 343, 372, 371, 373, 0, 0, 0, 0,
	0, 474, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 0, 0, 609, 0,
	448, 0, 0, 0, 0, 0, 0, 420, 0, 0,
	353, 0, 0, 0, 464, 0, 406, 388, 631, 0,
	0, 404, 358, 433, 396, 439, 422, 447, 400, 397,
	284, 423, 323, 369, 296, 298, 318, 325, 327, 329,
	330, 378, 379, 391, 410, 424, 425, 426, 322, 306,
	405, 307, 340, 308, 285, 314, 312, 315, 412, 316,
	287, 392, 430, 0, 335, 401, 365, 288, 364, 393,
	429, 428, 297, 455, 461, 462, 551, 0, 467, 632,
	633, 634, 476, 0, 0, 481, 482, 483, 485, 486,
	487, 488, 552, 569, 536, 506, 469, 560, 503, 507,
	508, 572, 0, 0, 0, 460, 354, 355, 0, 333,
	281, 282, 627, 319, 384, 574, 607, 608, 499, 0,
	561, 500, 509, 311, 533, 545, 544, 380, 459, 0,
	556, 559, 489, 626, 0, 553, 568, 630, 567, 623,
	390, 0, 409, 565, 512, 0, 557, 531, 0, 558,
	527, 562, 0, 501, 0, 416, 441, 453, 470, 473,
	502, 587, 588, 589, 286, 472, 591, 592, 593, 594,
	595, 596, 597, 590, 444, 534, 511, 537, 452, 514,
	513, 0, 0, 548, 468, 549, 550, 374, 375, 376,
	377, 337, 575, 304, 471, 399, 0, 535, 0, 0,
	0, 0, 0, 0, 0, 0, 540, 541, 538, 635,
	0, 598, 599, 0, 0, 465, 466, 332, 339, 484,
	341, 303, 389, 334, 450, 348, 0, 477, 542, 478,
	601, 604, 602, 603, 381, 344, 345, 413, 349, 359,
	402, 449, 387, 407, 301, 440, 414, 363, 528, 555,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 270, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 583, 582, 581, 580,
	579, 578, 577, 576, 0, 0, 525, 427, 313, 275,
	309, 310, 317, 624, 621, 431, 625, 0, 283, 505,
	357, 0, 398, 331, 570, 571, 0, 0, 231, 232,
	233, 234, 235, 236, 237, 238, 276, 239, 240, 241,
	242, 243, 244, 245, 248, 249, 250, 251, 252, 253,
	254, 255, 573, 246, 247, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 0,
	0, 0, 277, 278, 279, 280, 0, 0, 271, 272,
	273, 274, 0, 0, 0, 456, 457, 458, 480, 0,
	442, 504, 622, 0, 0, 0, 0, 0, 0, 0,
	554, 566, 600, 0, 610, 611, 613, 615, 614, 617,
	419, 0, 0, 628, 495, 496, 629, 606, 386, 0,
	510, 543, 532, 616, 498, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 326, 0, 0, 356, 547,
	529, 539, 530, 515, 516, 517, 524, 336, 518, 519,
	520, 490, 521, 491, 522, 523, 0, 546, 497, 415,
	370, 564, 563, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3682,
	0, 218, 0, 0, 0, 0, 0, 0, 299, 219,
	492, 612, 494, 493, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 302, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 289, 421, 438, 300, 411,
	451, 305, 418, 295, 385, 408, 0, 0, 291, 436,
	417, 367, 346, 347, 290, 0, 403, 324, 338, 321,
	383, 0, 435, 463, 320, 454, 0, 446, 293, 0,
	445, 382, 432, 437, 368, 362, 0, 292, 434, 366,
	361, 350, 328, 479, 351, 352, 342, 394, 360, 395,
	343, 372, 371, 373, 0, 0, 0, 0, 0, 474,
	475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 605, 0, 0, 609, 0, 448, 0,
	0, 0, 0, 0, 0, 420, 0, 0, 353, 0,
	0, 0, 464, 0, 406, 388, 631, 0, 0, 404,
	358, 433, 396, 439, 422, 447, 400, 397, 284, 423,
	323, 369, 296, 298, 318, 325, 327, 329, 330, 378,
	379, 391, 410, 424, 425, 426, 322, 306, 405, 307,
	340, 308, 285, 314, 312, 315, 412, 316, 287, 392,
	430, 0, 335, 401, 365, 288, 364, 393, 429, 428,
	297, 455, 461, 462, 551, 0, 467, 632, 633, 634,
	476, 0, 0, 481, 482, 483, 485, 486, 487, 488,
	552, 569, 536, 506, 469, 560, 503, 507, 508, 572,
	0, 0, 0, 460, 354, 355, 0, 333, 281, 282,
	627, 319, 384, 574, 607, 608, 499, 0, 561, 500,
	509, 311, 533, 545, 544, 380, 459, 0, 556, 559,
	489, 626, 0, 553, 568, 630, 567, 623, 390, 0,
	409, 565, 512, 0, 557, 531, 0, 558, 527, 562,
	0, 501, 0, 416, 441, 453, 470, 473, 502, 587,
	588, 589, 286, 472, 591, 592, 593, 594, 595, 596,
	597, 590, 444, 534, 511, 537, 452, 514, 513, 0,
	0, 548, 468, 549, 550, 374, 375, 376, 377, 337,
	575, 304, 471, 399, 0, 535, 0, 0, 0, 0,
	0, 0, 0, 0, 540, 541, 538, 635, 0, 598,
	599, 0, 0, 465, 466, 332, 339, 484, 341, 303,
	389, 334, 450, 348, 0, 477, 542, 478, 601, 604,
	602, 603, 381, 344, 345, 413, 349, 359, 402, 449,
	387, 407, 301, 440, 414, 363, 528, 555, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 583, 582, 581, 580, 579, 578,
	577, 576, 0, 0, 525, 427, 313, 275, 309, 310,
	317, 624, 621, 431, 625, 0, 283, 505, 357, 0,
	398, 331, 570, 571, 0, 0, 231, 232, 233, 234,
	235, 236, 237, 238, 276, 239, 240, 241, 242, 243,
	244, 245, 248, 249, 250, 251, 252, 253, 254, 255,
	573, 246, 247, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 0, 0, 0,
	277, 278, 279, 280, 0, 0, 271, 272, 273, 274,
	0, 0, 0, 456, 457, 458, 480, 0, 442, 504,
	622, 0, 0, 0, 0, 0, 0, 0, 554, 566,
	600, 0, 610, 611, 613, 615, 614, 617, 419, 0,
	0, 628, 495, 496, 629, 606, 386, 0, 510, 543,
	532, 616, 498, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 547, 529, 539,
	530, 515, 516, 517, 524, 336, 518, 519, 520, 490,
	521, 491, 522, 523, 0, 546, 497, 415, 370, 564,
	563, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	0, 0, 0, 0, 0, 0, 299, 219, 492, 612,
	494, 493, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 421, 438, 300, 411, 451, 305,
	418, 295, 385, 408, 0, 0, 291, 436, 417, 367,
	346, 347, 290, 0, 403, 324, 338, 321, 383, 0,
	435, 463, 320, 454, 0, 446, 293, 0, 445, 382,
	432, 437, 368, 362, 0, 292, 434, 366, 361, 350,
	328, 479, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 474, 475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 605, 0, 0, 609, 0, 448, 0, 0, 0,
	3600, 0, 0, 420, 0, 0, 353, 0, 0, 0,
	464, 0, 406, 388, 631, 0, 0, 404, 358, 433,
	396, 439, 422, 447, 400, 397, 284, 423, 323, 369,
	296, 298, 318, 325, 327, 329, 330, 378, 379, 391,
	410, 424, 425, 426, 322, 306, 405, 307, 340, 308,
	285, 314, 312, 315, 412, 316, 287, 392, 430, 0,
	335, 401, 365, 288, 364, 393, 429, 428, 297, 455,
	461, 462, 551, 0, 467, 632, 633, 634, 476, 0,
	0, 481, 482, 483, 485, 486, 487, 488, 552, 569,
	536, 506, 469, 560, 503, 507, 508, 572, 0, 0,
	0, 460, 354, 355, 0, 333, 281, 282, 627, 319,
	384, 574, 607, 608, 499, 0, 561, 500, 509, 311,
	533, 545, 544, 380, 459, 0, 556, 559, 489, 626,
	0, 553, 568, 630, 567, 623, 390, 0, 409, 565,
	512, 0, 557, 531, 0, 558, 527, 562, 0, 501,
	0, 416, 441, 453, 470, 473, 502, 587, 588, 589,
	286, 472, 591, 592, 593, 594, 595, 596, 597, 590,
	444, 534, 511, 537, 452, 514, 513, 0, 0, 548,
	468, 549, 550, 374, 375, 376, 377, 337, 575, 304,
	471, 399, 0, 535, 0, 0, 0, 0, 0, 0,
	0, 0, 540, 541, 538, 635, 0, 598, 599, 0,
	0, 465, 466, 332, 339, 484, 341, 303, 389, 334,
	450, 348, 0, 477, 542, 478, 601, 604, 602, 603,
	381, 344, 345, 413, 349, 359, 402, 449, 387, 407,
	301, 440, 414, 363, 528, 555, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 583, 582, 581, 580, 579, 578, 577, 576,
	0, 0, 525, 427, 313, 275, 309, 310, 317, 624,
	621, 431, 625, 0, 283, 505, 357, 0, 398, 331,
	570, 571, 0, 0, 231, 232, 233, 234, 235, 236,
	237, 238, 276, 239, 240, 241, 242, 243, 244, 245,
	248, 249, 250, 251, 252, 253, 254, 255, 573, 246,
	247, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 0, 0, 0, 277, 278,
	279, 280, 0, 0, 271, 272, 273, 274, 0, 0,
	0, 456, 457, 458, 480, 0, 442, 504, 622, 0,
	0, 0, 0, 0, 0, 0, 554, 566, 600, 0,
	610, 611, 613, 615, 614, 617, 419, 0, 0, 628,
	495, 496, 629, 606, 386, 0, 510, 543, 532, 616,
	498, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 326, 0, 0, 356, 547, 529, 539, 530, 515,
	516, 517, 524, 336, 518, 519, 520, 490, 521, 491,
	522, 523, 0, 546, 497, 415, 370, 564, 563, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 0, 0,
	3117, 0, 0, 0, 299, 219, 492, 612, 494, 493,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 302,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 289, 421, 438, 300, 411, 451, 305, 418, 295,
	385, 408, 0, 0, 291, 436, 417, 367, 346, 347,
	290, 0, 403, 324, 338, 321, 383, 0, 435, 463,
	320, 454, 0, 446, 293, 0, 445, 382, 432, 437,
	368, 362, 0, 292, 434, 366, 361, 350, 328, 479,
	351, 352, 342, 394, 360, 395, 343, 372, 371, 373,
	0, 0, 0, 0, 0, 474, 475, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 605,
	0, 0, 609, 0, 448, 0, 0, 0, 0, 0,
	0, 420, 0, 0, 353, 0, 0, 0, 464, 0,
	406, 388, 631, 0, 0, 404, 358, 433, 396, 439,
	422, 447, 400, 397, 284, 423, 323, 369, 296, 298,
	318, 325, 327, 329, 330, 378, 379, 391, 410, 424,
	425, 426, 322, 306, 405, 307, 340, 308, 285, 314,
	312, 315, 412, 316, 287, 392, 430, 0, 335, 401,
	365, 288, 364, 393, 429, 428, 297, 455, 461, 462,
	551, 0, 467, 632, 633, 634, 476, 0, 0, 481,
	482, 483, 485, 486, 487, 488, 552, 569, 536, 506,
	469, 560, 503, 507, 508, 572, 0, 0, 0, 460,
	354, 355, 0, 333, 281, 282, 627, 319, 384, 574,
	607, 608, 499, 0, 561, 500, 509, 311, 533, 545,
	544, 380, 459, 0, 556, 559, 489, 626, 0, 553,
	568, 630, 567, 623, 390, 0, 409, 565, 512, 0,
	557, 531, 0, 558, 527, 562, 0, 501, 0, 416,
	441, 453, 470, 473, 502, 587, 588, 589, 286, 472,
	591, 592, 593, 594, 595, 596, 597, 590, 444, 534,
	511, 537, 452, 514, 513, 0, 0, 548, 468, 549,
	550, 374, 375, 376, 377, 337, 575, 304, 471, 399,
	0, 535, 0, 0, 0, 0, 0, 0, 0, 0,
	540, 541, 538, 635, 0, 598, 599, 0, 0, 465,
	466, 332, 339, 484, 341, 303, 389, 334, 450, 348,
	0, 477, 542, 478, 601, 604, 602, 603, 381, 344,
	345, 413, 349, 359, 402, 449, 387, 407, 301, 440,
	414, 363, 528, 555, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 270, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	583, 582, 581, 580, 579, 578, 577, 576, 0, 0,
	525, 427, 313, 275, 309, 310, 317, 624, 621, 431,
	625, 0, 283, 505, 357, 0, 398, 331, 570, 571,
	0, 0, 231, 232, 233, 234, 235, 236, 237, 238,
	276, 239, 240, 241, 242, 243, 244, 245, 248, 249,
	250, 251, 252, 253, 254, 255, 573, 246, 247, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 0, 0, 0, 277, 278, 279, 280,
	0, 0, 271, 272, 273, 274, 0, 0, 0, 456,
	457, 458, 480, 0, 442, 504, 622, 0, 0, 0,
	0, 0, 0, 0, 554, 566, 600, 0, 610, 611,
	613, 615, 614, 617, 419, 0, 0, 628, 495, 496,
	629, 606, 386, 0, 510, 543, 532, 616, 498, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 0, 356, 547, 529, 539, 530, 515, 516, 517,
	524, 336, 518, 519, 520, 490, 521, 491, 522, 523,
	0, 546, 497, 415, 370, 564, 563, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 0, 0, 0, 0,
	0, 0, 299, 219, 492, 612, 494, 493, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 302, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3135, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 289,
	421, 438, 300, 411, 451, 305, 418, 295, 385, 408,
	0, 0, 291, 436, 417, 367, 346, 347, 290, 0,
	403, 324, 338, 321, 383, 0, 435, 463, 320, 454,
	0, 446, 293, 0, 445, 382, 432, 437, 368, 362,
	0, 292, 434, 366, 361, 350, 328, 479, 351, 352,
	342, 394, 360, 395, 343, 372, 371, 373, 0, 0,
	0, 0, 0, 474, 475, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 605, 0, 0,
	609, 0, 448, 0, 0, 0, 0, 0, 0, 420,
	0, 0, 353, 0, 0, 0, 464, 0, 406, 388,
	631, 0, 0, 404, 358, 433, 396, 439, 422, 447,
	400, 397, 284, 423, 323, 369, 296, 298, 318, 325,
	327, 329, 330, 378, 379, 391, 410, 424, 425, 426,
	322, 306, 405, 307, 340, 308, 285, 314, 312, 315,
	412, 316, 287, 392, 430, 0, 335, 401, 365, 288,
	364, 393, 429, 428, 297, 455, 461, 462, 551, 0,
	467, 632, 633, 634, 476, 0, 0, 481, 482, 483,
	485, 486, 487, 488, 552, 569, 536, 506, 469, 560,
	503, 507, 508, 572, 0, 0, 0, 460, 354, 355,
	0, 333, 281, 282, 627, 319, 384, 574, 607, 608,
	499, 0, 561, 500, 509, 311, 533, 545, 544, 380,
	459, 0, 556, 559, 489, 626, 0, 553, 568, 630,
	567, 623, 390, 0, 409, 565, 512, 0, 557, 531,
	0, 558, 527, 562, 0, 501, 0, 416, 441, 453,
	470, 473, 502, 587, 588, 589, 286, 472, 591, 592,
	593, 594, 595, 596, 597, 590, 444, 534, 511, 537,
	452, 514, 513, 0, 0, 548, 468, 549, 550, 374,
	375, 376, 377, 337, 575, 304, 471, 399, 0, 535,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 541,
	538, 635, 0, 598, 599, 0, 0, 465, 466, 332,
	339, 484, 341, 303, 389, 334, 450, 348, 0, 477,
	542, 478, 601, 604, 602, 603, 381, 344, 345, 413,
	349, 359, 402, 449, 387, 407, 301, 440, 414, 363,
	528, 555, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 270, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 583, 582,
	581, 580, 579, 578, 577, 576, 0, 0, 525, 427,
	313, 275, 309, 310, 317, 624, 621, 431, 625, 0,
	283, 505, 357, 0, 398, 331, 570, 571, 0, 0,
	231, 232, 233, 234, 235, 236, 237, 238, 276, 239,
	240, 241, 242, 243, 244, 245, 248, 249, 250, 251,
	252, 253, 254, 255, 573, 246, 247, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 0, 0, 0, 277, 278, 279, 280, 0, 0,
	271, 272, 273, 274, 0, 0, 0, 456, 457, 458,
	480, 0, 442, 504, 622, 0, 0, 0, 0, 0,
	0, 0, 554, 566, 600, 0, 610, 611, 613, 615,
	614, 617, 419, 0, 0, 628, 495, 496, 629, 606,
	386, 0, 510, 543, 532, 616, 498, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 547, 529, 539, 530, 515, 516, 517, 524, 336,
	518, 519, 520, 490, 521, 491, 522, 523, 0, 546,
	497, 415, 370, 564, 563, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1995, 0, 0, 218, 0, 0, 0, 0, 0, 0,
	299, 219, 492, 612, 494, 493, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 302, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 289, 421, 438,
	300, 411, 451, 305, 418, 295, 385, 408, 0, 0,
	291, 436, 417, 367, 346, 347, 290, 0, 403, 324,
	338, 321, 383, 0, 435, 463, 320, 454, 0, 446,
	293, 0, 445, 382, 432, 437, 368, 362, 0, 292,
	434, 366, 361, 350, 328, 479, 351, 352, 342, 394,
	360, 395, 343, 372, 371, 373, 0, 0, 0, 0,
	0, 474, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 0, 0, 609, 0,
	448, 0, 0, 0, 0, 0, 0, 420, 0, 0,
	353, 0, 0, 0, 464, 0, 406, 388, 631, 0,
	0, 404, 358, 433, 396, 439, 422, 447, 400, 397,
	284, 423, 323, 369, 296, 298, 318, 325, 327, 329,
	330, 378, 379, 391, 410, 424, 425, 426, 322, 306,
	405, 307, 340, 308, 285, 314, 312, 315, 412, 316,
	287, 392, 430, 0, 335, 401, 365, 288, 364, 393,
	429, 428, 297, 455, 461, 462, 551, 0, 467, 632,
	633, 634, 476, 0, 0, 481, 482, 483, 485, 486,
	487, 488, 552, 569, 536, 506, 469, 560, 503, 507,
	508, 572, 0, 0, 0, 460, 354, 355, 0, 333,
	281, 282, 627, 319, 384, 574, 607, 608, 499, 0,
	561, 500, 509, 311, 533, 545, 544, 380, 459, 0,
	556, 559, 489, 626, 0, 553, 568, 630, 567, 623,
	390, 0, 409, 565, 512, 0, 557, 531, 0, 558,
	527, 562, 0, 501, 0, 416, 441, 453, 470, 473,
	502, 587, 588, 589, 286, 472, 591, 592, 593, 594,
	595, 596, 597, 590, 444, 534, 511, 537, 452, 514,
	513, 0, 0, 548, 468, 549, 550, 374, 375, 376,
	377, 337, 575, 304, 471, 399, 0, 535, 0, 0,
	0, 0, 0, 0, 0, 0, 540, 541, 538, 635,
	0, 598, 599, 0, 0, 465, 466, 332, 339, 484,
	341, 303, 389, 334, 450, 348, 0, 477, 542, 478,
	601, 604, 602, 603, 381, 344, 345, 413, 349, 359,
	402, 449, 387, 407, 301, 440, 414, 363, 528, 555,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 270, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 583, 582, 581, 580,
	579, 578, 577, 576, 0, 0, 525, 427, 313, 275,
	309, 310, 317, 624, 621, 431, 625, 0, 283, 505,
	357, 0, 398, 331, 570, 571, 0, 0, 231, 232,
	233, 234, 235, 236, 237, 238, 276, 239, 240, 241,
	242, 243, 244, 245, 248, 249, 250, 251, 252, 253,
	254, 255, 573, 246, 247, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 0,
	0, 0, 277, 278, 279, 280, 0, 0, 271, 272,
	273, 274, 0, 0, 0, 456, 457, 458, 480, 0,
	442, 504, 622, 0, 0, 0, 0, 0, 0, 0,
	554, 566, 600, 0, 610, 611, 613, 615, 614, 617,
	419, 0, 0, 628, 495, 496, 629, 606, 386, 0,
	510, 543, 532, 616, 498, 0, 0, 3322, 0, 0,
	0, 0, 0, 0, 0, 326, 0, 0, 356, 547,
	529, 539, 530, 515, 516, 517, 524, 336, 518, 519,
	520, 490, 521, 491, 522, 523, 0, 546, 497, 415,
	370, 564, 563, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 0, 0, 0, 0, 0, 0, 299, 219,
	492, 612, 494, 493, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 302, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 289, 421, 438, 300, 411,
	451, 305, 418, 295, 385, 408, 0, 0, 291, 436,
	417, 367, 346, 347, 290, 0, 403, 324, 338, 321,
	383, 0, 435, 463, 320, 454, 0, 446, 293, 0,
	445, 382, 432, 437, 368, 362, 0, 292, 434, 366,
	361, 350, 328, 479, 351, 352, 342, 394, 360, 395,
	343, 372, 371, 373, 0, 0, 0, 0, 0, 474,
	475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 605, 0, 0, 609, 0, 448, 0,
	0, 0, 0, 0, 0, 420, 0, 0, 353, 0,
	0, 0, 464, 0, 406, 388, 631, 0, 0, 404,
	358, 433, 396, 439, 422, 447, 400, 397, 284, 423,
	323, 369, 296, 298, 318, 325, 327, 329, 330, 378,
	379, 391, 410, 424, 425, 426, 322, 306, 405, 307,
	340, 308, 285, 314, 312, 315, 412, 316, 287, 392,
	430, 0, 335, 401, 365, 288, 364, 393, 429, 428,
	297, 455, 461, 462, 551, 0, 467, 632, 633, 634,
	476, 0, 0, 481, 482, 483, 485, 486, 487, 488,
	552, 569, 536, 506, 469, 560, 503, 507, 508, 572,
	0, 0, 0, 460, 354, 355, 0, 333, 281, 282,
	627, 319, 384, 574, 607, 608, 499, 0, 561, 500,
	509, 311, 533, 545, 544, 380, 459, 0, 556, 559,
	489, 626, 0, 553, 568, 630, 567, 623, 390, 0,
	409, 565, 512, 0, 557, 531, 0, 558, 527, 562,
	0, 501, 0, 416, 441, 453, 470, 473, 502, 587,
	588, 589, 286, 472, 591, 592, 593, 594, 595, 596,
	597, 590, 444, 534, 511, 537, 452, 514, 513, 0,
	0, 548, 468, 549, 550, 374, 375, 376, 377, 337,
	575, 304, 471, 399, 0, 535, 0, 0, 0, 0,
	0, 0, 0, 0, 540, 541, 538, 635, 0, 598,
	599, 0, 0, 465, 466, 332, 339, 484, 341, 303,
	389, 334, 450, 348, 0, 477, 542, 478, 601, 604,
	602, 603, 381, 344, 345, 413, 349, 359, 402, 449,
	387, 407, 301, 440, 414, 363, 528, 555, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 583, 582, 581, 580, 579, 578,
	577, 576, 0, 0, 525, 427, 313, 275, 309, 310,
	317, 624, 621, 431, 625, 0, 283, 505, 357, 0,
	398, 331, 570, 571, 0, 0, 231, 232, 233, 234,
	235, 236, 237, 238, 276, 239, 240, 241, 242, 243,
	244, 245, 248, 249, 250, 251, 252, 253, 254, 255,
	573, 246, 247, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 0, 0, 0,
	277, 278, 279, 280, 0, 0, 271, 272, 273, 274,
	0, 0, 0, 456, 457, 458, 480, 0, 442, 504,
	622, 0, 0, 0, 0, 0, 0, 0, 554, 566,
	600, 0, 610, 611, 613, 615, 614, 617, 419, 0,
	0, 628, 495, 496, 629, 606, 386, 0, 510, 543,
	532, 616, 498, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 547, 529, 539,
	530, 515, 516, 517, 524, 336, 518, 519, 520, 490,
	521, 491, 522, 523, 0, 546, 497, 415, 370, 564,
	563, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	0, 0, 0, 0, 0, 0, 299, 219, 492, 612,
	494, 493, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3238, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 421, 438, 300, 411, 451, 305,
	418, 295, 385, 408, 0, 0, 291, 436, 417, 367,
	346, 347, 290, 0, 403, 324, 338, 321, 383, 0,
	435, 463, 320, 454, 0, 446, 293, 0, 445, 382,
	432, 437, 368, 362, 0, 292, 434, 366, 361, 350,
	328, 479, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 474, 475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 605, 0, 0, 609, 0, 448, 0, 0, 0,
	0, 0, 0, 420, 0, 0, 353, 0, 0, 0,
	464, 0, 406, 388, 631, 0, 0, 404, 358, 433,
	396, 439, 422, 447, 400, 397, 284, 423, 323, 369,
	296, 298, 318, 325, 327, 329, 330, 378, 379, 391,
	410, 424, 425, 426, 322, 306, 405, 307, 340, 308,
	285, 314, 312, 315, 412, 316, 287, 392, 430, 0,
	335, 401, 365, 288, 364, 393, 429, 428, 297, 455,
	461, 462, 551, 0, 467, 632, 633, 634, 476, 0,
	0, 481, 482, 483, 485, 486, 487, 488, 552, 569,
	536, 506, 469, 560, 503, 507, 508, 572, 0, 0,
	0, 460, 354, 355, 0, 333, 281, 282, 627, 319,
	384, 574, 607, 608, 499, 0, 561, 500, 509, 311,
	533, 545, 544, 380, 459, 0, 556, 559, 489, 626,
	0, 553, 568, 630, 567, 623, 390, 0, 409, 565,
	512, 0, 557, 531, 0, 558, 527, 562, 0, 501,
	0, 416, 441, 453, 470, 473, 502, 587, 588, 589,
	286, 472, 591, 592, 593, 594, 595, 596, 597, 590,
	444, 534, 511, 537, 452, 514, 513, 0, 0, 548,
	468, 549, 550, 374, 375, 376, 377, 337, 575, 304,
	471, 399, 0, 535, 0, 0, 0, 0, 0, 0,
	0, 0, 540, 541, 538, 635, 0, 598, 599, 0,
	0, 465, 466, 332, 339, 484, 341, 303, 389, 334,
	450, 348, 0, 477, 542, 478, 601, 604, 602, 603,
	381, 344, 345, 413, 349, 359, 402, 449, 387, 407,
	301, 440, 414, 363, 528, 555, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 583, 582, 581, 580, 579, 578, 577, 576,
	0, 0, 525, 427, 313, 275, 309, 310, 317, 624,
	621, 431, 625, 0, 283, 505, 357, 0, 398, 331,
	570, 571, 0, 0, 231, 232, 233, 234, 235, 236,
	237, 238, 276, 239, 240, 241, 242, 243, 244, 245,
	248, 249, 250, 251, 252, 253, 254, 255, 573, 246,
	247, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 0, 0, 0, 277, 278,
	279, 280, 0, 0, 271, 272, 273, 274, 0, 0,
	0, 456, 457, 458, 480, 0, 442, 504, 622, 0,
	0, 0, 0, 0, 0, 0, 554, 566, 600, 0,
	610, 611, 613, 615, 614, 617, 419, 0, 0, 628,
	495, 496, 629, 606, 386, 0, 510, 543, 532, 616,
	498, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 326, 0, 0, 356, 547, 529, 539, 530, 515,
	516, 517, 524, 336, 518, 519, 520, 490, 521, 491,
	522, 523, 0, 546, 497, 415, 370, 564, 563, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 0, 0,
	0, 0, 0, 0, 299, 219, 492, 612, 494, 493,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 302,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2979, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 289, 421, 438, 300, 411, 451, 305, 418, 295,
	385, 408, 0, 0, 291, 436, 417, 367, 346, 347,
	290, 0, 403, 324, 338, 321, 383, 0, 435, 463,
	320, 454, 0, 446, 293, 0, 445, 382, 432, 437,
	368, 362, 0, 292, 434, 366, 361, 350, 328, 479,
	351, 352, 342, 394, 360, 395, 343, 372, 371, 373,
	0, 0, 0, 0, 0, 474, 475, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 605,
	0, 0, 609, 0, 448, 0, 0, 0, 0, 0,
	0, 420, 0, 0, 353, 0, 0, 0, 464, 0,
	406, 388, 631, 0, 0, 404, 358, 433, 396, 439,
	422, 447, 400, 397, 284, 423, 323, 369, 296, 298,
	318, 325, 327, 329, 330, 378, 379, 391, 410, 424,
	425, 426, 322, 306, 405, 307, 340, 308, 285, 314,
	312, 315, 412, 316, 287, 392, 430, 0, 335, 401,
	365, 288, 364, 393, 429, 428, 297, 455, 461, 462,
	551, 0, 467, 632, 633, 634, 476, 0, 0, 481,
	482, 483, 485, 486, 487, 488, 552, 569, 536, 506,
	469, 560, 503, 507, 508, 572, 0, 0, 0, 460,
	354, 355, 0, 333, 281, 282, 627, 319, 384, 574,
	607, 608, 499, 0, 561, 500, 509, 311, 533, 545,
	544, 380, 459, 0, 556, 559, 489, 626, 0, 553,
	568, 630, 567, 623, 390, 0, 409, 565, 512, 0,
	557, 531, 0, 558, 527, 562, 0, 501, 0, 416,
	441, 453, 470, 473, 502, 587, 588, 589, 286, 472,
	591, 592, 593, 594, 595, 596, 597, 590, 444, 534,
	511, 537, 452, 514, 513, 0, 0, 548, 468, 549,
	550, 374, 375, 376, 377, 337, 575, 304, 471, 399,
	0, 535, 0, 0, 0, 0, 0, 0, 0, 0,
	540, 541, 538, 635, 0, 598, 599, 0, 0, 465,
	466, 332, 339, 484, 341, 303, 389, 334, 450, 348,
	0, 477, 542, 478, 601, 604, 602, 603, 381, 344,
	345, 413, 349, 359, 402, 449, 387, 407, 301, 440,
	414, 363, 528, 555, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 270, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	583, 582, 581, 580, 579, 578, 577, 576, 0, 0,
	525, 427, 313, 275, 309, 310, 317, 624, 621, 431,
	625, 0, 283, 505, 357, 0, 398, 331, 570, 571,
	0, 0, 231, 232, 233, 234, 235, 236, 237, 238,
	276, 239, 240, 241, 242, 243, 244, 245, 248, 249,
	250, 251, 252, 253, 254, 255, 573, 246, 247, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 0, 0, 0, 277, 278, 279, 280,
	0, 0, 271, 272, 273, 274, 0, 0, 0, 456,
	457, 458, 480, 0, 442, 504, 622, 0, 0, 0,
	0, 0, 0, 0, 554, 566, 600, 0, 610, 611,
	613, 615, 614, 617, 419, 0, 0, 628, 495, 496,
	629, 606, 386, 0, 510, 543, 532, 616, 498, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 0, 356, 547, 529, 539, 530, 515, 516, 517,
	524, 336, 518, 519, 520, 490, 521, 491, 522, 523,
	0, 546, 497, 415, 370, 564, 563, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 0, 0, 1494, 0,
	0, 0, 299, 219, 492, 612, 494, 493, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 302, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 289,
	421, 438, 300, 411, 451, 305, 418, 295, 385, 408,
	0, 0, 291, 436, 417, 367, 346, 347, 290, 0,
	403, 324, 338, 321, 383, 0, 435, 463, 320, 454,
	0, 446, 293, 0, 445, 382, 432, 437, 368, 362,
	0, 292, 434, 366, 361, 350, 328, 479, 351, 352,
	342, 394, 360, 395, 343, 372, 371, 373, 0, 0,
	0, 0, 0, 474, 475, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 605, 0, 0,
	609, 0, 448, 0, 0, 0, 0, 0, 0, 420,
	0, 0, 353, 0, 0, 0, 464, 0, 406, 388,
	631, 0, 0, 404, 358, 433, 396, 439, 422, 447,
	400, 397, 284, 423, 323, 369, 296, 298, 318, 325,
	327, 329, 330, 378, 379, 391, 410, 424, 425, 426,
	322, 306, 405, 307, 340, 308, 285, 314, 312, 315,
	412, 316, 287, 392, 430, 0, 335, 401, 365, 288,
	364, 393, 429, 428, 297, 455, 461, 462, 551, 0,
	467, 632, 633, 634, 476, 0, 0, 481, 482, 483,
	485, 486, 487, 488, 552, 569, 536, 506, 469, 560,
	503, 507, 508, 572, 0, 0, 0, 460, 354, 355,
	0, 333, 281, 282, 627, 319, 384, 574, 607, 608,
	499, 0, 561, 500, 509, 311, 533, 545, 544, 380,
	459, 0, 556, 559, 489, 626, 0, 553, 568, 630,
	567, 623, 390, 0, 409, 565, 512, 0, 557, 531,
	0, 558, 527, 562, 0, 501, 0, 416, 441, 453,
	470, 473, 502, 587, 588, 589, 286, 472, 591, 592,
	593, 594, 595, 596, 597, 590, 444, 534, 511, 537,
	452, 514, 513, 0, 0, 548, 468, 549, 550, 374,
	375, 376, 377, 337, 575, 304, 471, 399, 0, 535,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 541,
	538, 635, 0, 598, 599, 0, 0, 465, 466, 332,
	339, 484, 341, 303, 389, 334, 450, 348, 0, 477,
	542, 478, 601, 604, 602, 603, 381, 344, 345, 413,
	349, 359, 402, 449, 387, 407, 301, 440, 414, 363,
	528, 555, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 270, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 583, 582,
	581, 580, 579, 578, 577, 576, 0, 0, 525, 427,
	313, 275, 309, 310, 317, 624, 621, 431, 625, 0,
	283, 505, 357, 0, 398, 331, 570, 571, 0, 0,
	231, 232, 233, 234, 235, 236, 237, 238, 276, 239,
	240, 241, 242, 243, 244, 245, 248, 249, 250, 251,
	252, 253, 254, 255, 573, 246, 247, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 0, 0, 0, 277, 278, 279, 280, 0, 0,
	271, 272, 273, 274, 0, 0, 0, 456, 457, 458,
	480, 0, 442, 504, 622, 0, 0, 0, 0, 0,
	0, 0, 554, 566, 600, 0, 610, 611, 613, 615,
	614, 617, 419, 0, 0, 628, 495, 496, 629, 606,
	386, 0, 510, 543, 532, 616, 498, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 547, 529, 539, 530, 515, 516, 517, 524, 336,
	518, 519, 520, 490, 521, 491, 522, 523, 0, 546,
	497, 415, 370, 564, 563, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 0, 0, 2444, 0, 0, 0,
	299, 219, 492, 612, 494, 493, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 302, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 289, 421, 438,
	300, 411, 451, 305, 418, 295, 385, 408, 0, 0,
	291, 436, 417, 367, 346, 347, 290, 0, 403, 324,
	338, 321, 383, 0, 435, 463, 320, 454, 0, 446,
	293, 0, 445, 382, 432, 437, 368, 362, 0, 292,
	434, 366, 361, 350, 328, 479, 351, 352, 342, 394,
	360, 395, 343, 372, 371, 373, 0, 0, 0, 0,
	0, 474, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 0, 0, 609, 0,
	448, 0, 0, 0, 0, 0, 0, 420, 0, 0,
	353, 0, 0, 0, 464, 0, 406, 388, 631, 0,
	0, 404, 358, 433, 396, 439, 422, 447, 400, 397,
	284, 423, 323, 369, 296, 298, 318, 325, 327, 329,
	330, 378, 379, 391, 410, 424, 425, 426, 322, 306,
	405, 307, 340, 308, 285, 314, 312, 315, 412, 316,
	287, 392, 430, 0, 335, 401, 365, 288, 364, 393,
	429, 428, 297, 455, 461, 462, 551, 0, 467, 632,
	633, 634, 476, 0, 0, 481, 482, 483, 485, 486,
	487, 488, 552, 569, 536, 506, 469, 560, 503, 507,
	508, 572, 0, 0, 0, 460, 354, 355, 0, 333,
	281, 282, 627, 319, 384, 574, 607, 608, 499, 0,
	561, 500, 509, 311, 533, 545, 544, 380, 459, 0,
	556, 559, 489, 626, 0, 553, 568, 630, 567, 623,
	390, 0, 409, 565, 512, 0, 557, 531, 0, 558,
	527, 562, 0, 501, 0, 416, 441, 453, 470, 473,
	502, 587, 588, 589, 286, 472, 591, 592, 593, 594,
	595, 596, 597, 590, 444, 534, 511, 537, 452, 514,
	513, 0, 0, 548, 468, 549, 550, 374, 375, 376,
	377, 337, 575, 304, 471, 399, 0, 535, 0, 0,
	0, 0, 0, 0, 0, 0, 540, 541, 538, 635,
	0, 598, 599, 0, 0, 465, 466, 332, 339, 484,
	341, 303, 389, 334, 450, 348, 0, 477, 542, 478,
	601, 604, 602, 603, 381, 344, 345, 413, 349, 359,
	402, 449, 387, 407, 301, 440, 414, 363, 528, 555,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 270, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 583, 582, 581, 580,
	579, 578, 577, 576, 0, 0, 525, 427, 313, 275,
	309, 310, 317, 624, 621, 431, 625, 0, 283, 505,
	357, 0, 398, 331, 570, 571, 0, 0, 231, 232,
	233, 234, 235, 236, 237, 238, 276, 239, 240, 241,
	242, 243, 244, 245, 248, 249, 250, 251, 252, 253,
	254, 255, 573, 246, 247, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 0,
	0, 0, 277, 278, 279, 280, 0, 0, 271, 272,
	273, 274, 0, 0, 0, 456, 457, 458, 480, 0,
	442, 504, 622, 0, 0, 0, 0, 0, 0, 0,
	554, 566, 600, 0, 610, 611, 613, 615, 614, 617,
	419, 0, 0, 628, 495, 496, 629, 606, 386, 0,
	510, 543, 532, 616, 498, 0, 0, 2800, 0, 0,
	0, 0, 0, 0, 0, 326, 0, 0, 356, 547,
	529, 539, 530, 515, 516, 517, 524, 336, 518, 519,
	520, 490, 521, 491, 522, 523, 0, 546, 497, 415,
	370, 564, 563, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 0, 0, 0, 0, 0, 0, 299, 219,
	492, 612, 494, 493, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 302, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 289, 421, 438, 300, 411,
	451, 305, 418, 295, 385, 408, 0, 0, 291, 436,
	417, 367, 346, 347, 290, 0, 403, 324, 338, 321,
	383, 0, 435, 463, 320, 454, 0, 446, 293, 0,
	445, 382, 432, 437, 368, 362, 0, 292, 434, 366,
	361, 350, 328, 479, 351, 352, 342, 394, 360, 395,
	343, 372, 371, 373, 0, 0, 0, 0, 0, 474,
	475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 605, 0, 0, 609, 0, 448, 0,
	0, 0, 0, 0, 0, 420, 0, 0, 353, 0,
	0, 0, 464, 0, 406, 388, 631, 0, 0, 404,
	358, 433, 396, 439, 422, 447, 400, 397, 284, 423,
	323, 369, 296, 298, 318, 325, 327, 329, 330, 378,
	379, 391, 410, 424, 425, 426, 322, 306, 405, 307,
	340, 308, 285, 314, 312, 315, 412, 316, 287, 392,
	430, 0, 335, 401, 365, 288, 364, 393, 429, 428,
	297, 455, 461, 462, 551, 0, 467, 632, 633, 634,
	476, 0, 0, 481, 482, 483, 485, 486, 487, 488,
	552, 569, 536, 506, 469, 560, 503, 507, 508, 572,
	0, 0, 0, 460, 354, 355, 0, 333, 281, 282,
	627, 319, 384, 574, 607, 608, 499, 0, 561, 500,
	509, 311, 533, 545, 544, 380, 459, 0, 556, 559,
	489, 626, 0, 553, 568, 630, 567, 623, 390, 0,
	409, 565, 512, 0, 557, 531, 0, 558, 527, 562,
	0, 501, 0, 416, 441, 453, 470, 473, 502, 587,
	588, 589, 286, 472, 591, 592, 593, 594, 595, 596,
	597, 590, 444, 534, 511, 537, 452, 514, 513, 0,
	0, 548, 468, 549, 550, 374, 375, 376, 377, 337,
	575, 304, 471, 399, 0, 535, 0, 0, 0, 0,
	0, 0, 0, 0, 540, 541, 538, 635, 0, 598,
	599, 0, 0, 465, 466, 332, 339, 484, 341, 303,
	389, 334, 450, 348, 0, 477, 542, 478, 601, 604,
	602, 603, 381, 344, 345, 413, 349, 359, 402, 449,
	387, 407, 301, 440, 414, 363, 528, 555, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 583, 582, 581, 580, 579, 578,
	577, 576, 0, 0, 525, 427, 313, 275, 309, 310,
	317, 624, 621, 431, 625, 0, 283, 505, 357, 0,
	398, 331, 570, 571, 0, 0, 231, 232, 233, 234,
	235, 236, 237, 238, 276, 239, 240, 241, 242, 243,
	244, 245, 248, 249, 250, 251, 252, 253, 254, 255,
	573, 246, 247, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 0, 0, 0,
	277, 278, 279, 280, 0, 0, 271, 272, 273, 274,
	0, 0, 0, 456, 457, 458, 480, 0, 442, 504,
	622, 0, 0, 0, 0, 0, 0, 0, 554, 566,
	600, 0, 610, 611, 613, 615, 614, 617, 419, 0,
	0, 628, 495, 496, 629, 606, 386, 0, 510, 543,
	532, 616, 498, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 547, 529, 539,
	530, 515, 516, 517, 524, 336, 518, 519, 520, 490,
	521, 491, 522, 523, 0, 546, 497, 415, 370, 564,
	563, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	0, 0, 0, 0, 0, 0, 299, 219, 492, 612,
	494, 493, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2134, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 421, 438, 300, 411, 451, 305,
	418, 295, 385, 408, 0, 0, 291, 436, 417, 367,
	346, 347, 290, 0, 403, 324, 338, 321, 383, 0,
	435, 463, 320, 454, 0, 446, 293, 0, 445, 382,
	432, 437, 368, 362, 0, 292, 434, 366, 361, 350,
	328, 479, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 474, 475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 605, 0, 0, 609, 0, 448, 0, 0, 0,
	0, 0, 0, 420, 0, 0, 353, 0, 0, 0,
	464, 0, 406, 388, 631, 0, 0, 404, 358, 433,
	396, 439, 422, 447, 400, 397, 284, 423, 323, 369,
	296, 298, 318, 325, 327, 329, 330, 378, 379, 391,
	410, 424, 425, 426, 322, 306, 405, 307, 340, 308,
	285, 314, 312, 315, 412, 316, 287, 392, 430, 0,
	335, 401, 365, 288, 364, 393, 429, 428, 297, 455,
	461, 462, 551, 0, 467, 632, 633, 634, 476, 0,
	0, 481, 482, 483, 485, 486, 487, 488, 552, 569,
	536, 506, 469, 560, 503, 507, 508, 572, 0, 0,
	0, 460, 354, 355, 0, 333, 281, 282, 627, 319,
	384, 574, 607, 608, 499, 0, 561, 500, 509, 311,
	533, 545, 544, 380, 459, 0, 556, 559, 489, 626,
	0, 553, 568, 630, 567, 623, 390, 0, 409, 565,
	512, 0, 557, 531, 0, 558, 527, 562, 0, 501,
	0, 416, 441, 453, 470, 473, 502, 587, 588, 589,
	286, 472, 591, 592, 593, 594, 595, 596, 597, 590,
	444, 534, 511, 537, 452, 514, 513, 0, 0, 548,
	468, 549, 550, 374, 375, 376, 377, 337, 575, 304,
	471, 399, 0, 535, 0, 0, 0, 0, 0, 0,
	0, 0, 540, 541, 538, 635, 0, 598, 599, 0,
	0, 465, 466, 332, 339, 484, 341, 303, 389, 334,
	450, 348, 0, 477, 542, 478, 601, 604, 602, 603,
	381, 344, 345, 413, 349, 359, 402, 449, 387, 407,
	301, 440, 414, 363, 528, 555, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 583, 582, 581, 580, 579, 578, 577, 576,
	0, 0, 525, 427, 313, 275, 309, 310, 317, 624,
	621, 431, 625, 0, 283, 505, 357, 0, 398, 331,
	570, 571, 0, 0, 231, 232, 233, 234, 235, 236,
	237, 238, 276, 239, 240, 241, 242, 243, 244, 245,
	248, 249, 250, 251, 252, 253, 254, 255, 573, 246,
	247, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 0, 0, 0, 277, 278,
	279, 280, 0, 0, 271, 272, 273, 274, 0, 0,
	0, 456, 457, 458, 480, 0, 442, 504, 622, 0,
	0, 0, 0, 0, 0, 0, 554, 566, 600, 0,
	610, 611, 613, 615, 614, 617, 419, 0, 0, 628,
	495, 496, 629, 606, 386, 0, 510, 543, 532, 616,
	498, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 326, 0, 0, 356, 547, 529, 539, 530, 515,
	516, 517, 524, 336, 518, 519, 520, 490, 521, 491,
	522, 523, 0, 546, 497, 415, 370, 564, 563, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 0, 0,
	2561, 0, 0, 0, 299, 219, 492, 612, 494, 493,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 302,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 289, 421, 438, 300, 411, 451, 305, 418, 295,
	385, 408, 0, 0, 291, 436, 417, 367, 346, 347,
	290, 0, 403, 324, 338, 321, 383, 0, 435, 463,
	320, 454, 0, 446, 293, 0, 445, 382, 432, 437,
	368, 362, 0, 292, 434, 366, 361, 350, 328, 479,
	351, 352, 342, 394, 360, 395, 343, 372, 371, 373,
	0, 0, 0, 0, 0, 474, 475, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 605,
	0, 0, 609, 0, 448, 0, 0, 0, 0, 0,
	0, 420, 0, 0, 353, 0, 0, 0, 464, 0,
	406, 388, 631, 0, 0, 404, 358, 433, 396, 439,
	422, 447, 400, 397, 284, 423, 323, 369, 296, 298,
	318, 325, 327, 329, 330, 378, 379, 391, 410, 424,
	425, 426, 322, 306, 405, 307, 340, 308, 285, 314,
	312, 315, 412, 316, 287, 392, 430, 0, 335, 401,
	365, 288, 364, 393, 429, 428, 297, 455, 461, 462,
	551, 0, 467, 632, 633, 634, 476, 0, 0, 481,
	482, 483, 485, 486, 487, 488, 552, 569, 536, 506,
	469, 560, 503, 507, 508, 572, 0, 0, 0, 460,
	354, 355, 0, 333, 281, 282, 627, 319, 384, 574,
	607, 608, 499, 0, 561, 500, 509, 311, 533, 545,
	544, 380, 459, 0, 556, 559, 489, 626, 0, 553,
	568, 630, 567, 623, 390, 0, 409, 565, 512, 0,
	557, 531, 0, 558, 527, 562, 0, 501, 0, 416,
	441, 453, 470, 473, 502, 587, 588, 589, 286, 472,
	591, 592, 593, 594, 595, 596, 597, 590, 444, 534,
	511, 537, 452, 514, 513, 0, 0, 548, 468, 549,
	550, 374, 375, 376, 377, 337, 575, 304, 471, 399,
	0, 535, 0, 0, 0, 0, 0, 0, 0, 0,
	540, 541, 538, 635, 0, 598, 599, 0, 0, 465,
	466, 332, 339, 484, 341, 303, 389, 334, 450, 348,
	0, 477, 542, 478, 601, 604, 602, 603, 381, 344,
	345, 413, 349, 359, 402, 449, 387, 407, 301, 440,
	414, 363, 528, 555, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 270, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	583, 582, 581, 580, 579, 578, 577, 576, 0, 0,
	525, 427, 313, 275, 309, 310, 317, 624, 621, 431,
	625, 0, 283, 505, 357, 0, 398, 331, 570, 571,
	0, 0, 231, 232, 233, 234, 235, 236, 237, 238,
	276, 239, 240, 241, 242, 243, 244, 245, 248, 249,
	250, 251, 252, 253, 254, 255, 573, 246, 247, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 0, 0, 0, 277, 278, 279, 280,
	0, 0, 271, 272, 273, 274, 0, 0, 0, 456,
	457, 458, 480, 0, 442, 504, 622, 0, 0, 0,
	0, 0, 0, 0, 554, 566, 600, 0, 610, 611,
	613, 615, 614, 617, 419, 0, 0, 628, 495, 496,
	629, 606, 386, 0, 510, 543, 532, 616, 498, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 0, 356, 547, 529, 539, 530, 515, 516, 517,
	524, 336, 518, 519, 520, 490, 521, 491, 522, 523,
	0, 546, 497, 415, 370, 564, 563, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 0, 0, 0, 0,
	0, 0, 299, 219, 492, 612, 494, 493, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 302, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2522, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 289,
	421, 438, 300, 411, 451, 305, 418, 295, 385, 408,
	0, 0, 291, 436, 417, 367, 346, 347, 290, 0,
	403, 324, 338, 321, 383, 0, 435, 463, 320, 454,
	0, 446, 293, 0, 445, 382, 432, 437, 368, 362,
	0, 292, 434, 366, 361, 350, 328, 479, 351, 352,
	342, 394, 360, 395, 343, 372, 371, 373, 0, 0,
	0, 0, 0, 474, 475, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 605, 0, 0,
	609, 0, 448, 0, 0, 0, 0, 0, 0, 420,
	0, 0, 353, 0, 0, 0, 464, 0, 406, 388,
	631, 0, 0, 404, 358, 433, 396, 439, 422, 447,
	400, 397, 284, 423, 323, 369, 296, 298, 318, 325,
	327, 329, 330, 378, 379, 391, 410, 424, 425, 426,
	322, 306, 405, 307, 340, 308, 285, 314, 312, 315,
	412, 316, 287, 392, 430, 0, 335, 401, 365, 288,
	364, 393, 429, 428, 297, 455, 461, 462, 551, 0,
	467, 632, 633, 634, 476, 0, 0, 481, 482, 483,
	485, 486, 487, 488, 552, 569, 536, 506, 469, 560,
	503, 507, 508, 572, 0, 0, 0, 460, 354, 355,
	0, 333, 281, 282, 627, 319, 384, 574, 607, 608,
	499, 0, 561, 500, 509, 311, 533, 545, 544, 380,
	459, 0, 556, 559, 489, 626, 0, 553, 568, 630,
	567, 623, 390, 0, 409, 565, 512, 0, 557, 531,
	0, 558, 527, 562, 0, 501, 0, 416, 441, 453,
	470, 473, 502, 587, 588, 589, 286, 472, 591, 592,
	593, 594, 595, 596, 597, 590, 444, 534, 511, 537,
	452, 514, 513, 0, 0, 548, 468, 549, 550, 374,
	375, 376, 377, 337, 575, 304, 471, 399, 0, 535,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 541,
	538, 635, 0, 598, 599, 0, 0, 465, 466, 332,
	339, 484, 341, 303, 389, 334, 450, 348, 0, 477,
	542, 478, 601, 604, 602, 603, 381, 344, 345, 413,
	349, 359, 402, 449, 387, 407, 301, 440, 414, 363,
	528, 555, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 270, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 583, 582,
	581, 580, 579, 578, 577, 576, 0, 0, 525, 427,
	313, 275, 309, 310, 317, 624, 621, 431, 625, 0,
	283, 505, 357, 0, 398, 331, 570, 571, 0, 0,
	231, 232, 233, 234, 235, 236, 237, 238, 276, 239,
	240, 241, 242, 243, 244, 245, 248, 249, 250, 251,
	252, 253, 254, 255, 573, 246, 247, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 0, 0, 0, 277, 278, 279, 280, 0, 0,
	271, 272, 273, 274, 0, 0, 0, 456, 457, 458,
	480, 0, 442, 504, 622, 0, 0, 0, 0, 0,
	0, 0, 554, 566, 600, 0, 610, 611, 613, 615,
	614, 617, 419, 0, 0, 628, 495, 496, 629, 606,
	386, 0, 510, 543, 532, 616, 498, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 547, 529, 539, 530, 515, 516, 517, 524, 336,
	518, 519, 520, 490, 521, 491, 522, 523, 0, 546,
	497, 415, 370, 564, 563, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 0, 0, 2520, 0, 0, 0,
	299, 219, 492, 612, 494, 493, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 302, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 289, 421, 438,
	300, 411, 451, 305, 418, 295, 385, 408, 0, 0,
	291, 436, 417, 367, 346, 347, 290, 0, 403, 324,
	338, 321, 383, 0, 435, 463, 320, 454, 0, 446,
	293, 0, 445, 382, 432, 437, 368, 362, 0, 292,
	434, 366, 361, 350, 328, 479, 351, 352, 342, 394,
	360, 395, 343, 372, 371, 373, 0, 0, 0, 0,
	0, 474, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 0, 0, 609, 0,
	448, 0, 0, 0, 0, 0, 0, 420, 0, 0,
	353, 0, 0, 0, 464, 0, 406, 388, 631, 0,
	0, 404, 358, 433, 396, 439, 422, 447, 400, 397,
	284, 423, 323, 369, 296, 298, 318, 325, 327, 329,
	330, 378, 379, 391, 410, 424, 425, 426, 322, 306,
	405, 307, 340, 308, 285, 314, 312, 315, 412, 316,
	287, 392, 430, 0, 335, 401, 365, 288, 364, 393,
	429, 428, 297, 455, 461, 462, 551, 0, 467, 632,
	633, 634, 476, 0, 0, 481, 482, 483, 485, 486,
	487, 488, 552, 569, 536, 506, 469, 560, 503, 507,
	508, 572, 0, 0, 0, 460, 354, 355, 0, 333,
	281, 282, 627, 319, 384, 574, 607, 608, 499, 0,
	561, 500, 509, 311, 533, 545, 544, 380, 459, 0,
	556, 559, 489, 626, 0, 553, 568, 630, 567, 623,
	390, 0, 409, 565, 512, 0, 557, 531, 0, 558,
	527, 562, 0, 501, 0, 416, 441, 453, 470, 473,
	502, 587, 588, 589, 286, 472, 591, 592, 593, 594,
	595, 596, 597, 590, 444, 534, 511, 537, 452, 514,
	513, 0, 0, 548, 468, 549, 550, 374, 375, 376,
	377, 337, 575, 304, 471, 399, 0, 535, 0, 0,
	0, 0, 0, 0, 0, 0, 540, 541, 538, 635,
	0, 598, 599, 0, 0, 465, 466, 332, 339, 484,
	341, 303, 389, 334, 450, 348, 0, 477, 542, 478,
	601, 604, 602, 603, 381, 344, 345, 413, 349, 359,
	402, 449, 387, 407, 301, 440, 414, 363, 528, 555,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 270, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 583, 582, 581, 580,
	579, 578, 577, 576, 0, 0, 525, 427, 313, 275,
	309, 310, 317, 624, 621, 431, 625, 0, 283, 505,
	357, 0, 398, 331, 570, 571, 0, 0, 231, 232,
	233, 234, 235, 236, 237, 238, 276, 239, 240, 241,
	242, 243, 244, 245, 248, 249, 250, 251, 252, 253,
	254, 255, 573, 246, 247, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 0,
	0, 0, 277, 278, 279, 280, 0, 0, 271, 272,
	273, 274, 0, 0, 0, 456, 457, 458, 480, 0,
	442, 504, 622, 0, 0, 0, 0, 0, 0, 0,
	554, 566, 600, 0, 610, 611, 613, 615, 614, 617,
	419, 0, 2299, 628, 495, 496, 629, 606, 386, 0,
	510, 543, 532, 616, 498, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 326, 0, 0, 356, 547,
	529, 539, 530, 515, 516, 517, 524, 336, 518, 519,
	520, 490, 521, 491, 522, 523, 0, 546, 497, 415,
	370, 564, 563, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 0, 0, 0, 0, 0, 0, 299, 219,
	492, 612, 494, 493, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 302, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 289, 421, 438, 300, 411,
	451, 305, 418, 295, 385, 408, 0, 0, 291, 436,
	417, 367, 346, 347, 290, 0, 403, 324, 338, 321,
	383, 0, 435, 463, 320, 454, 0, 446, 293, 0,
	445, 382, 432, 437, 368, 362, 0, 292, 434, 366,
	361, 350, 328, 479, 351, 352, 342, 394, 360, 395,
	343, 372, 371, 373, 0, 0, 0, 0, 0, 474,
	475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 605, 0, 0, 609, 0, 448, 0,
	0, 0, 0, 0, 0, 420, 0, 0, 353, 0,
	0, 0, 464, 0, 406, 388, 631, 0, 0, 404,
	358, 433, 396, 439, 422, 447, 400, 397, 284, 423,
	323, 369, 296, 298, 318, 325, 327, 329, 330, 378,
	379, 391, 410, 424, 425, 426, 322, 306, 405, 307,
	340, 308, 285, 314, 312, 315, 412, 316, 287, 392,
	430, 0, 335, 401, 365, 288, 364, 393, 429, 428,
	297, 455, 461, 462, 551, 0, 467, 632, 633, 634,
	476, 0, 0, 481, 482, 483, 485, 486, 487, 488,
	552, 569, 536, 506, 469, 560, 503, 507, 508, 572,
	0, 0, 0, 460, 354, 355, 0, 333, 281, 282,
	627, 319, 384, 574, 607, 608, 499, 0, 561, 500,
	509, 311, 533, 545, 544, 380, 459, 0, 556, 559,
	489, 626, 0, 553, 568, 630, 567, 623, 390, 0,
	409, 565, 512, 0, 557, 531, 0, 558, 527, 562,
	0, 501, 0, 416, 441, 453, 470, 473, 502, 587,
	588, 589, 286, 472, 591, 592, 593, 594, 595, 596,
	597, 590, 444, 534, 511, 537, 452, 514, 513, 0,
	0, 548, 468, 549, 550, 374, 375, 376, 377, 337,
	575, 304, 471, 399, 0, 535, 0, 0, 0, 0,
	0, 0, 0, 0, 540, 541, 538, 635, 0, 598,
	599, 0, 0, 465, 466, 332, 339, 484, 341, 303,
	389, 334, 450, 348, 0, 477, 542, 478, 601, 604,
	602, 603, 381, 344, 345, 413, 349, 359, 402, 449,
	387, 407, 301, 440, 414, 363, 528, 555, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 583, 582, 581, 580, 579, 578,
	577, 576, 0, 0, 525, 427, 313, 275, 309, 310,
	317, 624, 621, 431, 625, 0, 283, 505, 357, 0,
	398, 331, 570, 571, 0, 0, 231, 232, 233, 234,
	235, 236, 237, 238, 276, 239, 240, 241, 242, 243,
	244, 245, 248, 249, 250, 251, 252, 253, 254, 255,
	573, 246, 247, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 0, 0, 0,
	277, 278, 279, 280, 0, 0, 271, 272, 273, 274,
	0, 0, 0, 456, 457, 458, 480, 0, 442, 504,
	622, 0, 0, 0, 0, 0, 0, 0, 554, 566,
	600, 0, 610, 611, 613, 615, 614, 617, 419, 0,
	0, 628, 495, 496, 629, 606, 386, 0, 510, 543,
	532, 616, 498, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 547, 529, 539,
	530, 515, 516, 517, 524, 336, 518, 519, 520, 490,
	521, 491, 522, 523, 0, 546, 497, 415, 370, 564,
	563, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	0, 0, 0, 1850, 0, 0, 299, 219, 492, 612,
	494, 493, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 421, 438, 300, 411, 451, 305,
	418, 295, 385, 408, 0, 0, 291, 436, 417, 367,
	346, 347, 290, 0, 403, 324, 338, 321, 383, 0,
	435, 463, 320, 454, 0, 446, 293, 0, 445, 382,
	432, 437, 368, 362, 0, 292, 434, 366, 361, 350,
	328, 479, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 474, 475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 605, 0, 0, 609, 0, 448, 0, 0, 0,
	0, 0, 0, 420, 0, 0, 353, 0, 0, 0,
	464, 0, 406, 388, 631, 0, 0, 404, 358, 433,
	396, 439, 422, 447, 400, 397, 284, 423, 323, 369,
	296, 298, 318, 325, 327, 329, 330, 378, 379, 391,
	410, 424, 425, 426, 322, 306, 405, 307, 340, 308,
	285, 314, 312, 315, 412, 316, 287, 392, 430, 0,
	335, 401, 365, 288, 364, 393, 429, 428, 297, 455,
	461, 462, 551, 0, 467, 632, 633, 634, 476, 0,
	0, 481, 482, 483, 485, 486, 487, 488, 552, 569,
	536, 506, 469, 560, 503, 507, 508, 572, 0, 0,
	0, 460, 354, 355, 0, 333, 281, 282, 627, 319,
	384, 574, 607, 608, 499, 0, 561, 500, 509, 311,
	533, 545, 544, 380, 459, 0, 556, 559, 489, 626,
	0, 553, 568, 630, 567, 623, 390, 0, 409, 565,
	512, 0, 557, 531, 0, 558, 527, 562, 0, 501,
	0, 416, 441, 453, 470, 473, 502, 587, 588, 589,
	286, 472, 591, 592, 593, 594, 595, 596, 597, 590,
	444, 534, 511, 537, 452, 514, 513, 0, 0, 548,
	468, 549, 550, 374, 375, 376, 377, 337, 575, 304,
	471, 399, 0, 535, 0, 0, 0, 0, 0, 0,
	0, 0, 540, 541, 538, 635, 0, 598, 599, 0,
	0, 465, 466, 332, 339, 484, 341, 303, 389, 334,
	450, 348, 0, 477, 542, 478, 601, 604, 602, 603,
	381, 344, 345, 413, 349, 359, 402, 449, 387, 407,
	301, 440, 414, 363, 528, 555, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 583, 582, 581, 580, 579, 578, 577, 576,
	0, 0, 525, 427, 313, 275, 309, 310, 317, 624,
	621, 431, 625, 0, 283, 505, 357, 0, 398, 331,
	570, 571, 0, 0, 231, 232, 233, 234, 235, 236,
	237, 238, 276, 239, 240, 241, 242, 243, 244, 245,
	248, 249, 250, 251, 252, 253, 254, 255, 573, 246,
	247, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 0, 0, 0, 277, 278,
	279, 280, 0, 0, 271, 272, 273, 274, 0, 0,
	0, 456, 457, 458, 480, 0, 442, 504, 622, 0,
	0, 0, 0, 0, 0, 0, 554, 566, 600, 0,
	610, 611, 613, 615, 614, 617, 419, 0, 0, 628,
	495, 496, 629, 606, 386, 0, 510, 543, 532, 616,
	498, 0, 1979, 0, 0, 0, 0, 0, 0, 0,
	0, 326, 0, 0, 356, 547, 529, 539, 530, 515,
	516, 517, 524, 336, 518, 519, 520, 490, 521, 491,
	522, 523, 0, 546, 497, 415, 370, 564, 563, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 0, 0,
	0, 0, 0, 0, 299, 219, 492, 612, 494, 493,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 302,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 289, 421, 438, 300, 411, 451, 305, 418, 295,
	385, 408, 0, 0, 291, 436, 417, 367, 346, 347,
	290, 0, 403, 324, 338, 321, 383, 0, 435, 463,
	320, 454, 0, 446, 293, 0, 445, 382, 432, 437,
	368, 362, 0, 292, 434, 366, 361, 350, 328, 479,
	351, 352, 342, 394, 360, 395, 343, 372, 371, 373,
	0, 0, 0, 0, 0, 474, 475, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 605,
	0, 0, 609, 0, 448, 0, 0, 0, 0, 0,
	0, 420, 0, 0, 353, 0, 0, 0, 464, 0,
	406, 388, 631, 0, 0, 404, 358, 433, 396, 439,
	422, 447, 400, 397, 284, 423, 323, 369, 296, 298,
	318, 325, 327, 329, 330, 378, 379, 391, 410, 424,
	425, 426, 322, 306, 405, 307, 340, 308, 285, 314,
	312, 315, 412, 316, 287, 392, 430, 0, 335, 401,
	365, 288, 364, 393, 429, 428, 297, 455, 461, 462,
	551, 0, 467, 632, 633, 634, 476, 0, 0, 481,
	482, 483, 485, 486, 487, 488, 552, 569, 536, 506,
	469, 560, 503, 507, 508, 572, 0, 0, 0, 460,
	354, 355, 0, 333, 281, 282, 627, 319, 384, 574,
	607, 608, 499, 0, 561, 500, 509, 311, 533, 545,
	544, 380, 459, 0, 556, 559, 489, 626, 0, 553,
	568, 630, 567, 623, 390, 0, 409, 565, 512, 0,
	557, 531, 0, 558, 527, 562, 0, 501, 0, 416,
	441, 453, 470, 473, 502, 587, 588, 589, 286, 472,
	591, 592, 593, 594, 595, 596, 597, 590, 444, 534,
	511, 537, 452, 514, 513, 0, 0, 548, 468, 549,
	550, 374, 375, 376, 377, 337, 575, 304, 471, 399,
	0, 535, 0, 0, 0, 0, 0, 0, 0, 0,
	540, 541, 538, 635, 0, 598, 599, 0, 0, 465,
	466, 332, 339, 484, 341, 303, 389, 334, 450, 348,
	0, 477, 542, 478, 601, 604, 602, 603, 381, 344,
	345, 413, 349, 359, 402, 449, 387, 407, 301, 440,
	414, 363, 528, 555, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 270, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	583, 582, 581, 580, 579, 578, 577, 576, 0, 0,
	525, 427, 313, 275, 309, 310, 317, 624, 621, 431,
	625, 0, 283, 505, 357, 0, 398, 331, 570, 571,
	0, 0, 231, 232, 233, 234, 235, 236, 237, 238,
	276, 239, 240, 241, 242, 243, 244, 245, 248, 249,
	250, 251, 252, 253, 254, 255, 573, 246, 247, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 0, 0, 0, 277, 278, 279, 280,
	0, 0, 271, 272, 273, 274, 0, 0, 0, 456,
	457, 458, 480, 0, 442, 504, 622, 0, 0, 0,
	0, 0, 0, 0, 554, 566, 600, 0, 610, 611,
	613, 615, 614, 617, 419, 0, 0, 628, 495, 496,
	629, 606, 386, 0, 510, 543, 532, 616, 498, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 0, 356, 547, 529, 539, 530, 515, 516, 517,
	524, 336, 518, 519, 520, 490, 521, 491, 522, 523,
	0, 546, 497, 415, 370, 564, 563, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 0, 0, 1494, 0,
	0, 0, 299, 219, 492, 612, 494, 493, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 302, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 289,
	421, 438, 300, 411, 451, 305, 418, 295, 385, 408,
	0, 0, 291, 436, 417, 367, 346, 347, 290, 0,
	403, 324, 338, 321, 383, 0, 435, 463, 320, 454,
	0, 446, 293, 0, 445, 382, 432, 437, 368, 362,
	0, 292, 434, 366, 361, 350, 328, 479, 351, 352,
	342, 394, 360, 395, 343, 372, 371, 373, 0, 0,
	0, 0, 0, 474, 475, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 605, 0, 0,
	609, 0, 448, 0, 0, 0, 0, 0, 0, 420,
	0, 0, 353, 0, 0, 0, 464, 0, 406, 388,
	631, 0, 0, 404, 358, 433, 396, 439, 422, 447,
	1884, 397, 284, 423, 323, 369, 296, 298, 318, 325,
	327, 329, 330, 378, 379, 391, 410, 424, 425, 426,
	322, 306, 405, 307, 340, 308, 285, 314, 312, 315,
	412, 316, 287, 392, 430, 0, 335, 401, 365, 288,
	364, 393, 429, 428, 297, 455, 461, 462, 551, 0,
	467, 632, 633, 634, 476, 0, 0, 481, 482, 483,
	485, 486, 487, 488, 552, 569, 536, 506, 469, 560,
	503, 507, 508, 572, 0, 0, 0, 460, 354, 355,
	0, 333, 281, 282, 627, 319, 384, 574, 607, 608,
	499, 0, 561, 500, 509, 311, 533, 545, 544, 380,
	459, 0, 556, 559, 489, 626, 0, 553, 568, 630,
	567, 623, 390, 0, 409, 565, 512, 0, 557, 531,
	0, 558, 527, 562, 0, 501, 0, 416, 441, 453,
	470, 473, 502, 587, 588, 589, 286, 472, 591, 592,
	593, 594, 595, 596, 597, 590, 444, 534, 511, 537,
	452, 514, 513, 0, 0, 548, 468, 549, 550, 374,
	375, 376, 377, 337, 575, 304, 471, 399, 0, 535,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 541,
	538, 635, 0, 598, 599, 0, 0, 465, 466, 332,
	339, 484, 341, 303, 389, 334, 450, 348, 0, 477,
	542, 478, 601, 604, 602, 603, 381, 344, 345, 413,
	349, 359, 402, 449, 387, 407, 301, 440, 414, 363,
	528, 555, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 270, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 583, 582,
	581, 580, 579, 578, 577, 576, 0, 0, 525, 427,
	313, 275, 309, 310, 317, 624, 621, 431, 625, 0,
	283, 505, 357, 0, 398, 331, 570, 571, 0, 0,
	231, 232, 233, 234, 235, 236, 237, 238, 276, 239,
	240, 241, 242, 243, 244, 245, 248, 249, 250, 251,
	252, 253, 254, 255, 573, 246, 247, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 0, 0, 0, 277, 278, 279, 280, 0, 0,
	271, 272, 273, 274, 0, 0, 0, 456, 457, 458,
	480, 0, 442, 504, 622, 0, 0, 0, 0, 0,
	0, 0, 554, 566, 600, 0, 610, 611, 613, 615,
	614, 617, 419, 0, 0, 628, 495, 496, 629, 606,
	386, 0, 510, 543, 532, 616, 498, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 547, 529, 539, 530, 515, 516, 517, 524, 336,
	518, 519, 520, 490, 521, 491, 522, 523, 0, 546,
	497, 415, 370, 564, 563, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 0, 0, 0, 0, 0, 0,
	299, 219, 492, 612, 494, 493, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 302, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 289, 421, 438,
	300, 411, 451, 305, 418, 295, 385, 408, 0, 0,
	291, 436, 417, 367, 346, 347, 290, 0, 403, 324,
	338, 321, 383, 0, 435, 463, 320, 454, 0, 446,
	293, 0, 445, 382, 432, 437, 368, 362, 0, 292,
	434, 366, 361, 350, 328, 479, 351, 352, 342, 394,
	360, 395, 343, 372, 371, 373, 0, 0, 0, 0,
	0, 474, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 0, 0, 609, 0,
	448, 0, 0, 1523, 0, 0, 0, 420, 0, 0,
	353, 0, 0, 0, 464, 0, 406, 388, 631, 0,
	0, 404, 358, 433, 396, 439, 422, 447, 400, 397,
	284, 423, 323, 369, 296, 298, 318, 325, 327, 329,
	330, 378, 379, 391, 410, 424, 425, 426, 322, 306,
	405, 307, 340, 308, 285, 314, 312, 315, 412, 316,
	287, 392, 430, 0, 335, 401, 365, 288, 364, 393,
	429, 428, 297, 455, 461, 462, 551, 0, 467, 632,
	633, 634, 476, 0, 0, 481, 482, 483, 485, 486,
	487, 488, 552, 569, 536, 506, 469, 560, 503, 507,
	508, 572, 0, 0, 0, 460, 354, 355, 0, 333,
	281, 282, 627, 319, 384, 574, 607, 608, 499, 0,
	561, 500, 509, 311, 533, 545, 544, 380, 459, 0,
	556, 559, 489, 626, 0, 553, 568, 630, 567, 623,
	390, 0, 409, 565, 512, 0, 557, 531, 0, 558,
	527, 562, 0, 501, 0, 416, 441, 453, 470, 473,
	502, 587, 588, 589, 286, 472, 591, 592, 593, 594,
	595, 596, 597, 590, 444, 534, 511, 537, 452, 514,
	513, 0, 0, 548, 468, 549, 550, 374, 375, 376,
	377, 337, 575, 304, 471, 399, 0, 535, 0, 0,
	0, 0, 0, 0, 0, 0, 540, 541, 538, 635,
	0, 598, 599, 0, 0, 465, 466, 332, 339, 484,
	341, 303, 389, 334, 450, 348, 0, 477, 542, 478,
	601, 604, 602, 603, 381, 344, 345, 413, 349, 359,
	402, 449, 387, 407, 301, 440, 414, 363, 528, 555,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 270, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 583, 582, 581, 580,
	579, 578, 577, 576, 0, 0, 525, 427, 313, 275,
	309, 310, 317, 624, 621, 431, 625, 0, 283, 505,
	357, 0, 398, 331, 570, 571, 0, 0, 231, 232,
	233, 234, 235, 236, 237, 238, 276, 239, 240, 241,
	242, 243, 244, 245, 248, 249, 250, 251, 252, 253,
	254, 255, 573, 246, 247, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 0,
	0, 0, 277, 278, 279, 280, 0, 0, 271, 272,
	273, 274, 0, 0, 0, 456, 457, 458, 480, 0,
	442, 504, 622, 0, 0, 0, 0, 0, 0, 0,
	554, 566, 600, 0, 610, 611, 613, 615, 614, 617,
	419, 0, 0, 628, 495, 496, 629, 606, 386, 0,
	510, 543, 532, 616, 498, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 642, 326, 0, 0, 356, 547,
	529, 539, 530, 515, 516, 517, 524, 336, 518, 519,
	520, 490, 521, 491, 522, 523, 0, 546, 497, 415,
	370, 564, 563, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 0, 0, 0, 0, 0, 0, 299, 219,
	492, 612, 494, 493, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 302, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 289, 421, 438, 300, 411,
	451, 305, 418, 295, 385, 408, 0, 0, 291, 436,
	417, 367, 346, 347, 290, 0, 403, 324, 338, 321,
	383, 0, 435, 463, 320, 454, 0, 446, 293, 0,
	445, 382, 432, 437, 368, 362, 0, 292, 434, 366,
	361, 350, 328, 479, 351, 352, 342, 394, 360, 395,
	343, 372, 371, 373, 0, 0, 0, 0, 0, 474,
	475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 605, 0, 0, 609, 0, 448, 0,
	0, 0, 0, 0, 0, 420, 0, 0, 353, 0,
	0, 0, 464, 0, 406, 388, 631, 0, 0, 404,
	358, 433, 396, 439, 422, 447, 400, 397, 284, 423,
	323, 369, 296, 298, 318, 325, 327, 329, 330, 378,
	379, 391, 410, 424, 425, 426, 322, 306, 405, 307,
	340, 308, 285, 314, 312, 315, 412, 316, 287, 392,
	430, 0, 335, 401, 365, 288, 364, 393, 429, 428,
	297, 455, 461, 462, 551, 0, 467, 632, 633, 634,
	476, 0, 0, 481, 482, 483, 485, 486, 487, 488,
	552, 569, 536, 506, 469, 560, 503, 507, 508, 572,
	0, 0, 0, 460, 354, 355, 0, 333, 281, 282,
	627, 319, 384, 574, 607, 608, 499, 0, 561, 500,
	509, 311, 533, 545, 544, 380, 459, 0, 556, 559,
	489, 626, 0, 553, 568, 630, 567, 623, 390, 0,
	409, 565, 512, 0, 557, 531, 0, 558, 527, 562,
	0, 501, 0, 416, 441, 453, 470, 473, 502, 587,
	588, 589, 286, 472, 591, 592, 593, 594, 595, 596,
	597, 590, 444, 534, 511, 537, 452, 514, 513, 0,
	0, 548, 468, 549, 550, 374, 375, 376, 377, 337,
	575, 304, 471, 399, 0, 535, 0, 0, 0, 0,
	0, 0, 0, 0, 540, 541, 538, 635, 0, 598,
	599, 0, 0, 465, 466, 332, 339, 484, 341, 303,
	389, 334, 450, 348, 0, 477, 542, 478, 601, 604,
	602, 603, 381, 344, 345, 413, 349, 359, 402, 449,
	387, 407, 301, 440, 414, 363, 528, 555, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 583, 582, 581, 580, 579, 578,
	577, 576, 0, 0, 525, 427, 313, 275, 309, 310,
	317, 624, 621, 431, 625, 0, 283, 505, 357, 0,
	398, 331, 570, 571, 0, 0, 231, 232, 233, 234,
	235, 236, 237, 238, 276, 239, 240, 241, 242, 243,
	244, 245, 248, 249, 250, 251, 252, 253, 254, 255,
	573, 246, 247, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 0, 0, 0,
	277, 278, 279, 280, 0, 0, 271, 272, 273, 274,
	0, 0, 0, 456, 457, 458, 480, 0, 442, 504,
	622, 0, 0, 0, 0, 0, 0, 0, 554, 566,
	600, 0, 610, 611, 613, 615, 614, 617, 419, 0,
	0, 628, 495, 496, 629, 606, 386, 0, 510, 543,
	532, 616, 498, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 547, 529, 539,
	530, 515, 516, 517, 524, 336, 518, 519, 520, 490,
	521, 491, 522, 523, 0, 546, 497, 415, 370, 564,
	563, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	0, 0, 0, 0, 0, 0, 299, 219, 492, 612,
	494, 493, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 421, 438, 300, 411, 451, 305,
	418, 295, 385, 408, 0, 0, 291, 436, 417, 367,
	346, 347, 290, 0, 403, 324, 338, 321, 383, 0,
	435, 463, 320, 454, 0, 446, 293, 0, 445, 382,
	432, 437, 368, 362, 0, 292, 434, 366, 361, 350,
	328, 479, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 474, 475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 605, 0, 652, 609, 0, 448, 0, 0, 0,
	0, 0, 0, 420, 0, 0, 353, 0, 0, 0,
	464, 0, 406, 388, 631, 0, 0, 404, 358, 433,
	396, 439, 422, 447, 400, 397, 284, 423, 323, 369,
	296, 298, 318, 325, 327, 329, 330, 378, 379, 391,
	410, 424, 425, 426, 322, 306, 405, 307, 340, 308,
	285, 314, 312, 315, 412, 316, 287, 392, 430, 0,
	335, 401, 365, 288, 364, 393, 429, 428, 297, 455,
	461, 462, 551, 0, 467, 632, 633, 634, 476, 0,
	0, 481, 482, 483, 485, 486, 487, 488, 552, 569,
	536, 506, 469, 560, 503, 507, 508, 572, 0, 0,
	0, 460, 354, 355, 0, 333, 281, 282, 627, 319,
	384, 574, 607, 608, 499, 0, 561, 500, 509, 311,
	533, 545, 544, 380, 459, 0, 556, 559, 489, 626,
	0, 553, 568, 630, 567, 623, 390, 0, 409, 565,
	512, 0, 557, 531, 0, 558, 527, 562, 0, 501,
	0, 416, 441, 453, 470, 473, 502, 587, 588, 589,
	286, 472, 591, 592, 593, 594, 595, 596, 597, 590,
	444, 534, 511, 537, 452, 514, 513, 0, 0, 548,
	468, 549, 550, 374, 375, 376, 377, 337, 575, 304,
	471, 399, 0, 535, 0, 0, 0, 0, 0, 0,
	0, 0, 540, 541, 538, 635, 0, 598, 599, 0,
	0, 465, 466, 332, 339, 484, 341, 303, 389, 334,
	450, 348, 0, 477, 542, 478, 601, 604, 602, 603,
	381, 344, 345, 413, 349, 359, 402, 449, 387, 407,
	301, 440, 414, 363, 528, 555, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 583, 582, 581, 580, 579, 578, 577, 576,
	0, 0, 525, 427, 313, 275, 309, 310, 317, 624,
	621, 431, 625, 0, 283, 505, 357, 0, 398, 331,
	570, 571, 0, 0, 231, 232, 233, 234, 235, 236,
	237, 238, 276, 239, 240, 241, 242, 243, 244, 245,
	248, 249, 250, 251, 252, 253, 254, 255, 573, 246,
	247, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 0, 0, 0, 277, 278,
	279, 280, 0, 0, 271, 272, 273, 274, 0, 0,
	0, 456, 457, 458, 480, 0, 442, 504, 622, 0,
	0, 0, 0, 0, 0, 0, 554, 566, 600, 0,
	610, 611, 613, 615, 614, 617, 419, 0, 0, 628,
	495, 496, 629, 606, 386, 0, 510, 543, 532, 616,
	498, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 326, 0, 0, 356, 547, 529, 539, 530, 515,
	516, 517, 524, 336, 518, 519, 520, 490, 521, 491,
	522, 523, 0, 546, 497, 415, 370, 564, 563, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 0, 0,
	0, 0, 0, 0, 299, 219, 492, 612, 494, 493,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 302,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 289, 421, 438, 300, 411, 451, 305, 418, 295,
	385, 408, 0, 0, 291, 436, 417, 367, 346, 347,
	290, 0, 403, 324, 338, 321, 383, 0, 435, 463,
	320, 454, 0, 446, 293, 0, 445, 382, 432, 437,
	368, 362, 0, 292, 434, 366, 361, 350, 328, 479,
	351, 352, 342, 394, 360, 395, 343, 372, 371, 373,
	0, 0, 0, 0, 0, 474, 475, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 605,
	0, 0, 609, 0, 448, 0, 0, 0, 0, 0,
	0, 420, 0, 0, 353, 0, 0, 0, 464, 0,
	406, 388, 631, 0, 0, 404, 358, 433, 396, 439,
	422, 447, 400, 397, 284, 423, 323, 369, 296, 298,
	318, 325, 327, 329, 330, 378, 379, 391, 410, 424,
	425, 426, 322, 306, 405, 307, 340, 308, 285, 314,
	312, 315, 412, 316, 287, 392, 430, 0, 335, 401,
	365, 288, 364, 393, 429, 428, 297, 455, 461, 462,
	551, 0, 467, 632, 633, 634, 476, 0, 0, 481,
	482, 483, 485, 486, 487, 488, 552, 569, 536, 506,
	469, 560, 503, 507, 508, 572, 0, 0, 0, 460,
	354, 355, 0, 333, 281, 282, 627, 319, 384, 574,
	607, 608, 499, 0, 561, 500, 509, 311, 533, 545,
	544, 380, 459, 0, 556, 559, 489, 626, 0, 553,
	568, 630, 567, 623, 390, 0, 409, 565, 512, 0,
	557, 531, 0, 558, 527, 562, 0, 501, 0, 416,
	441, 453, 470, 473, 502, 587, 588, 589, 286, 472,
	591, 592, 593, 594, 595, 596, 597, 590, 444, 534,
	511, 537, 452, 514, 513, 0, 0, 548, 468, 549,
	550, 374, 375, 376, 377, 337, 575, 304, 471, 399,
	0, 535, 0, 0, 0, 0, 0, 0, 0, 0,
	540, 541, 538, 635, 0, 598, 599, 0, 0, 465,
	466, 332, 339, 484, 341, 303, 389, 334, 450, 348,
	0, 477, 542, 478, 601, 604, 602, 603, 381, 344,
	345, 413, 349, 359, 402, 449, 387, 407, 301, 440,
	414, 363, 528, 555, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 270, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	583, 582, 581, 580, 579, 578, 577, 576, 943, 0,
	525, 427, 313, 275, 309, 310, 317, 624, 621, 431,
	625, 0, 283, 505, 357, 0, 398, 331, 570, 571,
	0, 0, 231, 232, 233, 234, 235, 236, 237, 238,
	276, 239, 240, 241, 242, 243, 244, 245, 248, 249,
	250, 251, 252, 253, 254, 255, 573, 246, 247, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 0, 0, 0, 277, 278, 279, 280,
	0, 0, 271, 272, 273, 274, 0, 0, 0, 456,
	457, 458, 480, 0, 442, 504, 622, 0, 0, 0,
	0, 0, 0, 0, 554, 566, 600, 0, 610, 611,
	613, 615, 614, 617, 419, 0, 0, 628, 495, 496,
	629, 606, 386, 0, 510, 543, 532, 616, 498, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 0, 356, 547, 529, 539, 530, 515, 516, 517,
	524, 336, 518, 519, 520, 490, 521, 491, 522, 523,
	0, 546, 497, 415, 370, 564, 563, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 0, 0, 0, 0,
	0, 0, 299, 219, 492, 612, 494, 493, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 302, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 289,
	421, 438, 300, 411, 451, 305, 418, 295, 385, 408,
	0, 0, 291, 436, 417, 367, 346, 347, 290, 0,
	403, 324, 338, 321, 383, 0, 435, 463, 320, 454,
	0, 446, 293, 0, 445, 382, 432, 437, 368, 362,
	0, 292, 434, 366, 361, 350, 328, 479, 351, 352,
	342, 394, 360, 395, 343, 372, 371, 373, 0, 0,
	0, 0, 0, 474, 475, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 605, 0, 0,
	609, 0, 448, 0, 0, 0, 0, 0, 0, 420,
	0, 0, 353, 0, 0, 0, 464, 0, 406, 388,
	631, 0, 0, 404, 358, 433, 396, 439, 422, 447,
	400, 397, 284, 423, 323, 369, 296, 298, 318, 325,
	327, 329, 330, 378, 379, 391, 410, 424, 425, 426,
	322, 306, 405, 307, 340, 308, 285, 314, 312, 315,
	412, 316, 287, 392, 430, 0, 335, 401, 365, 288,
	364, 393, 429, 428, 297, 455, 461, 462, 551, 0,
	467, 632, 633, 634, 476, 0, 0, 481, 482, 483,
	485, 486, 487, 488, 552, 569, 536, 506, 469, 560,
	503, 507, 508, 572, 0, 0, 0, 460, 354, 355,
	0, 333, 281, 282, 627, 319, 384, 574, 607, 608,
	499, 0, 561, 500, 509, 311, 533, 545, 544, 380,
	459, 0, 556, 559, 489, 626, 0, 553, 568, 630,
	567, 623, 390, 0, 409, 565, 512, 0, 557, 531,
	0, 558, 527, 562, 0, 501, 0, 416, 441, 453,
	470, 473, 502, 587, 588, 589, 286, 472, 591, 592,
	593, 594, 595, 596, 597, 590, 444, 534, 511, 537,
	452, 514, 513, 0, 0, 548, 468, 549, 550, 374,
	375, 376, 377, 337, 575, 304, 471, 399, 0, 535,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 541,
	538, 635, 0, 598, 599, 0, 0, 465, 466, 332,
	339, 484, 341, 303, 389, 334, 450, 348, 0, 477,
	542, 478, 601, 604, 602, 603, 381, 344, 345, 413,
	349, 359, 402, 449, 387, 407, 301, 440, 414, 363,
	528, 555, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 270, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 583, 582,
	581, 580, 579, 578, 577, 576, 0, 0, 525, 427,
	313, 275, 309, 310, 317, 624, 621, 431, 625, 0,
	283, 505, 357, 0, 398, 331, 570, 571, 0, 0,
	231, 232, 233, 234, 235, 236, 237, 238, 276, 239,
	240, 241, 242, 243, 244, 245, 248, 249, 250, 251,
	252, 253, 254, 255, 573, 246, 247, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 0, 0, 0, 277, 278, 279, 280, 0, 0,
	271, 272, 273, 274, 0, 0, 0, 456, 457, 458,
	480, 0, 442, 504, 622, 0, 0, 0, 0, 0,
	0, 0, 554, 566, 600, 0, 610, 611, 613, 615,
	614, 617, 419, 0, 0, 628, 495, 496, 629, 606,
	386, 0, 510, 543, 532, 616, 498, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 547, 529, 539, 530, 515, 516, 517, 524, 336,
	518, 519, 520, 490, 521, 491, 522, 523, 0, 546,
	497, 415, 370, 564, 563, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 0, 0, 0, 0, 0, 0,
	299, 219, 492, 612, 494, 493, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 302, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 289, 421, 1473,
	300, 411, 451, 305, 418, 295, 385, 408, 0, 0,
	291, 436, 417, 367, 346, 347, 290, 0, 403, 324,
	338, 321, 383, 0, 435, 463, 320, 454, 0, 446,
	293, 0, 445, 382, 432, 437, 368, 362, 0, 292,
	434, 366, 361, 350, 328, 479, 351, 352, 342, 394,
	360, 395, 343, 372, 371, 373, 0, 0, 0, 0,
	0, 474, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 0, 0, 609, 0,
	448, 0, 0, 0, 0, 0, 0, 420, 0, 0,
	353, 0, 0, 0, 464, 0, 406, 388, 631, 0,
	0, 404, 358, 433, 396, 439, 422, 447, 400, 397,
	284, 423, 323, 369, 296, 298, 318, 325, 327, 329,
	330, 378, 379, 391, 410, 424, 425, 426, 322, 306,
	405, 307, 340, 308, 285, 314, 312, 315, 412, 316,
	287, 392, 430, 0, 335, 401, 365, 288, 364, 393,
	429, 428, 297, 455, 461, 462, 551, 0, 467, 632,
	633, 634, 476, 0, 0, 481, 482, 483, 485, 486,
	487, 488, 552, 569, 536, 506, 469, 560, 503, 507,
	508, 572, 0, 0, 0, 460, 354, 355, 0, 333,
	281, 282, 627, 319, 384, 574, 607, 608, 499, 0,
	561, 500, 509, 311, 533, 545, 544, 380, 459, 0,
	556, 559, 489, 626, 0, 553, 568, 630, 567, 623,
	390, 0, 409, 565, 512, 0, 557, 531, 0, 558,
	527, 562, 0, 501, 0, 416, 441, 453, 470, 473,
	502, 587, 588, 589, 286, 472, 591, 592, 593, 594,
	595, 596, 597, 590, 444, 534, 511, 537, 452, 514,
	513, 0, 0, 548, 468, 549, 550, 374, 375, 376,
	377, 337, 575, 304, 471, 399, 0, 535, 0, 0,
	0, 0, 0, 0, 0, 0, 540, 541, 538, 635,
	0, 598, 599, 0, 0, 465, 466, 332, 339, 484,
	341, 303, 389, 334, 450, 348, 0, 477, 542, 478,
	601, 604, 602, 603, 381, 344, 345, 413, 349, 359,
	402, 449, 387, 407, 301, 440, 414, 363, 528, 555,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 270, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 583, 582, 581, 580,
	579, 578, 577, 576, 0, 0, 525, 427, 313, 275,
	309, 310, 317, 624, 621, 431, 625, 0, 283, 505,
	357, 0, 398, 331, 570, 571, 0, 0, 231, 232,
	233, 234, 235, 236, 237, 238, 276, 239, 240, 241,
	242, 243, 244, 245, 248, 249, 250, 251, 252, 253,
	254, 255, 573, 246, 247, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 0,
	0, 0, 277, 278, 279, 280, 0, 0, 271, 272,
	273, 274, 0, 0, 0, 456, 457, 458, 480, 0,
	442, 504, 622, 0, 0, 0, 0, 0, 0, 0,
	554, 566, 600, 0, 610, 611, 613, 615, 614, 617,
	419, 0, 0, 628, 495, 496, 629, 606, 386, 0,
	510, 543, 532, 616, 498, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 326, 0, 0, 356, 547,
	529, 539, 530, 515, 516, 517, 524, 336, 518, 519,
	520, 490, 521, 491, 522, 523, 0, 546, 497, 415,
	370, 564, 563, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 0, 0, 0, 0, 0, 0, 299, 219,
	492, 612, 494, 493, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 302, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 289, 421, 1471, 300, 411,
	451, 305, 418, 295, 385, 408, 0, 0, 291, 436,
	417, 367, 346, 347, 290, 0, 403, 324, 338, 321,
	383, 0, 435, 463, 320, 454, 0, 446, 293, 0,
	445, 382, 432, 437, 368, 362, 0, 292, 434, 366,
	361, 350, 328, 479, 351, 352, 342, 394, 360, 395,
	343, 372, 371, 373, 0, 0, 0, 0, 0, 474,
	475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 605, 0, 0, 609, 0, 448, 0,
	0, 0, 0, 0, 0, 420, 0, 0, 353, 0,
	0, 0, 464, 0, 406, 388, 631, 0, 0, 404,
	358, 433, 396, 439, 422, 447, 400, 397, 284, 423,
	323, 369, 296, 298, 318, 325, 327, 329, 330, 378,
	379, 391, 410, 424, 425, 426, 322, 306, 405, 307,
	340, 308, 285, 314, 312, 315, 412, 316, 287, 392,
	430, 0, 335, 401, 365, 288, 364, 393, 429, 428,
	297, 455, 461, 462, 551, 0, 467, 632, 633, 634,
	476, 0, 0, 481, 482, 483, 485, 486, 487, 488,
	552, 569, 536, 506, 469, 560, 503, 507, 508, 572,
	0, 0, 0, 460, 354, 355, 0, 333, 281, 282,
	627, 319, 384, 574, 607, 608, 499, 0, 561, 500,
	509, 311, 533, 545, 544, 380, 459, 0, 556, 559,
	489, 626, 0, 553, 568, 630, 567, 623, 390, 0,
	409, 565, 512, 0, 557, 531, 0, 558, 527, 562,
	0, 501, 0, 416, 441, 453, 470, 473, 502, 587,
	588, 589, 286, 472, 591, 592, 593, 594, 595, 596,
	597, 590, 444, 534, 511, 537, 452, 514, 513, 0,
	0, 548, 468, 549, 550, 374, 375, 376, 377, 337,
	575, 304, 471, 399, 0, 535, 0, 0, 0, 0,
	0, 0, 0, 0, 540, 541, 538, 635, 0, 598,
	599, 0, 0, 465, 466, 332, 339, 484, 341, 303,
	389, 334, 450, 348, 0, 477, 542, 478, 601, 604,
	602, 603, 381, 344, 345, 413, 349, 359, 402, 449,
	387, 407, 301, 440, 414, 363, 528, 555, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 583, 582, 581, 580, 579, 578,
	577, 576, 0, 0, 525, 427, 313, 275, 309, 310,
	317, 624, 621, 431, 625, 0, 283, 505, 357, 0,
	398, 331, 570, 571, 0, 0, 231, 232, 233, 234,
	235, 236, 237, 238, 276, 239, 240, 241, 242, 243,
	244, 245, 248, 249, 250, 251, 252, 253, 254, 255,
	573, 246, 247, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 0, 0, 0,
	277, 278, 279, 280, 0, 0, 271, 272, 273, 274,
	0, 0, 0, 456, 457, 458, 480, 0, 442, 504,
	622, 0, 0, 0, 0, 0, 0, 0, 554, 566,
	600, 0, 610, 611, 613, 615, 614, 617, 419, 0,
	0, 628, 495, 496, 629, 606, 386, 0, 510, 543,
	532, 616, 498, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 547, 529, 539,
	530, 515, 516, 517, 524, 336, 518, 519, 520, 490,
	521, 491, 522, 523, 0, 546, 497, 415, 370, 564,
	563, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	0, 0, 0, 0, 0, 0, 299, 219, 492, 612,
	494, 493, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 421, 438, 300, 411, 451, 305,
	418, 295, 385, 408, 0, 0, 291, 436, 417, 367,
	346, 347, 290, 0, 403, 324, 338, 321, 383, 0,
	435, 463, 320, 454, 0, 446, 293, 0, 445, 382,
	432, 437, 368, 362, 0, 292, 434, 366, 361, 350,
	328, 479, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 474, 475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 605, 0, 0, 609, 0, 448, 0, 0, 0,
	0, 0, 0, 420, 0, 0, 353, 0, 0, 0,
	464, 0, 406, 388, 631, 0, 0, 404, 358, 433,
	396, 439, 422, 447, 400, 397, 284, 423, 323, 369,
	296, 298, 719, 325, 327, 329, 330, 378, 379, 391,
	410, 424, 425, 426, 322, 306, 405, 307, 340, 308,
	285, 314, 312, 315, 412, 316, 287, 392, 430, 0,
	335, 401, 365, 288, 364, 393, 429, 428, 297, 455,
	461, 462, 551, 0, 467, 632, 633, 634, 476, 0,
	0, 481, 482, 483, 485, 486, 487, 488, 552, 569,
	536, 506, 469, 560, 503, 507, 508, 572, 0, 0,
	0, 460, 354, 355, 0, 333, 281, 282, 627, 319,
	384, 574, 607, 608, 499, 0, 561, 500, 509, 311,
	533, 545, 544, 380, 459, 0, 556, 559, 489, 626,
	0, 553, 568, 630, 567, 623, 390, 0, 409, 565,
	512, 0, 557, 531, 0, 558, 527, 562, 0, 501,
	0, 416, 441, 453, 470, 473, 502, 587, 588, 589,
	286, 472, 591, 592, 593, 594, 595, 596, 597, 590,
	444, 534, 511, 537, 452, 514, 513, 0, 0, 548,
	468, 549, 550, 374, 375, 376, 377, 337, 575, 304,
	471, 399, 0, 535, 0, 0, 0, 0, 0, 0,
	0, 0, 540, 541, 538, 635, 0, 598, 599, 0,
	0, 465, 466, 332, 339, 484, 341, 303, 389, 334,
	450, 348, 0, 477, 542, 478, 601, 604, 602, 603,
	381, 344, 345, 413, 349, 359, 402, 449, 387, 407,
	301, 440, 414, 363, 528, 555, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 583, 582, 581, 580, 579, 578, 577, 576,
	0, 0, 525, 427, 313, 275, 309, 310, 317, 624,
	621, 431, 625, 0, 283, 505, 357, 0, 398, 331,
	570, 571, 0, 0, 231, 232, 233, 234, 235, 236,
	237, 238, 276, 239, 240, 241, 242, 243, 244, 245,
	248, 249, 250, 251, 252, 253, 254, 255, 573, 246,
	247, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 0, 0, 0, 277, 278,
	279, 280, 0, 0, 271, 272, 273, 274, 0, 0,
	0, 456, 457, 458, 480, 0, 442, 504, 622, 0,
	0, 0, 0, 0, 0, 0, 554, 566, 600, 0,
	610, 611, 613, 615, 614, 617, 419, 0, 0, 628,
	495, 496, 629, 606, 386, 0, 510, 543, 532, 616,
	498, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 326, 0, 0, 356, 547, 529, 539, 530, 515,
	516, 517, 524, 336, 518, 519, 520, 490, 521, 491,
	522, 523, 0, 546, 497, 415, 370, 564, 563, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 0, 0,
	0, 0, 0, 0, 299, 219, 492, 612, 494, 493,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 302,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 289, 421, 438, 300, 411, 451, 305, 418, 295,
	385, 408, 0, 0, 291, 436, 417, 367, 346, 347,
	290, 0, 403, 324, 338, 321, 383, 0, 435, 463,
	320, 454, 0, 446, 293, 0, 445, 382, 432, 437,
	368, 362, 0, 292, 434, 366, 361, 350, 328, 479,
	351, 352, 342, 394, 360, 395, 343, 372, 371, 373,
	0, 0, 0, 0, 0, 474, 475, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 605,
	0, 0, 609, 0, 448, 0, 0, 0, 0, 0,
	0, 420, 0, 0, 353, 0, 0, 0, 464, 0,
	406, 388, 631, 0, 0, 404, 358, 433, 396, 439,
	422, 447, 676, 397, 284, 423, 323, 369, 296, 298,
	318, 325, 327, 329, 330, 378, 379, 391, 410, 424,
	425, 426, 322, 306, 405, 307, 340, 308, 285, 314,
	312, 315, 412, 316, 287, 392, 430, 0, 335, 401,
	365, 288, 364, 393, 429, 428, 297, 455, 461, 462,
	551, 0, 467, 632, 633, 634, 476, 0, 0, 481,
	482, 483, 485, 486, 487, 488, 552, 569, 536, 506,
	469, 560, 503, 507, 508, 572, 0, 0, 0, 460,
	354, 355, 0, 333, 281, 282, 627, 319, 384, 574,
	607, 608, 499, 0, 561, 500, 509, 311, 533, 545,
	544, 380, 459, 0, 556, 559, 489, 626, 0, 553,
	568, 630, 567, 623, 390, 0, 409, 565, 512, 0,
	557, 531, 0, 558, 527, 562, 0, 501, 0, 416,
	441, 453, 470, 473, 502, 587, 588, 589, 286, 472,
	591, 592, 593, 594, 595, 596, 677, 590, 444, 534,
	511, 537, 452, 514, 513, 0, 0, 548, 468, 549,
	550, 374, 375, 376, 377, 337, 575, 304, 471, 399,
	0, 535, 0, 0, 0, 0, 0, 0, 0, 0,
	540, 541, 538, 635, 0, 598, 599, 0, 0, 465,
	466, 332, 339, 484, 341, 303, 389, 334, 450, 348,
	0, 477, 542, 478, 601, 604, 602, 603, 381, 344,
	345, 413, 349, 359, 402, 449, 387, 407, 301, 440,
	414, 363, 528, 555, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 270, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	583, 582, 581, 580, 579, 578, 577, 576, 0, 0,
	525, 427, 313, 275, 309, 310, 317, 624, 621, 431,
	625, 0, 283, 505, 357, 0, 398, 331, 570, 571,
	0, 0, 231, 232, 233, 234, 235, 236, 237, 238,
	276, 239, 240, 241, 242, 243, 244, 245, 248, 249,
	250, 251, 252, 253, 254, 255, 573, 246, 247, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 0, 0, 0, 277, 278, 279, 280,
	0, 0, 271, 272, 273, 274, 0, 0, 0, 456,
	457, 458, 480, 0, 442, 504, 622, 0, 0, 0,
	0, 0, 0, 0, 554, 566, 600, 0, 610, 611,
	613, 615, 614, 617, 419, 0, 0, 628, 495, 496,
	629, 606, 698, 697, 704, 694, 0, 0, 0, 0,
	0, 0, 1966, 0, 701, 702, 0, 703, 707, 196,
	0, 688, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 712, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3520, 0, 0, 0, 0, 0, 1969, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1966, 0, 0, 0, 716, 0, 0, 718, 698,
	697, 704, 694, 717, 0, 0, 0, 0, 0, 192,
	0, 701, 702, 0, 703, 707, 0, 0, 688, 1943,
	0, 0, 0, 0, 0, 0, 1969, 0, 712, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3688, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1943, 0,
	0, 0, 0, 0, 0, 0, 0, 1959, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 689, 691, 690, 0, 0, 1959, 0, 0, 0,
	0, 696, 0, 0, 0, 1966, 0, 0, 0, 0,
	0, 0, 0, 700, 0, 0, 0, 0, 1947, 0,
	715, 0, 0, 0, 0, 0, 0, 693, 0, 1953,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1969, 0, 0, 0, 0, 0, 0, 0, 0, 1941,
	1975, 0, 0, 1942, 1944, 1946, 0, 1948, 1949, 1950,
	1954, 1955, 1956, 1958, 1961, 1962, 1963, 0, 689, 691,
	690, 0, 0, 0, 1951, 1960, 1952, 1947, 696, 0,
	1966, 0, 0, 0, 0, 0, 0, 0, 1953, 0,
	700, 0, 1943, 0, 0, 0, 0, 715, 0, 0,
	0, 0, 0, 0, 693, 0, 0, 0, 1941, 1975,
	1967, 0, 1942, 1944, 1946, 1969, 1948, 1949, 1950, 1954,
	1955, 1956, 1958, 1961, 1962, 1963, 0, 0, 0, 0,
	0, 0, 0, 1951, 1960, 1952, 0, 0, 0, 695,
	699, 705, 0, 706, 708, 0, 0, 709, 710, 711,
	0, 0, 713, 714, 0, 1964, 3659, 0, 0, 0,
	1959, 0, 0, 0, 0, 0, 0, 1943, 0, 1967,
	0, 0, 1940, 0, 0, 0, 0, 0, 0, 1939,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1957, 0, 0, 0, 0, 0, 0,
	0, 0, 1945, 0, 1964, 0, 695, 699, 705, 0,
	706, 708, 0, 0, 709, 710, 711, 0, 0, 713,
	714, 1940, 0, 0, 0, 1959, 0, 0, 1939, 0,
	0, 1947, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1953, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1957, 0, 0, 0, 0, 0, 0, 0,
	0, 1945, 1941, 1975, 0, 0, 1942, 1944, 1946, 0,
	1948, 1949, 1950, 1954, 1955, 1956, 1958, 1961, 1962, 1963,
	0, 0, 0, 0, 0, 0, 0, 1951, 1960, 1952,
	0, 0, 0, 0, 0, 0, 0, 0, 692, 0,
	0, 0, 0, 0, 0, 0, 1947, 0, 0, 0,
	3524, 0, 0, 0, 0, 0, 0, 1953, 0, 0,
	0, 0, 0, 1967, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1941, 1975, 0,
	0, 1942, 1944, 1946, 0, 1948, 1949, 1950, 1954, 1955,
	1956, 1958, 1961, 1962, 1963, 0, 0, 0, 0, 0,
	0, 0, 1951, 1960, 1952, 0, 0, 0, 1964, 3528,
	0, 0, 0, 0, 0, 692, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1940, 0, 0, 0, 0,
	0, 0, 1939, 0, 0, 0, 0, 0, 1967, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1957, 0, 0, 0,
	0, 0, 0, 0, 0, 1945, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1964, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1940, 0, 0, 0, 0, 0, 0, 1939, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1957, 0, 0, 0, 0, 0, 0, 0, 0,
	1945, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3528, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3528,
}

var yyPact = [...]int{
	449, -1000, -1000, -1000, -296, 13935, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 47329, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 412, 47329,
	-291, 29407, 45475, -1000, -1000, 2630, -1000, 46093, 15802, 47329,
	519, 511, 47329, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 903, -1000, 49801,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 834, 4805,
	49183, 10825, -206, -1000, 1617, -21, 2513, 500, -183, -184,
	1067, 1088, 1190, 1190, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 247, 980, 46711,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3818, 303, 902, 980, 20752, 124,
	116, 1617, 448, -92, 206, -1000, 1303, 3881, 222, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	10825, 10825, 13935, -344, 13935, 10825, 47329, 47329, -1000, -1000,
	-1000, -1000, -291, 46093, 834, 4805, 10825, 2513, 500, -183,
	-184, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -92, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 116, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 4413, -1000,
	1619, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2281, 2976, 1618, 2512,
	781, 45475, 47329, -1000, 163, 781, -1000, -1000, -1000, 1617,
	3456, -1000, 47329, 47329, 204, 1859, -1000, 575, 439, 409,
	341, 1615, -1000, -1000, -1000, -1000, -1000, -1000, 656, 3360,
	-1000, 47329, 47329, 2996, 47329, -1000, 2226, 700, -1000, 50429,
	3196, 1458, 944, 3012, -1000, -1000, 2973, -1000, 351, 724,
	280, 772, 408, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	344, -1000, 3268, -1000, -1000, 336, -1000, -1000, 331, -1000,
	-1000, -1000, 109, -1000, -1000, -1000, -1000, -1000, -1000, 3,
	-1000, -1000, 1165, 2113, 10825, 1962, -1000, 3958, 1639, -1000,
	-1000, -1000, 6478, 12685, 12685, 12685, 12685, 47329, -1000, -1000,
	2802, 10825, 2972, 2966, 2965, 2963, -1000, -1000, -1000, -1000,
	-1000, -1000, 1613, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2014, -1000, -1000, -1000, 13305, -1000, 2961, 2960,
	2959, 2951, 2950, 2929, 2924, 2923, 2921, 2920, 2919, 2910,
	2906, 2901, 2695, 15174, 2899, 2511, 2510, 2898, 2897, 2896,
	2509, 2894, 2891, 2890, 2695, 2695, 2888, 2887, 2886, 2880,
	2879, 2878, 2875, 2874, 2871, 2866, 2865, 2860, 2859, 2857,
	2856, 2855, 2854, 2853, 2852, 2848, 2847, 2846, 2844, 2843,
	2842, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1513, -1000, 2841, 3348, 2762, -1000,
	3252, 3248, 3243, 3218, -252, 2837, 2199, -1000, -1000, 123,
	3359, 47329, -273, 47329, 2508, -102, 2503, -103, -1000, -65,
	-1000, -1000, 1052, -1000, 1030, -1000, 824, 824, 824, 47329,
	47329, 253, 912, 824, 824, 824, 824, 824, 862, 824,
	3289, 900, 899, 898, 895, 824, -35, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1858, 1855, 3087, 1012, -1000, -1000,
	-1000, -1000, 1534, 47329, -1000, 2766, 2501, 1700, 1700, 3338,
	3338, 3282, 744, 730, 722, 1700, 581, -1000, 1819, 1819,
	1819, 1819, 1700, 534, 711, 3297, 3297, 143, 1819, 74,
	1700, 1700, 74, 1700, 1700, -1000, 1848, 318, -259, -1000,
	-1000, -1000, -1000, 1819, 1819, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 3260, 3257, 834, 834, 47329, 834, 198, 47329,
	834, 834, 834, 47329, 846, 58, 48565, 47947, 2277, 2226,
	692, 681, 1537, 1821, -1000, 1714, 47329, 47329, 1714, 1714,
	23845, 23227, -1000, 47329, -1000, 3348, 2762, 2689, 1651, 2686,
	2762, -104, 2500, 834, 834, 834, 834, 834, 302, 834,
	834, 834, 834, 834, 47329, 47329, 44857, 834, 834, 834,
	834, 8958, 8958, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 13935, 2075, 2065, 219, 2, -282, 278, -1000,
	-1000, 47329, 3162, 300, -1000, -1000, -1000, 2708, -1000, 2751,
	2751, 2751, 2751, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2751, 2751, 2764, 2815, -1000, -1000, 2750,
	2750, 2750, 2708, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2752, 2752,
	2759, 2759, 2752, 47329, -117, -1000, -1000, 10825, 47329, 3185,
	399, 2812, 781, -1000, -1000, 47329, 194, 407, 3348, 3182,
	3297, 3330, -1000, -1000, 1612, 2198, 2498, -1000, 341, -1000,
	486, 341, 1663, -1000, 1066, -1000, -1000, -1000, -1000, -1000,
	47329, 3, 490, -1000, -1000, 2470, 2810, -1000, 642, 1201,
	1557, -1000, 293, 50506, 38059, 2226, 38059, 47329, -1000, -1000,
	-1000, -1000, -1000, -1000, 98, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 323,
	-1000, 10825, 10825, 10825, 10825, 10825, -1000, 731, 12065, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 12685, 12685, 12685, 12685,
	12685, 12685, 12685, 12685, 12685, 12685, 12685, 12685, 2801, 1756,
	12685, 12685, 12685, 12685, 26317, 1651, 3085, 1535, 314, 1639,
	1639, 1639, 1639, 10825, -1000, 1891, 2113, 10825, 10825, 10825,
	10825, 47329, -1000, -1000, 3877, 10825, 10825, 4350, 10825, 3216,
	10825, 10825, 10825, 2685, 5237, 47329, 10825, -1000, 2683, 2678,
	-1000, -1000, 2029, 10825, -1000, -1000, 10825, -1000, -1000, 10825,
	12685, 10825, -1000, 10825, 10825, 10825, -1000, -1000, 2597, 3216,
	3216, 3216, 1793, 10825, 10825, 3216, 3216, 3216, 1786, 3216,
	3216, 3216, 3216, 3216, 3216, 3216, 3216, 3216, 3216, 2671,
	2668, 2667, 10205, 3297, -206, -1000, 8338, 3182, 3297, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -255,
	2806, 47329, 2493, 2491, -307, 187, 467, 47329, 1113, 400,
	2195, -105, 2194, 45, 1065, 1033, 1038, -1000, 2490, 1907,
	47329, 47329, 3211, -1000, 2805, 47329, 824, 824, 824, -1000,
	43003, 38059, 47329, 47329, 2226, 47329, 47329, 47329, 824, 824,
	824, 824, 47329, -1000, 3120, 38059, 3108, 846, -1000, 47329,
	1534, 3210, 47329, 400, 3338, 12685, 12685, -1000, -1000, 10825,
	-1000, 44239, 1819, 1700, 1700, -1000, -1000, 47329, -1000, -1000,
	-1000, 1819, 47329, 1819, 1819, 3338, 1819, -1000, -1000, -1000,
	1700, 1700, -1000, -1000, 10825, -1000, -1000, 1819, 1819, -1000,
	-1000, 3338, 47329, 84, 3338, 3338, 86, -1000, -1000, -1000,
	1700, 47329, 47329, 824, 47329, -1000, 47329, 47329, -1000, -1000,
	47329, 47329, 4265, 47329, 43003, 43621, 3256, -1000, 38059, 47329,
	47329, 1530, -1000, 876, 35587, -1000, 1452, -1000, 52, -1000,
	28, 58, 1714, 58, 1714, 874, -1000, 623, 705, 21991,
	552, 38059, 5857, -1000, -1000, 1714, 1714, 5857, 5857, 1656,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1515, -1000, 266,
	3297, -1000, -1000, -1000, -1000, -1000, 2191, 400, 47329, 43003,
	38059, 2226, 47329, 834, 47329, 47329, 47329, 47329, 47329, -1000,
	2804, 1610, -1000, 3194, 47329, 47329, 47329, 47329, 1427, -1000,
	-1000, 18892, 1601, 1427, -1000, 1904, -1000, 10825, 13935, -238,
	10825, 13935, 13935, 10825, 13935, -1000, 10825, 294, -1000, -1000,
	-1000, -1000, 2189, -1000, 2186, -1000, -1000, -1000, -1000, -1000,
	2488, 2488, -1000, 2185, -1000, -1000, -1000, -1000, 2183, -1000,
	-1000, 2182, -1000, -1000, -1000, -1000, -148, 2666, 1165, -1000,
	2471, 3010, -207, -1000, 20134, 47329, 47329, 399, -317, 1853,
	1828, 1827, -1000, -207, -1000, 19513, 47329, 3297, -1000, -212,
	3182, 10825, 47329, -1000, 3281, -1000, -1000, 341, -1000, 539,
	427, -1000, -1000, -1000, -1000, -1000, -1000, 1600, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 406, -95,
	-96, 1510, -1000, 47329, -1000, -1000, 293, 38059, 39913, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 264, -1000, -1000, 189,
	-1000, 867, 258, 1657, -1000, -1000, 213, 228, 216, 942,
	2113, -1000, 1919, 1919, 1921, -1000, 760, -1000, -1000, -1000,
	-1000, 2802, -1000, -1000, -1000, 2422, 3362, -1000, 1844, 1844,
	1627, 1627, 1627, 1627, 1627, 1933, 1933, -1000, -1000, -1000,
	6478, 2801, 12685, 12685, 12685, 12685, 907, 907, 4293, 4016,
	-1000, -1000, -1000, -1000, 10825, 195, 1900, -1000, 10825, 2306,
	1447, 2132, 1324, 1599, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2659, 2657, 2274, 3356, 2656, 10825,
	-1000, -1000, 1653, 1645, 1643, -1000, 2190, 9585, -1000, -1000,
	-1000, 2646, 1598, 2645, -1000, -1000, -1000, 2640, 1636, 1177,
	2636, 1779, 2633, 2627, 2625, 2621, 1509, 10825, 10825, 10825,
	10825, 2618, 1635, 1633, 10825, 10825, 10825, 10825, 2617, 10825,
	10825, 10825, 10825, 10825, 10825, 10825, 10825, 10825, 10825, 128,
	128, 128, 1506, 1505, -1000, -1000, 1624, -1000, 2113, -1000,
	-1000, 3182, -1000, 2800, 2176, 1498, -1000, -1000, -288, 2433,
	47329, 47329, 186, 47329, 2466, -276, 47329, -1000, -1000, 2463,
	-1000, 2461, -1000, -1000, -1000, 1058, 1016, 1024, 2460, 3193,
	3280, 860, 47329, 1266, 2797, 47329, 47329, 47329, 283, -1000,
	-1000, 1453, -1000, 258, -23, 531, 1173, 2995, 3354, -118,
	47329, 47329, 47329, 47329, 3209, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 42385, -1000, 2796, 1623, -1000, -1000, -1000,
	1639, 1639, 2113, 2993, 47329, 47329, 3338, 3338, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1819, 3338, 3338, 1357, 1700,
	1819, -1000, -1000, 1819, -317, -1000, 1819, -1000, -317, 1595,
	-317, 47329, -1000, -1000, -1000, 3205, 2766, 1459, -1000, -1000,
	-1000, 3329, 1917, 810, 810, 1025, 727, 3327, 17656, -1000,
	1727, 1314, 865, 3123, 346, -1000, 1727, -145, 791, 1727,
	1727, 1727, 1727, 1727, 1727, 1727, 661, 647, 1727, 1727,
	1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1086,
	1727, 1727, 1727, 1727, 1727, -1000, 1727, 2788, 504, -1000,
	-1000, -1000, -1000, -1000, -1000, 766, 590, 282, 3255, 392,
	-1000, 375, 1453, 3251, 405, 47329, 47329, 3550, 1300, -1000,
	-1000, -1000, -1000, 26935, 26935, 21373, 26935, -1000, 215, 58,
	82, -1000, -1000, 1452, 5857, 1452, 5857, 2174, -1000, -1000,
	863, -1000, -1000, 1173, -1000, 47329, 47329, -1000, -1000, 2787,
	1815, -1000, -1000, 15174, -1000, 5857, 5857, -1000, -1000, 28789,
	47329, -1000, -12, -1000, 31, 3182, -1000, -1000, 1170, -1000,
	-1000, 1451, 1173, 3008, 47329, 1170, 1170, 1170, -1000, -1000,
	16420, 47329, 47329, -1000, -1000, -1000, -1000, 3338, 8958, -1000,
	35587, -1000, -1000, 41767, -1000, 41149, 3338, 1886, -1000, 13935,
	2037, 207, -1000, 274, -293, 210, 1887, 209, 2113, -1000,
	-1000, 2615, 2613, 1621, -1000, 1620, 2611, 1602, 1596, 2172,
	-1000, 64, -1000, 3164, 1195, -1000, 2782, -1000, 1593, 3086,
	-1000, 1426, -1000, 1814, 1587, -1000, -1000, -1000, 10825, 40531,
	10825, 1195, 1585, 3082, 1426, 3182, 2458, -1000, 1421, -1000,
	2166, 1592, 200, -1000, -1000, -1000, 47329, 834, 2470, 1536,
	39913, 1327, -1000, 861, 1578, 1575, -1000, 38059, 313, 38059,
	-1000, 38059, -1000, -1000, 395, -1000, 47329, 3176, -1000, -1000,
	-1000, 2433, 1809, -316, 47329, -1000, -1000, -1000, -1000, -1000,
	1518, -1000, 907, 907, 4293, 1824, -1000, 12685, -1000, 12685,
	3078, -1000, 1885, -1000, 10825, 1994, 4822, 10825, 4822, 1614,
	25081, 47329, -1000, -1000, 10825, 10825, -1000, 3066, -1000, -1000,
	-1000, -1000, 10825, 10825, 2219, -1000, 47329, -1000, -1000, -1000,
	-1000, 25081, -1000, 12685, -1000, -1000, -1000, -1000, 10825, 1475,
	1475, 3040, 1517, 128, 128, 128, 3028, 3024, 2984, 1511,
	128, 2970, 2952, 2939, 2926, 2915, 2908, 2904, 2833, 2726,
	2688, -1000, 2780, -1000, -1000, 1996, 11445, 8338, -1000, -1000,
	305, 1418, 2171, 2456, 142, -1000, 1808, -1000, 2455, 47329,
	47329, 1104, -1000, 47329, 3350, -1000, 2452, -1000, -1000, -1000,
	1004, 2451, -1000, 494, 2013, 168, 312, 2609, 1411, -1000,
	-1000, 47329, -1000, -1000, -1000, 16420, 2766, 2778, 2766, 164,
	1727, 654, 38059, 650, -1000, 47329, 2078, 1807, 3007, 808,
	3145, 47329, 2776, 393, 2775, 2774, 3204, 495, 4915, 47329,
	1415, -1000, 1574, 3881, -1000, 47329, -1000, 2226, -1000, 1700,
	-1000, -1000, 3338, -1000, -1000, 10825, 10825, 3338, 1700, 1700,
	-1000, 1819, -1000, 47329, -1000, -317, 495, 4915, 3203, 4516,
	574, 2428, -1000, 47329, -1000, -1000, -1000, 881, -1000, 1002,
	824, 47329, 1945, 1002, 1944, 2771, -1000, -1000, 47329, 47329,
	47329, 47329, -1000, -1000, 47329, -1000, 47329, 47329, 47329, 47329,
	47329, 39295, -1000, 47329, 47329, -1000, 47329, 1940, 47329, 1938,
	3170, -1000, 1727, 1727, 986, -1000, -1000, 610, -1000, 39295,
	2169, 2161, 2153, 2150, 2450, 2448, 2447, 1727, 1727, 2148,
	2446, 38677, 2445, 1182, 2142, 2140, 2139, 2111, 2444, 1297,
	-1000, 2442, 2096, 2092, 2074, 47329, 2769, 2359, 501, -1000,
	-1000, 2013, 164, 1727, 388, 47329, 1789, 1782, 654, 524,
	-25, 22609, -1000, -1000, -1000, 47329, 35587, 35587, 35587, 35587,
	-1000, 3057, 3047, 3045, -1000, 3060, 3037, 3031, 47329, 35587,
	2766, -1000, 38677, -1000, -1000, -1000, 1651, 1464, 3240, 1083,
	10825, -1000, -1000, 36, 20, -1000, -1000, -1000, -1000, 38059,
	2441, 552, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3275,
	47329, 47329, 868, 2608, 1406, -1000, -1000, -1000, 4915, 2751,
	2751, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2751, 2751, 2764, -1000, -1000, 2750, 2750, 2750, 2708, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2752,
	2752, 2759, 2759, 2752, -1000, -1000, 3336, -1000, 1393, -1000,
	-1000, 1570, -1000, 3336, 1893, -303, 13935, 1790, 1718, -1000,
	10825, 13935, 10825, -240, 361, -242, -1000, -1000, -1000, 2440,
	-1000, -1000, -1000, 2116, -1000, 2115, -1000, 171, 193, 1934,
	-207, 8338, 428, 47329, -207, 47329, 8338, -1000, 47329, 179,
	-328, -341, 174, 411, -207, 3275, 64, 10825, 3115, -1000,
	-1000, 47329, 2107, -1000, -1000, -1000, 3344, 38059, 2226, 1686,
	37441, -1000, 328, -1000, 262, 618, 2439, -1000, 892, 139,
	2437, 2433, -1000, -1000, -1000, -1000, 12685, 1639, -1000, -1000,
	-1000, 2113, 10825, 2605, -1000, 1013, 1013, 2119, 2592, 2586,
	-1000, 2751, 2751, -1000, 2708, 2750, 2708, 1013, 1013, 2585,
	-1000, 2106, 2542, -1000, 2524, 2502, 10825, -1000, 2584, 4266,
	1442, -47, -176, 128, 128, -1000, -1000, -1000, -1000, 128,
	128, 128, 128, -1000, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 787, -82, -267, -83, -268, -1000,
	2579, 1377, -1000, -1000, -1000, -1000, -1000, 4350, 1376, 538,
	538, 2433, 2432, -1000, 858, 2429, 1048, 47329, 2427, -278,
	-1000, -1000, 2404, -1000, -1000, 47329, 2403, -1000, 589, 47329,
	47329, 2391, 2390, 1266, 4915, 2577, 3199, 17038, 3198, 2196,
	-1000, -1000, -1000, 28171, 596, -1000, -1000, -1000, 704, 319,
	2097, 592, -1000, 47329, 514, 3096, 1775, 2387, 47329, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 3145, -1000, 982, 447,
	34351, 14556, -1000, 398, 47329, -1000, 17038, 17038, 398, 463,
	1788, -1000, 781, 1184, 156, 35587, 47329, -1000, 34969, 2576,
	-1000, 1173, 3338, -1000, 2113, 2113, -317, 3338, 3338, 1700,
	-1000, -1000, 463, -1000, 398, -1000, 1098, 18274, 560, 510,
	502, -1000, 657, -1000, -1000, 774, 3140, 4915, -1000, 47329,
	-1000, 47329, -1000, 47329, 47329, 824, 10825, 3140, 47329, 856,
	-1000, 1123, 474, 426, 780, 780, 1355, -1000, 3189, -1000,
	-1000, 1330, -1000, -1000, -1000, -1000, 47329, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 25081, 25081, 3246, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2386, 2381, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 47329, 1457, -1000, 1773, 2094, 2380, 2196, 28171, 1771,
	1714, 2379, 2375, 596, 2078, 1753, 886, 47329, -1000, 1172,
	47329, 47329, -1000, 1315, -1000, 1752, 2992, 3006, 2992, -1000,
	-1000, -1000, -1000, -1000, 3043, -1000, 3025, -1000, -1000, 1315,
	-1000, -1000, -1000, -1000, -1000, 1083, -1000, 3274, 1002, 1002,
	1002, 2574, -1000, -1000, -1000, 1327, 2573, -1000, -1000, -1000,
	3368, -1000, -1000, -1000, -1000, -1000, -1000, 16420, 3142, 3333,
	3323, 36823, 3333, -1000, -303, 1884, -1000, 1929, 201, 1770,
	47329, -1000, -1000, -1000, 2567, 2566, -214, 197, 3321, 3319,
	1071, -1000, 2565, 1321, -207, -1000, -1000, 1195, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -207, -1000, 1195, -1000, 171,
	-1000, -1000, 3155, -1000, -1000, 2226, -1000, 248, -1000, -1000,
	-1000, -1000, -1000, -1000, 242, -1000, 47329, -1000, 1283, 138,
	-1000, 2113, -1000, -1000, -1000, -1000, -1000, 4822, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 10825,
	-1000, -1000, -1000, 2462, -1000, -1000, 10825, 2558, 2374, 2556,
	2368, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 3348, -1000, 3317,
	1456, 2550, 2548, 1436, 2545, 2543, -1000, 10825, 2540, 4350,
	993, 2366, 993, -1000, -1000, 404, 27553, 47329, 3343, -1000,
	47329, 2364, -1000, -1000, 2013, 588, 639, -1000, -1000, -1000,
	-1000, 914, 398, 2539, 1212, -1000, -1000, -1000, -1000, 398,
	-1000, 2363, 241, -1000, -1000, -1000, -1000, 2362, 2361, 2073,
	-1000, -1000, 2042, 1603, 269, -1000, -1000, -1000, -1000, -1000,
	-1000, 2036, 47329, 36205, 2112, 1751, -320, -1000, 2748, -1000,
	1727, 1727, 1727, 47329, 1423, -1000, 1727, 1727, 2538, -1000,
	-1000, 2535, 2533, -119, 773, 1729, 1717, -1000, 2064, 26935,
	35587, 34969, 1241, -1000, 1568, -1000, -1000, -1000, -1000, -1000,
	-1000, 3338, 773, -1000, 556, 2063, 12685, 2742, 12685, 2741,
	567, 2740, 1422, -1000, 47329, -1000, -1000, 47329, 3928, 2738,
	-1000, 2731, 2989, 516, 2730, 2729, 47329, 2320, -1000, 3140,
	47329, 777, 3129, -1000, -1000, -1000, 413, -1000, -1000, 598,
	-1000, 47329, -1000, 47329, -1000, 1632, -1000, 25081, -1000, -1000,
	1413, -1000, 2359, 2357, 4350, -1000, -1000, 241, 2355, 5857,
	-1000, -1000, -1000, 3096, 2353, 2036, 47329, -1000, 47329, 1172,
	1172, 3348, 47329, 8338, -1000, -1000, 10825, 2722, -1000, 10825,
	-1000, -1000, -1000, -1000, -1000, 2721, 3138, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2655, -1000, 10825, 10825, -1000, -1000,
	823, 13935, -243, 358, -1000, -1000, -1000, -216, 2352, -1000,
	-1000, 3316, 2349, 2237, 47329, -1000, -1000, 1195, 1195, -214,
	-1000, -1000, 1173, -1000, -1000, 1055, 643, -1000, 2527, 2287,
	-1000, 2232, 128, -1000, 128, -1000, 232, 10825, -1000, 2348,
	-1000, -1000, -1000, 2347, -1000, -1000, 2224, -1000, 2526, -1000,
	2336, -1000, -1000, 47329, -1000, -1000, 1045, 2335, -324, 2326,
	2013, 2013, 47329, 4915, -131, -119, 17038, -131, -1000, -1000,
	386, -1000, -1000, 397, -1000, -1000, 2022, 637, -1000, -1000,
	2323, 629, -1000, 1172, -1000, 1744, 1963, 2288, 32497, 25081,
	26317, 2322, -1000, -1000, 34351, 2655, 2655, 50446, 323, 50744,
	-1000, 2720, 1096, 1716, -1000, 2061, -1000, 2057, -1000, 3338,
	1241, 148, -1000, -1000, 1644, -1000, 1096, 2428, 3315, -1000,
	3980, 47329, 3658, 47329, 2715, 1742, 12685, -1000, 774, 3065,
	-1000, -1000, 3928, -1000, -1000, 1956, 12685, -1000, -1000, 2318,
	26317, 888, 1741, 1733, 948, 2713, -1000, 603, 3367, -1000,
	-1000, -1000, 962, 2712, -1000, 1927, 1926, -1000, 47329, -1000,
	32497, 32497, 755, 755, 32497, 32497, 2709, 780, -1000, -1000,
	12685, -1000, -1000, 1727, -1000, -1000, -1000, 1727, 1630, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2112, -1000, -1000, 1170,
	-1000, 3297, -1000, -1000, 2113, 47329, 2113, 33733, -1000, 3313,
	3312, -1000, 2113, 1165, -1000, -303, 47329, 47329, -226, 2054,
	-1000, 2316, 188, -1000, -1000, 1166, -216, -230, 86, 25081,
	1732, -1000, -1000, -1000, -1000, -1000, 2522, -1000, 591, -1000,
	-1000, -1000, 1165, 2507, 2325, -1000, -1000, -1000, -1000, 47329,
	-1000, 2267, -1000, 2314, 2313, 583, -114, -1000, -1000, 425,
	-1000, -1000, -1000, 626, 2221, -1000, -1000, 396, -1000, -1000,
	-1000, 2036, 2307, -1000, -1000, 132, -1000, 1731, 1409, -1000,
	2708, 10825, -1000, -1000, -1000, -1000, -1000, -1000, 765, -1000,
	398, 50669, -1000, 1314, 25699, -1000, 1055, 765, 504, 31261,
	655, 324, -1000, 2047, -1000, -1000, 3348, -1000, 620, -1000,
	564, -1000, 1405, -1000, 1395, 33115, 2046, 3457, -1000, 50505,
	897, -1000, -1000, 4293, -1000, -1000, -1000, -1000, -1000, -1000,
	2305, 2304, -1000, -1000, -1000, -1000, -1000, 2033, 2707, 99,
	3238, 2302, -1000, -1000, 2703, 1392, 1389, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1378, 1366, 32497, -1000,
	-1000, 4293, 2019, 25081, 1727, -1000, -1000, 1365, 1344, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2700, -1000, -1000, 3311,
	-226, -232, 2300, 155, 223, -1000, 2290, -1000, -1000, 641,
	-210, 157, 154, 130, -1000, -1000, -1000, 10825, -1000, -1000,
	-1000, 127, -1000, 1728, -1000, -1000, 2013, 47329, 600, -1000,
	-1000, -1000, -1000, 230, -1000, -1000, -1000, -1000, -1000, -1000,
	2288, 2283, -1000, 32497, 3189, 2151, 541, 3307, -1000, 50744,
	-1000, 1727, -1000, 541, 1335, -1000, 1727, 1727, -1000, 485,
	-1000, 1674, -1000, 2012, -1000, 3297, -1000, 484, -1000, 544,
	-1000, -1000, -1000, 1331, -1000, -1000, -1000, 50505, 558, -1000,
	750, 2698, -1000, -1000, 2311, 10825, 2695, 1727, 2292, -109,
	32497, 2981, 2979, 2917, 2658, 1326, -1000, -1000, 25081, -1000,
	-1000, 31879, 47329, 2237, -1000, -1000, 2279, -1000, 844, 175,
	223, -1000, 3306, 182, 3305, 3304, 1162, 1901, -1000, 170,
	160, 149, -1000, -1000, -1000, -1000, -1000, 2267, 2258, 2251,
	562, -1000, 326, -1000, -1000, -1000, 311, -1000, -1000, 3189,
	-1000, 3302, 574, -1000, 25081, -1000, -1000, 31261, 2655, 2655,
	-1000, -1000, 2010, -1000, -1000, -1000, -1000, 2002, -1000, -1000,
	-1000, 1301, -1000, 47329, 937, 7718, -1000, 2144, -1000, 47329,
	-1000, 3005, -1000, 271, 1284, 311, 755, 311, 755, 311,
	755, 311, 755, 322, -1000, -1000, -1000, 1255, -1000, -1000,
	-1000, 2691, 1974, 197, 185, 3301, -1000, 2237, 3300, 2237,
	2237, -1000, 135, 641, -1000, -1000, -1000, -1000, -1000, -1000,
	2250, -1000, -1000, -1000, -1000, 1727, 1727, 2240, 2239, 434,
	-1000, -1000, -1000, 30643, 560, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 558, 50744, -1000, 7718, 1240, -1000, 2113, -1000,
	780, -1000, -1000, 2999, 2911, 3342, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 47329, 3225, 24463, 180,
	-1000, -1000, -1000, 2238, -1000, 2237, -1000, -1000, 1724, -1000,
	-265, 1973, 1968, -1000, -1000, 47329, -1000, 47329, 556, -1000,
	50744, 1237, -1000, 7718, -1000, -1000, 3365, -1000, 3363, 988,
	988, 311, 311, 311, 311, -1000, -1000, 47329, -1000, 1207,
	-1000, -1000, -1000, 1566, -1000, -1000, -1000, -1000, 2233, -1000,
	-1000, 2230, -1000, -1000, -1000, 1186, 2428, -1000, -1000, -1000,
	-1000, -1000, 2030, 609, -1000, 1120, -1000, 1719, -1000, 30025,
	47329, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 47329, 7098,
	-1000, 1565, -1000, -1000, 2113, 47329, -1000,
}

var yyPgo = [...]int{
	0, 180, 3395, 257, 219, 4017, 101, 268, 260, 255,
	267, 4016, 4015, 4014, 4013, 3156, 3144, 4011, 4010, 4007,
	4006, 4005, 4004, 4003, 4002, 4001, 3999, 3997, 3996, 3995,
	3994, 3993, 3992, 3987, 3986, 3985, 3970, 3962, 3961, 3960,
	3958, 3955, 3954, 3953, 3952, 3949, 3948, 263, 3947, 3946,
	3945, 3939, 3938, 3937, 3936, 3935, 3934, 3933, 3931, 3930,
	3929, 3928, 3927, 3925, 3924, 3922, 3921, 3920, 3918, 3917,
	3914, 3913, 3910, 3907, 3906, 3905, 3904, 3903, 3899, 254,
	3893, 3892, 228, 3891, 3129, 3890, 3889, 3885, 3884, 3883,
	3882, 3881, 3880, 241, 3879, 3878, 3871, 3866, 3865, 3864,
	3860, 3859, 3858, 3856, 3855, 3852, 265, 3851, 3850, 3849,
	3848, 247, 3847, 258, 3846, 210, 143, 3844, 3843, 3842,
	3841, 3840, 3839, 3838, 3837, 3836, 3833, 3831, 3828, 3827,
	246, 193, 59, 3826, 53, 3825, 3824, 226, 3817, 159,
	3815, 156, 3813, 3812, 3811, 3810, 3809, 3808, 3794, 3793,
	3789, 3788, 3787, 3785, 3782, 3779, 3777, 3776, 3775, 3773,
	3772, 3771, 3770, 3769, 3767, 64, 3766, 269, 3764, 81,
	3763, 179, 3762, 78, 3761, 54, 140, 274, 244, 279,
	264, 194, 174, 100, 3760, 320, 3759, 166, 234, 163,
	31, 3757, 147, 3753, 275, 56, 43, 240, 153, 61,
	168, 133, 3752, 216, 104, 124, 3751, 3750, 152, 3748,
	251, 182, 3747, 117, 3746, 3745, 3743, 3741, 3740, 203,
	195, 3738, 3737, 142, 3736, 3735, 109, 136, 3734, 83,
	139, 177, 134, 3733, 113, 130, 90, 3732, 132, 108,
	3730, 82, 3729, 3728, 3726, 3723, 186, 3722, 3721, 146,
	77, 3720, 3714, 3711, 74, 3710, 85, 3708, 40, 3707,
	72, 3703, 3702, 3700, 3699, 3698, 3696, 3695, 3694, 3693,
	3690, 3689, 3688, 57, 3687, 3685, 7, 15, 14, 3684,
	29, 3683, 183, 3682, 3680, 172, 3679, 197, 3678, 3675,
	102, 97, 3674, 99, 171, 3673, 9, 28, 75, 3672,
	3671, 229, 141, 114, 164, 3670, 283, 3668, 3667, 3666,
	167, 3665, 2665, 3664, 3655, 3651, 3650, 3649, 3648, 23,
	3647, 1, 223, 48, 3646, 145, 144, 3644, 41, 30,
	3643, 50, 122, 200, 135, 110, 3640, 3639, 3637, 545,
	199, 107, 35, 0, 103, 227, 161, 3636, 3635, 3633,
	273, 3632, 243, 236, 239, 311, 270, 221, 3631, 3630,
	76, 3626, 169, 32, 55, 151, 65, 21, 222, 3623,
	1467, 8, 190, 3617, 209, 3616, 208, 16, 116, 157,
	3614, 3613, 34, 278, 3611, 3610, 3608, 137, 3607, 3592,
	321, 84, 3591, 3590, 3587, 3586, 38, 3585, 37, 13,
	3584, 115, 3583, 277, 3573, 259, 155, 185, 184, 165,
	232, 237, 89, 86, 3572, 1835, 158, 111, 22, 3571,
	233, 3570, 196, 125, 3568, 93, 3567, 253, 280, 205,
	3565, 187, 10, 51, 42, 25, 47, 12, 262, 202,
	3564, 3563, 18, 52, 3562, 58, 3561, 19, 3558, 3557,
	44, 3555, 66, 5, 3554, 3553, 17, 20, 3552, 39,
	207, 178, 128, 98, 80, 3551, 3550, 49, 231, 3549,
	150, 192, 162, 3548, 79, 3547, 3545, 3544, 3543, 907,
	3542, 271, 3540, 3539, 3538, 3536, 3534, 3533, 3532, 3529,
	225, 3528, 112, 45, 3527, 3523, 3522, 3520, 87, 148,
	3519, 3518, 3516, 3515, 33, 149, 3513, 11, 3499, 26,
	24, 36, 3496, 105, 3489, 3, 188, 3488, 3487, 4,
	3485, 3484, 2, 3483, 3482, 138, 3481, 106, 27, 173,
	121, 3479, 3478, 96, 214, 154, 3477, 3473, 95, 252,
	206, 3471, 88, 261, 272, 3470, 212, 3469, 3468, 3466,
	3459, 3458, 3456, 1196, 3455, 3454, 266, 67, 91, 3452,
	230, 126, 3451, 3446, 94, 170, 129, 127, 71, 92,
	3445, 119, 204, 3441, 201, 3434, 256, 3433, 3427, 118,
	3423, 3422, 3421, 3420, 191, 3418, 3417, 198, 238, 3415,
	3413, 282, 3412, 3411, 3409, 3408, 3407, 3404, 3397, 3393,
	3388, 3384, 249, 294, 3378,
}

//line mysql_sql.y:12464
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) allCDCOptionUnion() *tree.AllOrNotCDC {
	v, _ := st.union.(*tree.AllOrNotCDC)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) atTimeStampUnion() *tree.AtTimeStamp {
	v, _ := st.union.(*tree.AtTimeStamp)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() tree.GroupBy {
	v, _ := st.union.(tree.GroupBy)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) renameTableOptionUnion() *tree.AlterTable {
	v, _ := st.union.(*tree.AlterTable)
	return v
}

func (st *yySymType) renameTableOptionsUnion() []*tree.AlterTable {
	v, _ := st.union.([]*tree.AlterTable)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) retentionOptionUnion() *tree.RetentionOption {
	v, _ := st.union.(*tree.RetentionOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) snapshotObjectUnion() tree.ObjectInfo {
	v, _ := st.union.(tree.ObjectInfo)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) upgrade_targetUnion() *tree.Target {
	v, _ := st.union.(*tree.Target)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 597, 600, 600, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 121,
	121, 334, 334, 335, 335, 123, 330, 330, 329, 329,
	124, 125, 126, 576, 576, 127, 128, 157, 575, 575,
	159, 159, 159, 159, 159, 450, 122, 122, 122, 122,
	122, 163, 163, 163, 163, 163, 120, 582, 582, 582,
	583, 583, 117, 146, 145, 148, 148, 147, 147, 144,
	144, 140, 143, 143, 142, 142, 141, 136, 138, 138,
	137, 139, 139, 118, 106, 119, 524, 524, 523, 523,
	522, 522, 475, 475, 476, 476, 321, 321, 321, 521,
	521, 521, 520, 520, 519, 519, 518, 518, 516, 516,
	517, 515, 514, 514, 514, 512, 512, 512, 508, 508,
	510, 509, 509, 511, 503, 503, 506, 506, 504, 504,
	504, 504, 507, 502, 502, 502, 501, 501, 105, 105,
	105, 417, 417, 104, 104, 431, 431, 431, 431, 431,
	429, 429, 429, 429, 429, 429, 428, 428, 427, 427,
	432, 432, 430, 430, 430, 430, 430, 430, 430, 430,
	430, 430, 430, 430, 430, 430, 430, 430, 430, 430,
	430, 430, 430, 430, 430, 430, 430, 430, 430, 430,
	430, 430, 430, 430, 430, 430, 430, 430, 430, 430,
	430, 430, 430, 430, 430, 430, 430, 430, 430, 430,
	430, 430, 430, 94, 94, 94, 94, 94, 94, 99,
	99, 99, 100, 588, 588, 587, 587, 589, 589, 589,
	589, 590, 590, 97, 97, 97, 98, 426, 426, 426,
	95, 96, 96, 416, 416, 421, 421, 420, 420, 420,
	420, 420, 420, 420, 420, 420, 420, 420, 420, 420,
	425, 425, 425, 423, 423, 422, 422, 424, 424, 88,
	88, 88, 91, 90, 415, 415, 415, 415, 415, 415,
	415, 415, 415, 89, 89, 89, 89, 89, 89, 83,
	83, 83, 83, 83, 82, 82, 84, 84, 413, 413,
	412, 101, 101, 102, 585, 585, 584, 586, 586, 586,
	586, 103, 109, 109, 109, 109, 109, 109, 109, 109,
	108, 108, 111, 111, 110, 112, 93, 93, 93, 93,
	93, 93, 92, 92, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 549, 549, 549, 551, 551,
	348, 349, 601, 351, 347, 347, 347, 545, 545, 546,
	547, 548, 548, 548, 107, 14, 209, 209, 449, 449,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	13, 81, 86, 86, 87, 286, 286, 287, 281, 281,
	288, 288, 162, 289, 289, 289, 294, 294, 295, 295,
	282, 282, 282, 282, 282, 282, 282, 282, 282, 282,
	282, 282, 282, 282, 282, 282, 282, 282, 282, 282,
	282, 282, 268, 268, 268, 263, 263, 263, 263, 264,
	264, 265, 265, 266, 266, 266, 266, 267, 267, 340,
	340, 290, 290, 290, 292, 292, 291, 285, 283, 283,
	283, 283, 283, 283, 283, 284, 284, 284, 284, 293,
	293, 79, 85, 85, 85, 85, 563, 563, 80, 574,
	574, 479, 479, 362, 362, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 484, 485, 358, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 54, 57,
	58, 161, 53, 53, 53, 402, 402, 52, 602, 602,
	333, 333, 67, 66, 56, 68, 69, 70, 71, 72,
	73, 51, 65, 65, 65, 65, 65, 65, 65, 65,
	76, 497, 497, 604, 604, 604, 74, 75, 478, 478,
	478, 64, 63, 62, 61, 60, 60, 50, 50, 49,
	49, 55, 152, 59, 153, 153, 355, 355, 355, 357,
	357, 353, 603, 603, 445, 445, 356, 356, 48, 48,
	48, 48, 77, 354, 354, 332, 352, 352, 352, 12,
	12, 10, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 26,
	27, 29, 410, 410, 407, 28, 20, 19, 19, 23,
	22, 18, 18, 21, 24, 25, 25, 9, 9, 9,
	9, 15, 15, 16, 182, 182, 235, 235, 557, 557,
	553, 553, 554, 554, 554, 555, 555, 556, 556, 113,
	491, 491, 491, 491, 491, 491, 8, 8, 204, 204,
	490, 490, 490, 490, 490, 490, 414, 414, 414, 534,
	534, 534, 535, 203, 203, 198, 198, 492, 492, 379,
	536, 536, 500, 500, 499, 499, 498, 498, 201, 201,
	202, 202, 185, 185, 131, 131, 505, 505, 505, 505,
	513, 513, 474, 474, 273, 273, 323, 323, 324, 324,
	175, 175, 176, 176, 176, 176, 176, 176, 591, 591,
	592, 593, 594, 594, 595, 595, 595, 596, 596, 596,
	596, 596, 542, 542, 544, 544, 543, 200, 200, 196,
	196, 197, 197, 197, 195, 195, 194, 193, 193, 192,
	190, 190, 190, 191, 191, 191, 208, 208, 178, 178,
	178, 177, 177, 177, 177, 177, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 179, 179,
	550, 550, 550, 480, 480, 480, 487, 487, 303, 303,
	304, 304, 302, 302, 180, 180, 181, 181, 181, 181,
	301, 301, 300, 183, 183, 189, 188, 188, 184, 184,
	184, 184, 311, 311, 310, 310, 310, 310, 116, 129,
	129, 130, 207, 207, 309, 308, 308, 308, 308, 206,
	206, 205, 205, 199, 199, 187, 187, 187, 187, 307,
	186, 305, 581, 581, 580, 580, 579, 577, 577, 577,
	578, 578, 578, 578, 526, 526, 526, 526, 526, 341,
	341, 341, 346, 346, 344, 344, 344, 344, 344, 350,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 39, 218, 219, 40, 220, 220, 221, 221,
	222, 222, 223, 224, 225, 225, 225, 225, 38, 210,
	210, 211, 211, 212, 212, 213, 214, 214, 214, 217,
	215, 216, 216, 599, 599, 598, 37, 37, 30, 166,
	166, 167, 167, 167, 169, 169, 269, 269, 269, 168,
	168, 170, 170, 170, 558, 560, 560, 562, 561, 561,
	561, 564, 564, 564, 564, 564, 565, 565, 565, 565,
	566, 566, 31, 149, 149, 173, 173, 154, 569, 569,
	569, 568, 568, 570, 570, 571, 571, 327, 327, 328,
	328, 164, 165, 165, 156, 151, 172, 172, 172, 172,
	172, 174, 174, 237, 237, 150, 155, 158, 160, 559,
	567, 567, 567, 411, 411, 408, 409, 409, 406, 405,
	405, 405, 573, 573, 572, 572, 572, 342, 342, 32,
	401, 401, 403, 404, 404, 404, 395, 395, 395, 395,
	36, 399, 399, 400, 400, 400, 400, 400, 400, 400,
	396, 396, 398, 398, 394, 394, 394, 394, 394, 394,
	394, 35, 171, 171, 393, 393, 390, 390, 388, 388,
	389, 389, 387, 387, 387, 391, 391, 43, 78, 44,
	45, 46, 42, 392, 392, 34, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 133, 132, 132, 132, 132,
	132, 135, 135, 326, 326, 325, 325, 134, 270, 270,
	41, 248, 248, 466, 466, 461, 461, 461, 461, 461,
	482, 482, 482, 462, 462, 462, 463, 463, 463, 465,
	465, 465, 464, 464, 464, 464, 464, 481, 481, 483,
	483, 483, 433, 433, 434, 434, 434, 437, 437, 453,
	453, 454, 454, 452, 452, 459, 459, 458, 458, 457,
	457, 456, 456, 455, 455, 455, 455, 448, 448, 447,
	447, 435, 435, 435, 435, 435, 436, 436, 436, 446,
	446, 451, 451, 299, 299, 298, 298, 256, 256, 257,
	257, 297, 297, 254, 254, 255, 255, 255, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 532, 532, 533, 259, 259, 271,
	271, 271, 271, 271, 271, 258, 258, 260, 260, 236,
	236, 234, 234, 226, 226, 226, 226, 226, 227, 227,
	228, 228, 229, 229, 229, 233, 233, 232, 232, 232,
	232, 230, 230, 231, 231, 231, 231, 231, 231, 419,
	419, 529, 529, 530, 530, 525, 525, 525, 528, 528,
	528, 528, 528, 528, 528, 531, 531, 531, 527, 527,
	238, 320, 320, 320, 343, 343, 343, 343, 345, 319,
	319, 319, 253, 253, 252, 252, 250, 250, 250, 250,
	250, 250, 250, 250, 250, 250, 250, 250, 250, 250,
	250, 250, 250, 250, 250, 250, 250, 250, 418, 418,
	359, 359, 360, 360, 280, 279, 279, 279, 279, 279,
	277, 278, 276, 276, 276, 276, 276, 275, 275, 274,
	274, 274, 397, 397, 272, 272, 262, 262, 262, 261,
	261, 261, 460, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 317, 317, 317, 318, 318, 318, 318, 318,
	318, 318, 318, 369, 369, 375, 375, 541, 541, 540,
	239, 239, 239, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 249, 249, 249, 442, 442, 442, 442, 443,
	443, 443, 443, 444, 444, 444, 440, 440, 441, 441,
	380, 381, 381, 488, 488, 489, 489, 438, 438, 439,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 496, 496, 496, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 552, 552, 552, 537, 537, 537, 538, 538, 538,
	538, 538, 538, 538, 538, 538, 538, 538, 538, 539,
	539, 539, 539, 539, 539, 539, 539, 539, 539, 539,
	539, 539, 539, 539, 539, 539, 315, 315, 315, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 382, 382, 383,
	383, 493, 493, 493, 493, 493, 493, 494, 494, 495,
	495, 495, 495, 486, 486, 486, 486, 486, 486, 486,
	486, 486, 486, 486, 486, 486, 486, 486, 486, 486,
	486, 486, 486, 486, 486, 486, 486, 486, 486, 486,
	486, 486, 367, 312, 312, 312, 384, 376, 376, 377,
	377, 378, 378, 370, 370, 370, 370, 370, 370, 371,
	371, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 365, 365, 365, 365, 365, 365, 365, 365,
	365, 365, 365, 372, 372, 374, 374, 386, 386, 386,
	385, 385, 385, 385, 385, 385, 385, 251, 251, 251,
	251, 364, 364, 364, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 241, 241, 241, 241,
	245, 245, 247, 247, 247, 247, 247, 247, 247, 247,
	247, 247, 247, 247, 247, 247, 246, 246, 246, 246,
	246, 244, 244, 244, 244, 244, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 114, 115, 115, 243, 322,
	322, 467, 467, 470, 470, 468, 468, 469, 471, 471,
	471, 472, 472, 472, 473, 473, 473, 477, 477, 331,
	331, 331, 339, 339, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	337, 337, 337, 337, 337, 337, 337, 337, 337, 337,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 8,
	8, 0, 2, 0, 2, 11, 1, 3, 0, 3,
	4, 4, 4, 1, 2, 5, 6, 6, 1, 2,
	7, 9, 10, 10, 12, 1, 5, 6, 8, 10,
	9, 5, 7, 9, 8, 6, 4, 0, 1, 1,
	0, 1, 5, 2, 2, 6, 9, 6, 9, 4,
	7, 8, 0, 1, 1, 2, 4, 6, 1, 2,
	4, 0, 2, 10, 11, 2, 0, 2, 1, 3,
	3, 3, 0, 2, 0, 2, 1, 3, 5, 0,
	2, 3, 1, 3, 1, 1, 1, 3, 1, 1,
	1, 1, 0, 3, 3, 0, 3, 3, 0, 1,
	3, 0, 1, 3, 0, 2, 1, 2, 3, 4,
	3, 3, 1, 0, 1, 1, 0, 1, 8, 5,
	7, 0, 3, 8, 5, 1, 3, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 4,
	1, 3, 1, 2, 2, 2, 2, 2, 2, 2,
	1, 2, 2, 2, 2, 1, 1, 2, 2, 1,
	1, 1, 1, 1, 2, 2, 2, 1, 2, 1,
	2, 2, 1, 2, 1, 1, 2, 2, 1, 1,
	1, 3, 2, 2, 2, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	4, 4, 5, 1, 3, 3, 1, 2, 2, 2,
	1, 2, 2, 3, 4, 4, 6, 1, 1, 1,
	2, 4, 6, 1, 4, 1, 3, 3, 4, 4,
	4, 4, 3, 3, 2, 4, 4, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 3, 1, 3, 1,
	1, 1, 2, 2, 0, 1, 4, 2, 4, 1,
	5, 3, 2, 1, 2, 2, 4, 4, 5, 2,
	1, 3, 4, 4, 1, 2, 9, 7, 1, 3,
	3, 1, 1, 3, 1, 3, 2, 1, 2, 1,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 4, 2, 4, 3, 3, 1, 1, 1, 1,
	1, 1, 2, 3, 4, 7, 2, 3, 3, 4,
	5, 3, 4, 4, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 2,
	1, 1, 1, 1, 6, 4, 1, 1, 0, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	10, 7, 4, 4, 3, 1, 3, 3, 1, 3,
	1, 6, 7, 3, 3, 3, 1, 1, 1, 3,
	2, 4, 5, 5, 6, 5, 5, 3, 2, 2,
	1, 3, 4, 3, 7, 5, 8, 2, 2, 1,
	3, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 0, 1, 2, 1, 3, 2, 1, 2, 2,
	1, 2, 3, 2, 2, 3, 6, 3, 3, 1,
	1, 7, 7, 7, 8, 8, 0, 4, 7, 0,
	3, 0, 2, 0, 1, 1, 1, 1, 4, 2,
	2, 3, 3, 4, 5, 3, 4, 4, 2, 2,
	2, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 3,
	3, 3, 2, 5, 5, 0, 2, 7, 0, 1,
	0, 1, 5, 5, 3, 3, 2, 4, 4, 4,
	4, 4, 1, 1, 1, 3, 3, 1, 1, 1,
	6, 0, 1, 1, 1, 1, 5, 5, 0, 1,
	1, 3, 3, 3, 4, 7, 7, 5, 4, 7,
	8, 3, 3, 2, 3, 4, 0, 2, 2, 0,
	2, 2, 1, 1, 1, 1, 0, 1, 5, 5,
	6, 4, 3, 1, 3, 1, 1, 3, 5, 2,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	4, 4, 1, 3, 1, 4, 6, 6, 4, 4,
	4, 4, 4, 3, 6, 3, 5, 1, 1, 2,
	2, 11, 8, 9, 1, 3, 2, 4, 0, 2,
	0, 1, 1, 1, 1, 0, 1, 0, 1, 4,
	2, 1, 5, 4, 4, 2, 5, 5, 1, 3,
	2, 1, 5, 4, 4, 2, 0, 5, 4, 0,
	1, 3, 3, 1, 3, 1, 3, 1, 3, 4,
	0, 1, 0, 1, 1, 3, 1, 1, 0, 4,
	1, 3, 2, 1, 0, 8, 0, 4, 7, 4,
	0, 2, 0, 2, 0, 2, 0, 4, 1, 3,
	1, 1, 6, 4, 5, 7, 4, 5, 0, 1,
	3, 8, 0, 6, 0, 4, 6, 1, 1, 1,
	1, 1, 2, 3, 1, 3, 6, 0, 3, 0,
	1, 2, 4, 4, 0, 1, 3, 1, 3, 3,
	0, 1, 1, 0, 2, 2, 0, 2, 3, 3,
	3, 1, 3, 3, 3, 3, 1, 2, 2, 1,
	2, 2, 1, 2, 2, 1, 2, 2, 7, 7,
	1, 1, 1, 0, 1, 1, 1, 1, 0, 2,
	0, 3, 0, 2, 1, 3, 1, 2, 3, 5,
	0, 1, 2, 1, 3, 1, 1, 1, 4, 4,
	4, 3, 2, 2, 2, 3, 2, 3, 4, 1,
	3, 4, 0, 2, 1, 1, 2, 2, 2, 0,
	1, 2, 4, 1, 3, 1, 3, 2, 3, 1,
	4, 3, 0, 1, 1, 2, 5, 2, 2, 2,
	0, 2, 3, 3, 0, 1, 3, 1, 3, 0,
	1, 2, 1, 1, 0, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 7, 1, 1, 7, 1, 3, 0, 1,
	1, 3, 1, 3, 0, 1, 1, 1, 14, 1,
	3, 0, 1, 1, 3, 1, 1, 2, 4, 1,
	1, 1, 1, 0, 1, 2, 9, 9, 7, 1,
	2, 3, 3, 3, 0, 4, 1, 1, 1, 1,
	1, 0, 1, 1, 1, 1, 1, 4, 1, 1,
	1, 3, 3, 4, 3, 3, 0, 1, 1, 1,
	0, 2, 7, 8, 10, 2, 2, 8, 0, 3,
	3, 0, 3, 0, 3, 0, 5, 1, 3, 0,
	3, 3, 0, 2, 9, 8, 0, 2, 2, 3,
	3, 0, 2, 0, 2, 4, 4, 4, 4, 1,
	0, 2, 2, 1, 3, 2, 1, 3, 2, 1,
	3, 2, 0, 1, 3, 4, 3, 1, 1, 4,
	1, 3, 1, 1, 1, 1, 0, 1, 1, 1,
	11, 0, 2, 3, 3, 2, 2, 3, 1, 1,
	1, 3, 3, 4, 0, 2, 2, 2, 2, 2,
	2, 6, 0, 4, 1, 1, 0, 3, 0, 1,
	1, 2, 4, 4, 4, 0, 1, 8, 2, 4,
	4, 4, 9, 0, 2, 11, 9, 11, 8, 6,
	9, 7, 10, 7, 6, 2, 2, 9, 4, 5,
	3, 0, 4, 1, 3, 0, 3, 6, 0, 2,
	10, 0, 2, 0, 2, 0, 3, 2, 4, 3,
	0, 2, 1, 0, 2, 3, 0, 2, 3, 0,
	2, 1, 0, 3, 2, 4, 3, 0, 1, 0,
	1, 1, 0, 6, 0, 3, 5, 0, 4, 0,
	3, 1, 3, 4, 5, 0, 3, 1, 3, 2,
	3, 1, 2, 0, 4, 6, 5, 0, 2, 0,
	2, 4, 5, 4, 5, 1, 5, 6, 5, 0,
	3, 0, 1, 1, 3, 3, 3, 0, 4, 1,
	3, 3, 3, 0, 1, 1, 3, 2, 3, 3,
	3, 4, 4, 3, 3, 3, 3, 4, 4, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 5, 4, 5, 1, 3, 3, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 2, 4, 0, 5, 5, 5, 5, 0, 1,
	1, 3, 1, 1, 1, 1, 1, 7, 9, 7,
	9, 2, 1, 7, 9, 7, 9, 8, 5, 0,
	1, 0, 1, 1, 1, 1, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	3, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	3, 5, 0, 1, 1, 2, 1, 2, 2, 1,
	1, 2, 2, 2, 3, 3, 2, 2, 1, 5,
	6, 4, 1, 1, 1, 5, 4, 1, 1, 2,
	0, 1, 1, 2, 5, 0, 1, 1, 2, 2,
	3, 3, 1, 1, 2, 2, 2, 0, 1, 2,
	2, 2, 0, 3, 0, 3, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 1, 1, 1, 1, 3,
	5, 2, 2, 2, 2, 4, 1, 1, 2, 5,
	6, 8, 6, 6, 6, 1, 1, 1, 1, 1,
	1, 3, 4, 4, 4, 7, 9, 7, 7, 7,
	9, 7, 7, 0, 2, 0, 1, 1, 2, 4,
	1, 2, 2, 1, 2, 2, 1, 2, 2, 2,
	2, 2, 0, 1, 1, 1, 2, 2, 2, 2,
	2, 2, 2, 1, 1, 1, 2, 5, 0, 1,
	3, 0, 1, 0, 2, 0, 2, 0, 1, 6,
	8, 8, 6, 6, 5, 5, 5, 6, 6, 6,
	6, 5, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 1, 1, 1, 4, 4, 6, 8, 6,
	4, 5, 4, 4, 4, 3, 4, 6, 6, 7,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 8, 4,
	2, 3, 2, 4, 2, 2, 4, 6, 2, 2,
	4, 6, 4, 2, 4, 4, 4, 0, 1, 2,
	3, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 1, 1, 3, 0, 1, 1,
	3, 1, 3, 3, 3, 3, 3, 2, 1, 1,
	1, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	4, 1, 3, 4, 4, 5, 4, 5, 3, 4,
	5, 6, 1, 0, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 1, 1, 2, 3, 1, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 4, 4, 1, 2, 3, 5, 1, 1,
	3, 0, 1, 0, 3, 0, 3, 3, 0, 3,
	5, 0, 3, 5, 0, 1, 1, 0, 1, 1,
	2, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -597, -600, -2, -5, 626, -1, -4, -115, -88,
	-7, -14, -117, -118, -8, -113, -9, -10, -12, -92,
	-108, -110, -112, -111, -47, -11, -107, -82, -83, -94,
	-101, -104, -105, -106, -119, -114, -116, -175, -120, -121,
	-122, -163, -125, -127, -128, 616, -89, -90, -91, -33,
	-32, -31, -30, -149, -154, -157, -159, -123, 549, 622,
	452, 14, 501, -15, -16, -542, -17, 261, -347, -348,
	-349, -351, -601, -48, -49, -50, -60, -61, -62, -63,
	-64, -74, -75, -76, -51, -52, -53, -56, -54, -67,
	-66, -68, -69, -70, -71, -72, -73, -55, -59, -152,
	-153, -77, -57, -78, -58, -161, -124, -80, -79, -85,
	-81, -86, -151, -156, -13, -162, -87, 236, -84, 76,
	-95, -96, -97, -98, -99, -100, -102, -103, 376, 382,
	439, 615, 61, -176, -178, 635, 636, 639, 536, 539,
	160, 161, 163, 164, -34, -35, -36, -37, -38, -39,
	-41, -40, -42, -43, -44, -45, -46, 232, 16, 544,
	-18, -21, -19, -22, -20, -28, -29, -27, -24, -26,
	-150, -25, -155, -23, -158, -160, -126, 256, 255, 38,
	322, 323, 324, 380, 254, 233, 235, 15, 31, 42,
	355, -177, 83, 537, 234, -179, 13, 641, -6, -3,
	-2, -136, -140, -144, -147, -148, -145, -146, -4, -115,
	118, 246, 617, -343, 372, 618, 620, 619, 86, 94,
	-336, -338, 452, 261, 376, 382, 615, 636, 639, 536,
	539, 551, 552, 553, 554, 555, 556, 557, 558, 560,
	561, 562, 563, 564, 565, 566, 576, 577, 567, 568,
	569, 570, 571, 572, 573, 574, 578, 579, 580, 581,
	582, 583, 584, 585, 586, 587, 588, 589, 590, 591,
	504, 601, 602, 603, 604, 532, 559, 595, 596, 597,
	598, 353, 354, 541, 273, 297, 407, 303, 310, 160,
	179, 173, 202, 193, 537, 168, 277, 315, 278, 93,
	163, 487, 108, 464, 436, 166, 292, 294, 296, 533,
	534, 366, 299, 531, 298, 300, 302, 535, 279, 356,
	189, 184, 291, 275, 182, 280, 40, 281, 207, 282,
	283, 546, 460, 352, 466, 307, 52, 434, 183, 461,
	295, 463, 211, 215, 478, 479, 177, 178, 468, 481,
	206, 209, 210, 253, 349, 350, 43, 543, 265, 482,
	213, 205, 200, 490, 311, 309, 204, 176, 199, 276,
	65, 217, 216, 218, 430, 431, 432, 433, 284, 285,
	370, 477, 196, 185, 357, 169, 23, 485, 260, 465,
	383, 286, 304, 312, 212, 214, 267, 272, 545, 438,
	271, 308, 483, 181, 264, 293, 259, 486, 170, 385,
	287, 164, 301, 480, 489, 64, 398, 175, 167, 633,
	250, 161, 269, 274, 288, 289, 290, 530, 314, 313,
	305, 538, 197, 266, 203, 187, 174, 198, 162, 268,
	488, 399, 613, 355, 417, 195, 192, 270, 243, 484,
	467, 165, 421, 400, 190, 316, 608, 609, 610, 371,
	348, 317, 318, 188, 257, 458, 459, 321, 427, 339,
	401, 437, 408, 402, 224, 225, 325, 470, 472, 208,
	611, 328, 329, 330, 462, 331, 332, 333, 334, 375,
	56, 58, 95, 98, 97, 637, 638, 63, 29, 361,
	364, 396, 403, 341, 614, 542, 338, 342, 343, 365,
	25, 419, 387, 423, 422, 48, 49, 50, 53, 54,
	55, 57, 59, 60, 51, 529, 380, 393, 491, 45,
	47, 390, 27, 367, 418, 440, 337, 420, 451, 46,
	449, 450, 471, 26, 369, 368, 62, 44, 426, 428,
	429, 319, 335, 378, 623, 492, 373, 389, 392, 374,
	340, 363, 394, 67, 66, 386, 624, 381, 379, 336,
	547, 548, 344, 575, 358, 435, 526, 525, 524, 523,
	522, 521, 520, 519, 322, 323, 324, 404, 405, 406,
	416, 409, 410, 411, 412, 413, 414, 415, 454, 455,
	625, 473, 475, 476, 474, 238, 640, 359, 360, 241,
	627, 628, 96, 629, 631, 630, 28, 632, -424, -422,
	-343, 537, 615, 382, 536, 539, 376, 355, 636, 639,
	380, 261, 322, 323, 324, 452, 353, -220, -343, 640,
	-185, 245, 39, -234, -343, -185, -84, -16, -15, -177,
	-178, -234, 240, -352, 24, 434, -93, 435, 236, 83,
	77, -343, -9, -106, -8, -113, -82, -175, 439, -350,
	-343, 322, 322, -350, 240, -345, 271, 415, -343, -479,
	246, -428, -401, 272, -427, -403, -430, -404, 32, 232,
	234, 233, 549, 268, 16, 380, 242, 14, 13, 381,
	254, 25, 26, 28, 15, 382, 384, 29, 385, 388,
	389, 390, 42, 393, 394, 261, 86, 94, 89, 279,
	-219, -343, -378, -370, 115, -373, -365, -366, -368, -321,
	-516, -363, 83, 142, 143, 150, 116, 642, -367, -460,
	36, 118, 555, 559, 595, 502, -313, -314, -315, -316,
	-317, -318, -343, -517, -515, 89, 99, 101, 105, 106,
	104, 102, 154, 186, 103, 90, 155, -178, 86, -537,
	565, -337, 588, 601, 602, 603, 604, 587, 61, -486,
	-495, 239, -493, 153, 191, 257, 187, 14, 148, 427,
	188, 596, 597, 598, 562, 584, 504, 566, 576, 591,
	557, 558, 560, 552, 553, 554, 556, 567, 569, 583,
	-496, 579, 589, 590, 575, 599, 600, 592, 593, 594,
	631, 88, 87, 582, 581, 568, 563, 564, 570, 551,
	561, 571, 572, 580, 585, 586, 364, 108, 365, 366,
	494, 356, 367, 246, 434, 70, 368, 369, 370, 371,
	372, 501, 373, 71, 374, 363, 261, 417, 375, 190,
	208, 506, 505, 507, 498, 495, 493, 496, 497, 499,
	500, 573, 574, 578, -129, -130, 606, -591, -306, -592,
	6, 7, 8, 9, -593, 155, -582, 436, 545, 89,
	315, 353, 17, 494, 634, 535, 634, 535, 165, 162,
	-415, 165, 114, 170, 169, -415, 634, 167, 633, 325,
	267, -392, -166, 353, 417, 331, 95, 271, -395, -393,
	533, -481, 319, 315, 291, 241, 111, -167, 251, 250,
	109, 494, 239, 391, 310, 56, 58, -553, -554, 229,
	230, 231, -544, 527, -543, -343, 634, 366, 97, 98,
	633, 27, 240, 377, 267, 472, 470, 471, 473, 474,
	475, 476, -65, -497, -478, 467, 466, -356, 459, 465,
	457, 469, 460, 354, 333, 549, 332, 232, 627, 534,
	528, -331, 401, 437, 491, 492, 378, 438, 478, 480,
	461, 108, 194, 191, 241, 243, 240, 633, 353, 494,
	417, 95, 331, 240, -553, 162, 478, 480, 436, 271,
	415, 41, -421, 427, -420, -422, 479, 490, 87, 88,
	477, -331, 108, 458, 458, -591, -306, -176, -178, -116,
	-542, 535, 634, 241, 353, 417, 271, 242, 240, 530,
	533, 243, 494, 239, 322, 377, 267, 331, 95, 167,
	633, -480, -550, 32, -487, 226, 227, 228, 33, 34,
	-1, 122, 641, -370, -370, -6, 644, -6, -370, -343,
	-343, 157, -241, -245, -242, -244, -243, -247, -246, 191,
	192, 153, 195, 201, 197, 198, 199, 200, 202, 203,
	204, 205, 206, 209, 210, 207, 31, 208, 257, 187,
	188, 189, 190, 211, 173, 193, 542, 219, 174, 220,
	175, 221, 176, 222, 177, 178, 223, 179, 182, 183,
	184, 185, 181, 156, -209, 89, 32, 83, 156, 89,
	-201, 263, -185, -234, -226, 156, 642, -201, -591, -194,
	-195, 11, -234, -319, -343, 436, 125, -93, 77, -93,
	435, 77, -545, -546, -547, -549, 236, 435, 434, -111,
	156, 279, 17, -350, -350, 81, -234, -403, 271, -428,
	-401, 36, 80, 157, 244, 157, 80, 83, 378, 353,
	417, 379, 494, 240, 391, 243, 271, 392, 353, 417,
	240, 243, 494, 271, 353, 240, 243, 417, 271, 392,
	353, 457, 458, 243, 27, 383, 386, 387, 458, -501,
	490, 157, 114, 111, 112, 113, -370, 132, -385, 125,
	126, 127, 128, 129, 130, 131, 139, 138, 149, 142,
	143, 144, 145, 146, 147, 148, 140, 141, 135, 115,
	133, 137, 134, 117, 152, -178, -370, -378, 61, -368,
	-368, -368, -368, -343, -460, -375, -370, 83, 83, 83,
	83, 156, 102, 89, -370, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, -494, 83, 83,
	-382, -383, 83, 83, -363, -319, 83, 89, 89, 83,
	83, 83, 89, 83, 83, 83, -383, -383, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, -195, 157, -194, 83, -194, -195, -179,
	-178, 32, 33, 32, 33, 32, 33, 32, 33, -594,
	624, 83, 99, 637, 224, 17, -343, 633, -343, 89,
	538, 89, 538, 483, 544, 168, 169, 170, -390, 246,
	-390, -390, -218, -343, -220, 377, 243, 530, 243, -167,
	-390, -390, -390, -390, -390, 242, -390, 24, 240, 240,
	240, 240, -390, 501, 125, 125, 59, -555, 172, 157,
	-544, -200, 83, 89, -355, 133, 137, -355, -302, 18,
	-302, 24, 269, 269, 269, -355, 309, -602, -603, 17,
	135, -353, -603, -353, -353, -355, -604, 242, 468, 43,
	270, 269, -196, -197, 22, -196, 462, 458, -445, 463,
	464, -357, -603, -356, -355, -355, -356, -355, -355, -355,
	32, 240, 243, 494, 331, 628, -602, -602, 31, 31,
	-479, -479, -234, -479, -479, 528, -332, -343, -479, -479,
	-479, -286, -287, -234, -556, 245, -588, -587, 481, -590,
	483, 162, -422, 162, -422, 86, -403, 271, 271, 157,
	125, 24, -423, 125, 136, -422, -422, -423, -423, -258,
	41, -342, 153, -343, 89, -258, 41, -585, -584, -234,
	-195, -179, -178, 84, 84, 84, 538, 89, -479, -479,
	-479, -479, -479, -481, -479, -479, -479, -479, -479, -350,
	-210, -343, -220, 246, -479, -479, -479, -479, -180, -181,
	144, -370, -343, -180, -3, -138, -137, 119, 120, 122,
	618, 372, 617, 621, 615, -422, 41, -473, 399, 398,
	-467, -469, 83, -468, 83, -468, -468, -468, -468, -468,
	83, 83, -470, 83, -470, -470, -467, -471, 83, -471,
	-472, 83, -472, -471, -343, -449, 544, -376, -378, -343,
	39, -490, 61, -175, 83, 31, 83, -201, -343, 188,
	167, 632, -491, 61, -175, 83, 31, -195, -131, 39,
	-197, 21, 156, 99, 89, -111, -93, 77, -111, 84,
	157, -548, 105, 106, -551, 206, 197, -343, -109, 89,
	-7, -8, -9, -10, -47, -82, -79, -175, 233, 536,
	539, -518, -516, 83, 32, 426, 80, 17, -429, 240,
	494, 377, 267, 243, 353, -427, -410, -407, -405, -342,
	-403, -406, -405, -432, -319, 458, -132, 441, 440, 321,
	-370, -370, -370, -370, -370, 104, 115, 348, 105, 106,
	-365, -386, 32, 317, 318, -366, -366, -366, -366, -366,
	-366, -366, -366, -366, -366, -366, -366, -374, -384, -460,
	83, 135, 133, 137, 134, 117, -368, -368, -366, -366,
	-260, -342, 153, 84, 157, -370, -541, -540, 119, -370,
	-370, -370, -370, -343, -538, -539, 508, 509, 510, 511,
	512, 513, 514, 515, 516, 517, 518, 368, 363, 369,
	367, 356, 375, 370, 371, 190, 525, 526, 519, 520,
	521, 522, 523, 524, -376, -376, -370, -538, -376, -312,
	33, 32, -378, -378, -378, 84, -370, -552, 346, 345,
	347, -198, -343, -376, 84, 84, 84, 99, -378, -378,
	-376, -366, -376, -376, -376, -376, -539, -312, -312, -312,
	-312, 144, -378, -378, -312, -312, -312, -312, 144, -312,
	-312, -312, -312, -312, -312, -312, -312, -312, -312, 84,
	84, 84, 144, -378, -196, -130, -499, -498, -370, 41,
	-131, -197, -595, 625, 83, -319, -583, 89, 89, 642,
	167, 633, 17, 494, -343, 17, 240, -576, 32, 538,
	99, 538, 99, 484, 485, 166, 169, 168, 89, 115,
	-343, -343, 35, 83, -210, -390, -390, -390, -560, -343,
	90, -411, -408, -405, -343, -343, -401, -343, -332, -234,
	-390, -390, -390, -390, -234, -269, 53, 54, 55, -405,
	-168, 56, 57, -556, -543, 35, -199, -343, -576, -302,
	-368, -368, -370, -405, 271, -602, -355, -355, -333, -332,
	-357, -352, -357, -357, -302, -353, -355, -355, -370, -357,
	-353, -302, -343, 458, -302, -302, -445, -355, -354, -343,
	-354, -390, -332, -333, -333, -234, -234, -281, -288, -282,
	-289, 263, 237, 361, 362, 235, 233, 11, 234, -296,
	310, -391, 502, -264, -265, 77, 42, -267, 261, 403,
	396, 273, 277, 93, 278, 436, 279, 242, 281, 282,
	283, 298, 300, 253, 284, 285, 286, 427, 287, 161,
	299, 288, 289, 290, 379, -259, 6, 334, 544, 41,
	51, 52, 450, 449, 547, 274, -343, -560, -558, 31,
	-343, 31, -411, -343, -343, 157, 244, -188, -183, -187,
	-184, -189, -305, -307, -186, 83, -234, -178, -343, 157,
	482, 484, 485, -588, -423, -588, -423, 244, 32, 426,
	-426, 426, 32, -401, -420, 478, 480, -416, 89, 427,
	-406, -425, 80, 153, -498, -423, -423, -425, -425, 152,
	157, -586, 483, 484, 229, -196, 99, -576, -236, -234,
	-560, -410, -401, -343, -479, -236, -236, -236, -345, -345,
	83, 156, 36, -343, -343, -343, -343, -301, 157, -300,
	17, -344, -343, 35, 89, 156, -301, -139, -137, 121,
	-370, -6, 617, -370, -6, -6, -370, -6, -370, -477,
	400, 99, 99, -322, 89, -322, 99, 99, 99, 550,
	84, 89, -414, 80, -492, -379, -536, 606, -203, 84,
	-198, -534, -535, -198, -202, -343, -490, -226, 125, 125,
	125, -492, -203, 84, -534, -196, 607, -131, -193, -192,
	-370, -343, 24, -111, -93, -546, 156, 353, 157, -199,
	-429, -409, -406, -431, 144, -343, -417, 157, 544, 645,
	87, 244, -573, -572, 418, 84, 157, -502, 245, 501,
	89, 642, 434, 224, 225, 104, 348, 105, 106, -460,
	-378, -374, -368, -368, -366, -366, -372, 258, -372, 114,
	-370, 643, -369, -540, 121, -370, 35, 157, 35, 157,
	81, 156, 84, 84, 17, 17, 84, -370, 84, 84,
	84, 84, 17, 17, -370, 84, 156, 84, 84, 84,
	84, 81, 84, 157, 84, 84, 84, 84, 157, -378,
	-378, -370, -378, 84, 84, 84, -370, -370, -370, -378,
	84, -370, -370, -370, -370, -370, -370, -370, -370, -370,
	-370, -439, 453, -439, -439, 157, 157, 157, 84, -131,
	83, 99, 157, 638, -326, -325, 89, -343, -343, 167,
	633, -343, 89, 633, -343, 89, 89, 167, 170, 170,
	169, 89, 36, 24, 308, 24, -219, -221, -222, -223,
	-224, -225, 135, 158, 159, 83, -234, -234, -234, -562,
	404, -574, 157, 41, -572, 494, -164, 321, -394, 81,
	-171, 17, 544, -234, -234, -234, -234, -248, 35, 17,
	-182, -235, -343, 83, 84, 157, -402, 81, -343, -333,
	-302, -302, -357, -302, -302, 157, 23, -355, -357, -357,
	-226, -353, -226, 156, -226, -332, -466, 35, -200, 157,
	21, 263, -233, -340, -230, -232, 248, -360, -231, 251,
	-530, 249, 247, 109, 252, 306, 110, 242, -340, -340,
	248, -268, 244, 35, -340, -284, 242, 351, 306, 249,
	21, 263, -283, 242, 110, -343, 248, 252, 249, 247,
	-339, 125, -331, 152, 244, 43, 379, -339, 548, 263,
	-339, -339, -339, -339, -339, -339, -339, 280, 280, -339,
	-339, -339, -339, -339, -339, -339, -339, -339, -339, -339,
	162, -339, -339, -339, -339, -339, -339, 83, 326, 275,
	276, 308, -563, 404, 31, 359, 359, 360, -574, 31,
	-172, 353, -287, -285, -354, 31, -308, -309, -310, -311,
	68, 72, 74, 78, 69, 70, 71, 75, 31, 157,
	-341, -346, 35, -343, 89, -341, -178, -183, -188, -341,
	83, -587, -589, 486, 483, 489, -425, -425, 99, 244,
	83, 125, -425, -425, 41, -342, -584, 490, 484, -131,
	157, 80, -236, -211, -212, -213, -214, -241, -319, 192,
	195, 197, 198, 199, 200, 202, 203, 204, 205, 206,
	209, 210, 207, 208, 257, 187, 188, 189, 190, 211,
	173, 193, 542, 174, 175, 176, 177, 178, 179, 182,
	183, 184, 185, 181, -343, -220, -302, -181, -183, -343,
	89, -343, 144, -302, 122, -6, 120, -143, -142, -141,
	123, 615, 621, 122, 122, 122, 84, 84, 84, 157,
	84, 84, 84, 157, 84, 157, 99, -505, 463, 40,
	157, 83, 84, 157, 61, 157, 125, 84, 157, -370,
	-343, 89, -370, 84, 61, -131, 89, 157, -190, 37,
	38, 156, 436, -343, -516, 84, -431, 157, 244, 156,
	156, -407, 382, -342, -409, 21, 544, -319, 39, -326,
	125, 642, -343, 84, -372, -372, 114, -368, -365, 84,
	122, -370, 120, -239, -241, 398, 399, -370, -239, -240,
	-246, 153, 191, 257, 190, 189, 187, 398, 399, -258,
	-343, -370, -370, 84, -370, -370, 17, -343, -258, -366,
	-370, -195, -195, 84, 84, -438, -439, -438, -438, 84,
	84, 84, 84, -438, 84, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 83, 99, 101, 99, 101, -498,
	-596, 63, 623, 62, 426, 104, 311, 157, 99, 89,
	643, 157, 125, 89, -343, -343, 17, 240, -343, 17,
	89, 170, 89, -575, 315, 353, -450, 99, 315, 353,
	494, 390, 84, 157, -319, -211, -200, 83, -200, -565,
	465, 406, 416, -339, -362, -361, 355, 42, -484, 427,
	412, 413, -408, 271, -332, -571, 96, 125, 80, 338,
	342, 343, 339, 340, 341, -388, -389, -387, -391, -558,
	83, 83, -175, 35, 133, -171, 83, 83, 35, -461,
	328, -241, -234, -182, -343, 17, 157, -557, 156, -1,
	-343, -401, -355, -302, -370, -370, -302, -355, -355, -357,
	-343, -226, -461, -241, 35, -282, 237, 234, -435, 308,
	309, -436, -451, 311, -453, 83, -238, -319, -231, -529,
	-530, -390, -343, 110, -529, 110, 83, -238, -319, -319,
	-285, -319, -343, -343, -343, -343, -292, -291, -319, -294,
	32, -295, -343, -343, -343, -343, 110, -343, 110, -263,
	41, 48, 49, 50, -339, -339, 194, -266, 41, 426,
	428, 429, -294, 99, 99, 99, 99, 89, 89, 89,
	-339, -339, 99, 89, -346, 89, -531, 169, 45, 46,
	99, 99, 99, 99, 41, 89, -271, 41, 291, 295,
	292, 293, 294, 89, 99, 41, 99, 41, 99, 41,
	-343, 83, -532, -533, 89, 327, -450, -565, -339, 359,
	-422, 125, 125, -362, -570, 321, -174, 494, 32, -204,
	237, 234, -558, -413, -412, -319, -187, -187, -187, -187,
	68, 68, 68, 68, 73, 68, 73, 68, -310, -413,
	-189, -200, -346, 84, -581, -580, -579, -577, 76, 245,
	77, -376, 483, 487, 488, -409, -358, 89, -416, -208,
	24, -234, -234, -483, 301, 302, 84, 157, -241, -304,
	19, 156, -304, 118, -6, -139, -141, -370, -6, -370,
	617, 372, 618, 89, 99, 99, -513, 447, 442, 444,
	110, -379, -500, -499, 61, -175, -198, -492, -535, -498,
	-343, 643, 643, 643, 643, 61, -175, -492, -208, -505,
	-192, -191, 44, -343, 99, 17, -406, -401, 144, 144,
	-343, 383, -417, 89, 405, 89, 240, 643, 89, -326,
	-365, -370, 84, -249, 178, 177, -249, 35, 84, 84,
	-468, -468, -467, -470, -467, -249, -249, 84, 84, 24,
	84, 84, 84, -370, 84, 84, 157, -488, 503, -489,
	577, -438, -438, -438, -438, -438, -438, -438, -438, -438,
	-438, -438, -438, -438, -438, -438, -438, -381, -380, 263,
	448, 630, 630, 448, 630, 630, 84, 157, -538, 157,
	-334, 316, -334, -325, 89, 244, 89, 167, -343, 89,
	633, 89, -343, 89, 308, -343, -343, 89, 89, -223,
	-241, 84, 35, -227, -228, -229, -238, -230, -232, 35,
	-566, 93, -561, 89, -343, 90, -567, 93, 407, 155,
	357, 41, 408, 409, 424, 352, 99, 99, 414, -559,
	-343, -173, 240, 353, -569, 52, 125, 89, -234, -387,
	-331, 152, 282, 331, -299, -298, -343, 89, -227, -175,
	-234, -227, -227, -175, -462, 330, 21, 99, 143, -201,
	81, 156, -183, -235, -343, 144, 84, -302, -226, -302,
	-302, -355, -462, -175, -447, 312, 83, -445, 83, -445,
	110, 339, -454, -452, 263, -290, 45, 47, -241, -527,
	-343, -525, -527, -343, -525, -525, -390, -370, -290, -238,
	244, 31, 234, -293, 336, 337, 342, -418, 307, 115,
	-418, 157, -190, 157, -343, -258, -258, 31, 89, 89,
	-236, 84, 157, 125, 99, 89, -566, -561, 125, -423,
	89, 89, -567, -571, 125, -237, 240, -332, 157, -204,
	-204, -302, 157, 125, -206, -205, 80, 81, -207, 80,
	-205, 68, 68, -302, -579, -578, 24, -530, -530, -530,
	84, 84, 15, -213, 41, -303, 20, 21, 144, -303,
	122, 120, 122, 122, -343, 84, 84, -474, 608, -509,
	-511, 442, 21, 21, 15, 245, 84, -492, -492, -513,
	45, 46, -401, -417, 427, -234, 157, 643, -239, -370,
	84, -370, 84, 89, 84, 89, -195, 21, 84, 157,
	84, 84, 84, 157, 84, 84, -370, 84, -538, -335,
	188, 89, -335, 353, -344, -343, 17, -343, 89, -450,
	308, 308, 240, 238, -175, 84, 157, -175, 89, -564,
	418, 89, 89, 99, 41, 99, 155, 410, -485, -165,
	93, -236, 32, -204, -568, 93, 125, 642, 83, -339,
	-339, -339, -343, 84, 157, -339, -339, 84, 84, 84,
	-256, 544, -463, 262, 99, 143, 99, 143, 99, -341,
	-183, -343, -302, -557, 156, -302, -463, -437, 313, 99,
	-366, 83, -366, 83, -446, 310, 83, 84, 157, -343,
	-319, -253, -252, -250, 104, 115, 41, 396, -251, 93,
	152, 296, 299, 298, 274, 297, -280, -359, 80, 402,
	336, 337, -391, 608, 532, 247, 109, 110, 384, -360,
	83, 83, 81, 316, 83, 83, -527, 84, -290, -319,
	41, -293, 41, 349, 307, -291, -343, 152, -258, 84,
	-533, 89, -538, -564, 89, -425, -569, 89, -165, -236,
	-558, -195, -412, -498, -370, 83, -370, 83, 68, 11,
	19, -363, -370, -378, 246, -6, 618, 372, -273, 609,
	89, 21, 89, -507, 89, -413, -474, -134, -270, -331,
	279, 84, 84, 84, -438, -438, -441, -440, -444, 448,
	308, 456, -378, 89, 89, 84, 84, 89, -343, 167,
	89, 642, 89, -450, -450, -343, -215, -241, -169, 544,
	-256, -229, -169, 21, 544, 356, 41, 99, 41, 411,
	89, -173, 125, 105, 106, -327, -328, 89, -396, -398,
	-319, 83, -258, -260, 89, -298, -363, -363, -254, -175,
	35, -255, -296, -391, 544, -133, -132, -254, 544, 83,
	-464, 161, 99, 143, 99, 99, -302, -302, -464, -453,
	21, 84, -432, 84, -432, 83, 125, -366, -452, -455,
	61, -250, 104, -366, 89, -260, -261, 41, 295, 291,
	125, 125, -262, 41, 275, 276, -272, 83, 306, 15,
	194, 83, 110, 110, -234, -396, -396, -528, 338, 339,
	340, 344, 342, 343, 341, -528, -396, -396, 83, -419,
	-418, -366, -339, -339, 152, -568, -196, -199, -526, -343,
	247, 21, 21, -343, -343, -323, 610, 99, 89, 444,
	-273, -475, 611, -503, -445, -258, 125, 84, -443, 117,
	410, 414, -364, -367, 99, 101, 186, 155, 84, 84,
	-343, -330, -329, 89, 89, 89, 308, 543, -170, 60,
	490, 89, 90, 405, 89, 90, 356, -165, 89, 643,
	157, 125, 84, 157, -467, -370, -433, 263, -175, 157,
	-296, -331, -134, -433, -257, -297, -343, 89, -482, 169,
	329, 544, 99, 143, 99, -195, -465, 169, 329, -436,
	84, 84, 84, -432, 99, 84, -459, -456, 83, -296,
	265, 135, 89, 89, 99, 83, -493, 31, 89, -397,
	83, 84, 84, 84, 84, -396, 99, -258, -339, 84,
	84, 157, 83, 21, -323, -476, 612, 89, -512, 447,
	-506, -504, 442, 443, 444, 445, 89, -442, -443, 414,
	-364, -367, 606, 454, 454, 454, 643, 157, 125, -450,
	-217, -343, 306, 427, -328, 89, -399, -398, -190, 84,
	-434, 315, 21, -296, -339, -434, 84, 157, -339, -339,
	329, 99, 143, 99, -196, 329, -448, 314, 84, -459,
	-296, -458, -457, 313, 266, 83, 84, -370, -382, -339,
	84, -275, -274, 540, -396, -399, 81, -399, 81, -399,
	81, -399, 81, 84, -258, -343, 247, -324, -343, -507,
	89, -514, 245, -510, -511, 446, -504, 21, 444, 21,
	21, -135, 157, 114, 455, 455, 455, -329, 89, 89,
	-216, 35, 449, 383, -400, 253, 349, 350, 93, 544,
	336, 337, -190, 21, -435, -258, -297, -363, -363, 99,
	99, 84, 157, -343, 262, 83, -377, -371, -370, 262,
	84, -343, -279, -277, -278, 80, 461, 304, 305, 84,
	-528, -528, -528, -528, -280, 84, 157, -521, 83, 99,
	-509, -508, -510, 21, -507, 21, -507, -507, 451, -442,
	89, -339, -339, 89, 89, 335, -319, 83, -447, -457,
	-456, -377, 84, 157, -418, -278, 80, -277, 80, 16,
	15, -399, -399, -399, -399, -343, -524, 31, 84, -520,
	-519, -320, -515, -343, 447, 448, 89, -507, 125, -599,
	-598, 629, 99, 99, -343, -432, -437, 84, -371, -276,
	301, 302, 31, 169, -276, -523, -522, -321, 84, 157,
	156, 89, 89, 84, -453, 104, 41, 303, 157, 125,
	-519, -343, -522, 41, -370, 156, -343,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 0, 309, 310, 311, 930,
	931, 932, 933, 934, 935, 936, 937, 938, 0, 0,
	0, 0, 0, 687, 688, 0, 651, 0, 0, 0,
	0, 0, 0, 534, 535, 536, 537, 538, 539, 540,
	541, 542, 543, 544, 545, 546, 547, 548, 549, 550,
	551, 552, 553, 554, 555, 556, 557, 558, 559, 560,
	561, 562, 563, 564, 565, 566, 567, 410, 411, 412,
	413, 414, 415, 416, 417, 418, 419, 0, 334, 330,
	253, 254, 255, 256, 257, 258, 341, 342, 511, 0,
	0, 0, 0, 770, -2, 97, 0, 0, 0, 0,
	323, 0, 314, 314, 939, 940, 941, 942, 943, 944,
	945, 946, 947, 948, 949, 950, 951, -2, 700, 0,
	652, 653, 654, 655, 656, 657, 658, 659, 660, 661,
	662, 663, 664, 665, 666, 667, 668, 394, 395, 396,
	390, 391, 393, 392, -2, 0, 0, 700, 0, 0,
	0, 778, 0, 0, 0, 821, 843, 23, 0, 7,
	9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
	0, 0, 19, 0, 19, 0, 0, 0, 1354, 1355,
	1356, 1357, 2139, 2109, -2, 1880, 1857, 2033, 2034, 1934,
	1945, 2170, 2171, 2172, 2173, 2174, 2175, 2176, 2177, 2178,
	2179, 2180, 2181, 2182, 2183, 2184, 2185, 2186, 2187, 2188,
	2189, 2190, 2191, 2192, 2193, 2194, 2195, 2196, 2197, 2198,
	2199, 2200, 2201, 2202, 2203, 2204, 2205, 2206, 2207, 2208,
	2209, 2210, 2211, 2212, 2213, 2214, 2215, 2216, 2217, 2218,
	2219, 1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822,
	1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832,
	1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842,
	1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852,
	1853, 1854, 1855, 1856, 1858, 1859, 1860, 1861, 1862, 1863,
	1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873,
	1874, 1875, 1876, 1877, 1878, 1879, 1881, 1882, 1883, 1884,
	1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894,
	1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904,
	1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914,
	1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924,
	1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1935,
	1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1947,
	1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957,
	1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967,
	1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977,
	1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987,
	1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997,
	1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,
	2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017,
	2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027,
	2028, 2029, 2030, 2031, 2032, 2035, 2036, 2037, 2038, 2039,
	2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049,
	2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059,
	2060, 2061, 2062, 2063, 2064, 2065, -2, 2067, 2068, 2069,
	2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079,
	2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089,
	2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099,
	2100, 2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108, 2110,
	2111, 2112, 2113, 2114, 2115, 2116, 2117, 2118, 2119, 2120,
	2121, 2122, 2123, 2124, -2, -2, -2, 2128, 2129, 2130,
	2131, 2132, 2133, 2134, 2135, 2136, 2137, 2138, 2140, 2141,
	2142, 2143, 2144, 2145, 2146, 2147, 2148, 2149, 2150, 2151,
	2152, 2153, 2154, 2155, 2156, 2157, 2158, 2159, 0, 307,
	305, 1827, 1857, 1880, 1934, 1945, 1946, 1981, 2033, 2034,
	2066, 2109, 2125, 2126, 2127, 2139, 0, 0, 956, 0,
	748, 0, 0, 753, 1303, 748, 335, 689, 690, 778,
	804, 649, 0, 372, 0, 1871, 376, 2116, 0, 0,
	0, 646, 366, 367, 368, 369, 370, 371, 0, 0,
	929, 0, 0, 362, 0, 329, 1936, 2138, 1358, 0,
	0, 0, 0, 0, 196, 1080, 198, 1082, 202, 210,
	0, 0, 0, 215, 216, 219, 220, 221, 222, 223,
	0, 227, 0, 229, 232, 0, 234, 235, 0, 238,
	239, 240, 0, 250, 251, 252, 1083, 1084, 1085, -2,
	125, 954, 1785, 1671, 0, 1678, 1691, 1702, 1435, 1436,
	1437, 1438, 0, 0, 0, 0, 0, 0, 1446, 1447,
	0, 1475, 2174, 2215, 2216, 0, 1455, 1456, 1457, 1458,
	1459, 1460, 136, 148, 149, 1724, 1725, 1726, 1727, 1728,
	1729, 1730, 0, 1732, 1733, 1734, 1642, 1422, 1354, 0,
	2183, 0, 2205, 2210, 2211, 2212, 2213, 2204, 0, 0,
	1627, 0, 1617, 0, 0, -2, -2, 0, 0, 2006,
	-2, 2217, 2218, 2219, 2180, 2201, 2209, 2184, 2185, 2208,
	2176, 2177, 2178, 2171, 2172, 2173, 2175, 2187, 2189, 2200,
	0, 2196, 2206, 2207, 2114, 0, 0, 0, 0, 0,
	2156, 150, 151, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	1638, -2, -2, 1641, -2, 1644, -2, -2, -2, -2,
	1649, 1650, -2, 1652, -2, -2, -2, -2, -2, -2,
	-2, 1629, 1630, 1631, 1632, 1621, 1622, 1623, 1624, 1625,
	1626, -2, -2, -2, 804, 879, 0, 804, 0, 779,
	826, 829, 832, 835, 782, 0, 0, 98, 99, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 324, 325,
	313, 315, 0, 319, 0, 312, 1116, 1116, 1116, 0,
	0, 0, 0, 1116, 1116, 1116, 1116, 1116, 0, 1116,
	0, 0, 0, 0, 0, 1116, 0, 989, 1087, 1088,
	1089, 1114, 1115, 1188, 0, 0, 0, 705, 701, 702,
	703, 704, 792, 0, 794, 797, 0, 626, 626, 852,
	852, 572, 0, 0, 0, 626, 0, 586, 578, 0,
	0, 0, 626, 0, 0, 799, 799, 0, 629, 636,
	626, 626, -2, 626, 626, 623, 626, 0, 0, 1128,
	592, 593, 594, 578, 578, 597, 598, 599, 609, 610,
	637, 1809, 0, 0, 511, 511, 0, 511, 511, 0,
	511, 511, 511, 0, 707, 1976, 1878, 1951, 1837, 1936,
	2138, 0, 280, 2006, 285, 0, 1879, 1898, 0, 0,
	1916, 0, -2, 0, 351, 804, 0, 0, 778, 0,
	0, 0, 0, 511, 511, 511, 511, 511, 1187, 511,
	511, 511, 511, 511, 0, 0, 0, 511, 511, 511,
	511, 0, 0, 844, 845, 840, 841, 842, 846, 847,
	5, 6, 19, 0, 0, 0, 0, 0, 0, 104,
	103, 0, 1786, 1804, 1737, 1738, 1739, 1791, 1741, 1795,
	1795, 1795, 1795, 1770, 1771, 1772, 1773, 1774, 1775, 1776,
	1777, 1778, 1779, 1795, 1795, 0, 0, 1784, 1761, 1793,
	1793, 1793, 1791, 1788, 1742, 1743, 1744, 1745, 1746, 1747,
	1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755, 1798, 1798,
	1801, 1801, 1798, 0, 408, 406, 407, 1667, 0, 0,
	0, 0, 748, 752, 1301, 0, 0, 0, 804, -2,
	0, 0, 650, 373, 1359, 0, 0, 377, 0, 378,
	0, 0, 0, 397, 0, 400, 385, 386, 387, 381,
	0, 176, 0, 364, 365, 0, 0, 331, 0, 0,
	0, 512, 0, 0, 0, 0, 0, 0, 207, 203,
	211, 214, 224, 231, 0, 243, 245, 248, 204, 212,
	217, 218, 225, 246, 205, 208, 209, 213, 247, 249,
	206, 226, 230, 244, 228, 233, 236, 237, 242, 0,
	177, 0, 0, 0, 0, 0, 1677, 0, 0, 1710,
	1711, 1712, 1713, 1714, 1715, 1716, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, -2, 1671, 0, 0, 1441,
	1442, 1443, 1444, 0, 1448, 0, 1476, 0, 0, 0,
	0, 0, 1731, 1735, 0, 1667, 1667, 0, 1667, 1663,
	0, 0, 0, 0, 0, 0, 1667, 1600, 0, 0,
	1602, 1618, 0, 0, 1604, 1605, 0, 1608, 1609, 1667,
	0, 1667, 1613, 1667, 1667, 1667, 1596, 1597, 0, 1663,
	1663, 1663, 1663, 0, 0, 1663, 1663, 1663, 1663, 1663,
	1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663, 0,
	0, 0, 0, 799, 0, 805, 0, -2, 0, 823,
	825, 827, 828, 830, 831, 833, 834, 836, 837, 784,
	0, 0, 100, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 317, 0, 322, 0, 0,
	0, 0, 0, 953, 0, 0, 1116, 1116, 1116, 990,
	0, 0, 0, 0, 0, 0, 0, 0, 1116, 1116,
	1116, 1116, 0, 1134, 0, 0, 0, 707, 706, 0,
	793, 0, 0, 0, 852, 0, 0, 569, 570, 0,
	571, 0, 578, 626, 626, 584, 585, 580, 579, 632,
	633, 629, 0, 629, 629, 852, 0, 603, 604, 605,
	626, 626, 611, 800, 0, 612, 613, 629, 0, 634,
	635, 852, 0, 0, 852, 852, 0, 621, 622, 624,
	626, 0, 0, 1116, 0, 642, 580, 580, 1810, 1811,
	0, 0, 1125, 0, 0, 0, 0, 645, 0, 0,
	0, 424, 425, 0, 0, 708, 259, 263, 0, 266,
	0, 1976, 0, 1976, 0, 0, 273, 0, 0, 0,
	0, 0, 0, 303, 304, 0, 0, 0, 0, 294,
	297, 1295, 1296, 1077, 1078, 298, 299, 343, 344, 0,
	799, 822, 824, 818, 819, 820, 0, 0, 0, 0,
	0, 0, 0, 511, 0, 0, 0, 0, 0, 683,
	0, 969, 685, 0, 0, 0, 0, 0, 860, 854,
	856, 924, 136, 860, 8, 121, 118, 0, 19, 0,
	0, 19, 19, 0, 19, 308, 0, 1807, 1805, 1806,
	1740, 1792, 0, 1766, 0, 1767, 1768, 1769, 1780, 1781,
	0, 0, 1762, 0, 1763, 1764, 1765, 1756, 0, 1757,
	1758, 0, 1759, 1760, 306, 405, 0, 0, 1668, 957,
	0, 726, 740, 721, 0, 729, 0, 0, 1303, 0,
	0, 0, 709, 740, 711, 0, 729, 799, 776, 0,
	754, 0, 0, 374, 0, 382, 379, 0, 383, 0,
	0, 399, 401, 402, 403, 388, 389, 647, 360, 361,
	352, 353, 354, 355, 356, 357, 358, 359, 0, 0,
	0, 363, 146, 0, 332, 333, 0, 0, 0, 190,
	191, 192, 193, 194, 195, 197, 181, 672, 674, 1069,
	1081, 0, 1072, 0, 200, 241, 173, 0, 0, 0,
	1672, 1673, 1674, 1675, 1676, 1681, 0, 1683, 1685, 1687,
	1689, 0, 1707, -2, -2, 1423, 1424, 1425, 1426, 1427,
	1428, 1429, 1430, 1431, 1432, 1433, 1434, 1692, 1705, 1706,
	0, 0, 0, 0, 0, 0, 1703, 1703, 1698, 0,
	1461, 1297, 1298, 1439, 0, 0, 1473, 1477, 0, 0,
	0, 0, 0, 137, 1662, 1567, 1568, 1569, 1570, 1571,
	1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581,
	1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591,
	1592, 1593, 1594, 1595, 0, 0, 1671, 0, 0, 0,
	1664, 1665, 0, 0, 0, 1555, 0, 0, 1561, 1562,
	1563, 0, 735, 0, 1628, 1601, 1619, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 878, 880, 0, 744, 746, 747,
	773, 754, 780, 0, 0, 0, 96, 101, 0, 1155,
	0, 0, 0, 0, 0, 0, 0, 71, 73, 0,
	1129, 0, 1131, 326, 327, 0, 0, 321, 0, 0,
	0, 0, 0, -2, 0, 0, 0, 0, 0, 1005,
	1006, 509, 1063, 0, 0, 0, 1079, 1104, 1112, 0,
	0, 0, 0, 0, 1161, 991, 996, 997, 998, 992,
	993, 999, 1000, 0, 795, 0, 0, 893, 70, 568,
	627, 628, 853, 575, 1936, 580, 852, 852, 587, 581,
	588, 631, 589, 590, 591, 629, 852, 852, 801, 626,
	629, 614, 630, 629, 1303, 618, 0, 625, 1303, 643,
	1303, 0, 641, 595, 596, 1163, 797, 422, 423, 428,
	430, 0, 479, 479, 479, 462, 479, 0, 0, 450,
	1812, 0, 0, 0, 0, 459, 1812, 0, 0, 1812,
	1812, 1812, 1812, 1812, 1812, 1812, 0, 0, 1812, 1812,
	1812, 1812, 1812, 1812, 1812, 1812, 1812, 1812, 1812, 0,
	1812, 1812, 1812, 1812, 1812, 1280, 1812, 0, 478, 1126,
	469, 470, 471, 472, 477, 0, 0, 506, 0, 0,
	1004, 0, 509, 0, 1046, 0, 0, 865, 0, 866,
	867, 863, 895, 919, 919, 0, 919, 899, 1303, 0,
	0, 271, 272, 260, 0, 261, 0, 0, 274, 275,
	0, 277, 278, 279, 286, 1878, 1951, 281, 283, 0,
	0, 287, 300, 301, 302, 0, 0, 292, 293, 0,
	0, 346, 347, 349, 0, 754, 1130, 72, 669, 1299,
	670, 671, 675, 0, 0, 678, 679, 680, 681, 682,
	971, 0, 0, 1055, 1056, 1057, 1058, 852, 0, 861,
	0, 857, 925, 0, 927, 0, 852, 0, 119, 19,
	0, 112, 109, 0, 0, 0, 0, 0, 1787, 1736,
	1808, 0, 0, 0, 1789, 0, 0, 0, 0, 0,
	102, 756, 716, 0, 720, 737, 0, 741, 0, 0,
	733, 725, 730, 0, 0, 750, 717, 1302, 0, 0,
	0, 710, 0, 0, 715, 754, 0, 777, 806, 807,
	810, 1360, 0, 384, 380, 398, 0, 511, 0, 0,
	0, 184, 1066, 0, 185, 189, 179, 0, 0, 0,
	1071, 0, 1068, 1073, 0, 199, 0, 0, 174, 175,
	1146, 1155, 0, 0, 0, 1682, 1684, 1686, 1688, 1690,
	0, 1693, 1703, 1703, 1699, 0, 1694, 0, 1696, 0,
	1672, 1445, 0, 1478, 0, 0, 0, 0, 0, 0,
	0, 0, 1545, 1546, 0, 0, 1550, 0, 1552, 1553,
	1554, 1556, 0, 0, 0, 1560, 0, 1599, 1620, 1603,
	1606, 0, 1610, 0, 1612, 1614, 1615, 1616, 0, 804,
	804, 0, 0, 1517, 1517, 1517, 0, 0, 0, 0,
	1517, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1462, 0, 1463, 1464, 0, 0, 0, 881, 774,
	0, 0, 0, 0, 0, 1153, 0, 86, 0, 0,
	0, 0, 91, 0, 0, 74, 75, 328, 316, 318,
	0, 0, 1117, 0, 0, 0, 0, 0, 959, 960,
	962, 0, 965, 966, 967, 971, 797, 0, 797, 1016,
	1812, 513, 0, 0, 1065, 0, 1035, 0, 0, 0,
	-2, 0, 0, 1112, 0, 0, 0, 1165, 0, 0,
	0, 694, 698, 23, 798, 0, 573, 0, 574, 626,
	582, 583, 852, 606, 607, 0, 0, 852, 626, 626,
	617, 629, 638, 0, 639, 1303, 1165, 0, 0, 1125,
	1231, 1199, 440, 0, 1315, 1316, 480, 0, 1322, 1331,
	1116, 1392, 0, 1331, 0, 0, 1333, 1334, 0, 0,
	0, 0, 463, 464, 0, 449, 0, 0, 0, 0,
	0, 0, 448, 0, 0, 490, 0, 0, 0, 0,
	0, 1813, 1812, 1812, 0, 457, 458, 0, 461, 0,
	0, 0, 0, 0, 0, 0, 0, 1812, 1812, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1271, 0, 0, 0, 0, 0, 0, 0, 0, 1287,
	1288, 0, 1016, 1812, 0, 0, 0, 0, 513, 1033,
	1051, 0, 426, 427, 487, 0, 0, 0, 0, 0,
	885, 0, 0, 0, 884, 0, 0, 0, 0, 0,
	797, 920, 0, 922, 923, 897, -2, 0, 865, 902,
	1667, 264, 265, 0, 0, 270, 288, 290, 262, 0,
	0, 0, 289, 291, 295, 296, 345, 348, 350, 816,
	0, 0, 1189, 0, 972, 973, 975, 976, 0, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 1862, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 970, 686, 850, 855, 862, 926,
	928, 137, 858, 850, 0, 122, 19, 121, 113, 114,
	0, 19, 0, 0, 0, 0, 1797, 1796, 1782, 0,
	1783, 1794, 1799, 0, 1802, 0, 409, 760, 0, 0,
	740, 742, 0, 0, 740, 0, 0, 749, 0, 0,
	0, 0, 0, 0, 740, 816, 756, 0, 813, 811,
	812, 0, 0, 648, 147, 404, 0, 0, 0, 0,
	0, 673, 0, 1070, 181, 0, 0, 201, 0, 0,
	0, 1155, 1150, 1666, 1695, 1697, 0, 1704, 1700, 1440,
	1449, 1474, 0, 0, 1480, 1492, 1492, 0, 0, 0,
	1483, 1795, 1795, 1486, 1791, 1793, 1791, 1492, 1492, 0,
	138, 0, 0, 1551, 0, 0, 0, 736, 0, 0,
	0, 1513, 1515, 1517, 1517, 1524, 1518, 1525, 1526, 1517,
	1517, 1517, 1517, 1531, 1517, 1517, 1517, 1517, 1517, 1517,
	1517, 1517, 1517, 1517, 1511, 0, 0, 1725, 1726, 745,
	0, 0, 787, 788, 789, 790, 791, 0, 0, 61,
	61, 1155, 0, 95, 87, 0, 0, 0, 0, 0,
	76, 320, 0, 77, 78, 0, 0, 85, 0, 0,
	0, 0, 0, 964, 0, 0, 0, 1308, 0, 1020,
	1017, 1018, 1019, 0, 1060, 514, 515, 516, 517, 0,
	0, 0, 1064, 0, 0, 1028, 0, 0, 0, 1105,
	1106, 1107, 1108, 1109, 1110, 1111, -2, 1120, 0, 0,
	0, 1308, 1139, 0, 0, 1144, 1308, 1308, 0, 1173,
	0, 1162, 748, 0, -2, 0, 0, 696, 0, 0,
	894, 576, 852, 600, 802, 803, 1303, 852, 852, 626,
	644, 640, 1173, 1164, 0, 429, 479, 0, 1219, 0,
	0, 1225, 0, 1232, 433, 0, 481, 0, 1321, 1348,
	1332, 1348, 1393, 1348, 1348, 1116, 0, 481, 0, 0,
	451, 0, 0, 0, 0, 0, 447, 484, 810, 434,
	436, 437, 438, 488, 489, 491, 0, 493, 494, 453,
	465, 466, 467, 468, 0, 0, 0, 460, 473, 474,
	475, 476, 435, 1248, 1249, 1250, 1253, 1254, 1255, 1256,
	0, 0, 1259, 1260, 1261, 1262, 1263, 1345, 1346, 1347,
	1264, 1265, 1266, 1267, 1268, 1269, 1270, 1289, 1290, 1291,
	1292, 1293, 1294, 1272, 1273, 1274, 1275, 1276, 1277, 1278,
	1279, 0, 0, 1284, 0, 0, 0, 1020, 0, 0,
	0, 0, 0, 1060, 1035, 0, 1053, 0, 1047, 1048,
	0, 0, 718, 852, 338, 0, 889, 882, 0, 871,
	886, 887, 888, 874, 0, 876, 0, 872, 873, 852,
	864, 896, 921, 898, 901, 903, 904, 910, 0, 0,
	0, 0, 267, 268, 269, 276, 0, 533, 282, 772,
	0, 1300, 676, 677, 1190, 1191, 684, 0, 977, 848,
	0, 0, 848, 117, 120, 0, 115, 0, 0, 0,
	0, 107, 105, 1790, 0, 0, 762, 161, 0, 0,
	0, 738, 0, 743, 740, 724, 734, 723, 731, 732,
	751, 1304, 1305, 1306, 1307, 740, 714, 713, 775, 760,
	808, 809, 0, 1361, 375, 0, 1067, 181, 186, 187,
	188, 182, 180, 1074, 0, 1076, 0, 1148, 0, 0,
	1701, 1479, 1450, 1481, 1493, 1494, 1482, 0, 1452, 1453,
	1484, 1485, 1487, 1488, 1489, 1490, 1491, 1454, 1547, 0,
	1549, 1557, 1558, 0, 1607, 1611, 0, 0, 0, 0,
	0, 1522, 1523, 1527, 1528, 1529, 1530, 1532, 1533, 1534,
	1535, 1536, 1537, 1538, 1539, 1540, 1541, 804, 1512, 0,
	0, 0, 0, 0, 0, 0, 785, 0, 0, 0,
	63, 0, 63, 1154, 1156, 0, 924, 0, 0, 92,
	0, 0, 79, 80, 0, 0, 0, 952, 955, 961,
	963, 0, 0, 0, 1309, 1310, 1312, 1313, 1314, 0,
	988, 0, 0, 1008, 1009, 1010, 1022, 0, 0, 0,
	519, 520, 0, 0, 0, 532, 528, 529, 530, 510,
	1059, 1042, 0, 0, 1031, 0, 0, 1041, 0, 1121,
	1812, 1812, 1812, 0, 0, 1233, 1812, 1812, 0, 1141,
	1143, 0, 0, 1237, 1176, 0, 0, 1167, 0, 919,
	0, 0, 852, 695, 698, 699, 796, 577, 615, 619,
	616, 852, 1176, 421, 1197, 0, 0, 0, 0, 0,
	1229, 0, 0, 1201, 0, 452, 482, 0, -2, 0,
	1349, 0, 1335, 1349, 0, 0, 1348, 0, 441, 481,
	0, 0, 0, 495, 499, 500, 0, 497, 1388, 0,
	498, 0, 486, 0, 492, 1251, 1252, 0, 1257, 1258,
	0, 1282, 0, 0, 0, 432, 501, 0, 0, 0,
	502, 503, 508, 1028, 0, 1042, 0, 1052, 0, 1049,
	1050, 804, 0, 0, 868, 890, 0, 0, 869, 0,
	870, 875, 877, 337, 905, 0, 0, 907, 908, 909,
	900, 284, 817, 974, 0, 838, 0, 0, 859, 839,
	0, 19, 0, 0, 110, 1800, 1803, 764, 0, 761,
	162, 0, 0, 0, 0, 728, 739, 722, 712, 762,
	814, 815, 183, 178, 1075, 1158, 0, 1149, 0, 0,
	1559, 0, 1517, 1514, 1517, 1516, 1508, 0, 1465, 0,
	1467, 1468, 1469, 0, 1471, 1472, 0, 783, 0, 59,
	0, 62, 60, 0, 94, 88, 0, 0, 0, 0,
	0, 0, 0, 0, 994, 1237, 0, 994, 1021, 1007,
	0, 1061, 1062, 0, 521, 522, 0, 525, 531, 1023,
	0, 0, 1025, 1026, 1027, 0, 0, 1039, 0, 0,
	0, 0, 1113, 1127, 0, 0, 0, -2, 0, -2,
	1138, 0, 1182, 0, 1174, 0, 1166, 0, 1169, 852,
	852, -2, 692, 697, 0, 620, 1182, 1199, 0, 1220,
	0, 0, 0, 0, 0, 0, 0, 1200, 0, 1213,
	483, 1350, -2, 1364, 1366, 0, 1126, 1369, 1370, 0,
	0, 0, 0, 0, 0, 1414, 1378, 0, 0, 1382,
	1383, 1384, 0, 0, 1387, 0, 1719, 1720, 0, 1391,
	0, 0, 0, 0, 0, 0, 0, 1329, 442, 443,
	0, 445, 446, 1812, 1389, 485, 439, 1812, 455, 1281,
	1285, 1286, 1283, 507, 504, 505, 1031, 1034, 1045, 1054,
	719, 799, 339, 340, 891, 0, 883, 914, 911, 0,
	0, 978, 849, 851, 111, 116, 0, 0, 766, 0,
	763, 0, 757, 759, 172, 727, 764, 132, 164, 0,
	0, 1451, 1548, 1598, 1520, 1521, 0, 1509, 0, 1503,
	1504, 1505, 1510, 0, 0, 786, 781, 64, 90, 0,
	93, 68, 81, 0, 0, 0, 0, 980, 987, 1001,
	1132, 1311, 986, 0, 0, 518, 523, 0, 526, 527,
	1043, 1042, 0, 1029, 1030, 0, 1037, 0, 0, 1100,
	1791, 0, 1122, 1123, 1124, 1234, 1235, 1236, 1192, 1140,
	0, -2, 1245, 0, 0, 1136, 1158, 1192, 0, 0,
	1170, 0, 1177, 0, 1175, 1168, 804, 693, 1179, 431,
	1231, 1221, 0, 1223, 0, 0, 0, 0, 1202, -2,
	0, 1365, 1367, 1368, 1371, 1372, 1373, 1419, 1420, 1421,
	0, 0, 1376, 1416, 1417, 1418, 1377, 0, 0, 0,
	0, 0, 1717, 1718, 1412, 0, 0, 1336, 1338, 1339,
	1340, 1341, 1342, 1343, 1344, 1337, 0, 0, 0, 1328,
	1330, 444, 0, 0, 1812, 1044, 336, 0, 0, 915,
	917, 912, 913, 106, 108, 123, 0, 765, 163, 0,
	766, 134, 0, 155, 0, 1159, 0, 1519, 1506, 0,
	0, 0, 0, 0, 1721, 1722, 1723, 0, 1466, 1470,
	89, 0, 66, 0, 82, 83, 0, 0, 0, 1002,
	1003, 1011, 1012, 0, 1014, 1015, 524, 1024, 1032, 1036,
	1039, 0, 1091, 0, 810, 0, 1194, 0, 1142, 1125,
	1247, 1812, 1145, 1194, 0, 1239, 1812, 1812, 1160, 0,
	1172, 0, 1184, 0, 1178, 799, 420, 0, 1181, 1217,
	1222, 1224, 1226, 0, 1230, 1228, 1203, -2, 0, 1211,
	0, 0, 1374, 1375, 0, 0, 1617, 1812, 0, 1407,
	0, 1091, 1091, 1091, 1091, 0, 496, 454, 0, 892,
	906, 0, 0, 0, 755, 124, 0, 133, 152, 0,
	165, 166, 0, 0, 0, 0, 1151, 0, 1495, 0,
	0, 0, 1499, 1500, 1501, 1502, 65, 68, 0, 0,
	0, 979, 0, 1013, 1038, 1040, 1090, 1101, 1102, 810,
	1135, 0, 1231, 1246, 0, 1137, 1238, 0, 0, 0,
	1171, 1183, 0, 1186, 691, 1180, 1198, 0, 1227, 1204,
	1212, 0, 1207, 0, 0, 0, 1415, 0, 1381, 0,
	1386, 1395, 1408, 0, 0, 1317, 0, 1319, 0, 1323,
	0, 1325, 0, 0, 456, 916, 918, 0, 768, 758,
	135, 139, 0, 161, 158, 0, 167, 0, 0, 0,
	0, 1147, 0, 0, 1496, 1497, 1498, 67, 69, 84,
	0, 981, 982, 995, 1092, 1812, 1812, 0, 0, 0,
	1098, 1099, 1103, 0, 1219, 1251, 1240, 1241, 1242, 1185,
	1218, 1206, 0, -2, 1214, 0, 0, 1669, 1679, 1680,
	1379, 1385, 1394, 1396, 1397, 0, 1409, 1410, 1411, 1413,
	1091, 1091, 1091, 1091, 1327, 767, 0, 126, 0, 0,
	156, 157, 159, 0, 168, 0, 170, 171, 0, 1507,
	983, 0, 0, 1095, 1096, 0, 1195, 0, 1197, 1208,
	-2, 0, 1216, 0, 1380, 1398, 0, 1399, 0, 0,
	0, 1318, 1320, 1324, 1326, 769, 1157, 0, 140, 0,
	142, 144, 145, 1351, 153, 154, 160, 169, 0, 968,
	984, 0, 1093, 1094, 1097, 0, 1199, 1215, 1670, 1400,
	1402, 1403, 0, 0, 1401, 127, 128, 0, 141, 0,
	0, 1152, 985, 1196, 1193, 1404, 1406, 1405, 0, 0,
	143, 1352, 129, 130, 131, 0, 1353,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 116, 3, 3, 3, 147, 139, 3,
	83, 84, 144, 142, 157, 143, 156, 145, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 644, 641,
	126, 125, 127, 3, 645, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 149, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 642, 138, 643, 150,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 85, 86, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 117, 118, 119, 120, 121, 122, 123, 124,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	140, 141, 146, 148, 151, 152, 153, 154, 155, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 57956, 631, 57957, 632, 57958, 633, 57959, 634,
	57960, 635, 57961, 636, 57962, 637, 57963, 638, 57964, 639,
	57965, 640, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:829
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:836
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:842
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:850
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:856
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:860
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:875
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:879
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:885
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:890
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:894
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:927
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:941
		{
			var timestamp = yyDollar[2].str
			var isS3 = false
			var dir = yyDollar[4].str
			var parallelism = yyDollar[6].str
			var option []string
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:952
		{
			var timestamp = yyDollar[2].str
			var isS3 = true
			var dir string
			var parallelism string
			var option = yyDollar[5].strsUnion()
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:964
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:968
		{
			yyVAL.str = yyDollar[2].str
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:973
		{
			yyVAL.str = ""
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:977
		{
			yyVAL.str = yyDollar[2].str
		}
	case 65:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:983
		{
			yyLOCAL = &tree.CreateCDC{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				TaskName:    yyDollar[4].str,
				SourceUri:   yyDollar[5].str,
				SinkType:    yyDollar[6].str,
				SinkUri:     yyDollar[7].str,
				Tables:      yyDollar[8].str,
				Option:      yyDollar[10].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:997
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1001
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1005
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1009
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1016
		{
			yyLOCAL = &tree.ShowCDC{
				SourceUri: yyDollar[3].str,
				Option:    yyDollar[4].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1025
		{
			yyLOCAL = &tree.PauseCDC{
				SourceUri: yyDollar[3].str,
				Option:    yyDollar[4].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1034
		{
			yyLOCAL = tree.NewDropCDC(yyDollar[3].str, yyDollar[4].allCDCOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1040
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      true,
				TaskName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1047
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      false,
				TaskName: yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1056
		{
			yyLOCAL = &tree.ResumeCDC{
				SourceUri: yyDollar[3].str,
				TaskName:  yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1065
		{
			yyLOCAL = &tree.RestartCDC{
				SourceUri: yyDollar[3].str,
				TaskName:  yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1074
		{
			yyLOCAL = &tree.CreateSnapShot{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Object:      yyDollar[6].snapshotObjectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1084
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELCLUSTER,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1094
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1106
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				PitrValue:   yyDollar[6].int64ValUnion(),
				PitrUnit:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1116
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELCLUSTER,
				PitrValue:   yyDollar[8].int64ValUnion(),
				PitrUnit:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1126
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				AccountName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:   yyDollar[9].int64ValUnion(),
				PitrUnit:    yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1137
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:    yyDollar[9].int64ValUnion(),
				PitrUnit:     yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-12 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1148
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[9].cstrUnion().Compare()),
				PitrValue:    yyDollar[11].int64ValUnion(),
				PitrUnit:     yyDollar[12].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1162
		{
			yyLOCAL = yyDollar[1].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1170
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELCLUSTER,
				SnapShotName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}

		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1178
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELACCOUNT,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[6].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1186
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELDATABASE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1195
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELTABLE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[10].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1205
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELACCOUNT,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[9].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1217
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELACCOUNT,
				Name:      tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				TimeStamp: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1225
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1234
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				TimeStamp:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1244
		{
			yyLOCAL = &tree.RestorePitr{
				Level:          tree.RESTORELEVELACCOUNT,
				AccountName:    tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:           tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:      yyDollar[7].str,
				SrcAccountName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1254
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELCLUSTER,
				Name:      tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TimeStamp: yyDollar[6].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1264
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1284
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1290
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1297
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1305
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1311
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1320
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1330
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1338
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1346
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1354
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1364
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1372
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1382
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1389
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1398
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1408
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1412
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1418
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1422
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1428
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1437
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1447
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1451
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 120:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1457
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1466
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1470
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1476
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1497
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
			yyLOCAL.(*tree.Load).Param.Strict = yyDollar[11].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1511
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1518
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1522
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1528
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1532
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1538
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1545
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1553
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1557
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error strict flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1569
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1573
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1587
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1591
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1596
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1603
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1607
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1611
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1617
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1626
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1637
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1641
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1647
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1651
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1657
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1661
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1667
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1691
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            goto ret1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1710
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1714
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1718
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1723
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1727
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1736
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1746
		{
			yyVAL.str = ""
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1753
		{
			yyVAL.str = yyDollar[3].str
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1758
		{
			yyVAL.str = "\n"
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1765
		{
			yyVAL.str = yyDollar[3].str
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1770
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1774
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1802
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1806
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1812
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1820
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1840
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1859
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1884
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1888
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1892
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1897
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1901
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1907
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1920
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1931
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1944
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1948
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1958
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1971
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1984
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1990
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1996
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2004
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  dbName,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2014
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2024
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2028
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2032
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2036
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2040
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2044
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2051
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2055
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2061
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2068
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2077
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2081
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2087
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2091
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2095
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2099
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2103
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPGRADE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2107
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2111
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2115
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2119
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2123
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2127
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2131
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2135
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2139
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2143
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2147
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2151
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2155
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2159
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2163
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2167
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2171
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2175
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2179
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2183
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2187
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2191
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2195
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2199
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2203
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2207
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2211
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2215
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2219
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2223
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2227
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2231
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2235
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2239
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2243
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2247
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2251
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2255
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2259
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2263
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2267
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2271
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2275
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2279
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2283
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2287
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2301
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2308
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2315
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 262:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2324
		{
			var connID uint32
			switch v := yyDollar[5].item.(type) {
			case uint64:
				connID = uint32(v)
			case int64:
				connID = uint32(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.SetConnectionID{
				ConnectionID: connID,
			}
		}
		yyVAL.union = yyLOCAL
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2342
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2346
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2352
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2359
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2367
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2371
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2375
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2379
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2385
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2389
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2395
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2402
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2409
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2418
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2448
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2452
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2456
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2462
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2468
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2472
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2479
		{
			yyVAL.str = yyDollar[3].str
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2485
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2489
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2495
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2503
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2512
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2521
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2529
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2537
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2560
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2583
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2590
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2597
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2605
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2612
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2619
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2628
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2632
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2636
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2642
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2646
		{
			yyVAL.str = yyDollar[1].str
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2652
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2656
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2662
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2666
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2677
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2683
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2688
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2692
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2696
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2700
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2704
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2708
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 320:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2712
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2716
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2720
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2726
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2730
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2734
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2738
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2743
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2748
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2754
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2767
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2780
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2793
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2806
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2822
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 336:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2829
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2840
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].joinTableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2851
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2855
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2861
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2871
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2877
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2881
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:2887
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2893
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2897
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2901
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2905
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2911
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2924
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 360:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2930
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 361:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2934
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2940
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 363:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2944
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2950
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2956
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2967
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2973
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2977
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 374:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2981
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2985
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2989
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2993
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3001
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3009
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3019
		{
			if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3031
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3035
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 383:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3043
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 384:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3051
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3090
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3094
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:3100
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3106
		{
			yyVAL.str = yyDollar[1].str
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3111
		{
			yyVAL.str = "true"
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3112
		{
			yyVAL.str = "false"
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3113
		{
			yyVAL.str = yyDollar[1].str
		}
	case 404:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3118
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 405:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3124
		{
			yyLOCAL = &tree.UpgradeStatement{
				Target: yyDollar[3].upgrade_targetUnion(),
				Retry:  yyDollar[4].int64ValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3133
		{
			yyLOCAL = &tree.Target{
				AccountName:  yyDollar[1].str,
				IsALLAccount: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3140
		{
			yyLOCAL = &tree.Target{
				AccountName:  "",
				IsALLAccount: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 408:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3148
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3152
		{
			res := yyDollar[3].item.(int64)
			if res <= 0 {
				yylex.Error("retry value can not less than 0")
				yyLOCAL = -1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 420:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3177
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 421:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3200
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 422:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3210
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 423:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3217
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3226
		{
			alterTables := yyDollar[3].renameTableOptionsUnion()
			renameTables := tree.NewRenameTable(alterTables)
			yyLOCAL = renameTables
		}
		yyVAL.union = yyLOCAL
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterTable
//line mysql_sql.y:3234
		{
			yyLOCAL = []*tree.AlterTable{yyDollar[1].renameTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterTable
//line mysql_sql.y:3238
		{
			yyLOCAL = append(yyDollar[1].renameTableOptionsUnion(), yyDollar[3].renameTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AlterTable
//line mysql_sql.y:3244
		{
			var table = yyDollar[1].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			opt := tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
			alterTable.Options = []tree.AlterTableOption{opt}
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3255
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3259
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3265
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 431:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3269
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()

			partitionDef := tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)

			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 432:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3293
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var pitrValue = yyDollar[6].int64ValUnion()
			var pitrUnit = yyDollar[7].str
			yyLOCAL = tree.NewAlterPitr(ifExists, name, pitrValue, pitrUnit)
		}
		yyVAL.union = yyLOCAL
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3303
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3313
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3329
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3347
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3351
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3357
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3361
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3367
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 441:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3373
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3381
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3391
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3399
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3409
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3419
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3429
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3436
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3440
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3444
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3448
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3452
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3459
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3465
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3469
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3473
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3477
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3481
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3485
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3489
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3493
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3498
		{
			yyVAL.str = ""
		}
	case 479:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3529
		{
			yyVAL.str = ""
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3533
		{
			yyVAL.str = string("COLUMN")
		}
	case 481:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3538
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3544
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3550
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3558
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3562
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3568
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3576
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterOptionTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3583
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3589
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3595
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3601
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3607
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3614
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3621
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3629
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 496:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3635
		{
			val := int64(yyDollar[6].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = val
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3647
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3653
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3661
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3665
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 501:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3672
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 502:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3690
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 503:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3705
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.UNIQUE_CHECK_ON_AUTOINCR,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 504:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3720
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 505:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3735
		{
			assignments := []*tree.VarAssignmentExpr{
				{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 506:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3748
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 507:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3754
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].exprUnion(),
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 508:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3765
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 509:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3778
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3782
		{
			var UserName = yyDollar[3].str
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 511:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3790
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3794
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 513:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3799
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3803
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3819
		{
			yyLOCAL = tree.NewUserMiscOptionAccountUnlock()
		}
		yyVAL.union = yyLOCAL
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3823
		{
			yyLOCAL = tree.NewUserMiscOptionAccountLock()
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3827
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNone()
		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3831
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireInterval(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3838
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNever()
		}
		yyVAL.union = yyLOCAL
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3842
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireDefault()
		}
		yyVAL.union = yyLOCAL
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3846
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryDefault()
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3850
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3857
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalDefault()
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3861
		{
			var Value = yyDollar[4].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3868
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentNone()
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3872
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentDefault()
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3876
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentOptional()
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3880
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionFailedLoginAttempts(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3887
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3894
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeUnbounded()
		}
		yyVAL.union = yyLOCAL
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:3900
		{
			yyVAL.item = nil
		}
	case 532:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3905
		{
			yyVAL.item = nil
		}
	case 568:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3950
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3959
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3967
		{
			yyLOCAL = &tree.ShowSnapShots{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3975
		{
			yyLOCAL = &tree.ShowPitr{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3983
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 573:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3987
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 574:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3991
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{
				{UserName: yyDollar[5].cstrUnion().Compare()},
			}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 575:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4002
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4006
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 577:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4012
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 578:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4017
		{
		}
	case 580:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4021
		{
		}
	case 582:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4026
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 583:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4036
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4046
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4054
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4060
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 587:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4066
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 588:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4072
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 589:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4078
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 590:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4084
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 591:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4090
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4099
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4103
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4107
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4111
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4115
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4119
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4123
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4127
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 600:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4133
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 601:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4142
		{
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4144
		{
		}
	case 606:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4153
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4163
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4172
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4176
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4180
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4186
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4192
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4198
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4204
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4213
		{
			yyLOCAL = &tree.ShowTables{
				Open:     false,
				Full:     yyDollar[2].fullOptUnion(),
				DBName:   yyDollar[4].str,
				Like:     yyDollar[5].comparisionExprUnion(),
				Where:    yyDollar[6].whereUnion(),
				AtTsExpr: yyDollar[7].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4224
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4236
		{
			yyLOCAL = &tree.ShowDatabases{
				Like:     yyDollar[3].comparisionExprUnion(),
				Where:    yyDollar[4].whereUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4244
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4250
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4262
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4276
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4282
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4288
		{
			yyLOCAL = &tree.ShowAccountUpgrade{}
		}
		yyVAL.union = yyLOCAL
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4295
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4299
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4304
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4308
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4312
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 629:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4317
		{
			yyVAL.str = ""
		}
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4321
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 631:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4327
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 636:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4342
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4346
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 638:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4352
		{
			yyLOCAL = &tree.ShowCreateTable{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 639:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4360
		{
			yyLOCAL = &tree.ShowCreateView{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4367
		{
			yyLOCAL = &tree.ShowCreateDatabase{
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Name:        yyDollar[5].str,
				AtTsExpr:    yyDollar[6].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4375
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 642:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4381
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4387
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 644:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4392
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4400
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4406
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4411
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4417
		{
			yyLOCAL = tree.NewUnresolvedObjectName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4423
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 650:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4427
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 669:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4455
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 670:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4463
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 671:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4471
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4479
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 673:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4483
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:4489
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption *tree.AccountIdentified
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 675:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4502
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 676:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4510
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 677:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4519
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 678:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4525
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 679:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4533
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4541
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 681:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4549
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 682:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4555
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4563
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4569
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 685:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4577
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 686:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4583
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4593
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 690:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4598
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 691:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4605
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 692:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4621
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 693:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4634
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4645
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 695:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4649
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 696:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4655
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 697:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4661
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 698:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4670
		{
		}
	case 699:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4672
		{
		}
	case 700:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4675
		{
		}
	case 705:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4684
		{
		}
	case 707:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4688
		{
		}
	case 709:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4693
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4702
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4709
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4715
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4723
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4730
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4737
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4757
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4765
		{
			ins := yyDollar[5].insertUnion()
			ins.Table = yyDollar[3].tableExprUnion()
			ins.PartitionNames = yyDollar[4].identifierListUnion()
			ins.OnDuplicateUpdate = []*tree.UpdateExpr{nil}
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4775
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4779
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4785
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4792
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4798
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4806
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4813
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4820
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4839
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4843
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4847
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4852
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4856
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4860
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:4866
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4875
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4879
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4885
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 736:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4889
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4895
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4899
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4905
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4910
		{
		}
	case 742:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4914
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4921
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4925
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4932
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4937
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4941
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4947
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4951
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4957
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4961
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4966
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4970
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4983
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4994
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5005
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5027
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5050
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5058
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5067
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5071
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5084
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5088
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5093
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5097
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5104
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5109
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5116
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5122
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5126
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5130
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5134
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 776:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5138
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5142
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5147
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5151
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5157
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:5167
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5182
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5186
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5200
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5204
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5210
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5219
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5223
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5227
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5231
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5235
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5241
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5248
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5257
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5261
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:5267
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5275
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5279
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5284
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5288
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5294
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5298
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5302
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5307
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5311
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5317
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5323
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5327
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:5333
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5338
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5342
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5346
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5351
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5355
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5359
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5364
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5368
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5376
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5380
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5384
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5398
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5402
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5412
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5422
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5432
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5444
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5452
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5460
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5469
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5477
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5485
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5493
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5501
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5509
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5517
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5525
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 837:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5533
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5543
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5554
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5568
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5572
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5576
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 843:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5581
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5585
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5589
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5598
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5602
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5607
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5611
		{
			yyLOCAL = tree.GroupBy(yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5616
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5620
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5626
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 855:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5630
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5636
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5640
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5644
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5648
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion(), yyDollar[3].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5653
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix, nil)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5661
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5667
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5675
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 864:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5683
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].joinTableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5693
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 868:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5699
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 869:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5708
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 870:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5717
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 871:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5726
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 872:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5736
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 873:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5740
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 874:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5750
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 875:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5754
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 876:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5758
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 877:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5762
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 878:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5768
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5778
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 880:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5782
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 881:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5788
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 882:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5794
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 883:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5798
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5804
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5810
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 886:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5814
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 887:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5818
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 888:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5822
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS_L2
		}
	case 889:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5828
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5832
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 891:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5838
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 892:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5842
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5848
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 894:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5852
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5858
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 896:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5862
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 897:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5872
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 898:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5885
		{
			yyLOCAL = yyDollar[2].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:5891
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 900:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5897
		{
			name := tree.NewUnresolvedName(yyDollar[1].cstrUnion())
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:     tree.FuncName2ResolvableFunctionReference(name),
					FuncName: yyDollar[1].cstrUnion(),
					Exprs:    yyDollar[3].exprsUnion(),
					Type:     tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 901:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:5911
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 902:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5922
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 904:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5929
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 905:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5933
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:5939
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5949
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5953
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 909:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5957
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 910:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5962
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 911:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5966
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 912:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5970
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 913:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5974
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 914:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5979
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 915:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5983
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 916:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5987
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 917:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5991
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 918:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5995
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 919:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6000
		{
			yyVAL.str = ""
		}
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6004
		{
			yyVAL.str = yyDollar[1].str
		}
	case 921:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6008
		{
			yyVAL.str = yyDollar[2].str
		}
	case 922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6014
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 923:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6018
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].str)
		}
	case 924:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6023
		{
			yyLOCAL = tree.NewCStr("", 1)
		}
		yyVAL.union = yyLOCAL
	case 925:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6027
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 926:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6031
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 927:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6035
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 928:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6039
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 929:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6045
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 952:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6087
		{
			var Language = yyDollar[3].str
			var Name = tree.Identifier(yyDollar[5].str)
			var Filename = tree.Identifier(yyDollar[7].str)
			yyLOCAL = tree.NewCreateExtension(
				Language,
				Name,
				Filename,
			)
		}
		yyVAL.union = yyLOCAL
	case 953:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6100
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 954:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6106
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 955:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6112
		{
			var Name = yyDollar[3].procNameUnion()
			var Args = yyDollar[5].procArgsUnion()
			var Body = yyDollar[7].str
			yyLOCAL = tree.NewCreateProcedure(
				Name,
				Args,
				Body,
			)
		}
		yyVAL.union = yyLOCAL
	case 956:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6125
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 957:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6130
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 958:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6137
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 960:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6144
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 961:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6148
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:6154
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 963:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:6160
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6165
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 965:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6169
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 966:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6173
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6177
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 968:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6184
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				goto ret1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				goto ret1
			}

			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[4].functionNameUnion()
			var Args = yyDollar[6].funcArgsUnion()
			var ReturnType = yyDollar[9].funcReturnUnion()
			var Language = yyDollar[11].str
			var Import = yyDollar[12].boolValUnion()
			var Body = yyDollar[13].str
			var Handler = yyDollar[14].str

			yyLOCAL = tree.NewCreateFunction(
				Replace,
				Name,
				Args,
				ReturnType,
				Language,
				Import,
				Body,
				Handler,
			)
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6217
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6222
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 971:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6229
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6236
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 974:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6240
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 975:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:6246
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6252
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 977:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6256
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 978:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6260
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6266
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:6272
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6278
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6282
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 983:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6288
		{
			yyVAL.str = ""
		}
	case 985:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6295
		{
			yyVAL.str = yyDollar[2].str
		}
	case 986:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6301
		{
			var Replace bool
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 987:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6316
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 988:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6333
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = yyDollar[4].exprUnion()
			var AuthOption = yyDollar[5].accountAuthOptionUnion()
			var StatusOption = yyDollar[6].accountStatusUnion()
			var Comment = yyDollar[7].accountCommentUnion()
			yyLOCAL = tree.NewCreateAccount(
				IfNotExists,
				Name,
				AuthOption,
				StatusOption,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 989:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6350
		{
			yyVAL.str = yyDollar[1].str
		}
	case 990:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6354
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 991:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6360
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 992:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6364
		{
			yyVAL.str = "DEFINER = "
		}
	case 993:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6368
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 994:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6373
		{
			yyVAL.str = ""
		}
	case 995:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:6377
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 1001:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6391
		{
			yyVAL.str = ""
		}
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6399
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6405
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6410
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1007:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:6416
		{
			var Equal = yyDollar[2].str
			var AdminName = yyDollar[3].exprUnion()
			var IdentifiedType = yyDollar[4].accountIdentifiedUnion()
			yyLOCAL = *tree.NewAccountAuthOption(
				Equal,
				AdminName,
				IdentifiedType,
			)
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6429
		{
			var str = yyDollar[1].str
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6434
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6439
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6445
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6452
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6459
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByRandomPassword,
				nil,
			)
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6466
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6473
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6481
		{
			as := tree.NewAccountStatus()
			as.Exist = false
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6487
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusOpen
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6494
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusSuspend
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6501
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusRestricted
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6509
		{
			ac := tree.NewAccountComment()
			ac.Exist = false
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6515
		{
			ac := tree.NewAccountComment()
			ac.Exist = true
			ac.Comment = yyDollar[2].str
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6524
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Users = yyDollar[4].usersUnion()
			var Role = yyDollar[5].accountRoleUnion()
			var MiscOpt = yyDollar[6].userMiscOptionUnion()
			var CommentOrAttribute = yyDollar[7].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewCreateUser(
				IfNotExists,
				Users,
				Role,
				MiscOpt,
				CommentOrAttribute,
			)
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6541
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				nil,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6557
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var Table = yyDollar[8].tableNamesUnion()
			var AccountsSet = yyDollar[9].accountsSetOptionUnion()
			var Comment = yyDollar[10].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				Table,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6576
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6582
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6591
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Url = yyDollar[5].str
			var Credentials = yyDollar[6].stageCredentialsUnion()
			var Status = yyDollar[7].stageStatusUnion()
			var Comment = yyDollar[8].stageCommentUnion()
			yyLOCAL = tree.NewCreateStage(
				IfNotExists,
				Name,
				Url,
				Credentials,
				Status,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6609
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6615
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6622
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6630
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6636
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1033:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6644
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1034:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6650
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6658
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6664
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6673
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6677
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6682
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6686
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1041:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6693
		{
			yyVAL.str = yyDollar[3].str
		}
	case 1042:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6698
		{
			yyVAL.str = ""
		}
	case 1043:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6702
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1044:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6708
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 1045:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6721
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var dbName = yyDollar[6].str
			var table = yyDollar[7].tableNamesUnion()
			var comment = yyDollar[8].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, dbName, table, comment)
		}
		yyVAL.union = yyLOCAL
	case 1046:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6732
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1047:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6736
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1048:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6742
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1049:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6748
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1050:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6754
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1051:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6761
		{
			yyVAL.str = ""
		}
	case 1052:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6765
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1053:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:6770
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1054:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:6774
		{
			yyLOCAL = yyDollar[2].tableNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1055:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6780
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1056:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6788
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6796
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropSnapShot(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6804
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPitr(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6812
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1060:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6817
		{
			var Exist = false
			var IsComment bool
			var Str string
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)

		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6829
		{
			var Exist = true
			var IsComment = true
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6840
		{
			var Exist = true
			var IsComment = false
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6949
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6953
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6959
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6972
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6976
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6982
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6995
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6999
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7003
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7008
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7012
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7018
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7025
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7031
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7040
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1079:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7047
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewCreateRole(
				IfNotExists,
				Roles,
			)
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7058
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7062
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:7068
		{
			var UserName = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7077
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7081
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7085
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7090
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7094
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7098
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7102
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7108
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = tree.NewIndexOption()
				io.IType = yyDollar[5].indexTypeUnion()
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = tree.NewIndexOption()
				io.IType = tree.INDEX_TYPE_INVALID
			}
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Table = yyDollar[7].tableNameUnion()
			var ifNotExists = false
			var IndexCat = yyDollar[2].indexCategoryUnion()
			var KeyParts = yyDollar[9].keyPartsUnion()
			var IndexOption = io
			var MiscOption []tree.MiscOption
			yyLOCAL = tree.NewCreateIndex(
				Name,
				Table,
				ifNotExists,
				IndexCat,
				KeyParts,
				IndexOption,
				MiscOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7139
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7143
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7169
		{
			io := tree.NewIndexOption()
			io.KeyBlockSize = uint64(yyDollar[3].item.(int64))
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7175
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}

			io := tree.NewIndexOption()
			io.AlgoParamList = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7187
		{
			io := tree.NewIndexOption()
			io.AlgoParamVectorOpType = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7193
		{
			io := tree.NewIndexOption()
			io.Comment = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1097:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7199
		{
			io := tree.NewIndexOption()
			io.ParserName = yyDollar[3].cstrUnion().Compare()
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1098:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7205
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_VISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7211
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_INVISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7219
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1101:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7223
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1102:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7229
		{
			// Order is parsed but just ignored as MySQL dtree.
			var ColName = yyDollar[1].unresolvedNameUnion()
			var Length = int(yyDollar[2].lengthOptUnion())
			var Direction = yyDollar[3].directionUnion()
			var Expr tree.Expr
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1103:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7243
		{
			var ColName *tree.UnresolvedName
			var Length int
			var Expr = yyDollar[2].exprUnion()
			var Direction = yyDollar[4].directionUnion()
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7257
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1105:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7261
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7265
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7269
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7273
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7277
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7281
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7287
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].str)
			var SubscriptionOption = yyDollar[5].subscriptionOptionUnion()
			var CreateOptions = yyDollar[6].createOptionsUnion()
			yyLOCAL = tree.NewCreateDatabase(
				IfNotExists,
				Name,
				SubscriptionOption,
				CreateOptions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7302
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1113:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7306
		{
			var From = tree.Identifier(yyDollar[2].str)
			var Publication = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewSubscriptionOption(From, Publication)
		}
		yyVAL.union = yyLOCAL
	case 1116:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7317
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7321
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7326
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7330
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7336
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1121:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7340
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7346
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Charset = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCharset(
				IsDefault,
				Charset,
			)
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7355
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Collate = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCollate(
				IsDefault,
				Collate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7364
		{
			var Encrypt = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionEncryption(Encrypt)
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7370
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1126:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7374
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7380
		{
			var TableName = yyDollar[4].tableNameUnion()
			var Options = yyDollar[7].connectorOptionsUnion()
			yyLOCAL = tree.NewCreateConnector(
				TableName,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7391
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7397
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7415
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7433
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1132:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7451
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			var SourceName = yyDollar[5].tableNameUnion()
			var Defs = yyDollar[7].tableDefsUnion()
			var Options = yyDollar[9].tableOptionsUnion()
			yyLOCAL = tree.NewCreateSource(
				Replace,
				IfNotExists,
				SourceName,
				Defs,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1133:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7467
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7471
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7480
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7492
		{
			t := tree.NewCreateTable()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Param = yyDollar[9].loadParamUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7501
		{
			t := tree.NewCreateTable()
			t.IsClusterTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7513
		{
			t := tree.NewCreateTable()
			t.IsDynamicTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			t.DTOptions = yyDollar[8].tableOptionsUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1139:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7523
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[6].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1140:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7533
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[9].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7544
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7554
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[10].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7565
		{
			t := tree.NewCreateTable()
			t.IsAsLike = true
			t.Table = *yyDollar[5].tableNameUnion()
			t.LikeTableName = *yyDollar[7].tableNameUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7573
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.SubscriptionOption = yyDollar[6].subscriptionOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7584
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7591
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7601
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7614
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7622
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1150:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7631
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7640
		{
			yyVAL.str = ""
		}
	case 1152:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:7644
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1153:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7650
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7654
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1155:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7659
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1156:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7663
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:7670
		{
			yyLOCAL = &tree.TailParameter{
				Charset:      yyDollar[1].str,
				Fields:       yyDollar[2].fieldsUnion(),
				Lines:        yyDollar[3].linesUnion(),
				IgnoredLines: uint64(yyDollar[4].int64ValUnion()),
				ColumnList:   yyDollar[5].loadColumnsUnion(),
				Assignments:  yyDollar[6].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7682
		{
			yyVAL.str = ""
		}
	case 1159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7686
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1160:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7692
		{
			var Name = yyDollar[4].tableNameUnion()
			var Type = yyDollar[5].columnTypeUnion()
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var IncrementBy = yyDollar[6].incrementByOptionUnion()
			var MinValue = yyDollar[7].minValueOptionUnion()
			var MaxValue = yyDollar[8].maxValueOptionUnion()
			var StartWith = yyDollar[9].startWithOptionUnion()
			var Cycle = yyDollar[10].boolValUnion()
			yyLOCAL = tree.NewCreateSequence(
				Name,
				Type,
				IfNotExists,
				IncrementBy,
				MinValue,
				MaxValue,
				StartWith,
				Cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7713
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1162:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7727
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7731
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7735
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1165:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7741
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7745
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7752
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7759
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7766
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7773
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7777
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7781
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7785
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7789
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1175:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7796
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7803
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7807
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7814
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7821
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7825
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1181:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7831
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7837
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7841
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1184:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7848
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7855
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7862
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7869
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7873
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7878
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7882
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7886
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7891
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7895
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()
			yyLOCAL = tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1194:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7908
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7912
		{
			var ColumnList = []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)

		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7920
		{
			var ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7928
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1198:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7932
		{
			var IsSubPartition = true
			var PType = yyDollar[3].partitionByUnion()
			var Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = tree.NewPartitionBy2(
				IsSubPartition,
				PType,
				Num,
			)
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7944
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1200:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7948
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1201:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7954
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7958
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7964
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options []tree.TableOption
			var Subs = yyDollar[4].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1204:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7977
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options = yyDollar[4].tableOptionsUnion()
			var Subs = yyDollar[5].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1205:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7991
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7995
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1207:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8001
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1208:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8005
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8011
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options []tree.TableOption
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1210:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8020
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options = yyDollar[3].tableOptionsUnion()
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1211:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8031
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1212:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8035
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1213:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8040
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1214:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8044
		{
			expr := tree.NewMaxValue()
			var valueList = tree.Exprs{expr}
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1215:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8050
		{
			var valueList = yyDollar[5].exprsUnion()
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8055
		{
			var valueList = yyDollar[4].exprsUnion()
			yyLOCAL = tree.NewValuesIn(
				valueList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8063
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8067
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8077
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1220:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8081
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1221:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8092
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1222:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8100
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1223:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8108
		{
			listTyp := tree.NewListType()
			listTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1224:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8116
		{
			listTyp := tree.NewListType()
			listTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8127
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1227:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8136
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			keyTyp.ColumnList = yyDollar[5].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1228:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8146
		{
			Linear := yyDollar[1].boolValUnion()
			Expr := yyDollar[4].exprUnion()
			hashTyp := tree.NewHashType(Linear, Expr)
			yyLOCAL = tree.NewPartitionBy(
				hashTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1229:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8156
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1230:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8160
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1231:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8165
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1232:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8169
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1233:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8175
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1234:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8179
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1235:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8185
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1236:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8194
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1237:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8204
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1238:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8208
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1239:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8214
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1240:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8218
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1241:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8224
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1242:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8233
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1243:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8243
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1244:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8247
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1245:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8253
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1246:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8257
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1247:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8261
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1248:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8267
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1249:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8271
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1250:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8275
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1251:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8279
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1252:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8283
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1253:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8287
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1254:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8291
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1255:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8296
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1256:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8300
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1257:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8304
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1258:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8308
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1259:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8312
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1260:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8316
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1261:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8320
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1262:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8324
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1263:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8328
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1264:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8332
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1265:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8336
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1266:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8340
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1267:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8344
		{
			t := tree.NewTableOptionPackKeys()
			t.Value = yyDollar[3].item.(int64)
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1268:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8350
		{
			t := tree.NewTableOptionPackKeys()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1269:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8356
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1270:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8360
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8364
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8368
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8372
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8378
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1275:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8384
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8390
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8396
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1278:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8402
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1279:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8408
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1280:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8412
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1281:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8416
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1282:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8420
		{
			var Preperties = yyDollar[3].propertiesUnion()
			yyLOCAL = tree.NewTableOptionProperties(Preperties)
		}
		yyVAL.union = yyLOCAL
	case 1283:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8425
		{
			var retentionPeriod = uint64(yyDollar[4].item.(int64))
			var retentionUnit = strings.ToLower(yyDollar[5].str)
			yyLOCAL = tree.NewRetentionOption(
				retentionPeriod,
				retentionUnit,
			)
		}
		yyVAL.union = yyLOCAL
	case 1284:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8436
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1285:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8440
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1286:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:8446
		{
			var Key = yyDollar[1].str
			var Value = yyDollar[3].str
			yyLOCAL = *tree.NewProperty(
				Key,
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 1287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8457
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1288:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8461
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1289:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8467
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1290:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8471
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1291:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8475
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1292:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8479
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1293:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8483
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1294:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8487
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1299:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8501
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1300:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8505
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1301:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8514
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[2].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1302:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8520
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[4].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1303:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8528
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1304:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8532
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPTIME,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1305:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8539
		{
			var str = yyDollar[4].cstrUnion().Compare()
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yylex.(*Lexer).GetDbOrTblName(yyDollar[4].cstrUnion().Origin()),
				Expr:         tree.NewNumVal(str, str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1306:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8548
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yyDollar[4].str,
				Expr:         tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1307:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8556
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATMOTIMESTAMP,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1308:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8564
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1310:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8571
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1311:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8575
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1312:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8581
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1313:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8585
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1314:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8589
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1315:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8595
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1316:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8599
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1317:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8605
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1318:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8618
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1319:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8631
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid the type of index")
					goto ret1
				}
			}

			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1320:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8670
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid type of index")
					goto ret1
				}
			}
			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1321:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8710
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1322:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8724
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1323:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8730
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1324:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8743
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1325:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8756
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1326:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8769
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1327:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8782
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var KeyParts = yyDollar[6].keyPartsUnion()
			var Name = yyDollar[4].str
			var Refer = yyDollar[8].attributeReferenceUnion()
			var Empty = true
			yyLOCAL = tree.NewForeignKey(
				IfNotExists,
				KeyParts,
				Name,
				Refer,
				Empty,
			)
		}
		yyVAL.union = yyLOCAL
	case 1328:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8797
		{
			var Expr = yyDollar[3].exprUnion()
			var Enforced = yyDollar[5].boolValUnion()
			yyLOCAL = tree.NewCheckIndex(
				Expr,
				Enforced,
			)
		}
		yyVAL.union = yyLOCAL
	case 1329:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8807
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8813
		{
			yyVAL.str = ""
		}
	case 1332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8817
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1335:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8827
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1336:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8833
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1337:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8839
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1348:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8860
		{
			yyVAL.str = ""
		}
	case 1349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8864
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1350:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:8870
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1351:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8876
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1352:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8880
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1353:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8885
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1354:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8893
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1355:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8897
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1356:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8901
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1357:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8905
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1358:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8911
		{
			yyLOCAL = yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
		}
		yyVAL.union = yyLOCAL
	case 1359:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8917
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1360:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8921
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1361:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8926
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1362:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8933
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1363:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8937
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1364:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8943
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1365:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8947
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1366:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8953
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1367:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8957
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1368:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8961
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1369:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8965
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1370:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8969
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1371:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8973
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumVal(str, str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1372:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8978
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1373:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8982
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1374:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8986
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1375:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8990
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1376:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8994
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1377:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8998
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1378:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9002
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1379:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9006
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1380:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9010
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1381:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9014
		{
			name := tree.NewUnresolvedColName(yyDollar[3].str)
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[3].str, 1),
				Exprs:    es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1382:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9028
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1383:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9032
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1384:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9036
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1385:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9040
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1386:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9044
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1387:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9048
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1388:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9054
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1389:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9058
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1390:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9063
		{
			yyVAL.str = ""
		}
	case 1391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9067
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9073
		{
			yyVAL.str = ""
		}
	case 1393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9077
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1394:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:9083
		{
			var TableName = yyDollar[2].tableNameUnion()
			var KeyParts = yyDollar[3].keyPartsUnion()
			var Match = yyDollar[4].matchTypeUnion()
			var OnDelete = yyDollar[5].referenceOnRecordUnion().OnDelete
			var OnUpdate = yyDollar[5].referenceOnRecordUnion().OnUpdate
			yyLOCAL = tree.NewAttributeReference(
				TableName,
				KeyParts,
				Match,
				OnDelete,
				OnUpdate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1395:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9100
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1396:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9107
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1397:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9114
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1398:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9121
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1399:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9128
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1400:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9137
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1401:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9143
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1402:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9149
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1403:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9153
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1404:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9157
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1405:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9161
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1406:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9165
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1407:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9170
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1409:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9177
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1410:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9181
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1411:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9185
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1412:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9190
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1413:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9194
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1414:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9199
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1415:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9203
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1422:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:9219
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1423:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9225
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1424:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9229
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1425:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9233
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1426:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9237
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1427:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9241
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1428:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9245
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1429:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9249
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1430:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9253
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1431:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9257
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1432:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9261
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1433:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9265
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1434:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9269
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1435:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9273
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1436:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9279
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1437:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9283
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1438:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9287
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1439:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9291
		{
			yyLOCAL = tree.NewParentExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1440:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9295
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1441:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9299
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1442:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9303
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1443:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9307
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1444:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9311
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1445:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9315
		{
			hint := strings.ToLower(yyDollar[2].cstrUnion().Compare())
			switch hint {
			case "d":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "DATETIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "t":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimeFamily,
						FamilyString: "TIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "ts":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "TIMESTAMP",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			default:
				yylex.Error("Invalid type")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1446:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9357
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1447:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9361
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1448:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9365
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1449:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9370
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1450:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9378
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1451:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9382
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1452:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9386
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1453:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9390
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1454:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9394
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1455:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9404
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1456:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9408
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1457:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9412
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1458:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9416
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1459:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9420
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1460:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9424
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1461:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9428
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1462:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9434
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1463:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9443
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1464:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9452
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1465:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9463
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1466:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9473
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1467:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9483
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1468:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9492
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1469:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9502
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1470:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9512
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1471:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9522
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1472:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9531
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1473:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9541
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1474:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9545
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1475:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9550
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1476:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9554
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1477:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9560
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1478:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9564
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1479:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:9570
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9579
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1481:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9591
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1482:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9608
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1484:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9625
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1485:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9638
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1486:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9651
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1487:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9663
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1488:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9677
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1489:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9692
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1490:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9707
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1491:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9724
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1492:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9739
		{
		}
	case 1496:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9746
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1497:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9750
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1498:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9754
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1499:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9760
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1500:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9764
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1501:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9768
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1502:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9772
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1503:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9778
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1504:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9782
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1505:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9786
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1506:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9792
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1507:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9800
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1508:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9810
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1509:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9814
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1510:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9821
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1511:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9826
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1512:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9830
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1513:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9835
		{
			yyVAL.str = ","
		}
	case 1514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9839
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1515:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9844
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9848
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1517:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9853
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1519:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9860
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1520:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9886
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1521:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9898
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1522:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9910
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1523:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9921
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1524:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9932
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1525:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9943
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1526:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9953
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1527:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9963
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1528:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9974
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1529:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9985
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1530:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9996
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1531:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10007
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1532:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10018
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1533:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10029
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1534:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10040
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1535:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10051
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1536:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10062
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1537:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10073
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1538:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10084
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1539:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10095
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1540:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10106
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1541:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10117
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1545:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10135
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1546:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10144
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1547:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10153
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1548:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10162
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1549:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10171
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1550:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10182
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1551:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10191
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[4].exprUnion()},
				Type:     yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1552:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10201
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1553:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10210
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1554:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10219
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1555:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10228
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1556:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10237
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1557:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10249
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1558:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10260
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1559:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10273
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1560:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10285
		{
			column := tree.NewUnresolvedColName(yyDollar[3].str)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10308
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1596:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10344
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1597:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10357
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1598:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10370
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1599:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10382
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1600:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10391
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1601:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10399
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1602:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10407
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1603:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10420
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1604:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10429
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1605:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10440
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1606:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10451
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1607:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10460
		{
			cn := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1608:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10472
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1609:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10482
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1610:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10492
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1611:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10501
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1612:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10512
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1613:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10521
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1614:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10531
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1615:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10540
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1616:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10549
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1617:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10559
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1618:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10563
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1619:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10569
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1620:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10573
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumVal(ival, str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1627:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10592
		{
		}
	case 1628:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10594
		{
		}
	case 1662:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10635
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1663:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10647
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1664:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10651
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1665:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10655
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1666:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:10661
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1667:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10666
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1668:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10670
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1669:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10676
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1670:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10680
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1671:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10686
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1672:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10690
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1673:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10697
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1674:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10701
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1675:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10705
		{
			name := tree.NewUnresolvedColName("concat")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr("concat", 1),
				Exprs:    tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1676:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10714
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1677:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10718
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1678:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10722
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1679:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10727
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1680:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10731
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1681:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10737
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1682:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10741
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1683:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10745
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1684:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10749
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1685:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10753
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1686:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10757
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1687:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10761
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1688:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10765
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1689:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10769
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1690:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10773
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1692:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10781
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1693:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10785
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1694:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10789
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1695:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10793
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1696:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10797
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1697:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10801
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1698:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10805
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1699:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10809
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1700:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10813
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1701:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10817
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1703:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10823
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1704:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10827
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1705:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10833
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1706:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10837
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1707:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10844
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1708:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10848
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1709:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10852
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1710:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10858
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1711:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10862
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1712:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10866
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1713:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10870
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1714:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10874
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1715:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10878
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1716:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10882
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1717:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10888
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1718:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10892
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1719:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10896
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1720:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10900
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1721:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10906
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1722:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10919
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1723:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10924
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1724:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10930
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1725:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10934
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1726:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10947
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1727:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10952
		{
			yyLOCAL = tree.NewNumVal(true, "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1728:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10956
		{
			yyLOCAL = tree.NewNumVal(false, "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1729:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10960
		{
			yyLOCAL = tree.NewNumVal("null", "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1730:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10964
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1731:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10968
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1732:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10975
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1733:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10979
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1734:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10983
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1735:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10987
		{
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1736:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10994
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1740:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11005
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1741:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11010
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1742:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11016
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1743:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11028
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1744:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11040
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1745:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11052
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1746:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11065
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1747:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11078
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1748:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11091
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1749:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11104
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1750:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11117
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1751:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11130
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1752:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11143
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1753:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11156
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1754:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11169
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1755:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11182
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1756:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11197
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1757:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11224
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1758:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11266
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1759:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11302
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1760:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11338
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1761:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11355
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1762:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11367
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1763:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11387
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1764:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11407
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1765:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11427
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1766:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11443
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1767:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11456
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1768:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11469
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1769:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11482
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1770:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11495
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1771:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11507
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1772:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11519
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1773:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11531
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1774:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11543
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1775:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11555
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1776:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11567
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1777:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11579
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1778:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11591
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1779:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11603
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1780:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11615
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1781:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11628
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1782:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11641
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1783:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11654
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1784:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11667
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1785:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11682
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1786:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11690
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumVal("null", "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1787:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11699
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1788:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11709
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1789:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11732
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1790:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11737
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1791:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11743
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1793:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11750
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1794:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11754
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1795:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11759
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1796:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11763
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1797:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11769
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1798:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11775
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1799:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11782
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1800:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11789
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1801:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11798
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1802:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11805
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1803:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11812
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1804:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11821
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1805:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11825
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1806:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11829
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1807:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11835
		{
		}
	case 1808:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11837
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1812:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11847
		{
			yyVAL.str = ""
		}
	case 1813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:11851
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
