// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"go/constant"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const CONNECT = 57367
const MANAGE = 57368
const GRANTS = 57369
const OWNERSHIP = 57370
const REFERENCE = 57371
const LOWER_THAN_SET = 57372
const SET = 57373
const ALL = 57374
const DISTINCT = 57375
const DISTINCTROW = 57376
const AS = 57377
const EXISTS = 57378
const ASC = 57379
const DESC = 57380
const INTO = 57381
const DUPLICATE = 57382
const DEFAULT = 57383
const LOCK = 57384
const KEYS = 57385
const NULLS = 57386
const FIRST = 57387
const LAST = 57388
const AFTER = 57389
const INSTANT = 57390
const INPLACE = 57391
const COPY = 57392
const DISABLE = 57393
const ENABLE = 57394
const UNDEFINED = 57395
const MERGE = 57396
const TEMPTABLE = 57397
const DEFINER = 57398
const INVOKER = 57399
const SQL = 57400
const SECURITY = 57401
const CASCADED = 57402
const VALUES = 57403
const NEXT = 57404
const VALUE = 57405
const SHARE = 57406
const MODE = 57407
const SQL_NO_CACHE = 57408
const SQL_CACHE = 57409
const JOIN = 57410
const STRAIGHT_JOIN = 57411
const LEFT = 57412
const RIGHT = 57413
const INNER = 57414
const OUTER = 57415
const CROSS = 57416
const NATURAL = 57417
const USE = 57418
const FORCE = 57419
const LOWER_THAN_ON = 57420
const ON = 57421
const USING = 57422
const SUBQUERY_AS_EXPR = 57423
const LOWER_THAN_STRING = 57424
const ID = 57425
const AT_ID = 57426
const AT_AT_ID = 57427
const STRING = 57428
const VALUE_ARG = 57429
const LIST_ARG = 57430
const COMMENT = 57431
const COMMENT_KEYWORD = 57432
const QUOTE_ID = 57433
const STAGE = 57434
const CREDENTIALS = 57435
const STAGES = 57436
const SNAPSHOTS = 57437
const INTEGRAL = 57438
const HEX = 57439
const FLOAT = 57440
const HEXNUM = 57441
const BIT_LITERAL = 57442
const NULL = 57443
const TRUE = 57444
const FALSE = 57445
const LOWER_THAN_CHARSET = 57446
const CHARSET = 57447
const UNIQUE = 57448
const KEY = 57449
const OR = 57450
const PIPE_CONCAT = 57451
const XOR = 57452
const AND = 57453
const NOT = 57454
const BETWEEN = 57455
const CASE = 57456
const WHEN = 57457
const THEN = 57458
const ELSE = 57459
const END = 57460
const ELSEIF = 57461
const LOWER_THAN_EQ = 57462
const LE = 57463
const GE = 57464
const NE = 57465
const NULL_SAFE_EQUAL = 57466
const IS = 57467
const LIKE = 57468
const REGEXP = 57469
const IN = 57470
const ASSIGNMENT = 57471
const ILIKE = 57472
const SHIFT_LEFT = 57473
const SHIFT_RIGHT = 57474
const DIV = 57475
const MOD = 57476
const UNARY = 57477
const COLLATE = 57478
const BINARY = 57479
const UNDERSCORE_BINARY = 57480
const INTERVAL = 57481
const OUT = 57482
const INOUT = 57483
const BEGIN = 57484
const START = 57485
const TRANSACTION = 57486
const COMMIT = 57487
const ROLLBACK = 57488
const WORK = 57489
const CONSISTENT = 57490
const SNAPSHOT = 57491
const CHAIN = 57492
const NO = 57493
const RELEASE = 57494
const PRIORITY = 57495
const QUICK = 57496
const BIT = 57497
const TINYINT = 57498
const SMALLINT = 57499
const MEDIUMINT = 57500
const INT = 57501
const INTEGER = 57502
const BIGINT = 57503
const INTNUM = 57504
const REAL = 57505
const DOUBLE = 57506
const FLOAT_TYPE = 57507
const DECIMAL = 57508
const NUMERIC = 57509
const DECIMAL_VALUE = 57510
const TIME = 57511
const TIMESTAMP = 57512
const DATETIME = 57513
const YEAR = 57514
const CHAR = 57515
const VARCHAR = 57516
const BOOL = 57517
const CHARACTER = 57518
const VARBINARY = 57519
const NCHAR = 57520
const TEXT = 57521
const TINYTEXT = 57522
const MEDIUMTEXT = 57523
const LONGTEXT = 57524
const BLOB = 57525
const TINYBLOB = 57526
const MEDIUMBLOB = 57527
const LONGBLOB = 57528
const JSON = 57529
const ENUM = 57530
const UUID = 57531
const VECF32 = 57532
const VECF64 = 57533
const GEOMETRY = 57534
const POINT = 57535
const LINESTRING = 57536
const POLYGON = 57537
const GEOMETRYCOLLECTION = 57538
const MULTIPOINT = 57539
const MULTILINESTRING = 57540
const MULTIPOLYGON = 57541
const INT1 = 57542
const INT2 = 57543
const INT3 = 57544
const INT4 = 57545
const INT8 = 57546
const S3OPTION = 57547
const STAGEOPTION = 57548
const SQL_SMALL_RESULT = 57549
const SQL_BIG_RESULT = 57550
const SQL_BUFFER_RESULT = 57551
const LOW_PRIORITY = 57552
const HIGH_PRIORITY = 57553
const DELAYED = 57554
const CREATE = 57555
const ALTER = 57556
const DROP = 57557
const RENAME = 57558
const ANALYZE = 57559
const ADD = 57560
const RETURNS = 57561
const SCHEMA = 57562
const TABLE = 57563
const SEQUENCE = 57564
const INDEX = 57565
const VIEW = 57566
const TO = 57567
const IGNORE = 57568
const IF = 57569
const PRIMARY = 57570
const COLUMN = 57571
const CONSTRAINT = 57572
const SPATIAL = 57573
const FULLTEXT = 57574
const FOREIGN = 57575
const KEY_BLOCK_SIZE = 57576
const SHOW = 57577
const DESCRIBE = 57578
const EXPLAIN = 57579
const DATE = 57580
const ESCAPE = 57581
const REPAIR = 57582
const OPTIMIZE = 57583
const TRUNCATE = 57584
const MAXVALUE = 57585
const PARTITION = 57586
const REORGANIZE = 57587
const LESS = 57588
const THAN = 57589
const PROCEDURE = 57590
const TRIGGER = 57591
const STATUS = 57592
const VARIABLES = 57593
const ROLE = 57594
const PROXY = 57595
const AVG_ROW_LENGTH = 57596
const STORAGE = 57597
const DISK = 57598
const MEMORY = 57599
const CHECKSUM = 57600
const COMPRESSION = 57601
const DATA = 57602
const DIRECTORY = 57603
const DELAY_KEY_WRITE = 57604
const ENCRYPTION = 57605
const ENGINE = 57606
const MAX_ROWS = 57607
const MIN_ROWS = 57608
const PACK_KEYS = 57609
const ROW_FORMAT = 57610
const STATS_AUTO_RECALC = 57611
const STATS_PERSISTENT = 57612
const STATS_SAMPLE_PAGES = 57613
const DYNAMIC = 57614
const COMPRESSED = 57615
const REDUNDANT = 57616
const COMPACT = 57617
const FIXED = 57618
const COLUMN_FORMAT = 57619
const AUTO_RANDOM = 57620
const ENGINE_ATTRIBUTE = 57621
const SECONDARY_ENGINE_ATTRIBUTE = 57622
const INSERT_METHOD = 57623
const RESTRICT = 57624
const CASCADE = 57625
const ACTION = 57626
const PARTIAL = 57627
const SIMPLE = 57628
const CHECK = 57629
const ENFORCED = 57630
const RANGE = 57631
const LIST = 57632
const ALGORITHM = 57633
const LINEAR = 57634
const PARTITIONS = 57635
const SUBPARTITION = 57636
const SUBPARTITIONS = 57637
const CLUSTER = 57638
const TYPE = 57639
const ANY = 57640
const SOME = 57641
const EXTERNAL = 57642
const LOCALFILE = 57643
const URL = 57644
const PREPARE = 57645
const DEALLOCATE = 57646
const RESET = 57647
const EXTENSION = 57648
const INCREMENT = 57649
const CYCLE = 57650
const MINVALUE = 57651
const PUBLICATION = 57652
const SUBSCRIPTIONS = 57653
const PUBLICATIONS = 57654
const PROPERTIES = 57655
const PARSER = 57656
const VISIBLE = 57657
const INVISIBLE = 57658
const BTREE = 57659
const HASH = 57660
const RTREE = 57661
const BSI = 57662
const IVFFLAT = 57663
const MASTER = 57664
const ZONEMAP = 57665
const LEADING = 57666
const BOTH = 57667
const TRAILING = 57668
const UNKNOWN = 57669
const LISTS = 57670
const OP_TYPE = 57671
const REINDEX = 57672
const EXPIRE = 57673
const ACCOUNT = 57674
const ACCOUNTS = 57675
const UNLOCK = 57676
const DAY = 57677
const NEVER = 57678
const PUMP = 57679
const MYSQL_COMPATIBILITY_MODE = 57680
const MODIFY = 57681
const CHANGE = 57682
const SECOND = 57683
const ASCII = 57684
const COALESCE = 57685
const COLLATION = 57686
const HOUR = 57687
const MICROSECOND = 57688
const MINUTE = 57689
const MONTH = 57690
const QUARTER = 57691
const REPEAT = 57692
const REVERSE = 57693
const ROW_COUNT = 57694
const WEEK = 57695
const REVOKE = 57696
const FUNCTION = 57697
const PRIVILEGES = 57698
const TABLESPACE = 57699
const EXECUTE = 57700
const SUPER = 57701
const GRANT = 57702
const OPTION = 57703
const REFERENCES = 57704
const REPLICATION = 57705
const SLAVE = 57706
const CLIENT = 57707
const USAGE = 57708
const RELOAD = 57709
const FILE = 57710
const TEMPORARY = 57711
const ROUTINE = 57712
const EVENT = 57713
const SHUTDOWN = 57714
const NULLX = 57715
const AUTO_INCREMENT = 57716
const APPROXNUM = 57717
const SIGNED = 57718
const UNSIGNED = 57719
const ZEROFILL = 57720
const ENGINES = 57721
const LOW_CARDINALITY = 57722
const AUTOEXTEND_SIZE = 57723
const ADMIN_NAME = 57724
const RANDOM = 57725
const SUSPEND = 57726
const ATTRIBUTE = 57727
const HISTORY = 57728
const REUSE = 57729
const CURRENT = 57730
const OPTIONAL = 57731
const FAILED_LOGIN_ATTEMPTS = 57732
const PASSWORD_LOCK_TIME = 57733
const UNBOUNDED = 57734
const SECONDARY = 57735
const RESTRICTED = 57736
const USER = 57737
const IDENTIFIED = 57738
const CIPHER = 57739
const ISSUER = 57740
const X509 = 57741
const SUBJECT = 57742
const SAN = 57743
const REQUIRE = 57744
const SSL = 57745
const NONE = 57746
const PASSWORD = 57747
const SHARED = 57748
const EXCLUSIVE = 57749
const MAX_QUERIES_PER_HOUR = 57750
const MAX_UPDATES_PER_HOUR = 57751
const MAX_CONNECTIONS_PER_HOUR = 57752
const MAX_USER_CONNECTIONS = 57753
const FORMAT = 57754
const VERBOSE = 57755
const CONNECTION = 57756
const TRIGGERS = 57757
const PROFILES = 57758
const LOAD = 57759
const INLINE = 57760
const INFILE = 57761
const TERMINATED = 57762
const OPTIONALLY = 57763
const ENCLOSED = 57764
const ESCAPED = 57765
const STARTING = 57766
const LINES = 57767
const ROWS = 57768
const IMPORT = 57769
const DISCARD = 57770
const JSONTYPE = 57771
const MODUMP = 57772
const OVER = 57773
const PRECEDING = 57774
const FOLLOWING = 57775
const GROUPS = 57776
const DATABASES = 57777
const TABLES = 57778
const SEQUENCES = 57779
const EXTENDED = 57780
const FULL = 57781
const PROCESSLIST = 57782
const FIELDS = 57783
const COLUMNS = 57784
const OPEN = 57785
const ERRORS = 57786
const WARNINGS = 57787
const INDEXES = 57788
const SCHEMAS = 57789
const NODE = 57790
const LOCKS = 57791
const ROLES = 57792
const TABLE_NUMBER = 57793
const COLUMN_NUMBER = 57794
const TABLE_VALUES = 57795
const TABLE_SIZE = 57796
const NAMES = 57797
const GLOBAL = 57798
const PERSIST = 57799
const SESSION = 57800
const ISOLATION = 57801
const LEVEL = 57802
const READ = 57803
const WRITE = 57804
const ONLY = 57805
const REPEATABLE = 57806
const COMMITTED = 57807
const UNCOMMITTED = 57808
const SERIALIZABLE = 57809
const LOCAL = 57810
const EVENTS = 57811
const PLUGINS = 57812
const CURRENT_TIMESTAMP = 57813
const DATABASE = 57814
const CURRENT_TIME = 57815
const LOCALTIME = 57816
const LOCALTIMESTAMP = 57817
const UTC_DATE = 57818
const UTC_TIME = 57819
const UTC_TIMESTAMP = 57820
const REPLACE = 57821
const CONVERT = 57822
const SEPARATOR = 57823
const TIMESTAMPDIFF = 57824
const CURRENT_DATE = 57825
const CURRENT_USER = 57826
const CURRENT_ROLE = 57827
const SECOND_MICROSECOND = 57828
const MINUTE_MICROSECOND = 57829
const MINUTE_SECOND = 57830
const HOUR_MICROSECOND = 57831
const HOUR_SECOND = 57832
const HOUR_MINUTE = 57833
const DAY_MICROSECOND = 57834
const DAY_SECOND = 57835
const DAY_MINUTE = 57836
const DAY_HOUR = 57837
const YEAR_MONTH = 57838
const SQL_TSI_HOUR = 57839
const SQL_TSI_DAY = 57840
const SQL_TSI_WEEK = 57841
const SQL_TSI_MONTH = 57842
const SQL_TSI_QUARTER = 57843
const SQL_TSI_YEAR = 57844
const SQL_TSI_SECOND = 57845
const SQL_TSI_MINUTE = 57846
const RECURSIVE = 57847
const CONFIG = 57848
const DRAINER = 57849
const SOURCE = 57850
const STREAM = 57851
const HEADERS = 57852
const CONNECTOR = 57853
const CONNECTORS = 57854
const DAEMON = 57855
const PAUSE = 57856
const CANCEL = 57857
const TASK = 57858
const RESUME = 57859
const MATCH = 57860
const AGAINST = 57861
const BOOLEAN = 57862
const LANGUAGE = 57863
const WITH = 57864
const QUERY = 57865
const EXPANSION = 57866
const WITHOUT = 57867
const VALIDATION = 57868
const UPGRADE = 57869
const RETRY = 57870
const ADDDATE = 57871
const BIT_AND = 57872
const BIT_OR = 57873
const BIT_XOR = 57874
const CAST = 57875
const COUNT = 57876
const APPROX_COUNT = 57877
const APPROX_COUNT_DISTINCT = 57878
const SERIAL_EXTRACT = 57879
const APPROX_PERCENTILE = 57880
const CURDATE = 57881
const CURTIME = 57882
const DATE_ADD = 57883
const DATE_SUB = 57884
const EXTRACT = 57885
const GROUP_CONCAT = 57886
const MAX = 57887
const MID = 57888
const MIN = 57889
const NOW = 57890
const POSITION = 57891
const SESSION_USER = 57892
const STD = 57893
const STDDEV = 57894
const MEDIAN = 57895
const CLUSTER_CENTERS = 57896
const KMEANS = 57897
const STDDEV_POP = 57898
const STDDEV_SAMP = 57899
const SUBDATE = 57900
const SUBSTR = 57901
const SUBSTRING = 57902
const SUM = 57903
const SYSDATE = 57904
const SYSTEM_USER = 57905
const TRANSLATE = 57906
const TRIM = 57907
const VARIANCE = 57908
const VAR_POP = 57909
const VAR_SAMP = 57910
const AVG = 57911
const RANK = 57912
const ROW_NUMBER = 57913
const DENSE_RANK = 57914
const BIT_CAST = 57915
const BITMAP_BIT_POSITION = 57916
const BITMAP_BUCKET_NUMBER = 57917
const BITMAP_COUNT = 57918
const BITMAP_CONSTRUCT_AGG = 57919
const BITMAP_OR_AGG = 57920
const NEXTVAL = 57921
const SETVAL = 57922
const CURRVAL = 57923
const LASTVAL = 57924
const ARROW = 57925
const ROW = 57926
const OUTFILE = 57927
const HEADER = 57928
const MAX_FILE_SIZE = 57929
const FORCE_QUOTE = 57930
const PARALLEL = 57931
const UNUSED = 57932
const BINDINGS = 57933
const DO = 57934
const DECLARE = 57935
const LOOP = 57936
const WHILE = 57937
const LEAVE = 57938
const ITERATE = 57939
const UNTIL = 57940
const CALL = 57941
const PREV = 57942
const SLIDING = 57943
const FILL = 57944
const SPBEGIN = 57945
const BACKEND = 57946
const SERVERS = 57947
const HANDLER = 57948
const PERCENT = 57949
const SAMPLE = 57950
const MO_TS = 57951
const KILL = 57952
const BACKUP = 57953
const FILESYSTEM = 57954
const PARALLELISM = 57955
const RESTORE = 57956
const NEWACCOUNT = 57957
const QUERY_RESULT = 57958

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"SNAPSHOTS",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UPGRADE",
	"RETRY",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"BITMAP_BIT_POSITION",
	"BITMAP_BUCKET_NUMBER",
	"BITMAP_COUNT",
	"BITMAP_CONSTRUCT_AGG",
	"BITMAP_OR_AGG",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"MO_TS",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"RESTORE",
	"NEWACCOUNT",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:12060

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 123,
	11, 734,
	22, 734,
	-2, 727,
	-1, 144,
	238, 1133,
	240, 1033,
	-2, 1080,
	-1, 169,
	43, 557,
	240, 557,
	267, 564,
	268, 564,
	463, 557,
	-2, 594,
	-1, 210,
	637, 1890,
	-2, 470,
	-1, 512,
	637, 2010,
	-2, 359,
	-1, 570,
	637, 2069,
	-2, 357,
	-1, 571,
	637, 2070,
	-2, 358,
	-1, 572,
	637, 2071,
	-2, 360,
	-1, 703,
	319, 145,
	435, 145,
	436, 145,
	-2, 1795,
	-1, 769,
	82, 1582,
	-2, 1945,
	-1, 770,
	82, 1600,
	-2, 1916,
	-1, 774,
	82, 1601,
	-2, 1944,
	-1, 807,
	82, 1509,
	-2, 2142,
	-1, 808,
	82, 1510,
	-2, 2141,
	-1, 809,
	82, 1511,
	-2, 2131,
	-1, 810,
	82, 2103,
	-2, 2124,
	-1, 811,
	82, 2104,
	-2, 2125,
	-1, 812,
	82, 2105,
	-2, 2133,
	-1, 813,
	82, 2106,
	-2, 2113,
	-1, 814,
	82, 2107,
	-2, 2122,
	-1, 815,
	82, 2108,
	-2, 2134,
	-1, 816,
	82, 2109,
	-2, 2135,
	-1, 817,
	82, 2110,
	-2, 2140,
	-1, 818,
	82, 2111,
	-2, 2145,
	-1, 819,
	82, 2112,
	-2, 2146,
	-1, 820,
	82, 1578,
	-2, 1984,
	-1, 821,
	82, 1579,
	-2, 1779,
	-1, 822,
	82, 1580,
	-2, 1993,
	-1, 823,
	82, 1581,
	-2, 1788,
	-1, 825,
	82, 1584,
	-2, 1796,
	-1, 826,
	82, 1585,
	-2, 2017,
	-1, 828,
	82, 1588,
	-2, 1815,
	-1, 830,
	82, 1590,
	-2, 2029,
	-1, 831,
	82, 1591,
	-2, 2028,
	-1, 832,
	82, 1592,
	-2, 1859,
	-1, 833,
	82, 1593,
	-2, 1940,
	-1, 836,
	82, 1596,
	-2, 2040,
	-1, 838,
	82, 1598,
	-2, 2043,
	-1, 839,
	82, 1599,
	-2, 2045,
	-1, 840,
	82, 1602,
	-2, 2053,
	-1, 841,
	82, 1603,
	-2, 1925,
	-1, 842,
	82, 1604,
	-2, 1970,
	-1, 843,
	82, 1605,
	-2, 1935,
	-1, 844,
	82, 1606,
	-2, 1960,
	-1, 855,
	82, 1487,
	-2, 2136,
	-1, 856,
	82, 1488,
	-2, 2137,
	-1, 857,
	82, 1489,
	-2, 2138,
	-1, 946,
	458, 594,
	459, 594,
	-2, 558,
	-1, 993,
	124, 1779,
	135, 1779,
	155, 1779,
	-2, 1753,
	-1, 1108,
	22, 761,
	-2, 710,
	-1, 1214,
	11, 734,
	22, 734,
	-2, 1367,
	-1, 1296,
	22, 761,
	-2, 710,
	-1, 1625,
	82, 1653,
	-2, 1942,
	-1, 1626,
	82, 1654,
	-2, 1943,
	-1, 1783,
	83, 911,
	-2, 917,
	-1, 2215,
	107, 1072,
	151, 1072,
	190, 1072,
	193, 1072,
	280, 1072,
	-2, 1065,
	-1, 2365,
	11, 734,
	22, 734,
	-2, 854,
	-1, 2397,
	83, 1739,
	156, 1739,
	-2, 1927,
	-1, 2398,
	83, 1739,
	156, 1739,
	-2, 1926,
	-1, 2399,
	83, 1715,
	156, 1715,
	-2, 1913,
	-1, 2400,
	83, 1716,
	156, 1716,
	-2, 1918,
	-1, 2401,
	83, 1717,
	156, 1717,
	-2, 1847,
	-1, 2402,
	83, 1718,
	156, 1718,
	-2, 1841,
	-1, 2403,
	83, 1719,
	156, 1719,
	-2, 1769,
	-1, 2404,
	83, 1720,
	156, 1720,
	-2, 1915,
	-1, 2405,
	83, 1721,
	156, 1721,
	-2, 1845,
	-1, 2406,
	83, 1722,
	156, 1722,
	-2, 1840,
	-1, 2407,
	83, 1723,
	156, 1723,
	-2, 1829,
	-1, 2408,
	83, 1739,
	156, 1739,
	-2, 1830,
	-1, 2409,
	83, 1739,
	156, 1739,
	-2, 1831,
	-1, 2411,
	83, 1728,
	156, 1728,
	-2, 1960,
	-1, 2412,
	83, 1706,
	156, 1706,
	-2, 1945,
	-1, 2413,
	83, 1737,
	156, 1737,
	-2, 1916,
	-1, 2414,
	83, 1737,
	156, 1737,
	-2, 1944,
	-1, 2415,
	83, 1737,
	156, 1737,
	-2, 1797,
	-1, 2416,
	83, 1735,
	156, 1735,
	-2, 1935,
	-1, 2417,
	83, 1732,
	156, 1732,
	-2, 1820,
	-1, 2418,
	82, 1687,
	83, 1687,
	156, 1687,
	393, 1687,
	394, 1687,
	395, 1687,
	-2, 1768,
	-1, 2419,
	82, 1688,
	83, 1688,
	156, 1688,
	393, 1688,
	394, 1688,
	395, 1688,
	-2, 1770,
	-1, 2420,
	82, 1689,
	83, 1689,
	156, 1689,
	393, 1689,
	394, 1689,
	395, 1689,
	-2, 1989,
	-1, 2421,
	82, 1691,
	83, 1691,
	156, 1691,
	393, 1691,
	394, 1691,
	395, 1691,
	-2, 1917,
	-1, 2422,
	82, 1693,
	83, 1693,
	156, 1693,
	393, 1693,
	394, 1693,
	395, 1693,
	-2, 1899,
	-1, 2423,
	82, 1695,
	83, 1695,
	156, 1695,
	393, 1695,
	394, 1695,
	395, 1695,
	-2, 1846,
	-1, 2424,
	82, 1697,
	83, 1697,
	156, 1697,
	393, 1697,
	394, 1697,
	395, 1697,
	-2, 1825,
	-1, 2425,
	82, 1698,
	83, 1698,
	156, 1698,
	393, 1698,
	394, 1698,
	395, 1698,
	-2, 1826,
	-1, 2426,
	82, 1700,
	83, 1700,
	156, 1700,
	393, 1700,
	394, 1700,
	395, 1700,
	-2, 1767,
	-1, 2427,
	83, 1742,
	156, 1742,
	393, 1742,
	394, 1742,
	395, 1742,
	-2, 1802,
	-1, 2428,
	83, 1742,
	156, 1742,
	393, 1742,
	394, 1742,
	395, 1742,
	-2, 1816,
	-1, 2429,
	83, 1745,
	156, 1745,
	393, 1745,
	394, 1745,
	395, 1745,
	-2, 1798,
	-1, 2430,
	83, 1745,
	156, 1745,
	393, 1745,
	394, 1745,
	395, 1745,
	-2, 1862,
	-1, 2431,
	83, 1742,
	156, 1742,
	393, 1742,
	394, 1742,
	395, 1742,
	-2, 1883,
	-1, 2635,
	107, 1072,
	151, 1072,
	190, 1072,
	193, 1072,
	280, 1072,
	-2, 1066,
	-1, 2652,
	80, 654,
	156, 654,
	-2, 1246,
	-1, 3053,
	193, 1072,
	304, 1335,
	-2, 1307,
	-1, 3217,
	107, 1072,
	151, 1072,
	190, 1072,
	193, 1072,
	-2, 1189,
	-1, 3219,
	107, 1072,
	151, 1072,
	190, 1072,
	193, 1072,
	-2, 1189,
	-1, 3231,
	80, 654,
	156, 654,
	-2, 1247,
	-1, 3253,
	193, 1072,
	304, 1335,
	-2, 1308,
	-1, 3395,
	107, 1072,
	151, 1072,
	190, 1072,
	193, 1072,
	-2, 1190,
	-1, 3422,
	83, 1151,
	156, 1151,
	-2, 1072,
	-1, 3555,
	83, 1151,
	156, 1151,
	-2, 1072,
	-1, 3705,
	83, 1155,
	156, 1155,
	-2, 1072,
	-1, 3753,
	83, 1156,
	156, 1156,
	-2, 1072,
}

const yyPrivate = 57344

const yyLast = 48114

var yyAct = [...]int{
	736, 713, 3800, 738, 3773, 2682, 199, 1868, 3709, 3793,
	3238, 2204, 1605, 3610, 707, 3332, 3715, 3072, 3708, 3716,
	3636, 3555, 3039, 722, 3593, 3666, 3450, 3141, 1443, 3267,
	3533, 2676, 2488, 3587, 1249, 3142, 715, 3382, 3554, 1601,
	3614, 3478, 605, 1381, 3383, 3380, 766, 2679, 1109, 3524,
	3594, 992, 3339, 1520, 623, 3596, 629, 629, 1387, 3327,
	1816, 3204, 629, 646, 655, 2655, 1652, 655, 3254, 3402,
	3392, 2263, 1608, 3220, 3009, 3364, 2395, 2971, 3139, 3048,
	2788, 2789, 2790, 3193, 1959, 59, 1956, 2998, 2772, 2706,
	3068, 3222, 3057, 711, 3050, 3097, 2523, 2071, 2851, 3397,
	184, 3127, 1924, 1666, 2359, 2266, 2029, 2393, 3107, 2785,
	660, 2811, 2624, 2976, 2978, 2982, 1828, 2974, 2973, 2226,
	705, 2245, 1100, 2972, 3018, 2636, 1436, 2343, 2194, 3056,
	710, 666, 2900, 2054, 1974, 2180, 2969, 122, 36, 2179,
	2067, 2685, 2465, 2037, 1758, 2824, 2030, 921, 2447, 2348,
	2038, 2002, 2834, 1509, 1524, 37, 1952, 2608, 1516, 1847,
	2066, 2613, 1321, 2708, 2687, 1858, 2647, 2264, 6, 1927,
	195, 8, 2360, 605, 1521, 194, 7, 2225, 2391, 1792,
	1599, 1049, 1352, 2068, 714, 1483, 1532, 1358, 1452, 622,
	1552, 2206, 2078, 1422, 704, 2556, 1659, 1370, 1639, 199,
	2101, 199, 1590, 1040, 1041, 1827, 15, 1122, 2259, 2018,
	629, 1034, 1035, 723, 1490, 2036, 1039, 2033, 652, 1992,
	1598, 955, 985, 1421, 2367, 27, 1535, 1788, 16, 859,
	14, 23, 1791, 1925, 1419, 668, 641, 638, 920, 669,
	185, 1475, 1482, 1390, 100, 2555, 33, 1604, 1382, 1667,
	24, 17, 897, 10, 654, 918, 181, 1366, 175, 903,
	1294, 1250, 1001, 665, 1182, 1183, 1184, 1181, 3518, 650,
	2591, 2075, 1531, 2369, 2591, 941, 2591, 1391, 1037, 1182,
	1183, 1184, 1181, 1182, 1183, 1184, 1181, 3410, 651, 3234,
	3025, 647, 2085, 649, 1182, 1183, 1184, 1181, 1104, 1036,
	3207, 1038, 1182, 1183, 1184, 1181, 861, 706, 862, 648,
	1182, 1183, 1184, 1181, 998, 1000, 3134, 2246, 634, 2511,
	2453, 658, 1182, 1183, 1184, 1181, 2450, 2451, 986, 2448,
	2042, 1354, 1771, 1033, 1497, 183, 624, 3681, 1493, 182,
	55, 171, 145, 1032, 3504, 1033, 1104, 3184, 2178, 625,
	1313, 2950, 1031, 1033, 8, 2478, 1544, 172, 2947, 7,
	3257, 712, 2952, 2949, 164, 3785, 1404, 1765, 173, 1309,
	604, 3325, 2847, 2583, 2581, 2845, 2477, 1543, 1495, 1182,
	1183, 1184, 1181, 1182, 1183, 1184, 1181, 121, 2007, 3485,
	3479, 3328, 3140, 2051, 1244, 3598, 2032, 860, 3269, 706,
	2927, 2024, 109, 2304, 182, 182, 630, 871, 176, 1144,
	2497, 3260, 3540, 2072, 2585, 3369, 2505, 3365, 3221, 1316,
	2217, 1530, 3255, 182, 55, 171, 145, 3277, 3278, 3506,
	3647, 1462, 1461, 3256, 3690, 182, 182, 182, 55, 171,
	145, 1004, 182, 1460, 1002, 664, 182, 55, 171, 145,
	1003, 182, 2872, 2859, 2925, 182, 3541, 2642, 2083, 1327,
	1539, 1344, 2783, 2210, 182, 55, 171, 145, 3508, 1550,
	3261, 2385, 1773, 176, 176, 182, 182, 55, 171, 145,
	1317, 1179, 996, 1969, 997, 127, 128, 1561, 129, 130,
	1536, 850, 176, 849, 851, 852, 2386, 853, 854, 1547,
	2818, 2819, 2817, 121, 2640, 176, 176, 1937, 1938, 1936,
	1120, 1538, 1573, 1775, 1776, 176, 872, 1378, 3043, 974,
	1549, 2466, 3041, 121, 176, 1423, 964, 1425, 1117, 1842,
	2610, 1607, 2951, 176, 1152, 1388, 1389, 1154, 1159, 2948,
	2611, 1160, 1177, 1400, 176, 176, 1401, 2373, 3352, 995,
	2372, 3719, 3720, 2374, 2643, 994, 144, 170, 180, 3601,
	107, 3740, 3601, 3679, 3276, 1155, 2267, 2167, 1591, 1162,
	1386, 1595, 3600, 3678, 1385, 1388, 1389, 3683, 169, 163,
	162, 3599, 3677, 3777, 3778, 61, 3600, 3599, 3143, 2609,
	1326, 3265, 3668, 3687, 3585, 1594, 1172, 3588, 3589, 3590,
	3591, 2852, 3668, 2853, 3671, 2854, 3482, 3143, 2492, 1611,
	1114, 2087, 2993, 3262, 3266, 3264, 3263, 1125, 1701, 3607,
	2586, 3194, 1496, 1494, 3159, 1947, 1953, 629, 629, 2296,
	3201, 1943, 1403, 1586, 2079, 2991, 2205, 2337, 629, 1113,
	2983, 3374, 2015, 1503, 1502, 1148, 165, 166, 167, 1157,
	909, 3271, 3272, 2727, 144, 1582, 180, 655, 655, 3497,
	629, 3498, 2890, 970, 968, 2600, 969, 3279, 1164, 2502,
	1150, 1165, 1175, 1176, 3692, 3693, 169, 174, 700, 1596,
	1043, 702, 1153, 1156, 3685, 3351, 701, 3688, 3689, 2302,
	2988, 2989, 168, 3353, 2888, 2616, 1125, 117, 3279, 1167,
	1174, 168, 1593, 118, 1147, 3718, 2990, 3326, 1149, 2776,
	3258, 2084, 1158, 2846, 1376, 3500, 3270, 3510, 3511, 3497,
	2340, 3498, 1222, 1185, 1413, 1610, 1609, 2339, 3515, 3371,
	1001, 1215, 2584, 2344, 1967, 1968, 2062, 3492, 1169, 2987,
	1225, 2598, 621, 1328, 3294, 3071, 3499, 3748, 3517, 3045,
	3162, 3545, 975, 1106, 2894, 3291, 2590, 1312, 3069, 3070,
	119, 874, 3007, 3019, 3537, 1233, 3629, 2648, 1113, 2042,
	1105, 3624, 657, 54, 971, 3500, 656, 2599, 1105, 1163,
	1112, 2282, 998, 1000, 2781, 1151, 2212, 2262, 2285, 1161,
	3337, 3284, 2073, 2073, 1402, 1139, 2073, 875, 652, 652,
	3615, 3631, 1001, 3239, 1253, 3336, 3499, 1170, 1171, 3335,
	3637, 3040, 1127, 1126, 2681, 2479, 1545, 1168, 3246, 1592,
	2871, 3074, 56, 2074, 2677, 2678, 1105, 2681, 2870, 1033,
	2090, 2092, 2093, 1033, 1687, 1365, 2869, 973, 3295, 2086,
	1033, 1033, 1166, 3606, 653, 2284, 3275, 3441, 2106, 650,
	650, 1033, 2985, 3539, 998, 1000, 1033, 177, 178, 3796,
	179, 3811, 2314, 1119, 663, 146, 3430, 653, 651, 651,
	52, 647, 647, 649, 649, 2313, 1315, 1128, 2449, 1116,
	1118, 3691, 1498, 3342, 2388, 653, 1324, 623, 2283, 648,
	648, 1127, 1126, 3509, 1388, 1389, 1108, 653, 1388, 1389,
	911, 1136, 912, 1216, 1130, 3436, 56, 1292, 3546, 1254,
	1297, 1132, 1133, 860, 972, 2334, 2335, 2622, 1432, 2756,
	921, 3538, 3274, 2994, 1431, 1380, 1379, 1138, 2582, 56,
	146, 146, 1137, 3370, 2506, 120, 41, 1377, 1223, 1363,
	1362, 1107, 53, 997, 1774, 1361, 5, 56, 3638, 146,
	2984, 3707, 3525, 124, 125, 177, 178, 126, 179, 56,
	1954, 146, 146, 146, 3559, 3049, 3493, 1101, 146, 2946,
	3595, 629, 146, 1415, 2891, 3046, 1102, 146, 2269, 605,
	605, 146, 2305, 3223, 1384, 1213, 3684, 2262, 605, 605,
	146, 3323, 1447, 1447, 2279, 629, 3797, 1683, 3146, 1322,
	664, 146, 146, 1680, 2615, 965, 3375, 1682, 1679, 1681,
	1685, 1686, 3073, 3665, 1946, 1684, 1420, 655, 1476, 623,
	1944, 1449, 1587, 1486, 1486, 3603, 3493, 2829, 2830, 3512,
	3494, 1445, 1445, 2728, 199, 2729, 2730, 1485, 1485, 1144,
	1265, 1266, 3360, 605, 3065, 1454, 3069, 3070, 2959, 3005,
	2498, 2986, 1331, 1332, 1333, 1334, 1335, 2377, 1337, 2300,
	2619, 2620, 2076, 2272, 1343, 2628, 2631, 2632, 2633, 2629,
	2630, 2091, 1617, 1620, 1621, 2618, 1325, 1336, 2893, 1218,
	1219, 1220, 1221, 1618, 1342, 1329, 1341, 1340, 967, 1414,
	2102, 966, 1339, 3558, 1528, 659, 3187, 2088, 2089, 1533,
	2594, 3066, 1504, 2813, 2815, 1542, 3451, 3452, 3453, 3457,
	3455, 3456, 3454, 3443, 3432, 2268, 1441, 1442, 3431, 1298,
	2270, 2725, 1296, 2902, 2901, 1143, 880, 3794, 3795, 3706,
	1571, 1349, 1372, 1373, 915, 916, 917, 3437, 3438, 2596,
	1566, 1567, 913, 2186, 1447, 1320, 1447, 1113, 1330, 1024,
	1029, 1030, 910, 2188, 2187, 1778, 1551, 1318, 1319, 1690,
	1691, 1692, 1693, 1694, 1695, 1688, 1689, 2757, 2759, 2760,
	2761, 2758, 1779, 3361, 2271, 1351, 2960, 879, 3006, 876,
	2667, 882, 881, 2185, 2183, 1772, 1001, 1777, 3403, 2747,
	2748, 2326, 1001, 877, 2273, 1612, 1613, 1614, 1615, 1616,
	2197, 2278, 3024, 2357, 1507, 2276, 1510, 1511, 1477, 3812,
	1367, 1371, 1371, 1371, 1447, 1405, 1406, 1512, 1513, 1392,
	1430, 1359, 1395, 2198, 2199, 1541, 3147, 3675, 3807, 1518,
	1519, 1665, 1570, 1180, 1110, 1367, 1367, 1657, 3104, 3819,
	1569, 1661, 1662, 1663, 1664, 1714, 1526, 3802, 2136, 1359,
	1698, 2135, 3791, 1653, 1455, 1357, 1537, 3755, 1708, 1144,
	634, 1364, 1548, 1468, 1523, 2468, 1487, 1527, 1374, 2653,
	2814, 1474, 3100, 3727, 1488, 652, 1393, 1394, 2654, 1396,
	1397, 3190, 1398, 3161, 1995, 2208, 1603, 1581, 1606, 1627,
	1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637,
	1638, 2081, 3067, 965, 3721, 1650, 1651, 1427, 1429, 2172,
	1760, 1113, 2746, 1619, 976, 3703, 1439, 1440, 1622, 1584,
	3803, 2595, 1780, 3657, 1180, 3756, 650, 1476, 2358, 965,
	3756, 2497, 1789, 1447, 1794, 1795, 1756, 1797, 1798, 629,
	1699, 1026, 1027, 1028, 629, 651, 3728, 1447, 647, 1559,
	649, 921, 1562, 1723, 1817, 1110, 1560, 1579, 1554, 2358,
	1576, 1447, 1575, 3078, 3632, 3620, 648, 1415, 3578, 3076,
	1588, 1499, 646, 2299, 1821, 3577, 1580, 3521, 1597, 1180,
	1759, 1141, 1578, 1577, 1602, 1574, 967, 3104, 3704, 966,
	3572, 1600, 1841, 1589, 2956, 1713, 3521, 2954, 1837, 2115,
	2207, 1848, 1848, 3571, 1415, 2358, 1415, 1415, 2654, 2832,
	629, 629, 967, 1789, 1918, 966, 2602, 1447, 1921, 1922,
	1934, 1641, 3570, 1993, 2587, 2487, 1704, 1705, 1706, 1182,
	1183, 1184, 1181, 2473, 605, 2388, 1447, 2081, 3621, 1720,
	3569, 3579, 1721, 1182, 1183, 1184, 1181, 1142, 2230, 3549,
	2072, 1760, 1767, 1935, 1845, 2255, 1760, 1760, 1142, 1734,
	1735, 3548, 2177, 3521, 629, 1789, 1447, 1796, 1979, 2171,
	629, 629, 629, 1984, 1985, 2114, 3521, 2170, 1755, 3520,
	1989, 1990, 1991, 2143, 2063, 3300, 1997, 1762, 1965, 2923,
	1785, 1786, 1787, 199, 1916, 3521, 199, 199, 1970, 199,
	1293, 3248, 1800, 1801, 1802, 1803, 2005, 1696, 1697, 2008,
	1700, 1870, 2011, 3521, 3213, 2013, 1350, 1728, 1715, 3177,
	1851, 1656, 2081, 1757, 864, 865, 866, 867, 1962, 1963,
	3173, 1722, 1144, 1724, 2081, 1725, 1726, 1727, 1433, 1714,
	1714, 2040, 1818, 3804, 3234, 1932, 1763, 3086, 2808, 2836,
	1714, 1714, 3521, 2562, 1940, 2656, 1942, 2056, 2388, 2554,
	2513, 1849, 1833, 2495, 1948, 1850, 1960, 1961, 1784, 2483,
	2055, 1648, 1649, 1834, 3249, 2475, 1955, 2500, 1840, 2499,
	1793, 1843, 1844, 1813, 2491, 1839, 1817, 3214, 2470, 1814,
	1447, 2070, 3178, 2006, 1809, 2050, 2009, 2010, 1978, 2012,
	2462, 628, 628, 3174, 1981, 1982, 1983, 636, 1822, 1830,
	2460, 1852, 1853, 2249, 1829, 2131, 1831, 1832, 2458, 1824,
	3087, 2358, 751, 123, 1001, 2456, 1180, 1001, 123, 2229,
	1838, 2448, 1180, 1180, 2116, 1001, 2230, 2173, 2061, 1367,
	1915, 2150, 2471, 2000, 1923, 1987, 2064, 3200, 2476, 1920,
	1939, 1556, 1941, 1371, 2046, 1230, 1949, 1182, 1183, 1184,
	1181, 2471, 1129, 1098, 1793, 1371, 2149, 864, 865, 866,
	867, 2105, 869, 2463, 2134, 2110, 998, 1000, 1093, 3467,
	3298, 2125, 635, 2461, 1213, 123, 1977, 998, 1000, 2035,
	1964, 2457, 1976, 1197, 1825, 1826, 2124, 1537, 2457, 3020,
	2035, 2123, 2230, 2112, 2003, 2080, 1563, 2001, 2241, 3029,
	2172, 1835, 1836, 1600, 1180, 2885, 2122, 1819, 1820, 652,
	739, 749, 2269, 2272, 2129, 2020, 1399, 3625, 1001, 3813,
	740, 1846, 741, 745, 748, 744, 742, 743, 3404, 1180,
	2099, 2100, 1703, 1702, 1458, 2052, 2146, 1180, 1368, 3781,
	878, 2151, 2152, 2153, 1180, 636, 2156, 2157, 2158, 2159,
	2160, 2161, 2162, 2163, 2164, 2165, 2049, 2047, 2041, 1180,
	650, 3626, 2060, 2182, 1180, 2184, 3021, 2297, 2081, 1564,
	998, 1000, 3405, 705, 3226, 746, 629, 629, 629, 651,
	3519, 2065, 647, 2058, 649, 1182, 1183, 1184, 1181, 999,
	2059, 629, 629, 629, 629, 3224, 123, 1355, 1437, 1435,
	648, 1356, 1703, 1702, 2227, 869, 3489, 747, 3132, 1438,
	3022, 123, 3434, 123, 2233, 1415, 1355, 3433, 3227, 2095,
	1356, 1660, 3419, 1409, 1410, 3376, 1412, 2094, 1416, 1417,
	1418, 2240, 2096, 1200, 1201, 1202, 1203, 1204, 1197, 3225,
	2103, 1415, 3206, 1740, 2273, 2108, 3105, 1641, 3096, 2268,
	2262, 2267, 3091, 2265, 2270, 1369, 3088, 3035, 2291, 3000,
	1463, 1464, 1465, 1466, 1467, 2257, 1469, 1470, 1471, 1472,
	1473, 883, 2868, 2867, 1479, 1480, 1481, 1729, 1730, 1731,
	1732, 2866, 2778, 1736, 1737, 1738, 1739, 1741, 1742, 1743,
	1744, 1745, 1746, 1747, 1748, 1749, 1750, 2531, 2626, 1434,
	2592, 2510, 2269, 2272, 2474, 2379, 2144, 2145, 2271, 2147,
	2045, 2044, 2298, 1733, 2043, 1346, 2154, 1345, 2520, 1115,
	2362, 2362, 1934, 2362, 2442, 1092, 1088, 1089, 1090, 1091,
	1660, 2536, 2109, 2535, 2534, 2532, 2004, 2166, 2168, 2169,
	2838, 605, 605, 2916, 2174, 1760, 1491, 1760, 2004, 1113,
	1781, 1182, 1183, 1184, 1181, 1447, 629, 2251, 3676, 2248,
	1181, 2250, 3135, 1184, 1181, 1760, 1760, 2191, 3446, 2261,
	2260, 629, 1182, 1183, 1184, 1181, 2209, 1113, 2432, 623,
	3445, 2855, 2717, 2452, 1486, 1253, 1934, 2715, 2693, 2437,
	2691, 2439, 1647, 3810, 2383, 199, 2097, 2098, 1485, 3425,
	2533, 3372, 2915, 2235, 2236, 3377, 3378, 1001, 1644, 1646,
	1643, 1718, 1645, 2238, 2239, 3787, 2575, 2375, 2576, 2376,
	2234, 3198, 1232, 3786, 2366, 2364, 1719, 2368, 2254, 1182,
	1183, 1184, 1181, 2247, 2273, 1231, 2768, 2380, 2381, 2268,
	2262, 2267, 2766, 2265, 2270, 3731, 2764, 3702, 2480, 2481,
	2482, 3701, 2493, 3627, 3574, 3809, 2070, 3562, 3373, 998,
	1000, 2274, 2275, 1447, 2280, 1447, 2753, 1447, 2237, 3552,
	2625, 3542, 1113, 2243, 3480, 3407, 2244, 3406, 3199, 3240,
	2512, 3228, 1182, 1183, 1184, 1181, 3197, 2992, 2436, 2881,
	1254, 3133, 2850, 2767, 2849, 2443, 3205, 2751, 2271, 2765,
	2750, 2749, 2341, 2763, 2503, 2390, 1447, 2540, 1182, 1183,
	1184, 1181, 2741, 1371, 2521, 2735, 1491, 2527, 2396, 2370,
	2734, 2733, 2547, 2752, 2541, 2542, 2732, 1447, 1182, 1183,
	1184, 1181, 2544, 2545, 2539, 2489, 2490, 2522, 2537, 2538,
	1182, 1183, 1184, 1181, 2384, 1445, 2588, 2464, 2550, 2444,
	2176, 2387, 2023, 2022, 2021, 2548, 1182, 1183, 1184, 1181,
	2242, 2017, 628, 1103, 2016, 1492, 1445, 2127, 2433, 2435,
	2434, 1973, 1972, 1111, 2593, 3712, 1612, 1760, 2524, 2441,
	2524, 1971, 1557, 2551, 2552, 1311, 700, 1113, 3098, 702,
	3613, 1113, 2977, 3806, 701, 1135, 3513, 3514, 1447, 3805,
	2528, 2623, 1182, 1183, 1184, 1181, 3333, 1918, 1182, 1183,
	1184, 1181, 3644, 2507, 3779, 2652, 2509, 1182, 1183, 1184,
	1181, 2658, 2549, 1096, 3357, 2518, 3747, 2504, 3746, 3640,
	3743, 2485, 3609, 2126, 1182, 1183, 1184, 1181, 2494, 2496,
	2669, 3381, 3592, 2501, 3502, 2662, 2663, 2579, 2546, 2904,
	1113, 1182, 1183, 1184, 1181, 123, 123, 999, 2690, 3583,
	1182, 1183, 1184, 1181, 2119, 1113, 1113, 1113, 1848, 1427,
	1429, 1113, 3566, 2701, 2702, 2703, 2704, 1113, 2711, 1095,
	2712, 2713, 3561, 2714, 3560, 2716, 2530, 2638, 2514, 2515,
	2649, 3516, 3481, 3427, 1001, 3388, 2711, 1198, 1199, 1200,
	1201, 1202, 1203, 1204, 1197, 2637, 2113, 3356, 2362, 3355,
	1600, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1186, 3501,
	2671, 3331, 2769, 1980, 1182, 1183, 1184, 1181, 2603, 1214,
	605, 3329, 2396, 3308, 3307, 1918, 1113, 1934, 1934, 1934,
	1934, 1182, 1183, 1184, 1181, 1870, 2683, 3304, 1113, 1934,
	3302, 2773, 2362, 3235, 2659, 2111, 3196, 1182, 1183, 1184,
	1181, 2688, 3195, 3192, 2641, 2688, 3170, 3168, 1447, 2604,
	3093, 3084, 3083, 2684, 2605, 3001, 2607, 2621, 2964, 629,
	629, 1182, 1183, 1184, 1181, 2557, 2558, 2657, 2695, 8,
	2963, 2563, 2651, 2958, 7, 1196, 1195, 1205, 1206, 1198,
	1199, 1200, 1201, 1202, 1203, 1204, 1197, 2696, 2697, 2670,
	2181, 2673, 2700, 2895, 2138, 2661, 2892, 2848, 2707, 2689,
	2664, 2686, 3345, 2822, 2692, 2762, 2754, 2699, 2744, 2804,
	1182, 1183, 1184, 1181, 2742, 199, 2738, 2737, 2736, 2589,
	199, 3344, 806, 805, 3490, 1793, 3358, 2486, 2026, 1182,
	1183, 1184, 1181, 2842, 2517, 2844, 2019, 1770, 1769, 2731,
	1558, 1261, 1714, 2833, 1714, 1257, 1256, 2865, 1182, 1183,
	1184, 1181, 1099, 873, 1760, 1299, 3343, 2791, 3219, 1760,
	2743, 2668, 2880, 3218, 2774, 3217, 3189, 3182, 1447, 2791,
	3180, 2887, 2055, 2779, 3179, 2303, 2803, 3176, 2306, 2307,
	2308, 2309, 2310, 2311, 2312, 3175, 1411, 2315, 2316, 2317,
	2318, 2319, 2320, 2321, 2322, 2323, 2324, 2325, 2805, 2327,
	2328, 2329, 2330, 2331, 2807, 2332, 2823, 2898, 2820, 3169,
	1453, 182, 2806, 171, 145, 2839, 3167, 3148, 3138, 3137,
	2843, 3123, 1511, 3122, 1759, 3030, 1001, 2967, 2953, 2864,
	2921, 2920, 1512, 1513, 2914, 2906, 2660, 2905, 2899, 1001,
	2831, 2601, 2459, 1518, 1519, 2665, 2666, 2455, 2454, 2862,
	2792, 2793, 2794, 2795, 2155, 1526, 2148, 2142, 2909, 2141,
	2911, 2874, 2140, 2139, 2837, 2841, 629, 2840, 2137, 2133,
	2962, 2132, 2889, 1523, 2130, 3288, 1527, 1113, 2121, 2118,
	176, 3656, 2117, 2980, 2858, 2856, 2025, 2863, 1753, 1752,
	1456, 2877, 2861, 2996, 635, 1751, 2860, 1717, 629, 2876,
	2884, 2875, 1182, 1183, 1184, 1181, 3165, 1716, 2883, 2873,
	3010, 1113, 2816, 3730, 629, 1113, 1113, 2897, 1707, 182,
	1459, 2896, 1457, 1251, 1934, 2227, 123, 3028, 3639, 2903,
	3580, 3568, 3563, 1182, 1183, 1184, 1181, 1506, 2777, 3461,
	2912, 2913, 3444, 3440, 3418, 3401, 2291, 3316, 3314, 3286,
	2966, 3285, 3761, 2919, 3282, 2907, 2908, 3281, 3055, 3004,
	3058, 2955, 3058, 3058, 2910, 3247, 3244, 1113, 1195, 1205,
	1206, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1197, 3062,
	1182, 1183, 1184, 1181, 3242, 3208, 3079, 2918, 176, 1517,
	1508, 1522, 3075, 123, 1447, 1447, 1001, 2957, 1001, 123,
	1525, 2965, 1001, 1514, 1353, 2637, 3042, 3044, 2917, 2770,
	3077, 2694, 123, 2645, 1182, 1183, 1184, 1181, 2644, 2639,
	2606, 2997, 3080, 3081, 123, 2574, 3026, 2469, 1001, 2378,
	2333, 3003, 3053, 1445, 1445, 1182, 1183, 1184, 1181, 2228,
	2200, 629, 2175, 3023, 3027, 1642, 2980, 3012, 998, 1000,
	3054, 3015, 3016, 176, 1415, 1986, 3032, 1918, 1918, 1783,
	3063, 1766, 2261, 2260, 1585, 3037, 2573, 1540, 3013, 2928,
	2929, 1515, 3017, 1310, 1295, 2930, 2931, 2932, 2933, 1291,
	2934, 2935, 2936, 2937, 2938, 2939, 2940, 2941, 2942, 2943,
	3064, 3059, 3060, 1182, 1183, 1184, 1181, 1290, 3038, 1289,
	1288, 1287, 1286, 1113, 1285, 2612, 1284, 2540, 1283, 1208,
	1282, 1212, 1281, 1280, 1279, 1278, 3136, 2572, 3031, 1277,
	1276, 3654, 3553, 3033, 3034, 1275, 3061, 1209, 1211, 1207,
	1274, 1210, 1196, 1195, 1205, 1206, 1198, 1199, 1200, 1201,
	1202, 1203, 1204, 1197, 1182, 1183, 1184, 1181, 1273, 1272,
	1271, 3150, 3151, 3152, 1799, 1270, 1269, 1268, 3089, 1804,
	3090, 1267, 1264, 3095, 629, 3094, 3101, 3102, 1263, 1262,
	3099, 1260, 1259, 3112, 3092, 3085, 1196, 1195, 1205, 1206,
	1198, 1199, 1200, 1201, 1202, 1203, 1204, 1197, 1258, 3119,
	3120, 3121, 3116, 1255, 1248, 1247, 1245, 1412, 2723, 2724,
	2571, 3164, 1244, 1243, 3114, 2570, 1242, 1241, 3166, 3131,
	3125, 1240, 1239, 2739, 2740, 1205, 1206, 1198, 1199, 1200,
	1201, 1202, 1203, 1204, 1197, 1854, 1855, 1182, 1183, 1184,
	1181, 3185, 1182, 1183, 1184, 1181, 3149, 2775, 2569, 3181,
	1238, 1237, 3652, 3416, 2396, 3154, 2568, 3103, 1236, 3153,
	1235, 2524, 3158, 2567, 1234, 1229, 1228, 1227, 1226, 1146,
	3650, 2566, 3115, 3171, 1097, 1182, 1183, 1184, 1181, 3283,
	3036, 3163, 2232, 1182, 1183, 1184, 1181, 2214, 3212, 1975,
	1182, 1183, 1184, 1181, 3157, 1975, 1975, 1975, 1182, 1183,
	1184, 1181, 3108, 3109, 2362, 1934, 3231, 1196, 1195, 1205,
	1206, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1197, 1134,
	2565, 3759, 1933, 3717, 2564, 2350, 2353, 2354, 2355, 2351,
	3250, 2352, 2356, 1113, 1001, 3111, 3113, 2561, 2627, 2345,
	3183, 1001, 3055, 2389, 2028, 1145, 1113, 1182, 1183, 1184,
	1181, 1182, 1183, 1184, 1181, 2800, 2798, 1113, 2797, 3297,
	2801, 2799, 2796, 1447, 1182, 1183, 1184, 1181, 2802, 108,
	2354, 2355, 3423, 3203, 3233, 2484, 2350, 2353, 2354, 2355,
	2351, 1918, 2352, 2356, 2472, 1113, 1347, 1760, 3318, 1811,
	1812, 3299, 2999, 58, 2879, 123, 3319, 57, 123, 123,
	1760, 123, 1445, 3313, 3188, 3280, 3315, 3230, 3229, 3237,
	3051, 3191, 3052, 2301, 199, 3241, 3293, 3243, 3155, 3156,
	2560, 3414, 3126, 3321, 1806, 1807, 1808, 1113, 1907, 631,
	2508, 1500, 3310, 3273, 3287, 2467, 1553, 3292, 1534, 3289,
	2190, 999, 1988, 3320, 123, 3317, 3296, 1182, 1183, 1184,
	1181, 1140, 999, 632, 3303, 2975, 3301, 633, 2968, 3305,
	2672, 3309, 2646, 3306, 2253, 3359, 123, 3311, 2489, 2490,
	3312, 1113, 2559, 2223, 3251, 1196, 1195, 1205, 1206, 1198,
	1199, 1200, 1201, 1202, 1203, 1204, 1197, 3290, 1815, 1113,
	1447, 1447, 3341, 1782, 3232, 3010, 1703, 1702, 2707, 1182,
	1183, 1184, 1181, 3770, 3236, 3396, 3565, 3396, 3334, 1306,
	1307, 2553, 2719, 3338, 3324, 1304, 1305, 3082, 3386, 2720,
	2721, 2722, 2543, 1113, 3412, 1113, 2791, 1302, 1303, 1445,
	1653, 2342, 3390, 3391, 2338, 3415, 1173, 3417, 1182, 1183,
	1184, 1181, 1447, 3366, 3363, 1214, 2519, 3368, 3367, 1182,
	1183, 1184, 1181, 1300, 1301, 1919, 1408, 3387, 1407, 3118,
	629, 2825, 1113, 1113, 2189, 2057, 1113, 1113, 2791, 3389,
	3400, 3399, 1360, 1182, 1183, 1184, 1181, 3233, 1338, 1383,
	3737, 1653, 3735, 1001, 3695, 3673, 3463, 3411, 1655, 3672,
	3670, 3458, 3616, 3581, 3475, 1817, 3322, 3472, 3474, 3448,
	3449, 3413, 3424, 3459, 3460, 3280, 3476, 3477, 3428, 3421,
	3330, 2201, 2202, 2203, 3172, 1182, 1183, 1184, 1181, 3145,
	3144, 3420, 1447, 3129, 2286, 2256, 2218, 2219, 2220, 2221,
	3384, 3426, 3128, 3273, 3469, 1555, 2835, 1359, 3186, 3354,
	3763, 3762, 3505, 2882, 2216, 2120, 1314, 1131, 3468, 3762,
	3488, 3503, 3763, 3393, 3496, 3470, 3442, 3124, 1110, 186,
	3, 1445, 1375, 66, 1606, 3464, 1606, 864, 865, 866,
	867, 2, 1110, 3783, 3784, 1, 2580, 1764, 3483, 3487,
	3523, 3491, 3534, 3528, 1308, 868, 3495, 863, 1424, 2371,
	1966, 1451, 1768, 3346, 2922, 3347, 870, 3408, 3409, 1113,
	2809, 2810, 3117, 3384, 3384, 2812, 2597, 3384, 3384, 2077,
	3557, 3551, 2780, 2336, 2995, 1348, 914, 1709, 3522, 1568,
	1023, 1124, 1565, 1123, 1121, 1658, 753, 2031, 2771, 3529,
	3531, 3341, 3530, 2745, 3471, 3769, 3799, 3543, 3729, 3772,
	1583, 3547, 1113, 737, 3664, 3584, 3733, 1447, 1196, 1195,
	1205, 1206, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1197,
	1001, 3586, 3486, 2082, 1178, 2857, 937, 794, 764, 3564,
	1246, 1546, 2926, 2924, 1025, 3575, 763, 3202, 2617, 3573,
	2828, 3536, 1022, 938, 2014, 3602, 1445, 3605, 3484, 1501,
	1505, 1453, 2252, 3544, 3635, 1233, 3597, 3422, 3047, 2680,
	1529, 3630, 1113, 3245, 3350, 3582, 1975, 3348, 3349, 670,
	1945, 603, 983, 3462, 2027, 3617, 671, 2231, 3686, 3567,
	894, 2213, 895, 887, 2635, 2634, 1182, 1183, 1184, 1181,
	3526, 1623, 1187, 1640, 2365, 3612, 2944, 2945, 1224, 709,
	1606, 2107, 2614, 3634, 3608, 3268, 3611, 2821, 65, 1113,
	64, 63, 3619, 62, 1996, 207, 755, 1447, 3641, 206,
	3659, 3662, 3379, 3649, 3651, 3653, 3655, 3628, 3661, 3774,
	735, 734, 733, 732, 3633, 731, 730, 3663, 2349, 3642,
	2347, 2346, 1929, 3384, 1928, 3658, 3648, 1994, 3008, 2710,
	2705, 1859, 1857, 2698, 3680, 2281, 1445, 2288, 1933, 1447,
	3669, 3667, 3534, 1856, 3714, 1687, 3645, 123, 3646, 3439,
	2755, 3340, 1805, 2277, 3209, 3210, 3211, 1876, 3705, 2726,
	3215, 3216, 1873, 1872, 3713, 2718, 3694, 3697, 3696, 3435,
	3429, 1904, 3698, 3532, 3710, 3395, 3252, 3253, 1445, 3699,
	3700, 3259, 2222, 3384, 1196, 1195, 1205, 1206, 1198, 1199,
	1200, 1201, 1202, 1203, 1204, 1197, 1048, 3722, 1044, 3723,
	1046, 3724, 3742, 3725, 1047, 1045, 3736, 3726, 3738, 3739,
	2529, 2258, 2970, 3734, 3732, 1687, 1113, 2196, 2195, 2193,
	3597, 3741, 2192, 1323, 3604, 3682, 3362, 2394, 2392, 1094,
	3384, 3110, 3106, 3557, 2039, 2053, 2878, 1930, 1926, 3751,
	2782, 2215, 3710, 3507, 1810, 3752, 3754, 3753, 888, 3768,
	3757, 3776, 2211, 3760, 3775, 3758, 3764, 3765, 3766, 3767,
	161, 51, 105, 159, 50, 94, 93, 104, 157, 3788,
	2516, 1113, 49, 3780, 3782, 191, 190, 193, 192, 189,
	2445, 3634, 3790, 3789, 2446, 3792, 188, 1489, 187, 3674,
	2650, 3710, 3801, 3798, 1196, 1195, 1205, 1206, 1198, 1199,
	1200, 1201, 1202, 1203, 1204, 1197, 3398, 858, 1683, 40,
	39, 38, 34, 13, 1680, 12, 3808, 925, 1682, 1679,
	1681, 1685, 1686, 35, 3776, 3815, 1684, 3775, 3814, 22,
	21, 1572, 20, 26, 3801, 3816, 32, 31, 116, 115,
	3820, 30, 114, 113, 112, 111, 110, 29, 3818, 19,
	182, 55, 171, 145, 44, 43, 42, 3749, 9, 103,
	101, 123, 28, 102, 99, 97, 95, 77, 172, 76,
	75, 123, 90, 89, 88, 164, 2104, 87, 1683, 173,
	86, 85, 83, 84, 1680, 936, 923, 924, 1682, 1679,
	1681, 1685, 1686, 74, 73, 72, 1684, 965, 121, 71,
	1196, 1195, 1205, 1206, 1198, 1199, 1200, 1201, 1202, 1203,
	1204, 1197, 1606, 109, 70, 92, 98, 96, 81, 176,
	91, 82, 80, 79, 78, 69, 68, 67, 143, 142,
	141, 140, 139, 137, 138, 136, 135, 134, 133, 132,
	131, 45, 46, 47, 3465, 48, 153, 152, 3466, 154,
	156, 158, 155, 160, 2826, 2827, 150, 148, 151, 1668,
	1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678,
	1690, 1691, 1692, 1693, 1694, 1695, 1688, 1689, 149, 147,
	967, 60, 11, 966, 106, 18, 25, 4, 0, 1933,
	1933, 1933, 1933, 0, 0, 0, 127, 128, 0, 129,
	130, 1933, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	951, 0, 0, 0, 0, 0, 0, 0, 926, 1668,
	1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678,
	1690, 1691, 1692, 1693, 1694, 1695, 1688, 1689, 0, 0,
	0, 0, 0, 0, 0, 928, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 144, 170, 180,
	0, 107, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 123, 0, 169,
	163, 162, 123, 0, 0, 0, 61, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 0, 0, 3576, 950, 948,
	0, 0, 0, 0, 0, 0, 123, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	947, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 922, 0, 0, 0, 0, 0, 165, 166, 167,
	0, 2961, 927, 960, 911, 0, 912, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3618,
	0, 0, 0, 0, 3622, 3623, 956, 0, 174, 0,
	0, 0, 0, 3002, 0, 0, 0, 0, 0, 0,
	0, 0, 892, 0, 0, 0, 0, 0, 117, 3014,
	0, 0, 168, 0, 118, 3643, 906, 0, 902, 0,
	0, 0, 957, 961, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 944, 0, 942, 946, 964, 0, 0, 0,
	943, 940, 939, 0, 945, 930, 931, 929, 932, 933,
	934, 935, 0, 962, 1905, 963, 0, 0, 0, 1866,
	0, 119, 0, 0, 884, 0, 958, 959, 0, 0,
	0, 0, 0, 999, 54, 123, 0, 0, 0, 123,
	0, 0, 0, 0, 0, 0, 1933, 0, 0, 1907,
	1875, 0, 0, 0, 0, 0, 0, 0, 0, 1908,
	1909, 0, 0, 954, 0, 123, 0, 0, 0, 953,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 56, 949, 1874, 1975, 3744, 3745, 0,
	0, 0, 0, 0, 0, 908, 0, 901, 0, 0,
	1882, 0, 0, 0, 0, 0, 905, 904, 0, 0,
	0, 1020, 0, 0, 0, 0, 0, 0, 177, 178,
	0, 179, 0, 886, 0, 0, 146, 893, 0, 0,
	0, 52, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 900, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 952, 0, 0, 0, 0, 910, 0, 1898, 0,
	0, 899, 0, 0, 0, 898, 0, 0, 0, 0,
	0, 885, 0, 1021, 0, 891, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 120, 41, 0, 0,
	0, 0, 0, 53, 0, 0, 0, 889, 0, 3160,
	0, 0, 0, 0, 124, 125, 0, 0, 126, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1865,
	1867, 1864, 0, 1861, 909, 0, 0, 0, 1886, 0,
	0, 0, 0, 0, 1015, 1010, 1005, 1009, 1013, 1892,
	0, 0, 0, 0, 0, 0, 0, 1877, 0, 1860,
	890, 0, 0, 0, 0, 0, 0, 0, 0, 1880,
	1914, 0, 1018, 1881, 1883, 1885, 1008, 1887, 1888, 1889,
	1893, 1894, 1895, 1897, 1900, 1901, 1902, 0, 0, 0,
	0, 0, 0, 0, 1890, 1899, 1891, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1869, 0, 0, 0,
	0, 0, 0, 0, 1066, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1016, 1906, 0,
	0, 0, 0, 0, 1019, 0, 0, 907, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 123, 0, 0, 1862, 1863, 1006, 0, 123, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1903, 0, 0, 0, 896, 0, 0, 1017,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1879,
	0, 0, 0, 0, 0, 0, 1878, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1933, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1007,
	1896, 0, 0, 0, 0, 0, 0, 0, 0, 1884,
	0, 0, 0, 0, 0, 1052, 0, 0, 0, 1042,
	0, 0, 1911, 1910, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1074, 1078, 1080, 1082, 1084,
	1085, 1087, 0, 1092, 1088, 1089, 1090, 1091, 0, 1069,
	1070, 1071, 1072, 1050, 1051, 1075, 0, 1053, 0, 1054,
	1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1065, 1067,
	1063, 1064, 1073, 0, 0, 1871, 1014, 0, 0, 0,
	1077, 1079, 1081, 1083, 1086, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 123, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	771, 0, 1011, 0, 0, 1012, 0, 1913, 1068, 370,
	1912, 496, 529, 518, 601, 484, 0, 0, 0, 0,
	0, 0, 724, 0, 0, 0, 310, 0, 0, 340,
	533, 515, 525, 516, 501, 502, 503, 510, 320, 504,
	505, 506, 475, 507, 476, 508, 509, 762, 532, 483,
	401, 354, 550, 549, 0, 3447, 829, 837, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 716, 0,
	123, 752, 806, 805, 739, 749, 0, 0, 283, 205,
	477, 597, 479, 478, 740, 0, 741, 745, 748, 744,
	742, 743, 0, 821, 0, 0, 0, 0, 0, 0,
	708, 720, 0, 725, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 717, 718, 0,
	0, 0, 0, 772, 0, 719, 0, 0, 767, 746,
	750, 0, 0, 0, 0, 273, 406, 423, 284, 397,
	436, 289, 404, 279, 369, 393, 0, 0, 275, 421,
	403, 351, 330, 331, 274, 0, 388, 308, 322, 305,
	367, 747, 770, 774, 304, 843, 768, 431, 277, 0,
	430, 366, 417, 422, 352, 346, 276, 419, 350, 345,
	334, 312, 844, 335, 336, 326, 378, 344, 379, 327,
	356, 355, 357, 0, 0, 0, 0, 0, 459, 460,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 591, 765, 0, 594, 0, 433, 0, 0,
	827, 0, 0, 0, 405, 0, 0, 337, 0, 0,
	0, 769, 0, 391, 372, 840, 0, 123, 389, 342,
	418, 380, 424, 407, 432, 385, 381, 268, 408, 307,
	353, 280, 282, 302, 309, 311, 313, 314, 362, 363,
	375, 396, 409, 410, 411, 306, 290, 390, 291, 324,
	292, 269, 298, 296, 299, 398, 300, 271, 376, 415,
	1076, 319, 386, 349, 272, 348, 377, 414, 413, 281,
	440, 446, 447, 537, 0, 452, 617, 618, 619, 461,
	466, 467, 468, 470, 471, 472, 473, 538, 555, 522,
	492, 454, 546, 489, 493, 494, 558, 1711, 1710, 1712,
	445, 338, 339, 0, 317, 265, 266, 612, 825, 368,
	560, 593, 485, 0, 839, 820, 822, 823, 826, 830,
	831, 832, 833, 834, 836, 838, 842, 611, 0, 539,
	554, 615, 553, 608, 374, 0, 395, 551, 498, 0,
	543, 517, 0, 544, 513, 548, 0, 487, 0, 402,
	426, 438, 455, 458, 488, 573, 574, 575, 270, 457,
	577, 578, 579, 580, 581, 582, 583, 576, 841, 520,
	497, 523, 437, 500, 499, 0, 0, 534, 773, 535,
	536, 358, 359, 360, 361, 828, 561, 288, 456, 384,
	0, 521, 0, 0, 0, 0, 0, 0, 0, 0,
	526, 527, 524, 620, 0, 584, 585, 0, 0, 450,
	451, 316, 323, 469, 325, 287, 373, 318, 435, 332,
	0, 462, 528, 463, 587, 590, 588, 589, 365, 328,
	329, 399, 333, 343, 387, 434, 371, 392, 285, 425,
	400, 347, 514, 541, 850, 824, 849, 851, 852, 848,
	853, 854, 835, 729, 0, 780, 846, 845, 847, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	569, 568, 567, 566, 565, 564, 563, 562, 0, 0,
	511, 412, 297, 259, 293, 294, 301, 609, 606, 416,
	610, 0, 267, 491, 341, 0, 382, 315, 556, 557,
	0, 0, 813, 787, 788, 789, 726, 790, 784, 785,
	727, 786, 814, 778, 810, 811, 754, 781, 791, 809,
	792, 812, 815, 816, 855, 856, 798, 782, 231, 857,
	795, 817, 808, 807, 793, 779, 818, 819, 761, 756,
	796, 797, 783, 801, 802, 803, 728, 775, 776, 777,
	799, 800, 757, 758, 759, 760, 0, 0, 0, 441,
	442, 443, 465, 427, 490, 607, 0, 0, 0, 0,
	0, 0, 0, 540, 552, 586, 0, 595, 596, 598,
	600, 804, 602, 771, 613, 481, 482, 614, 480, 592,
	0, 721, 370, 0, 496, 529, 518, 601, 484, 0,
	0, 0, 0, 0, 0, 724, 0, 0, 0, 310,
	1761, 0, 340, 533, 515, 525, 516, 501, 502, 503,
	510, 320, 504, 505, 506, 475, 507, 476, 508, 509,
	762, 532, 483, 401, 354, 550, 549, 0, 0, 829,
	837, 0, 0, 0, 0, 0, 0, 0, 1957, 0,
	0, 716, 0, 0, 752, 806, 805, 739, 749, 0,
	0, 283, 205, 477, 597, 479, 478, 740, 0, 741,
	745, 748, 744, 742, 743, 0, 821, 0, 0, 0,
	0, 0, 0, 708, 720, 0, 725, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	717, 718, 0, 0, 0, 0, 772, 0, 719, 0,
	0, 1958, 746, 750, 0, 0, 0, 0, 273, 406,
	423, 284, 397, 436, 289, 404, 279, 369, 393, 0,
	0, 275, 421, 403, 351, 330, 331, 274, 0, 388,
	308, 322, 305, 367, 747, 770, 774, 304, 843, 768,
	431, 277, 0, 430, 366, 417, 422, 352, 346, 276,
	419, 350, 345, 334, 312, 844, 335, 336, 326, 378,
	344, 379, 327, 356, 355, 357, 0, 0, 0, 0,
	0, 459, 460, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 591, 765, 0, 594, 0,
	433, 0, 0, 827, 0, 0, 0, 405, 0, 0,
	337, 0, 0, 0, 769, 0, 391, 372, 840, 0,
	0, 389, 342, 418, 380, 424, 407, 432, 385, 381,
	268, 408, 307, 353, 280, 282, 302, 309, 311, 313,
	314, 362, 363, 375, 396, 409, 410, 411, 306, 290,
	390, 291, 324, 292, 269, 298, 296, 299, 398, 300,
	271, 376, 415, 0, 319, 386, 349, 272, 348, 377,
	414, 413, 281, 440, 446, 447, 537, 0, 452, 617,
	618, 619, 461, 466, 467, 468, 470, 471, 472, 473,
	538, 555, 522, 492, 454, 546, 489, 493, 494, 558,
	0, 0, 0, 445, 338, 339, 0, 317, 265, 266,
	612, 825, 368, 560, 593, 485, 0, 839, 820, 822,
	823, 826, 830, 831, 832, 833, 834, 836, 838, 842,
	611, 0, 539, 554, 615, 553, 608, 374, 0, 395,
	551, 498, 0, 543, 517, 0, 544, 513, 548, 0,
	487, 0, 402, 426, 438, 455, 458, 488, 573, 574,
	575, 270, 457, 577, 578, 579, 580, 581, 582, 583,
	576, 841, 520, 497, 523, 437, 500, 499, 0, 0,
	534, 773, 535, 536, 358, 359, 360, 361, 828, 561,
	288, 456, 384, 0, 521, 0, 0, 0, 0, 0,
	0, 0, 0, 526, 527, 524, 620, 0, 584, 585,
	0, 0, 450, 451, 316, 323, 469, 325, 287, 373,
	318, 435, 332, 0, 462, 528, 463, 587, 590, 588,
	589, 365, 328, 329, 399, 333, 343, 387, 434, 371,
	392, 285, 425, 400, 347, 514, 541, 850, 824, 849,
	851, 852, 848, 853, 854, 835, 729, 0, 780, 846,
	845, 847, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 569, 568, 567, 566, 565, 564, 563,
	562, 0, 0, 511, 412, 297, 259, 293, 294, 301,
	609, 606, 416, 610, 0, 267, 491, 341, 0, 382,
	315, 556, 557, 0, 0, 813, 787, 788, 789, 726,
	790, 784, 785, 727, 786, 814, 778, 810, 811, 754,
	781, 791, 809, 792, 812, 815, 816, 855, 856, 798,
	782, 231, 857, 795, 817, 808, 807, 793, 779, 818,
	819, 761, 756, 796, 797, 783, 801, 802, 803, 728,
	775, 776, 777, 799, 800, 757, 758, 759, 760, 0,
	0, 0, 441, 442, 443, 465, 427, 490, 607, 0,
	0, 0, 0, 0, 0, 0, 540, 552, 586, 0,
	595, 596, 598, 600, 804, 602, 0, 613, 481, 482,
	614, 480, 592, 0, 721, 182, 771, 0, 0, 0,
	0, 0, 0, 0, 0, 370, 0, 496, 529, 518,
	601, 484, 0, 0, 0, 0, 0, 0, 724, 0,
	0, 0, 310, 0, 0, 340, 533, 515, 525, 516,
	501, 502, 503, 510, 320, 504, 505, 506, 475, 507,
	476, 508, 509, 1217, 532, 483, 401, 354, 550, 549,
	0, 0, 829, 837, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 716, 0, 0, 752, 806, 805,
	739, 749, 0, 0, 283, 205, 477, 597, 479, 478,
	740, 0, 741, 745, 748, 744, 742, 743, 0, 821,
	0, 0, 0, 0, 0, 0, 708, 720, 0, 725,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 717, 718, 0, 0, 0, 0, 772,
	0, 719, 0, 0, 767, 746, 750, 0, 0, 0,
	0, 273, 406, 423, 284, 397, 436, 289, 404, 279,
	369, 393, 0, 0, 275, 421, 403, 351, 330, 331,
	274, 0, 388, 308, 322, 305, 367, 747, 770, 774,
	304, 843, 768, 431, 277, 0, 430, 366, 417, 422,
	352, 346, 276, 419, 350, 345, 334, 312, 844, 335,
	336, 326, 378, 344, 379, 327, 356, 355, 357, 0,
	0, 0, 0, 0, 459, 460, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 591, 765,
	0, 594, 0, 433, 0, 0, 827, 0, 0, 0,
	405, 0, 0, 337, 0, 0, 0, 769, 0, 391,
	372, 840, 0, 0, 389, 342, 418, 380, 424, 407,
	432, 385, 381, 268, 408, 307, 353, 280, 282, 302,
	309, 311, 313, 314, 362, 363, 375, 396, 409, 410,
	411, 306, 290, 390, 291, 324, 292, 269, 298, 296,
	299, 398, 300, 271, 376, 415, 0, 319, 386, 349,
	272, 348, 377, 414, 413, 281, 440, 446, 447, 537,
	0, 452, 617, 618, 619, 461, 466, 467, 468, 470,
	471, 472, 473, 538, 555, 522, 492, 454, 546, 489,
	493, 494, 558, 0, 0, 0, 445, 338, 339, 0,
	317, 265, 266, 612, 825, 368, 560, 593, 485, 0,
	839, 820, 822, 823, 826, 830, 831, 832, 833, 834,
	836, 838, 842, 611, 0, 539, 554, 615, 553, 608,
	374, 0, 395, 551, 498, 0, 543, 517, 0, 544,
	513, 548, 0, 487, 0, 402, 426, 438, 455, 458,
	488, 573, 574, 575, 270, 457, 577, 578, 579, 580,
	581, 582, 583, 576, 841, 520, 497, 523, 437, 500,
	499, 0, 0, 534, 773, 535, 536, 358, 359, 360,
	361, 828, 561, 288, 456, 384, 0, 521, 0, 0,
	0, 0, 0, 0, 0, 0, 526, 527, 524, 620,
	0, 584, 585, 0, 0, 450, 451, 316, 323, 469,
	325, 287, 373, 318, 435, 332, 0, 462, 528, 463,
	587, 590, 588, 589, 365, 328, 329, 399, 333, 343,
	387, 434, 371, 392, 285, 425, 400, 347, 514, 541,
	850, 824, 849, 851, 852, 848, 853, 854, 835, 729,
	0, 780, 846, 845, 847, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 569, 568, 567, 566,
	565, 564, 563, 562, 0, 0, 511, 412, 297, 259,
	293, 294, 301, 609, 606, 416, 610, 0, 267, 491,
	341, 146, 382, 315, 556, 557, 0, 0, 813, 787,
	788, 789, 726, 790, 784, 785, 727, 786, 814, 778,
	810, 811, 754, 781, 791, 809, 792, 812, 815, 816,
	855, 856, 798, 782, 231, 857, 795, 817, 808, 807,
	793, 779, 818, 819, 761, 756, 796, 797, 783, 801,
	802, 803, 728, 775, 776, 777, 799, 800, 757, 758,
	759, 760, 0, 0, 0, 441, 442, 443, 465, 427,
	490, 607, 0, 0, 0, 0, 0, 0, 0, 540,
	552, 586, 0, 595, 596, 598, 600, 804, 602, 771,
	613, 481, 482, 614, 480, 592, 0, 721, 370, 0,
	496, 529, 518, 601, 484, 0, 0, 0, 0, 0,
	0, 724, 0, 0, 0, 310, 3817, 0, 340, 533,
	515, 525, 516, 501, 502, 503, 510, 320, 504, 505,
	506, 475, 507, 476, 508, 509, 762, 532, 483, 401,
	354, 550, 549, 0, 0, 829, 837, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 716, 0, 0,
	752, 806, 805, 739, 749, 0, 0, 283, 205, 477,
	597, 479, 478, 740, 0, 741, 745, 748, 744, 742,
	743, 0, 821, 0, 0, 0, 0, 0, 0, 708,
	720, 0, 725, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 717, 718, 0, 0,
	0, 0, 772, 0, 719, 0, 0, 767, 746, 750,
	0, 0, 0, 0, 273, 406, 423, 284, 397, 436,
	289, 404, 279, 369, 393, 0, 0, 275, 421, 403,
	351, 330, 331, 274, 0, 388, 308, 322, 305, 367,
	747, 770, 774, 304, 843, 768, 431, 277, 0, 430,
	366, 417, 422, 352, 346, 276, 419, 350, 345, 334,
	312, 844, 335, 336, 326, 378, 344, 379, 327, 356,
	355, 357, 0, 0, 0, 0, 0, 459, 460, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 591, 765, 0, 594, 0, 433, 0, 0, 827,
	0, 0, 0, 405, 0, 0, 337, 0, 0, 0,
	769, 0, 391, 372, 840, 0, 0, 389, 342, 418,
	380, 424, 407, 432, 385, 381, 268, 408, 307, 353,
	280, 282, 302, 309, 311, 313, 314, 362, 363, 375,
	396, 409, 410, 411, 306, 290, 390, 291, 324, 292,
	269, 298, 296, 299, 398, 300, 271, 376, 415, 0,
	319, 386, 349, 272, 348, 377, 414, 413, 281, 440,
	446, 447, 537, 0, 452, 617, 618, 619, 461, 466,
	467, 468, 470, 471, 472, 473, 538, 555, 522, 492,
	454, 546, 489, 493, 494, 558, 0, 0, 0, 445,
	338, 339, 0, 317, 265, 266, 612, 825, 368, 560,
	593, 485, 0, 839, 820, 822, 823, 826, 830, 831,
	832, 833, 834, 836, 838, 842, 611, 0, 539, 554,
	615, 553, 608, 374, 0, 395, 551, 498, 0, 543,
	517, 0, 544, 513, 548, 0, 487, 0, 402, 426,
	438, 455, 458, 488, 573, 574, 575, 270, 457, 577,
	578, 579, 580, 581, 582, 583, 576, 841, 520, 497,
	523, 437, 500, 499, 0, 0, 534, 773, 535, 536,
	358, 359, 360, 361, 828, 561, 288, 456, 384, 0,
	521, 0, 0, 0, 0, 0, 0, 0, 0, 526,
	527, 524, 620, 0, 584, 585, 0, 0, 450, 451,
	316, 323, 469, 325, 287, 373, 318, 435, 332, 0,
	462, 528, 463, 587, 590, 588, 589, 365, 328, 329,
	399, 333, 343, 387, 434, 371, 392, 285, 425, 400,
	347, 514, 541, 850, 824, 849, 851, 852, 848, 853,
	854, 835, 729, 0, 780, 846, 845, 847, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 569,
	568, 567, 566, 565, 564, 563, 562, 0, 0, 511,
	412, 297, 259, 293, 294, 301, 609, 606, 416, 610,
	0, 267, 491, 341, 0, 382, 315, 556, 557, 0,
	0, 813, 787, 788, 789, 726, 790, 784, 785, 727,
	786, 814, 778, 810, 811, 754, 781, 791, 809, 792,
	812, 815, 816, 855, 856, 798, 782, 231, 857, 795,
	817, 808, 807, 793, 779, 818, 819, 761, 756, 796,
	797, 783, 801, 802, 803, 728, 775, 776, 777, 799,
	800, 757, 758, 759, 760, 0, 0, 0, 441, 442,
	443, 465, 427, 490, 607, 0, 0, 0, 0, 0,
	0, 0, 540, 552, 586, 0, 595, 596, 598, 600,
	804, 602, 771, 613, 481, 482, 614, 480, 592, 0,
	721, 370, 0, 496, 529, 518, 601, 484, 0, 0,
	0, 0, 0, 0, 724, 0, 0, 0, 310, 0,
	0, 340, 533, 515, 525, 516, 501, 502, 503, 510,
	320, 504, 505, 506, 475, 507, 476, 508, 509, 762,
	532, 483, 401, 354, 550, 549, 0, 0, 829, 837,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	716, 0, 0, 752, 806, 805, 739, 749, 0, 0,
	283, 205, 477, 597, 479, 478, 740, 0, 741, 745,
	748, 744, 742, 743, 0, 821, 0, 0, 0, 0,
	0, 0, 708, 720, 0, 725, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 717,
	718, 0, 0, 0, 0, 772, 0, 719, 0, 0,
	767, 746, 750, 0, 0, 0, 0, 273, 406, 423,
	284, 397, 436, 289, 404, 279, 369, 393, 0, 0,
	275, 421, 403, 351, 330, 331, 274, 0, 388, 308,
	322, 305, 367, 747, 770, 774, 304, 843, 768, 431,
	277, 0, 430, 366, 417, 422, 352, 346, 276, 419,
	350, 345, 334, 312, 844, 335, 336, 326, 378, 344,
	379, 327, 356, 355, 357, 0, 0, 0, 0, 0,
	459, 460, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 591, 765, 0, 594, 0, 433,
	0, 0, 827, 0, 0, 0, 405, 0, 0, 337,
	0, 0, 0, 769, 0, 391, 372, 840, 3711, 0,
	389, 342, 418, 380, 424, 407, 432, 385, 381, 268,
	408, 307, 353, 280, 282, 302, 309, 311, 313, 314,
	362, 363, 375, 396, 409, 410, 411, 306, 290, 390,
	291, 324, 292, 269, 298, 296, 299, 398, 300, 271,
	376, 415, 0, 319, 386, 349, 272, 348, 377, 414,
	413, 281, 440, 446, 447, 537, 0, 452, 617, 618,
	619, 461, 466, 467, 468, 470, 471, 472, 473, 538,
	555, 522, 492, 454, 546, 489, 493, 494, 558, 0,
	0, 0, 445, 338, 339, 0, 317, 265, 266, 612,
	825, 368, 560, 593, 485, 0, 839, 820, 822, 823,
	826, 830, 831, 832, 833, 834, 836, 838, 842, 611,
	0, 539, 554, 615, 553, 608, 374, 0, 395, 551,
	498, 0, 543, 517, 0, 544, 513, 548, 0, 487,
	0, 402, 426, 438, 455, 458, 488, 573, 574, 575,
	270, 457, 577, 578, 579, 580, 581, 582, 583, 576,
	841, 520, 497, 523, 437, 500, 499, 0, 0, 534,
	773, 535, 536, 358, 359, 360, 361, 828, 561, 288,
	456, 384, 0, 521, 0, 0, 0, 0, 0, 0,
	0, 0, 526, 527, 524, 620, 0, 584, 585, 0,
	0, 450, 451, 316, 323, 469, 325, 287, 373, 318,
	435, 332, 0, 462, 528, 463, 587, 590, 588, 589,
	365, 328, 329, 399, 333, 343, 387, 434, 371, 392,
	285, 425, 400, 347, 514, 541, 850, 824, 849, 851,
	852, 848, 853, 854, 835, 729, 0, 780, 846, 845,
	847, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 569, 568, 567, 566, 565, 564, 563, 562,
	0, 0, 511, 412, 297, 259, 293, 294, 301, 609,
	606, 416, 610, 0, 267, 491, 341, 0, 382, 315,
	556, 557, 0, 0, 813, 787, 788, 789, 726, 790,
	784, 785, 727, 786, 814, 778, 810, 811, 754, 781,
	791, 809, 792, 812, 815, 816, 855, 856, 798, 782,
	231, 857, 795, 817, 808, 807, 793, 779, 818, 819,
	761, 756, 796, 797, 783, 801, 802, 803, 728, 775,
	776, 777, 799, 800, 757, 758, 759, 760, 0, 0,
	0, 441, 442, 443, 465, 427, 490, 607, 0, 0,
	0, 0, 0, 0, 0, 540, 552, 586, 0, 595,
	596, 598, 600, 804, 602, 771, 613, 481, 482, 614,
	480, 592, 0, 721, 370, 0, 496, 529, 518, 601,
	484, 0, 0, 0, 0, 0, 0, 724, 0, 0,
	0, 310, 1761, 0, 340, 533, 515, 525, 516, 501,
	502, 503, 510, 320, 504, 505, 506, 475, 507, 476,
	508, 509, 762, 532, 483, 401, 354, 550, 549, 0,
	0, 829, 837, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 716, 0, 0, 752, 806, 805, 739,
	749, 0, 0, 283, 205, 477, 597, 479, 478, 740,
	0, 741, 745, 748, 744, 742, 743, 0, 821, 0,
	0, 0, 0, 0, 0, 708, 720, 0, 725, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 717, 718, 0, 0, 0, 0, 772, 0,
	719, 0, 0, 767, 746, 750, 0, 0, 0, 0,
	273, 406, 423, 284, 397, 436, 289, 404, 279, 369,
	393, 0, 0, 275, 421, 403, 351, 330, 331, 274,
	0, 388, 308, 322, 305, 367, 747, 770, 774, 304,
	843, 768, 431, 277, 0, 430, 366, 417, 422, 352,
	346, 276, 419, 350, 345, 334, 312, 844, 335, 336,
	326, 378, 344, 379, 327, 356, 355, 357, 0, 0,
	0, 0, 0, 459, 460, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 591, 765, 0,
	594, 0, 433, 0, 0, 827, 0, 0, 0, 405,
	0, 0, 337, 0, 0, 0, 769, 0, 391, 372,
	840, 0, 0, 389, 342, 418, 380, 424, 407, 432,
	385, 381, 268, 408, 307, 353, 280, 282, 302, 309,
	311, 313, 314, 362, 363, 375, 396, 409, 410, 411,
	306, 290, 390, 291, 324, 292, 269, 298, 296, 299,
	398, 300, 271, 376, 415, 0, 319, 386, 349, 272,
	348, 377, 414, 413, 281, 440, 446, 447, 537, 0,
	452, 617, 618, 619, 461, 466, 467, 468, 470, 471,
	472, 473, 538, 555, 522, 492, 454, 546, 489, 493,
	494, 558, 0, 0, 0, 445, 338, 339, 0, 317,
	265, 266, 612, 825, 368, 560, 593, 485, 0, 839,
	820, 822, 823, 826, 830, 831, 832, 833, 834, 836,
	838, 842, 611, 0, 539, 554, 615, 553, 608, 374,
	0, 395, 551, 498, 0, 543, 517, 0, 544, 513,
	548, 0, 487, 0, 402, 426, 438, 455, 458, 488,
	573, 574, 575, 270, 457, 577, 578, 579, 580, 581,
	582, 583, 576, 841, 520, 497, 523, 437, 500, 499,
	0, 0, 534, 773, 535, 536, 358, 359, 360, 361,
	828, 561, 288, 456, 384, 0, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 526, 527, 524, 620, 0,
	584, 585, 0, 0, 450, 451, 316, 323, 469, 325,
	287, 373, 318, 435, 332, 0, 462, 528, 463, 587,
	590, 588, 589, 365, 328, 329, 399, 333, 343, 387,
	434, 371, 392, 285, 425, 400, 347, 514, 541, 850,
	824, 849, 851, 852, 848, 853, 854, 835, 729, 0,
	780, 846, 845, 847, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 569, 568, 567, 566, 565,
	564, 563, 562, 0, 0, 511, 412, 297, 259, 293,
	294, 301, 609, 606, 416, 610, 0, 267, 491, 341,
	0, 382, 315, 556, 557, 0, 0, 813, 787, 788,
	789, 726, 790, 784, 785, 727, 786, 814, 778, 810,
	811, 754, 781, 791, 809, 792, 812, 815, 816, 855,
	856, 798, 782, 231, 857, 795, 817, 808, 807, 793,
	779, 818, 819, 761, 756, 796, 797, 783, 801, 802,
	803, 728, 775, 776, 777, 799, 800, 757, 758, 759,
	760, 0, 0, 0, 441, 442, 443, 465, 427, 490,
	607, 0, 0, 0, 0, 0, 0, 0, 540, 552,
	586, 0, 595, 596, 598, 600, 804, 602, 771, 613,
	481, 482, 614, 480, 592, 0, 721, 370, 0, 496,
	529, 518, 601, 484, 0, 0, 0, 0, 0, 0,
	724, 0, 0, 0, 310, 0, 0, 340, 533, 515,
	525, 516, 501, 502, 503, 510, 320, 504, 505, 506,
	475, 507, 476, 508, 509, 762, 532, 483, 401, 354,
	550, 549, 0, 0, 829, 837, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 716, 0, 0, 752,
	806, 805, 739, 749, 0, 0, 283, 205, 477, 597,
	479, 478, 740, 0, 741, 745, 748, 744, 742, 743,
	0, 821, 0, 0, 0, 0, 0, 0, 708, 720,
	0, 725, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 717, 718, 1484, 0, 0,
	0, 772, 0, 719, 0, 0, 767, 746, 750, 0,
	0, 0, 0, 273, 406, 423, 284, 397, 436, 289,
	404, 279, 369, 393, 0, 0, 275, 421, 403, 351,
	330, 331, 274, 0, 388, 308, 322, 305, 367, 747,
	770, 774, 304, 843, 768, 431, 277, 0, 430, 366,
	417, 422, 352, 346, 276, 419, 350, 345, 334, 312,
	844, 335, 336, 326, 378, 344, 379, 327, 356, 355,
	357, 0, 0, 0, 0, 0, 459, 460, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	591, 765, 0, 594, 0, 433, 0, 0, 827, 0,
	0, 0, 405, 0, 0, 337, 0, 0, 0, 769,
	0, 391, 372, 840, 0, 0, 389, 342, 418, 380,
	424, 407, 432, 385, 381, 268, 408, 307, 353, 280,
	282, 302, 309, 311, 313, 314, 362, 363, 375, 396,
	409, 410, 411, 306, 290, 390, 291, 324, 292, 269,
	298, 296, 299, 398, 300, 271, 376, 415, 0, 319,
	386, 349, 272, 348, 377, 414, 413, 281, 440, 446,
	447, 537, 0, 452, 617, 618, 619, 461, 466, 467,
	468, 470, 471, 472, 473, 538, 555, 522, 492, 454,
	546, 489, 493, 494, 558, 0, 0, 0, 445, 338,
	339, 0, 317, 265, 266, 612, 825, 368, 560, 593,
	485, 0, 839, 820, 822, 823, 826, 830, 831, 832,
	833, 834, 836, 838, 842, 611, 0, 539, 554, 615,
	553, 608, 374, 0, 395, 551, 498, 0, 543, 517,
	0, 544, 513, 548, 0, 487, 0, 402, 426, 438,
	455, 458, 488, 573, 574, 575, 270, 457, 577, 578,
	579, 580, 581, 582, 583, 576, 841, 520, 497, 523,
	437, 500, 499, 0, 0, 534, 773, 535, 536, 358,
	359, 360, 361, 828, 561, 288, 456, 384, 0, 521,
	0, 0, 0, 0, 0, 0, 0, 0, 526, 527,
	524, 620, 0, 584, 585, 0, 0, 450, 451, 316,
	323, 469, 325, 287, 373, 318, 435, 332, 0, 462,
	528, 463, 587, 590, 588, 589, 365, 328, 329, 399,
	333, 343, 387, 434, 371, 392, 285, 425, 400, 347,
	514, 541, 850, 824, 849, 851, 852, 848, 853, 854,
	835, 729, 0, 780, 846, 845, 847, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 569, 568,
	567, 566, 565, 564, 563, 562, 0, 0, 511, 412,
	297, 259, 293, 294, 301, 609, 606, 416, 610, 0,
	267, 491, 341, 0, 382, 315, 556, 557, 0, 0,
	813, 787, 788, 789, 726, 790, 784, 785, 727, 786,
	814, 778, 810, 811, 754, 781, 791, 809, 792, 812,
	815, 816, 855, 856, 798, 782, 231, 857, 795, 817,
	808, 807, 793, 779, 818, 819, 761, 756, 796, 797,
	783, 801, 802, 803, 728, 775, 776, 777, 799, 800,
	757, 758, 759, 760, 0, 0, 0, 441, 442, 443,
	465, 427, 490, 607, 0, 0, 0, 0, 0, 0,
	0, 540, 552, 586, 0, 595, 596, 598, 600, 804,
	602, 0, 613, 481, 482, 614, 480, 592, 771, 721,
	0, 2128, 0, 0, 0, 0, 0, 370, 0, 496,
	529, 518, 601, 484, 0, 0, 0, 0, 0, 0,
	724, 0, 0, 0, 310, 0, 0, 340, 533, 515,
	525, 516, 501, 502, 503, 510, 320, 504, 505, 506,
	475, 507, 476, 508, 509, 762, 532, 483, 401, 354,
	550, 549, 0, 0, 829, 837, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 716, 0, 0, 752,
	806, 805, 739, 749, 0, 0, 283, 205, 477, 597,
	479, 478, 740, 0, 741, 745, 748, 744, 742, 743,
	0, 821, 0, 0, 0, 0, 0, 0, 708, 720,
	0, 725, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 717, 718, 0, 0, 0,
	0, 772, 0, 719, 0, 0, 767, 746, 750, 0,
	0, 0, 0, 273, 406, 423, 284, 397, 436, 289,
	404, 279, 369, 393, 0, 0, 275, 421, 403, 351,
	330, 331, 274, 0, 388, 308, 322, 305, 367, 747,
	770, 774, 304, 843, 768, 431, 277, 0, 430, 366,
	417, 422, 352, 346, 276, 419, 350, 345, 334, 312,
	844, 335, 336, 326, 378, 344, 379, 327, 356, 355,
	357, 0, 0, 0, 0, 0, 459, 460, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	591, 765, 0, 594, 0, 433, 0, 0, 827, 0,
	0, 0, 405, 0, 0, 337, 0, 0, 0, 769,
	0, 391, 372, 840, 0, 0, 389, 342, 418, 380,
	424, 407, 432, 385, 381, 268, 408, 307, 353, 280,
	282, 302, 309, 311, 313, 314, 362, 363, 375, 396,
	409, 410, 411, 306, 290, 390, 291, 324, 292, 269,
	298, 296, 299, 398, 300, 271, 376, 415, 0, 319,
	386, 349, 272, 348, 377, 414, 413, 281, 440, 446,
	447, 537, 0, 452, 617, 618, 619, 461, 466, 467,
	468, 470, 471, 472, 473, 538, 555, 522, 492, 454,
	546, 489, 493, 494, 558, 0, 0, 0, 445, 338,
	339, 0, 317, 265, 266, 612, 825, 368, 560, 593,
	485, 0, 839, 820, 822, 823, 826, 830, 831, 832,
	833, 834, 836, 838, 842, 611, 0, 539, 554, 615,
	553, 608, 374, 0, 395, 551, 498, 0, 543, 517,
	0, 544, 513, 548, 0, 487, 0, 402, 426, 438,
	455, 458, 488, 573, 574, 575, 270, 457, 577, 578,
	579, 580, 581, 582, 583, 576, 841, 520, 497, 523,
	437, 500, 499, 0, 0, 534, 773, 535, 536, 358,
	359, 360, 361, 828, 561, 288, 456, 384, 0, 521,
	0, 0, 0, 0, 0, 0, 0, 0, 526, 527,
	524, 620, 0, 584, 585, 0, 0, 450, 451, 316,
	323, 469, 325, 287, 373, 318, 435, 332, 0, 462,
	528, 463, 587, 590, 588, 589, 365, 328, 329, 399,
	333, 343, 387, 434, 371, 392, 285, 425, 400, 347,
	514, 541, 850, 824, 849, 851, 852, 848, 853, 854,
	835, 729, 0, 780, 846, 845, 847, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 569, 568,
	567, 566, 565, 564, 563, 562, 0, 0, 511, 412,
	297, 259, 293, 294, 301, 609, 606, 416, 610, 0,
	267, 491, 341, 0, 382, 315, 556, 557, 0, 0,
	813, 787, 788, 789, 726, 790, 784, 785, 727, 786,
	814, 778, 810, 811, 754, 781, 791, 809, 792, 812,
	815, 816, 855, 856, 798, 782, 231, 857, 795, 817,
	808, 807, 793, 779, 818, 819, 761, 756, 796, 797,
	783, 801, 802, 803, 728, 775, 776, 777, 799, 800,
	757, 758, 759, 760, 0, 0, 0, 441, 442, 443,
	465, 427, 490, 607, 0, 0, 0, 0, 0, 0,
	0, 540, 552, 586, 0, 595, 596, 598, 600, 804,
	602, 771, 613, 481, 482, 614, 480, 592, 0, 721,
	370, 0, 496, 529, 518, 601, 484, 0, 0, 0,
	0, 0, 0, 724, 0, 0, 0, 310, 0, 0,
	340, 533, 515, 525, 516, 501, 502, 503, 510, 320,
	504, 505, 506, 475, 507, 476, 508, 509, 762, 532,
	483, 401, 354, 550, 549, 0, 0, 829, 837, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 716,
	0, 0, 752, 806, 805, 739, 749, 0, 0, 283,
	205, 477, 597, 479, 478, 740, 0, 741, 745, 748,
	744, 742, 743, 0, 821, 0, 0, 0, 0, 0,
	0, 708, 720, 0, 725, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 717, 718,
	1754, 0, 0, 0, 772, 0, 719, 0, 0, 767,
	746, 750, 0, 0, 0, 0, 273, 406, 423, 284,
	397, 436, 289, 404, 279, 369, 393, 0, 0, 275,
	421, 403, 351, 330, 331, 274, 0, 388, 308, 322,
	305, 367, 747, 770, 774, 304, 843, 768, 431, 277,
	0, 430, 366, 417, 422, 352, 346, 276, 419, 350,
	345, 334, 312, 844, 335, 336, 326, 378, 344, 379,
	327, 356, 355, 357, 0, 0, 0, 0, 0, 459,
	460, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 591, 765, 0, 594, 0, 433, 0,
	0, 827, 0, 0, 0, 405, 0, 0, 337, 0,
	0, 0, 769, 0, 391, 372, 840, 0, 0, 389,
	342, 418, 380, 424, 407, 432, 385, 381, 268, 408,
	307, 353, 280, 282, 302, 309, 311, 313, 314, 362,
	363, 375, 396, 409, 410, 411, 306, 290, 390, 291,
	324, 292, 269, 298, 296, 299, 398, 300, 271, 376,
	415, 0, 319, 386, 349, 272, 348, 377, 414, 413,
	281, 440, 446, 447, 537, 0, 452, 617, 618, 619,
	461, 466, 467, 468, 470, 471, 472, 473, 538, 555,
	522, 492, 454, 546, 489, 493, 494, 558, 0, 0,
	0, 445, 338, 339, 0, 317, 265, 266, 612, 825,
	368, 560, 593, 485, 0, 839, 820, 822, 823, 826,
	830, 831, 832, 833, 834, 836, 838, 842, 611, 0,
	539, 554, 615, 553, 608, 374, 0, 395, 551, 498,
	0, 543, 517, 0, 544, 513, 548, 0, 487, 0,
	402, 426, 438, 455, 458, 488, 573, 574, 575, 270,
	457, 577, 578, 579, 580, 581, 582, 583, 576, 841,
	520, 497, 523, 437, 500, 499, 0, 0, 534, 773,
	535, 536, 358, 359, 360, 361, 828, 561, 288, 456,
	384, 0, 521, 0, 0, 0, 0, 0, 0, 0,
	0, 526, 527, 524, 620, 0, 584, 585, 0, 0,
	450, 451, 316, 323, 469, 325, 287, 373, 318, 435,
	332, 0, 462, 528, 463, 587, 590, 588, 589, 365,
	328, 329, 399, 333, 343, 387, 434, 371, 392, 285,
	425, 400, 347, 514, 541, 850, 824, 849, 851, 852,
	848, 853, 854, 835, 729, 0, 780, 846, 845, 847,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 569, 568, 567, 566, 565, 564, 563, 562, 0,
	0, 511, 412, 297, 259, 293, 294, 301, 609, 606,
	416, 610, 0, 267, 491, 341, 0, 382, 315, 556,
	557, 0, 0, 813, 787, 788, 789, 726, 790, 784,
	785, 727, 786, 814, 778, 810, 811, 754, 781, 791,
	809, 792, 812, 815, 816, 855, 856, 798, 782, 231,
	857, 795, 817, 808, 807, 793, 779, 818, 819, 761,
	756, 796, 797, 783, 801, 802, 803, 728, 775, 776,
	777, 799, 800, 757, 758, 759, 760, 0, 0, 0,
	441, 442, 443, 465, 427, 490, 607, 0, 0, 0,
	0, 0, 0, 0, 540, 552, 586, 0, 595, 596,
	598, 600, 804, 602, 771, 613, 481, 482, 614, 480,
	592, 0, 721, 370, 0, 496, 529, 518, 601, 484,
	0, 0, 0, 0, 0, 0, 724, 0, 0, 0,
	310, 0, 0, 340, 533, 515, 525, 516, 501, 502,
	503, 510, 320, 504, 505, 506, 475, 507, 476, 508,
	509, 762, 532, 483, 401, 354, 550, 549, 0, 0,
	829, 837, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 716, 0, 0, 752, 806, 805, 739, 749,
	0, 0, 283, 205, 477, 597, 479, 478, 740, 0,
	741, 745, 748, 744, 742, 743, 0, 821, 0, 0,
	0, 0, 0, 0, 708, 720, 0, 725, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 717, 718, 0, 0, 0, 0, 772, 0, 719,
	0, 0, 767, 746, 750, 0, 0, 0, 0, 273,
	406, 423, 284, 397, 436, 289, 404, 279, 369, 393,
	0, 0, 275, 421, 403, 351, 330, 331, 274, 0,
	388, 308, 322, 305, 367, 747, 770, 774, 304, 843,
	768, 431, 277, 0, 430, 366, 417, 422, 352, 346,
	276, 419, 350, 345, 334, 312, 844, 335, 336, 326,
	378, 344, 379, 327, 356, 355, 357, 0, 0, 0,
	0, 0, 459, 460, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 591, 765, 0, 594,
	0, 433, 0, 0, 827, 0, 0, 0, 405, 0,
	0, 337, 0, 0, 0, 769, 0, 391, 372, 840,
	0, 0, 389, 342, 418, 380, 424, 407, 432, 385,
	381, 268, 408, 307, 353, 280, 282, 302, 309, 311,
	313, 314, 362, 363, 375, 396, 409, 410, 411, 306,
	290, 390, 291, 324, 292, 269, 298, 296, 299, 398,
	300, 271, 376, 415, 0, 319, 386, 349, 272, 348,
	377, 414, 413, 281, 440, 446, 447, 537, 0, 452,
	617, 618, 619, 461, 466, 467, 468, 470, 471, 472,
	473, 538, 555, 522, 492, 454, 546, 489, 493, 494,
	558, 0, 0, 0, 445, 338, 339, 0, 317, 265,
	266, 612, 825, 368, 560, 593, 485, 0, 839, 820,
	822, 823, 826, 830, 831, 832, 833, 834, 836, 838,
	842, 611, 0, 539, 554, 615, 553, 608, 374, 0,
	395, 551, 498, 0, 543, 517, 0, 544, 513, 548,
	0, 487, 0, 402, 426, 438, 455, 458, 488, 573,
	574, 575, 270, 457, 577, 578, 579, 580, 581, 582,
	583, 576, 841, 520, 497, 523, 437, 500, 499, 0,
	0, 534, 773, 535, 536, 358, 359, 360, 361, 828,
	561, 288, 456, 384, 0, 521, 0, 0, 0, 0,
	0, 0, 0, 0, 526, 527, 524, 620, 0, 584,
	585, 0, 0, 450, 451, 316, 323, 469, 325, 287,
	373, 318, 435, 332, 0, 462, 528, 463, 587, 590,
	588, 589, 365, 328, 329, 399, 333, 343, 387, 434,
	371, 392, 285, 425, 400, 347, 514, 541, 850, 824,
	849, 851, 852, 848, 853, 854, 835, 729, 0, 780,
	846, 845, 847, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 569, 568, 567, 566, 565, 564,
	563, 562, 0, 0, 511, 412, 297, 259, 293, 294,
	301, 609, 606, 416, 610, 0, 267, 491, 341, 0,
	382, 315, 556, 557, 0, 0, 813, 787, 788, 789,
	726, 790, 784, 785, 727, 786, 814, 778, 810, 811,
	754, 781, 791, 809, 792, 812, 815, 816, 855, 856,
	798, 782, 231, 857, 795, 817, 808, 807, 793, 779,
	818, 819, 761, 756, 796, 797, 783, 801, 802, 803,
	728, 775, 776, 777, 799, 800, 757, 758, 759, 760,
	0, 0, 0, 441, 442, 443, 465, 427, 490, 607,
	0, 0, 0, 0, 0, 0, 0, 540, 552, 586,
	0, 595, 596, 598, 600, 804, 602, 771, 613, 481,
	482, 614, 480, 592, 0, 721, 370, 0, 496, 529,
	518, 601, 484, 0, 0, 0, 0, 0, 0, 724,
	0, 0, 0, 310, 0, 0, 340, 533, 515, 525,
	516, 501, 502, 503, 510, 320, 504, 505, 506, 475,
	507, 476, 508, 509, 762, 532, 483, 401, 354, 550,
	549, 0, 0, 829, 837, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 716, 0, 0, 752, 806,
	805, 739, 749, 0, 0, 283, 205, 477, 597, 479,
	478, 2577, 0, 2578, 745, 748, 744, 742, 743, 0,
	821, 0, 0, 0, 0, 0, 0, 708, 720, 0,
	725, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 717, 718, 0, 0, 0, 0,
	772, 0, 719, 0, 0, 767, 746, 750, 0, 0,
	0, 0, 273, 406, 423, 284, 397, 436, 289, 404,
	279, 369, 393, 0, 0, 275, 421, 403, 351, 330,
	331, 274, 0, 388, 308, 322, 305, 367, 747, 770,
	774, 304, 843, 768, 431, 277, 0, 430, 366, 417,
	422, 352, 346, 276, 419, 350, 345, 334, 312, 844,
	335, 336, 326, 378, 344, 379, 327, 356, 355, 357,
	0, 0, 0, 0, 0, 459, 460, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 591,
	765, 0, 594, 0, 433, 0, 0, 827, 0, 0,
	0, 405, 0, 0, 337, 0, 0, 0, 769, 0,
	391, 372, 840, 0, 0, 389, 342, 418, 380, 424,
	407, 432, 385, 381, 268, 408, 307, 353, 280, 282,
	302, 309, 311, 313, 314, 362, 363, 375, 396, 409,
	410, 411, 306, 290, 390, 291, 324, 292, 269, 298,
	296, 299, 398, 300, 271, 376, 415, 0, 319, 386,
	349, 272, 348, 377, 414, 413, 281, 440, 446, 447,
	537, 0, 452, 617, 618, 619, 461, 466, 467, 468,
	470, 471, 472, 473, 538, 555, 522, 492, 454, 546,
	489, 493, 494, 558, 0, 0, 0, 445, 338, 339,
	0, 317, 265, 266, 612, 825, 368, 560, 593, 485,
	0, 839, 820, 822, 823, 826, 830, 831, 832, 833,
	834, 836, 838, 842, 611, 0, 539, 554, 615, 553,
	608, 374, 0, 395, 551, 498, 0, 543, 517, 0,
	544, 513, 548, 0, 487, 0, 402, 426, 438, 455,
	458, 488, 573, 574, 575, 270, 457, 577, 578, 579,
	580, 581, 582, 583, 576, 841, 520, 497, 523, 437,
	500, 499, 0, 0, 534, 773, 535, 536, 358, 359,
	360, 361, 828, 561, 288, 456, 384, 0, 521, 0,
	0, 0, 0, 0, 0, 0, 0, 526, 527, 524,
	620, 0, 584, 585, 0, 0, 450, 451, 316, 323,
	469, 325, 287, 373, 318, 435, 332, 0, 462, 528,
	463, 587, 590, 588, 589, 365, 328, 329, 399, 333,
	343, 387, 434, 371, 392, 285, 425, 400, 347, 514,
	541, 850, 824, 849, 851, 852, 848, 853, 854, 835,
	729, 0, 780, 846, 845, 847, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 569, 568, 567,
	566, 565, 564, 563, 562, 0, 0, 511, 412, 297,
	259, 293, 294, 301, 609, 606, 416, 610, 0, 267,
	491, 341, 0, 382, 315, 556, 557, 0, 0, 813,
	787, 788, 789, 726, 790, 784, 785, 727, 786, 814,
	778, 810, 811, 754, 781, 791, 809, 792, 812, 815,
	816, 855, 856, 798, 782, 231, 857, 795, 817, 808,
	807, 793, 779, 818, 819, 761, 756, 796, 797, 783,
	801, 802, 803, 728, 775, 776, 777, 799, 800, 757,
	758, 759, 760, 0, 0, 0, 441, 442, 443, 465,
	427, 490, 607, 0, 0, 0, 0, 0, 0, 0,
	540, 552, 586, 0, 595, 596, 598, 600, 804, 602,
	771, 613, 481, 482, 614, 480, 592, 0, 721, 370,
	0, 496, 529, 518, 601, 484, 0, 0, 1624, 0,
	0, 0, 724, 0, 0, 0, 310, 0, 0, 340,
	533, 515, 525, 516, 501, 502, 503, 510, 320, 504,
	505, 506, 475, 507, 476, 508, 509, 762, 532, 483,
	401, 354, 550, 549, 0, 0, 829, 837, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 716, 0,
	0, 752, 806, 805, 739, 749, 0, 0, 283, 205,
	477, 597, 479, 478, 740, 0, 741, 745, 748, 744,
	742, 743, 0, 821, 0, 0, 0, 0, 0, 0,
	0, 720, 0, 725, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 717, 718, 0,
	0, 0, 0, 772, 0, 719, 0, 0, 767, 746,
	750, 0, 0, 0, 0, 273, 406, 423, 284, 397,
	436, 289, 404, 279, 369, 393, 0, 0, 275, 421,
	403, 351, 330, 331, 274, 0, 388, 308, 322, 305,
	367, 747, 770, 774, 304, 843, 768, 431, 277, 0,
	430, 366, 417, 422, 352, 346, 276, 419, 350, 345,
	334, 312, 844, 335, 336, 326, 378, 344, 379, 327,
	356, 355, 357, 0, 0, 0, 0, 0, 459, 460,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 591, 765, 0, 594, 0, 433, 0, 0,
	827, 0, 0, 0, 405, 0, 0, 337, 0, 0,
	0, 769, 0, 391, 372, 840, 0, 0, 389, 342,
	418, 380, 424, 407, 432, 385, 381, 268, 408, 307,
	353, 280, 282, 302, 309, 311, 313, 314, 362, 363,
	375, 396, 409, 410, 411, 306, 290, 390, 291, 324,
	292, 269, 298, 296, 299, 398, 300, 271, 376, 415,
	0, 319, 386, 349, 272, 348, 377, 414, 413, 281,
	440, 1625, 1626, 537, 0, 452, 617, 618, 619, 461,
	466, 467, 468, 470, 471, 472, 473, 538, 555, 522,
	492, 454, 546, 489, 493, 494, 558, 0, 0, 0,
	445, 338, 339, 0, 317, 265, 266, 612, 825, 368,
	560, 593, 485, 0, 839, 820, 822, 823, 826, 830,
	831, 832, 833, 834, 836, 838, 842, 611, 0, 539,
	554, 615, 553, 608, 374, 0, 395, 551, 498, 0,
	543, 517, 0, 544, 513, 548, 0, 487, 0, 402,
	426, 438, 455, 458, 488, 573, 574, 575, 270, 457,
	577, 578, 579, 580, 581, 582, 583, 576, 841, 520,
	497, 523, 437, 500, 499, 0, 0, 534, 773, 535,
	536, 358, 359, 360, 361, 828, 561, 288, 456, 384,
	0, 521, 0, 0, 0, 0, 0, 0, 0, 0,
	526, 527, 524, 620, 0, 584, 585, 0, 0, 450,
	451, 316, 323, 469, 325, 287, 373, 318, 435, 332,
	0, 462, 528, 463, 587, 590, 588, 589, 365, 328,
	329, 399, 333, 343, 387, 434, 371, 392, 285, 425,
	400, 347, 514, 541, 850, 824, 849, 851, 852, 848,
	853, 854, 835, 729, 0, 780, 846, 845, 847, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	569, 568, 567, 566, 565, 564, 563, 562, 0, 0,
	511, 412, 297, 259, 293, 294, 301, 609, 606, 416,
	610, 0, 267, 491, 341, 0, 382, 315, 556, 557,
	0, 0, 813, 787, 788, 789, 726, 790, 784, 785,
	727, 786, 814, 778, 810, 811, 754, 781, 791, 809,
	792, 812, 815, 816, 855, 856, 798, 782, 231, 857,
	795, 817, 808, 807, 793, 779, 818, 819, 761, 756,
	796, 797, 783, 801, 802, 803, 728, 775, 776, 777,
	799, 800, 757, 758, 759, 760, 0, 0, 0, 441,
	442, 443, 465, 427, 490, 607, 0, 0, 0, 0,
	0, 0, 0, 540, 552, 586, 0, 595, 596, 598,
	600, 804, 602, 771, 613, 481, 482, 614, 480, 592,
	0, 721, 370, 0, 496, 529, 518, 601, 484, 0,
	0, 0, 0, 0, 0, 724, 0, 0, 0, 310,
	0, 0, 340, 533, 515, 525, 516, 501, 502, 503,
	510, 320, 504, 505, 506, 475, 507, 476, 508, 509,
	762, 532, 483, 401, 354, 550, 549, 0, 0, 829,
	837, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 716, 0, 0, 752, 806, 805, 739, 749, 0,
	0, 283, 205, 477, 597, 479, 478, 740, 0, 741,
	745, 748, 744, 742, 743, 0, 821, 0, 0, 0,
	0, 0, 0, 0, 720, 0, 725, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	717, 718, 0, 0, 0, 0, 772, 0, 719, 0,
	0, 767, 746, 750, 0, 0, 0, 0, 273, 406,
	423, 284, 397, 436, 289, 404, 279, 369, 393, 0,
	0, 275, 421, 403, 351, 330, 331, 274, 0, 388,
	308, 322, 305, 367, 747, 770, 774, 304, 843, 768,
	431, 277, 0, 430, 366, 417, 422, 352, 346, 276,
	419, 350, 345, 334, 312, 844, 335, 336, 326, 378,
	344, 379, 327, 356, 355, 357, 0, 0, 0, 0,
	0, 459, 460, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 591, 765, 0, 594, 0,
	433, 0, 0, 827, 0, 0, 0, 405, 0, 0,
	337, 0, 0, 0, 769, 0, 391, 372, 840, 0,
	0, 389, 342, 418, 380, 424, 407, 432, 385, 381,
	268, 408, 307, 353, 280, 282, 302, 309, 311, 313,
	314, 362, 363, 375, 396, 409, 410, 411, 306, 290,
	390, 291, 324, 292, 269, 298, 296, 299, 398, 300,
	271, 376, 415, 0, 319, 386, 349, 272, 348, 377,
	414, 413, 281, 440, 446, 447, 537, 0, 452, 617,
	618, 619, 461, 466, 467, 468, 470, 471, 472, 473,
	538, 555, 522, 492, 454, 546, 489, 493, 494, 558,
	0, 0, 0, 445, 338, 339, 0, 317, 265, 266,
	612, 825, 368, 560, 593, 485, 0, 839, 820, 822,
	823, 826, 830, 831, 832, 833, 834, 836, 838, 842,
	611, 0, 539, 554, 615, 553, 608, 374, 0, 395,
	551, 498, 0, 543, 517, 0, 544, 513, 548, 0,
	487, 0, 402, 426, 438, 455, 458, 488, 573, 574,
	575, 270, 457, 577, 578, 579, 580, 581, 582, 583,
	576, 841, 520, 497, 523, 437, 500, 499, 0, 0,
	534, 773, 535, 536, 358, 359, 360, 361, 828, 561,
	288, 456, 384, 0, 521, 0, 0, 0, 0, 0,
	0, 0, 0, 526, 527, 524, 620, 0, 584, 585,
	0, 0, 450, 451, 316, 323, 469, 325, 287, 373,
	318, 435, 332, 0, 462, 528, 463, 587, 590, 588,
	589, 365, 328, 329, 399, 333, 343, 387, 434, 371,
	392, 285, 425, 400, 347, 514, 541, 850, 824, 849,
	851, 852, 848, 853, 854, 835, 729, 0, 780, 846,
	845, 847, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 569, 568, 567, 566, 565, 564, 563,
	562, 0, 0, 511, 412, 297, 259, 293, 294, 301,
	609, 606, 416, 610, 0, 267, 491, 341, 0, 382,
	315, 556, 557, 0, 0, 813, 787, 788, 789, 726,
	790, 784, 785, 727, 786, 814, 778, 810, 811, 754,
	781, 791, 809, 792, 812, 815, 816, 855, 856, 798,
	782, 231, 857, 795, 817, 808, 807, 793, 779, 818,
	819, 761, 756, 796, 797, 783, 801, 802, 803, 728,
	775, 776, 777, 799, 800, 757, 758, 759, 760, 0,
	0, 0, 441, 442, 443, 465, 427, 490, 607, 0,
	0, 0, 0, 0, 0, 0, 540, 552, 586, 0,
	595, 596, 598, 600, 804, 602, 771, 613, 481, 482,
	614, 480, 592, 0, 721, 370, 0, 496, 529, 518,
	601, 484, 0, 0, 0, 0, 0, 0, 724, 0,
	0, 0, 310, 0, 0, 340, 533, 515, 525, 516,
	501, 502, 503, 510, 320, 504, 505, 506, 475, 507,
	476, 508, 509, 762, 532, 483, 401, 354, 550, 549,
	0, 0, 829, 837, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 752, 806, 805,
	739, 749, 0, 0, 283, 205, 477, 597, 479, 478,
	740, 0, 741, 745, 748, 744, 742, 743, 0, 821,
	0, 0, 0, 0, 0, 0, 708, 720, 0, 725,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 717, 718, 0, 0, 0, 0, 772,
	0, 719, 0, 0, 767, 746, 750, 0, 0, 0,
	0, 273, 406, 423, 284, 397, 436, 289, 404, 279,
	369, 393, 0, 0, 275, 421, 403, 351, 330, 331,
	274, 0, 388, 308, 322, 305, 367, 747, 770, 774,
	304, 843, 768, 431, 277, 0, 430, 366, 417, 422,
	352, 346, 276, 419, 350, 345, 334, 312, 844, 335,
	336, 326, 378, 344, 379, 327, 356, 355, 357, 0,
	0, 0, 0, 0, 459, 460, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 591, 765,
	0, 594, 0, 433, 0, 0, 827, 0, 0, 0,
	405, 0, 0, 337, 0, 0, 0, 769, 0, 391,
	372, 840, 0, 0, 389, 342, 418, 380, 424, 407,
	432, 385, 381, 268, 408, 307, 353, 280, 282, 302,
	309, 311, 313, 314, 362, 363, 375, 396, 409, 410,
	411, 306, 290, 390, 291, 324, 292, 269, 298, 296,
	299, 398, 300, 271, 376, 415, 0, 319, 386, 349,
	272, 348, 377, 414, 413, 281, 440, 446, 447, 537,
	0, 452, 617, 618, 619, 461, 466, 467, 468, 470,
	471, 472, 473, 538, 555, 522, 492, 454, 546, 489,
	493, 494, 558, 0, 0, 0, 445, 338, 339, 0,
	317, 265, 266, 612, 825, 368, 560, 593, 485, 0,
	839, 820, 822, 823, 826, 830, 831, 832, 833, 834,
	836, 838, 842, 611, 0, 539, 554, 615, 553, 608,
	374, 0, 395, 551, 498, 0, 543, 517, 0, 544,
	513, 548, 0, 487, 0, 402, 426, 438, 455, 458,
	488, 573, 574, 575, 270, 457, 577, 578, 579, 580,
	581, 582, 583, 576, 841, 520, 497, 523, 437, 500,
	499, 0, 0, 534, 773, 535, 536, 358, 359, 360,
	361, 828, 561, 288, 456, 384, 0, 521, 0, 0,
	0, 0, 0, 0, 0, 0, 526, 527, 524, 620,
	0, 584, 585, 0, 0, 450, 451, 316, 323, 469,
	325, 287, 373, 318, 435, 332, 0, 462, 528, 463,
	587, 590, 588, 589, 365, 328, 329, 399, 333, 343,
	387, 434, 371, 392, 285, 425, 400, 347, 514, 541,
	850, 824, 849, 851, 852, 848, 853, 854, 835, 729,
	0, 780, 846, 845, 847, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 569, 568, 567, 566,
	565, 564, 563, 562, 0, 0, 511, 412, 297, 259,
	293, 294, 301, 609, 606, 416, 610, 0, 267, 491,
	341, 0, 382, 315, 556, 557, 0, 0, 813, 787,
	788, 789, 726, 790, 784, 785, 727, 786, 814, 778,
	810, 811, 754, 781, 791, 809, 792, 812, 815, 816,
	855, 856, 798, 782, 231, 857, 795, 817, 808, 807,
	793, 779, 818, 819, 761, 756, 796, 797, 783, 801,
	802, 803, 728, 775, 776, 777, 799, 800, 757, 758,
	759, 760, 0, 0, 0, 441, 442, 443, 465, 427,
	490, 607, 0, 0, 0, 0, 0, 0, 0, 540,
	552, 586, 0, 595, 596, 598, 600, 804, 602, 0,
	613, 481, 482, 614, 480, 592, 0, 721, 182, 55,
	171, 145, 0, 0, 0, 0, 0, 0, 370, 0,
	496, 529, 518, 601, 484, 0, 172, 0, 0, 0,
	0, 0, 0, 164, 0, 310, 0, 173, 340, 533,
	515, 525, 516, 501, 502, 503, 510, 320, 504, 505,
	506, 475, 507, 476, 508, 509, 121, 532, 483, 401,
	354, 550, 549, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 0, 0, 176, 0, 0,
	204, 0, 0, 0, 0, 0, 0, 283, 205, 477,
	597, 479, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 286, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 196, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 406, 423, 284, 397, 436,
	289, 404, 279, 369, 393, 0, 0, 275, 421, 403,
	351, 330, 331, 274, 0, 388, 308, 322, 305, 367,
	0, 420, 448, 304, 439, 0, 431, 277, 0, 430,
	366, 417, 422, 352, 346, 276, 419, 350, 345, 334,
	312, 464, 335, 336, 326, 378, 344, 379, 327, 356,
	355, 357, 0, 0, 0, 0, 0, 459, 460, 0,
	0, 0, 0, 0, 0, 144, 170, 180, 0, 107,
	0, 591, 0, 0, 594, 0, 433, 0, 0, 197,
	0, 0, 0, 405, 0, 0, 337, 169, 163, 162,
	449, 0, 391, 372, 209, 0, 0, 389, 342, 418,
	380, 424, 407, 432, 385, 381, 268, 408, 307, 353,
	280, 282, 302, 309, 311, 313, 314, 362, 363, 375,
	396, 409, 410, 411, 306, 290, 390, 291, 324, 292,
	269, 298, 296, 299, 398, 300, 271, 376, 415, 0,
	319, 386, 349, 272, 348, 377, 414, 413, 281, 440,
	446, 447, 537, 0, 452, 570, 571, 572, 461, 466,
	467, 468, 470, 471, 472, 473, 538, 555, 522, 492,
	454, 546, 489, 493, 494, 558, 0, 0, 0, 445,
	338, 339, 0, 317, 265, 266, 428, 303, 368, 560,
	593, 485, 0, 547, 486, 495, 295, 519, 531, 530,
	364, 444, 200, 542, 545, 474, 210, 0, 539, 554,
	512, 553, 211, 374, 0, 395, 551, 498, 0, 543,
	517, 0, 544, 513, 548, 0, 487, 0, 402, 426,
	438, 455, 458, 488, 573, 574, 575, 270, 457, 577,
	578, 579, 580, 581, 582, 583, 576, 429, 520, 497,
	523, 437, 500, 499, 0, 0, 534, 453, 535, 536,
	358, 359, 360, 361, 321, 561, 288, 456, 384, 119,
	521, 0, 0, 0, 0, 0, 0, 0, 0, 526,
	527, 524, 208, 0, 584, 585, 0, 0, 450, 451,
	316, 323, 469, 325, 287, 373, 318, 435, 332, 0,
	462, 528, 463, 587, 590, 588, 589, 365, 328, 329,
	399, 333, 343, 387, 434, 371, 392, 285, 425, 400,
	347, 514, 541, 0, 0, 0, 0, 0, 0, 0,
	0, 56, 0, 0, 254, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 569,
	568, 567, 566, 565, 564, 563, 562, 0, 0, 511,
	412, 297, 259, 293, 294, 301, 383, 278, 416, 394,
	0, 267, 491, 341, 146, 382, 315, 556, 557, 52,
	0, 215, 216, 217, 218, 219, 220, 221, 222, 260,
	223, 224, 225, 226, 227, 228, 229, 232, 233, 234,
	235, 236, 237, 238, 239, 559, 230, 231, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 0, 0, 0, 261, 262, 263, 264, 0,
	0, 255, 256, 257, 258, 0, 0, 0, 441, 442,
	443, 465, 427, 490, 212, 41, 198, 201, 203, 202,
	0, 53, 540, 552, 586, 5, 595, 596, 598, 600,
	599, 602, 124, 213, 481, 482, 214, 480, 592, 182,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 370,
	0, 496, 529, 518, 601, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 310, 0, 0, 340,
	533, 515, 525, 516, 501, 502, 503, 510, 320, 504,
	505, 506, 475, 507, 476, 508, 509, 121, 532, 483,
	401, 354, 550, 549, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 0,
	0, 204, 0, 0, 0, 0, 0, 0, 283, 205,
	477, 597, 479, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 286, 2269, 2272, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 406, 423, 284, 397,
	436, 289, 404, 279, 369, 393, 0, 0, 275, 421,
	403, 351, 330, 331, 274, 0, 388, 308, 322, 305,
	367, 0, 420, 448, 304, 439, 0, 431, 277, 0,
	430, 366, 417, 422, 352, 346, 276, 419, 350, 345,
	334, 312, 464, 335, 336, 326, 378, 344, 379, 327,
	356, 355, 357, 0, 0, 0, 0, 0, 459, 460,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 591, 0, 0, 594, 2273, 433, 0, 0,
	0, 2268, 0, 2267, 405, 2265, 2270, 337, 0, 0,
	0, 449, 0, 391, 372, 616, 0, 0, 389, 342,
	418, 380, 424, 407, 432, 385, 381, 268, 408, 307,
	353, 280, 282, 302, 309, 311, 313, 314, 362, 363,
	375, 396, 409, 410, 411, 306, 290, 390, 291, 324,
	292, 269, 298, 296, 299, 398, 300, 271, 376, 415,
	2271, 319, 386, 349, 272, 348, 377, 414, 413, 281,
	440, 446, 447, 537, 0, 452, 617, 618, 619, 461,
	466, 467, 468, 470, 471, 472, 473, 538, 555, 522,
	492, 454, 546, 489, 493, 494, 558, 0, 0, 0,
	445, 338, 339, 0, 317, 265, 266, 612, 303, 368,
	560, 593, 485, 0, 547, 486, 495, 295, 519, 531,
	530, 364, 444, 0, 542, 545, 474, 611, 0, 539,
	554, 615, 553, 608, 374, 0, 395, 551, 498, 0,
	543, 517, 0, 544, 513, 548, 0, 487, 0, 402,
	426, 438, 455, 458, 488, 573, 574, 575, 270, 457,
	577, 578, 579, 580, 581, 582, 583, 576, 429, 520,
	497, 523, 437, 500, 499, 0, 0, 534, 453, 535,
	536, 358, 359, 360, 361, 321, 561, 288, 456, 384,
	0, 521, 0, 0, 0, 0, 0, 0, 0, 0,
	526, 527, 524, 620, 0, 584, 585, 0, 0, 450,
	451, 316, 323, 469, 325, 287, 373, 318, 435, 332,
	0, 462, 528, 463, 587, 590, 588, 589, 365, 328,
	329, 399, 333, 343, 387, 434, 371, 392, 285, 425,
	400, 347, 514, 541, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 254, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	569, 568, 567, 566, 565, 564, 563, 562, 0, 0,
	511, 412, 297, 259, 293, 294, 301, 609, 606, 416,
	610, 0, 267, 491, 341, 146, 382, 315, 556, 557,
	0, 0, 215, 216, 217, 218, 219, 220, 221, 222,
	260, 223, 224, 225, 226, 227, 228, 229, 232, 233,
	234, 235, 236, 237, 238, 239, 559, 230, 231, 240,
	241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 0, 0, 0, 261, 262, 263, 264,
	0, 0, 255, 256, 257, 258, 0, 0, 0, 441,
	442, 443, 465, 427, 490, 607, 0, 0, 0, 0,
	0, 0, 0, 540, 552, 586, 0, 595, 596, 598,
	600, 599, 602, 0, 613, 481, 482, 614, 480, 592,
	370, 0, 496, 529, 518, 601, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 310, 0, 0,
	340, 533, 515, 525, 516, 501, 502, 503, 510, 320,
	504, 505, 506, 475, 507, 476, 508, 509, 0, 532,
	483, 401, 354, 550, 549, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1252,
	0, 0, 204, 0, 0, 739, 749, 0, 0, 283,
	205, 477, 597, 479, 478, 740, 0, 741, 745, 748,
	744, 742, 743, 0, 286, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	746, 0, 0, 0, 0, 0, 273, 406, 423, 284,
	397, 436, 289, 404, 279, 369, 393, 0, 0, 275,
	421, 403, 351, 330, 331, 274, 0, 388, 308, 322,
	305, 367, 747, 420, 448, 304, 439, 0, 431, 277,
	0, 430, 366, 417, 422, 352, 346, 276, 419, 350,
	345, 334, 312, 464, 335, 336, 326, 378, 344, 379,
	327, 356, 355, 357, 0, 0, 0, 0, 0, 459,
	460, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 591, 0, 0, 594, 0, 433, 0,
	0, 0, 0, 0, 0, 405, 0, 0, 337, 0,
	0, 0, 449, 0, 391, 372, 616, 0, 0, 389,
	342, 418, 380, 424, 407, 432, 385, 381, 268, 408,
	307, 353, 280, 282, 302, 309, 311, 313, 314, 362,
	363, 375, 396, 409, 410, 411, 306, 290, 390, 291,
	324, 292, 269, 298, 296, 299, 398, 300, 271, 376,
	415, 0, 319, 386, 349, 272, 348, 377, 414, 413,
	281, 440, 446, 447, 537, 0, 452, 617, 618, 619,
	461, 466, 467, 468, 470, 471, 472, 473, 538, 555,
	522, 492, 454, 546, 489, 493, 494, 558, 0, 0,
	0, 445, 338, 339, 0, 317, 265, 266, 612, 303,
	368, 560, 593, 485, 0, 547, 486, 495, 295, 519,
	531, 530, 364, 444, 0, 542, 545, 474, 611, 0,
	539, 554, 615, 553, 608, 374, 0, 395, 551, 498,
	0, 543, 517, 0, 544, 513, 548, 0, 487, 0,
	402, 426, 438, 455, 458, 488, 573, 574, 575, 270,
	457, 577, 578, 579, 580, 581, 582, 583, 576, 429,
	520, 497, 523, 437, 500, 499, 0, 0, 534, 453,
	535, 536, 358, 359, 360, 361, 321, 561, 288, 456,
	384, 0, 521, 0, 0, 0, 0, 0, 0, 0,
	0, 526, 527, 524, 620, 0, 584, 585, 0, 0,
	450, 451, 316, 323, 469, 325, 287, 373, 318, 435,
	332, 0, 462, 528, 463, 587, 590, 588, 589, 365,
	328, 329, 399, 333, 343, 387, 434, 371, 392, 285,
	425, 400, 347, 514, 541, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 254, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 569, 568, 567, 566, 565, 564, 563, 562, 0,
	0, 511, 412, 297, 259, 293, 294, 301, 609, 606,
	416, 610, 0, 267, 491, 341, 0, 382, 315, 556,
	557, 0, 0, 215, 216, 217, 218, 219, 220, 221,
	222, 260, 223, 224, 225, 226, 227, 228, 229, 232,
	233, 234, 235, 236, 237, 238, 239, 559, 230, 231,
	240, 241, 242, 243, 244, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 0, 0, 0, 261, 262, 263,
	264, 0, 0, 255, 256, 257, 258, 0, 0, 0,
	441, 442, 443, 465, 427, 490, 607, 0, 0, 0,
	0, 0, 0, 0, 540, 552, 586, 0, 595, 596,
	598, 600, 599, 602, 0, 613, 481, 482, 614, 480,
	592, 182, 55, 171, 145, 0, 0, 0, 0, 0,
	0, 370, 639, 496, 529, 518, 601, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 310, 0,
	0, 340, 533, 515, 525, 516, 501, 502, 503, 510,
	320, 504, 505, 506, 475, 507, 476, 508, 509, 0,
	532, 483, 401, 354, 550, 549, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 645, 0, 0, 0, 0,
	644, 0, 0, 204, 0, 0, 0, 0, 0, 0,
	283, 205, 477, 597, 479, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 286, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 273, 406, 423,
	284, 397, 436, 289, 404, 279, 369, 393, 0, 0,
	275, 421, 403, 351, 330, 331, 274, 0, 388, 308,
	322, 305, 367, 0, 420, 448, 304, 439, 0, 431,
	277, 0, 430, 366, 417, 422, 352, 346, 276, 419,
	350, 345, 334, 312, 464, 335, 336, 326, 378, 344,
	379, 327, 356, 355, 357, 0, 0, 0, 0, 0,
	459, 460, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 643, 0, 591, 0, 0, 594, 0, 433,
	0, 0, 0, 0, 0, 0, 405, 0, 0, 337,
	0, 0, 0, 449, 0, 391, 372, 616, 0, 0,
	389, 342, 418, 380, 424, 407, 432, 385, 381, 268,
	408, 307, 353, 280, 282, 302, 309, 311, 313, 314,
	362, 363, 375, 396, 409, 410, 411, 306, 290, 390,
	291, 324, 292, 269, 298, 296, 299, 398, 300, 271,
	376, 415, 0, 319, 386, 349, 272, 348, 377, 414,
	413, 281, 440, 446, 447, 537, 0, 452, 617, 618,
	619, 461, 466, 467, 468, 470, 471, 472, 473, 538,
	555, 522, 492, 454, 546, 489, 493, 494, 558, 0,
	0, 0, 445, 338, 339, 0, 317, 265, 266, 612,
	303, 368, 560, 593, 485, 0, 547, 486, 495, 295,
	519, 531, 530, 364, 444, 0, 542, 545, 474, 611,
	0, 539, 554, 615, 553, 608, 374, 0, 395, 551,
	498, 0, 543, 517, 0, 544, 513, 548, 0, 487,
	0, 402, 426, 438, 455, 458, 488, 573, 574, 575,
	270, 457, 577, 578, 579, 580, 581, 582, 583, 576,
	429, 520, 497, 523, 437, 500, 499, 0, 0, 534,
	453, 535, 536, 358, 359, 360, 361, 640, 642, 288,
	456, 384, 653, 521, 0, 0, 0, 0, 0, 0,
	0, 0, 526, 527, 524, 620, 0, 584, 585, 0,
	0, 450, 451, 316, 323, 469, 325, 287, 373, 318,
	435, 332, 0, 462, 528, 463, 587, 590, 588, 589,
	365, 328, 329, 399, 333, 343, 387, 434, 371, 392,
	285, 425, 400, 347, 514, 541, 0, 0, 0, 0,
	0, 0, 0, 0, 56, 0, 0, 254, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 569, 568, 567, 566, 565, 564, 563, 562,
	0, 0, 511, 412, 297, 259, 293, 294, 301, 609,
	606, 416, 610, 0, 267, 491, 341, 146, 382, 315,
	556, 557, 0, 0, 215, 216, 217, 218, 219, 220,
	221, 222, 260, 223, 224, 225, 226, 227, 228, 229,
	232, 233, 234, 235, 236, 237, 238, 239, 559, 230,
	231, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 0, 0, 0, 261, 262,
	263, 264, 0, 0, 255, 256, 257, 258, 0, 0,
	0, 441, 442, 443, 465, 427, 490, 607, 0, 0,
	0, 0, 0, 0, 0, 540, 552, 586, 0, 595,
	596, 598, 600, 599, 602, 0, 613, 481, 482, 614,
	480, 592, 370, 0, 496, 529, 518, 601, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 310,
	0, 0, 340, 533, 515, 525, 516, 501, 502, 503,
	510, 320, 504, 505, 506, 475, 507, 476, 508, 509,
	0, 532, 483, 401, 354, 550, 549, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 0, 0, 0,
	0, 283, 205, 477, 597, 479, 478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 286, 2269, 2272, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 273, 406,
	423, 284, 397, 436, 289, 404, 279, 369, 393, 0,
	0, 275, 421, 403, 351, 330, 331, 274, 0, 388,
	308, 322, 305, 367, 0, 420, 448, 304, 439, 0,
	431, 277, 0, 430, 366, 417, 422, 352, 346, 276,
	419, 350, 345, 334, 312, 464, 335, 336, 326, 378,
	344, 379, 327, 356, 355, 357, 0, 0, 0, 0,
	0, 459, 460, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 591, 0, 0, 594, 2273,
	433, 0, 0, 0, 2268, 0, 2267, 405, 2265, 2270,
	337, 0, 0, 0, 449, 0, 391, 372, 616, 0,
	0, 389, 342, 418, 380, 424, 407, 432, 385, 381,
	268, 408, 307, 353, 280, 282, 302, 309, 311, 313,
	314, 362, 363, 375, 396, 409, 410, 411, 306, 290,
	390, 291, 324, 292, 269, 298, 296, 299, 398, 300,
	271, 376, 415, 2271, 319, 386, 349, 272, 348, 377,
	414, 413, 281, 440, 446, 447, 537, 0, 452, 617,
	618, 619, 461, 466, 467, 468, 470, 471, 472, 473,
	538, 555, 522, 492, 454, 546, 489, 493, 494, 558,
	0, 0, 0, 445, 338, 339, 0, 317, 265, 266,
	612, 303, 368, 560, 593, 485, 0, 547, 486, 495,
	295, 519, 531, 530, 364, 444, 0, 542, 545, 474,
	611, 0, 539, 554, 615, 553, 608, 374, 0, 395,
	551, 498, 0, 543, 517, 0, 544, 513, 548, 0,
	487, 0, 402, 426, 438, 455, 458, 488, 573, 574,
	575, 270, 457, 577, 578, 579, 580, 581, 582, 583,
	576, 429, 520, 497, 523, 437, 500, 499, 0, 0,
	534, 453, 535, 536, 358, 359, 360, 361, 321, 561,
	288, 456, 384, 0, 521, 0, 0, 0, 0, 0,
	0, 0, 0, 526, 527, 524, 620, 0, 584, 585,
	0, 0, 450, 451, 316, 323, 469, 325, 287, 373,
	318, 435, 332, 0, 462, 528, 463, 587, 590, 588,
	589, 365, 328, 329, 399, 333, 343, 387, 434, 371,
	392, 285, 425, 400, 347, 514, 541, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 254, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 569, 568, 567, 566, 565, 564, 563,
	562, 0, 0, 511, 412, 297, 259, 293, 294, 301,
	609, 606, 416, 610, 0, 267, 491, 341, 0, 382,
	315, 556, 557, 0, 0, 215, 216, 217, 218, 219,
	220, 221, 222, 260, 223, 224, 225, 226, 227, 228,
	229, 232, 233, 234, 235, 236, 237, 238, 239, 559,
	230, 231, 240, 241, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 0, 0, 0, 261,
	262, 263, 264, 0, 0, 255, 256, 257, 258, 0,
	0, 0, 441, 442, 443, 465, 427, 490, 607, 0,
	0, 0, 0, 0, 0, 0, 540, 552, 586, 0,
	595, 596, 598, 600, 599, 602, 0, 613, 481, 482,
	614, 480, 592, 370, 0, 496, 529, 518, 601, 484,
	0, 1066, 0, 0, 0, 0, 0, 0, 0, 0,
	310, 0, 0, 340, 533, 515, 525, 516, 501, 502,
	503, 510, 320, 504, 505, 506, 475, 507, 476, 508,
	509, 0, 532, 483, 401, 354, 550, 549, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 0, 0,
	0, 0, 283, 205, 477, 597, 479, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1052, 0, 0, 0, 0, 0, 0, 273,
	406, 423, 284, 397, 436, 289, 404, 279, 369, 393,
	0, 0, 2418, 2421, 2422, 2423, 2424, 2425, 2426, 0,
	2431, 2427, 2428, 2429, 2430, 0, 2413, 2414, 2415, 2416,
	1050, 2397, 2419, 0, 2398, 366, 2399, 2400, 2401, 2402,
	2403, 2404, 2405, 2406, 2407, 2410, 2411, 2408, 2409, 2417,
	378, 344, 379, 327, 356, 355, 357, 1077, 1079, 1081,
	1083, 1086, 459, 460, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 591, 0, 0, 594,
	0, 433, 0, 0, 0, 0, 0, 0, 405, 0,
	0, 337, 0, 0, 0, 2412, 0, 391, 372, 616,
	0, 0, 389, 342, 418, 380, 424, 407, 432, 385,
	381, 268, 408, 307, 353, 280, 282, 302, 309, 311,
	313, 314, 362, 363, 375, 396, 409, 410, 411, 306,
	290, 390, 291, 324, 292, 269, 298, 296, 299, 398,
	300, 271, 376, 415, 0, 319, 386, 349, 272, 348,
	377, 414, 413, 281, 440, 446, 447, 537, 0, 452,
	617, 618, 619, 461, 466, 467, 468, 470, 471, 472,
	473, 538, 555, 522, 492, 454, 546, 489, 493, 494,
	558, 0, 0, 0, 445, 338, 339, 0, 317, 265,
	266, 612, 303, 368, 560, 593, 485, 0, 547, 486,
	495, 295, 519, 531, 530, 364, 444, 0, 542, 545,
	474, 611, 0, 539, 554, 615, 553, 608, 374, 0,
	395, 551, 498, 0, 543, 517, 0, 544, 513, 548,
	0, 487, 0, 402, 426, 438, 455, 458, 488, 573,
	574, 575, 270, 457, 577, 578, 579, 580, 581, 582,
	583, 576, 429, 520, 497, 523, 437, 500, 499, 0,
	0, 534, 453, 535, 536, 358, 359, 360, 361, 321,
	561, 288, 456, 384, 0, 521, 0, 0, 0, 0,
	0, 0, 0, 0, 526, 527, 524, 620, 0, 584,
	585, 0, 0, 450, 451, 316, 323, 469, 325, 287,
	373, 318, 435, 332, 0, 462, 528, 463, 587, 590,
	588, 589, 365, 328, 329, 399, 333, 343, 387, 434,
	371, 392, 285, 425, 400, 347, 514, 541, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 254,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 569, 568, 567, 566, 565, 564,
	563, 562, 0, 0, 511, 412, 297, 259, 293, 294,
	301, 609, 606, 416, 610, 0, 267, 2420, 341, 0,
	382, 315, 556, 557, 0, 0, 215, 216, 217, 218,
	219, 220, 221, 222, 260, 223, 224, 225, 226, 227,
	228, 229, 232, 233, 234, 235, 236, 237, 238, 239,
	559, 230, 231, 240, 241, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 0, 0, 0,
	261, 262, 263, 264, 0, 0, 255, 256, 257, 258,
	0, 0, 0, 441, 442, 443, 465, 427, 490, 607,
	0, 0, 0, 0, 0, 0, 0, 540, 552, 586,
	0, 595, 596, 598, 600, 599, 602, 0, 613, 481,
	482, 614, 480, 592, 370, 0, 496, 529, 518, 601,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 310, 0, 0, 340, 533, 515, 525, 516, 501,
	502, 503, 510, 320, 504, 505, 506, 475, 507, 476,
	508, 509, 0, 532, 483, 401, 354, 550, 549, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 0,
	0, 0, 0, 283, 205, 477, 597, 479, 478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 286, 0,
	2290, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	273, 406, 423, 284, 397, 436, 289, 404, 279, 369,
	393, 0, 0, 275, 421, 403, 351, 330, 331, 274,
	0, 388, 308, 322, 305, 367, 0, 420, 448, 304,
	439, 0, 431, 277, 0, 430, 366, 417, 422, 352,
	346, 276, 419, 350, 345, 334, 312, 464, 335, 336,
	326, 378, 344, 379, 327, 356, 355, 357, 0, 0,
	0, 0, 0, 459, 460, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 591, 0, 0,
	594, 2289, 433, 0, 0, 0, 2295, 2292, 2294, 405,
	0, 2293, 337, 0, 0, 0, 449, 0, 391, 372,
	616, 0, 2287, 389, 342, 418, 380, 424, 407, 432,
	385, 381, 268, 408, 307, 353, 280, 282, 302, 309,
	311, 313, 314, 362, 363, 375, 396, 409, 410, 411,
	306, 290, 390, 291, 324, 292, 269, 298, 296, 299,
	398, 300, 271, 376, 415, 0, 319, 386, 349, 272,
	348, 377, 414, 413, 281, 440, 446, 447, 537, 0,
	452, 617, 618, 619, 461, 466, 467, 468, 470, 471,
	472, 473, 538, 555, 522, 492, 454, 546, 489, 493,
	494, 558, 0, 0, 0, 445, 338, 339, 0, 317,
	265, 266, 612, 303, 368, 560, 593, 485, 0, 547,
	486, 495, 295, 519, 531, 530, 364, 444, 0, 542,
	545, 474, 611, 0, 539, 554, 615, 553, 608, 374,
	0, 395, 551, 498, 0, 543, 517, 0, 544, 513,
	548, 0, 487, 0, 402, 426, 438, 455, 458, 488,
	573, 574, 575, 270, 457, 577, 578, 579, 580, 581,
	582, 583, 576, 429, 520, 497, 523, 437, 500, 499,
	0, 0, 534, 453, 535, 536, 358, 359, 360, 361,
	321, 561, 288, 456, 384, 0, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 526, 527, 524, 620, 0,
	584, 585, 0, 0, 450, 451, 316, 323, 469, 325,
	287, 373, 318, 435, 332, 0, 462, 528, 463, 587,
	590, 588, 589, 365, 328, 329, 399, 333, 343, 387,
	434, 371, 392, 285, 425, 400, 347, 514, 541, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	254, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 569, 568, 567, 566, 565,
	564, 563, 562, 0, 0, 511, 412, 297, 259, 293,
	294, 301, 609, 606, 416, 610, 0, 267, 491, 341,
	0, 382, 315, 556, 557, 0, 0, 215, 216, 217,
	218, 219, 220, 221, 222, 260, 223, 224, 225, 226,
	227, 228, 229, 232, 233, 234, 235, 236, 237, 238,
	239, 559, 230, 231, 240, 241, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 0, 0,
	0, 261, 262, 263, 264, 0, 0, 255, 256, 257,
	258, 0, 0, 0, 441, 442, 443, 465, 427, 490,
	607, 0, 0, 0, 0, 0, 0, 0, 540, 552,
	586, 0, 595, 596, 598, 600, 599, 602, 0, 613,
	481, 482, 614, 480, 592, 370, 0, 496, 529, 518,
	601, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 310, 0, 0, 340, 533, 515, 525, 516,
	501, 502, 503, 510, 320, 504, 505, 506, 475, 507,
	476, 508, 509, 0, 532, 483, 401, 354, 550, 549,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 0, 0,
	0, 0, 0, 0, 283, 205, 477, 597, 479, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 286,
	0, 2290, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 273, 406, 423, 284, 397, 436, 289, 404, 279,
	369, 393, 0, 0, 275, 421, 403, 351, 330, 331,
	274, 0, 388, 308, 322, 305, 367, 0, 420, 448,
	304, 439, 0, 431, 277, 0, 430, 366, 417, 422,
	352, 346, 276, 419, 350, 345, 334, 312, 464, 335,
	336, 326, 378, 344, 379, 327, 356, 355, 357, 0,
	0, 0, 0, 0, 459, 460, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 591, 0,
	0, 594, 2289, 433, 0, 0, 0, 2295, 2292, 2294,
	405, 0, 2293, 337, 0, 0, 0, 449, 0, 391,
	372, 616, 0, 0, 389, 342, 418, 380, 424, 407,
	432, 385, 381, 268, 408, 307, 353, 280, 282, 302,
	309, 311, 313, 314, 362, 363, 375, 396, 409, 410,
	411, 306, 290, 390, 291, 324, 292, 269, 298, 296,
	299, 398, 300, 271, 376, 415, 0, 319, 386, 349,
	272, 348, 377, 414, 413, 281, 440, 446, 447, 537,
	0, 452, 617, 618, 619, 461, 466, 467, 468, 470,
	471, 472, 473, 538, 555, 522, 492, 454, 546, 489,
	493, 494, 558, 0, 0, 0, 445, 338, 339, 0,
	317, 265, 266, 612, 303, 368, 560, 593, 485, 0,
	547, 486, 495, 295, 519, 531, 530, 364, 444, 0,
	542, 545, 474, 611, 0, 539, 554, 615, 553, 608,
	374, 0, 395, 551, 498, 0, 543, 517, 0, 544,
	513, 548, 0, 487, 0, 402, 426, 438, 455, 458,
	488, 573, 574, 575, 270, 457, 577, 578, 579, 580,
	581, 582, 583, 576, 429, 520, 497, 523, 437, 500,
	499, 0, 0, 534, 453, 535, 536, 358, 359, 360,
	361, 321, 561, 288, 456, 384, 0, 521, 0, 0,
	0, 0, 0, 0, 0, 0, 526, 527, 524, 620,
	0, 584, 585, 0, 0, 450, 451, 316, 323, 469,
	325, 287, 373, 318, 435, 332, 0, 462, 528, 463,
	587, 590, 588, 589, 365, 328, 329, 399, 333, 343,
	387, 434, 371, 392, 285, 425, 400, 347, 514, 541,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 254, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 569, 568, 567, 566,
	565, 564, 563, 562, 0, 0, 511, 412, 297, 259,
	293, 294, 301, 609, 606, 416, 610, 0, 267, 491,
	341, 0, 382, 315, 556, 557, 0, 0, 215, 216,
	217, 218, 219, 220, 221, 222, 260, 223, 224, 225,
	226, 227, 228, 229, 232, 233, 234, 235, 236, 237,
	238, 239, 559, 230, 231, 240, 241, 242, 243, 244,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 0,
	0, 0, 261, 262, 263, 264, 0, 0, 255, 256,
	257, 258, 0, 0, 0, 441, 442, 443, 465, 427,
	490, 607, 0, 0, 0, 0, 0, 0, 0, 540,
	552, 586, 0, 595, 596, 598, 600, 599, 602, 0,
	613, 481, 482, 614, 480, 592, 370, 0, 496, 529,
	518, 601, 484, 0, 0, 0, 0, 0, 1998, 0,
	0, 0, 0, 310, 0, 0, 340, 533, 515, 525,
	516, 501, 502, 503, 510, 320, 504, 505, 506, 475,
	507, 476, 508, 509, 0, 532, 483, 401, 354, 550,
	549, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 1999, 0, 0, 0, 283, 205, 477, 597, 479,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	286, 0, 0, 1182, 1183, 1184, 1181, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 406, 423, 284, 397, 436, 289, 404,
	279, 369, 393, 0, 0, 275, 421, 403, 351, 330,
	331, 274, 0, 388, 308, 322, 305, 367, 0, 420,
	448, 304, 439, 0, 431, 277, 0, 430, 366, 417,
	422, 352, 346, 276, 419, 350, 345, 334, 312, 464,
	335, 336, 326, 378, 344, 379, 327, 356, 355, 357,
	0, 0, 0, 0, 0, 459, 460, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 591,
	0, 0, 594, 0, 433, 0, 0, 0, 0, 0,
	0, 405, 0, 0, 337, 0, 0, 0, 449, 0,
	391, 372, 616, 0, 0, 389, 342, 418, 380, 424,
	407, 432, 385, 381, 268, 408, 307, 353, 280, 282,
	302, 309, 311, 313, 314, 362, 363, 375, 396, 409,
	410, 411, 306, 290, 390, 291, 324, 292, 269, 298,
	296, 299, 398, 300, 271, 376, 415, 0, 319, 386,
	349, 272, 348, 377, 414, 413, 281, 440, 446, 447,
	537, 0, 452, 617, 618, 619, 461, 466, 467, 468,
	470, 471, 472, 473, 538, 555, 522, 492, 454, 546,
	489, 493, 494, 558, 0, 0, 0, 445, 338, 339,
	0, 317, 265, 266, 612, 303, 368, 560, 593, 485,
	0, 547, 486, 495, 295, 519, 531, 530, 364, 444,
	0, 542, 545, 474, 611, 0, 539, 554, 615, 553,
	608, 374, 0, 395, 551, 498, 0, 543, 517, 0,
	544, 513, 548, 0, 487, 0, 402, 426, 438, 455,
	458, 488, 573, 574, 575, 270, 457, 577, 578, 579,
	580, 581, 582, 583, 576, 429, 520, 497, 523, 437,
	500, 499, 0, 0, 534, 453, 535, 536, 358, 359,
	360, 361, 321, 561, 288, 456, 384, 0, 521, 0,
	0, 0, 0, 0, 0, 0, 0, 526, 527, 524,
	620, 0, 584, 585, 0, 0, 450, 451, 316, 323,
	469, 325, 287, 373, 318, 435, 332, 0, 462, 528,
	463, 587, 590, 588, 589, 365, 328, 329, 399, 333,
	343, 387, 434, 371, 392, 285, 425, 400, 347, 514,
	541, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 254, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 569, 568, 567,
	566, 565, 564, 563, 562, 0, 0, 511, 412, 297,
	259, 293, 294, 301, 609, 606, 416, 610, 0, 267,
	491, 341, 0, 382, 315, 556, 557, 0, 0, 215,
	216, 217, 218, 219, 220, 221, 222, 260, 223, 224,
	225, 226, 227, 228, 229, 232, 233, 234, 235, 236,
	237, 238, 239, 559, 230, 231, 240, 241, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	0, 0, 0, 261, 262, 263, 264, 0, 0, 255,
	256, 257, 258, 0, 0, 0, 441, 442, 443, 465,
	427, 490, 607, 0, 0, 0, 0, 0, 0, 0,
	540, 552, 586, 0, 595, 596, 598, 600, 599, 602,
	182, 613, 481, 482, 614, 480, 592, 0, 0, 0,
	370, 0, 496, 529, 518, 601, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 310, 0, 0,
	340, 533, 515, 525, 516, 501, 502, 503, 510, 320,
	504, 505, 506, 475, 507, 476, 508, 509, 121, 532,
	483, 401, 354, 550, 549, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 176,
	2048, 0, 204, 0, 0, 0, 0, 0, 0, 283,
	205, 477, 597, 479, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 286, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 273, 406, 423, 284,
	397, 436, 289, 404, 279, 369, 393, 0, 0, 275,
	421, 403, 351, 330, 331, 274, 0, 388, 308, 322,
	305, 367, 0, 420, 448, 304, 439, 0, 431, 277,
	0, 430, 366, 417, 422, 352, 346, 276, 419, 350,
	345, 334, 312, 464, 335, 336, 326, 378, 344, 379,
	327, 356, 355, 357, 0, 0, 0, 0, 0, 459,
	460, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 591, 0, 0, 594, 0, 433, 0,
	0, 0, 0, 0, 0, 405, 0, 0, 337, 0,
	0, 0, 449, 0, 391, 372, 616, 0, 0, 389,
	342, 418, 380, 424, 407, 432, 385, 381, 268, 408,
	307, 353, 280, 282, 302, 309, 311, 313, 314, 362,
	363, 375, 396, 409, 410, 411, 306, 290, 390, 291,
	324, 292, 269, 298, 296, 299, 398, 300, 271, 376,
	415, 0, 319, 386, 349, 272, 348, 377, 414, 413,
	281, 440, 446, 447, 537, 0, 452, 617, 618, 619,
	461, 466, 467, 468, 470, 471, 472, 473, 538, 555,
	522, 492, 454, 546, 489, 493, 494, 558, 0, 0,
	0, 445, 338, 339, 0, 317, 265, 266, 612, 303,
	368, 560, 593, 485, 0, 547, 486, 495, 295, 519,
	531, 530, 364, 444, 0, 542, 545, 474, 611, 0,
	539, 554, 615, 553, 608, 374, 0, 395, 551, 498,
	0, 543, 517, 0, 544, 513, 548, 0, 487, 0,
	402, 426, 438, 455, 458, 488, 573, 574, 575, 270,
	457, 577, 578, 579, 580, 581, 582, 583, 576, 429,
	520, 497, 523, 437, 500, 499, 0, 0, 534, 453,
	535, 536, 358, 359, 360, 361, 321, 561, 288, 456,
	384, 0, 521, 0, 0, 0, 0, 0, 0, 0,
	0, 526, 527, 524, 620, 0, 584, 585, 0, 0,
	450, 451, 316, 323, 469, 325, 287, 373, 318, 435,
	332, 0, 462, 528, 463, 587, 590, 588, 589, 365,
	328, 329, 399, 333, 343, 387, 434, 371, 392, 285,
	425, 400, 347, 514, 541, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 254, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 569, 568, 567, 566, 565, 564, 563, 562, 0,
	0, 511, 412, 297, 259, 293, 294, 301, 609, 606,
	416, 610, 0, 267, 491, 341, 146, 382, 315, 556,
	557, 0, 0, 215, 216, 217, 218, 219, 220, 221,
	222, 260, 223, 224, 225, 226, 227, 228, 229, 232,
	233, 234, 235, 236, 237, 238, 239, 559, 230, 231,
	240, 241, 242, 243, 244, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 0, 0, 0, 261, 262, 263,
	264, 0, 0, 255, 256, 257, 258, 0, 0, 0,
	441, 442, 443, 465, 427, 490, 607, 0, 0, 0,
	0, 0, 0, 0, 540, 552, 586, 0, 595, 596,
	598, 600, 599, 602, 182, 613, 481, 482, 614, 480,
	592, 0, 0, 0, 370, 0, 496, 529, 518, 601,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 310, 0, 0, 340, 533, 515, 525, 516, 501,
	502, 503, 510, 320, 504, 505, 506, 475, 507, 476,
	508, 509, 121, 532, 483, 401, 354, 550, 549, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 176, 2034, 0, 204, 0, 0, 0,
	0, 0, 0, 283, 205, 477, 597, 479, 478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	273, 406, 423, 284, 397, 436, 289, 404, 279, 369,
	393, 0, 0, 275, 421, 403, 351, 330, 331, 274,
	0, 388, 308, 322, 305, 367, 0, 420, 448, 304,
	439, 0, 431, 277, 0, 430, 366, 417, 422, 352,
	346, 276, 419, 350, 345, 334, 312, 464, 335, 336,
	326, 378, 344, 379, 327, 356, 355, 357, 0, 0,
	0, 0, 0, 459, 460, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 591, 0, 0,
	594, 0, 433, 0, 0, 0, 0, 0, 0, 405,
	0, 0, 337, 0, 0, 0, 449, 0, 391, 372,
	616, 0, 0, 389, 342, 418, 380, 424, 407, 432,
	385, 381, 268, 408, 307, 353, 280, 282, 302, 309,
	311, 313, 314, 362, 363, 375, 396, 409, 410, 411,
	306, 290, 390, 291, 324, 292, 269, 298, 296, 299,
	398, 300, 271, 376, 415, 0, 319, 386, 349, 272,
	348, 377, 414, 413, 281, 440, 446, 447, 537, 0,
	452, 617, 618, 619, 461, 466, 467, 468, 470, 471,
	472, 473, 538, 555, 522, 492, 454, 546, 489, 493,
	494, 558, 0, 0, 0, 445, 338, 339, 0, 317,
	265, 266, 612, 303, 368, 560, 593, 485, 0, 547,
	486, 495, 295, 519, 531, 530, 364, 444, 0, 542,
	545, 474, 611, 0, 539, 554, 615, 553, 608, 374,
	0, 395, 551, 498, 0, 543, 517, 0, 544, 513,
	548, 0, 487, 0, 402, 426, 438, 455, 458, 488,
	573, 574, 575, 270, 457, 577, 578, 579, 580, 581,
	582, 583, 576, 429, 520, 497, 523, 437, 500, 499,
	0, 0, 534, 453, 535, 536, 358, 359, 360, 361,
	321, 561, 288, 456, 384, 0, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 526, 527, 524, 620, 0,
	584, 585, 0, 0, 450, 451, 316, 323, 469, 325,
	287, 373, 318, 435, 332, 0, 462, 528, 463, 587,
	590, 588, 589, 365, 328, 329, 399, 333, 343, 387,
	434, 371, 392, 285, 425, 400, 347, 514, 541, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	254, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 569, 568, 567, 566, 565,
	564, 563, 562, 0, 0, 511, 412, 297, 259, 293,
	294, 301, 609, 606, 416, 610, 0, 267, 491, 341,
	146, 382, 315, 556, 557, 0, 0, 215, 216, 217,
	218, 219, 220, 221, 222, 260, 223, 224, 225, 226,
	227, 228, 229, 232, 233, 234, 235, 236, 237, 238,
	239, 559, 230, 231, 240, 241, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 0, 0,
	0, 261, 262, 263, 264, 0, 0, 255, 256, 257,
	258, 0, 0, 0, 441, 442, 443, 465, 427, 490,
	607, 0, 0, 0, 0, 0, 0, 0, 540, 552,
	586, 0, 595, 596, 598, 600, 599, 602, 0, 613,
	481, 482, 614, 480, 592, 370, 0, 496, 529, 518,
	601, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 310, 982, 0, 340, 533, 515, 525, 516,
	501, 502, 503, 510, 320, 504, 505, 506, 475, 507,
	476, 508, 509, 0, 532, 483, 401, 354, 550, 549,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 989, 990,
	0, 0, 0, 0, 283, 205, 477, 597, 479, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 993,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 273, 406, 977, 284, 397, 436, 289, 404, 279,
	369, 393, 0, 0, 275, 421, 403, 351, 330, 331,
	274, 0, 388, 308, 322, 305, 367, 0, 420, 448,
	304, 439, 967, 431, 277, 966, 430, 366, 417, 422,
	352, 346, 276, 419, 350, 345, 334, 312, 464, 335,
	336, 326, 378, 344, 379, 327, 356, 355, 357, 0,
	0, 0, 0, 0, 459, 460, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 591, 0,
	0, 594, 0, 433, 0, 0, 0, 0, 0, 0,
	405, 0, 0, 337, 0, 0, 0, 449, 0, 391,
	372, 616, 0, 0, 389, 342, 418, 380, 424, 407,
	432, 980, 381, 268, 408, 307, 353, 280, 282, 302,
	309, 311, 313, 314, 362, 363, 375, 396, 409, 410,
	411, 306, 290, 390, 291, 324, 292, 269, 298, 296,
	299, 398, 300, 271, 376, 415, 0, 319, 386, 349,
	272, 348, 377, 414, 413, 281, 440, 446, 447, 537,
	0, 452, 617, 618, 619, 461, 466, 467, 468, 470,
	471, 472, 473, 538, 555, 522, 492, 454, 546, 489,
	493, 494, 558, 0, 0, 0, 445, 338, 339, 0,
	317, 265, 266, 612, 303, 368, 560, 593, 485, 0,
	547, 486, 495, 295, 519, 531, 530, 364, 444, 0,
	542, 545, 474, 611, 0, 539, 554, 615, 553, 608,
	374, 0, 395, 551, 498, 0, 543, 517, 0, 544,
	513, 548, 0, 487, 0, 402, 426, 438, 455, 458,
	488, 573, 574, 575, 270, 457, 577, 578, 579, 580,
	581, 582, 981, 576, 429, 520, 497, 523, 437, 500,
	499, 0, 0, 534, 984, 535, 536, 358, 359, 360,
	361, 321, 561, 288, 456, 384, 0, 521, 0, 0,
	0, 0, 0, 0, 0, 0, 526, 527, 524, 620,
	0, 584, 585, 0, 0, 450, 451, 316, 323, 469,
	325, 287, 373, 318, 435, 332, 0, 462, 528, 463,
	587, 590, 588, 589, 991, 978, 987, 979, 333, 343,
	387, 434, 371, 392, 285, 425, 400, 988, 514, 541,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 254, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 569, 568, 567, 566,
	565, 564, 563, 562, 0, 0, 511, 412, 297, 259,
	293, 294, 301, 609, 606, 416, 610, 0, 267, 491,
	341, 0, 382, 315, 556, 557, 0, 0, 215, 216,
	217, 218, 219, 220, 221, 222, 260, 223, 224, 225,
	226, 227, 228, 229, 232, 233, 234, 235, 236, 237,
	238, 239, 559, 230, 231, 240, 241, 242, 243, 244,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 0,
	0, 0, 261, 262, 263, 264, 0, 0, 255, 256,
	257, 258, 0, 0, 0, 441, 442, 443, 465, 427,
	490, 607, 0, 0, 0, 0, 0, 0, 0, 540,
	552, 586, 0, 595, 596, 598, 600, 599, 602, 182,
	613, 481, 482, 614, 480, 592, 0, 0, 0, 370,
	0, 496, 529, 518, 601, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 310, 0, 0, 340,
	533, 515, 525, 516, 501, 502, 503, 510, 320, 504,
	505, 506, 475, 507, 476, 508, 509, 121, 532, 483,
	401, 354, 550, 549, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1931, 0,
	0, 204, 0, 0, 0, 0, 0, 0, 283, 205,
	477, 597, 479, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 286, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 406, 423, 284, 397,
	436, 289, 404, 279, 369, 393, 0, 0, 275, 421,
	403, 351, 330, 331, 274, 0, 388, 308, 322, 305,
	367, 0, 420, 448, 304, 439, 0, 431, 277, 0,
	430, 366, 417, 422, 352, 346, 276, 419, 350, 345,
	334, 312, 464, 335, 336, 326, 378, 344, 379, 327,
	356, 355, 357, 0, 0, 0, 0, 0, 459, 460,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 591, 0, 0, 594, 0, 433, 0, 0,
	0, 0, 0, 0, 405, 0, 0, 337, 0, 0,
	0, 449, 0, 391, 372, 616, 0, 0, 389, 342,
	418, 380, 424, 407, 432, 385, 381, 268, 408, 307,
	353, 280, 282, 302, 309, 311, 313, 314, 362, 363,
	375, 396, 409, 410, 411, 306, 290, 390, 291, 324,
	292, 269, 298, 296, 299, 398, 300, 271, 376, 415,
	0, 319, 386, 349, 272, 348, 377, 414, 413, 281,
	440, 446, 447, 537, 0, 452, 617, 618, 619, 461,
	466, 467, 468, 470, 471, 472, 473, 538, 555, 522,
	492, 454, 546, 489, 493, 494, 558, 0, 0, 0,
	445, 338, 339, 0, 317, 265, 266, 612, 303, 368,
	560, 593, 485, 0, 547, 486, 495, 295, 519, 531,
	530, 364, 444, 0, 542, 545, 474, 611, 0, 539,
	554, 615, 553, 608, 374, 0, 395, 551, 498, 0,
	543, 517, 0, 544, 513, 548, 0, 487, 0, 402,
	426, 438, 455, 458, 488, 573, 574, 575, 270, 457,
	577, 578, 579, 580, 581, 582, 583, 576, 429, 520,
	497, 523, 437, 500, 499, 0, 0, 534, 453, 535,
	536, 358, 359, 360, 361, 321, 561, 288, 456, 384,
	0, 521, 0, 0, 0, 0, 0, 0, 0, 0,
	526, 527, 524, 620, 0, 584, 585, 0, 0, 450,
	451, 316, 323, 469, 325, 287, 373, 318, 435, 332,
	0, 462, 528, 463, 587, 590, 588, 589, 365, 328,
	329, 399, 333, 343, 387, 434, 371, 392, 285, 425,
	400, 347, 514, 541, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 254, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	569, 568, 567, 566, 565, 564, 563, 562, 0, 0,
	511, 412, 297, 259, 293, 294, 301, 609, 606, 416,
	610, 0, 267, 491, 341, 146, 382, 315, 556, 557,
	0, 0, 215, 216, 217, 218, 219, 220, 221, 222,
	260, 223, 224, 225, 226, 227, 228, 229, 232, 233,
	234, 235, 236, 237, 238, 239, 559, 230, 231, 240,
	241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 0, 0, 0, 261, 262, 263, 264,
	0, 0, 255, 256, 257, 258, 0, 0, 0, 441,
	442, 443, 465, 427, 490, 607, 0, 0, 0, 0,
	0, 0, 0, 540, 552, 586, 0, 595, 596, 598,
	600, 599, 602, 0, 613, 481, 482, 614, 480, 592,
	370, 0, 496, 529, 518, 601, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 310, 0, 0,
	340, 533, 515, 525, 516, 501, 502, 503, 510, 320,
	504, 505, 506, 475, 507, 476, 508, 509, 0, 532,
	483, 401, 354, 550, 549, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 989, 990, 0, 0, 0, 0, 283,
	205, 477, 597, 479, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 993, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 273, 406, 423, 284,
	397, 436, 289, 404, 279, 369, 393, 0, 0, 275,
	421, 403, 351, 330, 331, 274, 0, 388, 308, 322,
	305, 367, 0, 420, 448, 304, 439, 967, 431, 277,
	966, 430, 366, 417, 422, 352, 346, 276, 419, 350,
	345, 334, 312, 464, 335, 336, 326, 378, 344, 379,
	327, 356, 355, 357, 0, 0, 0, 0, 0, 459,
	460, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 591, 0, 0, 594, 0, 433, 0,
	0, 0, 0, 0, 0, 405, 0, 0, 337, 0,
	0, 0, 449, 0, 391, 372, 616, 0, 0, 389,
	342, 418, 380, 424, 407, 432, 385, 381, 268, 408,
	307, 353, 280, 282, 302, 309, 311, 313, 314, 362,
	363, 375, 396, 409, 410, 411, 306, 290, 390, 291,
	324, 292, 269, 298, 296, 299, 398, 300, 271, 376,
	415, 0, 319, 386, 349, 272, 348, 377, 414, 413,
	281, 440, 446, 447, 537, 0, 452, 617, 618, 619,
	461, 466, 467, 468, 470, 471, 472, 473, 538, 555,
	522, 492, 454, 546, 489, 493, 494, 558, 0, 0,
	0, 445, 338, 339, 0, 317, 265, 266, 612, 303,
	368, 560, 593, 485, 0, 547, 486, 495, 295, 519,
	531, 530, 364, 444, 0, 542, 545, 474, 611, 0,
	539, 554, 615, 553, 608, 374, 0, 395, 551, 498,
	0, 543, 517, 0, 544, 513, 548, 0, 487, 0,
	402, 426, 438, 455, 458, 488, 573, 574, 575, 270,
	457, 577, 578, 579, 580, 581, 582, 583, 576, 429,
	520, 497, 523, 437, 500, 499, 0, 0, 534, 453,
	535, 536, 358, 359, 360, 361, 321, 561, 288, 456,
	384, 0, 521, 0, 0, 0, 0, 0, 0, 0,
	0, 526, 527, 524, 620, 0, 584, 585, 0, 0,
	450, 451, 316, 323, 469, 325, 287, 373, 318, 435,
	332, 0, 462, 528, 463, 587, 590, 588, 589, 991,
	1950, 987, 1951, 333, 343, 387, 434, 371, 392, 285,
	425, 400, 988, 514, 541, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 254, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 569, 568, 567, 566, 565, 564, 563, 562, 0,
	0, 511, 412, 297, 259, 293, 294, 301, 609, 606,
	416, 610, 0, 267, 491, 341, 0, 382, 315, 556,
	557, 0, 0, 215, 216, 217, 218, 219, 220, 221,
	222, 260, 223, 224, 225, 226, 227, 228, 229, 232,
	233, 234, 235, 236, 237, 238, 239, 559, 230, 231,
	240, 241, 242, 243, 244, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 0, 0, 0, 261, 262, 263,
	264, 0, 0, 255, 256, 257, 258, 0, 0, 0,
	441, 442, 443, 465, 427, 490, 607, 0, 0, 0,
	0, 0, 0, 0, 540, 552, 586, 0, 595, 596,
	598, 600, 599, 602, 0, 613, 481, 482, 614, 480,
	592, 370, 0, 496, 529, 518, 601, 484, 0, 0,
	2784, 0, 0, 0, 0, 0, 0, 0, 310, 0,
	0, 340, 533, 515, 525, 516, 501, 502, 503, 510,
	320, 504, 505, 506, 475, 507, 476, 508, 509, 0,
	532, 483, 401, 354, 550, 549, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 0, 0, 0, 0, 0,
	283, 205, 477, 597, 479, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 286, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 273, 406, 423,
	284, 397, 436, 289, 404, 279, 369, 393, 0, 0,
	275, 421, 403, 351, 330, 331, 274, 0, 388, 308,
	322, 305, 367, 0, 420, 448, 304, 439, 0, 431,
	277, 0, 430, 366, 417, 422, 352, 346, 276, 419,
	350, 345, 334, 312, 464, 335, 336, 326, 378, 344,
	379, 327, 356, 355, 357, 0, 0, 0, 0, 0,
	459, 460, 0, 0, 0, 0, 0, 0, 0, 0,
	2787, 0, 0, 2786, 591, 0, 0, 594, 0, 433,
	0, 0, 0, 0, 0, 0, 405, 0, 0, 337,
	0, 0, 0, 449, 0, 391, 372, 616, 0, 0,
	389, 342, 418, 380, 424, 407, 432, 385, 381, 268,
	408, 307, 353, 280, 282, 302, 309, 311, 313, 314,
	362, 363, 375, 396, 409, 410, 411, 306, 290, 390,
	291, 324, 292, 269, 298, 296, 299, 398, 300, 271,
	376, 415, 0, 319, 386, 349, 272, 348, 377, 414,
	413, 281, 440, 446, 447, 537, 0, 452, 617, 618,
	619, 461, 466, 467, 468, 470, 471, 472, 473, 538,
	555, 522, 492, 454, 546, 489, 493, 494, 558, 0,
	0, 0, 445, 338, 339, 0, 317, 265, 266, 612,
	303, 368, 560, 593, 485, 0, 547, 486, 495, 295,
	519, 531, 530, 364, 444, 0, 542, 545, 474, 611,
	0, 539, 554, 615, 553, 608, 374, 0, 395, 551,
	498, 0, 543, 517, 0, 544, 513, 548, 0, 487,
	0, 402, 426, 438, 455, 458, 488, 573, 574, 575,
	270, 457, 577, 578, 579, 580, 581, 582, 583, 576,
	429, 520, 497, 523, 437, 500, 499, 0, 0, 534,
	453, 535, 536, 358, 359, 360, 361, 321, 561, 288,
	456, 384, 0, 521, 0, 0, 0, 0, 0, 0,
	0, 0, 526, 527, 524, 620, 0, 584, 585, 0,
	0, 450, 451, 316, 323, 469, 325, 287, 373, 318,
	435, 332, 0, 462, 528, 463, 587, 590, 588, 589,
	365, 328, 329, 399, 333, 343, 387, 434, 371, 392,
	285, 425, 400, 347, 514, 541, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 254, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 569, 568, 567, 566, 565, 564, 563, 562,
	0, 0, 511, 412, 297, 259, 293, 294, 301, 609,
	606, 416, 610, 0, 267, 491, 341, 0, 382, 315,
	556, 557, 0, 0, 215, 216, 217, 218, 219, 220,
	221, 222, 260, 223, 224, 225, 226, 227, 228, 229,
	232, 233, 234, 235, 236, 237, 238, 239, 559, 230,
	231, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 0, 0, 0, 261, 262,
	263, 264, 0, 0, 255, 256, 257, 258, 0, 0,
	0, 441, 442, 443, 465, 427, 490, 607, 0, 0,
	0, 0, 0, 0, 0, 540, 552, 586, 0, 595,
	596, 598, 600, 599, 602, 0, 613, 481, 482, 614,
	480, 592, 370, 0, 496, 529, 518, 601, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 310,
	1450, 0, 340, 533, 515, 525, 516, 501, 502, 503,
	510, 320, 504, 505, 506, 475, 507, 476, 508, 509,
	0, 532, 483, 401, 354, 550, 549, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 1448, 0, 0,
	0, 283, 205, 477, 597, 479, 478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1446, 0, 0, 0, 0, 0, 0, 273, 406,
	423, 284, 397, 436, 289, 404, 279, 369, 393, 0,
	0, 275, 421, 403, 351, 330, 331, 274, 0, 388,
	308, 322, 305, 367, 0, 420, 448, 304, 439, 0,
	431, 277, 0, 430, 366, 417, 422, 352, 346, 276,
	419, 350, 345, 334, 312, 464, 335, 336, 326, 378,
	344, 379, 327, 356, 355, 357, 0, 0, 0, 0,
	0, 459, 460, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 591, 0, 0, 594, 0,
	433, 0, 0, 0, 0, 0, 0, 405, 0, 0,
	337, 0, 0, 0, 449, 0, 391, 372, 616, 0,
	0, 389, 342, 418, 380, 424, 407, 432, 385, 381,
	268, 408, 307, 353, 280, 282, 302, 309, 311, 313,
	314, 362, 363, 375, 396, 409, 410, 411, 306, 290,
	390, 291, 324, 292, 269, 298, 296, 299, 398, 300,
	271, 376, 415, 0, 319, 386, 349, 272, 348, 377,
	414, 413, 281, 440, 446, 447, 537, 0, 452, 617,
	618, 619, 461, 466, 467, 468, 470, 471, 472, 473,
	538, 555, 522, 492, 454, 546, 489, 493, 494, 558,
	0, 0, 0, 445, 338, 339, 0, 317, 265, 266,
	612, 303, 368, 560, 593, 485, 0, 547, 486, 495,
	295, 519, 531, 530, 364, 444, 0, 542, 545, 474,
	611, 0, 539, 554, 615, 553, 608, 374, 0, 395,
	551, 498, 0, 543, 517, 0, 544, 513, 548, 0,
	487, 0, 402, 426, 438, 455, 458, 488, 573, 574,
	575, 270, 457, 577, 578, 579, 580, 581, 582, 583,
	576, 429, 520, 497, 523, 437, 500, 499, 0, 0,
	534, 453, 535, 536, 358, 359, 360, 361, 321, 561,
	288, 456, 384, 0, 521, 0, 0, 0, 0, 0,
	0, 0, 0, 526, 527, 524, 620, 0, 584, 585,
	0, 0, 450, 451, 316, 323, 469, 325, 287, 373,
	318, 435, 332, 0, 462, 528, 463, 587, 590, 588,
	589, 365, 328, 329, 399, 333, 343, 387, 434, 371,
	392, 285, 425, 400, 347, 514, 541, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 254, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 569, 568, 567, 566, 565, 564, 563,
	562, 0, 0, 511, 412, 297, 259, 293, 294, 301,
	609, 606, 416, 610, 0, 267, 491, 341, 0, 382,
	315, 556, 557, 0, 0, 215, 216, 217, 218, 219,
	220, 221, 222, 260, 223, 224, 225, 226, 227, 228,
	229, 232, 233, 234, 235, 236, 237, 238, 239, 559,
	230, 231, 240, 241, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 0, 0, 0, 261,
	262, 263, 264, 0, 0, 255, 256, 257, 258, 0,
	0, 0, 441, 442, 443, 465, 427, 490, 607, 0,
	0, 0, 0, 0, 0, 0, 540, 552, 586, 0,
	595, 596, 598, 600, 599, 602, 0, 613, 481, 482,
	614, 480, 592, 370, 0, 496, 529, 518, 601, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	310, 1444, 0, 340, 533, 515, 525, 516, 501, 502,
	503, 510, 320, 504, 505, 506, 475, 507, 476, 508,
	509, 0, 532, 483, 401, 354, 550, 549, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 1448, 0,
	0, 0, 283, 205, 477, 597, 479, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1446, 0, 0, 0, 0, 0, 0, 273,
	406, 423, 284, 397, 436, 289, 404, 279, 369, 393,
	0, 0, 275, 421, 403, 351, 330, 331, 274, 0,
	388, 308, 322, 305, 367, 0, 420, 448, 304, 439,
	0, 431, 277, 0, 430, 366, 417, 422, 352, 346,
	276, 419, 350, 345, 334, 312, 464, 335, 336, 326,
	378, 344, 379, 327, 356, 355, 357, 0, 0, 0,
	0, 0, 459, 460, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 591, 0, 0, 594,
	0, 433, 0, 0, 0, 0, 0, 0, 405, 0,
	0, 337, 0, 0, 0, 449, 0, 391, 372, 616,
	0, 0, 389, 342, 418, 380, 424, 407, 432, 385,
	381, 268, 408, 307, 353, 280, 282, 302, 309, 311,
	313, 314, 362, 363, 375, 396, 409, 410, 411, 306,
	290, 390, 291, 324, 292, 269, 298, 296, 299, 398,
	300, 271, 376, 415, 0, 319, 386, 349, 272, 348,
	377, 414, 413, 281, 440, 446, 447, 537, 0, 452,
	617, 618, 619, 461, 466, 467, 468, 470, 471, 472,
	473, 538, 555, 522, 492, 454, 546, 489, 493, 494,
	558, 0, 0, 0, 445, 338, 339, 0, 317, 265,
	266, 612, 303, 368, 560, 593, 485, 0, 547, 486,
	495, 295, 519, 531, 530, 364, 444, 0, 542, 545,
	474, 611, 0, 539, 554, 615, 553, 608, 374, 0,
	395, 551, 498, 0, 543, 517, 0, 544, 513, 548,
	0, 487, 0, 402, 426, 438, 455, 458, 488, 573,
	574, 575, 270, 457, 577, 578, 579, 580, 581, 582,
	583, 576, 429, 520, 497, 523, 437, 500, 499, 0,
	0, 534, 453, 535, 536, 358, 359, 360, 361, 321,
	561, 288, 456, 384, 0, 521, 0, 0, 0, 0,
	0, 0, 0, 0, 526, 527, 524, 620, 0, 584,
	585, 0, 0, 450, 451, 316, 323, 469, 325, 287,
	373, 318, 435, 332, 0, 462, 528, 463, 587, 590,
	588, 589, 365, 328, 329, 399, 333, 343, 387, 434,
	371, 392, 285, 425, 400, 347, 514, 541, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 254,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 569, 568, 567, 566, 565, 564,
	563, 562, 0, 0, 511, 412, 297, 259, 293, 294,
	301, 609, 606, 416, 610, 0, 267, 491, 341, 0,
	382, 315, 556, 557, 0, 0, 215, 216, 217, 218,
	219, 220, 221, 222, 260, 223, 224, 225, 226, 227,
	228, 229, 232, 233, 234, 235, 236, 237, 238, 239,
	559, 230, 231, 240, 241, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 0, 0, 0,
	261, 262, 263, 264, 0, 0, 255, 256, 257, 258,
	0, 0, 0, 441, 442, 443, 465, 427, 490, 607,
	0, 0, 0, 0, 0, 0, 0, 540, 552, 586,
	0, 595, 596, 598, 600, 599, 602, 0, 613, 481,
	482, 614, 480, 592, 370, 0, 496, 529, 518, 601,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 310, 0, 0, 340, 533, 515, 525, 516, 501,
	502, 503, 510, 320, 504, 505, 506, 475, 507, 476,
	508, 509, 0, 532, 483, 401, 354, 550, 549, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3771, 0, 204, 806, 0, 0,
	0, 0, 0, 283, 205, 477, 597, 479, 478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	273, 406, 423, 284, 397, 436, 289, 404, 279, 369,
	393, 0, 0, 275, 421, 403, 351, 330, 331, 274,
	0, 388, 308, 322, 305, 367, 0, 420, 448, 304,
	439, 0, 431, 277, 0, 430, 366, 417, 422, 352,
	346, 276, 419, 350, 345, 334, 312, 464, 335, 336,
	326, 378, 344, 379, 327, 356, 355, 357, 0, 0,
	0, 0, 0, 459, 460, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 591, 0, 0,
	594, 0, 433, 0, 0, 0, 0, 0, 0, 405,
	0, 0, 337, 0, 0, 0, 449, 0, 391, 372,
	616, 0, 0, 389, 342, 418, 380, 424, 407, 432,
	385, 381, 268, 408, 307, 353, 280, 282, 302, 309,
	311, 313, 314, 362, 363, 375, 396, 409, 410, 411,
	306, 290, 390, 291, 324, 292, 269, 298, 296, 299,
	398, 300, 271, 376, 415, 0, 319, 386, 349, 272,
	348, 377, 414, 413, 281, 440, 446, 447, 537, 0,
	452, 617, 618, 619, 461, 466, 467, 468, 470, 471,
	472, 473, 538, 555, 522, 492, 454, 546, 489, 493,
	494, 558, 0, 0, 0, 445, 338, 339, 0, 317,
	265, 266, 612, 303, 368, 560, 593, 485, 0, 547,
	486, 495, 295, 519, 531, 530, 364, 444, 0, 542,
	545, 474, 611, 0, 539, 554, 615, 553, 608, 374,
	0, 395, 551, 498, 0, 543, 517, 0, 544, 513,
	548, 0, 487, 0, 402, 426, 438, 455, 458, 488,
	573, 574, 575, 270, 457, 577, 578, 579, 580, 581,
	582, 583, 576, 429, 520, 497, 523, 437, 500, 499,
	0, 0, 534, 453, 535, 536, 358, 359, 360, 361,
	321, 561, 288, 456, 384, 0, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 526, 527, 524, 620, 0,
	584, 585, 0, 0, 450, 451, 316, 323, 469, 325,
	287, 373, 318, 435, 332, 0, 462, 528, 463, 587,
	590, 588, 589, 365, 328, 329, 399, 333, 343, 387,
	434, 371, 392, 285, 425, 400, 347, 514, 541, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	254, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 569, 568, 567, 566, 565,
	564, 563, 562, 0, 0, 511, 412, 297, 259, 293,
	294, 301, 609, 606, 416, 610, 0, 267, 491, 341,
	0, 382, 315, 556, 557, 0, 0, 215, 216, 217,
	218, 219, 220, 221, 222, 260, 223, 224, 225, 226,
	227, 228, 229, 232, 233, 234, 235, 236, 237, 238,
	239, 559, 230, 231, 240, 241, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 0, 0,
	0, 261, 262, 263, 264, 0, 0, 255, 256, 257,
	258, 0, 0, 0, 441, 442, 443, 465, 427, 490,
	607, 0, 0, 0, 0, 0, 0, 0, 540, 552,
	586, 0, 595, 596, 598, 600, 599, 602, 0, 613,
	481, 482, 614, 480, 592, 370, 0, 496, 529, 518,
	601, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 310, 0, 0, 340, 533, 515, 525, 516,
	501, 502, 503, 510, 320, 504, 505, 506, 475, 507,
	476, 508, 509, 0, 532, 483, 401, 354, 550, 549,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 0, 0,
	1448, 0, 0, 0, 283, 205, 477, 597, 479, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1446, 0, 0, 0, 0, 0,
	0, 273, 406, 423, 284, 397, 436, 289, 404, 279,
	369, 393, 0, 0, 275, 421, 403, 351, 330, 331,
	274, 0, 388, 308, 322, 305, 367, 0, 420, 448,
	304, 439, 0, 431, 277, 0, 430, 366, 417, 422,
	352, 346, 276, 419, 350, 345, 334, 312, 464, 335,
	336, 326, 378, 344, 379, 327, 356, 355, 357, 0,
	0, 0, 0, 0, 459, 460, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 591, 0,
	0, 594, 0, 433, 0, 0, 0, 0, 0, 0,
	405, 0, 0, 337, 0, 0, 0, 449, 0, 391,
	372, 616, 0, 0, 389, 342, 418, 380, 424, 407,
	432, 385, 381, 268, 408, 307, 353, 280, 282, 302,
	309, 311, 313, 314, 362, 363, 375, 396, 409, 410,
	411, 306, 290, 390, 291, 324, 292, 269, 298, 296,
	299, 398, 300, 271, 376, 415, 0, 319, 386, 349,
	272, 348, 377, 414, 413, 281, 440, 446, 447, 537,
	0, 452, 617, 618, 619, 461, 466, 467, 468, 470,
	471, 472, 473, 538, 555, 522, 492, 454, 546, 489,
	493, 494, 558, 0, 0, 0, 445, 338, 339, 0,
	317, 265, 266, 612, 303, 368, 560, 593, 485, 0,
	547, 486, 495, 295, 519, 531, 530, 364, 444, 0,
	542, 545, 474, 611, 0, 539, 554, 615, 553, 608,
	374, 0, 395, 551, 498, 0, 543, 517, 0, 544,
	513, 548, 0, 487, 0, 402, 426, 438, 455, 458,
	488, 573, 574, 575, 270, 457, 577, 578, 579, 580,
	581, 582, 583, 576, 429, 520, 497, 523, 437, 500,
	499, 0, 0, 534, 453, 535, 536, 358, 359, 360,
	361, 321, 561, 288, 456, 384, 0, 521, 0, 0,
	0, 0, 0, 0, 0, 0, 526, 527, 524, 620,
	0, 584, 585, 0, 0, 450, 451, 316, 323, 469,
	325, 287, 373, 318, 435, 332, 0, 462, 528, 463,
	587, 590, 588, 589, 365, 328, 329, 399, 333, 343,
	387, 434, 371, 392, 285, 425, 400, 347, 514, 541,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 254, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 569, 568, 567, 566,
	565, 564, 563, 562, 0, 0, 511, 412, 297, 259,
	293, 294, 301, 609, 606, 416, 610, 0, 267, 491,
	341, 0, 382, 315, 556, 557, 0, 0, 215, 216,
	217, 218, 219, 220, 221, 222, 260, 223, 224, 225,
	226, 227, 228, 229, 232, 233, 234, 235, 236, 237,
	238, 239, 559, 230, 231, 240, 241, 242, 243, 244,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 0,
	0, 0, 261, 262, 263, 264, 0, 0, 255, 256,
	257, 258, 0, 0, 0, 441, 442, 443, 465, 427,
	490, 607, 0, 0, 0, 0, 0, 0, 0, 540,
	552, 586, 0, 595, 596, 598, 600, 599, 602, 0,
	613, 481, 482, 614, 480, 592, 370, 0, 496, 529,
	518, 601, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 310, 0, 0, 340, 533, 515, 525,
	516, 501, 502, 503, 510, 320, 504, 505, 506, 475,
	507, 476, 508, 509, 0, 532, 483, 401, 354, 550,
	549, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 1448, 0, 0, 0, 283, 205, 477, 597, 479,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1654, 0, 0, 0, 0,
	0, 0, 273, 406, 423, 284, 397, 436, 289, 404,
	279, 369, 393, 0, 0, 275, 421, 403, 351, 330,
	331, 274, 0, 388, 308, 322, 305, 367, 0, 420,
	448, 304, 439, 0, 431, 277, 0, 430, 366, 417,
	422, 352, 346, 276, 419, 350, 345, 334, 312, 464,
	335, 336, 326, 378, 344, 379, 327, 356, 355, 357,
	0, 0, 0, 0, 0, 459, 460, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 591,
	0, 0, 594, 0, 433, 0, 0, 0, 0, 0,
	0, 405, 0, 0, 337, 0, 0, 0, 449, 0,
	391, 372, 616, 0, 0, 389, 342, 418, 380, 424,
	407, 432, 385, 381, 268, 408, 307, 353, 280, 282,
	302, 309, 311, 313, 314, 362, 363, 375, 396, 409,
	410, 411, 306, 290, 390, 291, 324, 292, 269, 298,
	296, 299, 398, 300, 271, 376, 415, 0, 319, 386,
	349, 272, 348, 377, 414, 413, 281, 440, 446, 447,
	537, 0, 452, 617, 618, 619, 461, 466, 467, 468,
	470, 471, 472, 473, 538, 555, 522, 492, 454, 546,
	489, 493, 494, 558, 0, 0, 0, 445, 338, 339,
	0, 317, 265, 266, 612, 303, 368, 560, 593, 485,
	0, 547, 486, 495, 295, 519, 531, 530, 364, 444,
	0, 542, 545, 474, 611, 0, 539, 554, 615, 553,
	608, 374, 0, 395, 551, 498, 0, 543, 517, 0,
	544, 513, 548, 0, 487, 0, 402, 426, 438, 455,
	458, 488, 573, 574, 575, 270, 457, 577, 578, 579,
	580, 581, 582, 583, 576, 429, 520, 497, 523, 437,
	500, 499, 0, 0, 534, 453, 535, 536, 358, 359,
	360, 361, 321, 561, 288, 456, 384, 0, 521, 0,
	0, 0, 0, 0, 0, 0, 0, 526, 527, 524,
	620, 0, 584, 585, 0, 0, 450, 451, 316, 323,
	469, 325, 287, 373, 318, 435, 332, 0, 462, 528,
	463, 587, 590, 588, 589, 365, 328, 329, 399, 333,
	343, 387, 434, 371, 392, 285, 425, 400, 347, 514,
	541, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 254, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 569, 568, 567,
	566, 565, 564, 563, 562, 0, 0, 511, 412, 297,
	259, 293, 294, 301, 609, 606, 416, 610, 0, 267,
	491, 341, 0, 382, 315, 556, 557, 0, 0, 215,
	216, 217, 218, 219, 220, 221, 222, 260, 223, 224,
	225, 226, 227, 228, 229, 232, 233, 234, 235, 236,
	237, 238, 239, 559, 230, 231, 240, 241, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	0, 0, 0, 261, 262, 263, 264, 0, 0, 255,
	256, 257, 258, 0, 0, 0, 441, 442, 443, 465,
	427, 490, 607, 0, 0, 0, 0, 0, 0, 0,
	540, 552, 586, 0, 595, 596, 598, 600, 599, 602,
	0, 613, 481, 482, 614, 480, 592, 370, 0, 496,
	529, 518, 601, 484, 0, 0, 0, 0, 0, 2361,
	0, 0, 0, 0, 310, 0, 0, 340, 533, 515,
	525, 516, 501, 502, 503, 510, 320, 504, 505, 506,
	475, 507, 476, 508, 509, 0, 532, 483, 401, 354,
	550, 549, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 2363, 0, 0, 0, 283, 205, 477, 597,
	479, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 273, 406, 423, 284, 397, 436, 289,
	404, 279, 369, 393, 0, 0, 275, 421, 403, 351,
	330, 331, 274, 0, 388, 308, 322, 305, 367, 0,
	420, 448, 304, 439, 0, 431, 277, 0, 430, 366,
	417, 422, 352, 346, 276, 419, 350, 345, 334, 312,
	464, 335, 336, 326, 378, 344, 379, 327, 356, 355,
	357, 0, 0, 0, 0, 0, 459, 460, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	591, 0, 0, 594, 0, 433, 0, 0, 0, 0,
	0, 0, 405, 0, 0, 337, 0, 0, 0, 449,
	0, 391, 372, 616, 0, 0, 389, 342, 418, 380,
	424, 407, 432, 385, 381, 268, 408, 307, 353, 280,
	282, 302, 309, 311, 313, 314, 362, 363, 375, 396,
	409, 410, 411, 306, 290, 390, 291, 324, 292, 269,
	298, 296, 299, 398, 300, 271, 376, 415, 0, 319,
	386, 349, 272, 348, 377, 414, 413, 281, 440, 446,
	447, 537, 0, 452, 617, 618, 619, 461, 466, 467,
	468, 470, 471, 472, 473, 538, 555, 522, 492, 454,
	546, 489, 493, 494, 558, 0, 0, 0, 445, 338,
	339, 0, 317, 265, 266, 612, 303, 368, 560, 593,
	485, 0, 547, 486, 495, 295, 519, 531, 530, 364,
	444, 0, 542, 545, 474, 611, 0, 539, 554, 615,
	553, 608, 374, 0, 395, 551, 498, 0, 543, 517,
	0, 544, 513, 548, 0, 487, 0, 402, 426, 438,
	455, 458, 488, 573, 574, 575, 270, 457, 577, 578,
	579, 580, 581, 582, 583, 576, 429, 520, 497, 523,
	437, 500, 499, 0, 0, 534, 453, 535, 536, 358,
	359, 360, 361, 321, 561, 288, 456, 384, 0, 521,
	0, 0, 0, 0, 0, 0, 0, 0, 526, 527,
	524, 620, 0, 584, 585, 0, 0, 450, 451, 316,
	323, 469, 325, 287, 373, 318, 435, 332, 0, 462,
	528, 463, 587, 590, 588, 589, 365, 328, 329, 399,
	333, 343, 387, 434, 371, 392, 285, 425, 400, 347,
	514, 541, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 254, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 569, 568,
	567, 566, 565, 564, 563, 562, 0, 0, 511, 412,
	297, 259, 293, 294, 301, 609, 606, 416, 610, 0,
	267, 491, 341, 0, 382, 315, 556, 557, 0, 0,
	215, 216, 217, 218, 219, 220, 221, 222, 260, 223,
	224, 225, 226, 227, 228, 229, 232, 233, 234, 235,
	236, 237, 238, 239, 559, 230, 231, 240, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 0, 0, 0, 261, 262, 263, 264, 0, 0,
	255, 256, 257, 258, 0, 0, 0, 441, 442, 443,
	465, 427, 490, 607, 0, 0, 0, 0, 0, 0,
	0, 540, 552, 586, 0, 595, 596, 598, 600, 599,
	602, 0, 613, 481, 482, 614, 480, 592, 370, 0,
	496, 529, 518, 601, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 310, 0, 0, 340, 533,
	515, 525, 516, 501, 502, 503, 510, 320, 504, 505,
	506, 475, 507, 476, 508, 509, 0, 532, 483, 401,
	354, 550, 549, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 0, 0, 2979, 2981, 0, 0, 283, 205, 477,
	597, 479, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 286, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 406, 423, 284, 397, 436,
	289, 404, 279, 369, 393, 0, 0, 275, 421, 403,
	351, 330, 331, 274, 0, 388, 308, 322, 305, 367,
	0, 420, 448, 304, 439, 0, 431, 277, 0, 430,
	366, 417, 422, 352, 346, 276, 419, 350, 345, 334,
	312, 464, 335, 336, 326, 378, 344, 379, 327, 356,
	355, 357, 0, 0, 0, 0, 0, 459, 460, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 591, 0, 0, 594, 0, 433, 0, 0, 0,
	0, 0, 0, 405, 0, 0, 337, 0, 0, 0,
	449, 0, 391, 372, 616, 0, 0, 389, 342, 418,
	380, 424, 407, 432, 385, 381, 268, 408, 307, 353,
	280, 282, 302, 309, 311, 313, 314, 362, 363, 375,
	396, 409, 410, 411, 306, 290, 390, 291, 324, 292,
	269, 298, 296, 299, 398, 300, 271, 376, 415, 0,
	319, 386, 349, 272, 348, 377, 414, 413, 281, 440,
	446, 447, 537, 0, 452, 617, 618, 619, 461, 466,
	467, 468, 470, 471, 472, 473, 538, 555, 522, 492,
	454, 546, 489, 493, 494, 558, 0, 0, 0, 445,
	338, 339, 0, 317, 265, 266, 612, 303, 368, 560,
	593, 485, 0, 547, 486, 495, 295, 519, 531, 530,
	364, 444, 0, 542, 545, 474, 611, 0, 539, 554,
	615, 553, 608, 374, 0, 395, 551, 498, 0, 543,
	517, 0, 544, 513, 548, 0, 487, 0, 402, 426,
	438, 455, 458, 488, 573, 574, 575, 270, 457, 577,
	578, 579, 580, 581, 582, 583, 576, 429, 520, 497,
	523, 437, 500, 499, 0, 0, 534, 453, 535, 536,
	358, 359, 360, 361, 321, 561, 288, 456, 384, 0,
	521, 0, 0, 0, 0, 0, 0, 0, 0, 526,
	527, 524, 620, 0, 584, 585, 0, 0, 450, 451,
	316, 323, 469, 325, 287, 373, 318, 435, 332, 0,
	462, 528, 463, 587, 590, 588, 589, 365, 328, 329,
	399, 333, 343, 387, 434, 371, 392, 285, 425, 400,
	347, 514, 541, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 254, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 569,
	568, 567, 566, 565, 564, 563, 562, 0, 0, 511,
	412, 297, 259, 293, 294, 301, 609, 606, 416, 610,
	0, 267, 491, 341, 0, 382, 315, 556, 557, 0,
	0, 215, 216, 217, 218, 219, 220, 221, 222, 260,
	223, 224, 225, 226, 227, 228, 229, 232, 233, 234,
	235, 236, 237, 238, 239, 559, 230, 231, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 0, 0, 0, 261, 262, 263, 264, 0,
	0, 255, 256, 257, 258, 0, 0, 0, 441, 442,
	443, 465, 427, 490, 607, 0, 0, 0, 0, 0,
	0, 0, 540, 552, 586, 0, 595, 596, 598, 600,
	599, 602, 0, 613, 481, 482, 614, 480, 592, 370,
	0, 496, 529, 518, 601, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 310, 2382, 0, 340,
	533, 515, 525, 516, 501, 502, 503, 510, 320, 504,
	505, 506, 475, 507, 476, 508, 509, 0, 532, 483,
	401, 354, 550, 549, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 0, 1448, 0, 0, 0, 283, 205,
	477, 597, 479, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 286, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 406, 423, 284, 397,
	436, 289, 404, 279, 369, 393, 0, 0, 275, 421,
	403, 351, 330, 331, 274, 0, 388, 308, 322, 305,
	367, 0, 420, 448, 304, 439, 0, 431, 277, 0,
	430, 366, 417, 422, 352, 346, 276, 419, 350, 345,
	334, 312, 464, 335, 336, 326, 378, 344, 379, 327,
	356, 355, 357, 0, 0, 0, 0, 0, 459, 460,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 591, 0, 0, 594, 0, 433, 0, 0,
	0, 0, 0, 0, 405, 0, 0, 337, 0, 0,
	0, 449, 0, 391, 372, 616, 0, 0, 389, 342,
	418, 380, 424, 407, 432, 385, 381, 268, 408, 307,
	353, 280, 282, 302, 309, 311, 313, 314, 362, 363,
	375, 396, 409, 410, 411, 306, 290, 390, 291, 324,
	292, 269, 298, 296, 299, 398, 300, 271, 376, 415,
	0, 319, 386, 349, 272, 348, 377, 414, 413, 281,
	440, 446, 447, 537, 0, 452, 617, 618, 619, 461,
	466, 467, 468, 470, 471, 472, 473, 538, 555, 522,
	492, 454, 546, 489, 493, 494, 558, 0, 0, 0,
	445, 338, 339, 0, 317, 265, 266, 612, 303, 368,
	560, 593, 485, 0, 547, 486, 495, 295, 519, 531,
	530, 364, 444, 0, 542, 545, 474, 611, 0, 539,
	554, 615, 553, 608, 374, 0, 395, 551, 498, 0,
	543, 517, 0, 544, 513, 548, 0, 487, 0, 402,
	426, 438, 455, 458, 488, 573, 574, 575, 270, 457,
	577, 578, 579, 580, 581, 582, 583, 576, 429, 520,
	497, 523, 437, 500, 499, 0, 0, 534, 453, 535,
	536, 358, 359, 360, 361, 321, 561, 288, 456, 384,
	0, 521, 0, 0, 0, 0, 0, 0, 0, 0,
	526, 527, 524, 620, 0, 584, 585, 0, 0, 450,
	451, 316, 323, 469, 325, 287, 373, 318, 435, 332,
	0, 462, 528, 463, 587, 590, 588, 589, 365, 328,
	329, 399, 333, 343, 387, 434, 371, 392, 285, 425,
	400, 347, 514, 541, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 254, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	569, 568, 567, 566, 565, 564, 563, 562, 0, 0,
	511, 412, 297, 259, 293, 294, 301, 609, 606, 416,
	610, 0, 267, 491, 341, 0, 382, 315, 556, 557,
	0, 0, 215, 216, 217, 218, 219, 220, 221, 222,
	260, 223, 224, 225, 226, 227, 228, 229, 232, 233,
	234, 235, 236, 237, 238, 239, 559, 230, 231, 240,
	241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 0, 0, 0, 261, 262, 263, 264,
	0, 0, 255, 256, 257, 258, 0, 0, 0, 441,
	442, 443, 465, 427, 490, 607, 0, 0, 0, 0,
	0, 0, 0, 540, 552, 586, 0, 595, 596, 598,
	600, 599, 602, 0, 613, 481, 482, 614, 480, 592,
	370, 0, 496, 529, 518, 601, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 627, 310, 0, 0,
	340, 533, 515, 525, 516, 501, 502, 503, 510, 320,
	504, 505, 506, 475, 507, 476, 508, 509, 0, 532,
	483, 401, 354, 550, 549, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 0, 0, 0, 0, 283,
	205, 477, 597, 479, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 286, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 273, 406, 423, 284,
	397, 436, 289, 404, 279, 369, 393, 0, 0, 275,
	421, 403, 351, 330, 331, 274, 0, 388, 308, 322,
	305, 367, 0, 420, 448, 304, 439, 0, 431, 277,
	0, 430, 366, 417, 422, 352, 346, 276, 419, 350,
	345, 334, 312, 464, 335, 336, 326, 378, 344, 379,
	327, 356, 355, 357, 0, 0, 0, 0, 0, 459,
	460, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 591, 0, 0, 594, 0, 433, 0,
	626, 0, 0, 0, 0, 405, 0, 0, 337, 0,
	0, 0, 449, 0, 391, 372, 616, 0, 0, 389,
	342, 418, 380, 424, 407, 432, 385, 381, 268, 408,
	307, 353, 280, 282, 302, 309, 311, 313, 314, 362,
	363, 375, 396, 409, 410, 411, 306, 290, 390, 291,
	324, 292, 269, 298, 296, 299, 398, 300, 271, 376,
	415, 0, 319, 386, 349, 272, 348, 377, 414, 413,
	281, 440, 446, 447, 537, 0, 452, 617, 618, 619,
	461, 466, 467, 468, 470, 471, 472, 473, 538, 555,
	522, 492, 454, 546, 489, 493, 494, 558, 0, 0,
	0, 445, 338, 339, 0, 317, 265, 266, 612, 303,
	368, 560, 593, 485, 0, 547, 486, 495, 295, 519,
	531, 530, 364, 444, 0, 542, 545, 474, 611, 0,
	539, 554, 615, 553, 608, 374, 0, 395, 551, 498,
	0, 543, 517, 0, 544, 513, 548, 0, 487, 0,
	402, 426, 438, 455, 458, 488, 573, 574, 575, 270,
	457, 577, 578, 579, 580, 581, 582, 583, 576, 429,
	520, 497, 523, 437, 500, 499, 0, 0, 534, 453,
	535, 536, 358, 359, 360, 361, 321, 561, 288, 456,
	384, 0, 521, 0, 0, 0, 0, 0, 0, 0,
	0, 526, 527, 524, 620, 0, 584, 585, 0, 0,
	450, 451, 316, 323, 469, 325, 287, 373, 318, 435,
	332, 0, 462, 528, 463, 587, 590, 588, 589, 365,
	328, 329, 399, 333, 343, 387, 434, 371, 392, 285,
	425, 400, 347, 514, 541, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 254, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 569, 568, 567, 566, 565, 564, 563, 562, 0,
	0, 511, 412, 297, 259, 293, 294, 301, 609, 606,
	416, 610, 0, 267, 491, 341, 0, 382, 315, 556,
	557, 0, 0, 215, 216, 217, 218, 219, 220, 221,
	222, 260, 223, 224, 225, 226, 227, 228, 229, 232,
	233, 234, 235, 236, 237, 238, 239, 559, 230, 231,
	240, 241, 242, 243, 244, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 0, 0, 0, 261, 262, 263,
	264, 0, 0, 255, 256, 257, 258, 0, 0, 0,
	441, 442, 443, 465, 427, 490, 607, 0, 0, 0,
	0, 0, 0, 0, 540, 552, 586, 0, 595, 596,
	598, 600, 599, 602, 0, 613, 481, 482, 614, 480,
	592, 370, 0, 496, 529, 518, 601, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 310, 0,
	0, 340, 533, 515, 525, 516, 501, 502, 503, 510,
	320, 504, 505, 506, 475, 507, 476, 508, 509, 0,
	532, 483, 401, 354, 550, 549, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 806, 0, 0, 0, 0, 0,
	283, 205, 477, 597, 479, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 286, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 273, 406, 423,
	284, 397, 436, 289, 404, 279, 369, 393, 0, 0,
	275, 421, 403, 351, 330, 331, 274, 0, 388, 308,
	322, 305, 367, 0, 420, 448, 304, 439, 0, 431,
	277, 0, 430, 366, 417, 422, 352, 346, 276, 419,
	350, 345, 334, 312, 464, 335, 336, 326, 378, 344,
	379, 327, 356, 355, 357, 0, 0, 0, 0, 0,
	459, 460, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 591, 0, 0, 594, 0, 433,
	0, 0, 0, 0, 0, 0, 405, 0, 0, 337,
	0, 0, 0, 449, 0, 391, 372, 616, 0, 0,
	389, 342, 418, 380, 424, 407, 432, 385, 381, 268,
	408, 307, 353, 280, 282, 302, 309, 311, 313, 314,
	362, 363, 375, 396, 409, 410, 411, 306, 290, 390,
	291, 324, 292, 269, 298, 296, 299, 398, 300, 271,
	376, 415, 0, 319, 386, 349, 272, 348, 377, 414,
	413, 281, 440, 446, 447, 537, 0, 452, 617, 618,
	619, 461, 466, 467, 468, 470, 471, 472, 473, 538,
	555, 522, 492, 454, 546, 489, 493, 494, 558, 0,
	0, 0, 445, 338, 339, 0, 317, 265, 266, 612,
	303, 368, 560, 593, 485, 0, 547, 486, 495, 295,
	519, 531, 530, 364, 444, 0, 542, 545, 474, 611,
	0, 539, 554, 615, 553, 608, 374, 0, 395, 551,
	498, 0, 543, 517, 0, 544, 513, 548, 0, 487,
	0, 402, 426, 438, 455, 458, 488, 573, 574, 575,
	270, 457, 577, 578, 579, 580, 581, 582, 583, 576,
	429, 520, 497, 523, 437, 500, 499, 0, 0, 534,
	453, 535, 536, 358, 359, 360, 361, 321, 561, 288,
	456, 384, 0, 521, 0, 0, 0, 0, 0, 0,
	0, 0, 526, 527, 524, 620, 0, 584, 585, 0,
	0, 450, 451, 316, 323, 469, 325, 287, 373, 318,
	435, 332, 0, 462, 528, 463, 587, 590, 588, 589,
	365, 328, 329, 399, 333, 343, 387, 434, 371, 392,
	285, 425, 400, 347, 514, 541, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 254, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 569, 568, 567, 566, 565, 564, 563, 562,
	0, 0, 511, 412, 297, 259, 293, 294, 301, 609,
	606, 416, 610, 0, 267, 491, 341, 0, 382, 315,
	556, 557, 0, 0, 215, 216, 217, 218, 219, 220,
	221, 222, 260, 223, 224, 225, 226, 227, 228, 229,
	232, 233, 234, 235, 236, 237, 238, 239, 559, 230,
	231, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 0, 0, 0, 261, 262,
	263, 264, 0, 0, 255, 256, 257, 258, 0, 0,
	0, 441, 442, 443, 465, 427, 490, 607, 0, 0,
	0, 0, 0, 0, 0, 540, 552, 586, 0, 595,
	596, 598, 600, 599, 602, 0, 613, 481, 482, 614,
	480, 592, 370, 0, 496, 529, 518, 601, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 310,
	0, 0, 340, 533, 515, 525, 516, 501, 502, 503,
	510, 320, 504, 505, 506, 475, 507, 476, 508, 509,
	0, 532, 483, 401, 354, 550, 549, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3750, 0, 0, 204, 0, 0, 0, 0, 0,
	0, 283, 205, 477, 597, 479, 478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 273, 406,
	423, 284, 397, 436, 289, 404, 279, 369, 393, 0,
	0, 275, 421, 403, 351, 330, 331, 274, 0, 388,
	308, 322, 305, 367, 0, 420, 448, 304, 439, 0,
	431, 277, 0, 430, 366, 417, 422, 352, 346, 276,
	419, 350, 345, 334, 312, 464, 335, 336, 326, 378,
	344, 379, 327, 356, 355, 357, 0, 0, 0, 0,
	0, 459, 460, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 591, 0, 0, 594, 0,
	433, 0, 0, 0, 0, 0, 0, 405, 0, 0,
	337, 0, 0, 0, 449, 0, 391, 372, 616, 0,
	0, 389, 342, 418, 380, 424, 407, 432, 385, 381,
	268, 408, 307, 353, 280, 282, 302, 309, 311, 313,
	314, 362, 363, 375, 396, 409, 410, 411, 306, 290,
	390, 291, 324, 292, 269, 298, 296, 299, 398, 300,
	271, 376, 415, 0, 319, 386, 349, 272, 348, 377,
	414, 413, 281, 440, 446, 447, 537, 0, 452, 617,
	618, 619, 461, 466, 467, 468, 470, 471, 472, 473,
	538, 555, 522, 492, 454, 546, 489, 493, 494, 558,
	0, 0, 0, 445, 338, 339, 0, 317, 265, 266,
	612, 303, 368, 560, 593, 485, 0, 547, 486, 495,
	295, 519, 531, 530, 364, 444, 0, 542, 545, 474,
	611, 0, 539, 554, 615, 553, 608, 374, 0, 395,
	551, 498, 0, 543, 517, 0, 544, 513, 548, 0,
	487, 0, 402, 426, 438, 455, 458, 488, 573, 574,
	575, 270, 457, 577, 578, 579, 580, 581, 582, 583,
	576, 429, 520, 497, 523, 437, 500, 499, 0, 0,
	534, 453, 535, 536, 358, 359, 360, 361, 321, 561,
	288, 456, 384, 0, 521, 0, 0, 0, 0, 0,
	0, 0, 0, 526, 527, 524, 620, 0, 584, 585,
	0, 0, 450, 451, 316, 323, 469, 325, 287, 373,
	318, 435, 332, 0, 462, 528, 463, 587, 590, 588,
	589, 365, 328, 329, 399, 333, 343, 387, 434, 371,
	392, 285, 425, 400, 347, 514, 541, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 254, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 569, 568, 567, 566, 565, 564, 563,
	562, 0, 0, 511, 412, 297, 259, 293, 294, 301,
	609, 606, 416, 610, 0, 267, 491, 341, 0, 382,
	315, 556, 557, 0, 0, 215, 216, 217, 218, 219,
	220, 221, 222, 260, 223, 224, 225, 226, 227, 228,
	229, 232, 233, 234, 235, 236, 237, 238, 239, 559,
	230, 231, 240, 241, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 0, 0, 0, 261,
	262, 263, 264, 0, 0, 255, 256, 257, 258, 0,
	0, 0, 441, 442, 443, 465, 427, 490, 607, 0,
	0, 0, 0, 0, 0, 0, 540, 552, 586, 0,
	595, 596, 598, 600, 599, 602, 0, 613, 481, 482,
	614, 480, 592, 370, 0, 496, 529, 518, 601, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	310, 0, 0, 340, 533, 515, 525, 516, 501, 502,
	503, 510, 320, 504, 505, 506, 475, 507, 476, 508,
	509, 0, 532, 483, 401, 354, 550, 549, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 3535, 0,
	0, 0, 283, 205, 477, 597, 479, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 273,
	406, 423, 284, 397, 436, 289, 404, 279, 369, 393,
	0, 0, 275, 421, 403, 351, 330, 331, 274, 0,
	388, 308, 322, 305, 367, 0, 420, 448, 304, 439,
	0, 431, 277, 0, 430, 366, 417, 422, 352, 346,
	276, 419, 350, 345, 334, 312, 464, 335, 336, 326,
	378, 344, 379, 327, 356, 355, 357, 0, 0, 0,
	0, 0, 459, 460, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 591, 0, 0, 594,
	0, 433, 0, 0, 0, 0, 0, 0, 405, 0,
	0, 337, 0, 0, 0, 449, 0, 391, 372, 616,
	0, 0, 389, 342, 418, 380, 424, 407, 432, 385,
	381, 268, 408, 307, 353, 280, 282, 302, 309, 311,
	313, 314, 362, 363, 375, 396, 409, 410, 411, 306,
	290, 390, 291, 324, 292, 269, 298, 296, 299, 398,
	300, 271, 376, 415, 0, 319, 386, 349, 272, 348,
	377, 414, 413, 281, 440, 446, 447, 537, 0, 452,
	617, 618, 619, 461, 466, 467, 468, 470, 471, 472,
	473, 538, 555, 522, 492, 454, 546, 489, 493, 494,
	558, 0, 0, 0, 445, 338, 339, 0, 317, 265,
	266, 612, 303, 368, 560, 593, 485, 0, 547, 486,
	495, 295, 519, 531, 530, 364, 444, 0, 542, 545,
	474, 611, 0, 539, 554, 615, 553, 608, 374, 0,
	395, 551, 498, 0, 543, 517, 0, 544, 513, 548,
	0, 487, 0, 402, 426, 438, 455, 458, 488, 573,
	574, 575, 270, 457, 577, 578, 579, 580, 581, 582,
	583, 576, 429, 520, 497, 523, 437, 500, 499, 0,
	0, 534, 453, 535, 536, 358, 359, 360, 361, 321,
	561, 288, 456, 384, 0, 521, 0, 0, 0, 0,
	0, 0, 0, 0, 526, 527, 524, 620, 0, 584,
	585, 0, 0, 450, 451, 316, 323, 469, 325, 287,
	373, 318, 435, 332, 0, 462, 528, 463, 587, 590,
	588, 589, 365, 328, 329, 399, 333, 343, 387, 434,
	371, 392, 285, 425, 400, 347, 514, 541, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 254,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 569, 568, 567, 566, 565, 564,
	563, 562, 0, 0, 511, 412, 297, 259, 293, 294,
	301, 609, 606, 416, 610, 0, 267, 491, 341, 0,
	382, 315, 556, 557, 0, 0, 215, 216, 217, 218,
	219, 220, 221, 222, 260, 223, 224, 225, 226, 227,
	228, 229, 232, 233, 234, 235, 236, 237, 238, 239,
	559, 230, 231, 240, 241, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 0, 0, 0,
	261, 262, 263, 264, 0, 0, 255, 256, 257, 258,
	0, 0, 0, 441, 442, 443, 465, 427, 490, 607,
	0, 0, 0, 0, 0, 0, 0, 540, 552, 586,
	0, 595, 596, 598, 600, 599, 602, 0, 613, 481,
	482, 614, 480, 592, 370, 0, 496, 529, 518, 601,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 310, 0, 0, 340, 533, 515, 525, 516, 501,
	502, 503, 510, 320, 504, 505, 506, 475, 507, 476,
	508, 509, 0, 532, 483, 401, 354, 550, 549, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 0,
	0, 0, 0, 283, 205, 477, 597, 479, 478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	273, 406, 423, 284, 397, 436, 289, 404, 279, 369,
	393, 0, 0, 275, 421, 403, 351, 330, 331, 274,
	0, 388, 308, 322, 305, 367, 0, 420, 448, 304,
	439, 0, 431, 277, 0, 430, 366, 417, 422, 352,
	346, 276, 419, 350, 345, 334, 312, 464, 335, 336,
	326, 378, 344, 379, 327, 356, 355, 357, 0, 0,
	0, 0, 0, 459, 460, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 591, 0, 0,
	594, 0, 433, 0, 0, 0, 3660, 0, 0, 405,
	0, 0, 337, 0, 0, 0, 449, 0, 391, 372,
	616, 0, 0, 389, 342, 418, 380, 424, 407, 432,
	385, 381, 268, 408, 307, 353, 280, 282, 302, 309,
	311, 313, 314, 362, 363, 375, 396, 409, 410, 411,
	306, 290, 390, 291, 324, 292, 269, 298, 296, 299,
	398, 300, 271, 376, 415, 0, 319, 386, 349, 272,
	348, 377, 414, 413, 281, 440, 446, 447, 537, 0,
	452, 617, 618, 619, 461, 466, 467, 468, 470, 471,
	472, 473, 538, 555, 522, 492, 454, 546, 489, 493,
	494, 558, 0, 0, 0, 445, 338, 339, 0, 317,
	265, 266, 612, 303, 368, 560, 593, 485, 0, 547,
	486, 495, 295, 519, 531, 530, 364, 444, 0, 542,
	545, 474, 611, 0, 539, 554, 615, 553, 608, 374,
	0, 395, 551, 498, 0, 543, 517, 0, 544, 513,
	548, 0, 487, 0, 402, 426, 438, 455, 458, 488,
	573, 574, 575, 270, 457, 577, 578, 579, 580, 581,
	582, 583, 576, 429, 520, 497, 523, 437, 500, 499,
	0, 0, 534, 453, 535, 536, 358, 359, 360, 361,
	321, 561, 288, 456, 384, 0, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 526, 527, 524, 620, 0,
	584, 585, 0, 0, 450, 451, 316, 323, 469, 325,
	287, 373, 318, 435, 332, 0, 462, 528, 463, 587,
	590, 588, 589, 365, 328, 329, 399, 333, 343, 387,
	434, 371, 392, 285, 425, 400, 347, 514, 541, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	254, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 569, 568, 567, 566, 565,
	564, 563, 562, 0, 0, 511, 412, 297, 259, 293,
	294, 301, 609, 606, 416, 610, 0, 267, 491, 341,
	0, 382, 315, 556, 557, 0, 0, 215, 216, 217,
	218, 219, 220, 221, 222, 260, 223, 224, 225, 226,
	227, 228, 229, 232, 233, 234, 235, 236, 237, 238,
	239, 559, 230, 231, 240, 241, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 0, 0,
	0, 261, 262, 263, 264, 0, 0, 255, 256, 257,
	258, 0, 0, 0, 441, 442, 443, 465, 427, 490,
	607, 0, 0, 0, 0, 0, 0, 0, 540, 552,
	586, 0, 595, 596, 598, 600, 599, 602, 0, 613,
	481, 482, 614, 480, 592, 370, 0, 496, 529, 518,
	601, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 310, 0, 0, 340, 533, 515, 525, 516,
	501, 502, 503, 510, 320, 504, 505, 506, 475, 507,
	476, 508, 509, 0, 532, 483, 401, 354, 550, 549,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3385, 0, 0, 204, 0, 0,
	0, 0, 0, 0, 283, 205, 477, 597, 479, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 273, 406, 423, 284, 397, 436, 289, 404, 279,
	369, 393, 0, 0, 275, 421, 403, 351, 330, 331,
	274, 0, 388, 308, 322, 305, 367, 0, 420, 448,
	304, 439, 0, 431, 277, 0, 430, 366, 417, 422,
	352, 346, 276, 419, 350, 345, 334, 312, 464, 335,
	336, 326, 378, 344, 379, 327, 356, 355, 357, 0,
	0, 0, 0, 0, 459, 460, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 591, 0,
	0, 594, 0, 433, 0, 0, 0, 0, 0, 0,
	405, 0, 0, 337, 0, 0, 0, 449, 0, 391,
	372, 616, 0, 0, 389, 342, 418, 380, 424, 407,
	432, 385, 381, 268, 408, 307, 353, 280, 282, 302,
	309, 311, 313, 314, 362, 363, 375, 396, 409, 410,
	411, 306, 290, 390, 291, 324, 292, 269, 298, 296,
	299, 398, 300, 271, 376, 415, 0, 319, 386, 349,
	272, 348, 377, 414, 413, 281, 440, 446, 447, 537,
	0, 452, 617, 618, 619, 461, 466, 467, 468, 470,
	471, 472, 473, 538, 555, 522, 492, 454, 546, 489,
	493, 494, 558, 0, 0, 0, 445, 338, 339, 0,
	317, 265, 266, 612, 303, 368, 560, 593, 485, 0,
	547, 486, 495, 295, 519, 531, 530, 364, 444, 0,
	542, 545, 474, 611, 0, 539, 554, 615, 553, 608,
	374, 0, 395, 551, 498, 0, 543, 517, 0, 544,
	513, 548, 0, 487, 0, 402, 426, 438, 455, 458,
	488, 573, 574, 575, 270, 457, 577, 578, 579, 580,
	581, 582, 583, 576, 429, 520, 497, 523, 437, 500,
	499, 0, 0, 534, 453, 535, 536, 358, 359, 360,
	361, 321, 561, 288, 456, 384, 0, 521, 0, 0,
	0, 0, 0, 0, 0, 0, 526, 527, 524, 620,
	0, 584, 585, 0, 0, 450, 451, 316, 323, 469,
	325, 287, 373, 318, 435, 332, 0, 462, 528, 463,
	587, 590, 588, 589, 365, 328, 329, 399, 333, 343,
	387, 434, 371, 392, 285, 425, 400, 347, 514, 541,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 254, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 569, 568, 567, 566,
	565, 564, 563, 562, 0, 0, 511, 412, 297, 259,
	293, 294, 301, 609, 606, 416, 610, 0, 267, 491,
	341, 0, 382, 315, 556, 557, 0, 0, 215, 216,
	217, 218, 219, 220, 221, 222, 260, 223, 224, 225,
	226, 227, 228, 229, 232, 233, 234, 235, 236, 237,
	238, 239, 559, 230, 231, 240, 241, 242, 243, 244,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 0,
	0, 0, 261, 262, 263, 264, 0, 0, 255, 256,
	257, 258, 0, 0, 0, 441, 442, 443, 465, 427,
	490, 607, 0, 0, 0, 0, 0, 0, 0, 540,
	552, 586, 0, 595, 596, 598, 600, 599, 602, 0,
	613, 481, 482, 614, 480, 592, 370, 0, 496, 529,
	518, 601, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 310, 0, 0, 340, 533, 515, 525,
	516, 501, 502, 503, 510, 320, 504, 505, 506, 475,
	507, 476, 508, 509, 0, 532, 483, 401, 354, 550,
	549, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3550, 0, 204, 0,
	0, 0, 0, 0, 0, 283, 205, 477, 597, 479,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 406, 423, 284, 397, 436, 289, 404,
	279, 369, 393, 0, 0, 275, 421, 403, 351, 330,
	331, 274, 0, 388, 308, 322, 305, 367, 0, 420,
	448, 304, 439, 0, 431, 277, 0, 430, 366, 417,
	422, 352, 346, 276, 419, 350, 345, 334, 312, 464,
	335, 336, 326, 378, 344, 379, 327, 356, 355, 357,
	0, 0, 0, 0, 0, 459, 460, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 591,
	0, 0, 594, 0, 433, 0, 0, 0, 0, 0,
	0, 405, 0, 0, 337, 0, 0, 0, 449, 0,
	391, 372, 616, 0, 0, 389, 342, 418, 380, 424,
	407, 432, 385, 381, 268, 408, 307, 353, 280, 282,
	302, 309, 311, 313, 314, 362, 363, 375, 396, 409,
	410, 411, 306, 290, 390, 291, 324, 292, 269, 298,
	296, 299, 398, 300, 271, 376, 415, 0, 319, 386,
	349, 272, 348, 377, 414, 413, 281, 440, 446, 447,
	537, 0, 452, 617, 618, 619, 461, 466, 467, 468,
	470, 471, 472, 473, 538, 555, 522, 492, 454, 546,
	489, 493, 494, 558, 0, 0, 0, 445, 338, 339,
	0, 317, 265, 266, 612, 303, 368, 560, 593, 485,
	0, 547, 486, 495, 295, 519, 531, 530, 364, 444,
	0, 542, 545, 474, 611, 0, 539, 554, 615, 553,
	608, 374, 0, 395, 551, 498, 0, 543, 517, 0,
	544, 513, 548, 0, 487, 0, 402, 426, 438, 455,
	458, 488, 573, 574, 575, 270, 457, 577, 578, 579,
	580, 581, 582, 583, 576, 429, 520, 497, 523, 437,
	500, 499, 0, 0, 534, 453, 535, 536, 358, 359,
	360, 361, 321, 561, 288, 456, 384, 0, 521, 0,
	0, 0, 0, 0, 0, 0, 0, 526, 527, 524,
	620, 0, 584, 585, 0, 0, 450, 451, 316, 323,
	469, 325, 287, 373, 318, 435, 332, 0, 462, 528,
	463, 587, 590, 588, 589, 365, 328, 329, 399, 333,
	343, 387, 434, 371, 392, 285, 425, 400, 347, 514,
	541, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 254, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 569, 568, 567,
	566, 565, 564, 563, 562, 0, 0, 511, 412, 297,
	259, 293, 294, 301, 609, 606, 416, 610, 0, 267,
	491, 341, 0, 382, 315, 556, 557, 0, 0, 215,
	216, 217, 218, 219, 220, 221, 222, 260, 223, 224,
	225, 226, 227, 228, 229, 232, 233, 234, 235, 236,
	237, 238, 239, 559, 230, 231, 240, 241, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	0, 0, 0, 261, 262, 263, 264, 0, 0, 255,
	256, 257, 258, 0, 0, 0, 441, 442, 443, 465,
	427, 490, 607, 0, 0, 0, 0, 0, 0, 0,
	540, 552, 586, 0, 595, 596, 598, 600, 599, 602,
	0, 613, 481, 482, 614, 480, 592, 370, 0, 496,
	529, 518, 601, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 310, 0, 0, 340, 533, 515,
	525, 516, 501, 502, 503, 510, 320, 504, 505, 506,
	475, 507, 476, 508, 509, 0, 532, 483, 401, 354,
	550, 549, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 0, 0, 0, 0, 283, 205, 477, 597,
	479, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 273, 406, 423, 284, 397, 436, 289,
	404, 279, 369, 393, 0, 0, 275, 421, 403, 351,
	330, 331, 274, 0, 388, 308, 322, 305, 367, 0,
	420, 448, 304, 439, 0, 431, 277, 0, 430, 366,
	417, 422, 352, 346, 276, 419, 350, 345, 334, 312,
	464, 335, 336, 326, 378, 344, 379, 327, 356, 355,
	357, 0, 0, 0, 0, 0, 459, 460, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	591, 0, 0, 594, 0, 433, 0, 0, 0, 3473,
	0, 0, 405, 0, 0, 337, 0, 0, 0, 449,
	0, 391, 372, 616, 0, 0, 389, 342, 418, 380,
	424, 407, 432, 385, 381, 268, 408, 307, 353, 280,
	282, 302, 309, 311, 313, 314, 362, 363, 375, 396,
	409, 410, 411, 306, 290, 390, 291, 324, 292, 269,
	298, 296, 299, 398, 300, 271, 376, 415, 0, 319,
	386, 349, 272, 348, 377, 414, 413, 281, 440, 446,
	447, 537, 0, 452, 617, 618, 619, 461, 466, 467,
	468, 470, 471, 472, 473, 538, 555, 522, 492, 454,
	546, 489, 493, 494, 558, 0, 0, 0, 445, 338,
	339, 0, 317, 265, 266, 612, 303, 368, 560, 593,
	485, 0, 547, 486, 495, 295, 519, 531, 530, 364,
	444, 0, 542, 545, 474, 611, 0, 539, 554, 615,
	553, 608, 374, 0, 395, 551, 498, 0, 543, 517,
	0, 544, 513, 548, 0, 487, 0, 402, 426, 438,
	455, 458, 488, 573, 574, 575, 270, 457, 577, 578,
	579, 580, 581, 582, 583, 576, 429, 520, 497, 523,
	437, 500, 499, 0, 0, 534, 453, 535, 536, 358,
	359, 360, 361, 321, 561, 288, 456, 384, 0, 521,
	0, 0, 0, 0, 0, 0, 0, 0, 526, 527,
	524, 620, 0, 584, 585, 0, 0, 450, 451, 316,
	323, 469, 325, 287, 373, 318, 435, 332, 0, 462,
	528, 463, 587, 590, 588, 589, 365, 328, 329, 399,
	333, 343, 387, 434, 371, 392, 285, 425, 400, 347,
	514, 541, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 254, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 569, 568,
	567, 566, 565, 564, 563, 562, 0, 0, 511, 412,
	297, 259, 293, 294, 301, 609, 606, 416, 610, 0,
	267, 491, 341, 0, 382, 315, 556, 557, 0, 0,
	215, 216, 217, 218, 219, 220, 221, 222, 260, 223,
	224, 225, 226, 227, 228, 229, 232, 233, 234, 235,
	236, 237, 238, 239, 559, 230, 231, 240, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 0, 0, 0, 261, 262, 263, 264, 0, 0,
	255, 256, 257, 258, 0, 0, 0, 441, 442, 443,
	465, 427, 490, 607, 0, 0, 0, 0, 0, 0,
	0, 540, 552, 586, 0, 595, 596, 598, 600, 599,
	602, 0, 613, 481, 482, 614, 480, 592, 370, 0,
	496, 529, 518, 601, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 310, 0, 0, 340, 533,
	515, 525, 516, 501, 502, 503, 510, 320, 504, 505,
	506, 475, 507, 476, 508, 509, 0, 532, 483, 401,
	354, 550, 549, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 0, 0, 3011, 0, 0, 0, 283, 205, 477,
	597, 479, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 286, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 406, 423, 284, 397, 436,
	289, 404, 279, 369, 393, 0, 0, 275, 421, 403,
	351, 330, 331, 274, 0, 388, 308, 322, 305, 367,
	0, 420, 448, 304, 439, 0, 431, 277, 0, 430,
	366, 417, 422, 352, 346, 276, 419, 350, 345, 334,
	312, 464, 335, 336, 326, 378, 344, 379, 327, 356,
	355, 357, 0, 0, 0, 0, 0, 459, 460, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 591, 0, 0, 594, 0, 433, 0, 0, 0,
	0, 0, 0, 405, 0, 0, 337, 0, 0, 0,
	449, 0, 391, 372, 616, 0, 0, 389, 342, 418,
	380, 424, 407, 432, 385, 381, 268, 408, 307, 353,
	280, 282, 302, 309, 311, 313, 314, 362, 363, 375,
	396, 409, 410, 411, 306, 290, 390, 291, 324, 292,
	269, 298, 296, 299, 398, 300, 271, 376, 415, 0,
	319, 386, 349, 272, 348, 377, 414, 413, 281, 440,
	446, 447, 537, 0, 452, 617, 618, 619, 461, 466,
	467, 468, 470, 471, 472, 473, 538, 555, 522, 492,
	454, 546, 489, 493, 494, 558, 0, 0, 0, 445,
	338, 339, 0, 317, 265, 266, 612, 303, 368, 560,
	593, 485, 0, 547, 486, 495, 295, 519, 531, 530,
	364, 444, 0, 542, 545, 474, 611, 0, 539, 554,
	615, 553, 608, 374, 0, 395, 551, 498, 0, 543,
	517, 0, 544, 513, 548, 0, 487, 0, 402, 426,
	438, 455, 458, 488, 573, 574, 575, 270, 457, 577,
	578, 579, 580, 581, 582, 583, 576, 429, 520, 497,
	523, 437, 500, 499, 0, 0, 534, 453, 535, 536,
	358, 359, 360, 361, 321, 561, 288, 456, 384, 0,
	521, 0, 0, 0, 0, 0, 0, 0, 0, 526,
	527, 524, 620, 0, 584, 585, 0, 0, 450, 451,
	316, 323, 469, 325, 287, 373, 318, 435, 332, 0,
	462, 528, 463, 587, 590, 588, 589, 365, 328, 329,
	399, 333, 343, 387, 434, 371, 392, 285, 425, 400,
	347, 514, 541, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 254, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 569,
	568, 567, 566, 565, 564, 563, 562, 0, 0, 511,
	412, 297, 259, 293, 294, 301, 609, 606, 416, 610,
	0, 267, 491, 341, 0, 382, 315, 556, 557, 0,
	0, 215, 216, 217, 218, 219, 220, 221, 222, 260,
	223, 224, 225, 226, 227, 228, 229, 232, 233, 234,
	235, 236, 237, 238, 239, 559, 230, 231, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 0, 0, 0, 261, 262, 263, 264, 0,
	0, 255, 256, 257, 258, 0, 0, 0, 441, 442,
	443, 465, 427, 490, 607, 0, 0, 0, 0, 0,
	0, 0, 540, 552, 586, 0, 595, 596, 598, 600,
	599, 602, 0, 613, 481, 482, 614, 480, 592, 370,
	0, 496, 529, 518, 601, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 310, 0, 0, 340,
	533, 515, 525, 516, 501, 502, 503, 510, 320, 504,
	505, 506, 475, 507, 476, 508, 509, 0, 532, 483,
	401, 354, 550, 549, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 0, 0, 0, 0, 0, 283, 205,
	477, 597, 479, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 286, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3029,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 406, 423, 284, 397,
	436, 289, 404, 279, 369, 393, 0, 0, 275, 421,
	403, 351, 330, 331, 274, 0, 388, 308, 322, 305,
	367, 0, 420, 448, 304, 439, 0, 431, 277, 0,
	430, 366, 417, 422, 352, 346, 276, 419, 350, 345,
	334, 312, 464, 335, 336, 326, 378, 344, 379, 327,
	356, 355, 357, 0, 0, 0, 0, 0, 459, 460,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 591, 0, 0, 594, 0, 433, 0, 0,
	0, 0, 0, 0, 405, 0, 0, 337, 0, 0,
	0, 449, 0, 391, 372, 616, 0, 0, 389, 342,
	418, 380, 424, 407, 432, 385, 381, 268, 408, 307,
	353, 280, 282, 302, 309, 311, 313, 314, 362, 363,
	375, 396, 409, 410, 411, 306, 290, 390, 291, 324,
	292, 269, 298, 296, 299, 398, 300, 271, 376, 415,
	0, 319, 386, 349, 272, 348, 377, 414, 413, 281,
	440, 446, 447, 537, 0, 452, 617, 618, 619, 461,
	466, 467, 468, 470, 471, 472, 473, 538, 555, 522,
	492, 454, 546, 489, 493, 494, 558, 0, 0, 0,
	445, 338, 339, 0, 317, 265, 266, 612, 303, 368,
	560, 593, 485, 0, 547, 486, 495, 295, 519, 531,
	530, 364, 444, 0, 542, 545, 474, 611, 0, 539,
	554, 615, 553, 608, 374, 0, 395, 551, 498, 0,
	543, 517, 0, 544, 513, 548, 0, 487, 0, 402,
	426, 438, 455, 458, 488, 573, 574, 575, 270, 457,
	577, 578, 579, 580, 581, 582, 583, 576, 429, 520,
	497, 523, 437, 500, 499, 0, 0, 534, 453, 535,
	536, 358, 359, 360, 361, 321, 561, 288, 456, 384,
	0, 521, 0, 0, 0, 0, 0, 0, 0, 0,
	526, 527, 524, 620, 0, 584, 585, 0, 0, 450,
	451, 316, 323, 469, 325, 287, 373, 318, 435, 332,
	0, 462, 528, 463, 587, 590, 588, 589, 365, 328,
	329, 399, 333, 343, 387, 434, 371, 392, 285, 425,
	400, 347, 514, 541, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 254, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	569, 568, 567, 566, 565, 564, 563, 562, 0, 0,
	511, 412, 297, 259, 293, 294, 301, 609, 606, 416,
	610, 0, 267, 491, 341, 0, 382, 315, 556, 557,
	0, 0, 215, 216, 217, 218, 219, 220, 221, 222,
	260, 223, 224, 225, 226, 227, 228, 229, 232, 233,
	234, 235, 236, 237, 238, 239, 559, 230, 231, 240,
	241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 0, 0, 0, 261, 262, 263, 264,
	0, 0, 255, 256, 257, 258, 0, 0, 0, 441,
	442, 443, 465, 427, 490, 607, 0, 0, 0, 0,
	0, 0, 0, 540, 552, 586, 0, 595, 596, 598,
	600, 599, 602, 0, 613, 481, 482, 614, 480, 592,
	370, 0, 496, 529, 518, 601, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 310, 0, 0,
	340, 533, 515, 525, 516, 501, 502, 503, 510, 320,
	504, 505, 506, 475, 507, 476, 508, 509, 0, 532,
	483, 401, 354, 550, 549, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1931,
	0, 0, 204, 0, 0, 0, 0, 0, 0, 283,
	205, 477, 597, 479, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 286, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 273, 406, 423, 284,
	397, 436, 289, 404, 279, 369, 393, 0, 0, 275,
	421, 403, 351, 330, 331, 274, 0, 388, 308, 322,
	305, 367, 0, 420, 448, 304, 439, 0, 431, 277,
	0, 430, 366, 417, 422, 352, 346, 276, 419, 350,
	345, 334, 312, 464, 335, 336, 326, 378, 344, 379,
	327, 356, 355, 357, 0, 0, 0, 0, 0, 459,
	460, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 591, 0, 0, 594, 0, 433, 0,
	0, 0, 0, 0, 0, 405, 0, 0, 337, 0,
	0, 0, 449, 0, 391, 372, 616, 0, 0, 389,
	342, 418, 380, 424, 407, 432, 385, 381, 268, 408,
	307, 353, 280, 282, 302, 309, 311, 313, 314, 362,
	363, 375, 396, 409, 410, 411, 306, 290, 390, 291,
	324, 292, 269, 298, 296, 299, 398, 300, 271, 376,
	415, 0, 319, 386, 349, 272, 348, 377, 414, 413,
	281, 440, 446, 447, 537, 0, 452, 617, 618, 619,
	461, 466, 467, 468, 470, 471, 472, 473, 538, 555,
	522, 492, 454, 546, 489, 493, 494, 558, 0, 0,
	0, 445, 338, 339, 0, 317, 265, 266, 612, 303,
	368, 560, 593, 485, 0, 547, 486, 495, 295, 519,
	531, 530, 364, 444, 0, 542, 545, 474, 611, 0,
	539, 554, 615, 553, 608, 374, 0, 395, 551, 498,
	0, 543, 517, 0, 544, 513, 548, 0, 487, 0,
	402, 426, 438, 455, 458, 488, 573, 574, 575, 270,
	457, 577, 578, 579, 580, 581, 582, 583, 576, 429,
	520, 497, 523, 437, 500, 499, 0, 0, 534, 453,
	535, 536, 358, 359, 360, 361, 321, 561, 288, 456,
	384, 0, 521, 0, 0, 0, 0, 0, 0, 0,
	0, 526, 527, 524, 620, 0, 584, 585, 0, 0,
	450, 451, 316, 323, 469, 325, 287, 373, 318, 435,
	332, 0, 462, 528, 463, 587, 590, 588, 589, 365,
	328, 329, 399, 333, 343, 387, 434, 371, 392, 285,
	425, 400, 347, 514, 541, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 254, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 569, 568, 567, 566, 565, 564, 563, 562, 0,
	0, 511, 412, 297, 259, 293, 294, 301, 609, 606,
	416, 610, 0, 267, 491, 341, 0, 382, 315, 556,
	557, 0, 0, 215, 216, 217, 218, 219, 220, 221,
	222, 260, 223, 224, 225, 226, 227, 228, 229, 232,
	233, 234, 235, 236, 237, 238, 239, 559, 230, 231,
	240, 241, 242, 243, 244, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 0, 0, 0, 261, 262, 263,
	264, 0, 0, 255, 256, 257, 258, 0, 0, 0,
	441, 442, 443, 465, 427, 490, 607, 0, 0, 0,
	0, 0, 0, 0, 540, 552, 586, 0, 595, 596,
	598, 600, 599, 602, 0, 613, 481, 482, 614, 480,
	592, 370, 0, 496, 529, 518, 601, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 310, 0,
	0, 340, 533, 515, 525, 516, 501, 502, 503, 510,
	320, 504, 505, 506, 475, 507, 476, 508, 509, 0,
	532, 483, 401, 354, 550, 549, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 0, 0, 0, 0, 0,
	283, 205, 477, 597, 479, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 286, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3130, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 273, 406, 423,
	284, 397, 436, 289, 404, 279, 369, 393, 0, 0,
	275, 421, 403, 351, 330, 331, 274, 0, 388, 308,
	322, 305, 367, 0, 420, 448, 304, 439, 0, 431,
	277, 0, 430, 366, 417, 422, 352, 346, 276, 419,
	350, 345, 334, 312, 464, 335, 336, 326, 378, 344,
	379, 327, 356, 355, 357, 0, 0, 0, 0, 0,
	459, 460, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 591, 0, 0, 594, 0, 433,
	0, 0, 0, 0, 0, 0, 405, 0, 0, 337,
	0, 0, 0, 449, 0, 391, 372, 616, 0, 0,
	389, 342, 418, 380, 424, 407, 432, 385, 381, 268,
	408, 307, 353, 280, 282, 302, 309, 311, 313, 314,
	362, 363, 375, 396, 409, 410, 411, 306, 290, 390,
	291, 324, 292, 269, 298, 296, 299, 398, 300, 271,
	376, 415, 0, 319, 386, 349, 272, 348, 377, 414,
	413, 281, 440, 446, 447, 537, 0, 452, 617, 618,
	619, 461, 466, 467, 468, 470, 471, 472, 473, 538,
	555, 522, 492, 454, 546, 489, 493, 494, 558, 0,
	0, 0, 445, 338, 339, 0, 317, 265, 266, 612,
	303, 368, 560, 593, 485, 0, 547, 486, 495, 295,
	519, 531, 530, 364, 444, 0, 542, 545, 474, 611,
	0, 539, 554, 615, 553, 608, 374, 0, 395, 551,
	498, 0, 543, 517, 0, 544, 513, 548, 0, 487,
	0, 402, 426, 438, 455, 458, 488, 573, 574, 575,
	270, 457, 577, 578, 579, 580, 581, 582, 583, 576,
	429, 520, 497, 523, 437, 500, 499, 0, 0, 534,
	453, 535, 536, 358, 359, 360, 361, 321, 561, 288,
	456, 384, 0, 521, 0, 0, 0, 0, 0, 0,
	0, 0, 526, 527, 524, 620, 0, 584, 585, 0,
	0, 450, 451, 316, 323, 469, 325, 287, 373, 318,
	435, 332, 0, 462, 528, 463, 587, 590, 588, 589,
	365, 328, 329, 399, 333, 343, 387, 434, 371, 392,
	285, 425, 400, 347, 514, 541, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 254, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 569, 568, 567, 566, 565, 564, 563, 562,
	0, 0, 511, 412, 297, 259, 293, 294, 301, 609,
	606, 416, 610, 0, 267, 491, 341, 0, 382, 315,
	556, 557, 0, 0, 215, 216, 217, 218, 219, 220,
	221, 222, 260, 223, 224, 225, 226, 227, 228, 229,
	232, 233, 234, 235, 236, 237, 238, 239, 559, 230,
	231, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 0, 0, 0, 261, 262,
	263, 264, 0, 0, 255, 256, 257, 258, 0, 0,
	0, 441, 442, 443, 465, 427, 490, 607, 0, 0,
	0, 0, 0, 0, 0, 540, 552, 586, 0, 595,
	596, 598, 600, 599, 602, 0, 613, 481, 482, 614,
	480, 592, 370, 0, 496, 529, 518, 601, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 310,
	0, 0, 340, 533, 515, 525, 516, 501, 502, 503,
	510, 320, 504, 505, 506, 475, 507, 476, 508, 509,
	0, 532, 483, 401, 354, 550, 549, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 0, 0, 0,
	0, 283, 205, 477, 597, 479, 478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2886, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 273, 406,
	423, 284, 397, 436, 289, 404, 279, 369, 393, 0,
	0, 275, 421, 403, 351, 330, 331, 274, 0, 388,
	308, 322, 305, 367, 0, 420, 448, 304, 439, 0,
	431, 277, 0, 430, 366, 417, 422, 352, 346, 276,
	419, 350, 345, 334, 312, 464, 335, 336, 326, 378,
	344, 379, 327, 356, 355, 357, 0, 0, 0, 0,
	0, 459, 460, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 591, 0, 0, 594, 0,
	433, 0, 0, 0, 0, 0, 0, 405, 0, 0,
	337, 0, 0, 0, 449, 0, 391, 372, 616, 0,
	0, 389, 342, 418, 380, 424, 407, 432, 385, 381,
	268, 408, 307, 353, 280, 282, 302, 309, 311, 313,
	314, 362, 363, 375, 396, 409, 410, 411, 306, 290,
	390, 291, 324, 292, 269, 298, 296, 299, 398, 300,
	271, 376, 415, 0, 319, 386, 349, 272, 348, 377,
	414, 413, 281, 440, 446, 447, 537, 0, 452, 617,
	618, 619, 461, 466, 467, 468, 470, 471, 472, 473,
	538, 555, 522, 492, 454, 546, 489, 493, 494, 558,
	0, 0, 0, 445, 338, 339, 0, 317, 265, 266,
	612, 303, 368, 560, 593, 485, 0, 547, 486, 495,
	295, 519, 531, 530, 364, 444, 0, 542, 545, 474,
	611, 0, 539, 554, 615, 553, 608, 374, 0, 395,
	551, 498, 0, 543, 517, 0, 544, 513, 548, 0,
	487, 0, 402, 426, 438, 455, 458, 488, 573, 574,
	575, 270, 457, 577, 578, 579, 580, 581, 582, 583,
	576, 429, 520, 497, 523, 437, 500, 499, 0, 0,
	534, 453, 535, 536, 358, 359, 360, 361, 321, 561,
	288, 456, 384, 0, 521, 0, 0, 0, 0, 0,
	0, 0, 0, 526, 527, 524, 620, 0, 584, 585,
	0, 0, 450, 451, 316, 323, 469, 325, 287, 373,
	318, 435, 332, 0, 462, 528, 463, 587, 590, 588,
	589, 365, 328, 329, 399, 333, 343, 387, 434, 371,
	392, 285, 425, 400, 347, 514, 541, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 254, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 569, 568, 567, 566, 565, 564, 563,
	562, 0, 0, 511, 412, 297, 259, 293, 294, 301,
	609, 606, 416, 610, 0, 267, 491, 341, 0, 382,
	315, 556, 557, 0, 0, 215, 216, 217, 218, 219,
	220, 221, 222, 260, 223, 224, 225, 226, 227, 228,
	229, 232, 233, 234, 235, 236, 237, 238, 239, 559,
	230, 231, 240, 241, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 0, 0, 0, 261,
	262, 263, 264, 0, 0, 255, 256, 257, 258, 0,
	0, 0, 441, 442, 443, 465, 427, 490, 607, 0,
	0, 0, 0, 0, 0, 0, 540, 552, 586, 0,
	595, 596, 598, 600, 599, 602, 0, 613, 481, 482,
	614, 480, 592, 370, 0, 496, 529, 518, 601, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	310, 0, 0, 340, 533, 515, 525, 516, 501, 502,
	503, 510, 320, 504, 505, 506, 475, 507, 476, 508,
	509, 0, 532, 483, 401, 354, 550, 549, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 1448, 0,
	0, 0, 283, 205, 477, 597, 479, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 273,
	406, 423, 284, 397, 436, 289, 404, 279, 369, 393,
	0, 0, 275, 421, 403, 351, 330, 331, 274, 0,
	388, 308, 322, 305, 367, 0, 420, 448, 304, 439,
	0, 431, 277, 0, 430, 366, 417, 422, 352, 346,
	276, 419, 350, 345, 334, 312, 464, 335, 336, 326,
	378, 344, 379, 327, 356, 355, 357, 0, 0, 0,
	0, 0, 459, 460, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 591, 0, 0, 594,
	0, 433, 0, 0, 0, 0, 0, 0, 405, 0,
	0, 337, 0, 0, 0, 449, 0, 391, 372, 616,
	0, 0, 389, 342, 418, 380, 424, 407, 432, 385,
	381, 268, 408, 307, 353, 280, 282, 302, 309, 311,
	313, 314, 362, 363, 375, 396, 409, 410, 411, 306,
	290, 390, 291, 324, 292, 269, 298, 296, 299, 398,
	300, 271, 376, 415, 0, 319, 386, 349, 272, 348,
	377, 414, 413, 281, 440, 446, 447, 537, 0, 452,
	617, 618, 619, 461, 466, 467, 468, 470, 471, 472,
	473, 538, 555, 522, 492, 454, 546, 489, 493, 494,
	558, 0, 0, 0, 445, 338, 339, 0, 317, 265,
	266, 612, 303, 368, 560, 593, 485, 0, 547, 486,
	495, 295, 519, 531, 530, 364, 444, 0, 542, 545,
	474, 611, 0, 539, 554, 615, 553, 608, 374, 0,
	395, 551, 498, 0, 543, 517, 0, 544, 513, 548,
	0, 487, 0, 402, 426, 438, 455, 458, 488, 573,
	574, 575, 270, 457, 577, 578, 579, 580, 581, 582,
	583, 576, 429, 520, 497, 523, 437, 500, 499, 0,
	0, 534, 453, 535, 536, 358, 359, 360, 361, 321,
	561, 288, 456, 384, 0, 521, 0, 0, 0, 0,
	0, 0, 0, 0, 526, 527, 524, 620, 0, 584,
	585, 0, 0, 450, 451, 316, 323, 469, 325, 287,
	373, 318, 435, 332, 0, 462, 528, 463, 587, 590,
	588, 589, 365, 328, 329, 399, 333, 343, 387, 434,
	371, 392, 285, 425, 400, 347, 514, 541, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 254,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 569, 568, 567, 566, 565, 564,
	563, 562, 0, 0, 511, 412, 297, 259, 293, 294,
	301, 609, 606, 416, 610, 0, 267, 491, 341, 0,
	382, 315, 556, 557, 0, 0, 215, 216, 217, 218,
	219, 220, 221, 222, 260, 223, 224, 225, 226, 227,
	228, 229, 232, 233, 234, 235, 236, 237, 238, 239,
	559, 230, 231, 240, 241, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 0, 0, 0,
	261, 262, 263, 264, 0, 0, 255, 256, 257, 258,
	0, 0, 0, 441, 442, 443, 465, 427, 490, 607,
	0, 0, 0, 0, 0, 0, 0, 540, 552, 586,
	0, 595, 596, 598, 600, 599, 602, 0, 613, 481,
	482, 614, 480, 592, 370, 0, 496, 529, 518, 601,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 310, 0, 0, 340, 533, 515, 525, 516, 501,
	502, 503, 510, 320, 504, 505, 506, 475, 507, 476,
	508, 509, 0, 532, 483, 401, 354, 550, 549, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 2363,
	0, 0, 0, 283, 205, 477, 597, 479, 478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	273, 406, 423, 284, 397, 436, 289, 404, 279, 369,
	393, 0, 0, 275, 421, 403, 351, 330, 331, 274,
	0, 388, 308, 322, 305, 367, 0, 420, 448, 304,
	439, 0, 431, 277, 0, 430, 366, 417, 422, 352,
	346, 276, 419, 350, 345, 334, 312, 464, 335, 336,
	326, 378, 344, 379, 327, 356, 355, 357, 0, 0,
	0, 0, 0, 459, 460, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 591, 0, 0,
	594, 0, 433, 0, 0, 0, 0, 0, 0, 405,
	0, 0, 337, 0, 0, 0, 449, 0, 391, 372,
	616, 0, 0, 389, 342, 418, 380, 424, 407, 432,
	385, 381, 268, 408, 307, 353, 280, 282, 302, 309,
	311, 313, 314, 362, 363, 375, 396, 409, 410, 411,
	306, 290, 390, 291, 324, 292, 269, 298, 296, 299,
	398, 300, 271, 376, 415, 0, 319, 386, 349, 272,
	348, 377, 414, 413, 281, 440, 446, 447, 537, 0,
	452, 617, 618, 619, 461, 466, 467, 468, 470, 471,
	472, 473, 538, 555, 522, 492, 454, 546, 489, 493,
	494, 558, 0, 0, 0, 445, 338, 339, 0, 317,
	265, 266, 612, 303, 368, 560, 593, 485, 0, 547,
	486, 495, 295, 519, 531, 530, 364, 444, 0, 542,
	545, 474, 611, 0, 539, 554, 615, 553, 608, 374,
	0, 395, 551, 498, 0, 543, 517, 0, 544, 513,
	548, 0, 487, 0, 402, 426, 438, 455, 458, 488,
	573, 574, 575, 270, 457, 577, 578, 579, 580, 581,
	582, 583, 576, 429, 520, 497, 523, 437, 500, 499,
	0, 0, 534, 453, 535, 536, 358, 359, 360, 361,
	321, 561, 288, 456, 384, 0, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 526, 527, 524, 620, 0,
	584, 585, 0, 0, 450, 451, 316, 323, 469, 325,
	287, 373, 318, 435, 332, 0, 462, 528, 463, 587,
	590, 588, 589, 365, 328, 329, 399, 333, 343, 387,
	434, 371, 392, 285, 425, 400, 347, 514, 541, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	254, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 569, 568, 567, 566, 565,
	564, 563, 562, 0, 0, 511, 412, 297, 259, 293,
	294, 301, 609, 606, 416, 610, 0, 267, 491, 341,
	0, 382, 315, 556, 557, 0, 0, 215, 216, 217,
	218, 219, 220, 221, 222, 260, 223, 224, 225, 226,
	227, 228, 229, 232, 233, 234, 235, 236, 237, 238,
	239, 559, 230, 231, 240, 241, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 0, 0,
	0, 261, 262, 263, 264, 0, 0, 255, 256, 257,
	258, 0, 0, 0, 441, 442, 443, 465, 427, 490,
	607, 0, 0, 0, 0, 0, 0, 0, 540, 552,
	586, 0, 595, 596, 598, 600, 599, 602, 0, 613,
	481, 482, 614, 480, 592, 370, 0, 496, 529, 518,
	601, 484, 0, 0, 2709, 0, 0, 0, 0, 0,
	0, 0, 310, 0, 0, 340, 533, 515, 525, 516,
	501, 502, 503, 510, 320, 504, 505, 506, 475, 507,
	476, 508, 509, 0, 532, 483, 401, 354, 550, 549,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 0, 0,
	0, 0, 0, 0, 283, 205, 477, 597, 479, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 273, 406, 423, 284, 397, 436, 289, 404, 279,
	369, 393, 0, 0, 275, 421, 403, 351, 330, 331,
	274, 0, 388, 308, 322, 305, 367, 0, 420, 448,
	304, 439, 0, 431, 277, 0, 430, 366, 417, 422,
	352, 346, 276, 419, 350, 345, 334, 312, 464, 335,
	336, 326, 378, 344, 379, 327, 356, 355, 357, 0,
	0, 0, 0, 0, 459, 460, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 591, 0,
	0, 594, 0, 433, 0, 0, 0, 0, 0, 0,
	405, 0, 0, 337, 0, 0, 0, 449, 0, 391,
	372, 616, 0, 0, 389, 342, 418, 380, 424, 407,
	432, 385, 381, 268, 408, 307, 353, 280, 282, 302,
	309, 311, 313, 314, 362, 363, 375, 396, 409, 410,
	411, 306, 290, 390, 291, 324, 292, 269, 298, 296,
	299, 398, 300, 271, 376, 415, 0, 319, 386, 349,
	272, 348, 377, 414, 413, 281, 440, 446, 447, 537,
	0, 452, 617, 618, 619, 461, 466, 467, 468, 470,
	471, 472, 473, 538, 555, 522, 492, 454, 546, 489,
	493, 494, 558, 0, 0, 0, 445, 338, 339, 0,
	317, 265, 266, 612, 303, 368, 560, 593, 485, 0,
	547, 486, 495, 295, 519, 531, 530, 364, 444, 0,
	542, 545, 474, 611, 0, 539, 554, 615, 553, 608,
	374, 0, 395, 551, 498, 0, 543, 517, 0, 544,
	513, 548, 0, 487, 0, 402, 426, 438, 455, 458,
	488, 573, 574, 575, 270, 457, 577, 578, 579, 580,
	581, 582, 583, 576, 429, 520, 497, 523, 437, 500,
	499, 0, 0, 534, 453, 535, 536, 358, 359, 360,
	361, 321, 561, 288, 456, 384, 0, 521, 0, 0,
	0, 0, 0, 0, 0, 0, 526, 527, 524, 620,
	0, 584, 585, 0, 0, 450, 451, 316, 323, 469,
	325, 287, 373, 318, 435, 332, 0, 462, 528, 463,
	587, 590, 588, 589, 365, 328, 329, 399, 333, 343,
	387, 434, 371, 392, 285, 425, 400, 347, 514, 541,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 254, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 569, 568, 567, 566,
	565, 564, 563, 562, 0, 0, 511, 412, 297, 259,
	293, 294, 301, 609, 606, 416, 610, 0, 267, 491,
	341, 0, 382, 315, 556, 557, 0, 0, 215, 216,
	217, 218, 219, 220, 221, 222, 260, 223, 224, 225,
	226, 227, 228, 229, 232, 233, 234, 235, 236, 237,
	238, 239, 559, 230, 231, 240, 241, 242, 243, 244,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 0,
	0, 0, 261, 262, 263, 264, 0, 0, 255, 256,
	257, 258, 0, 0, 0, 441, 442, 443, 465, 427,
	490, 607, 0, 0, 0, 0, 0, 0, 0, 540,
	552, 586, 0, 595, 596, 598, 600, 599, 602, 0,
	613, 481, 482, 614, 480, 592, 370, 0, 496, 529,
	518, 601, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 310, 0, 0, 340, 533, 515, 525,
	516, 501, 502, 503, 510, 320, 504, 505, 506, 475,
	507, 476, 508, 509, 0, 532, 483, 401, 354, 550,
	549, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 0, 0, 0, 0, 283, 205, 477, 597, 479,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2069, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 406, 423, 284, 397, 436, 289, 404,
	279, 369, 393, 0, 0, 275, 421, 403, 351, 330,
	331, 274, 0, 388, 308, 322, 305, 367, 0, 420,
	448, 304, 439, 0, 431, 277, 0, 430, 366, 417,
	422, 352, 346, 276, 419, 350, 345, 334, 312, 464,
	335, 336, 326, 378, 344, 379, 327, 356, 355, 357,
	0, 0, 0, 0, 0, 459, 460, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 591,
	0, 0, 594, 0, 433, 0, 0, 0, 0, 0,
	0, 405, 0, 0, 337, 0, 0, 0, 449, 0,
	391, 372, 616, 0, 0, 389, 342, 418, 380, 424,
	407, 432, 385, 381, 268, 408, 307, 353, 280, 282,
	302, 309, 311, 313, 314, 362, 363, 375, 396, 409,
	410, 411, 306, 290, 390, 291, 324, 292, 269, 298,
	296, 299, 398, 300, 271, 376, 415, 0, 319, 386,
	349, 272, 348, 377, 414, 413, 281, 440, 446, 447,
	537, 0, 452, 617, 618, 619, 461, 466, 467, 468,
	470, 471, 472, 473, 538, 555, 522, 492, 454, 546,
	489, 493, 494, 558, 0, 0, 0, 445, 338, 339,
	0, 317, 265, 266, 612, 303, 368, 560, 593, 485,
	0, 547, 486, 495, 295, 519, 531, 530, 364, 444,
	0, 542, 545, 474, 611, 0, 539, 554, 615, 553,
	608, 374, 0, 395, 551, 498, 0, 543, 517, 0,
	544, 513, 548, 0, 487, 0, 402, 426, 438, 455,
	458, 488, 573, 574, 575, 270, 457, 577, 578, 579,
	580, 581, 582, 583, 576, 429, 520, 497, 523, 437,
	500, 499, 0, 0, 534, 453, 535, 536, 358, 359,
	360, 361, 321, 561, 288, 456, 384, 0, 521, 0,
	0, 0, 0, 0, 0, 0, 0, 526, 527, 524,
	620, 0, 584, 585, 0, 0, 450, 451, 316, 323,
	469, 325, 287, 373, 318, 435, 332, 0, 462, 528,
	463, 587, 590, 588, 589, 365, 328, 329, 399, 333,
	343, 387, 434, 371, 392, 285, 425, 400, 347, 514,
	541, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 254, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 569, 568, 567,
	566, 565, 564, 563, 562, 0, 0, 511, 412, 297,
	259, 293, 294, 301, 609, 606, 416, 610, 0, 267,
	491, 341, 0, 382, 315, 556, 557, 0, 0, 215,
	216, 217, 218, 219, 220, 221, 222, 260, 223, 224,
	225, 226, 227, 228, 229, 232, 233, 234, 235, 236,
	237, 238, 239, 559, 230, 231, 240, 241, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	0, 0, 0, 261, 262, 263, 264, 0, 0, 255,
	256, 257, 258, 0, 0, 0, 441, 442, 443, 465,
	427, 490, 607, 0, 0, 0, 0, 0, 0, 0,
	540, 552, 586, 0, 595, 596, 598, 600, 599, 602,
	0, 613, 481, 482, 614, 480, 592, 370, 0, 496,
	529, 518, 601, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 310, 0, 0, 340, 533, 515,
	525, 516, 501, 502, 503, 510, 320, 504, 505, 506,
	475, 507, 476, 508, 509, 0, 532, 483, 401, 354,
	550, 549, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 0, 0, 0, 0, 283, 205, 477, 597,
	479, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2440, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 273, 406, 423, 284, 397, 436, 289,
	404, 279, 369, 393, 0, 0, 275, 421, 403, 351,
	330, 331, 274, 0, 388, 308, 322, 305, 367, 0,
	420, 448, 304, 439, 0, 431, 277, 0, 430, 366,
	417, 422, 352, 346, 276, 419, 350, 345, 334, 312,
	464, 335, 336, 326, 378, 344, 379, 327, 356, 355,
	357, 0, 0, 0, 0, 0, 459, 460, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	591, 0, 0, 594, 0, 433, 0, 0, 0, 0,
	0, 0, 405, 0, 0, 337, 0, 0, 0, 449,
	0, 391, 372, 616, 0, 0, 389, 342, 418, 380,
	424, 407, 432, 385, 381, 268, 408, 307, 353, 280,
	282, 302, 309, 311, 313, 314, 362, 363, 375, 396,
	409, 410, 411, 306, 290, 390, 291, 324, 292, 269,
	298, 296, 299, 398, 300, 271, 376, 415, 0, 319,
	386, 349, 272, 348, 377, 414, 413, 281, 440, 446,
	447, 537, 0, 452, 617, 618, 619, 461, 466, 467,
	468, 470, 471, 472, 473, 538, 555, 522, 492, 454,
	546, 489, 493, 494, 558, 0, 0, 0, 445, 338,
	339, 0, 317, 265, 266, 612, 303, 368, 560, 593,
	485, 0, 547, 486, 495, 295, 519, 531, 530, 364,
	444, 0, 542, 545, 474, 611, 0, 539, 554, 615,
	553, 608, 374, 0, 395, 551, 498, 0, 543, 517,
	0, 544, 513, 548, 0, 487, 0, 402, 426, 438,
	455, 458, 488, 573, 574, 575, 270, 457, 577, 578,
	579, 580, 581, 582, 583, 576, 429, 520, 497, 523,
	437, 500, 499, 0, 0, 534, 453, 535, 536, 358,
	359, 360, 361, 321, 561, 288, 456, 384, 0, 521,
	0, 0, 0, 0, 0, 0, 0, 0, 526, 527,
	524, 620, 0, 584, 585, 0, 0, 450, 451, 316,
	323, 469, 325, 287, 373, 318, 435, 332, 0, 462,
	528, 463, 587, 590, 588, 589, 365, 328, 329, 399,
	333, 343, 387, 434, 371, 392, 285, 425, 400, 347,
	514, 541, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 254, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 569, 568,
	567, 566, 565, 564, 563, 562, 0, 0, 511, 412,
	297, 259, 293, 294, 301, 609, 606, 416, 610, 0,
	267, 491, 341, 0, 382, 315, 556, 557, 0, 0,
	215, 216, 217, 218, 219, 220, 221, 222, 260, 223,
	224, 225, 226, 227, 228, 229, 232, 233, 234, 235,
	236, 237, 238, 239, 559, 230, 231, 240, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 0, 0, 0, 261, 262, 263, 264, 0, 0,
	255, 256, 257, 258, 0, 0, 0, 441, 442, 443,
	465, 427, 490, 607, 0, 0, 0, 0, 0, 0,
	0, 540, 552, 586, 0, 595, 596, 598, 600, 599,
	602, 0, 613, 481, 482, 614, 480, 592, 370, 0,
	496, 529, 518, 601, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 310, 0, 0, 340, 533,
	515, 525, 516, 501, 502, 503, 510, 320, 504, 505,
	506, 475, 507, 476, 508, 509, 0, 532, 483, 401,
	354, 550, 549, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 0, 0, 2438, 0, 0, 0, 283, 205, 477,
	597, 479, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 286, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 406, 423, 284, 397, 436,
	289, 404, 279, 369, 393, 0, 0, 275, 421, 403,
	351, 330, 331, 274, 0, 388, 308, 322, 305, 367,
	0, 420, 448, 304, 439, 0, 431, 277, 0, 430,
	366, 417, 422, 352, 346, 276, 419, 350, 345, 334,
	312, 464, 335, 336, 326, 378, 344, 379, 327, 356,
	355, 357, 0, 0, 0, 0, 0, 459, 460, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 591, 0, 0, 594, 0, 433, 0, 0, 0,
	0, 0, 0, 405, 0, 0, 337, 0, 0, 0,
	449, 0, 391, 372, 616, 0, 0, 389, 342, 418,
	380, 424, 407, 432, 385, 381, 268, 408, 307, 353,
	280, 282, 302, 309, 311, 313, 314, 362, 363, 375,
	396, 409, 410, 411, 306, 290, 390, 291, 324, 292,
	269, 298, 296, 299, 398, 300, 271, 376, 415, 0,
	319, 386, 349, 272, 348, 377, 414, 413, 281, 440,
	446, 447, 537, 0, 452, 617, 618, 619, 461, 466,
	467, 468, 470, 471, 472, 473, 538, 555, 522, 492,
	454, 546, 489, 493, 494, 558, 0, 0, 0, 445,
	338, 339, 0, 317, 265, 266, 612, 303, 368, 560,
	593, 485, 0, 547, 486, 495, 295, 519, 531, 530,
	364, 444, 0, 542, 545, 474, 611, 0, 539, 554,
	615, 553, 608, 374, 0, 395, 551, 498, 0, 543,
	517, 0, 544, 513, 548, 0, 487, 0, 402, 426,
	438, 455, 458, 488, 573, 574, 575, 270, 457, 577,
	578, 579, 580, 581, 582, 583, 576, 429, 520, 497,
	523, 437, 500, 499, 0, 0, 534, 453, 535, 536,
	358, 359, 360, 361, 321, 561, 288, 456, 384, 0,
	521, 0, 0, 0, 0, 0, 0, 0, 0, 526,
	527, 524, 620, 0, 584, 585, 0, 0, 450, 451,
	316, 323, 469, 325, 287, 373, 318, 435, 332, 0,
	462, 528, 463, 587, 590, 588, 589, 365, 328, 329,
	399, 333, 343, 387, 434, 371, 392, 285, 425, 400,
	347, 514, 541, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 254, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 569,
	568, 567, 566, 565, 564, 563, 562, 0, 0, 511,
	412, 297, 259, 293, 294, 301, 609, 606, 416, 610,
	0, 267, 491, 341, 0, 382, 315, 556, 557, 0,
	0, 215, 216, 217, 218, 219, 220, 221, 222, 260,
	223, 224, 225, 226, 227, 228, 229, 232, 233, 234,
	235, 236, 237, 238, 239, 559, 230, 231, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 0, 0, 0, 261, 262, 263, 264, 0,
	0, 255, 256, 257, 258, 0, 0, 0, 441, 442,
	443, 465, 427, 490, 607, 0, 0, 0, 0, 0,
	0, 0, 540, 552, 586, 0, 595, 596, 598, 600,
	599, 602, 0, 613, 481, 482, 614, 480, 592, 2224,
	0, 0, 0, 0, 0, 370, 0, 496, 529, 518,
	601, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 310, 0, 0, 340, 533, 515, 525, 516,
	501, 502, 503, 510, 320, 504, 505, 506, 475, 507,
	476, 508, 509, 0, 532, 483, 401, 354, 550, 549,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 0, 0,
	0, 0, 0, 0, 283, 205, 477, 597, 479, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 273, 406, 423, 284, 397, 436, 289, 404, 279,
	369, 393, 0, 0, 275, 421, 403, 351, 330, 331,
	274, 0, 388, 308, 322, 305, 367, 0, 420, 448,
	304, 439, 0, 431, 277, 0, 430, 366, 417, 422,
	352, 346, 276, 419, 350, 345, 334, 312, 464, 335,
	336, 326, 378, 344, 379, 327, 356, 355, 357, 0,
	0, 0, 0, 0, 459, 460, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 591, 0,
	0, 594, 0, 433, 0, 0, 0, 0, 0, 0,
	405, 0, 0, 337, 0, 0, 0, 449, 0, 391,
	372, 616, 0, 0, 389, 342, 418, 380, 424, 407,
	432, 385, 381, 268, 408, 307, 353, 280, 282, 302,
	309, 311, 313, 314, 362, 363, 375, 396, 409, 410,
	411, 306, 290, 390, 291, 324, 292, 269, 298, 296,
	299, 398, 300, 271, 376, 415, 0, 319, 386, 349,
	272, 348, 377, 414, 413, 281, 440, 446, 447, 537,
	0, 452, 617, 618, 619, 461, 466, 467, 468, 470,
	471, 472, 473, 538, 555, 522, 492, 454, 546, 489,
	493, 494, 558, 0, 0, 0, 445, 338, 339, 0,
	317, 265, 266, 612, 303, 368, 560, 593, 485, 0,
	547, 486, 495, 295, 519, 531, 530, 364, 444, 0,
	542, 545, 474, 611, 0, 539, 554, 615, 553, 608,
	374, 0, 395, 551, 498, 0, 543, 517, 0, 544,
	513, 548, 0, 487, 0, 402, 426, 438, 455, 458,
	488, 573, 574, 575, 270, 457, 577, 578, 579, 580,
	581, 582, 583, 576, 429, 520, 497, 523, 437, 500,
	499, 0, 0, 534, 453, 535, 536, 358, 359, 360,
	361, 321, 561, 288, 456, 384, 0, 521, 0, 0,
	0, 0, 0, 0, 0, 0, 526, 527, 524, 620,
	0, 584, 585, 0, 0, 450, 451, 316, 323, 469,
	325, 287, 373, 318, 435, 332, 0, 462, 528, 463,
	587, 590, 588, 589, 365, 328, 329, 399, 333, 343,
	387, 434, 371, 392, 285, 425, 400, 347, 514, 541,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 254, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 569, 568, 567, 566,
	565, 564, 563, 562, 0, 0, 511, 412, 297, 259,
	293, 294, 301, 609, 606, 416, 610, 0, 267, 491,
	341, 0, 382, 315, 556, 557, 0, 0, 215, 216,
	217, 218, 219, 220, 221, 222, 260, 223, 224, 225,
	226, 227, 228, 229, 232, 233, 234, 235, 236, 237,
	238, 239, 559, 230, 231, 240, 241, 242, 243, 244,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 0,
	0, 0, 261, 262, 263, 264, 0, 0, 255, 256,
	257, 258, 0, 0, 0, 441, 442, 443, 465, 427,
	490, 607, 0, 0, 0, 0, 0, 0, 0, 540,
	552, 586, 0, 595, 596, 598, 600, 599, 602, 0,
	613, 481, 482, 614, 480, 592, 370, 0, 496, 529,
	518, 601, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 310, 0, 0, 340, 533, 515, 525,
	516, 501, 502, 503, 510, 320, 504, 505, 506, 475,
	507, 476, 508, 509, 0, 532, 483, 401, 354, 550,
	549, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 0, 1790, 0, 0, 283, 205, 477, 597, 479,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 406, 423, 284, 397, 436, 289, 404,
	279, 369, 393, 0, 0, 275, 421, 403, 351, 330,
	331, 274, 0, 388, 308, 322, 305, 367, 0, 420,
	448, 304, 439, 0, 431, 277, 0, 430, 366, 417,
	422, 352, 346, 276, 419, 350, 345, 334, 312, 464,
	335, 336, 326, 378, 344, 379, 327, 356, 355, 357,
	0, 0, 0, 0, 0, 459, 460, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 591,
	0, 0, 594, 0, 433, 0, 0, 0, 0, 0,
	0, 405, 0, 0, 337, 0, 0, 0, 449, 0,
	391, 372, 616, 0, 0, 389, 342, 418, 380, 424,
	407, 432, 385, 381, 268, 408, 307, 353, 280, 282,
	302, 309, 311, 313, 314, 362, 363, 375, 396, 409,
	410, 411, 306, 290, 390, 291, 324, 292, 269, 298,
	296, 299, 398, 300, 271, 376, 415, 0, 319, 386,
	349, 272, 348, 377, 414, 413, 281, 440, 446, 447,
	537, 0, 452, 617, 618, 619, 461, 466, 467, 468,
	470, 471, 472, 473, 538, 555, 522, 492, 454, 546,
	489, 493, 494, 558, 0, 0, 0, 445, 338, 339,
	0, 317, 265, 266, 612, 303, 368, 560, 593, 485,
	0, 547, 486, 495, 295, 519, 531, 530, 364, 444,
	0, 542, 545, 474, 611, 0, 539, 554, 615, 553,
	608, 374, 0, 395, 551, 498, 0, 543, 517, 0,
	544, 513, 548, 0, 487, 0, 402, 426, 438, 455,
	458, 488, 573, 574, 575, 270, 457, 577, 578, 579,
	580, 581, 582, 583, 576, 429, 520, 497, 523, 437,
	500, 499, 0, 0, 534, 453, 535, 536, 358, 359,
	360, 361, 321, 561, 288, 456, 384, 0, 521, 0,
	0, 0, 0, 0, 0, 0, 0, 526, 527, 524,
	620, 0, 584, 585, 0, 0, 450, 451, 316, 323,
	469, 325, 287, 373, 318, 435, 332, 0, 462, 528,
	463, 587, 590, 588, 589, 365, 328, 329, 399, 333,
	343, 387, 434, 371, 392, 285, 425, 400, 347, 514,
	541, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 254, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 569, 568, 567,
	566, 565, 564, 563, 562, 0, 0, 511, 412, 297,
	259, 293, 294, 301, 609, 606, 416, 610, 0, 267,
	491, 341, 0, 382, 315, 556, 557, 0, 0, 215,
	216, 217, 218, 219, 220, 221, 222, 260, 223, 224,
	225, 226, 227, 228, 229, 232, 233, 234, 235, 236,
	237, 238, 239, 559, 230, 231, 240, 241, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	0, 0, 0, 261, 262, 263, 264, 0, 0, 255,
	256, 257, 258, 0, 0, 0, 441, 442, 443, 465,
	427, 490, 607, 0, 0, 0, 0, 0, 0, 0,
	540, 552, 586, 0, 595, 596, 598, 600, 599, 602,
	0, 613, 481, 482, 614, 480, 592, 370, 0, 496,
	529, 518, 601, 484, 0, 1917, 0, 0, 0, 0,
	0, 0, 0, 0, 310, 0, 0, 340, 533, 515,
	525, 516, 501, 502, 503, 510, 320, 504, 505, 506,
	475, 507, 476, 508, 509, 0, 532, 483, 401, 354,
	550, 549, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 0, 0, 0, 0, 283, 205, 477, 597,
	479, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 273, 406, 423, 284, 397, 436, 289,
	404, 279, 369, 393, 0, 0, 275, 421, 403, 351,
	330, 331, 274, 0, 388, 308, 322, 305, 367, 0,
	420, 448, 304, 439, 0, 431, 277, 0, 430, 366,
	417, 422, 352, 346, 276, 419, 350, 345, 334, 312,
	464, 335, 336, 326, 378, 344, 379, 327, 356, 355,
	357, 0, 0, 0, 0, 0, 459, 460, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	591, 0, 0, 594, 0, 433, 0, 0, 0, 0,
	0, 0, 405, 0, 0, 337, 0, 0, 0, 449,
	0, 391, 372, 616, 0, 0, 389, 342, 418, 380,
	424, 407, 432, 385, 381, 268, 408, 307, 353, 280,
	282, 302, 309, 311, 313, 314, 362, 363, 375, 396,
	409, 410, 411, 306, 290, 390, 291, 324, 292, 269,
	298, 296, 299, 398, 300, 271, 376, 415, 0, 319,
	386, 349, 272, 348, 377, 414, 413, 281, 440, 446,
	447, 537, 0, 452, 617, 618, 619, 461, 466, 467,
	468, 470, 471, 472, 473, 538, 555, 522, 492, 454,
	546, 489, 493, 494, 558, 0, 0, 0, 445, 338,
	339, 0, 317, 265, 266, 612, 303, 368, 560, 593,
	485, 0, 547, 486, 495, 295, 519, 531, 530, 364,
	444, 0, 542, 545, 474, 611, 0, 539, 554, 615,
	553, 608, 374, 0, 395, 551, 498, 0, 543, 517,
	0, 544, 513, 548, 0, 487, 0, 402, 426, 438,
	455, 458, 488, 573, 574, 575, 270, 457, 577, 578,
	579, 580, 581, 582, 583, 576, 429, 520, 497, 523,
	437, 500, 499, 0, 0, 534, 453, 535, 536, 358,
	359, 360, 361, 321, 561, 288, 456, 384, 0, 521,
	0, 0, 0, 0, 0, 0, 0, 0, 526, 527,
	524, 620, 0, 584, 585, 0, 0, 450, 451, 316,
	323, 469, 325, 287, 373, 318, 435, 332, 0, 462,
	528, 463, 587, 590, 588, 589, 365, 328, 329, 399,
	333, 343, 387, 434, 371, 392, 285, 425, 400, 347,
	514, 541, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 254, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 569, 568,
	567, 566, 565, 564, 563, 562, 0, 0, 511, 412,
	297, 259, 293, 294, 301, 609, 606, 416, 610, 0,
	267, 491, 341, 0, 382, 315, 556, 557, 0, 0,
	215, 216, 217, 218, 219, 220, 221, 222, 260, 223,
	224, 225, 226, 227, 228, 229, 232, 233, 234, 235,
	236, 237, 238, 239, 559, 230, 231, 240, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 0, 0, 0, 261, 262, 263, 264, 0, 0,
	255, 256, 257, 258, 0, 0, 0, 441, 442, 443,
	465, 427, 490, 607, 0, 0, 0, 0, 0, 0,
	0, 540, 552, 586, 0, 595, 596, 598, 600, 599,
	602, 0, 613, 481, 482, 614, 480, 592, 370, 0,
	496, 529, 518, 601, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 310, 0, 0, 340, 533,
	515, 525, 516, 501, 502, 503, 510, 320, 504, 505,
	506, 475, 507, 476, 508, 509, 0, 532, 483, 401,
	354, 550, 549, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 0, 0, 1448, 0, 0, 0, 283, 205, 477,
	597, 479, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 286, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 406, 423, 284, 397, 436,
	289, 404, 279, 369, 393, 0, 0, 275, 421, 403,
	351, 330, 331, 274, 0, 388, 308, 322, 305, 367,
	0, 420, 448, 304, 439, 0, 431, 277, 0, 430,
	366, 417, 422, 352, 346, 276, 419, 350, 345, 334,
	312, 464, 335, 336, 326, 378, 344, 379, 327, 356,
	355, 357, 0, 0, 0, 0, 0, 459, 460, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 591, 0, 0, 594, 0, 433, 0, 0, 0,
	0, 0, 0, 405, 0, 0, 337, 0, 0, 0,
	449, 0, 391, 372, 616, 0, 0, 389, 342, 418,
	380, 424, 407, 432, 1823, 381, 268, 408, 307, 353,
	280, 282, 302, 309, 311, 313, 314, 362, 363, 375,
	396, 409, 410, 411, 306, 290, 390, 291, 324, 292,
	269, 298, 296, 299, 398, 300, 271, 376, 415, 0,
	319, 386, 349, 272, 348, 377, 414, 413, 281, 440,
	446, 447, 537, 0, 452, 617, 618, 619, 461, 466,
	467, 468, 470, 471, 472, 473, 538, 555, 522, 492,
	454, 546, 489, 493, 494, 558, 0, 0, 0, 445,
	338, 339, 0, 317, 265, 266, 612, 303, 368, 560,
	593, 485, 0, 547, 486, 495, 295, 519, 531, 530,
	364, 444, 0, 542, 545, 474, 611, 0, 539, 554,
	615, 553, 608, 374, 0, 395, 551, 498, 0, 543,
	517, 0, 544, 513, 548, 0, 487, 0, 402, 426,
	438, 455, 458, 488, 573, 574, 575, 270, 457, 577,
	578, 579, 580, 581, 582, 583, 576, 429, 520, 497,
	523, 437, 500, 499, 0, 0, 534, 453, 535, 536,
	358, 359, 360, 361, 321, 561, 288, 456, 384, 0,
	521, 0, 0, 0, 0, 0, 0, 0, 0, 526,
	527, 524, 620, 0, 584, 585, 0, 0, 450, 451,
	316, 323, 469, 325, 287, 373, 318, 435, 332, 0,
	462, 528, 463, 587, 590, 588, 589, 365, 328, 329,
	399, 333, 343, 387, 434, 371, 392, 285, 425, 400,
	347, 514, 541, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 254, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 569,
	568, 567, 566, 565, 564, 563, 562, 0, 0, 511,
	412, 297, 259, 293, 294, 301, 609, 606, 416, 610,
	0, 267, 491, 341, 0, 382, 315, 556, 557, 0,
	0, 215, 216, 217, 218, 219, 220, 221, 222, 260,
	223, 224, 225, 226, 227, 228, 229, 232, 233, 234,
	235, 236, 237, 238, 239, 559, 230, 231, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 0, 0, 0, 261, 262, 263, 264, 0,
	0, 255, 256, 257, 258, 0, 0, 0, 441, 442,
	443, 465, 427, 490, 607, 0, 0, 0, 0, 0,
	0, 0, 540, 552, 586, 0, 595, 596, 598, 600,
	599, 602, 0, 613, 481, 482, 614, 480, 592, 370,
	0, 496, 529, 518, 601, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 310, 0, 0, 340,
	533, 515, 525, 516, 501, 502, 503, 510, 320, 504,
	505, 506, 475, 507, 476, 508, 509, 0, 532, 483,
	401, 354, 550, 549, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 0, 0, 0, 0, 0, 283, 205,
	477, 597, 479, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 286, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 406, 423, 284, 397,
	436, 289, 404, 279, 369, 393, 0, 0, 275, 421,
	403, 351, 330, 331, 274, 0, 388, 308, 322, 305,
	367, 0, 420, 448, 304, 439, 0, 431, 277, 0,
	430, 366, 417, 422, 352, 346, 276, 419, 350, 345,
	334, 312, 464, 335, 336, 326, 378, 344, 379, 327,
	356, 355, 357, 0, 0, 0, 0, 0, 459, 460,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 591, 0, 0, 594, 0, 433, 0, 0,
	1478, 0, 0, 0, 405, 0, 0, 337, 0, 0,
	0, 449, 0, 391, 372, 616, 0, 0, 389, 342,
	418, 380, 424, 407, 432, 385, 381, 268, 408, 307,
	353, 280, 282, 302, 309, 311, 313, 314, 362, 363,
	375, 396, 409, 410, 411, 306, 290, 390, 291, 324,
	292, 269, 298, 296, 299, 398, 300, 271, 376, 415,
	0, 319, 386, 349, 272, 348, 377, 414, 413, 281,
	440, 446, 447, 537, 0, 452, 617, 618, 619, 461,
	466, 467, 468, 470, 471, 472, 473, 538, 555, 522,
	492, 454, 546, 489, 493, 494, 558, 0, 0, 0,
	445, 338, 339, 0, 317, 265, 266, 612, 303, 368,
	560, 593, 485, 0, 547, 486, 495, 295, 519, 531,
	530, 364, 444, 0, 542, 545, 474, 611, 0, 539,
	554, 615, 553, 608, 374, 0, 395, 551, 498, 0,
	543, 517, 0, 544, 513, 548, 0, 487, 0, 402,
	426, 438, 455, 458, 488, 573, 574, 575, 270, 457,
	577, 578, 579, 580, 581, 582, 583, 576, 429, 520,
	497, 523, 437, 500, 499, 0, 0, 534, 453, 535,
	536, 358, 359, 360, 361, 321, 561, 288, 456, 384,
	0, 521, 0, 0, 0, 0, 0, 0, 0, 0,
	526, 527, 524, 620, 0, 584, 585, 0, 0, 450,
	451, 316, 323, 469, 325, 287, 373, 318, 435, 332,
	0, 462, 528, 463, 587, 590, 588, 589, 365, 328,
	329, 399, 333, 343, 387, 434, 371, 392, 285, 425,
	400, 347, 514, 541, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 254, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	569, 568, 567, 566, 565, 564, 563, 562, 0, 0,
	511, 412, 297, 259, 293, 294, 301, 609, 606, 416,
	610, 0, 267, 491, 341, 0, 382, 315, 556, 557,
	0, 0, 215, 216, 217, 218, 219, 220, 221, 222,
	260, 223, 224, 225, 226, 227, 228, 229, 232, 233,
	234, 235, 236, 237, 238, 239, 559, 230, 231, 240,
	241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 0, 0, 0, 261, 262, 263, 264,
	0, 0, 255, 256, 257, 258, 0, 0, 0, 441,
	442, 443, 465, 427, 490, 607, 0, 0, 0, 0,
	0, 0, 0, 540, 552, 586, 0, 595, 596, 598,
	600, 599, 602, 0, 613, 481, 482, 614, 480, 592,
	370, 0, 496, 529, 518, 601, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 627, 310, 0, 0,
	340, 533, 515, 525, 516, 501, 502, 503, 510, 320,
	504, 505, 506, 475, 507, 476, 508, 509, 0, 532,
	483, 401, 354, 550, 549, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 0, 0, 0, 0, 283,
	205, 477, 597, 479, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 286, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 273, 406, 423, 284,
	397, 436, 289, 404, 279, 369, 393, 0, 0, 275,
	421, 403, 351, 330, 331, 274, 0, 388, 308, 322,
	305, 367, 0, 420, 448, 304, 439, 0, 431, 277,
	0, 430, 366, 417, 422, 352, 346, 276, 419, 350,
	345, 334, 312, 464, 335, 336, 326, 378, 344, 379,
	327, 356, 355, 357, 0, 0, 0, 0, 0, 459,
	460, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 591, 0, 0, 594, 0, 433, 0,
	0, 0, 0, 0, 0, 405, 0, 0, 337, 0,
	0, 0, 449, 0, 391, 372, 616, 0, 0, 389,
	342, 418, 380, 424, 407, 432, 385, 381, 268, 408,
	307, 353, 280, 282, 302, 309, 311, 313, 314, 362,
	363, 375, 396, 409, 410, 411, 306, 290, 390, 291,
	324, 292, 269, 298, 296, 299, 398, 300, 271, 376,
	415, 0, 319, 386, 349, 272, 348, 377, 414, 413,
	281, 440, 446, 447, 537, 0, 452, 617, 618, 619,
	461, 466, 467, 468, 470, 471, 472, 473, 538, 555,
	522, 492, 454, 546, 489, 493, 494, 558, 0, 0,
	0, 445, 338, 339, 0, 317, 265, 266, 612, 303,
	368, 560, 593, 485, 0, 547, 486, 495, 295, 519,
	531, 530, 364, 444, 0, 542, 545, 474, 611, 0,
	539, 554, 615, 553, 608, 374, 0, 395, 551, 498,
	0, 543, 517, 0, 544, 513, 548, 0, 487, 0,
	402, 426, 438, 455, 458, 488, 573, 574, 575, 270,
	457, 577, 578, 579, 580, 581, 582, 583, 576, 429,
	520, 497, 523, 437, 500, 499, 0, 0, 534, 453,
	535, 536, 358, 359, 360, 361, 321, 561, 288, 456,
	384, 0, 521, 0, 0, 0, 0, 0, 0, 0,
	0, 526, 527, 524, 620, 0, 584, 585, 0, 0,
	450, 451, 316, 323, 469, 325, 287, 373, 318, 435,
	332, 0, 462, 528, 463, 587, 590, 588, 589, 365,
	328, 329, 399, 333, 343, 387, 434, 371, 392, 285,
	425, 400, 347, 514, 541, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 254, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 569, 568, 567, 566, 565, 564, 563, 562, 0,
	0, 511, 412, 297, 259, 293, 294, 301, 609, 606,
	416, 610, 0, 267, 491, 341, 0, 382, 315, 556,
	557, 0, 0, 215, 216, 217, 218, 219, 220, 221,
	222, 260, 223, 224, 225, 226, 227, 228, 229, 232,
	233, 234, 235, 236, 237, 238, 239, 559, 230, 231,
	240, 241, 242, 243, 244, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 0, 0, 0, 261, 262, 263,
	264, 0, 0, 255, 256, 257, 258, 0, 0, 0,
	441, 442, 443, 465, 427, 490, 607, 0, 0, 0,
	0, 0, 0, 0, 540, 552, 586, 0, 595, 596,
	598, 600, 599, 602, 0, 613, 481, 482, 614, 480,
	592, 370, 0, 496, 529, 518, 601, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 310, 0,
	0, 340, 533, 515, 525, 516, 501, 502, 503, 510,
	320, 504, 505, 506, 475, 507, 476, 508, 509, 0,
	532, 483, 401, 354, 550, 549, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 0, 0, 0, 0, 0,
	283, 205, 477, 597, 479, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 286, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 273, 406, 423,
	284, 397, 436, 289, 404, 279, 369, 393, 0, 0,
	275, 421, 403, 351, 330, 331, 274, 0, 388, 308,
	322, 305, 367, 0, 420, 448, 304, 439, 0, 431,
	277, 0, 430, 366, 417, 422, 352, 346, 276, 419,
	350, 345, 334, 312, 464, 335, 336, 326, 378, 344,
	379, 327, 356, 355, 357, 0, 0, 0, 0, 0,
	459, 460, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 591, 0, 637, 594, 0, 433,
	0, 0, 0, 0, 0, 0, 405, 0, 0, 337,
	0, 0, 0, 449, 0, 391, 372, 616, 0, 0,
	389, 342, 418, 380, 424, 407, 432, 385, 381, 268,
	408, 307, 353, 280, 282, 302, 309, 311, 313, 314,
	362, 363, 375, 396, 409, 410, 411, 306, 290, 390,
	291, 324, 292, 269, 298, 296, 299, 398, 300, 271,
	376, 415, 0, 319, 386, 349, 272, 348, 377, 414,
	413, 281, 440, 446, 447, 537, 0, 452, 617, 618,
	619, 461, 466, 467, 468, 470, 471, 472, 473, 538,
	555, 522, 492, 454, 546, 489, 493, 494, 558, 0,
	0, 0, 445, 338, 339, 0, 317, 265, 266, 612,
	303, 368, 560, 593, 485, 0, 547, 486, 495, 295,
	519, 531, 530, 364, 444, 0, 542, 545, 474, 611,
	0, 539, 554, 615, 553, 608, 374, 0, 395, 551,
	498, 0, 543, 517, 0, 544, 513, 548, 0, 487,
	0, 402, 426, 438, 455, 458, 488, 573, 574, 575,
	270, 457, 577, 578, 579, 580, 581, 582, 583, 576,
	429, 520, 497, 523, 437, 500, 499, 0, 0, 534,
	453, 535, 536, 358, 359, 360, 361, 321, 561, 288,
	456, 384, 0, 521, 0, 0, 0, 0, 0, 0,
	0, 0, 526, 527, 524, 620, 0, 584, 585, 0,
	0, 450, 451, 316, 323, 469, 325, 287, 373, 318,
	435, 332, 0, 462, 528, 463, 587, 590, 588, 589,
	365, 328, 329, 399, 333, 343, 387, 434, 371, 392,
	285, 425, 400, 347, 514, 541, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 254, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 569, 568, 567, 566, 565, 564, 563, 562,
	0, 0, 511, 412, 297, 259, 293, 294, 301, 609,
	606, 416, 610, 0, 267, 491, 341, 0, 382, 315,
	556, 557, 0, 0, 215, 216, 217, 218, 219, 220,
	221, 222, 260, 223, 224, 225, 226, 227, 228, 229,
	232, 233, 234, 235, 236, 237, 238, 239, 559, 230,
	231, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 0, 0, 0, 261, 262,
	263, 264, 0, 0, 255, 256, 257, 258, 0, 0,
	0, 441, 442, 443, 465, 427, 490, 607, 0, 0,
	0, 0, 0, 0, 0, 540, 552, 586, 0, 595,
	596, 598, 600, 599, 602, 0, 613, 481, 482, 614,
	480, 592, 370, 0, 496, 529, 518, 601, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 310,
	0, 0, 340, 533, 515, 525, 516, 501, 502, 503,
	510, 320, 504, 505, 506, 475, 507, 476, 508, 509,
	0, 532, 483, 401, 354, 550, 549, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 0, 0, 0,
	0, 283, 205, 477, 597, 479, 478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 273, 406,
	423, 284, 397, 436, 289, 404, 279, 369, 393, 0,
	0, 275, 421, 403, 351, 330, 331, 274, 0, 388,
	308, 322, 305, 367, 0, 420, 448, 304, 439, 0,
	431, 277, 0, 430, 366, 417, 422, 352, 346, 276,
	419, 350, 345, 334, 312, 464, 335, 336, 326, 378,
	344, 379, 327, 356, 355, 357, 0, 0, 0, 0,
	0, 459, 460, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 591, 0, 0, 594, 0,
	433, 0, 0, 0, 0, 0, 0, 405, 0, 0,
	337, 0, 0, 0, 449, 0, 391, 372, 616, 0,
	0, 389, 342, 418, 380, 424, 407, 432, 385, 381,
	268, 408, 307, 353, 280, 282, 302, 309, 311, 313,
	314, 362, 363, 375, 396, 409, 410, 411, 306, 290,
	390, 291, 324, 292, 269, 298, 296, 299, 398, 300,
	271, 376, 415, 0, 319, 386, 349, 272, 348, 377,
	414, 413, 281, 440, 446, 447, 537, 0, 452, 617,
	618, 619, 461, 466, 467, 468, 470, 471, 472, 473,
	538, 555, 522, 492, 454, 546, 489, 493, 494, 558,
	0, 0, 0, 445, 338, 339, 0, 317, 265, 266,
	612, 303, 368, 560, 593, 485, 0, 547, 486, 495,
	295, 519, 531, 530, 364, 444, 0, 542, 545, 474,
	611, 0, 539, 554, 615, 553, 608, 374, 0, 395,
	551, 498, 0, 543, 517, 0, 544, 513, 548, 0,
	487, 0, 402, 426, 438, 455, 458, 488, 573, 574,
	575, 270, 457, 577, 578, 579, 580, 581, 582, 583,
	576, 429, 520, 497, 523, 437, 500, 499, 0, 0,
	534, 453, 535, 536, 358, 359, 360, 361, 321, 561,
	288, 456, 384, 0, 521, 0, 0, 0, 0, 0,
	0, 0, 0, 526, 527, 524, 620, 0, 584, 585,
	0, 0, 450, 451, 316, 323, 469, 325, 287, 373,
	318, 435, 332, 0, 462, 528, 463, 587, 590, 588,
	589, 365, 328, 329, 399, 333, 343, 387, 434, 371,
	392, 285, 425, 400, 347, 514, 541, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 254, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 569, 568, 567, 566, 565, 564, 563,
	562, 919, 0, 511, 412, 297, 259, 293, 294, 301,
	609, 606, 416, 610, 0, 267, 491, 341, 0, 382,
	315, 556, 557, 0, 0, 215, 216, 217, 218, 219,
	220, 221, 222, 260, 223, 224, 225, 226, 227, 228,
	229, 232, 233, 234, 235, 236, 237, 238, 239, 559,
	230, 231, 240, 241, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 0, 0, 0, 261,
	262, 263, 264, 0, 0, 255, 256, 257, 258, 0,
	0, 0, 441, 442, 443, 465, 427, 490, 607, 0,
	0, 0, 0, 0, 0, 0, 540, 552, 586, 0,
	595, 596, 598, 600, 599, 602, 0, 613, 481, 482,
	614, 480, 592, 370, 0, 496, 529, 518, 601, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	310, 0, 0, 340, 533, 515, 525, 516, 501, 502,
	503, 510, 320, 504, 505, 506, 475, 507, 476, 508,
	509, 0, 532, 483, 401, 354, 550, 549, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 0, 0,
	0, 0, 283, 205, 477, 597, 479, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 273,
	406, 423, 284, 397, 436, 289, 404, 279, 369, 393,
	0, 0, 275, 421, 403, 351, 330, 331, 274, 0,
	388, 308, 322, 305, 367, 0, 420, 448, 304, 439,
	0, 431, 277, 0, 430, 366, 417, 422, 352, 346,
	276, 419, 350, 345, 334, 312, 464, 335, 336, 326,
	378, 344, 379, 327, 356, 355, 357, 0, 0, 0,
	0, 0, 459, 460, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 591, 0, 0, 594,
	0, 433, 0, 0, 0, 0, 0, 0, 405, 0,
	0, 337, 0, 0, 0, 449, 0, 391, 372, 616,
	0, 0, 389, 342, 418, 380, 424, 407, 432, 385,
	381, 268, 408, 307, 353, 280, 282, 302, 309, 311,
	313, 314, 362, 363, 375, 396, 409, 410, 411, 306,
	290, 390, 291, 324, 292, 269, 298, 296, 299, 398,
	300, 271, 376, 415, 0, 319, 386, 349, 272, 348,
	377, 414, 413, 281, 440, 446, 447, 537, 0, 452,
	617, 618, 619, 461, 466, 467, 468, 470, 471, 472,
	473, 538, 555, 522, 492, 454, 546, 489, 493, 494,
	558, 0, 0, 0, 445, 338, 339, 0, 317, 265,
	266, 612, 303, 368, 560, 593, 485, 0, 547, 486,
	495, 295, 519, 531, 530, 364, 444, 0, 542, 545,
	474, 611, 0, 539, 554, 615, 553, 608, 374, 0,
	395, 551, 498, 0, 543, 517, 0, 544, 513, 548,
	0, 487, 0, 402, 426, 438, 455, 458, 488, 573,
	574, 575, 270, 457, 577, 578, 579, 580, 581, 582,
	583, 576, 429, 520, 497, 523, 437, 500, 499, 0,
	0, 534, 453, 535, 536, 358, 359, 360, 361, 321,
	561, 288, 456, 384, 0, 521, 0, 0, 0, 0,
	0, 0, 0, 0, 526, 527, 524, 620, 0, 584,
	585, 0, 0, 450, 451, 316, 323, 469, 325, 287,
	373, 318, 435, 332, 0, 462, 528, 463, 587, 590,
	588, 589, 365, 328, 329, 399, 333, 343, 387, 434,
	371, 392, 285, 425, 400, 347, 514, 541, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 254,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 569, 568, 567, 566, 565, 564,
	563, 562, 0, 0, 511, 412, 297, 259, 293, 294,
	301, 609, 606, 416, 610, 0, 267, 491, 341, 0,
	382, 315, 556, 557, 0, 0, 215, 216, 217, 218,
	219, 220, 221, 222, 260, 223, 224, 225, 226, 227,
	228, 229, 232, 233, 234, 235, 236, 237, 238, 239,
	559, 230, 231, 240, 241, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 0, 0, 0,
	261, 262, 263, 264, 0, 0, 255, 256, 257, 258,
	0, 0, 0, 441, 442, 443, 465, 427, 490, 607,
	0, 0, 0, 0, 0, 0, 0, 540, 552, 586,
	0, 595, 596, 598, 600, 599, 602, 0, 613, 481,
	482, 614, 480, 592, 370, 0, 496, 529, 518, 601,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 310, 0, 0, 340, 533, 515, 525, 516, 501,
	502, 503, 510, 320, 504, 505, 506, 475, 507, 476,
	508, 509, 0, 532, 483, 401, 354, 550, 549, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 0,
	0, 0, 0, 283, 205, 477, 597, 479, 478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	273, 406, 1428, 284, 397, 436, 289, 404, 279, 369,
	393, 0, 0, 275, 421, 403, 351, 330, 331, 274,
	0, 388, 308, 322, 305, 367, 0, 420, 448, 304,
	439, 0, 431, 277, 0, 430, 366, 417, 422, 352,
	346, 276, 419, 350, 345, 334, 312, 464, 335, 336,
	326, 378, 344, 379, 327, 356, 355, 357, 0, 0,
	0, 0, 0, 459, 460, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 591, 0, 0,
	594, 0, 433, 0, 0, 0, 0, 0, 0, 405,
	0, 0, 337, 0, 0, 0, 449, 0, 391, 372,
	616, 0, 0, 389, 342, 418, 380, 424, 407, 432,
	385, 381, 268, 408, 307, 353, 280, 282, 302, 309,
	311, 313, 314, 362, 363, 375, 396, 409, 410, 411,
	306, 290, 390, 291, 324, 292, 269, 298, 296, 299,
	398, 300, 271, 376, 415, 0, 319, 386, 349, 272,
	348, 377, 414, 413, 281, 440, 446, 447, 537, 0,
	452, 617, 618, 619, 461, 466, 467, 468, 470, 471,
	472, 473, 538, 555, 522, 492, 454, 546, 489, 493,
	494, 558, 0, 0, 0, 445, 338, 339, 0, 317,
	265, 266, 612, 303, 368, 560, 593, 485, 0, 547,
	486, 495, 295, 519, 531, 530, 364, 444, 0, 542,
	545, 474, 611, 0, 539, 554, 615, 553, 608, 374,
	0, 395, 551, 498, 0, 543, 517, 0, 544, 513,
	548, 0, 487, 0, 402, 426, 438, 455, 458, 488,
	573, 574, 575, 270, 457, 577, 578, 579, 580, 581,
	582, 583, 576, 429, 520, 497, 523, 437, 500, 499,
	0, 0, 534, 453, 535, 536, 358, 359, 360, 361,
	321, 561, 288, 456, 384, 0, 521, 0, 0, 0,
	0, 0, 0, 0, 0, 526, 527, 524, 620, 0,
	584, 585, 0, 0, 450, 451, 316, 323, 469, 325,
	287, 373, 318, 435, 332, 0, 462, 528, 463, 587,
	590, 588, 589, 365, 328, 329, 399, 333, 343, 387,
	434, 371, 392, 285, 425, 400, 347, 514, 541, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	254, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 569, 568, 567, 566, 565,
	564, 563, 562, 0, 0, 511, 412, 297, 259, 293,
	294, 301, 609, 606, 416, 610, 0, 267, 491, 341,
	0, 382, 315, 556, 557, 0, 0, 215, 216, 217,
	218, 219, 220, 221, 222, 260, 223, 224, 225, 226,
	227, 228, 229, 232, 233, 234, 235, 236, 237, 238,
	239, 559, 230, 231, 240, 241, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 0, 0,
	0, 261, 262, 263, 264, 0, 0, 255, 256, 257,
	258, 0, 0, 0, 441, 442, 443, 465, 427, 490,
	607, 0, 0, 0, 0, 0, 0, 0, 540, 552,
	586, 0, 595, 596, 598, 600, 599, 602, 0, 613,
	481, 482, 614, 480, 592, 370, 0, 496, 529, 518,
	601, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 310, 0, 0, 340, 533, 515, 525, 516,
	501, 502, 503, 510, 320, 504, 505, 506, 475, 507,
	476, 508, 509, 0, 532, 483, 401, 354, 550, 549,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 0, 0,
	0, 0, 0, 0, 283, 205, 477, 597, 479, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 273, 406, 1426, 284, 397, 436, 289, 404, 279,
	369, 393, 0, 0, 275, 421, 403, 351, 330, 331,
	274, 0, 388, 308, 322, 305, 367, 0, 420, 448,
	304, 439, 0, 431, 277, 0, 430, 366, 417, 422,
	352, 346, 276, 419, 350, 345, 334, 312, 464, 335,
	336, 326, 378, 344, 379, 327, 356, 355, 357, 0,
	0, 0, 0, 0, 459, 460, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 591, 0,
	0, 594, 0, 433, 0, 0, 0, 0, 0, 0,
	405, 0, 0, 337, 0, 0, 0, 449, 0, 391,
	372, 616, 0, 0, 389, 342, 418, 380, 424, 407,
	432, 385, 381, 268, 408, 307, 353, 280, 282, 302,
	309, 311, 313, 314, 362, 363, 375, 396, 409, 410,
	411, 306, 290, 390, 291, 324, 292, 269, 298, 296,
	299, 398, 300, 271, 376, 415, 0, 319, 386, 349,
	272, 348, 377, 414, 413, 281, 440, 446, 447, 537,
	0, 452, 617, 618, 619, 461, 466, 467, 468, 470,
	471, 472, 473, 538, 555, 522, 492, 454, 546, 489,
	493, 494, 558, 0, 0, 0, 445, 338, 339, 0,
	317, 265, 266, 612, 303, 368, 560, 593, 485, 0,
	547, 486, 495, 295, 519, 531, 530, 364, 444, 0,
	542, 545, 474, 611, 0, 539, 554, 615, 553, 608,
	374, 0, 395, 551, 498, 0, 543, 517, 0, 544,
	513, 548, 0, 487, 0, 402, 426, 438, 455, 458,
	488, 573, 574, 575, 270, 457, 577, 578, 579, 580,
	581, 582, 583, 576, 429, 520, 497, 523, 437, 500,
	499, 0, 0, 534, 453, 535, 536, 358, 359, 360,
	361, 321, 561, 288, 456, 384, 0, 521, 0, 0,
	0, 0, 0, 0, 0, 0, 526, 527, 524, 620,
	0, 584, 585, 0, 0, 450, 451, 316, 323, 469,
	325, 287, 373, 318, 435, 332, 0, 462, 528, 463,
	587, 590, 588, 589, 365, 328, 329, 399, 333, 343,
	387, 434, 371, 392, 285, 425, 400, 347, 514, 541,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 254, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 569, 568, 567, 566,
	565, 564, 563, 562, 0, 0, 511, 412, 297, 259,
	293, 294, 301, 609, 606, 416, 610, 0, 267, 491,
	341, 0, 382, 315, 556, 557, 0, 0, 215, 216,
	217, 218, 219, 220, 221, 222, 260, 223, 224, 225,
	226, 227, 228, 229, 232, 233, 234, 235, 236, 237,
	238, 239, 559, 230, 231, 240, 241, 242, 243, 244,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 0,
	0, 0, 261, 262, 263, 264, 0, 0, 255, 256,
	257, 258, 0, 0, 0, 441, 442, 443, 465, 427,
	490, 607, 0, 0, 0, 0, 0, 0, 0, 540,
	552, 586, 0, 595, 596, 598, 600, 599, 602, 0,
	613, 481, 482, 614, 480, 592, 370, 0, 496, 529,
	518, 601, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 310, 0, 0, 340, 533, 515, 525,
	516, 501, 502, 503, 510, 320, 504, 505, 506, 475,
	507, 476, 508, 509, 0, 532, 483, 401, 354, 550,
	549, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 0, 0, 0, 0, 283, 205, 477, 597, 479,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 406, 423, 284, 397, 436, 289, 404,
	279, 369, 393, 0, 0, 275, 421, 403, 351, 330,
	331, 274, 0, 388, 308, 322, 305, 367, 0, 420,
	448, 304, 439, 0, 431, 277, 0, 430, 366, 417,
	422, 352, 346, 276, 419, 350, 345, 334, 312, 464,
	335, 336, 326, 378, 344, 379, 327, 356, 355, 357,
	0, 0, 0, 0, 0, 459, 460, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 591,
	0, 0, 594, 0, 433, 0, 0, 0, 0, 0,
	0, 405, 0, 0, 337, 0, 0, 0, 449, 0,
	391, 372, 616, 0, 0, 389, 342, 418, 380, 424,
	407, 432, 385, 381, 268, 408, 307, 353, 280, 282,
	703, 309, 311, 313, 314, 362, 363, 375, 396, 409,
	410, 411, 306, 290, 390, 291, 324, 292, 269, 298,
	296, 299, 398, 300, 271, 376, 415, 0, 319, 386,
	349, 272, 348, 377, 414, 413, 281, 440, 446, 447,
	537, 0, 452, 617, 618, 619, 461, 466, 467, 468,
	470, 471, 472, 473, 538, 555, 522, 492, 454, 546,
	489, 493, 494, 558, 0, 0, 0, 445, 338, 339,
	0, 317, 265, 266, 612, 303, 368, 560, 593, 485,
	0, 547, 486, 495, 295, 519, 531, 530, 364, 444,
	0, 542, 545, 474, 611, 0, 539, 554, 615, 553,
	608, 374, 0, 395, 551, 498, 0, 543, 517, 0,
	544, 513, 548, 0, 487, 0, 402, 426, 438, 455,
	458, 488, 573, 574, 575, 270, 457, 577, 578, 579,
	580, 581, 582, 583, 576, 429, 520, 497, 523, 437,
	500, 499, 0, 0, 534, 453, 535, 536, 358, 359,
	360, 361, 321, 561, 288, 456, 384, 0, 521, 0,
	0, 0, 0, 0, 0, 0, 0, 526, 527, 524,
	620, 0, 584, 585, 0, 0, 450, 451, 316, 323,
	469, 325, 287, 373, 318, 435, 332, 0, 462, 528,
	463, 587, 590, 588, 589, 365, 328, 329, 399, 333,
	343, 387, 434, 371, 392, 285, 425, 400, 347, 514,
	541, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 254, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 569, 568, 567,
	566, 565, 564, 563, 562, 0, 0, 511, 412, 297,
	259, 293, 294, 301, 609, 606, 416, 610, 0, 267,
	491, 341, 0, 382, 315, 556, 557, 0, 0, 215,
	216, 217, 218, 219, 220, 221, 222, 260, 223, 224,
	225, 226, 227, 228, 229, 232, 233, 234, 235, 236,
	237, 238, 239, 559, 230, 231, 240, 241, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	0, 0, 0, 261, 262, 263, 264, 0, 0, 255,
	256, 257, 258, 0, 0, 0, 441, 442, 443, 465,
	427, 490, 607, 0, 0, 0, 0, 0, 0, 0,
	540, 552, 586, 0, 595, 596, 598, 600, 599, 602,
	0, 613, 481, 482, 614, 480, 592, 370, 0, 496,
	529, 518, 601, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 310, 0, 0, 340, 533, 515,
	525, 516, 501, 502, 503, 510, 320, 504, 505, 506,
	475, 507, 476, 508, 509, 0, 532, 483, 401, 354,
	550, 549, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 0, 0, 0, 0, 283, 205, 477, 597,
	479, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 273, 406, 423, 284, 397, 436, 289,
	404, 279, 369, 393, 0, 0, 275, 421, 403, 351,
	330, 331, 274, 0, 388, 308, 322, 305, 367, 0,
	420, 448, 304, 439, 0, 431, 277, 0, 430, 366,
	417, 422, 352, 346, 276, 419, 350, 345, 334, 312,
	464, 335, 336, 326, 378, 344, 379, 327, 356, 355,
	357, 0, 0, 0, 0, 0, 459, 460, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	591, 0, 0, 594, 0, 433, 0, 0, 0, 0,
	0, 0, 405, 0, 0, 337, 0, 0, 0, 449,
	0, 391, 372, 616, 0, 0, 389, 342, 418, 380,
	424, 407, 432, 661, 381, 268, 408, 307, 353, 280,
	282, 302, 309, 311, 313, 314, 362, 363, 375, 396,
	409, 410, 411, 306, 290, 390, 291, 324, 292, 269,
	298, 296, 299, 398, 300, 271, 376, 415, 0, 319,
	386, 349, 272, 348, 377, 414, 413, 281, 440, 446,
	447, 537, 0, 452, 617, 618, 619, 461, 466, 467,
	468, 470, 471, 472, 473, 538, 555, 522, 492, 454,
	546, 489, 493, 494, 558, 0, 0, 0, 445, 338,
	339, 0, 317, 265, 266, 612, 303, 368, 560, 593,
	485, 0, 547, 486, 495, 295, 519, 531, 530, 364,
	444, 0, 542, 545, 474, 611, 0, 539, 554, 615,
	553, 608, 374, 0, 395, 551, 498, 0, 543, 517,
	0, 544, 513, 548, 0, 487, 0, 402, 426, 438,
	455, 458, 488, 573, 574, 575, 270, 457, 577, 578,
	579, 580, 581, 582, 662, 576, 429, 520, 497, 523,
	437, 500, 499, 0, 0, 534, 453, 535, 536, 358,
	359, 360, 361, 321, 561, 288, 456, 384, 0, 521,
	0, 0, 0, 0, 0, 0, 0, 0, 526, 527,
	524, 620, 0, 584, 585, 0, 0, 450, 451, 316,
	323, 469, 325, 287, 373, 318, 435, 332, 0, 462,
	528, 463, 587, 590, 588, 589, 365, 328, 329, 399,
	333, 343, 387, 434, 371, 392, 285, 425, 400, 347,
	514, 541, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 254, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 569, 568,
	567, 566, 565, 564, 563, 562, 0, 0, 511, 412,
	297, 259, 293, 294, 301, 609, 606, 416, 610, 0,
	267, 491, 341, 0, 382, 315, 556, 557, 0, 0,
	215, 216, 217, 218, 219, 220, 221, 222, 260, 223,
	224, 225, 226, 227, 228, 229, 232, 233, 234, 235,
	236, 237, 238, 239, 559, 230, 231, 240, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 0, 0, 0, 261, 262, 263, 264, 0, 0,
	255, 256, 257, 258, 1066, 0, 0, 441, 442, 443,
	465, 427, 490, 607, 1905, 0, 0, 0, 0, 1866,
	0, 540, 552, 586, 0, 595, 596, 598, 600, 599,
	602, 0, 613, 481, 482, 614, 480, 592, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1907,
	1875, 0, 0, 0, 0, 0, 0, 0, 0, 1908,
	1909, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1874, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1882, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1052, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1074, 1078, 1080, 1082, 1084,
	1085, 1087, 0, 1092, 1088, 1089, 1090, 1091, 0, 1069,
	1070, 1071, 1072, 1050, 1051, 1075, 0, 1053, 1898, 1054,
	1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1065, 1067,
	1063, 1064, 1073, 0, 0, 0, 0, 0, 0, 0,
	1077, 1079, 1081, 1083, 1086, 0, 682, 681, 688, 678,
	0, 0, 0, 0, 0, 0, 0, 0, 685, 686,
	0, 687, 691, 0, 0, 672, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 696, 0, 0, 1068, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1865,
	2675, 1864, 0, 2674, 0, 0, 0, 0, 1886, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1892,
	0, 0, 0, 0, 0, 0, 0, 0, 700, 0,
	0, 702, 0, 0, 0, 0, 701, 0, 0, 1880,
	1914, 0, 0, 1881, 1883, 1885, 0, 1887, 1888, 1889,
	1893, 1894, 1895, 1897, 1900, 1901, 1902, 0, 0, 682,
	681, 688, 678, 0, 1890, 1899, 1891, 0, 0, 0,
	0, 685, 686, 1066, 687, 691, 1869, 0, 672, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 696, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1906, 0,
	1905, 0, 0, 0, 0, 0, 0, 182, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1862, 1863, 2525, 2526, 0, 3394,
	0, 700, 0, 0, 702, 1907, 0, 0, 0, 701,
	0, 0, 1903, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1879,
	0, 0, 0, 0, 0, 0, 1878, 0, 0, 0,
	0, 0, 0, 673, 675, 674, 176, 0, 0, 0,
	0, 0, 0, 680, 0, 0, 1882, 0, 0, 0,
	1896, 0, 0, 0, 1052, 684, 0, 0, 0, 1884,
	0, 0, 699, 0, 0, 0, 0, 0, 0, 677,
	0, 0, 1911, 1910, 1074, 1078, 1080, 1082, 1084, 1085,
	1087, 0, 1092, 1088, 1089, 1090, 1091, 0, 1069, 1070,
	1071, 1072, 1050, 1051, 1075, 0, 1053, 0, 1054, 1055,
	1056, 1057, 1058, 1059, 1060, 1061, 1062, 1065, 1067, 1063,
	1064, 1073, 0, 0, 1898, 0, 0, 0, 0, 1077,
	1079, 1081, 1083, 1086, 0, 1871, 0, 0, 0, 0,
	1076, 0, 0, 0, 0, 0, 673, 675, 674, 0,
	682, 681, 688, 678, 0, 0, 680, 0, 0, 0,
	0, 0, 685, 686, 0, 687, 691, 1068, 684, 672,
	0, 0, 0, 0, 0, 699, 0, 1913, 0, 696,
	1912, 0, 677, 0, 0, 0, 667, 0, 679, 683,
	689, 0, 690, 692, 0, 0, 693, 694, 695, 1905,
	0, 697, 698, 0, 1886, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1892, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1907, 1880, 1914, 0, 0, 1881,
	1883, 1885, 0, 1887, 1888, 1889, 1893, 1894, 1895, 1897,
	1900, 1901, 1902, 0, 0, 0, 0, 0, 0, 0,
	1890, 1899, 1891, 1905, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3556, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1882, 0, 0, 0, 0,
	0, 679, 683, 689, 1906, 690, 692, 0, 1907, 693,
	694, 695, 0, 0, 697, 698, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1905, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1903, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1882,
	0, 0, 0, 1898, 0, 1879, 0, 676, 0, 0,
	0, 0, 1878, 1907, 0, 0, 0, 673, 675, 674,
	0, 0, 0, 0, 0, 0, 0, 680, 0, 0,
	0, 0, 0, 0, 0, 0, 1896, 0, 0, 684,
	0, 0, 0, 0, 0, 1884, 699, 0, 0, 0,
	0, 0, 0, 677, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3527, 1882, 0, 0, 1898, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1886, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1892, 0, 0, 0, 0, 1076,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	676, 0, 0, 0, 1880, 1914, 0, 0, 1881, 1883,
	1885, 0, 1887, 1888, 1889, 1893, 1894, 1895, 1897, 1900,
	1901, 1902, 1898, 0, 0, 0, 0, 0, 0, 1890,
	1899, 1891, 0, 0, 0, 0, 0, 1886, 0, 0,
	0, 0, 0, 146, 0, 0, 0, 0, 1892, 0,
	0, 0, 679, 683, 689, 0, 690, 692, 0, 0,
	693, 694, 695, 1906, 0, 697, 698, 0, 1880, 1914,
	0, 0, 1881, 1883, 1885, 0, 1887, 1888, 1889, 1893,
	1894, 1895, 1897, 1900, 1901, 1902, 0, 0, 0, 0,
	0, 0, 0, 1890, 1899, 1891, 0, 0, 0, 0,
	0, 0, 1886, 0, 0, 0, 0, 1903, 0, 0,
	0, 0, 0, 1892, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1879, 0, 0, 1906, 0, 0,
	0, 1878, 0, 1880, 1914, 0, 0, 1881, 1883, 1885,
	0, 1887, 1888, 1889, 1893, 1894, 1895, 1897, 1900, 1901,
	1902, 0, 0, 0, 0, 1896, 0, 0, 1890, 1899,
	1891, 0, 0, 0, 1884, 0, 0, 0, 0, 0,
	0, 1903, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1879, 0,
	0, 0, 1906, 0, 0, 1878, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1896,
	0, 676, 0, 0, 0, 0, 0, 0, 1884, 0,
	0, 0, 0, 0, 0, 0, 1903, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1879, 0, 0, 0, 0, 0, 0,
	1878, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1896, 0, 0, 0, 0, 0,
	0, 0, 0, 1884,
}

var yyPact = [...]int{
	326, -1000, -1000, -1000, -299, 13365, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 43950, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 393, 43950, -297, 27447, 42117, -1000, -1000, 2528,
	-1000, 42728, 15218, 43950, 456, 452, 43950, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 857, -1000, 46394,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 756, 47276, 45783,
	10290, -204, -1000, 1518, -24, 2395, 448, 1015, 1032, 1013,
	1013, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 4088, 907, 43339, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3770,
	425, 907, 20112, 102, 96, 1518, 442, -86, -80, -89,
	4247, -1000, 1117, 3817, 222, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 10290, 10290, 13365, -359,
	13365, 10290, 43950, 43950, -1000, -1000, -1000, -1000, -297, 42728,
	756, 47276, 10290, 2395, 448, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -80, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -86, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -89, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 96, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 4523, -1000, 1523, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2201, 2912, 1508, 2394, 706, 42117, 43950, -1000, 143,
	706, -1000, -1000, -1000, 1518, 3381, -1000, 43950, 43950, 179,
	1805, -1000, 451, 433, 462, 317, 1507, -1000, -1000, -1000,
	-1000, -1000, -1000, 627, 3350, -1000, 43950, 43950, 2959, 43950,
	-1000, 2111, 663, 47173, 3135, 1302, 883, 2986, -1000, -1000,
	2907, -1000, 331, 296, 300, 430, 389, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 355, -1000, 3229, -1000, -1000, 322,
	-1000, -1000, 291, -1000, -1000, -1000, 89, -1000, -1000, -1000,
	-1000, -1000, -1000, -4, -1000, -1000, 1077, 2134, 10290, 2197,
	-1000, 2725, 1533, -1000, -1000, -1000, 5992, 12129, 12129, 12129,
	12129, 43950, -1000, -1000, 2701, 10290, 2906, 2905, 2904, 2903,
	-1000, -1000, -1000, -1000, -1000, -1000, 1500, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1944, -1000, -1000, -1000,
	12742, -1000, 2902, 2898, 2896, 2889, 2888, 2860, 2859, 2855,
	2854, 2851, 2850, 2844, 2843, 2842, 2571, 14597, 2841, 2388,
	2387, 2836, 2820, 2819, 2383, 2817, 2816, 2810, 2571, 2571,
	2809, 2805, 2804, 2803, 2798, 2797, 2796, 2778, 2773, 2768,
	2767, 2763, 2762, 2761, 2760, 2758, 2756, 2754, 2752, 2750,
	2749, 2748, 2747, 2745, 2727, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1344, -1000,
	2722, 3367, 2636, -1000, 3241, 3215, 3203, 3197, -249, 2721,
	2097, -1000, -1000, 128, 3349, 43950, -1000, -59, -1000, -1000,
	990, -1000, 976, -1000, 755, 43950, 43950, 218, 844, 755,
	755, 755, 755, 755, 837, 755, 3274, 854, 849, 848,
	846, 755, -35, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1803, 1801, 3047, 960, -1000, -1000, -1000, -1000, 1360, 43950,
	-1000, 2652, 1675, 1675, 3339, 3268, 678, 673, 672, 1675,
	528, -1000, 1731, 1731, 1731, 1731, 1675, 474, 658, 3277,
	3277, 117, 1731, 70, 1675, 1675, 70, 1675, 1675, -1000,
	1694, 305, -256, -1000, -1000, -1000, -1000, 1731, 1731, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 3247, 3245, 756, 756,
	43950, 201, 43950, 756, 756, 756, 773, 49, 45172, 44561,
	2111, 655, 649, 1382, 1785, -1000, 1684, 43950, 43950, 1684,
	1684, 23170, 22559, -1000, 43950, -1000, 3367, 2636, 2569, 1661,
	2567, 2636, -90, -101, -102, 756, 756, 756, 756, 756,
	264, 756, 756, 756, 756, 756, 43950, 43950, 41506, 756,
	756, 756, 8444, 8444, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 13365, 2008, 2056, 217, 11, -281, 273,
	-1000, -1000, 43950, 3110, 250, -1000, -1000, -1000, 2585, -1000,
	2638, 2638, 2638, 2638, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2638, 2638, 2651, 2719, -1000, -1000, 2637,
	2637, 2637, 2585, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2639, 2639,
	2648, 2648, 2639, 43950, -118, -1000, -1000, 10290, 43950, 3119,
	429, 2715, 706, -1000, 43950, 190, 438, 3367, 3117, 3277,
	3334, -1000, -1000, 1496, 2094, 2382, -1000, 317, -1000, 410,
	317, 1623, -1000, 1036, -1000, -1000, -1000, -1000, -1000, 43950,
	-4, 424, -1000, -1000, 2366, 2712, -1000, 601, 1291, 1376,
	-1000, 330, 47497, 35390, 2111, 35390, 43950, -1000, -1000, -1000,
	-1000, -1000, -1000, 78, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 290, -1000,
	10290, 10290, 10290, 10290, 10290, -1000, 969, 11516, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 12129, 12129, 12129, 12129, 12129,
	12129, 12129, 12129, 12129, 12129, 12129, 12129, 2693, 1886, 12129,
	12129, 12129, 12129, 25003, 1661, 3225, 1365, 312, 1533, 1533,
	1533, 1533, 10290, -1000, 1713, 2134, 10290, 10290, 10290, 10290,
	43950, -1000, -1000, 3436, 10290, 10290, 3506, 10290, 3184, 10290,
	10290, 10290, 2565, 4756, 43950, 10290, -1000, 2554, 2544, -1000,
	-1000, 1938, 10290, -1000, -1000, 10290, -1000, -1000, 10290, 12129,
	10290, -1000, 10290, 10290, 10290, -1000, -1000, 645, 3184, 3184,
	3184, 1780, 10290, 10290, 3184, 3184, 3184, 1710, 3184, 3184,
	3184, 3184, 3184, 3184, 3184, 3184, 3184, 3184, 2542, 2536,
	2535, 9677, 3277, -204, -1000, 7831, 3117, 3277, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -252, 2709,
	43950, 2380, 2379, -303, 1019, 455, 34, 1022, 987, 1005,
	-1000, 43950, 1846, 3178, -1000, 2707, 43950, 755, 755, 755,
	-1000, 39673, 35390, 43950, 43950, 2111, 43950, 43950, 43950, 755,
	755, 755, 755, 43950, -1000, 3091, 35390, 3053, 773, -1000,
	43950, 1360, 3173, 43950, 3339, 12129, 12129, -1000, -1000, 10290,
	40895, 1731, 1675, 1675, -1000, -1000, 43950, -1000, -1000, -1000,
	1731, 43950, 1731, 1731, 3339, 1731, -1000, -1000, -1000, 1675,
	1675, -1000, -1000, 10290, -1000, -1000, 1731, 1731, -1000, -1000,
	3339, 43950, 76, 3339, 3339, 77, -1000, -1000, -1000, 1675,
	43950, 43950, 755, 43950, -1000, 43950, 43950, -1000, -1000, 43950,
	43950, 4238, 39673, 40284, 3244, -1000, 35390, 43950, 43950, 33557,
	-1000, 1297, -1000, 32, -1000, 28, 49, 1684, 49, 1684,
	-1000, 599, 593, 21337, 538, 35390, 5369, -1000, -1000, 1684,
	1684, 5369, 5369, 1539, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1332, -1000, 256, 3277, -1000, -1000, -1000, -1000, -1000,
	2093, 2084, 2083, 43950, 39673, 35390, 2111, 43950, 756, 43950,
	43950, 43950, 43950, 43950, -1000, 2703, 1490, -1000, 3126, 43950,
	43950, 43950, 1267, -1000, -1000, 18273, 1488, 1267, -1000, 1838,
	-1000, 10290, 13365, -223, 10290, 13365, 13365, 10290, 13365, -1000,
	10290, 247, -1000, -1000, -1000, -1000, 2076, -1000, 2073, -1000,
	-1000, -1000, -1000, -1000, 2378, 2378, -1000, 2066, -1000, -1000,
	-1000, -1000, 2065, -1000, -1000, 2064, -1000, -1000, -1000, -1000,
	-144, 2533, 1077, -1000, 2370, 2985, -205, -1000, 19501, 43950,
	43950, 429, -305, 1800, 1797, 1796, -1000, -205, -1000, 18887,
	43950, 3277, -1000, -209, 3117, 10290, 43950, -1000, 3261, -1000,
	-1000, 317, -1000, 463, 383, -1000, -1000, -1000, -1000, -1000,
	-1000, 1483, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 387, 1328, -1000, 43950, -1000, -1000, 330, 35390,
	37223, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 257, -1000,
	-1000, 185, -1000, 820, 221, 1622, -1000, -1000, 215, 204,
	182, 875, 2134, -1000, 1861, 1861, 1857, -1000, 727, -1000,
	-1000, -1000, -1000, 2701, -1000, -1000, -1000, 2806, 2560, -1000,
	1700, 1700, 1545, 1545, 1545, 1545, 1545, 2166, 2166, -1000,
	-1000, -1000, 5992, 2693, 12129, 12129, 12129, 12129, 834, 834,
	3527, 3743, -1000, -1000, -1000, -1000, 10290, 212, 1822, -1000,
	10290, 2330, 1547, 2281, 1319, 1479, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2529, 2526, 2257, 3348,
	2525, 10290, -1000, -1000, 1618, 1613, 1598, -1000, 2160, 9064,
	-1000, -1000, -1000, 2521, 1460, 2518, -1000, -1000, -1000, 2516,
	1591, 1168, 2515, 2268, 2510, 2509, 2506, 2504, 1327, 10290,
	10290, 10290, 10290, 2503, 1583, 1558, 10290, 10290, 10290, 10290,
	2501, 10290, 10290, 10290, 10290, 10290, 10290, 10290, 10290, 10290,
	10290, 119, 119, 119, 1321, 1313, -1000, -1000, 1554, -1000,
	2134, -1000, -1000, 3117, -1000, 2690, 2062, 1306, -1000, -1000,
	-282, 2332, 43950, 1018, 43950, -1000, -1000, 1017, 974, 985,
	3260, 3124, 43950, 1066, 2688, 43950, 43950, 43950, 237, -1000,
	-1000, 1244, -1000, 221, -26, 467, 1103, 2927, 3347, -119,
	43950, 43950, 43950, 43950, 3158, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 39062, -1000, 2687, 1546, -1000, -1000, 1533,
	1533, 2134, 2922, 43950, 43950, 3339, 3339, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1731, 3339, 3339, 1685, 1675, 1731,
	-1000, -1000, 1731, -318, -1000, 1731, -1000, -318, 1458, -318,
	43950, -1000, -1000, -1000, 3149, 2652, 1299, -1000, -1000, -1000,
	3324, 1614, 741, 741, 959, 541, 3323, 17051, -1000, 1653,
	1222, 817, 3090, 315, -1000, 1653, -140, 721, 1653, 1653,
	1653, 1653, 1653, 1653, 1653, 597, 584, 1653, 1653, 1653,
	1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653, 1030, 1653,
	1653, 1653, 1653, 1653, -1000, 1653, 2678, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 642, 238, 3223, 372, -1000, 365,
	1244, 3220, 384, 3028, 1172, -1000, -1000, -1000, -1000, 25614,
	25614, 20726, 25614, -1000, 191, 49, 69, -1000, -1000, 1297,
	5369, 1297, 5369, -1000, -1000, 815, -1000, -1000, 1103, -1000,
	43950, 43950, -1000, -1000, 2677, 1791, -1000, -1000, 14597, -1000,
	5369, 5369, -1000, -1000, 26836, 43950, -1000, -14, -1000, 17,
	3117, -1000, -1000, -1000, 1279, -1000, -1000, 1294, 1103, 2984,
	43950, 1279, 1279, 1279, -1000, -1000, 16440, 43950, 43950, -1000,
	-1000, -1000, 3339, 8444, -1000, 33557, -1000, -1000, 38445, -1000,
	37834, 3339, 1813, -1000, 13365, 2040, 207, -1000, 269, -289,
	206, 1872, 199, 2134, -1000, -1000, 2495, 2494, 1542, -1000,
	1535, 2489, 1527, 1517, 2059, -1000, 63, -1000, 3115, 1109,
	-1000, 2675, -1000, 1505, 3043, -1000, 1277, -1000, 1790, 1492,
	-1000, -1000, 189, 10290, 10290, 10290, 1109, 1486, 3034, 1277,
	3117, 2369, -1000, 1269, -1000, 2108, 1429, 177, -1000, -1000,
	-1000, 43950, 756, 2366, 1480, 37223, 1175, -1000, 808, 1424,
	1422, -1000, 35390, 292, 35390, -1000, 35390, -1000, -1000, 395,
	-1000, 43950, 3111, -1000, -1000, -1000, 2332, 1787, -316, 43950,
	-1000, -1000, -1000, -1000, -1000, 1477, -1000, 834, 834, 3527,
	3637, -1000, 12129, -1000, 12129, 3183, -1000, 1807, -1000, 10290,
	2028, 46963, 10290, 46963, 1755, 24392, 43950, -1000, -1000, 10290,
	10290, -1000, 3159, -1000, -1000, -1000, -1000, 10290, 10290, 2241,
	-1000, 43950, -1000, -1000, -1000, -1000, 24392, -1000, 12129, -1000,
	-1000, -1000, -1000, 10290, 1223, 1223, 3148, 1476, 119, 119,
	119, 3109, 3057, 2974, 1470, 119, 2961, 2957, 2908, 2900,
	2893, 2885, 2852, 2847, 2764, 2713, -1000, 2673, -1000, -1000,
	1928, 10903, 7831, -1000, -1000, 311, 1268, 2058, 2361, 120,
	-1000, 1786, -1000, 43950, 1083, -1000, -1000, -1000, 970, 428,
	-1000, 280, 2488, 1260, -1000, -1000, 43950, -1000, -1000, -1000,
	16440, 2652, 2668, 2652, 129, 1653, 653, 35390, 648, -1000,
	43950, 1985, 1784, 2979, 731, 3107, 43950, 2667, 422, 2666,
	2661, 3147, 443, 47272, 43950, 1252, -1000, 1400, 3817, -1000,
	43950, -1000, 2111, -1000, 1675, -1000, -1000, 3339, -1000, -1000,
	10290, 10290, 3339, 1675, 1675, -1000, 1014, 1731, -1000, 43950,
	-1000, -1000, 443, 47272, 3145, 46998, 518, 2274, -1000, 43950,
	-1000, -1000, -1000, 870, -1000, 954, 755, 43950, 1891, 954,
	1889, 2659, -1000, -1000, 43950, 43950, 43950, 43950, -1000, -1000,
	43950, -1000, 43950, 43950, 43950, 43950, 43950, 36612, -1000, 43950,
	43950, -1000, 43950, 1888, 43950, 1883, 3191, -1000, 1653, 1653,
	928, -1000, -1000, 612, -1000, 36612, 2038, 2033, 2032, 2027,
	2360, 2359, 2358, 1653, 1653, 2024, 2356, 36001, 2350, 1144,
	2013, 2012, 2009, 2035, 2348, 878, -1000, 2347, 2015, 2011,
	2005, 43950, 2657, 2273, -1000, -1000, 129, 1653, 354, 43950,
	1768, 653, 465, -27, 21948, 43950, 33557, 33557, 33557, 33557,
	-1000, 3014, 3010, -1000, 3008, 3007, 3020, 43950, 33557, 2652,
	-1000, 36001, -1000, -1000, -1000, 1661, 1465, 2977, 1027, 10290,
	-1000, -1000, 24, 18, -1000, -1000, -1000, 35390, 2345, 538,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 3257, 43950, 43950,
	728, 2487, 1253, -1000, -1000, -1000, 47272, 2638, 2638, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2638, 2638,
	2651, -1000, -1000, 2637, 2637, 2637, 2585, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2639, 2639, 2648,
	2648, 2639, -1000, -1000, 3337, -1000, 1249, -1000, -1000, 1394,
	-1000, 3337, 1833, -301, 13365, 1826, 1509, -1000, 10290, 13365,
	10290, -236, 346, -240, -1000, -1000, -1000, 2339, -1000, -1000,
	-1000, 2006, -1000, 2004, -1000, 159, 166, 1882, -205, 7831,
	392, 43950, -205, 43950, 7831, -1000, 43950, 1767, 1759, 1758,
	200, 192, 184, 391, -205, 3257, 63, 10290, 3070, -1000,
	-1000, 43950, 2001, -1000, -1000, -1000, 3346, 35390, 2111, 1572,
	34779, -1000, 316, -1000, 254, 574, 2338, -1000, 840, 118,
	2335, 2332, -1000, -1000, -1000, -1000, 12129, 1533, -1000, -1000,
	-1000, 2134, 10290, 2485, -1000, 947, 947, 2224, 2484, 2482,
	-1000, 2638, 2638, -1000, 2585, 2637, 2585, 947, 947, 2481,
	-1000, 1929, 2655, -1000, 2634, 2600, 10290, -1000, 2477, 3331,
	1333, -44, -172, 119, 119, -1000, -1000, -1000, -1000, 119,
	119, 119, 119, -1000, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 708, -85, -261, -92, -262, -1000,
	2475, 1241, -1000, -1000, -1000, -1000, -1000, 3506, 1238, -1000,
	-1000, 2332, 2315, 806, 1010, 43950, -1000, -1000, -1000, 43950,
	2312, 2300, 1066, 47272, 2474, 3143, 15829, 3140, 2110, -1000,
	-1000, -1000, 26225, 548, -1000, -1000, -1000, 698, 287, 1999,
	514, -1000, 43950, 384, 3060, 1745, 2297, 43950, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 3107, -1000, 898, 435, 32335,
	13986, -1000, 423, 43950, 15829, 15829, 423, 437, 1678, -1000,
	706, 1122, 135, 33557, 43950, -1000, 32946, 2472, -1000, 1103,
	3339, -1000, 2134, 2134, -318, 3339, 3339, 1743, 1675, -1000,
	437, -1000, 423, -1000, 1804, 17662, 501, 440, 436, -1000,
	640, -1000, -1000, 704, 3085, 47272, -1000, 43950, -1000, 43950,
	-1000, 43950, 43950, 755, 10290, 3085, 43950, 802, -1000, -1000,
	1070, 426, 407, 707, 707, 1213, -1000, 3151, -1000, -1000,
	1207, -1000, -1000, -1000, -1000, 43950, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 24392, 24392, 3206, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2294,
	2293, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	43950, 1464, -1000, 1742, 2110, 26225, 1738, 1684, 2292, 548,
	1985, 1734, 2106, 43950, -1000, 1116, 43950, 43950, -1000, 1231,
	-1000, 1732, 2943, 2976, 2943, -1000, -1000, -1000, -1000, 2988,
	-1000, 2866, -1000, -1000, 1231, -1000, -1000, -1000, -1000, -1000,
	1027, -1000, 3255, 954, 954, 954, 2470, -1000, -1000, -1000,
	1175, 2468, -1000, -1000, -1000, 3362, -1000, -1000, -1000, -1000,
	-1000, -1000, 16440, 3101, 3332, 3322, 34168, 3332, -1000, -301,
	1697, -1000, 1982, 195, 1851, 43950, -1000, -1000, -1000, 2466,
	2465, -211, 170, 3319, 3318, 983, -1000, 2464, 1153, -205,
	-1000, -1000, 1109, -1000, -1000, -1000, 10290, 10290, 10290, -1000,
	-1000, -1000, -205, -1000, 1109, -1000, 159, -1000, -1000, 3093,
	-1000, -1000, 2111, -1000, 253, -1000, -1000, -1000, -1000, -1000,
	-1000, 202, -1000, 43950, -1000, 1127, 114, -1000, 2134, -1000,
	-1000, -1000, -1000, -1000, 46963, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 10290, -1000, -1000, -1000,
	2553, -1000, -1000, 10290, 2463, 2289, 2456, 2288, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3367, -1000, 3313, 1447, 2432, 2424,
	1436, 2421, 2417, -1000, 10290, 2414, 3506, -1000, -1000, -285,
	43950, 3341, -1000, -1000, -1000, -1000, -1000, 860, 423, 2413,
	1125, -1000, -1000, -1000, -1000, 423, -1000, 2285, 208, -1000,
	-1000, -1000, -1000, 2284, 2278, 1998, -1000, -1000, 1990, 1493,
	225, -1000, -1000, -1000, -1000, -1000, -1000, 2106, 2014, 1728,
	-335, -1000, 2633, -1000, 1653, 1653, 1653, 43950, 1431, -1000,
	1653, 1653, 2412, -1000, -1000, 2410, 2405, -121, 723, 1707,
	1686, -1000, 1993, 25614, 33557, 32946, 1203, -1000, 1389, -1000,
	-1000, -1000, -1000, -1000, -1000, 2275, 3339, 723, -1000, 492,
	1991, 12129, 2632, 12129, 2614, 510, 2613, 1418, -1000, 43950,
	-1000, -1000, 43950, 319, 2605, -1000, 2602, 2919, 477, 2599,
	2597, 43950, 2522, -1000, 3085, 43950, 714, 3095, -1000, -1000,
	-1000, 399, -1000, -1000, 533, -1000, 43950, -1000, 43950, -1000,
	1529, -1000, 24392, -1000, -1000, 1402, -1000, 2273, 2272, -1000,
	208, 2269, 5369, -1000, -1000, 3060, 2256, -1000, 2255, -1000,
	43950, 1116, 1116, 3367, 43950, 7831, -1000, -1000, 10290, 2596,
	-1000, 10290, -1000, -1000, -1000, -1000, -1000, 2595, 3097, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1632, -1000, 10290, 10290,
	-1000, -1000, 747, 13365, -241, 340, -1000, -1000, -1000, -213,
	2253, -1000, -1000, 3309, 2243, 2128, 43950, -1000, -1000, 1109,
	173, 169, 154, 1109, -211, -1000, -1000, 1103, -1000, -1000,
	1196, 606, -1000, 2403, 2368, -1000, 2349, 119, -1000, 119,
	-1000, 242, 10290, -1000, 2231, -1000, -1000, -1000, 2229, -1000,
	-1000, 2151, -1000, 2373, 43950, 800, 1007, 47272, -122, -121,
	15829, -122, -1000, -1000, 394, -1000, -1000, 377, -1000, -1000,
	1970, 600, -1000, -1000, -1000, 1711, 1911, 2163, 30502, 24392,
	25003, 2217, -1000, -1000, 32335, 1632, 1632, 47324, 290, 47682,
	-1000, 2593, 1028, 1640, -1000, 1989, -1000, 1987, -1000, 3339,
	1203, 134, -1000, -1000, 1566, -349, -1000, 1028, 2274, 3300,
	-1000, 3058, 43950, 2890, 43950, 2592, 1708, 12129, -1000, 704,
	3031, -1000, -1000, 319, -1000, -1000, 1906, 12129, -1000, -1000,
	2215, 25003, 825, 1703, 1698, 864, 2591, -1000, 543, 3361,
	-1000, -1000, -1000, 920, 2590, -1000, 1881, 1869, -1000, 43950,
	-1000, 30502, 30502, 772, 772, 30502, 30502, 2587, 707, -1000,
	-1000, 12129, -1000, -1000, 1653, -1000, -1000, -1000, 1653, 1528,
	-1000, -1000, -1000, -1000, -1000, -1000, 2014, -1000, -1000, -1000,
	3277, -1000, -1000, 2134, 43950, 2134, 31724, -1000, 3297, 3293,
	-1000, 2134, 1077, -1000, -301, 43950, 43950, -215, 1986, -1000,
	2214, 167, -1000, -1000, 1082, -1000, -1000, -1000, -213, -217,
	77, 24392, 1692, -1000, -1000, -1000, -1000, -1000, 2371, -1000,
	621, -1000, -1000, -1000, 1077, 2246, 2171, -1000, -1000, 237,
	-288, 43950, -109, -1000, -1000, 408, -1000, -1000, -1000, 629,
	2118, -1000, -1000, 376, -1000, -1000, 2213, -1000, -1000, 112,
	-1000, 1666, 1396, -1000, 2585, 10290, -1000, -1000, -1000, -1000,
	-1000, -1000, 691, -1000, 423, 47617, -1000, 1222, -1000, 1196,
	691, 29280, 596, 314, -1000, 1983, -1000, -1000, 3367, -1000,
	-1000, 583, -1000, 505, -1000, 1378, -1000, 1366, 31113, 1981,
	2769, -1000, 47553, 830, -1000, -1000, 3527, -1000, -1000, -1000,
	-1000, -1000, -1000, 2206, 2204, -1000, -1000, -1000, -1000, -1000,
	1969, 2580, 3, 3195, 2194, -1000, -1000, 2579, 1357, 1339,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1320,
	1307, 30502, -1000, -1000, 3527, 1966, 24392, 1653, -1000, -1000,
	1292, 1285, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2578,
	-1000, -1000, 3292, -215, -1000, 2181, 152, 160, -1000, 2164,
	-1000, -1000, 561, -206, 138, 137, 110, -1000, -1000, -1000,
	10290, -1000, -1000, -1000, 43950, 783, 43950, 539, -1000, -1000,
	-1000, -1000, 197, -1000, -1000, -1000, -1000, -1000, 2163, 2154,
	-1000, 30502, 3151, 2117, 487, 3291, -1000, 47682, -1000, 1653,
	-1000, 487, 1282, -1000, 1653, 1653, -1000, 446, -1000, 1629,
	-1000, 1965, -1000, 3277, -1000, 441, -1000, 489, -1000, -1000,
	-1000, 1281, -1000, -1000, -1000, 47553, 499, -1000, 684, 2576,
	-1000, -1000, 2156, 10290, 2571, 1653, 2139, -105, 30502, 2910,
	2892, 2771, 2531, 1240, -1000, -1000, 24392, -1000, -1000, 29891,
	43950, 2128, -1000, -1000, 770, 151, 160, -1000, 3289, 165,
	3288, 3284, 1071, 1855, -1000, 132, 123, 113, -1000, -1000,
	-1000, -1000, 237, -295, 542, -1000, 306, -1000, -1000, -1000,
	342, -1000, -1000, 3151, -1000, 3283, 518, -1000, 24392, -1000,
	-1000, 29280, 1632, 1632, -1000, -1000, 1963, -1000, -1000, -1000,
	-1000, 1959, -1000, -1000, -1000, 1232, -1000, 43950, 869, 7218,
	-1000, 2102, -1000, 43950, -1000, 2964, -1000, 249, 1221, 342,
	772, 342, 772, 342, 772, 342, 772, 288, -1000, -1000,
	-1000, 1190, -1000, -1000, 2561, 1957, 170, 161, 3281, -1000,
	2128, 3279, 2128, 2128, -1000, 115, 561, -1000, -1000, -1000,
	-1000, 43950, 2152, -1000, -1000, -1000, -1000, 1653, 1653, 2150,
	2148, 416, -1000, -1000, -1000, 28669, 501, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 499, 47682, -1000, 7218, 1174, -1000,
	2134, -1000, 707, -1000, -1000, 2962, 2603, 3345, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 43950, 3192,
	23781, 141, -1000, -1000, -1000, 2136, -1000, 2128, -1000, -1000,
	1625, -1000, 237, -258, 1935, 1927, -1000, -1000, 43950, -1000,
	43950, 492, -1000, 47682, 1169, -1000, 7218, -1000, -1000, 3357,
	-1000, 3353, 828, 828, 342, 342, 342, 342, -1000, -1000,
	43950, -1000, 1164, -1000, -1000, -1000, 1388, -1000, -1000, -1000,
	-1000, 2121, -1000, -1000, -1000, 2115, -1000, -1000, -1000, 1145,
	2274, -1000, -1000, -1000, -1000, -1000, 1962, 560, -1000, 1053,
	-1000, 1605, -1000, 28058, 43950, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 43950, 6605, -1000, 1084, -1000, -1000, 2134, 43950,
	-1000,
}

var yyPgo = [...]int{
	0, 168, 3379, 240, 175, 3967, 100, 253, 230, 228,
	251, 3966, 3965, 3964, 3962, 3117, 3113, 3961, 3959, 3958,
	3938, 3937, 3936, 3933, 3932, 3931, 3930, 3929, 3927, 3926,
	3925, 3923, 3922, 3921, 3920, 3919, 3918, 3917, 3916, 3915,
	3914, 3913, 3912, 3911, 3910, 3909, 3908, 250, 3907, 3906,
	3905, 3904, 3903, 3902, 3901, 3900, 3898, 3897, 3896, 3895,
	3894, 3879, 3875, 3874, 3873, 3865, 3863, 3862, 3861, 3860,
	3857, 3854, 3853, 3852, 3850, 3849, 3847, 3846, 3845, 244,
	3844, 3843, 225, 3842, 3089, 3840, 3839, 3838, 3836, 3835,
	3834, 3829, 236, 3827, 3826, 3825, 3824, 3823, 3822, 3821,
	3819, 3818, 3817, 3816, 246, 3813, 3812, 3811, 3810, 231,
	3809, 206, 3803, 170, 138, 3795, 3793, 3792, 3791, 3790,
	3789, 3787, 229, 190, 72, 3786, 52, 3769, 3768, 214,
	3767, 151, 3766, 148, 3764, 3760, 3759, 3758, 3757, 3756,
	3755, 3752, 3748, 3747, 3746, 3745, 3744, 3743, 3742, 3741,
	3740, 3732, 95, 3728, 259, 3724, 75, 3723, 3721, 127,
	3720, 155, 137, 258, 1622, 256, 242, 185, 177, 102,
	3718, 349, 3717, 233, 224, 169, 32, 3716, 133, 3715,
	260, 48, 43, 248, 150, 60, 182, 122, 3714, 217,
	109, 108, 3712, 3711, 145, 3709, 241, 178, 3708, 107,
	3707, 3706, 3705, 3704, 3703, 194, 189, 3702, 3699, 128,
	3698, 3697, 136, 3692, 77, 118, 167, 117, 3691, 1545,
	119, 134, 123, 96, 3690, 76, 3685, 3684, 3680, 3678,
	181, 3676, 3662, 132, 68, 3661, 3657, 3656, 70, 3655,
	73, 3653, 28, 3651, 66, 3650, 3649, 3645, 3643, 3642,
	3639, 3637, 3633, 3632, 3631, 3630, 3629, 59, 3628, 3626,
	9, 16, 19, 3624, 29, 3623, 165, 3617, 3615, 3613,
	3612, 3611, 94, 89, 3610, 90, 163, 3609, 7, 30,
	74, 3608, 3607, 219, 187, 101, 152, 3604, 308, 3602,
	3601, 3600, 149, 3598, 618, 3596, 3595, 3593, 3592, 3591,
	3590, 141, 3589, 209, 41, 3588, 135, 139, 3582, 45,
	51, 116, 205, 3579, 3576, 3575, 629, 208, 104, 39,
	0, 3574, 172, 3573, 3571, 3570, 254, 3568, 237, 197,
	159, 331, 275, 243, 3567, 3565, 71, 121, 3562, 161,
	36, 55, 130, 93, 23, 361, 3561, 14, 8, 200,
	3559, 198, 3558, 272, 18, 186, 146, 3557, 3556, 34,
	261, 3553, 3552, 3551, 125, 3545, 3544, 162, 99, 3543,
	3542, 3541, 3540, 37, 3539, 44, 13, 3538, 131, 3537,
	239, 3536, 247, 140, 180, 179, 160, 220, 232, 82,
	81, 3534, 1750, 156, 97, 17, 3533, 222, 3532, 328,
	126, 3531, 86, 3530, 235, 263, 202, 3529, 183, 12,
	49, 40, 31, 47, 10, 245, 195, 3528, 3527, 24,
	50, 3524, 58, 3523, 22, 3521, 3520, 3519, 79, 5,
	3518, 3517, 21, 20, 3514, 38, 213, 166, 124, 91,
	69, 3513, 3512, 53, 153, 3510, 158, 174, 154, 3509,
	78, 3508, 3504, 3503, 864, 3502, 252, 3501, 3500, 3498,
	3497, 3496, 3494, 3493, 3492, 226, 3491, 106, 46, 3490,
	3488, 3487, 3486, 84, 144, 3485, 3484, 3483, 3482, 33,
	142, 3481, 15, 3466, 27, 25, 35, 3465, 98, 3464,
	3, 184, 3463, 3460, 4, 3459, 3458, 1, 2, 3456,
	3455, 129, 3454, 92, 26, 164, 105, 3453, 3448, 88,
	215, 143, 3447, 3446, 103, 249, 196, 3445, 85, 238,
	255, 3444, 207, 3443, 3442, 3441, 3440, 3439, 3437, 1142,
	3436, 3435, 234, 65, 80, 3434, 227, 114, 11, 3433,
	83, 157, 113, 115, 61, 87, 3432, 112, 192, 3429,
	191, 3426, 3425, 3422, 111, 3421, 3420, 3416, 3412, 188,
	3411, 3410, 193, 223, 3409, 3408, 306, 3407, 3405, 3404,
	3397, 3396, 3395, 3394, 3393, 3391, 3383, 257, 277, 3382,
}

//line mysql_sql.y:12060
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() tree.GroupBy {
	v, _ := st.union.(tree.GroupBy)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) snapshotObjectUnion() tree.ObejectInfo {
	v, _ := st.union.(tree.ObejectInfo)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) upgrade_targetUnion() *tree.Target {
	v, _ := st.union.(*tree.Target)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 572, 575, 575, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 119, 119, 149, 551, 551,
	120, 120, 120, 120, 120, 120, 120, 118, 557, 557,
	557, 558, 558, 115, 138, 137, 140, 140, 139, 139,
	136, 136, 132, 135, 135, 134, 134, 133, 128, 130,
	130, 129, 131, 131, 116, 104, 117, 500, 500, 499,
	499, 498, 498, 451, 451, 497, 497, 497, 496, 496,
	496, 495, 495, 494, 494, 493, 493, 491, 491, 492,
	490, 489, 489, 489, 487, 487, 487, 483, 483, 485,
	484, 484, 486, 478, 478, 481, 481, 479, 479, 479,
	479, 482, 477, 477, 477, 476, 476, 103, 103, 103,
	394, 394, 102, 102, 408, 408, 408, 408, 408, 406,
	406, 406, 406, 406, 406, 405, 405, 404, 404, 409,
	409, 407, 407, 407, 407, 407, 407, 407, 407, 407,
	407, 407, 407, 407, 407, 407, 407, 407, 407, 407,
	407, 407, 407, 407, 407, 407, 407, 407, 407, 407,
	407, 407, 407, 407, 407, 407, 407, 407, 407, 407,
	407, 407, 407, 407, 407, 407, 407, 407, 407, 407,
	407, 407, 93, 93, 93, 93, 93, 98, 98, 98,
	563, 563, 562, 562, 564, 564, 564, 564, 565, 565,
	96, 96, 96, 97, 403, 403, 403, 94, 95, 95,
	393, 393, 398, 398, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 402, 402, 402,
	400, 400, 399, 399, 401, 401, 87, 87, 87, 90,
	89, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	88, 88, 88, 88, 88, 88, 83, 83, 83, 83,
	83, 82, 82, 84, 84, 390, 390, 389, 99, 99,
	100, 560, 560, 559, 561, 561, 561, 561, 101, 107,
	107, 107, 107, 107, 107, 107, 107, 106, 106, 109,
	109, 108, 110, 92, 92, 92, 92, 92, 92, 91,
	91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
	91, 91, 525, 525, 525, 527, 527, 324, 325, 576,
	327, 323, 323, 323, 521, 521, 522, 523, 524, 524,
	524, 105, 14, 195, 195, 426, 426, 11, 11, 11,
	11, 11, 11, 11, 11, 13, 81, 86, 86, 265,
	265, 270, 270, 271, 271, 271, 276, 276, 277, 277,
	266, 266, 266, 266, 266, 266, 266, 266, 266, 266,
	266, 266, 266, 266, 266, 266, 266, 266, 266, 266,
	266, 266, 252, 252, 252, 247, 247, 247, 247, 248,
	248, 249, 249, 250, 250, 250, 250, 251, 251, 317,
	317, 272, 272, 272, 274, 274, 273, 269, 267, 267,
	267, 267, 267, 267, 267, 268, 268, 268, 268, 275,
	275, 79, 85, 85, 85, 539, 539, 80, 550, 550,
	454, 454, 339, 339, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	459, 460, 334, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 54, 57, 58, 53, 53,
	53, 379, 379, 52, 577, 577, 312, 312, 67, 66,
	56, 68, 69, 70, 71, 72, 73, 51, 65, 65,
	65, 65, 65, 65, 65, 65, 76, 472, 472, 579,
	579, 579, 74, 75, 453, 453, 453, 64, 63, 62,
	61, 60, 60, 50, 50, 49, 49, 55, 144, 59,
	145, 145, 331, 331, 331, 333, 333, 329, 337, 337,
	578, 578, 422, 422, 332, 332, 48, 48, 48, 48,
	77, 330, 330, 311, 328, 328, 328, 12, 12, 10,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 26, 27, 29, 387, 387,
	384, 28, 20, 19, 19, 23, 22, 18, 18, 21,
	24, 25, 25, 9, 9, 9, 9, 15, 15, 16,
	168, 168, 220, 220, 533, 533, 529, 529, 530, 530,
	530, 531, 531, 532, 532, 111, 466, 466, 466, 466,
	466, 466, 8, 8, 190, 190, 465, 465, 465, 465,
	465, 465, 391, 391, 391, 510, 510, 510, 511, 189,
	189, 184, 184, 467, 467, 356, 512, 512, 475, 475,
	474, 474, 473, 473, 187, 187, 188, 188, 171, 171,
	123, 123, 480, 480, 480, 480, 488, 488, 450, 450,
	257, 257, 304, 304, 305, 305, 161, 161, 162, 162,
	162, 162, 162, 162, 566, 566, 567, 568, 569, 569,
	570, 570, 570, 571, 571, 571, 571, 571, 518, 518,
	520, 520, 519, 186, 186, 182, 182, 183, 183, 183,
	181, 181, 180, 179, 179, 178, 176, 176, 176, 177,
	177, 177, 194, 194, 164, 164, 164, 163, 163, 163,
	163, 163, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 165, 165, 526, 526, 526, 455,
	455, 455, 462, 462, 285, 285, 286, 286, 284, 284,
	166, 166, 167, 167, 167, 167, 283, 283, 282, 169,
	169, 175, 174, 174, 170, 170, 170, 170, 293, 293,
	292, 292, 292, 292, 114, 121, 121, 122, 193, 193,
	291, 290, 290, 290, 192, 192, 191, 191, 185, 185,
	173, 173, 173, 173, 289, 172, 287, 556, 556, 555,
	555, 554, 552, 552, 552, 553, 553, 553, 553, 502,
	502, 502, 502, 502, 318, 318, 318, 322, 322, 321,
	321, 321, 321, 321, 326, 7, 7, 7, 7, 7,
	7, 7, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 39, 204, 205, 40, 206,
	206, 207, 207, 208, 208, 209, 210, 211, 211, 211,
	211, 38, 196, 196, 197, 197, 198, 198, 199, 200,
	200, 200, 203, 201, 202, 202, 574, 574, 573, 37,
	37, 30, 153, 153, 154, 154, 154, 156, 156, 253,
	253, 253, 155, 155, 157, 157, 157, 534, 536, 536,
	538, 537, 537, 537, 540, 540, 540, 540, 540, 541,
	541, 541, 541, 542, 542, 31, 141, 146, 545, 545,
	545, 544, 544, 546, 546, 547, 547, 308, 308, 309,
	309, 151, 152, 152, 148, 143, 159, 159, 159, 159,
	159, 160, 160, 142, 147, 150, 535, 543, 543, 543,
	388, 388, 385, 386, 386, 383, 382, 382, 382, 549,
	549, 548, 548, 548, 319, 319, 32, 378, 378, 380,
	381, 381, 381, 372, 372, 372, 372, 36, 376, 376,
	377, 377, 377, 377, 377, 377, 377, 373, 373, 375,
	375, 371, 371, 371, 371, 371, 371, 371, 35, 158,
	158, 370, 370, 367, 367, 365, 365, 366, 366, 364,
	364, 364, 368, 368, 43, 78, 44, 45, 46, 42,
	369, 369, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 125, 124, 124, 124, 124, 124, 127, 127, 307,
	307, 306, 306, 126, 254, 254, 41, 232, 232, 442,
	442, 437, 437, 437, 437, 437, 457, 457, 457, 438,
	438, 438, 439, 439, 439, 441, 441, 441, 440, 440,
	440, 440, 440, 456, 456, 458, 458, 458, 410, 410,
	411, 411, 411, 414, 414, 429, 429, 430, 430, 428,
	428, 435, 435, 434, 434, 433, 433, 432, 432, 431,
	431, 431, 431, 425, 425, 424, 424, 412, 412, 412,
	412, 412, 413, 413, 413, 423, 423, 427, 427, 281,
	281, 280, 280, 240, 240, 241, 241, 279, 279, 238,
	238, 239, 239, 239, 278, 278, 278, 278, 278, 278,
	278, 278, 278, 278, 278, 278, 278, 278, 278, 278,
	278, 278, 278, 278, 278, 278, 278, 278, 278, 278,
	278, 278, 278, 278, 278, 278, 278, 278, 278, 508,
	508, 509, 243, 243, 255, 255, 255, 255, 255, 255,
	242, 242, 244, 244, 221, 221, 219, 219, 219, 219,
	219, 219, 219, 219, 212, 212, 213, 213, 214, 214,
	214, 218, 218, 217, 217, 217, 217, 215, 215, 216,
	216, 216, 216, 216, 216, 396, 396, 505, 505, 506,
	506, 501, 501, 501, 504, 504, 504, 504, 504, 504,
	504, 507, 507, 507, 503, 503, 222, 302, 302, 302,
	320, 320, 320, 320, 301, 301, 301, 237, 237, 236,
	236, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 234, 234, 234,
	234, 234, 234, 395, 395, 335, 335, 336, 336, 264,
	263, 263, 263, 263, 263, 261, 262, 260, 260, 260,
	260, 260, 259, 259, 258, 258, 258, 374, 374, 256,
	256, 246, 246, 246, 245, 245, 245, 436, 343, 343,
	343, 343, 343, 343, 343, 343, 343, 343, 343, 343,
	343, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 299, 299, 299,
	300, 300, 300, 300, 300, 300, 300, 300, 346, 346,
	352, 352, 517, 517, 516, 223, 223, 223, 224, 224,
	224, 224, 224, 224, 224, 224, 224, 233, 233, 233,
	419, 419, 419, 419, 420, 420, 420, 420, 421, 421,
	421, 417, 417, 418, 418, 357, 358, 358, 463, 463,
	464, 464, 415, 415, 416, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 471, 471, 471,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 528, 528, 528, 513,
	513, 513, 514, 514, 514, 514, 514, 514, 514, 514,
	514, 514, 514, 514, 515, 515, 515, 515, 515, 515,
	515, 515, 515, 515, 515, 515, 515, 515, 515, 515,
	515, 297, 297, 297, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 359, 359, 360, 360, 468, 468, 468, 468,
	468, 468, 469, 469, 470, 470, 470, 470, 461, 461,
	461, 461, 461, 461, 461, 461, 461, 461, 461, 461,
	461, 461, 461, 461, 461, 461, 461, 461, 461, 461,
	461, 461, 461, 461, 461, 461, 461, 344, 294, 294,
	294, 361, 353, 353, 354, 354, 355, 355, 347, 347,
	347, 347, 347, 347, 348, 348, 350, 350, 350, 350,
	350, 350, 350, 350, 350, 350, 350, 342, 342, 342,
	342, 342, 342, 342, 342, 342, 342, 342, 349, 349,
	351, 351, 363, 363, 363, 362, 362, 362, 362, 362,
	362, 362, 235, 235, 235, 235, 341, 341, 341, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 225, 225, 225, 225, 229, 229, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 230, 230, 230, 230, 230, 228, 228, 228, 228,
	228, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 112,
	113, 113, 227, 303, 303, 443, 443, 446, 446, 444,
	444, 445, 447, 447, 447, 448, 448, 448, 449, 449,
	449, 452, 452, 310, 310, 310, 316, 316, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 6, 6, 6, 1, 2,
	5, 6, 8, 10, 10, 12, 14, 4, 0, 1,
	1, 0, 1, 5, 2, 2, 6, 9, 6, 9,
	4, 7, 8, 0, 1, 1, 2, 4, 6, 1,
	2, 4, 0, 2, 10, 10, 2, 0, 2, 1,
	3, 3, 3, 0, 2, 1, 3, 5, 0, 2,
	3, 1, 3, 1, 1, 1, 3, 1, 1, 1,
	1, 0, 3, 3, 0, 3, 3, 0, 1, 3,
	0, 1, 3, 0, 2, 1, 2, 3, 4, 3,
	3, 1, 0, 1, 1, 0, 1, 8, 5, 7,
	0, 3, 8, 5, 1, 3, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 4, 1,
	3, 1, 2, 2, 2, 2, 2, 2, 2, 1,
	2, 2, 2, 2, 1, 1, 2, 2, 1, 1,
	1, 1, 1, 2, 2, 2, 1, 2, 1, 2,
	2, 1, 2, 1, 1, 2, 2, 1, 1, 1,
	3, 2, 2, 2, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 4, 4,
	1, 3, 3, 1, 2, 2, 2, 1, 2, 2,
	3, 4, 4, 6, 1, 1, 1, 2, 4, 6,
	1, 4, 1, 3, 3, 4, 4, 4, 4, 3,
	3, 2, 4, 4, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 2,
	2, 0, 1, 4, 2, 4, 1, 5, 3, 2,
	1, 2, 2, 4, 4, 5, 2, 1, 3, 4,
	4, 1, 2, 9, 7, 1, 3, 3, 1, 1,
	3, 1, 3, 2, 1, 2, 1, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 4, 2,
	4, 3, 3, 1, 1, 1, 1, 1, 1, 2,
	3, 4, 7, 2, 3, 3, 4, 5, 3, 4,
	4, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 2, 1, 1, 1,
	1, 6, 4, 1, 1, 0, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 10, 7, 4, 4, 1,
	3, 1, 6, 3, 3, 3, 1, 1, 1, 3,
	2, 4, 5, 5, 6, 5, 5, 3, 2, 2,
	1, 3, 4, 3, 7, 5, 8, 2, 2, 1,
	3, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 0, 1, 2, 1, 3, 2, 1, 2, 2,
	1, 2, 3, 2, 2, 3, 6, 3, 3, 1,
	1, 7, 7, 8, 8, 0, 4, 7, 0, 3,
	0, 2, 0, 1, 1, 1, 1, 4, 2, 2,
	3, 3, 4, 5, 3, 4, 4, 2, 2, 2,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 3, 3, 2, 5,
	5, 0, 2, 7, 0, 1, 0, 1, 5, 5,
	3, 3, 2, 4, 4, 4, 4, 4, 1, 1,
	1, 3, 3, 1, 1, 1, 6, 0, 1, 1,
	1, 1, 5, 5, 0, 1, 1, 3, 3, 3,
	4, 7, 7, 5, 4, 7, 8, 3, 3, 2,
	3, 4, 0, 2, 2, 0, 2, 2, 0, 5,
	1, 1, 1, 1, 0, 1, 5, 5, 5, 4,
	3, 1, 3, 1, 1, 3, 5, 2, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 4, 4, 1, 3,
	1, 4, 6, 6, 4, 4, 4, 4, 4, 3,
	6, 3, 5, 1, 1, 2, 2, 11, 8, 9,
	1, 3, 2, 4, 0, 2, 0, 1, 1, 1,
	1, 0, 1, 0, 1, 4, 2, 1, 5, 4,
	4, 2, 5, 5, 1, 3, 2, 1, 5, 4,
	4, 2, 0, 5, 4, 0, 1, 3, 3, 1,
	3, 1, 3, 1, 3, 4, 0, 1, 0, 1,
	1, 3, 1, 1, 0, 4, 1, 3, 2, 1,
	0, 8, 0, 4, 7, 4, 0, 2, 0, 2,
	0, 2, 0, 4, 1, 3, 1, 1, 6, 4,
	5, 7, 4, 5, 0, 1, 3, 8, 0, 6,
	0, 4, 6, 1, 1, 1, 1, 1, 2, 3,
	1, 3, 6, 0, 3, 0, 1, 2, 4, 4,
	0, 1, 3, 1, 3, 3, 0, 1, 1, 0,
	2, 2, 0, 2, 3, 3, 3, 1, 3, 3,
	3, 3, 1, 2, 2, 1, 2, 2, 1, 2,
	2, 1, 2, 2, 7, 7, 1, 1, 1, 0,
	1, 1, 1, 1, 0, 2, 0, 3, 0, 2,
	1, 3, 1, 2, 3, 5, 0, 1, 2, 1,
	3, 1, 1, 1, 4, 4, 4, 3, 2, 2,
	2, 3, 2, 3, 4, 1, 3, 4, 0, 2,
	1, 1, 2, 2, 0, 1, 2, 4, 1, 3,
	1, 3, 2, 3, 1, 4, 3, 0, 1, 1,
	2, 5, 2, 2, 2, 0, 2, 3, 3, 0,
	1, 3, 1, 3, 0, 1, 2, 1, 1, 0,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 7, 1, 1, 7, 1,
	3, 0, 1, 1, 3, 1, 3, 0, 1, 1,
	1, 14, 1, 3, 0, 1, 1, 3, 1, 1,
	2, 4, 1, 1, 1, 1, 0, 1, 2, 9,
	9, 7, 1, 2, 3, 3, 3, 0, 4, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 1,
	4, 1, 1, 1, 3, 3, 4, 3, 3, 0,
	1, 1, 1, 0, 2, 7, 8, 8, 0, 3,
	3, 0, 3, 0, 3, 0, 5, 1, 3, 0,
	3, 3, 0, 2, 9, 7, 0, 2, 2, 3,
	3, 0, 2, 4, 4, 4, 1, 0, 2, 2,
	1, 3, 2, 1, 3, 2, 1, 3, 2, 0,
	1, 3, 4, 3, 1, 1, 4, 1, 3, 1,
	1, 1, 1, 0, 1, 1, 1, 11, 0, 2,
	3, 3, 2, 2, 3, 1, 1, 1, 3, 3,
	4, 0, 2, 2, 2, 2, 2, 2, 6, 0,
	4, 1, 1, 0, 3, 0, 1, 1, 2, 4,
	4, 4, 0, 1, 8, 2, 4, 4, 4, 9,
	0, 2, 11, 9, 11, 8, 6, 9, 7, 10,
	7, 2, 2, 9, 4, 5, 3, 0, 4, 1,
	3, 0, 3, 6, 0, 2, 10, 0, 2, 0,
	2, 0, 3, 2, 4, 3, 0, 2, 1, 0,
	2, 3, 0, 2, 3, 0, 2, 1, 0, 3,
	2, 4, 3, 0, 1, 0, 1, 1, 0, 6,
	0, 3, 5, 0, 4, 0, 3, 1, 3, 4,
	5, 0, 3, 1, 3, 2, 3, 1, 2, 0,
	4, 6, 5, 0, 2, 0, 2, 4, 5, 4,
	5, 1, 5, 6, 5, 0, 3, 0, 1, 1,
	3, 3, 3, 0, 4, 1, 3, 3, 3, 0,
	1, 1, 3, 2, 3, 3, 3, 4, 4, 3,
	3, 3, 3, 4, 4, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 1, 5, 4, 1,
	3, 3, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 3, 6, 6,
	6, 8, 8, 8, 0, 1, 1, 3, 1, 1,
	1, 1, 1, 7, 9, 7, 9, 2, 1, 7,
	9, 7, 9, 8, 5, 0, 1, 0, 1, 1,
	1, 1, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 3, 1, 3, 5,
	1, 1, 1, 1, 1, 3, 5, 0, 1, 1,
	2, 1, 2, 2, 1, 1, 2, 2, 2, 3,
	3, 2, 2, 1, 5, 6, 4, 1, 1, 1,
	5, 4, 1, 1, 2, 0, 1, 1, 2, 5,
	0, 1, 1, 2, 2, 3, 3, 1, 1, 2,
	2, 2, 0, 1, 2, 2, 2, 0, 3, 0,
	3, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 3, 5, 2, 2, 2, 2,
	4, 1, 1, 2, 5, 6, 8, 6, 6, 6,
	1, 1, 1, 1, 1, 1, 3, 4, 4, 4,
	7, 9, 7, 7, 7, 9, 7, 7, 0, 2,
	0, 1, 1, 2, 4, 1, 2, 2, 1, 2,
	2, 1, 2, 2, 2, 2, 2, 0, 1, 1,
	1, 2, 2, 2, 2, 2, 2, 2, 1, 1,
	1, 2, 5, 0, 1, 3, 0, 1, 0, 2,
	0, 2, 0, 1, 6, 8, 8, 6, 6, 5,
	5, 5, 6, 6, 6, 6, 5, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 1, 1, 1,
	4, 4, 6, 8, 6, 4, 5, 4, 4, 4,
	3, 4, 6, 6, 7, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 8, 4, 2, 3, 2, 4, 2,
	2, 4, 6, 2, 2, 4, 6, 4, 2, 4,
	4, 4, 0, 1, 2, 3, 1, 1, 1, 1,
	1, 1, 0, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 1,
	1, 3, 0, 1, 1, 3, 1, 3, 3, 3,
	3, 3, 2, 1, 1, 1, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 1, 3, 4, 4,
	5, 4, 5, 3, 4, 5, 6, 1, 0, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 1, 1,
	2, 3, 1, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 2, 1, 2, 2, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 4, 4, 1, 2,
	3, 5, 1, 1, 3, 0, 1, 0, 3, 0,
	3, 3, 0, 3, 5, 0, 3, 5, 0, 1,
	1, 0, 1, 1, 2, 2, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1,
}

var yyChk = [...]int{
	-1000, -572, -575, -2, -5, 620, -1, -4, -113, -87,
	-7, -14, -115, -116, -8, -111, -9, -10, -12, -91,
	-106, -108, -110, -109, -47, -11, -105, -82, -83, -93,
	-99, -102, -103, -104, -117, -112, -114, -161, -118, -119,
	-120, 610, -88, -89, -90, -33, -32, -31, -30, -141,
	-146, -149, 544, 616, 447, 14, 496, -15, -16, -518,
	-17, 259, -323, -324, -325, -327, -576, -48, -49, -50,
	-60, -61, -62, -63, -64, -74, -75, -76, -51, -52,
	-53, -56, -54, -67, -66, -68, -69, -70, -71, -72,
	-73, -55, -59, -144, -145, -77, -57, -78, -58, -80,
	-79, -85, -81, -86, -143, -148, -13, 234, -84, 76,
	-94, -95, -96, -97, -98, -100, -101, 371, 377, 434,
	609, 61, -162, -164, 627, 628, 631, 159, 160, 162,
	163, -34, -35, -36, -37, -38, -39, -41, -40, -42,
	-43, -44, -45, -46, 230, 16, 539, -18, -21, -19,
	-22, -20, -28, -29, -27, -24, -26, -142, -25, -147,
	-23, -150, 254, 253, 38, 320, 321, 322, 375, 252,
	231, 15, 31, 42, 351, -163, 82, 531, 532, 534,
	232, -165, 13, 634, -6, -3, -2, -128, -132, -136,
	-139, -140, -137, -138, -4, -113, 117, 244, 611, -320,
	367, 612, 614, 613, 85, 93, -313, -315, 447, 259,
	371, 377, 609, 628, 631, 546, 547, 548, 549, 550,
	551, 552, 553, 555, 556, 557, 558, 559, 560, 561,
	571, 572, 562, 563, 564, 565, 566, 567, 568, 569,
	573, 574, 575, 576, 577, 578, 579, 580, 581, 582,
	583, 584, 585, 586, 499, 596, 597, 598, 599, 527,
	554, 590, 591, 592, 593, 349, 350, 536, 271, 295,
	402, 301, 308, 159, 178, 172, 200, 192, 532, 167,
	275, 313, 276, 92, 162, 482, 107, 459, 431, 165,
	290, 292, 294, 528, 529, 361, 297, 526, 296, 298,
	300, 530, 277, 352, 188, 183, 289, 273, 181, 278,
	40, 279, 205, 280, 281, 541, 455, 348, 461, 305,
	52, 429, 182, 456, 293, 458, 209, 213, 473, 474,
	176, 177, 463, 476, 204, 207, 208, 251, 345, 346,
	43, 538, 263, 477, 211, 203, 199, 485, 309, 307,
	202, 175, 198, 274, 65, 215, 214, 216, 425, 426,
	427, 428, 282, 283, 365, 472, 195, 184, 353, 168,
	23, 480, 258, 460, 378, 284, 302, 310, 210, 212,
	265, 270, 540, 531, 433, 269, 306, 478, 180, 262,
	291, 257, 481, 169, 534, 380, 285, 163, 299, 475,
	484, 64, 393, 174, 166, 248, 160, 267, 272, 286,
	287, 288, 525, 312, 311, 303, 533, 196, 264, 201,
	186, 173, 197, 161, 266, 483, 394, 607, 351, 412,
	194, 191, 268, 241, 479, 462, 164, 416, 395, 189,
	314, 603, 604, 605, 366, 344, 315, 316, 187, 255,
	453, 454, 319, 422, 335, 396, 432, 403, 397, 222,
	223, 323, 465, 467, 206, 606, 324, 325, 326, 457,
	327, 328, 329, 330, 370, 56, 58, 94, 97, 96,
	632, 629, 630, 63, 29, 356, 359, 391, 398, 337,
	608, 537, 334, 338, 339, 360, 25, 414, 382, 418,
	417, 48, 49, 50, 53, 54, 55, 57, 59, 60,
	51, 524, 375, 388, 486, 45, 47, 385, 27, 362,
	413, 435, 333, 415, 446, 46, 444, 445, 466, 26,
	364, 363, 62, 44, 421, 423, 424, 317, 331, 373,
	617, 487, 368, 384, 387, 369, 336, 358, 389, 67,
	66, 381, 618, 376, 374, 332, 542, 543, 340, 570,
	354, 430, 521, 520, 519, 518, 517, 516, 515, 514,
	320, 321, 322, 399, 400, 401, 411, 404, 405, 406,
	407, 408, 409, 410, 449, 450, 619, 468, 470, 471,
	469, 236, 633, 355, 239, 621, 622, 95, 623, 625,
	624, 28, 626, -401, -399, -320, 532, 609, 377, 531,
	534, 371, 351, 628, 631, 375, 259, 320, 321, 322,
	447, 349, -206, -320, 633, -171, 243, 39, -219, -320,
	-171, -84, -16, -15, -163, -164, -219, 238, -328, 24,
	429, -92, 430, 234, 82, 77, -320, -9, -104, -8,
	-111, -82, -161, 434, -326, -320, 320, 320, -326, 238,
	-320, 269, 410, -454, 244, -405, -378, 270, -404, -380,
	-407, -381, 32, 230, 232, 231, 544, 266, 16, 375,
	240, 14, 13, 376, 252, 25, 26, 28, 15, 377,
	379, 29, 380, 383, 384, 385, 42, 388, 389, 259,
	85, 93, 88, 277, -205, -320, -355, -347, 114, -350,
	-342, -343, -345, -497, -491, -340, 82, 141, 142, 149,
	115, 635, -344, -436, 36, 117, 550, 554, 590, 497,
	-295, -296, -297, -298, -299, -300, -320, -492, -490, 88,
	98, 100, 104, 105, 103, 101, 153, 185, 102, 89,
	154, -164, 85, -513, 560, -314, 583, 596, 597, 598,
	599, 582, 61, -461, -470, 237, -468, 152, 190, 255,
	186, 14, 147, 422, 187, 591, 592, 593, 557, 579,
	499, 561, 571, 586, 552, 553, 555, 547, 548, 549,
	551, 562, 564, 578, -471, 574, 584, 585, 570, 594,
	595, 587, 588, 589, 625, 87, 86, 577, 576, 563,
	558, 559, 565, 546, 556, 566, 567, 575, 580, 581,
	359, 107, 360, 361, 489, 352, 362, 244, 429, 70,
	363, 364, 365, 366, 367, 496, 368, 71, 369, 358,
	259, 412, 370, 189, 206, 501, 500, 502, 493, 490,
	488, 491, 492, 494, 495, 568, 569, 573, -121, -122,
	601, -566, -288, -567, 6, 7, 8, 9, -568, 154,
	-557, 431, 540, 88, 313, 349, 164, 161, -392, 164,
	113, 169, 168, -392, 166, 323, 265, -369, -153, 349,
	412, 327, 94, 269, -372, -370, 528, -456, 317, 313,
	289, 239, 110, -154, 249, 248, 108, 489, 237, 386,
	308, 56, 58, -529, -530, 227, 228, 229, -520, 522,
	-519, -320, 361, 96, 97, 27, 238, 372, 265, 467,
	465, 466, 468, 469, 470, 471, -65, -472, -453, 462,
	461, -332, 454, 460, 452, 464, 455, 350, 329, 544,
	328, 230, 621, 529, 523, -310, 396, 432, 486, 487,
	373, 433, 473, 475, 456, 107, 193, 190, 239, 241,
	238, 349, 489, 412, 94, 327, -529, 161, 473, 475,
	269, 410, 41, -398, 422, -397, -399, 474, 485, 86,
	87, 472, -310, 107, 453, 453, -566, -288, -162, -164,
	-114, -518, 530, 530, 530, 239, 349, 412, 269, 240,
	238, 525, 528, 241, 489, 237, 320, 372, 265, 327,
	94, 166, -455, -526, 32, -462, 224, 225, 226, 33,
	34, -1, 121, 634, -347, -347, -6, 637, -6, -347,
	-320, -320, 156, -225, -229, -226, -228, -227, -231, -230,
	190, 191, 152, 194, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 207, 208, 205, 31, 206, 255, 186,
	187, 188, 189, 209, 172, 192, 537, 217, 173, 218,
	174, 219, 175, 220, 176, 177, 221, 178, 181, 182,
	183, 184, 180, 155, -195, 88, 32, 82, 155, 88,
	-187, 261, -171, -219, 155, 635, -187, -566, -180, -181,
	11, -219, -301, -320, 431, 124, -92, 77, -92, 430,
	77, -521, -522, -523, -525, 234, 430, 429, -109, 155,
	277, 17, -326, -326, 80, -219, -380, 269, -405, -378,
	36, 79, 156, 242, 156, 79, 82, 373, 349, 412,
	374, 489, 238, 386, 241, 269, 387, 349, 412, 238,
	241, 489, 269, 349, 238, 241, 412, 269, 387, 349,
	452, 453, 241, 27, 378, 381, 382, 453, -476, 485,
	156, 113, 110, 111, 112, -347, 131, -362, 124, 125,
	126, 127, 128, 129, 130, 138, 137, 148, 141, 142,
	143, 144, 145, 146, 147, 139, 140, 134, 114, 132,
	136, 133, 116, 151, -164, -347, -355, 61, -345, -345,
	-345, -345, -320, -436, -352, -347, 82, 82, 82, 82,
	155, 101, 88, -347, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, -469, 82, 82, -359,
	-360, 82, 82, -340, -301, 82, 88, 88, 82, 82,
	82, 88, 82, 82, 82, -360, -360, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, -181, 156, -180, 82, -180, -181, -165, -164,
	32, 33, 32, 33, 32, 33, 32, 33, -569, 618,
	82, 98, 629, 222, 17, -320, 478, 539, 167, 168,
	169, -367, 244, -204, -320, -206, 372, 241, 525, 241,
	-154, -367, -367, -367, -367, -367, 240, -367, 24, 238,
	238, 238, 238, -367, 496, 124, 124, 59, -531, 171,
	156, -520, -186, 82, -331, 132, 136, -331, -284, 18,
	24, 267, 267, 267, -331, 307, -577, -578, 17, 134,
	-329, -578, -329, -329, -331, -579, 240, 463, 43, 268,
	267, -182, -183, 22, -182, 457, 453, -422, 458, 459,
	-333, -578, -332, -331, -331, -332, -331, -331, -331, 32,
	238, 241, 489, 327, 622, -577, -577, 31, 31, -454,
	-454, -219, -454, 523, -311, -320, -454, -454, -454, -532,
	243, -563, -562, 476, -565, 478, 161, -399, 161, -399,
	-380, 269, 269, 156, 124, 24, -400, 124, 135, -399,
	-399, -400, -400, -242, 41, -319, 152, -320, 88, -242,
	41, -560, -559, -219, -181, -165, -164, 83, 83, 83,
	533, 533, 533, -454, -454, -454, -454, -454, -456, -454,
	-454, -454, -454, -454, -326, -196, -320, -206, 244, -454,
	-454, -454, -166, -167, 143, -347, -320, -166, -3, -130,
	-129, 118, 119, 121, 612, 367, 611, 615, 609, -399,
	41, -449, 394, 393, -443, -445, 82, -444, 82, -444,
	-444, -444, -444, -444, 82, 82, -446, 82, -446, -446,
	-443, -447, 82, -447, -448, 82, -448, -447, -320, -426,
	539, -353, -355, -320, 39, -465, 61, -161, 82, 31,
	82, -187, -320, 187, 166, 626, -466, 61, -161, 82,
	31, -181, -123, 39, -183, 21, 155, 98, 88, -109,
	-92, 77, -109, 83, 156, -524, 104, 105, -527, 204,
	196, -320, -107, 88, -7, -8, -9, -10, -47, -82,
	-79, -161, 231, -493, -491, 82, 32, 421, 79, 17,
	-406, 238, 489, 372, 265, 241, 349, -404, -387, -384,
	-382, -319, -380, -383, -382, -409, -301, 453, -124, 436,
	435, 319, -347, -347, -347, -347, -347, 103, 114, 344,
	104, 105, -342, -363, 32, 315, 316, -343, -343, -343,
	-343, -343, -343, -343, -343, -343, -343, -343, -343, -351,
	-361, -436, 82, 134, 132, 136, 133, 116, -345, -345,
	-343, -343, -244, -319, 152, 83, 156, -347, -517, -516,
	118, -347, -347, -347, -347, -320, -514, -515, 503, 504,
	505, 506, 507, 508, 509, 510, 511, 512, 513, 363,
	358, 364, 362, 352, 370, 365, 366, 189, 520, 521,
	514, 515, 516, 517, 518, 519, -353, -353, -347, -514,
	-353, -294, 33, 32, -355, -355, -355, 83, -347, -528,
	342, 341, 343, -184, -320, -353, 83, 83, 83, 98,
	-355, -355, -353, -343, -353, -353, -353, -353, -515, -294,
	-294, -294, -294, 143, -355, -355, -294, -294, -294, -294,
	143, -294, -294, -294, -294, -294, -294, -294, -294, -294,
	-294, 83, 83, 83, 143, -355, -182, -122, -474, -473,
	-347, 41, -123, -183, -570, 619, 82, -301, -558, 88,
	88, 635, 166, 17, 489, 479, 480, 165, 168, 167,
	-320, 114, 35, 82, -196, -367, -367, -367, -536, -320,
	89, -388, -385, -382, -320, -320, -378, -320, -320, -219,
	-367, -367, -367, -367, -219, -253, 53, 54, 55, -382,
	-155, 56, 57, -532, -519, 35, -185, -320, -284, -345,
	-345, -347, -382, 269, -577, -331, -331, -312, -311, -333,
	-328, -333, -333, -284, -329, -331, -331, -347, -333, -329,
	-284, -320, 453, -284, -284, -422, -331, -330, -320, -330,
	-367, -311, -312, -312, -219, -219, -265, -270, -266, -271,
	261, 235, 356, 357, 233, 231, 11, 232, -278, 308,
	-368, 497, -248, -249, 77, 42, -251, 259, 398, 391,
	271, 275, 92, 276, 431, 277, 240, 279, 280, 281,
	296, 298, 251, 282, 283, 284, 422, 285, 160, 297,
	286, 287, 288, 374, -243, 6, 330, 41, 51, 52,
	445, 444, 542, 539, 272, -536, -534, 31, -320, 31,
	-388, -320, -320, -174, -169, -173, -170, -175, -287, -289,
	-172, 82, -219, -164, -320, 156, 477, 479, 480, -563,
	-400, -563, -400, 32, 421, -403, 421, 32, -378, -397,
	473, 475, -393, 88, 422, -383, -402, 79, 152, -473,
	-400, -400, -402, -402, 151, 156, -561, 478, 479, 227,
	-182, 98, 98, 98, -221, -219, -536, -387, -378, -320,
	-454, -221, -221, -221, -320, -320, 82, 155, 36, -320,
	-320, -320, -283, 156, -282, 17, -321, -320, 35, 88,
	155, -283, -131, -129, 120, -347, -6, 611, -347, -6,
	-6, -347, -6, -347, -452, 395, 98, 98, -303, 88,
	-303, 98, 98, 98, 545, 83, 88, -391, 79, -467,
	-356, -512, 601, -189, 83, -184, -510, -511, -184, -188,
	-320, -465, 635, 124, 124, 124, -467, -189, 83, -510,
	-182, 602, -123, -179, -178, -347, -320, 24, -109, -92,
	-522, 155, 349, 156, -185, -406, -386, -383, -408, 143,
	-320, -394, 156, 539, 638, 86, 242, -549, -548, 413,
	83, 156, -477, 243, 496, 88, 635, 429, 222, 223,
	103, 344, 104, 105, -436, -355, -351, -345, -345, -343,
	-343, -349, 256, -349, 113, -347, 636, -346, -516, 120,
	-347, 35, 156, 35, 156, 80, 155, 83, 83, 17,
	17, 83, -347, 83, 83, 83, 83, 17, 17, -347,
	83, 155, 83, 83, 83, 83, 80, 83, 156, 83,
	83, 83, 83, 156, -355, -355, -347, -355, 83, 83,
	83, -347, -347, -347, -355, 83, -347, -347, -347, -347,
	-347, -347, -347, -347, -347, -347, -416, 448, -416, -416,
	156, 156, 156, 83, -123, 82, 98, 156, 630, -307,
	-306, 88, -320, 166, -320, 166, 169, 169, 168, 24,
	36, -205, -207, -208, -209, -210, -211, 134, 157, 158,
	82, -219, -219, -219, -538, 399, -550, 156, 41, -548,
	489, -151, 319, -371, 80, -158, 17, 539, -219, -219,
	-219, -219, -232, 35, 17, -168, -220, -320, 82, 83,
	156, -379, 80, -320, -312, -284, -284, -333, -284, -284,
	156, 23, -331, -333, -333, -337, 635, -329, -337, 155,
	-337, -311, -442, 35, -186, 156, 21, 261, -218, -317,
	-215, -217, 246, -336, -216, 249, -506, 247, 245, 108,
	250, 304, 109, 240, -317, -317, 246, -252, 242, 35,
	-317, -268, 240, 347, 304, 247, 21, 261, -267, 240,
	109, -320, 246, 250, 247, 245, -316, 124, -310, 151,
	242, 43, 374, -316, 543, 261, -316, -316, -316, -316,
	-316, -316, -316, 278, 278, -316, -316, -316, -316, -316,
	-316, -316, -316, -316, -316, -316, 161, -316, -316, -316,
	-316, -316, -316, 82, 273, 274, -539, 399, 31, 355,
	355, -550, 31, -159, 349, 31, -290, -291, -292, -293,
	68, 72, 74, 69, 70, 71, 75, 31, 156, -318,
	-322, 35, -320, 88, -318, -164, -169, -174, -318, 82,
	-562, -564, 481, 478, 484, -402, -402, 242, 82, 124,
	-402, -402, 41, -319, -559, 485, 479, -123, 156, 79,
	-221, -197, -198, -199, -200, -225, -301, 191, 194, 196,
	197, 198, 199, 200, 201, 202, 203, 204, 207, 208,
	205, 206, 255, 186, 187, 188, 189, 209, 172, 192,
	537, 173, 174, 175, 176, 177, 178, 181, 182, 183,
	184, 180, -320, -206, -284, -167, -169, -320, 88, -320,
	143, -284, 121, -6, 119, -135, -134, -133, 122, 609,
	615, 121, 121, 121, 83, 83, 83, 156, 83, 83,
	83, 156, 83, 156, 98, -480, 458, 40, 156, 82,
	83, 156, 61, 156, 124, 83, 156, 187, 166, 626,
	-347, -347, -347, 83, 61, -123, 88, 156, -176, 37,
	38, 155, 431, -320, -491, 83, -408, 156, 242, 155,
	155, -384, 377, -319, -386, 21, 539, -301, 39, -307,
	124, 635, -320, 83, -349, -349, 113, -345, -342, 83,
	121, -347, 119, -223, -225, 393, 394, -347, -223, -224,
	-230, 152, 190, 255, 189, 188, 186, 393, 394, -242,
	-320, -347, -347, 83, -347, -347, 17, -320, -242, -343,
	-347, -181, -181, 83, 83, -415, -416, -415, -415, 83,
	83, 83, 83, -415, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 82, 98, 100, 98, 100, -473,
	-571, 63, 617, 62, 421, 103, 309, 156, 98, 88,
	636, 156, 124, -320, 17, 238, 169, -551, 313, 349,
	385, 83, 156, -301, -197, -186, 82, -186, -541, 460,
	401, 411, -316, -339, -338, 351, 42, -459, 422, 407,
	408, -385, 269, -320, -547, 95, 124, 79, 334, 338,
	339, 335, 336, 337, -365, -366, -364, -368, -534, 82,
	82, -161, 35, 132, 82, 82, 35, -437, 324, -225,
	-219, -168, -320, 17, 156, -533, 155, -1, -320, -378,
	-331, -284, -347, -347, -284, -331, -331, 166, -333, -320,
	-437, -225, 35, -266, 235, 232, -412, 306, 307, -413,
	-427, 309, -429, 82, -222, -301, -216, -505, -506, -367,
	-320, 109, -505, 109, 82, -222, -301, -301, -269, -330,
	-301, -320, -320, -320, -320, -274, -273, -301, -276, 32,
	-277, -320, -320, -320, -320, 109, -320, 109, -247, 41,
	48, 49, 50, -316, -316, 193, -250, 41, 421, 423,
	424, -276, 98, 98, 98, 98, 88, 88, 88, -316,
	-316, 98, 88, -322, 88, -507, 168, 45, 46, 98,
	98, 98, 98, 41, 88, -255, 41, 289, 293, 290,
	291, 292, 88, 98, 41, 98, 41, 98, 41, -320,
	82, -508, -509, 88, -541, -316, 355, -399, 124, -339,
	-546, 319, -160, 489, 32, -190, 235, 232, -534, -390,
	-389, -301, -173, -173, -173, -173, 68, 68, 68, 73,
	68, 73, 68, -292, -390, -175, -186, -322, 83, -556,
	-555, -554, -552, 76, 243, 77, -353, 478, 482, 483,
	-386, -334, 88, -393, -194, 24, -219, -219, -458, 299,
	300, 83, 156, -225, -286, 19, 155, -286, 117, -6,
	-131, -133, -347, -6, -347, 611, 367, 612, 88, 98,
	98, -488, 442, 437, 439, 109, -356, -475, -474, 61,
	-161, -184, -467, -511, -473, -320, 124, 124, 124, 636,
	636, 636, 61, -161, -467, -194, -480, -178, -177, 44,
	-320, 98, 17, -383, -378, 143, 143, -320, 378, -394,
	88, 400, 88, 238, 636, 88, -307, -342, -347, 83,
	-233, 177, 176, -233, 35, 83, 83, -444, -444, -443,
	-446, -443, -233, -233, 83, 83, 24, 83, 83, 83,
	-347, 83, 83, 156, -463, 498, -464, 572, -415, -415,
	-415, -415, -415, -415, -415, -415, -415, -415, -415, -415,
	-415, -415, -415, -415, -358, -357, 261, 443, 624, 624,
	443, 624, 624, 83, 156, -514, 156, -306, 88, 242,
	166, -219, -320, 88, 88, -209, -225, 83, 35, -212,
	-213, -214, -222, -215, -217, 35, -542, 92, -537, 88,
	-320, 89, -543, 92, 402, 154, 353, 41, 403, 404,
	419, 348, 98, 98, 409, -535, -320, -159, -545, 52,
	124, 88, -219, -364, -310, 151, 280, 327, -281, -280,
	-320, 88, -212, -161, -219, -212, -212, -161, -438, 326,
	21, 98, 142, -187, 80, 155, -169, -220, -320, 143,
	83, -284, -337, -284, -284, 124, -331, -438, -161, -424,
	310, 82, -422, 82, -422, 109, 335, -430, -428, 261,
	-272, 45, 47, -225, -503, -320, -501, -503, -320, -501,
	-501, -367, -347, -272, -222, 242, 31, 232, -275, 332,
	333, 338, -395, 305, 114, -395, 156, -176, 156, -320,
	-242, -242, 31, 88, 88, -221, 83, 156, 124, -542,
	-537, 124, -400, 88, -543, -547, 124, -152, 92, -311,
	156, -190, -190, -284, 156, 124, -192, -191, 79, 80,
	-193, 79, -191, 68, 68, -284, -554, -553, 24, -506,
	-506, -506, 83, 83, 15, -199, 41, -285, 20, 21,
	143, -285, 121, 119, 121, 121, -320, 83, 83, -450,
	603, -484, -486, 437, 21, 21, 15, 243, 83, -467,
	-347, -347, -347, -467, -488, 45, 46, -378, -394, 422,
	-219, 156, 636, -223, -347, 83, -347, 83, 88, 83,
	88, -181, 21, 83, 156, 83, 83, 83, 156, 83,
	83, -347, 83, -514, 632, -320, 17, 236, -161, 83,
	156, -161, 88, -540, 413, 88, 88, 98, 41, 98,
	154, 405, -460, -152, -544, 92, 124, 635, 82, -316,
	-316, -316, -320, 83, 156, -316, -316, 83, 83, 83,
	-240, 539, -439, 260, 98, 142, 98, 142, 98, -318,
	-169, -320, -284, -533, 155, 88, -284, -439, -414, 311,
	98, -343, 82, -343, 82, -423, 308, 82, 83, 156,
	-320, -301, -237, -236, -234, 103, 114, 41, 391, -235,
	92, 151, 294, 297, 296, 272, 295, -264, -335, 79,
	397, 332, 333, -368, 603, 527, 245, 108, 109, 379,
	-336, 82, 82, 80, 314, 82, 82, -503, 83, -272,
	-301, 41, -275, 41, 345, 305, -273, -320, 151, -242,
	83, -509, 88, -540, 88, -402, -545, 88, 88, -534,
	-181, -389, -473, -347, 82, -347, 82, 68, 11, 19,
	-340, -347, -355, 244, -6, 612, 367, -257, 604, 88,
	21, 88, -482, 88, -390, 636, 636, 636, -450, -126,
	-254, -310, 277, 83, 83, 83, -415, -415, -418, -417,
	-421, 443, 306, 451, -355, 88, 88, 83, 83, -320,
	242, 166, -201, -225, -156, 539, -240, -214, -156, 21,
	539, 352, 41, 98, 41, 406, 124, 104, 105, -308,
	-309, 88, -373, -375, -301, 82, -242, -244, 88, -280,
	-340, -340, -238, -161, 35, -239, -278, -368, -125, -124,
	-238, 82, -440, 160, 98, 142, 98, 98, -284, -284,
	636, -440, -429, 21, 83, -409, 83, -409, 82, 124,
	-343, -428, -431, 61, -234, 103, -343, 88, -244, -245,
	41, 293, 289, 124, 124, -246, 41, 273, 274, -256,
	82, 304, 15, 193, 82, 109, 109, -219, -373, -373,
	-504, 334, 335, 336, 340, 338, 339, 337, -504, -373,
	-373, 82, -396, -395, -343, -316, -316, 151, -544, -182,
	-185, -502, -320, 245, 21, 21, -320, -320, -304, 605,
	98, 88, 439, -257, -451, 606, -478, -422, -242, 124,
	83, -420, 116, 405, 409, -341, -344, 98, 100, 185,
	154, 83, 83, -538, 632, -320, 538, -157, 60, 485,
	88, 89, 400, 88, 89, 352, 88, 636, 156, 124,
	83, 156, -443, -347, -410, 261, -161, 156, -278, -310,
	-126, -410, -241, -279, -320, 88, -457, 168, 325, 539,
	98, 142, 98, -181, -441, 168, 325, -413, 83, 83,
	83, -409, 98, 83, -435, -432, 82, -278, 263, 134,
	88, 88, 98, 82, -468, 31, 88, -374, 82, 83,
	83, 83, 83, -373, 98, -242, -316, 83, 83, 156,
	82, 21, -304, 88, -487, 442, -481, -479, 437, 438,
	439, 440, 88, -419, -420, 409, -341, -344, 601, 449,
	449, 449, -320, 242, -203, -320, 304, 422, -309, 88,
	-376, -375, -176, 83, -411, 313, 21, -278, -316, -411,
	83, 156, -316, -316, 325, 98, 142, 98, -182, 325,
	-425, 312, 83, -435, -278, -434, -433, 311, 264, 82,
	83, -347, -359, -316, 83, -259, -258, 535, -373, -376,
	80, -376, 80, -376, 80, -376, 80, 83, -242, -320,
	245, -305, -320, -482, -489, 243, -485, -486, 441, -479,
	21, 439, 21, 21, -127, 156, 113, 450, 450, 450,
	-538, 632, -202, 35, 444, 378, -377, 251, 345, 346,
	92, 539, 332, 333, -176, 21, -412, -242, -279, -340,
	-340, 98, 98, 83, 156, -320, 260, 82, -354, -348,
	-347, 260, 83, -320, -263, -261, -262, 79, 456, 302,
	303, 83, -504, -504, -504, -504, -264, 83, 156, -496,
	82, 98, -484, -483, -485, 21, -482, 21, -482, -482,
	446, -419, -320, 88, -316, -316, 88, 88, 331, -301,
	82, -424, -433, -432, -354, 83, 156, -395, -262, 79,
	-261, 79, 16, 15, -376, -376, -376, -376, -320, -500,
	31, 83, -495, -494, -302, -490, -320, 442, 443, 88,
	-482, 124, -538, -574, -573, 623, 98, 98, -320, -409,
	-414, 83, -348, -260, 299, 300, 31, 168, -260, -499,
	-498, -497, 83, 156, 155, 88, 88, 83, -429, 103,
	41, 301, 156, 124, -494, -320, -498, 41, -347, 155,
	-320,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 0, 276, 277, 278, 885, 886, 887, 888, 889,
	890, 891, 0, 0, 0, 0, 0, 643, 644, 0,
	609, 0, 0, 0, 0, 0, 0, 493, 494, 495,
	496, 497, 498, 499, 500, 501, 502, 503, 504, 505,
	506, 507, 508, 509, 510, 511, 512, 513, 514, 515,
	516, 517, 518, 519, 520, 521, 522, 523, 524, 377,
	378, 379, 380, 381, 382, 383, 384, 0, 301, 297,
	222, 223, 224, 225, 226, 308, 309, 470, 0, 0,
	0, 0, 726, -2, 68, 0, 0, 290, 0, 281,
	281, 892, 893, 894, 895, 896, 897, 898, 899, 900,
	901, 902, 903, 904, -2, 656, 0, 610, 611, 612,
	613, 614, 615, 616, 617, 618, 619, 620, 621, 622,
	623, 624, 361, 362, 363, 357, 358, 360, 359, -2,
	0, 656, 0, 0, 0, 734, 0, 0, 0, 0,
	0, 777, 799, 23, 0, 7, 9, 10, 11, 12,
	13, 14, 15, 16, 17, 18, 0, 0, 19, 0,
	19, 0, 0, 0, 1300, 1301, 1302, 1303, 2083, 2053,
	-2, 1824, 1801, 1976, 1977, 2113, 2114, 2115, 2116, 2117,
	2118, 2119, 2120, 2121, 2122, 2123, 2124, 2125, 2126, 2127,
	2128, 2129, 2130, 2131, 2132, 2133, 2134, 2135, 2136, 2137,
	2138, 2139, 2140, 2141, 2142, 2143, 2144, 2145, 2146, 2147,
	2148, 2149, 2150, 2151, 2152, 2153, 2154, 2155, 2156, 2157,
	2158, 2159, 2160, 2161, 2162, 1758, 1759, 1760, 1761, 1762,
	1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772,
	1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782,
	1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792,
	1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1802, 1803,
	1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813,
	1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823,
	1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834,
	1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844,
	1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854,
	1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864,
	1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873, 1874,
	1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884,
	1885, 1886, 1887, 1888, 1889, 1891, 1892, 1893, 1894, 1895,
	1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905,
	1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915,
	1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925,
	1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935,
	1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945,
	1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955,
	1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965,
	1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975,
	1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987,
	1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997,
	1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,
	2008, 2009, -2, 2011, 2012, 2013, 2014, 2015, 2016, 2017,
	2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027,
	2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037,
	2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047,
	2048, 2049, 2050, 2051, 2052, 2054, 2055, 2056, 2057, 2058,
	2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068,
	-2, -2, -2, 2072, 2073, 2074, 2075, 2076, 2077, 2078,
	2079, 2080, 2081, 2082, 2084, 2085, 2086, 2087, 2088, 2089,
	2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099,
	2100, 2101, 2102, 0, 274, 272, 1771, 1801, 1824, 1878,
	1889, 1890, 1924, 1976, 1977, 2010, 2053, 2069, 2070, 2071,
	2083, 0, 0, 909, 0, 704, 0, 0, 709, 1246,
	704, 302, 645, 646, 734, 760, 607, 0, 339, 0,
	1815, 343, 2060, 0, 0, 0, 604, 333, 334, 335,
	336, 337, 338, 0, 0, 884, 0, 0, 329, 0,
	296, 1880, 2082, 0, 0, 0, 0, 0, 165, 1027,
	167, 1029, 171, 179, 0, 0, 0, 184, 185, 188,
	189, 190, 191, 192, 0, 196, 0, 198, 201, 0,
	203, 204, 0, 207, 208, 209, 0, 219, 220, 221,
	1030, 1031, 1032, -2, 96, 907, 1729, 1616, 0, 1623,
	1636, 1647, 1380, 1381, 1382, 1383, 0, 0, 0, 0,
	0, 0, 1391, 1392, 0, 1420, 2117, 2158, 2159, 0,
	1400, 1401, 1402, 1403, 1404, 1405, 105, 117, 118, 1669,
	1670, 1671, 1672, 1673, 1674, 1675, 0, 1677, 1678, 1679,
	1587, 1367, 1300, 0, 2126, 0, 2148, 2153, 2154, 2155,
	2156, 2147, 0, 0, 1572, 0, 1562, 0, 0, -2,
	-2, 0, 0, 1949, -2, 2160, 2161, 2162, 2123, 2144,
	2152, 2127, 2128, 2151, 2119, 2120, 2121, 2114, 2115, 2116,
	2118, 2130, 2132, 2143, 0, 2139, 2149, 2150, 2058, 0,
	0, 0, 0, 0, 2099, 119, 120, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 1583, -2, -2, 1586, -2, 1589,
	-2, -2, -2, -2, 1594, 1595, -2, 1597, -2, -2,
	-2, -2, -2, -2, -2, 1574, 1575, 1576, 1577, 1566,
	1567, 1568, 1569, 1570, 1571, -2, -2, -2, 760, 835,
	0, 760, 0, 735, 782, 785, 788, 791, 738, 0,
	0, 69, 70, 0, 0, 0, 291, 292, 280, 282,
	0, 286, 0, 279, 1063, 0, 0, 0, 0, 1063,
	1063, 1063, 1063, 1063, 0, 1063, 0, 0, 0, 0,
	0, 1063, 0, 942, 1034, 1035, 1036, 1061, 1062, 1134,
	0, 0, 0, 661, 657, 658, 659, 660, 748, 0,
	750, 753, 582, 582, 808, 528, 0, 0, 0, 582,
	0, 542, 534, 0, 0, 0, 582, 0, 0, 755,
	755, 0, 585, 594, 582, 582, -2, 582, 582, 579,
	582, 0, 0, 1075, 548, 549, 550, 534, 534, 553,
	554, 555, 565, 566, 595, 1753, 0, 0, 470, 470,
	0, 470, 0, 470, 470, 470, 663, 1919, 1822, 1895,
	1880, 2082, 0, 247, 1949, 252, 0, 1823, 1842, 0,
	0, 1860, 0, -2, 0, 318, 760, 0, 0, 734,
	0, 0, 0, 0, 0, 470, 470, 470, 470, 470,
	1133, 470, 470, 470, 470, 470, 0, 0, 0, 470,
	470, 470, 0, 0, 800, 801, 796, 797, 798, 802,
	803, 5, 6, 19, 0, 0, 0, 0, 0, 0,
	75, 74, 0, 1730, 1748, 1682, 1683, 1684, 1735, 1686,
	1739, 1739, 1739, 1739, 1715, 1716, 1717, 1718, 1719, 1720,
	1721, 1722, 1723, 1739, 1739, 0, 0, 1728, 1706, 1737,
	1737, 1737, 1735, 1732, 1687, 1688, 1689, 1690, 1691, 1692,
	1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1742, 1742,
	1745, 1745, 1742, 0, 375, 373, 374, 1612, 0, 0,
	0, 0, 704, 708, 0, 0, 0, 760, -2, 0,
	0, 608, 340, 1304, 0, 0, 344, 0, 345, 0,
	0, 0, 364, 0, 367, 352, 353, 354, 348, 0,
	145, 0, 331, 332, 0, 0, 298, 0, 0, 0,
	471, 0, 0, 0, 0, 0, 0, 176, 172, 180,
	183, 193, 200, 0, 212, 214, 217, 173, 181, 186,
	187, 194, 215, 174, 177, 178, 182, 216, 218, 175,
	195, 199, 213, 197, 202, 205, 206, 211, 0, 146,
	0, 0, 0, 0, 0, 1622, 0, 0, 1655, 1656,
	1657, 1658, 1659, 1660, 1661, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, -2, 1616, 0, 0, 1386, 1387,
	1388, 1389, 0, 1393, 0, 1421, 0, 0, 0, 0,
	0, 1676, 1680, 0, 1612, 1612, 0, 1612, 1608, 0,
	0, 0, 0, 0, 0, 1612, 1545, 0, 0, 1547,
	1563, 0, 0, 1549, 1550, 0, 1553, 1554, 1612, 0,
	1612, 1558, 1612, 1612, 1612, 1541, 1542, 0, 1608, 1608,
	1608, 1608, 0, 0, 1608, 1608, 1608, 1608, 1608, 1608,
	1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 0, 0,
	0, 0, 755, 0, 761, 0, -2, 0, 779, 781,
	783, 784, 786, 787, 789, 790, 792, 793, 740, 0,
	0, 71, 0, 0, 0, 0, 0, 0, 284, 0,
	289, 0, 0, 0, 906, 0, 0, 1063, 1063, 1063,
	943, 0, 0, 0, 0, 0, 0, 0, 0, 1063,
	1063, 1063, 1063, 0, 1081, 0, 0, 0, 663, 662,
	0, 749, 0, 0, 808, 0, 0, 526, 527, 0,
	0, 534, 582, 582, 540, 541, 536, 535, 590, 591,
	585, 0, 585, 585, 808, 0, 559, 560, 561, 582,
	582, 567, 756, 0, 568, 569, 585, 0, 592, 593,
	808, 0, 0, 808, 808, 0, 577, 578, 580, 582,
	0, 0, 1063, 0, 600, 536, 536, 1754, 1755, 0,
	0, 1072, 0, 0, 0, 603, 0, 0, 0, 0,
	664, 227, 230, 0, 233, 0, 1919, 0, 1919, 0,
	240, 0, 0, 0, 0, 0, 0, 270, 271, 0,
	0, 0, 0, 261, 264, 1240, 1241, 1024, 1025, 265,
	266, 310, 311, 0, 755, 778, 780, 774, 775, 776,
	0, 0, 0, 0, 0, 0, 0, 0, 470, 0,
	0, 0, 0, 0, 639, 0, 922, 641, 0, 0,
	0, 0, 816, 810, 812, 879, 105, 816, 8, 92,
	89, 0, 19, 0, 0, 19, 19, 0, 19, 275,
	0, 1751, 1749, 1750, 1685, 1736, 0, 1711, 0, 1712,
	1713, 1714, 1724, 1725, 0, 0, 1707, 0, 1708, 1709,
	1710, 1701, 0, 1702, 1703, 0, 1704, 1705, 273, 372,
	0, 0, 1613, 910, 0, 682, 696, 677, 0, 685,
	0, 0, 1247, 0, 0, 0, 665, 696, 667, 0,
	685, 755, 732, 0, 710, 0, 0, 341, 0, 349,
	346, 0, 350, 0, 0, 366, 368, 369, 370, 355,
	356, 605, 327, 328, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 330, 115, 0, 299, 300, 0, 0,
	0, 159, 160, 161, 162, 163, 164, 166, 150, 628,
	630, 1016, 1028, 0, 1019, 0, 169, 210, 142, 0,
	0, 0, 1617, 1618, 1619, 1620, 1621, 1626, 0, 1628,
	1630, 1632, 1634, 0, 1652, -2, -2, 1368, 1369, 1370,
	1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1637,
	1650, 1651, 0, 0, 0, 0, 0, 0, 1648, 1648,
	1643, 0, 1406, 1242, 1243, 1384, 0, 0, 1418, 1422,
	0, 0, 0, 0, 0, 106, 1607, 1512, 1513, 1514,
	1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524,
	1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534,
	1535, 1536, 1537, 1538, 1539, 1540, 0, 0, 1616, 0,
	0, 0, 1609, 1610, 0, 0, 0, 1500, 0, 0,
	1506, 1507, 1508, 0, 691, 0, 1573, 1546, 1564, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 834, 836, 0, 700,
	702, 703, 729, 710, 736, 0, 0, 0, 67, 72,
	0, 1101, 0, 0, 0, 293, 294, 0, 0, 288,
	0, 0, 0, -2, 0, 0, 0, 0, 0, 958,
	959, 468, 1010, 0, 0, 0, 1026, 1051, 1059, 0,
	0, 0, 0, 0, 1107, 944, 949, 950, 951, 945,
	946, 952, 953, 0, 751, 0, 0, 848, 525, 583,
	584, 809, 531, 1880, 536, 808, 808, 543, 537, 544,
	587, 545, 546, 547, 585, 808, 808, 757, 582, 585,
	570, 586, 585, 588, 574, 0, 581, 588, 601, 588,
	0, 599, 551, 552, 1109, 753, 387, 388, 389, 391,
	0, 439, 439, 439, 422, 439, 0, 0, 410, 1756,
	0, 0, 0, 0, 419, 1756, 0, 0, 1756, 1756,
	1756, 1756, 1756, 1756, 1756, 0, 0, 1756, 1756, 1756,
	1756, 1756, 1756, 1756, 1756, 1756, 1756, 1756, 0, 1756,
	1756, 1756, 1756, 1756, 1226, 1756, 0, 1073, 429, 430,
	431, 432, 437, 438, 0, 465, 0, 0, 957, 0,
	468, 0, 996, 821, 0, 822, 823, 819, 850, 874,
	874, 0, 874, 854, 1246, 0, 0, 238, 239, 228,
	0, 229, 0, 241, 242, 0, 244, 245, 246, 253,
	1822, 1895, 248, 250, 0, 0, 254, 267, 268, 269,
	0, 0, 259, 260, 0, 0, 313, 314, 316, 0,
	710, 1076, 1077, 1078, 625, 1244, 626, 627, 631, 0,
	0, 634, 635, 636, 637, 638, 924, 0, 0, 1003,
	1004, 1005, 808, 0, 817, 0, 813, 880, 0, 882,
	0, 808, 0, 90, 19, 0, 83, 80, 0, 0,
	0, 0, 0, 1731, 1681, 1752, 0, 0, 0, 1733,
	0, 0, 0, 0, 0, 73, 712, 672, 0, 676,
	693, 0, 697, 0, 0, 689, 681, 686, 0, 0,
	706, 673, 0, 0, 0, 0, 666, 0, 0, 671,
	710, 0, 733, 762, 763, 766, 1305, 0, 351, 347,
	365, 0, 470, 0, 0, 0, 153, 1013, 0, 154,
	158, 148, 0, 0, 0, 1018, 0, 1015, 1020, 0,
	168, 0, 0, 143, 144, 1092, 1101, 0, 0, 0,
	1627, 1629, 1631, 1633, 1635, 0, 1638, 1648, 1648, 1644,
	0, 1639, 0, 1641, 0, 1617, 1390, 0, 1423, 0,
	0, 0, 0, 0, 0, 0, 0, 1490, 1491, 0,
	0, 1495, 0, 1497, 1498, 1499, 1501, 0, 0, 0,
	1505, 0, 1544, 1565, 1548, 1551, 0, 1555, 0, 1557,
	1559, 1560, 1561, 0, 760, 760, 0, 0, 1462, 1462,
	1462, 0, 0, 0, 0, 1462, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1407, 0, 1408, 1409,
	0, 0, 0, 837, 730, 0, 0, 0, 0, 0,
	1099, 0, 60, 0, 0, 295, 283, 285, 0, 0,
	1064, 0, 0, 912, 913, 915, 0, 918, 919, 920,
	924, 753, 0, 753, 969, 1756, 472, 0, 0, 1012,
	0, 985, 0, 0, 0, -2, 0, 0, 0, 0,
	0, 0, 1111, 0, 0, 0, 650, 654, 23, 754,
	0, 529, 0, 530, 582, 538, 539, 808, 562, 563,
	0, 0, 808, 582, 582, 573, 0, 585, 596, 0,
	597, 598, 1111, 0, 0, 1072, 1177, 1145, 400, 0,
	1261, 1262, 440, 0, 1268, 1277, 1063, 1337, 0, 1277,
	0, 0, 1279, 1280, 0, 0, 0, 0, 423, 424,
	0, 409, 0, 0, 0, 0, 0, 0, 408, 0,
	0, 450, 0, 0, 0, 0, 0, 1757, 1756, 1756,
	0, 417, 418, 0, 421, 0, 0, 0, 0, 0,
	0, 0, 0, 1756, 1756, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1217, 0, 0, 0,
	0, 0, 0, 0, 1232, 1233, 969, 1756, 0, 0,
	0, 472, 983, 1001, 0, 0, 0, 0, 0, 0,
	841, 0, 0, 840, 0, 0, 0, 0, 0, 753,
	875, 0, 877, 878, 852, -2, 0, 821, 857, 1612,
	231, 232, 0, 0, 237, 255, 257, 0, 0, 0,
	256, 258, 262, 263, 312, 315, 317, 772, 0, 0,
	1135, 0, 925, 926, 928, 929, 0, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	1806, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 923, 642, 806, 811, 818, 881, 883, 106,
	814, 806, 0, 93, 19, 92, 84, 85, 0, 19,
	0, 0, 0, 0, 1741, 1740, 1726, 0, 1727, 1738,
	1743, 0, 1746, 0, 376, 716, 0, 0, 696, 698,
	0, 0, 696, 0, 0, 705, 0, 0, 0, 0,
	0, 0, 0, 0, 696, 772, 712, 0, 769, 767,
	768, 0, 0, 606, 116, 371, 0, 0, 0, 0,
	0, 629, 0, 1017, 150, 0, 0, 170, 0, 0,
	0, 1101, 1096, 1611, 1640, 1642, 0, 1649, 1645, 1385,
	1394, 1419, 0, 0, 1425, 1437, 1437, 0, 0, 0,
	1428, 1739, 1739, 1431, 1735, 1737, 1735, 1437, 1437, 0,
	107, 0, 0, 1496, 0, 0, 0, 692, 0, 0,
	0, 1458, 1460, 1462, 1462, 1469, 1463, 1470, 1471, 1462,
	1462, 1462, 1462, 1476, 1462, 1462, 1462, 1462, 1462, 1462,
	1462, 1462, 1462, 1462, 1456, 0, 0, 1670, 1671, 701,
	0, 0, 743, 744, 745, 746, 747, 0, 0, 55,
	56, 1101, 0, 61, 0, 0, 287, 57, 58, 0,
	0, 0, 917, 0, 0, 0, 1254, 0, 973, 970,
	971, 972, 0, 1007, 473, 474, 475, 476, 0, 0,
	0, 1011, 0, 996, 978, 0, 0, 0, 1052, 1053,
	1054, 1055, 1056, 1057, 1058, -2, 1067, 0, 0, 0,
	1254, 1086, 0, 0, 1254, 1254, 0, 1119, 0, 1108,
	704, 0, -2, 0, 0, 652, 0, 0, 849, 532,
	808, 556, 758, 759, 588, 808, 808, 0, 582, 602,
	1119, 1110, 0, 390, 439, 0, 1165, 0, 0, 1171,
	0, 1178, 393, 0, 441, 0, 1267, 1294, 1278, 1294,
	1338, 1294, 1294, 1063, 0, 441, 0, 0, 411, 447,
	0, 0, 0, 0, 0, 407, 444, 766, 394, 396,
	397, 398, 448, 449, 451, 0, 453, 454, 413, 425,
	426, 427, 428, 0, 0, 0, 420, 433, 434, 435,
	436, 395, 1194, 1195, 1196, 1199, 1200, 1201, 1202, 0,
	0, 1205, 1206, 1207, 1208, 1209, 1291, 1292, 1293, 1210,
	1211, 1212, 1213, 1214, 1215, 1216, 1234, 1235, 1236, 1237,
	1238, 1239, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225,
	0, 0, 1229, 0, 973, 0, 0, 0, 0, 1007,
	985, 0, 992, 0, 997, 998, 0, 0, 674, 808,
	305, 0, 844, 838, 0, 827, 842, 843, 830, 0,
	832, 0, 828, 829, 808, 820, 851, 876, 853, 856,
	858, 859, 865, 0, 0, 0, 0, 234, 235, 236,
	243, 0, 492, 249, 728, 0, 1245, 632, 633, 1136,
	1137, 640, 0, 930, 804, 0, 0, 804, 88, 91,
	0, 86, 0, 0, 0, 0, 78, 76, 1734, 0,
	0, 718, 130, 0, 0, 0, 694, 0, 699, 696,
	680, 690, 679, 687, 688, 707, 0, 0, 0, 1248,
	1249, 1250, 696, 670, 669, 731, 716, 764, 765, 0,
	1306, 342, 0, 1014, 150, 155, 156, 157, 151, 149,
	1021, 0, 1023, 0, 1094, 0, 0, 1646, 1424, 1395,
	1426, 1438, 1439, 1427, 0, 1397, 1398, 1429, 1430, 1432,
	1433, 1434, 1435, 1436, 1399, 1492, 0, 1494, 1502, 1503,
	0, 1552, 1556, 0, 0, 0, 0, 0, 1467, 1468,
	1472, 1473, 1474, 1475, 1477, 1478, 1479, 1480, 1481, 1482,
	1483, 1484, 1485, 1486, 760, 1457, 0, 0, 0, 0,
	0, 0, 0, 741, 0, 0, 0, 1100, 1102, 0,
	0, 0, 59, 905, 908, 914, 916, 0, 0, 0,
	1255, 1256, 1258, 1259, 1260, 0, 941, 0, 0, 961,
	962, 963, 975, 0, 0, 0, 478, 479, 0, 0,
	0, 491, 487, 488, 489, 469, 1006, 992, 981, 0,
	0, 991, 0, 1068, 1756, 1756, 1756, 0, 0, 1179,
	1756, 1756, 0, 1088, 1090, 0, 0, 1183, 1122, 0,
	0, 1113, 0, 874, 0, 0, 808, 651, 654, 655,
	752, 533, 571, 575, 572, 0, 808, 1122, 386, 1143,
	0, 0, 0, 0, 0, 1175, 0, 0, 1147, 0,
	412, 442, 0, -2, 0, 1295, 0, 1281, 1295, 0,
	0, 1294, 0, 401, 441, 0, 0, 0, 455, 459,
	460, 0, 457, 1333, 0, 458, 0, 446, 0, 452,
	1197, 1198, 0, 1203, 1204, 0, 1228, 0, 0, 461,
	0, 0, 0, 462, 467, 978, 0, 995, 0, 1002,
	0, 999, 1000, 760, 0, 0, 824, 845, 0, 0,
	825, 0, 826, 831, 833, 304, 860, 0, 0, 862,
	863, 864, 855, 251, 773, 927, 0, 794, 0, 0,
	815, 795, 0, 19, 0, 0, 81, 1744, 1747, 720,
	0, 717, 131, 0, 0, 0, 0, 684, 695, 678,
	0, 0, 0, 668, 718, 770, 771, 152, 147, 1022,
	1104, 0, 1095, 0, 0, 1504, 0, 1462, 1459, 1462,
	1461, 1453, 0, 1410, 0, 1412, 1413, 1414, 0, 1416,
	1417, 0, 739, 0, 0, 62, 0, 0, 947, 1183,
	0, 947, 974, 960, 0, 1008, 1009, 0, 480, 481,
	0, 484, 490, 976, 977, 0, 0, 989, 0, 0,
	0, 0, 1060, 1074, 0, 0, 0, -2, 0, -2,
	1085, 0, 1128, 0, 1120, 0, 1112, 0, 1115, 808,
	808, -2, 648, 653, 0, 0, 576, 1128, 1145, 0,
	1166, 0, 0, 0, 0, 0, 0, 0, 1146, 0,
	1159, 443, 1296, -2, 1309, 1311, 0, 1073, 1314, 1315,
	0, 0, 0, 0, 0, 0, 1359, 1323, 0, 0,
	1327, 1328, 1329, 0, 0, 1332, 0, 1664, 1665, 0,
	1336, 0, 0, 0, 0, 0, 0, 0, 1275, 402,
	403, 0, 405, 406, 1756, 1334, 445, 399, 1756, 415,
	1227, 1230, 1231, 466, 463, 464, 981, 984, 993, 675,
	755, 306, 307, 846, 0, 839, 869, 866, 0, 0,
	931, 805, 807, 82, 87, 0, 0, 722, 0, 719,
	0, 713, 715, 141, 683, 1251, 1252, 1253, 720, 103,
	133, 0, 0, 1396, 1493, 1543, 1465, 1466, 0, 1454,
	0, 1448, 1449, 1450, 1455, 0, 0, 742, 737, 0,
	0, 0, 0, 933, 940, 954, 1079, 1257, 939, 0,
	0, 477, 482, 0, 485, 486, 0, 979, 980, 0,
	987, 0, 0, 1047, 1735, 0, 1069, 1070, 1071, 1180,
	1181, 1182, 1138, 1087, 0, -2, 1191, 0, 1083, 1104,
	1138, 0, 1116, 0, 1123, 0, 1121, 1114, 760, 649,
	589, 1125, 392, 1177, 1167, 0, 1169, 0, 0, 0,
	0, 1148, -2, 0, 1310, 1312, 1313, 1316, 1317, 1318,
	1364, 1365, 1366, 0, 0, 1321, 1361, 1362, 1363, 1322,
	0, 0, 0, 0, 0, 1662, 1663, 1357, 0, 0,
	1282, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1283, 0,
	0, 0, 1274, 1276, 404, 0, 0, 1756, 994, 303,
	0, 0, 870, 872, 867, 868, 77, 79, 94, 0,
	721, 132, 0, 722, 95, 0, 124, 0, 1105, 0,
	1464, 1451, 0, 0, 0, 0, 0, 1666, 1667, 1668,
	0, 1411, 1415, 64, 0, 63, 0, 0, 955, 956,
	964, 965, 0, 967, 968, 483, 982, 986, 989, 0,
	1038, 0, 766, 0, 1140, 0, 1089, 1072, 1193, 1756,
	1091, 1140, 0, 1185, 1756, 1756, 1106, 0, 1118, 0,
	1130, 0, 1124, 755, 385, 0, 1127, 1163, 1168, 1170,
	1172, 0, 1176, 1174, 1149, -2, 0, 1157, 0, 0,
	1319, 1320, 0, 0, 1562, 1756, 0, 1352, 0, 1038,
	1038, 1038, 1038, 0, 456, 414, 0, 847, 861, 0,
	0, 0, 711, 104, 121, 0, 134, 135, 0, 0,
	0, 0, 1097, 0, 1440, 0, 0, 0, 1444, 1445,
	1446, 1447, 0, 0, 0, 932, 0, 966, 988, 990,
	1037, 1048, 1049, 766, 1082, 0, 1177, 1192, 0, 1084,
	1184, 0, 0, 0, 1117, 1129, 0, 1132, 647, 1126,
	1144, 0, 1173, 1150, 1158, 0, 1153, 0, 0, 0,
	1360, 0, 1326, 0, 1331, 1340, 1353, 0, 0, 1263,
	0, 1265, 0, 1269, 0, 1271, 0, 0, 416, 871,
	873, 0, 724, 714, 108, 0, 130, 127, 0, 136,
	0, 0, 0, 0, 1093, 0, 0, 1441, 1442, 1443,
	65, 0, 0, 934, 935, 948, 1039, 1756, 1756, 0,
	0, 0, 1045, 1046, 1050, 0, 1165, 1197, 1186, 1187,
	1188, 1131, 1164, 1152, 0, -2, 1160, 0, 0, 1614,
	1624, 1625, 1324, 1330, 1339, 1341, 1342, 0, 1354, 1355,
	1356, 1358, 1038, 1038, 1038, 1038, 1273, 723, 0, 97,
	0, 0, 125, 126, 128, 0, 137, 0, 139, 140,
	0, 1452, 0, 936, 0, 0, 1042, 1043, 0, 1141,
	0, 1143, 1154, -2, 0, 1162, 0, 1325, 1343, 0,
	1344, 0, 0, 0, 1264, 1266, 1270, 1272, 725, 1103,
	0, 109, 0, 111, 113, 114, 1297, 122, 123, 129,
	138, 0, 66, 921, 937, 0, 1040, 1041, 1044, 0,
	1145, 1161, 1615, 1345, 1347, 1348, 0, 0, 1346, 98,
	99, 0, 110, 0, 0, 1098, 938, 1142, 1139, 1349,
	1351, 1350, 0, 0, 112, 1298, 100, 101, 102, 0,
	1299,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 115, 3, 3, 3, 146, 138, 3,
	82, 83, 143, 141, 156, 142, 155, 144, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 637, 634,
	125, 124, 126, 3, 638, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 148, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 635, 137, 636, 149,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	84, 85, 86, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 116, 117, 118, 119, 120, 121, 122, 123, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 139,
	140, 145, 147, 150, 151, 152, 153, 154, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 57956, 631, 57957, 632, 57958, 633, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:812
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:819
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:825
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:833
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:839
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:843
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:858
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:862
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:868
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:873
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:877
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:910
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 55:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:920
		{
			var timestamp = yyDollar[2].str
			var isS3 = false
			var dir = yyDollar[4].str
			var parallelism = yyDollar[6].str
			var option []string
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option)
		}
		yyVAL.union = yyLOCAL
	case 56:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:929
		{
			var timestamp = yyDollar[2].str
			var isS3 = true
			var dir string
			var parallelism string
			var option = yyDollar[5].strsUnion()
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option)
		}
		yyVAL.union = yyLOCAL
	case 57:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:940
		{
			yyLOCAL = &tree.CreateSnapShot{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Obeject:     yyDollar[6].snapshotObjectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObejectInfo
//line mysql_sql.y:950
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELCLUSTER,
			}
			yyLOCAL = tree.ObejectInfo{
				SLevel:  spLevel,
				ObjName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObejectInfo
//line mysql_sql.y:960
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObejectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:973
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELCLUSTER,
				SnapShotName: tree.Identifier(yyDollar[5].cstrUnion().ToLower()),
			}

		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:981
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELACCOUNT,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().ToLower()),
				SnapShotName: tree.Identifier(yyDollar[6].cstrUnion().ToLower()),
			}
		}
		yyVAL.union = yyLOCAL
	case 62:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:989
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELDATABASE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().ToLower()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().ToLower()),
				SnapShotName: tree.Identifier(yyDollar[8].cstrUnion().ToLower()),
			}
		}
		yyVAL.union = yyLOCAL
	case 63:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:998
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELTABLE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().ToLower()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().ToLower()),
				TableName:    *yyDollar[7].tableNameUnion(),
				SnapShotName: tree.Identifier(yyDollar[10].cstrUnion().ToLower()),
			}
		}
		yyVAL.union = yyLOCAL
	case 64:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1008
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:          tree.RESTORELEVELACCOUNT,
				AccountName:    tree.Identifier(yyDollar[3].cstrUnion().ToLower()),
				SnapShotName:   tree.Identifier(yyDollar[6].cstrUnion().ToLower()),
				IsToNewAccount: true,
				NewAccountName: tree.Identifier(yyDollar[9].cstrUnion().ToLower()),
				AuthOption:     yyDollar[10].accountAuthOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 65:
		yyDollar = yyS[yypt-12 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1019
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:          tree.RESTORELEVELDATABASE,
				AccountName:    tree.Identifier(yyDollar[3].cstrUnion().ToLower()),
				DatabaseName:   tree.Identifier(yyDollar[5].cstrUnion().ToLower()),
				SnapShotName:   tree.Identifier(yyDollar[8].cstrUnion().ToLower()),
				IsToNewAccount: true,
				NewAccountName: tree.Identifier(yyDollar[11].cstrUnion().ToLower()),
				AuthOption:     yyDollar[12].accountAuthOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1031
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:          tree.RESTORELEVELTABLE,
				AccountName:    tree.Identifier(yyDollar[3].cstrUnion().ToLower()),
				DatabaseName:   tree.Identifier(yyDollar[5].cstrUnion().ToLower()),
				TableName:      *yyDollar[7].tableNameUnion(),
				SnapShotName:   tree.Identifier(yyDollar[10].cstrUnion().ToLower()),
				IsToNewAccount: true,
				NewAccountName: tree.Identifier(yyDollar[13].cstrUnion().ToLower()),
				AuthOption:     yyDollar[14].accountAuthOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1047
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1067
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1073
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1080
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1088
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1094
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1103
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1113
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().ToLower()),
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1121
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().ToLower()),
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1129
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1137
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().ToLower()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1147
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1155
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().ToLower()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1165
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1172
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().ToLower()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1181
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1191
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1195
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1201
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1205
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1211
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1220
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1230
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1234
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1240
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1249
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1253
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1259
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1280
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1293
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1300
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1304
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1310
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1314
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1320
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1327
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1335
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1339
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1353
		{
			unResolve := tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare())
			unResolve.SetUnresolvedNameCStrParts(yylex.(*Lexer).useOrigin, yyDollar[1].cstrUnion().Origin())
			yyLOCAL = unResolve
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1359
		{
			unResolve := tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare())
			unResolve.SetUnresolvedNameCStrParts(yylex.(*Lexer).useOrigin, yyDollar[1].cstrUnion().Origin(), yyDollar[3].cstrUnion().Origin())
			yyLOCAL = unResolve
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1365
		{
			unResolve := tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
			unResolve.SetUnresolvedNameCStrParts(yylex.(*Lexer).useOrigin, yyDollar[1].cstrUnion().Origin(), yyDollar[3].cstrUnion().Origin(), yyDollar[5].cstrUnion().Origin())
			yyLOCAL = unResolve
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1372
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1376
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1380
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1386
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1395
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1406
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1410
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1416
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1420
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1426
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1430
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1436
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1460
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            goto ret1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1479
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1483
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1487
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1492
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1496
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1505
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1515
		{
			yyVAL.str = ""
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1522
		{
			yyVAL.str = yyDollar[3].str
		}
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1527
		{
			yyVAL.str = "\n"
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1534
		{
			yyVAL.str = yyDollar[3].str
		}
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1539
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1543
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1571
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1575
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1581
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1589
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1609
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1628
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1653
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1657
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1661
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1666
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1670
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1676
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1689
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1700
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1713
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1717
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1727
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1740
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1753
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1759
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1765
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: yyDollar[1].cstrUnion().Compare(),
			}
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1772
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  yyDollar[1].cstrUnion().Compare(),
				TabName: yyDollar[3].cstrUnion().Compare(),
			}
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1780
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: yyDollar[1].cstrUnion().Compare(),
			}
		}
		yyVAL.union = yyLOCAL
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1789
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1793
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1797
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1801
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1805
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1809
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1816
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1820
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1826
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1833
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1842
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1846
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1852
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1856
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1860
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1864
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1868
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPGRADE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1872
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1876
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1880
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1884
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1888
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1892
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1896
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1900
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1904
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1908
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1912
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1916
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1920
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1924
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1928
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1932
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1936
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1940
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1944
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1948
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1952
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1956
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1960
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1964
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1968
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1972
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1976
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1980
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1984
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1988
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1992
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1996
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2000
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2004
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2008
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2012
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2016
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2020
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2024
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2028
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2032
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2036
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2040
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2044
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2048
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2052
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2065
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2072
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2079
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2089
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2093
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2099
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2106
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2114
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2118
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2122
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2126
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2132
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2136
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2142
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2149
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2156
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2165
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2195
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2199
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2203
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2209
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2215
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2219
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2226
		{
			yyVAL.str = yyDollar[3].str
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2232
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2236
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2242
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 255:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2250
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 256:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2259
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2268
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2276
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2284
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2307
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2330
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2337
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2344
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2352
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2359
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2366
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2375
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2379
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2383
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2389
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2393
		{
			yyVAL.str = yyDollar[1].str
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2399
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2403
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2409
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2413
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2424
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2430
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2435
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2439
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2443
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2447
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 285:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2451
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2455
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2459
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2463
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2467
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2473
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2477
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2481
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2485
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2490
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2495
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2501
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2514
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2527
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2540
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2553
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2569
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2576
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2587
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].joinTableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2598
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2602
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2608
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2618
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2624
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2628
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:2634
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2640
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2644
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2648
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2652
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2658
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2671
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2677
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2681
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2687
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2691
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2697
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2703
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2714
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2720
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2724
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 341:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2728
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 342:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2732
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2736
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2740
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2748
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2756
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2766
		{
			if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2778
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 349:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2782
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 350:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2790
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 351:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2798
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:2837
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:2841
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:2847
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2853
		{
			yyVAL.str = yyDollar[1].str
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2858
		{
			yyVAL.str = "true"
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2859
		{
			yyVAL.str = "false"
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2860
		{
			yyVAL.str = yyDollar[1].str
		}
	case 371:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2865
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 372:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2871
		{
			yyLOCAL = &tree.UpgradeStatement{
				Target: yyDollar[3].upgrade_targetUnion(),
				Retry:  yyDollar[4].int64ValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:2880
		{
			yyLOCAL = &tree.Target{
				AccountName:  yyDollar[1].str,
				IsALLAccount: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:2887
		{
			yyLOCAL = &tree.Target{
				AccountName:  "",
				IsALLAccount: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:2895
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:2899
		{
			res := yyDollar[3].item.(int64)
			if res <= 0 {
				yylex.Error("retry value can not less than 0")
				yyLOCAL = -1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 385:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2922
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 386:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2945
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 387:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2955
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 388:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2962
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:2971
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:2975
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2981
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 392:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2985
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()

			partitionDef := tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)

			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3009
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3019
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3035
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3053
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3057
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3063
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3067
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3073
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 401:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3079
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 402:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3087
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3097
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 404:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3105
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 405:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3115
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 406:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3125
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3135
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3142
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3146
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3150
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3154
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 412:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3158
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3165
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 414:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3171
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 415:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3175
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 416:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3179
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3183
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 418:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3187
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3191
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3195
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3199
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 422:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3204
		{
			yyVAL.str = ""
		}
	case 439:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3235
		{
			yyVAL.str = ""
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3239
		{
			yyVAL.str = string("COLUMN")
		}
	case 441:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3244
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3250
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3256
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3264
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3268
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3274
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3282
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterOptionTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3289
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3295
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3301
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3307
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3313
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3320
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3327
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3335
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3341
		{
			val := int64(yyDollar[6].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = val
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3353
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3359
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3367
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3371
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3378
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3396
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3410
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 464:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3424
		{
			assignments := []*tree.VarAssignmentExpr{
				&tree.VarAssignmentExpr{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3437
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 466:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3443
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].exprUnion(),
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 467:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3454
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 468:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3467
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3471
		{
			var UserName = yyDollar[3].str
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 470:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3479
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3483
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 472:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3488
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3492
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3508
		{
			yyLOCAL = tree.NewUserMiscOptionAccountUnlock()
		}
		yyVAL.union = yyLOCAL
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3512
		{
			yyLOCAL = tree.NewUserMiscOptionAccountLock()
		}
		yyVAL.union = yyLOCAL
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3516
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNone()
		}
		yyVAL.union = yyLOCAL
	case 477:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3520
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireInterval(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3527
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNever()
		}
		yyVAL.union = yyLOCAL
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3531
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireDefault()
		}
		yyVAL.union = yyLOCAL
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3535
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryDefault()
		}
		yyVAL.union = yyLOCAL
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3539
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 482:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3546
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalDefault()
		}
		yyVAL.union = yyLOCAL
	case 483:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3550
		{
			var Value = yyDollar[4].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3557
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentNone()
		}
		yyVAL.union = yyLOCAL
	case 485:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3561
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentDefault()
		}
		yyVAL.union = yyLOCAL
	case 486:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3565
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentOptional()
		}
		yyVAL.union = yyLOCAL
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3569
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionFailedLoginAttempts(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3576
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3583
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeUnbounded()
		}
		yyVAL.union = yyLOCAL
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:3589
		{
			yyVAL.item = nil
		}
	case 491:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3594
		{
			yyVAL.item = nil
		}
	case 525:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3637
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3646
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3654
		{
			yyLOCAL = &tree.ShowSnapShots{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3662
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 529:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3666
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 530:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3670
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{
				&tree.Role{UserName: yyDollar[5].cstrUnion().Compare()},
			}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 531:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3681
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3685
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 533:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3691
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 534:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3696
		{
		}
	case 536:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3700
		{
		}
	case 538:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3705
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 539:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3715
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3725
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3733
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3739
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 543:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3745
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 544:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3751
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 545:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3757
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 546:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3763
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 547:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3769
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3778
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3782
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3786
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3790
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3794
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3798
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3802
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3806
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 556:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3812
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 557:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3821
		{
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3823
		{
		}
	case 562:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3832
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 563:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3842
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 564:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3851
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3855
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3859
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3865
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3871
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3877
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 570:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3883
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 571:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3892
		{
			yyLOCAL = &tree.ShowTables{
				Open:         false,
				Full:         yyDollar[2].fullOptUnion(),
				DBName:       yyDollar[4].str,
				Like:         yyDollar[5].comparisionExprUnion(),
				Where:        yyDollar[6].whereUnion(),
				SnapshotName: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 572:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3903
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 573:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3915
		{
			yyLOCAL = &tree.ShowDatabases{
				Like:         yyDollar[3].comparisionExprUnion(),
				Where:        yyDollar[4].whereUnion(),
				SnapshotName: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 574:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3923
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 575:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3929
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 576:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3941
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3955
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3961
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3967
		{
			yyLOCAL = &tree.ShowAccountUpgrade{}
		}
		yyVAL.union = yyLOCAL
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3974
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 581:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3978
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 582:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:3983
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 583:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:3987
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:3991
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 585:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3996
		{
			yyVAL.str = ""
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4000
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4006
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 588:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4011
		{
			yyVAL.str = ""
		}
	case 589:
		yyDollar = yyS[yypt-5 : yypt+1]
//line mysql_sql.y:4015
		{
			yyVAL.str = yyDollar[4].str
		}
	case 594:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4030
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4034
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 596:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4040
		{
			yyLOCAL = &tree.ShowCreateTable{
				Name:         yyDollar[4].unresolvedObjectNameUnion(),
				SnapshotName: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 597:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4048
		{
			yyLOCAL = &tree.ShowCreateView{
				Name:         yyDollar[4].unresolvedObjectNameUnion(),
				SnapshotName: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 598:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4055
		{
			yyLOCAL = &tree.ShowCreateDatabase{IfNotExists: yyDollar[4].ifNotExistsUnion(), Name: yyDollar[5].str}
		}
		yyVAL.union = yyLOCAL
	case 599:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4059
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4065
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4071
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4075
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4081
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4087
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4091
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4095
		{
			yyLOCAL = tree.SetUnresolvedObjectName(3, [3]string{yyDollar[5].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4101
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4105
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4131
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4139
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4147
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4155
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 629:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4159
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:4165
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption *tree.AccountIdentified
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 631:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4178
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 632:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4186
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 633:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4195
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 634:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4201
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 635:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4209
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 636:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4217
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 637:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4225
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 638:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4231
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 639:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4239
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4245
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4253
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 642:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4259
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 645:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4269
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4274
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4281
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4297
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4310
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4321
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 651:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4325
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4331
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4336
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 654:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4343
		{
		}
	case 655:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4345
		{
		}
	case 656:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4348
		{
		}
	case 661:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4357
		{
		}
	case 663:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4361
		{
		}
	case 665:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4366
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 666:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4375
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4382
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 668:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4388
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 669:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4396
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 670:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4403
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 671:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4410
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 672:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4430
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 673:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4438
		{
			ins := yyDollar[5].insertUnion()
			ins.Table = yyDollar[3].tableExprUnion()
			ins.PartitionNames = yyDollar[4].identifierListUnion()
			ins.OnDuplicateUpdate = []*tree.UpdateExpr{nil}
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4448
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 675:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4452
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 676:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4458
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4465
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 678:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4471
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 679:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4479
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4486
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 681:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4493
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 682:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4512
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4516
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4520
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 685:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4525
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4529
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 687:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4533
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 688:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:4539
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4548
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 690:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4552
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4558
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 692:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4562
		{
			yyVAL.str = yyDollar[3].cstrUnion().Compare()
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4568
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 694:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4572
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 695:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4578
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 696:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4583
		{
		}
	case 698:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4587
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4594
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 701:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4598
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4605
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 704:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4610
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 705:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4614
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4620
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4624
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4630
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4634
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4639
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4643
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4656
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4667
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4678
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4700
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:4723
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:4731
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4740
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4744
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4757
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 721:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4761
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4766
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4770
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4777
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4782
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4789
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4795
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4799
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4803
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4807
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4811
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4815
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4820
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4824
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4830
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 737:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:4840
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:4855
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:4859
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4873
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 741:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4877
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4883
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4892
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4896
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4900
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4904
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4908
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:4914
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:4921
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:4930
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:4934
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:4940
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4948
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4952
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4957
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4961
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4967
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4971
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4975
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4980
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4984
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4990
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4996
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5000
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:5006
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5011
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5015
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5019
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5024
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5028
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5032
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5037
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5041
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5049
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5053
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 776:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5057
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5071
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5075
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5085
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5095
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5105
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5117
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5125
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5133
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5142
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5150
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5158
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5166
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5174
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5182
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5190
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5198
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5206
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5216
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5227
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5241
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5245
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5249
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 799:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5254
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5258
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5262
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5271
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5275
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5280
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5284
		{
			yyLOCAL = tree.GroupBy(yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5289
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5293
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5299
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5303
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5309
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5313
		{
			yyDollar[2].cstrUnion().SetConfig(0)
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5318
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5322
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5327
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix, nil)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5335
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5341
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5349
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5357
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].joinTableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5367
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5373
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5382
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5391
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5400
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5410
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 829:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5414
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 830:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5424
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 831:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5428
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 832:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5432
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 833:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5436
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 834:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5442
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5452
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5456
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 837:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5462
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5468
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5472
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5478
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5484
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 842:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5488
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 843:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5492
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 844:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5498
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5502
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5508
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5512
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5518
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5522
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5528
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5532
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5542
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5555
		{
			yyLOCAL = yyDollar[2].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:5561
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 855:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5567
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].cstrUnion().Compare()))
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:     tree.FuncName2ResolvableFunctionReference(name),
					FuncName: tree.NewCStrUseOrigin(yyDollar[1].cstrUnion().Origin(), yylex.(*Lexer).useOrigin),
					Exprs:    yyDollar[3].exprsUnion(),
					Type:     tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:5581
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5592
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5599
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5603
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:5609
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5619
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 863:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5623
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 864:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5627
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 865:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5632
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 866:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5636
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 867:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5640
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 868:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5644
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 869:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5649
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5653
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 871:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5657
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 872:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5661
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 873:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5665
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 874:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5670
		{
			yyVAL.str = ""
		}
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5674
		{
			yyVAL.str = yyDollar[1].str
		}
	case 876:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5678
		{
			yyVAL.str = yyDollar[2].str
		}
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5684
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 879:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5690
		{
			yyLOCAL = tree.NewCStr("", yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5694
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 881:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5698
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5702
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 883:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5706
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5712
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 905:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5752
		{
			var Language = yyDollar[3].str
			var Name = tree.Identifier(yyDollar[5].str)
			var Filename = tree.Identifier(yyDollar[7].str)
			yyLOCAL = tree.NewCreateExtension(
				Language,
				Name,
				Filename,
			)
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5765
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5771
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 908:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5777
		{
			var Name = yyDollar[3].procNameUnion()
			var Args = yyDollar[5].procArgsUnion()
			var Body = yyDollar[7].str
			yyLOCAL = tree.NewCreateProcedure(
				Name,
				Args,
				Body,
			)
		}
		yyVAL.union = yyLOCAL
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:5790
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().ToLower()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 910:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:5795
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().ToLower()), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().ToLower()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 911:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5801
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5808
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 914:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5812
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 915:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:5818
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 916:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:5824
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 917:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5829
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5833
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 919:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5837
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5841
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 921:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5848
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				goto ret1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				goto ret1
			}

			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[4].functionNameUnion()
			var Args = yyDollar[6].funcArgsUnion()
			var ReturnType = yyDollar[9].funcReturnUnion()
			var Language = yyDollar[11].str
			var Import = yyDollar[12].boolValUnion()
			var Body = yyDollar[13].str
			var Handler = yyDollar[14].str

			yyLOCAL = tree.NewCreateFunction(
				Replace,
				Name,
				Args,
				ReturnType,
				Language,
				Import,
				Body,
				Handler,
			)
		}
		yyVAL.union = yyLOCAL
	case 922:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:5881
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 923:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:5886
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 924:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5892
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 926:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5899
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 927:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5903
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 928:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:5909
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 929:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5915
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 930:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5919
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 931:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5923
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 932:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5929
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 933:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:5935
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 934:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5941
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 935:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5945
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 936:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5951
		{
			yyVAL.str = ""
		}
	case 938:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5958
		{
			yyVAL.str = yyDollar[2].str
		}
	case 939:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5964
		{
			var Replace bool
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 940:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5979
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 941:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5996
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = yyDollar[4].exprUnion()
			var AuthOption = yyDollar[5].accountAuthOptionUnion()
			var StatusOption = yyDollar[6].accountStatusUnion()
			var Comment = yyDollar[7].accountCommentUnion()
			yyLOCAL = tree.NewCreateAccount(
				IfNotExists,
				Name,
				AuthOption,
				StatusOption,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 942:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6013
		{
			yyVAL.str = yyDollar[1].str
		}
	case 943:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6017
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 944:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6023
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 945:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6027
		{
			yyVAL.str = "DEFINER = "
		}
	case 946:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6031
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 947:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6036
		{
			yyVAL.str = ""
		}
	case 948:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:6040
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 954:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6054
		{
			yyVAL.str = ""
		}
	case 957:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6062
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6068
		{
			var Str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 959:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6073
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 960:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:6079
		{
			var Equal = yyDollar[2].str
			var AdminName = yyDollar[3].exprUnion()
			var IdentifiedType = yyDollar[4].accountIdentifiedUnion()
			yyLOCAL = *tree.NewAccountAuthOption(
				Equal,
				AdminName,
				IdentifiedType,
			)
		}
		yyVAL.union = yyLOCAL
	case 961:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6092
		{
			var Str = yyDollar[1].str
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6097
		{
			var Str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 963:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6102
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6108
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 965:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6115
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 966:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6122
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByRandomPassword,
				nil,
			)
		}
		yyVAL.union = yyLOCAL
	case 967:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6129
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 968:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6136
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6144
		{
			as := tree.NewAccountStatus()
			as.Exist = false
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6150
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusOpen
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6157
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusSuspend
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 972:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6164
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusRestricted
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6172
		{
			ac := tree.NewAccountComment()
			ac.Exist = false
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 974:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6178
		{
			ac := tree.NewAccountComment()
			ac.Exist = true
			ac.Comment = yyDollar[2].str
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 975:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6187
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Users = yyDollar[4].usersUnion()
			var Role = yyDollar[5].accountRoleUnion()
			var MiscOpt = yyDollar[6].userMiscOptionUnion()
			var CommentOrAttribute = yyDollar[7].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewCreateUser(
				IfNotExists,
				Users,
				Role,
				MiscOpt,
				CommentOrAttribute,
			)
		}
		yyVAL.union = yyLOCAL
	case 976:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6204
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].cstrUnion().Compare())
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 977:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6221
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Url = yyDollar[5].str
			var Credentials = yyDollar[6].stageCredentialsUnion()
			var Status = yyDollar[7].stageStatusUnion()
			var Comment = yyDollar[8].stageCommentUnion()
			yyLOCAL = tree.NewCreateStage(
				IfNotExists,
				Name,
				Url,
				Credentials,
				Status,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 978:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6239
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 979:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6245
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 980:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6252
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6260
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 982:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6266
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 983:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6274
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 984:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6280
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 985:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6288
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 986:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6294
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 987:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6303
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 988:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6307
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 989:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6312
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 990:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6316
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 991:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6323
		{
			yyVAL.str = yyDollar[3].str
		}
	case 992:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6328
		{
			yyVAL.str = ""
		}
	case 993:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6332
		{
			yyVAL.str = yyDollar[2].str
		}
	case 994:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6338
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 995:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6351
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var dbName = yyDollar[6].str
			var comment = yyDollar[7].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, dbName, comment)
		}
		yyVAL.union = yyLOCAL
	case 996:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6361
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 997:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6365
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 998:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6371
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 999:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6377
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1000:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6383
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1001:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6390
		{
			yyVAL.str = ""
		}
	case 1002:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6394
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1003:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6400
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1004:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6408
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1005:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6416
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropSnapShot(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6424
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1007:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6429
		{
			var Exist = false
			var IsComment bool
			var Str string
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)

		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6441
		{
			var Exist = true
			var IsComment = true
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6452
		{
			var Exist = true
			var IsComment = false
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6561
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6565
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6571
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6584
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6588
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6594
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6607
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6611
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6615
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6620
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6624
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6630
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6637
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6643
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6652
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1026:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6659
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewCreateRole(
				IfNotExists,
				Roles,
			)
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:6670
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:6674
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:6680
		{
			var UserName = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6689
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6693
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6697
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1033:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6702
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 1034:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6706
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6710
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6714
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6720
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = tree.NewIndexOption()
				io.IType = yyDollar[5].indexTypeUnion()
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = tree.NewIndexOption()
				io.IType = tree.INDEX_TYPE_INVALID
			}
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Table = yyDollar[7].tableNameUnion()
			var ifNotExists = false
			var IndexCat = yyDollar[2].indexCategoryUnion()
			var KeyParts = yyDollar[9].keyPartsUnion()
			var IndexOption = io
			var MiscOption []tree.MiscOption
			yyLOCAL = tree.NewCreateIndex(
				Name,
				Table,
				ifNotExists,
				IndexCat,
				KeyParts,
				IndexOption,
				MiscOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6751
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6755
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6781
		{
			io := tree.NewIndexOption()
			io.KeyBlockSize = uint64(yyDollar[3].item.(int64))
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1041:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6787
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}

			io := tree.NewIndexOption()
			io.AlgoParamList = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6799
		{
			io := tree.NewIndexOption()
			io.AlgoParamVectorOpType = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6805
		{
			io := tree.NewIndexOption()
			io.Comment = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1044:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6811
		{
			io := tree.NewIndexOption()
			io.ParserName = yyDollar[3].cstrUnion().Compare()
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1045:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6817
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_VISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1046:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6823
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_INVISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1047:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:6831
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1048:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:6835
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1049:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:6841
		{
			// Order is parsed but just ignored as MySQL dtree.
			var ColName = yyDollar[1].unresolvedNameUnion()
			var Length = int(yyDollar[2].lengthOptUnion())
			var Direction = yyDollar[3].directionUnion()
			var Expr tree.Expr
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1050:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:6855
		{
			var ColName *tree.UnresolvedName
			var Length int
			var Expr = yyDollar[2].exprUnion()
			var Direction = yyDollar[4].directionUnion()
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1051:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6869
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1052:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6873
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1053:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6877
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1054:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6881
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1055:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6885
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1056:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6889
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6893
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6899
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var SubscriptionOption = yyDollar[5].subscriptionOptionUnion()
			var CreateOptions = yyDollar[6].createOptionsUnion()
			yyLOCAL = tree.NewCreateDatabase(
				IfNotExists,
				Name,
				SubscriptionOption,
				CreateOptions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:6914
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:6918
		{
			var From = tree.Identifier(yyDollar[2].str)
			var Publication = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewSubscriptionOption(From, Publication)
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6929
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6933
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6938
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6942
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6948
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6952
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:6958
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Charset = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCharset(
				IsDefault,
				Charset,
			)
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:6967
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Collate = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCollate(
				IsDefault,
				Collate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:6976
		{
			var Encrypt = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionEncryption(Encrypt)
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6982
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6986
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6992
		{
			var TableName = yyDollar[4].tableNameUnion()
			var Options = yyDollar[7].connectorOptionsUnion()
			yyLOCAL = tree.NewCreateConnector(
				TableName,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7003
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7009
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7027
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7045
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7063
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			var SourceName = yyDollar[5].tableNameUnion()
			var Defs = yyDollar[7].tableDefsUnion()
			var Options = yyDollar[9].tableOptionsUnion()
			yyLOCAL = tree.NewCreateSource(
				Replace,
				IfNotExists,
				SourceName,
				Defs,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7079
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7083
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7092
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7104
		{
			t := tree.NewCreateTable()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Param = yyDollar[9].loadParamUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7113
		{
			t := tree.NewCreateTable()
			t.IsClusterTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7125
		{
			t := tree.NewCreateTable()
			t.IsDynamicTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			t.DTOptions = yyDollar[8].tableOptionsUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7135
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[6].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7145
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[9].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7156
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7166
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[10].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7177
		{
			t := tree.NewCreateTable()
			t.IsAsLike = true
			t.Table = *yyDollar[5].tableNameUnion()
			t.LikeTableName = *yyDollar[7].tableNameUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7187
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7194
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7204
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7217
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7225
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7234
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1097:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7243
		{
			yyVAL.str = ""
		}
	case 1098:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:7247
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1099:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7253
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7257
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1101:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7262
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1102:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7266
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1103:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:7273
		{
			yyLOCAL = &tree.TailParameter{
				Charset:      yyDollar[1].str,
				Fields:       yyDollar[2].fieldsUnion(),
				Lines:        yyDollar[3].linesUnion(),
				IgnoredLines: uint64(yyDollar[4].int64ValUnion()),
				ColumnList:   yyDollar[5].loadColumnsUnion(),
				Assignments:  yyDollar[6].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7285
		{
			yyVAL.str = ""
		}
	case 1105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7289
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1106:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7295
		{
			var Name = yyDollar[4].tableNameUnion()
			var Type = yyDollar[5].columnTypeUnion()
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var IncrementBy = yyDollar[6].incrementByOptionUnion()
			var MinValue = yyDollar[7].minValueOptionUnion()
			var MaxValue = yyDollar[8].maxValueOptionUnion()
			var StartWith = yyDollar[9].startWithOptionUnion()
			var Cycle = yyDollar[10].boolValUnion()
			yyLOCAL = tree.NewCreateSequence(
				Name,
				Type,
				IfNotExists,
				IncrementBy,
				MinValue,
				MaxValue,
				StartWith,
				Cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7316
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7330
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7334
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7338
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7344
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7348
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1113:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7355
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1114:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7362
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1115:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7369
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1116:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7376
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7380
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7384
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7388
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7392
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1121:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7399
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7406
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7410
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7417
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7424
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1126:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7428
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7434
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7440
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7444
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7451
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7458
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1132:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7465
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1133:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7472
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7476
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7481
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7485
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7489
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7494
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1139:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7498
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()
			yyLOCAL = tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1140:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7511
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7515
		{
			var ColumnList = []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)

		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7523
		{
			var ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7531
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7535
		{
			var IsSubPartition = true
			var PType = yyDollar[3].partitionByUnion()
			var Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = tree.NewPartitionBy2(
				IsSubPartition,
				PType,
				Num,
			)
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7547
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7551
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7557
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7561
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7567
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options []tree.TableOption
			var Subs = yyDollar[4].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1150:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7580
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options = yyDollar[4].tableOptionsUnion()
			var Subs = yyDollar[5].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7594
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7598
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7604
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7608
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1155:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:7614
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options []tree.TableOption
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1156:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:7623
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options = yyDollar[3].tableOptionsUnion()
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7634
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7638
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1159:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7643
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7647
		{
			expr := tree.NewMaxValue()
			var valueList = tree.Exprs{expr}
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7653
		{
			var valueList = yyDollar[5].exprsUnion()
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1162:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7658
		{
			var valueList = yyDollar[4].exprsUnion()
			yyLOCAL = tree.NewValuesIn(
				valueList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7666
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7670
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1165:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7680
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7684
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7695
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7703
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7711
		{
			listTyp := tree.NewListType()
			listTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7719
		{
			listTyp := tree.NewListType()
			listTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7730
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7739
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			keyTyp.ColumnList = yyDollar[5].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7749
		{
			Linear := yyDollar[1].boolValUnion()
			Expr := yyDollar[4].exprUnion()
			hashTyp := tree.NewHashType(Linear, Expr)
			yyLOCAL = tree.NewPartitionBy(
				hashTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1175:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7759
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7763
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7768
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7772
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:7778
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:7782
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1181:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:7788
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:7797
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7807
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1184:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7811
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7817
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7821
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7827
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7836
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7846
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7850
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7856
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7860
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7864
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1194:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7870
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7874
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7878
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7882
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1198:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7886
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7890
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1200:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7894
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1201:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7899
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7903
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7907
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1204:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7911
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1205:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7915
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7919
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1207:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7923
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1208:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7927
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7931
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1210:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7935
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1211:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7939
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1212:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7943
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1213:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7947
		{
			t := tree.NewTableOptionPackKeys()
			t.Value = yyDollar[3].item.(int64)
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1214:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7953
		{
			t := tree.NewTableOptionPackKeys()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1215:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7959
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7963
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7967
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7971
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7975
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1220:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7981
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1221:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7987
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1222:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7993
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1223:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7999
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1224:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8005
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1225:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8011
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8015
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1227:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8019
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1228:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8023
		{
			var Preperties = yyDollar[3].propertiesUnion()
			yyLOCAL = tree.NewTableOptionProperties(Preperties)
		}
		yyVAL.union = yyLOCAL
	case 1229:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8030
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1230:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8034
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1231:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:8040
		{
			var Key = yyDollar[1].str
			var Value = yyDollar[3].str
			yyLOCAL = *tree.NewProperty(
				Key,
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 1232:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8051
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1233:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8055
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1234:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8061
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1235:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8065
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1236:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8069
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1237:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8073
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1238:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8077
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1239:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8081
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1244:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8095
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1245:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8099
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1246:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8108
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 1247:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8113
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 1248:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8118
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			atTs := &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPTIME,
				Expr: yyDollar[5].exprUnion(),
			}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix, atTs)
		}
		yyVAL.union = yyLOCAL
	case 1249:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8127
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			atTs := &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPSNAPSHOT,
				Expr: yyDollar[5].exprUnion(),
			}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix, atTs)
		}
		yyVAL.union = yyLOCAL
	case 1250:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8136
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			atTs := &tree.AtTimeStamp{
				Type: tree.ATMOTIMESTAMP,
				Expr: yyDollar[5].exprUnion(),
			}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix, atTs)
		}
		yyVAL.union = yyLOCAL
	case 1251:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8145
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			atTs := &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPTIME,
				Expr: yyDollar[7].exprUnion(),
			}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix, atTs)
		}
		yyVAL.union = yyLOCAL
	case 1252:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8154
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			atTs := &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPSNAPSHOT,
				Expr: yyDollar[7].exprUnion(),
			}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix, atTs)
		}
		yyVAL.union = yyLOCAL
	case 1253:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8163
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			atTs := &tree.AtTimeStamp{
				Type: tree.ATMOTIMESTAMP,
				Expr: yyDollar[7].exprUnion(),
			}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix, atTs)
		}
		yyVAL.union = yyLOCAL
	case 1254:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8173
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1256:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8180
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1257:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8184
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1258:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8190
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1259:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8194
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1260:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8198
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1261:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8204
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1262:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8208
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1263:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8214
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1264:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8227
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1265:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8240
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid the type of index")
					goto ret1
				}
			}

			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1266:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8279
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid type of index")
					goto ret1
				}
			}
			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1267:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8319
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1268:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8333
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1269:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8339
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1270:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8352
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8365
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8378
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8391
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var KeyParts = yyDollar[6].keyPartsUnion()
			var Name = yyDollar[4].str
			var Refer = yyDollar[8].attributeReferenceUnion()
			var Empty = true
			yyLOCAL = tree.NewForeignKey(
				IfNotExists,
				KeyParts,
				Name,
				Refer,
				Empty,
			)
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8406
		{
			var Expr = yyDollar[3].exprUnion()
			var Enforced = yyDollar[5].boolValUnion()
			yyLOCAL = tree.NewCheckIndex(
				Expr,
				Enforced,
			)
		}
		yyVAL.union = yyLOCAL
	case 1275:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8416
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8422
		{
			yyVAL.str = ""
		}
	case 1278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8426
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1281:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8436
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1282:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8442
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1283:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8448
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1294:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8469
		{
			yyVAL.str = ""
		}
	case 1295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8473
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1296:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:8479
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1297:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8485
		{
			unResolve := tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare())
			unResolve.SetUnresolvedNameCStrParts(yylex.(*Lexer).useOrigin, yyDollar[1].cstrUnion().Origin())
			yyLOCAL = unResolve
		}
		yyVAL.union = yyLOCAL
	case 1298:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8491
		{
			unResolve := tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare())
			unResolve.SetUnresolvedNameCStrParts(yylex.(*Lexer).useOrigin, yyDollar[1].cstrUnion().Origin(), yyDollar[3].cstrUnion().Origin())
			yyLOCAL = unResolve
		}
		yyVAL.union = yyLOCAL
	case 1299:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8497
		{
			unResolve := tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
			unResolve.SetUnresolvedNameCStrParts(yylex.(*Lexer).useOrigin, yyDollar[1].cstrUnion().Origin(), yyDollar[3].cstrUnion().Origin(), yyDollar[5].cstrUnion().Origin())
			yyLOCAL = unResolve
		}
		yyVAL.union = yyLOCAL
	case 1300:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8505
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1301:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8509
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1302:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8513
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1303:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8517
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1304:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8523
		{
			unResolve := tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare())
			unResolve.SetUnresolvedNameCStrParts(yylex.(*Lexer).useOrigin, yyDollar[1].cstrUnion().Origin())
			yyLOCAL = unResolve
		}
		yyVAL.union = yyLOCAL
	case 1305:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8529
		{
			unResolve := tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare())
			unResolve.SetUnresolvedNameCStrParts(yylex.(*Lexer).useOrigin, yyDollar[1].cstrUnion().Origin(), yyDollar[3].cstrUnion().Origin())
			yyLOCAL = unResolve
		}
		yyVAL.union = yyLOCAL
	case 1306:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8535
		{
			unResolve := tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
			unResolve.SetUnresolvedNameCStrParts(yylex.(*Lexer).useOrigin, yyDollar[1].cstrUnion().Origin(), yyDollar[3].cstrUnion().Origin(), yyDollar[5].cstrUnion().Origin())
			yyLOCAL = unResolve
		}
		yyVAL.union = yyLOCAL
	case 1307:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8542
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1308:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8546
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1309:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8552
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1310:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8556
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1311:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8562
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1312:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8566
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1313:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8570
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1314:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8574
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1315:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8578
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1316:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8582
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1317:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8587
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1318:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8591
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1319:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8595
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1320:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8599
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1321:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8603
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1322:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8607
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1323:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8611
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1324:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8615
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1325:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8619
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1326:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8623
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[3].str))
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[3].str, yylex.(*Lexer).useOrigin),
				Exprs:    es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1327:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8637
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1328:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8641
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1329:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8645
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1330:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8649
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1331:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8653
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1332:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8657
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1333:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8663
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1334:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8667
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1335:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8672
		{
			yyVAL.str = ""
		}
	case 1336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8676
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8682
		{
			yyVAL.str = ""
		}
	case 1338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8686
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1339:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:8692
		{
			var TableName = yyDollar[2].tableNameUnion()
			var KeyParts = yyDollar[3].keyPartsUnion()
			var Match = yyDollar[4].matchTypeUnion()
			var OnDelete = yyDollar[5].referenceOnRecordUnion().OnDelete
			var OnUpdate = yyDollar[5].referenceOnRecordUnion().OnUpdate
			yyLOCAL = tree.NewAttributeReference(
				TableName,
				KeyParts,
				Match,
				OnDelete,
				OnUpdate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1340:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8709
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1341:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8716
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1342:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8723
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1343:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8730
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1344:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8737
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1345:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8746
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1346:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8752
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1347:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8758
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1348:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8762
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1349:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8766
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1350:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8770
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1351:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8774
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1352:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8779
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1354:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8786
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1355:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8790
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1356:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8794
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1357:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:8799
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1358:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:8803
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1359:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8808
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1360:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8812
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1367:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:8828
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1368:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8834
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1369:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8838
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1370:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8842
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1371:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8846
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1372:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8850
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1373:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8854
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1374:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8858
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1375:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8862
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1376:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8866
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1377:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8870
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1378:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8874
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1379:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8878
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1380:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8882
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1381:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8888
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1382:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8892
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1383:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8896
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1384:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8900
		{
			yyLOCAL = tree.NewParentExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1385:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8904
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1386:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8908
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1387:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8912
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1388:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8916
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1389:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8920
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1390:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8924
		{
			hint := strings.ToLower(yyDollar[2].cstrUnion().Compare())
			switch hint {
			case "d":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "DATETIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "t":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimeFamily,
						FamilyString: "TIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "ts":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "TIMESTAMP",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			default:
				yylex.Error("Invalid type")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1391:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8966
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1392:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8970
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1393:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8974
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1394:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8979
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1395:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8987
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1396:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8991
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1397:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8995
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1398:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8999
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1399:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9003
		{
			name := tree.SetUnresolvedName("convert")
			es := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1400:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9013
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1401:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9017
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1402:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9021
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1403:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9025
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1404:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9029
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1405:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9033
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1406:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9037
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1407:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9043
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1408:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9052
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1409:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9061
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1410:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9072
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1411:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9082
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1412:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9092
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1413:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9101
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1414:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9111
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1415:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9121
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1416:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9131
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1417:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9140
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1418:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9150
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1419:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9154
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1420:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9159
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1421:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9163
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1422:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9169
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1423:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9173
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1424:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:9179
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9188
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1426:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9200
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1427:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9217
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1429:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9234
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1430:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9247
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1431:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9260
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1432:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9272
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1433:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9286
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1434:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9301
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1435:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9316
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1436:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9333
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1437:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9348
		{
		}
	case 1441:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9355
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1442:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9359
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1443:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9363
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1444:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9369
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1445:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9373
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1446:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9377
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1447:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9381
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1448:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9387
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1449:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9391
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1450:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9395
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1451:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9401
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1452:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9409
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1453:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9419
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1454:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9423
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1455:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9430
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1456:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9435
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1457:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9439
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1458:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9444
		{
			yyVAL.str = ","
		}
	case 1459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9448
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1460:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9453
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9457
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1462:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9462
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1464:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9469
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1465:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9495
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1466:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9507
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1467:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9519
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1468:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9530
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1469:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9541
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1470:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9552
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1471:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9562
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1472:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9572
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1473:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9583
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1474:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9594
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1475:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9605
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1476:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9616
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1477:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9627
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1478:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9638
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1479:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9649
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1480:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9660
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1481:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9671
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1482:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9682
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1483:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9693
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1484:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9704
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1485:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9715
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1486:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9726
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1490:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9744
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1491:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9753
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1492:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9762
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1493:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9771
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1494:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9780
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1495:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9791
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1496:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9800
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{yyDollar[4].exprUnion()},
				Type:     yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1497:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9810
		{
			name := tree.SetUnresolvedName("nextval")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1498:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9819
		{
			name := tree.SetUnresolvedName("setval")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1499:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9828
		{
			name := tree.SetUnresolvedName("currval")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1500:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9837
		{
			name := tree.SetUnresolvedName("lastval")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1501:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9846
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1502:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9858
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1503:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9869
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1504:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9882
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1505:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9894
		{
			column := tree.SetUnresolvedName(strings.ToLower(yyDollar[3].str))
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9917
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1541:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9953
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1542:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9966
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1543:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9979
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1544:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9991
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1545:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10000
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
			}
		}
		yyVAL.union = yyLOCAL
	case 1546:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10008
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
			}
		}
		yyVAL.union = yyLOCAL
	case 1547:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10016
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1548:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10029
		{
			name := tree.SetUnresolvedName("binary")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1549:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10038
		{
			name := tree.SetUnresolvedName("binary")
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1550:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10049
		{
			name := tree.SetUnresolvedName("binary")
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1551:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10060
		{
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1552:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10069
		{
			cn := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1553:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10081
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("date")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1554:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10091
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("time")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1555:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10101
		{
			name := tree.SetUnresolvedName("insert")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1556:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10110
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.SetUnresolvedName("mod")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1557:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10121
		{
			name := tree.SetUnresolvedName("password")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1558:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10130
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("timestamp")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1559:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10140
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1560:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10149
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1561:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10158
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1562:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10168
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1563:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10172
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1564:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10178
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1565:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10182
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(ival), str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1572:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10201
		{
		}
	case 1573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10203
		{
		}
	case 1607:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10244
		{
			name := tree.SetUnresolvedName("interval")
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin(yyDollar[1].str, yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1608:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10256
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1609:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10260
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1610:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10264
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1611:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:10270
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1612:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10275
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1613:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10279
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1614:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10285
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1615:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10289
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1616:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10295
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1617:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10299
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1618:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10306
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1619:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10310
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1620:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10314
		{
			name := tree.SetUnresolvedName(strings.ToLower("concat"))
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStrUseOrigin("concat", yylex.(*Lexer).useOrigin),
				Exprs:    tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1621:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10323
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1622:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10327
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1623:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10331
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1624:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10336
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1625:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10340
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1626:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10346
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1627:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10350
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1628:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10354
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1629:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10358
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1630:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10362
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1631:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10366
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1632:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10370
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1633:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10374
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1634:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10378
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1635:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10382
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1637:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10390
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1638:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10394
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1639:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10398
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1640:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10402
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1641:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10406
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1642:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10410
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1643:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10414
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1644:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10418
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1645:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10422
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1646:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10426
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1648:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10432
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1649:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10436
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1650:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10442
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1651:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10446
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1652:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10453
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1653:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10457
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1654:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10461
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1655:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10467
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1656:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10471
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1657:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10475
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1658:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10479
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1659:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10483
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1660:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10487
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1661:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10491
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1662:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10497
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1663:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10501
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1664:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10505
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1665:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10509
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1666:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10515
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1667:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10528
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1668:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10533
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1669:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10539
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1670:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10543
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1671:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10556
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1672:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10561
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1673:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10565
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1674:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10569
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1675:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10573
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1676:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10577
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1677:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10584
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1678:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10588
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1679:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10592
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1680:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10596
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1681:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10603
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1685:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10614
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1686:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10619
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1687:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10625
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1688:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10637
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1689:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10649
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1690:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10661
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1691:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10674
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1692:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10687
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1693:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10700
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1694:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10713
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1695:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10726
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1696:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10739
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1697:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10752
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1698:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10765
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1699:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10778
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1700:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10791
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1701:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10806
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1702:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10833
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1703:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10875
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1704:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10911
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1705:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10947
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1706:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10964
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1707:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10976
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1708:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10996
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1709:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11016
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1710:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11036
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1711:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11052
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1712:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11065
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1713:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11078
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1714:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11091
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1715:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11104
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1716:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11116
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1717:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11128
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1718:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11140
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1719:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11152
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1720:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11164
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1721:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11176
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1722:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11188
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1723:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11200
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1724:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11212
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1725:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11225
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1726:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11238
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1727:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11251
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1728:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11264
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1729:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11279
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1730:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11287
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1731:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11296
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1732:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11306
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1733:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11329
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1734:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11334
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1735:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11340
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1737:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11347
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1738:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11351
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1739:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11356
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1740:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11360
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1741:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11366
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1742:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11372
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1743:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11379
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1744:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11386
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1745:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11395
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1746:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11402
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1747:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11409
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1748:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11418
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1749:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11422
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1750:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11426
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1751:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11432
		{
		}
	case 1752:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11434
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1756:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11444
		{
			yyVAL.str = ""
		}
	case 1757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:11448
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
