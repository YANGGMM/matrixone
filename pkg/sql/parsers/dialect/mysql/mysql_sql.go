// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"go/constant"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const CONNECT = 57367
const MANAGE = 57368
const GRANTS = 57369
const OWNERSHIP = 57370
const REFERENCE = 57371
const LOWER_THAN_SET = 57372
const SET = 57373
const ALL = 57374
const DISTINCT = 57375
const DISTINCTROW = 57376
const AS = 57377
const EXISTS = 57378
const ASC = 57379
const DESC = 57380
const INTO = 57381
const DUPLICATE = 57382
const DEFAULT = 57383
const LOCK = 57384
const KEYS = 57385
const NULLS = 57386
const FIRST = 57387
const LAST = 57388
const AFTER = 57389
const INSTANT = 57390
const INPLACE = 57391
const COPY = 57392
const DISABLE = 57393
const ENABLE = 57394
const UNDEFINED = 57395
const MERGE = 57396
const TEMPTABLE = 57397
const DEFINER = 57398
const INVOKER = 57399
const SQL = 57400
const SECURITY = 57401
const CASCADED = 57402
const VALUES = 57403
const NEXT = 57404
const VALUE = 57405
const SHARE = 57406
const MODE = 57407
const SQL_NO_CACHE = 57408
const SQL_CACHE = 57409
const JOIN = 57410
const STRAIGHT_JOIN = 57411
const LEFT = 57412
const RIGHT = 57413
const INNER = 57414
const OUTER = 57415
const CROSS = 57416
const NATURAL = 57417
const USE = 57418
const FORCE = 57419
const CROSS_L2 = 57420
const LOWER_THAN_ON = 57421
const ON = 57422
const USING = 57423
const SUBQUERY_AS_EXPR = 57424
const LOWER_THAN_STRING = 57425
const ID = 57426
const AT_ID = 57427
const AT_AT_ID = 57428
const STRING = 57429
const VALUE_ARG = 57430
const LIST_ARG = 57431
const COMMENT = 57432
const COMMENT_KEYWORD = 57433
const QUOTE_ID = 57434
const STAGE = 57435
const CREDENTIALS = 57436
const STAGES = 57437
const SNAPSHOTS = 57438
const INTEGRAL = 57439
const HEX = 57440
const FLOAT = 57441
const HEXNUM = 57442
const BIT_LITERAL = 57443
const NULL = 57444
const TRUE = 57445
const FALSE = 57446
const LOWER_THAN_CHARSET = 57447
const CHARSET = 57448
const UNIQUE = 57449
const KEY = 57450
const OR = 57451
const PIPE_CONCAT = 57452
const XOR = 57453
const AND = 57454
const NOT = 57455
const BETWEEN = 57456
const CASE = 57457
const WHEN = 57458
const THEN = 57459
const ELSE = 57460
const END = 57461
const ELSEIF = 57462
const LOWER_THAN_EQ = 57463
const LE = 57464
const GE = 57465
const NE = 57466
const NULL_SAFE_EQUAL = 57467
const IS = 57468
const LIKE = 57469
const REGEXP = 57470
const IN = 57471
const ASSIGNMENT = 57472
const ILIKE = 57473
const SHIFT_LEFT = 57474
const SHIFT_RIGHT = 57475
const DIV = 57476
const MOD = 57477
const UNARY = 57478
const COLLATE = 57479
const BINARY = 57480
const UNDERSCORE_BINARY = 57481
const INTERVAL = 57482
const OUT = 57483
const INOUT = 57484
const BEGIN = 57485
const START = 57486
const TRANSACTION = 57487
const COMMIT = 57488
const ROLLBACK = 57489
const WORK = 57490
const CONSISTENT = 57491
const SNAPSHOT = 57492
const CHAIN = 57493
const NO = 57494
const RELEASE = 57495
const PRIORITY = 57496
const QUICK = 57497
const BIT = 57498
const TINYINT = 57499
const SMALLINT = 57500
const MEDIUMINT = 57501
const INT = 57502
const INTEGER = 57503
const BIGINT = 57504
const INTNUM = 57505
const REAL = 57506
const DOUBLE = 57507
const FLOAT_TYPE = 57508
const DECIMAL = 57509
const NUMERIC = 57510
const DECIMAL_VALUE = 57511
const TIME = 57512
const TIMESTAMP = 57513
const DATETIME = 57514
const YEAR = 57515
const CHAR = 57516
const VARCHAR = 57517
const BOOL = 57518
const CHARACTER = 57519
const VARBINARY = 57520
const NCHAR = 57521
const TEXT = 57522
const TINYTEXT = 57523
const MEDIUMTEXT = 57524
const LONGTEXT = 57525
const BLOB = 57526
const TINYBLOB = 57527
const MEDIUMBLOB = 57528
const LONGBLOB = 57529
const JSON = 57530
const ENUM = 57531
const UUID = 57532
const VECF32 = 57533
const VECF64 = 57534
const GEOMETRY = 57535
const POINT = 57536
const LINESTRING = 57537
const POLYGON = 57538
const GEOMETRYCOLLECTION = 57539
const MULTIPOINT = 57540
const MULTILINESTRING = 57541
const MULTIPOLYGON = 57542
const INT1 = 57543
const INT2 = 57544
const INT3 = 57545
const INT4 = 57546
const INT8 = 57547
const S3OPTION = 57548
const STAGEOPTION = 57549
const SQL_SMALL_RESULT = 57550
const SQL_BIG_RESULT = 57551
const SQL_BUFFER_RESULT = 57552
const LOW_PRIORITY = 57553
const HIGH_PRIORITY = 57554
const DELAYED = 57555
const CREATE = 57556
const ALTER = 57557
const DROP = 57558
const RENAME = 57559
const ANALYZE = 57560
const ADD = 57561
const RETURNS = 57562
const SCHEMA = 57563
const TABLE = 57564
const SEQUENCE = 57565
const INDEX = 57566
const VIEW = 57567
const TO = 57568
const IGNORE = 57569
const IF = 57570
const PRIMARY = 57571
const COLUMN = 57572
const CONSTRAINT = 57573
const SPATIAL = 57574
const FULLTEXT = 57575
const FOREIGN = 57576
const KEY_BLOCK_SIZE = 57577
const SHOW = 57578
const DESCRIBE = 57579
const EXPLAIN = 57580
const DATE = 57581
const ESCAPE = 57582
const REPAIR = 57583
const OPTIMIZE = 57584
const TRUNCATE = 57585
const MAXVALUE = 57586
const PARTITION = 57587
const REORGANIZE = 57588
const LESS = 57589
const THAN = 57590
const PROCEDURE = 57591
const TRIGGER = 57592
const STATUS = 57593
const VARIABLES = 57594
const ROLE = 57595
const PROXY = 57596
const AVG_ROW_LENGTH = 57597
const STORAGE = 57598
const DISK = 57599
const MEMORY = 57600
const CHECKSUM = 57601
const COMPRESSION = 57602
const DATA = 57603
const DIRECTORY = 57604
const DELAY_KEY_WRITE = 57605
const ENCRYPTION = 57606
const ENGINE = 57607
const MAX_ROWS = 57608
const MIN_ROWS = 57609
const PACK_KEYS = 57610
const ROW_FORMAT = 57611
const STATS_AUTO_RECALC = 57612
const STATS_PERSISTENT = 57613
const STATS_SAMPLE_PAGES = 57614
const DYNAMIC = 57615
const COMPRESSED = 57616
const REDUNDANT = 57617
const COMPACT = 57618
const FIXED = 57619
const COLUMN_FORMAT = 57620
const AUTO_RANDOM = 57621
const ENGINE_ATTRIBUTE = 57622
const SECONDARY_ENGINE_ATTRIBUTE = 57623
const INSERT_METHOD = 57624
const RESTRICT = 57625
const CASCADE = 57626
const ACTION = 57627
const PARTIAL = 57628
const SIMPLE = 57629
const CHECK = 57630
const ENFORCED = 57631
const RANGE = 57632
const LIST = 57633
const ALGORITHM = 57634
const LINEAR = 57635
const PARTITIONS = 57636
const SUBPARTITION = 57637
const SUBPARTITIONS = 57638
const CLUSTER = 57639
const TYPE = 57640
const ANY = 57641
const SOME = 57642
const EXTERNAL = 57643
const LOCALFILE = 57644
const URL = 57645
const PREPARE = 57646
const DEALLOCATE = 57647
const RESET = 57648
const EXTENSION = 57649
const INCREMENT = 57650
const CYCLE = 57651
const MINVALUE = 57652
const PUBLICATION = 57653
const SUBSCRIPTIONS = 57654
const PUBLICATIONS = 57655
const PROPERTIES = 57656
const PARSER = 57657
const VISIBLE = 57658
const INVISIBLE = 57659
const BTREE = 57660
const HASH = 57661
const RTREE = 57662
const BSI = 57663
const IVFFLAT = 57664
const MASTER = 57665
const ZONEMAP = 57666
const LEADING = 57667
const BOTH = 57668
const TRAILING = 57669
const UNKNOWN = 57670
const LISTS = 57671
const OP_TYPE = 57672
const REINDEX = 57673
const EXPIRE = 57674
const ACCOUNT = 57675
const ACCOUNTS = 57676
const UNLOCK = 57677
const DAY = 57678
const NEVER = 57679
const PUMP = 57680
const MYSQL_COMPATIBILITY_MODE = 57681
const UNIQUE_CHECK_ON_AUTOINCR = 57682
const MODIFY = 57683
const CHANGE = 57684
const SECOND = 57685
const ASCII = 57686
const COALESCE = 57687
const COLLATION = 57688
const HOUR = 57689
const MICROSECOND = 57690
const MINUTE = 57691
const MONTH = 57692
const QUARTER = 57693
const REPEAT = 57694
const REVERSE = 57695
const ROW_COUNT = 57696
const WEEK = 57697
const REVOKE = 57698
const FUNCTION = 57699
const PRIVILEGES = 57700
const TABLESPACE = 57701
const EXECUTE = 57702
const SUPER = 57703
const GRANT = 57704
const OPTION = 57705
const REFERENCES = 57706
const REPLICATION = 57707
const SLAVE = 57708
const CLIENT = 57709
const USAGE = 57710
const RELOAD = 57711
const FILE = 57712
const TEMPORARY = 57713
const ROUTINE = 57714
const EVENT = 57715
const SHUTDOWN = 57716
const NULLX = 57717
const AUTO_INCREMENT = 57718
const APPROXNUM = 57719
const SIGNED = 57720
const UNSIGNED = 57721
const ZEROFILL = 57722
const ENGINES = 57723
const LOW_CARDINALITY = 57724
const AUTOEXTEND_SIZE = 57725
const ADMIN_NAME = 57726
const RANDOM = 57727
const SUSPEND = 57728
const ATTRIBUTE = 57729
const HISTORY = 57730
const REUSE = 57731
const CURRENT = 57732
const OPTIONAL = 57733
const FAILED_LOGIN_ATTEMPTS = 57734
const PASSWORD_LOCK_TIME = 57735
const UNBOUNDED = 57736
const SECONDARY = 57737
const RESTRICTED = 57738
const USER = 57739
const IDENTIFIED = 57740
const CIPHER = 57741
const ISSUER = 57742
const X509 = 57743
const SUBJECT = 57744
const SAN = 57745
const REQUIRE = 57746
const SSL = 57747
const NONE = 57748
const PASSWORD = 57749
const SHARED = 57750
const EXCLUSIVE = 57751
const MAX_QUERIES_PER_HOUR = 57752
const MAX_UPDATES_PER_HOUR = 57753
const MAX_CONNECTIONS_PER_HOUR = 57754
const MAX_USER_CONNECTIONS = 57755
const FORMAT = 57756
const VERBOSE = 57757
const CONNECTION = 57758
const TRIGGERS = 57759
const PROFILES = 57760
const LOAD = 57761
const INLINE = 57762
const INFILE = 57763
const TERMINATED = 57764
const OPTIONALLY = 57765
const ENCLOSED = 57766
const ESCAPED = 57767
const STARTING = 57768
const LINES = 57769
const ROWS = 57770
const IMPORT = 57771
const DISCARD = 57772
const JSONTYPE = 57773
const MODUMP = 57774
const OVER = 57775
const PRECEDING = 57776
const FOLLOWING = 57777
const GROUPS = 57778
const DATABASES = 57779
const TABLES = 57780
const SEQUENCES = 57781
const EXTENDED = 57782
const FULL = 57783
const PROCESSLIST = 57784
const FIELDS = 57785
const COLUMNS = 57786
const OPEN = 57787
const ERRORS = 57788
const WARNINGS = 57789
const INDEXES = 57790
const SCHEMAS = 57791
const NODE = 57792
const LOCKS = 57793
const ROLES = 57794
const TABLE_NUMBER = 57795
const COLUMN_NUMBER = 57796
const TABLE_VALUES = 57797
const TABLE_SIZE = 57798
const NAMES = 57799
const GLOBAL = 57800
const PERSIST = 57801
const SESSION = 57802
const ISOLATION = 57803
const LEVEL = 57804
const READ = 57805
const WRITE = 57806
const ONLY = 57807
const REPEATABLE = 57808
const COMMITTED = 57809
const UNCOMMITTED = 57810
const SERIALIZABLE = 57811
const LOCAL = 57812
const EVENTS = 57813
const PLUGINS = 57814
const CURRENT_TIMESTAMP = 57815
const DATABASE = 57816
const CURRENT_TIME = 57817
const LOCALTIME = 57818
const LOCALTIMESTAMP = 57819
const UTC_DATE = 57820
const UTC_TIME = 57821
const UTC_TIMESTAMP = 57822
const REPLACE = 57823
const CONVERT = 57824
const SEPARATOR = 57825
const TIMESTAMPDIFF = 57826
const CURRENT_DATE = 57827
const CURRENT_USER = 57828
const CURRENT_ROLE = 57829
const SECOND_MICROSECOND = 57830
const MINUTE_MICROSECOND = 57831
const MINUTE_SECOND = 57832
const HOUR_MICROSECOND = 57833
const HOUR_SECOND = 57834
const HOUR_MINUTE = 57835
const DAY_MICROSECOND = 57836
const DAY_SECOND = 57837
const DAY_MINUTE = 57838
const DAY_HOUR = 57839
const YEAR_MONTH = 57840
const SQL_TSI_HOUR = 57841
const SQL_TSI_DAY = 57842
const SQL_TSI_WEEK = 57843
const SQL_TSI_MONTH = 57844
const SQL_TSI_QUARTER = 57845
const SQL_TSI_YEAR = 57846
const SQL_TSI_SECOND = 57847
const SQL_TSI_MINUTE = 57848
const RECURSIVE = 57849
const CONFIG = 57850
const DRAINER = 57851
const SOURCE = 57852
const STREAM = 57853
const HEADERS = 57854
const CONNECTOR = 57855
const CONNECTORS = 57856
const DAEMON = 57857
const PAUSE = 57858
const CANCEL = 57859
const TASK = 57860
const RESUME = 57861
const MATCH = 57862
const AGAINST = 57863
const BOOLEAN = 57864
const LANGUAGE = 57865
const WITH = 57866
const QUERY = 57867
const EXPANSION = 57868
const WITHOUT = 57869
const VALIDATION = 57870
const UPGRADE = 57871
const RETRY = 57872
const ADDDATE = 57873
const BIT_AND = 57874
const BIT_OR = 57875
const BIT_XOR = 57876
const CAST = 57877
const COUNT = 57878
const APPROX_COUNT = 57879
const APPROX_COUNT_DISTINCT = 57880
const SERIAL_EXTRACT = 57881
const APPROX_PERCENTILE = 57882
const CURDATE = 57883
const CURTIME = 57884
const DATE_ADD = 57885
const DATE_SUB = 57886
const EXTRACT = 57887
const GROUP_CONCAT = 57888
const MAX = 57889
const MID = 57890
const MIN = 57891
const NOW = 57892
const POSITION = 57893
const SESSION_USER = 57894
const STD = 57895
const STDDEV = 57896
const MEDIAN = 57897
const CLUSTER_CENTERS = 57898
const KMEANS = 57899
const STDDEV_POP = 57900
const STDDEV_SAMP = 57901
const SUBDATE = 57902
const SUBSTR = 57903
const SUBSTRING = 57904
const SUM = 57905
const SYSDATE = 57906
const SYSTEM_USER = 57907
const TRANSLATE = 57908
const TRIM = 57909
const VARIANCE = 57910
const VAR_POP = 57911
const VAR_SAMP = 57912
const AVG = 57913
const RANK = 57914
const ROW_NUMBER = 57915
const DENSE_RANK = 57916
const BIT_CAST = 57917
const BITMAP_BIT_POSITION = 57918
const BITMAP_BUCKET_NUMBER = 57919
const BITMAP_COUNT = 57920
const BITMAP_CONSTRUCT_AGG = 57921
const BITMAP_OR_AGG = 57922
const NEXTVAL = 57923
const SETVAL = 57924
const CURRVAL = 57925
const LASTVAL = 57926
const ARROW = 57927
const ROW = 57928
const OUTFILE = 57929
const HEADER = 57930
const MAX_FILE_SIZE = 57931
const FORCE_QUOTE = 57932
const PARALLEL = 57933
const STRICT = 57934
const UNUSED = 57935
const BINDINGS = 57936
const DO = 57937
const DECLARE = 57938
const LOOP = 57939
const WHILE = 57940
const LEAVE = 57941
const ITERATE = 57942
const UNTIL = 57943
const CALL = 57944
const PREV = 57945
const SLIDING = 57946
const FILL = 57947
const SPBEGIN = 57948
const BACKEND = 57949
const SERVERS = 57950
const HANDLER = 57951
const PERCENT = 57952
const SAMPLE = 57953
const MO_TS = 57954
const PITR = 57955
const KILL = 57956
const BACKUP = 57957
const FILESYSTEM = 57958
const PARALLELISM = 57959
const RESTORE = 57960
const QUERY_RESULT = 57961

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"CROSS_L2",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"SNAPSHOTS",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"UNIQUE_CHECK_ON_AUTOINCR",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UPGRADE",
	"RETRY",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"BITMAP_BIT_POSITION",
	"BITMAP_BUCKET_NUMBER",
	"BITMAP_COUNT",
	"BITMAP_CONSTRUCT_AGG",
	"BITMAP_OR_AGG",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"STRICT",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"MO_TS",
	"PITR",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"RESTORE",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:12274

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 127,
	11, 756,
	22, 756,
	-2, 749,
	-1, 148,
	239, 1160,
	241, 1059,
	-2, 1106,
	-1, 174,
	43, 578,
	241, 578,
	268, 585,
	269, 585,
	465, 578,
	-2, 615,
	-1, 215,
	640, 1918,
	-2, 489,
	-1, 517,
	640, 2038,
	-2, 375,
	-1, 575,
	640, 2097,
	-2, 373,
	-1, 576,
	640, 2098,
	-2, 374,
	-1, 577,
	640, 2099,
	-2, 376,
	-1, 710,
	320, 161,
	437, 161,
	438, 161,
	-2, 1823,
	-1, 776,
	83, 1610,
	-2, 1974,
	-1, 777,
	83, 1628,
	-2, 1945,
	-1, 781,
	83, 1629,
	-2, 1973,
	-1, 814,
	83, 1537,
	-2, 2171,
	-1, 815,
	83, 1538,
	-2, 2170,
	-1, 816,
	83, 1539,
	-2, 2160,
	-1, 817,
	83, 2132,
	-2, 2153,
	-1, 818,
	83, 2133,
	-2, 2154,
	-1, 819,
	83, 2134,
	-2, 2162,
	-1, 820,
	83, 2135,
	-2, 2142,
	-1, 821,
	83, 2136,
	-2, 2151,
	-1, 822,
	83, 2137,
	-2, 2163,
	-1, 823,
	83, 2138,
	-2, 2164,
	-1, 824,
	83, 2139,
	-2, 2169,
	-1, 825,
	83, 2140,
	-2, 2174,
	-1, 826,
	83, 2141,
	-2, 2175,
	-1, 827,
	83, 1606,
	-2, 2012,
	-1, 828,
	83, 1607,
	-2, 1807,
	-1, 829,
	83, 1608,
	-2, 2021,
	-1, 830,
	83, 1609,
	-2, 1816,
	-1, 832,
	83, 1612,
	-2, 1824,
	-1, 833,
	83, 1613,
	-2, 2045,
	-1, 835,
	83, 1616,
	-2, 1843,
	-1, 837,
	83, 1618,
	-2, 2057,
	-1, 838,
	83, 1619,
	-2, 2056,
	-1, 839,
	83, 1620,
	-2, 1887,
	-1, 840,
	83, 1621,
	-2, 1969,
	-1, 843,
	83, 1624,
	-2, 2068,
	-1, 845,
	83, 1626,
	-2, 2071,
	-1, 846,
	83, 1627,
	-2, 2073,
	-1, 847,
	83, 1630,
	-2, 2081,
	-1, 848,
	83, 1631,
	-2, 1954,
	-1, 849,
	83, 1632,
	-2, 1999,
	-1, 850,
	83, 1633,
	-2, 1964,
	-1, 851,
	83, 1634,
	-2, 1989,
	-1, 862,
	83, 1515,
	-2, 2165,
	-1, 863,
	83, 1516,
	-2, 2166,
	-1, 864,
	83, 1517,
	-2, 2167,
	-1, 957,
	460, 615,
	461, 615,
	-2, 579,
	-1, 1005,
	125, 1807,
	136, 1807,
	156, 1807,
	-2, 1781,
	-1, 1122,
	22, 783,
	-2, 732,
	-1, 1228,
	11, 756,
	22, 756,
	-2, 1395,
	-1, 1310,
	22, 783,
	-2, 732,
	-1, 1646,
	83, 1681,
	-2, 1971,
	-1, 1647,
	83, 1682,
	-2, 1972,
	-1, 1808,
	84, 935,
	-2, 941,
	-1, 2248,
	108, 1098,
	152, 1098,
	191, 1098,
	194, 1098,
	281, 1098,
	-2, 1091,
	-1, 2401,
	11, 756,
	22, 756,
	-2, 877,
	-1, 2433,
	84, 1767,
	157, 1767,
	-2, 1956,
	-1, 2434,
	84, 1767,
	157, 1767,
	-2, 1955,
	-1, 2435,
	84, 1743,
	157, 1743,
	-2, 1942,
	-1, 2436,
	84, 1744,
	157, 1744,
	-2, 1947,
	-1, 2437,
	84, 1745,
	157, 1745,
	-2, 1875,
	-1, 2438,
	84, 1746,
	157, 1746,
	-2, 1869,
	-1, 2439,
	84, 1747,
	157, 1747,
	-2, 1797,
	-1, 2440,
	84, 1748,
	157, 1748,
	-2, 1944,
	-1, 2441,
	84, 1749,
	157, 1749,
	-2, 1873,
	-1, 2442,
	84, 1750,
	157, 1750,
	-2, 1868,
	-1, 2443,
	84, 1751,
	157, 1751,
	-2, 1857,
	-1, 2444,
	84, 1767,
	157, 1767,
	-2, 1858,
	-1, 2445,
	84, 1767,
	157, 1767,
	-2, 1859,
	-1, 2447,
	84, 1756,
	157, 1756,
	-2, 1989,
	-1, 2448,
	84, 1734,
	157, 1734,
	-2, 1974,
	-1, 2449,
	84, 1765,
	157, 1765,
	-2, 1945,
	-1, 2450,
	84, 1765,
	157, 1765,
	-2, 1973,
	-1, 2451,
	84, 1765,
	157, 1765,
	-2, 1825,
	-1, 2452,
	84, 1763,
	157, 1763,
	-2, 1964,
	-1, 2453,
	84, 1760,
	157, 1760,
	-2, 1848,
	-1, 2454,
	83, 1715,
	84, 1715,
	157, 1715,
	395, 1715,
	396, 1715,
	397, 1715,
	-2, 1796,
	-1, 2455,
	83, 1716,
	84, 1716,
	157, 1716,
	395, 1716,
	396, 1716,
	397, 1716,
	-2, 1798,
	-1, 2456,
	83, 1717,
	84, 1717,
	157, 1717,
	395, 1717,
	396, 1717,
	397, 1717,
	-2, 2017,
	-1, 2457,
	83, 1719,
	84, 1719,
	157, 1719,
	395, 1719,
	396, 1719,
	397, 1719,
	-2, 1946,
	-1, 2458,
	83, 1721,
	84, 1721,
	157, 1721,
	395, 1721,
	396, 1721,
	397, 1721,
	-2, 1927,
	-1, 2459,
	83, 1723,
	84, 1723,
	157, 1723,
	395, 1723,
	396, 1723,
	397, 1723,
	-2, 1874,
	-1, 2460,
	83, 1725,
	84, 1725,
	157, 1725,
	395, 1725,
	396, 1725,
	397, 1725,
	-2, 1853,
	-1, 2461,
	83, 1726,
	84, 1726,
	157, 1726,
	395, 1726,
	396, 1726,
	397, 1726,
	-2, 1854,
	-1, 2462,
	83, 1728,
	84, 1728,
	157, 1728,
	395, 1728,
	396, 1728,
	397, 1728,
	-2, 1795,
	-1, 2463,
	84, 1770,
	157, 1770,
	395, 1770,
	396, 1770,
	397, 1770,
	-2, 1830,
	-1, 2464,
	84, 1770,
	157, 1770,
	395, 1770,
	396, 1770,
	397, 1770,
	-2, 1844,
	-1, 2465,
	84, 1773,
	157, 1773,
	395, 1773,
	396, 1773,
	397, 1773,
	-2, 1826,
	-1, 2466,
	84, 1773,
	157, 1773,
	395, 1773,
	396, 1773,
	397, 1773,
	-2, 1890,
	-1, 2467,
	84, 1770,
	157, 1770,
	395, 1770,
	396, 1770,
	397, 1770,
	-2, 1911,
	-1, 2677,
	108, 1098,
	152, 1098,
	191, 1098,
	194, 1098,
	281, 1098,
	-2, 1092,
	-1, 2695,
	81, 676,
	157, 676,
	-2, 1275,
	-1, 3107,
	194, 1098,
	305, 1363,
	-2, 1335,
	-1, 3280,
	108, 1098,
	152, 1098,
	191, 1098,
	194, 1098,
	-2, 1216,
	-1, 3282,
	108, 1098,
	152, 1098,
	191, 1098,
	194, 1098,
	-2, 1216,
	-1, 3294,
	81, 676,
	157, 676,
	-2, 1275,
	-1, 3316,
	194, 1098,
	305, 1363,
	-2, 1336,
	-1, 3461,
	108, 1098,
	152, 1098,
	191, 1098,
	194, 1098,
	-2, 1217,
	-1, 3488,
	84, 1178,
	157, 1178,
	-2, 1098,
	-1, 3623,
	84, 1178,
	157, 1178,
	-2, 1098,
	-1, 3777,
	84, 1182,
	157, 1182,
	-2, 1098,
	-1, 3825,
	84, 1183,
	157, 1183,
	-2, 1098,
}

const yyPrivate = 57344

const yyLast = 49384

var yyAct = [...]int{
	743, 720, 3871, 745, 3845, 2725, 204, 3864, 1893, 3301,
	3781, 3787, 3395, 1626, 3681, 3780, 3788, 3126, 3623, 3093,
	3707, 729, 3663, 3738, 3516, 3197, 3601, 3330, 1622, 2719,
	3657, 722, 3198, 1263, 3622, 2522, 3685, 3448, 3449, 1462,
	3446, 3544, 773, 611, 1123, 2636, 2722, 1004, 1540, 3592,
	3664, 1399, 3399, 37, 3666, 3390, 629, 1841, 635, 635,
	718, 3267, 1405, 3102, 635, 652, 661, 1673, 3317, 661,
	2698, 2296, 3468, 1117, 3458, 3024, 1629, 3063, 3463, 2431,
	3283, 3430, 3195, 2835, 2834, 3255, 1982, 3052, 2833, 2749,
	2815, 3122, 3285, 3111, 3153, 3237, 3104, 2395, 2557, 2897,
	2098, 1950, 3183, 1985, 2429, 2299, 2857, 3163, 1687, 2830,
	1853, 2666, 3031, 2000, 669, 3035, 3029, 2259, 658, 3110,
	61, 1455, 673, 3027, 712, 2056, 3072, 1113, 1552, 2278,
	189, 3026, 2226, 2678, 3025, 2378, 126, 2207, 2944, 3022,
	2081, 3001, 2501, 36, 2728, 717, 2094, 2870, 2206, 2064,
	2065, 931, 1536, 2029, 1779, 2880, 2057, 1541, 1978, 2483,
	2396, 1544, 1953, 1369, 1951, 2654, 2649, 2751, 1872, 2730,
	2383, 998, 1883, 2297, 2690, 200, 8, 6, 611, 199,
	7, 2093, 2258, 2248, 1817, 2427, 1375, 1062, 1620, 2095,
	1625, 1503, 628, 721, 1471, 2238, 1573, 2292, 1441, 2590,
	711, 1408, 1660, 2105, 204, 1611, 204, 2128, 1053, 1054,
	1852, 2063, 15, 1555, 610, 635, 1680, 1136, 730, 27,
	2060, 2045, 966, 1510, 2019, 666, 1619, 997, 1440, 16,
	2403, 1813, 14, 644, 1409, 866, 1388, 1384, 33, 1438,
	647, 1816, 930, 1494, 1688, 1551, 1529, 676, 719, 190,
	675, 103, 1400, 713, 23, 24, 17, 10, 1502, 660,
	907, 928, 1264, 952, 672, 913, 1308, 2102, 180, 936,
	1196, 1197, 1198, 1195, 3586, 186, 2625, 656, 1565, 1196,
	1197, 1198, 1195, 868, 657, 1196, 1197, 1198, 1195, 1050,
	869, 3476, 2625, 2914, 653, 2625, 2405, 655, 3297, 1564,
	3079, 2913, 1013, 654, 2112, 1371, 3270, 3190, 1118, 2279,
	2545, 1032, 2489, 1337, 2487, 1119, 2589, 921, 1010, 922,
	2484, 1792, 2486, 1517, 1513, 1012, 1045, 1046, 664, 188,
	640, 630, 2205, 631, 1049, 2994, 1051, 1327, 3010, 933,
	934, 1046, 1046, 2213, 1330, 2996, 713, 2991, 2993, 986,
	976, 3856, 1422, 1786, 1323, 1515, 902, 3388, 2893, 2617,
	2615, 2891, 2034, 3652, 8, 3551, 1044, 3545, 7, 1118,
	916, 3391, 912, 1196, 1197, 1198, 1195, 3196, 2078, 1196,
	1197, 1198, 1195, 1033, 3668, 1258, 2059, 867, 2971, 2051,
	187, 2337, 636, 3608, 878, 1158, 3435, 2531, 1332, 3431,
	2539, 2619, 3762, 3284, 2250, 1550, 187, 3574, 2099, 3718,
	187, 57, 176, 149, 1481, 187, 57, 176, 149, 187,
	57, 176, 149, 1480, 1479, 1016, 1014, 187, 893, 1015,
	187, 2249, 2969, 978, 1361, 187, 977, 3609, 125, 2110,
	2243, 1344, 187, 671, 2828, 2421, 1193, 2422, 1559, 2684,
	187, 2638, 1722, 1571, 1027, 1022, 1017, 1021, 1025, 1333,
	181, 2864, 2865, 857, 1008, 856, 858, 859, 2863, 860,
	861, 1009, 883, 962, 1582, 1794, 181, 1962, 1556, 1131,
	181, 937, 1030, 1568, 187, 181, 1020, 2639, 2502, 181,
	2916, 1963, 1964, 981, 979, 1594, 980, 2682, 2905, 918,
	1558, 911, 1995, 879, 975, 1570, 1799, 1800, 939, 2651,
	915, 914, 181, 187, 57, 176, 149, 2995, 1612, 2652,
	181, 1616, 1442, 1396, 1444, 3576, 1186, 896, 1867, 2992,
	2409, 903, 125, 2408, 1404, 3412, 2410, 1028, 1403, 1406,
	1407, 1406, 1407, 1173, 1031, 1615, 1174, 2685, 1628, 1191,
	1007, 910, 1418, 1006, 181, 1419, 3671, 187, 57, 176,
	149, 3759, 3743, 3671, 3751, 2194, 1018, 3670, 2650, 3669,
	920, 961, 959, 1343, 1176, 909, 3097, 1134, 3812, 908,
	3791, 3792, 987, 181, 3095, 895, 3755, 3670, 3750, 901,
	1029, 3669, 3749, 958, 3849, 3850, 3658, 3659, 3660, 3661,
	1516, 1514, 3199, 3740, 983, 932, 3740, 2620, 3655, 2898,
	3548, 899, 1139, 2114, 3199, 1632, 938, 971, 2899, 1139,
	2900, 2526, 1128, 2371, 2770, 1979, 3256, 181, 2640, 1617,
	1019, 3678, 3212, 635, 635, 1969, 2106, 148, 1603, 185,
	967, 1421, 3764, 3765, 635, 1127, 2657, 1607, 3263, 919,
	2237, 919, 3046, 1614, 1171, 3760, 3761, 3440, 2641, 174,
	3036, 2042, 3342, 661, 661, 3757, 635, 2932, 985, 1188,
	2934, 2329, 2536, 3411, 2335, 900, 968, 972, 1523, 1522,
	1161, 3413, 3578, 3579, 173, 3044, 1189, 1190, 3389, 1056,
	2892, 2820, 2242, 2111, 2374, 2375, 955, 3040, 953, 957,
	975, 2373, 658, 658, 954, 951, 950, 1026, 956, 941,
	942, 940, 943, 944, 945, 946, 3583, 973, 1172, 974,
	2618, 1394, 3437, 1432, 2634, 2691, 1345, 3357, 3752, 1236,
	969, 970, 1631, 1630, 3125, 3790, 3569, 3241, 1184, 1185,
	1566, 3041, 3042, 1023, 2379, 984, 1024, 1326, 2089, 1183,
	1563, 1708, 917, 627, 1993, 1994, 3585, 3043, 3215, 3820,
	2635, 3061, 3320, 3073, 1120, 3354, 1973, 965, 3700, 881,
	1613, 1013, 3695, 964, 2938, 1127, 3099, 2624, 663, 2100,
	1119, 2100, 1119, 662, 2117, 2119, 2120, 1010, 960, 1126,
	1119, 906, 2100, 1153, 1012, 1175, 3123, 3124, 2915, 2826,
	3613, 3332, 3605, 2245, 1420, 882, 1267, 2912, 1141, 1140,
	3347, 3038, 3002, 2133, 3323, 1141, 1140, 3686, 3702, 3302,
	707, 2101, 1046, 709, 3708, 3318, 3094, 1046, 708, 1046,
	3340, 3341, 2724, 659, 1046, 3607, 3319, 3309, 659, 1046,
	1166, 1046, 2222, 1168, 1013, 1383, 1034, 3573, 3128, 3246,
	3763, 1119, 1230, 2113, 2670, 2673, 2674, 2675, 2671, 2672,
	1010, 656, 656, 3013, 2369, 3358, 963, 1012, 657, 657,
	3677, 1169, 935, 3324, 2485, 3507, 3882, 2347, 653, 653,
	1518, 655, 655, 1329, 982, 1331, 2346, 654, 654, 1130,
	1132, 894, 1638, 1641, 1642, 58, 1341, 629, 2720, 2721,
	58, 2724, 2799, 1639, 670, 867, 1142, 3402, 1122, 2302,
	1306, 3248, 1144, 1311, 1704, 1150, 3436, 2616, 150, 1268,
	2540, 1701, 1146, 1147, 1121, 1703, 1700, 1702, 1706, 1707,
	931, 1009, 1133, 1705, 150, 1152, 659, 3496, 150, 182,
	183, 1178, 184, 150, 1179, 1395, 884, 150, 2663, 1795,
	1237, 1162, 3577, 1406, 1407, 150, 2656, 3614, 150, 3606,
	1980, 1406, 1407, 150, 3047, 1451, 1115, 3339, 3502, 2300,
	150, 3037, 1181, 1232, 1233, 1234, 1235, 1164, 150, 3247,
	659, 2315, 635, 2935, 1450, 1434, 2424, 2295, 2318, 1167,
	1170, 611, 611, 1151, 3328, 3580, 1381, 3756, 58, 1380,
	611, 611, 3100, 1402, 1466, 1466, 2771, 635, 2772, 2773,
	3039, 1379, 150, 2660, 2661, 1163, 3325, 3329, 3327, 3326,
	3709, 3867, 2367, 2368, 3441, 2118, 1970, 3627, 2659, 661,
	1495, 629, 1464, 1464, 1398, 1397, 1506, 1506, 1608, 3127,
	3593, 150, 58, 3103, 1468, 2317, 2301, 204, 1279, 1280,
	3286, 2303, 1177, 1473, 3334, 3335, 611, 3123, 3124, 1114,
	976, 3563, 921, 3564, 922, 2990, 1689, 1690, 1691, 1692,
	1693, 1694, 1695, 1696, 1697, 1698, 1699, 1711, 1712, 1713,
	1714, 1715, 1716, 1709, 1710, 150, 2338, 1227, 2316, 1342,
	3779, 1182, 1165, 2295, 3386, 1433, 2312, 1338, 3202, 671,
	714, 3737, 3342, 1439, 3059, 2304, 3673, 1548, 1158, 3563,
	1524, 3564, 1553, 3421, 3321, 3119, 1180, 3566, 3006, 1562,
	3333, 2532, 1377, 1460, 1461, 2221, 2413, 3558, 2333, 2875,
	2876, 2859, 2861, 1640, 2103, 1310, 3517, 3518, 3519, 3523,
	3521, 3522, 3520, 978, 1592, 1312, 977, 1353, 3565, 2937,
	1359, 2800, 2802, 2803, 2804, 2801, 3626, 1972, 1466, 3868,
	1466, 1127, 1446, 1448, 1347, 3566, 1572, 1557, 1358, 2305,
	2628, 1458, 1459, 1357, 1569, 1356, 665, 1797, 1385, 1389,
	1389, 1389, 1390, 1391, 3249, 3120, 3498, 658, 2115, 2116,
	3497, 1368, 2129, 3509, 1157, 2768, 3565, 1587, 1588, 1602,
	3238, 3503, 3504, 1385, 1385, 1366, 1423, 1424, 1339, 925,
	926, 927, 2632, 1348, 1349, 1350, 1351, 1352, 1410, 1354,
	2216, 1413, 1802, 1496, 1336, 1360, 1803, 1519, 1466, 2946,
	2945, 923, 3422, 3060, 1013, 3007, 1538, 1539, 2710, 1374,
	1449, 1013, 2215, 1561, 2210, 1686, 1382, 976, 1346, 976,
	3338, 2218, 2217, 1392, 1334, 1335, 1674, 2790, 2791, 1735,
	1543, 1411, 1412, 1547, 1414, 1415, 1546, 1416, 3778, 1793,
	1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657,
	1658, 1659, 640, 1487, 1801, 1474, 1671, 1672, 1493, 1591,
	3865, 3866, 885, 2332, 2359, 1507, 1508, 1590, 886, 2860,
	2306, 3469, 1047, 1048, 2311, 1627, 1624, 1052, 2309, 2696,
	1527, 2240, 1530, 1531, 2022, 920, 1037, 1042, 1043, 2302,
	2305, 3883, 3747, 1532, 1533, 1127, 3337, 3203, 1376, 1194,
	978, 1796, 978, 977, 1744, 977, 2163, 2393, 1804, 2162,
	1806, 3878, 1605, 3160, 1495, 3873, 656, 1643, 1621, 1814,
	1466, 1819, 1820, 657, 1822, 1434, 635, 3862, 1777, 1720,
	1158, 635, 3827, 653, 1466, 1600, 655, 3078, 931, 3559,
	2229, 1842, 654, 3665, 1581, 1597, 1575, 3799, 1596, 1466,
	2504, 2789, 1725, 1726, 1727, 1434, 1580, 3121, 1124, 1583,
	652, 889, 2629, 2230, 2231, 1741, 1124, 1601, 1742, 1798,
	3156, 1599, 1598, 1595, 3793, 3775, 1623, 1618, 988, 1734,
	1866, 1609, 1194, 1780, 2108, 1755, 1756, 3559, 3874, 1873,
	1873, 3560, 1434, 3728, 1434, 1434, 1376, 2239, 635, 635,
	3828, 1940, 1814, 1944, 1776, 3828, 1466, 1947, 1948, 1960,
	1662, 3703, 888, 2697, 3252, 3214, 891, 890, 2274, 2697,
	3800, 2306, 2199, 611, 2020, 1466, 2301, 2295, 2300, 2531,
	2298, 2303, 3691, 2394, 3132, 1823, 3130, 2394, 3646, 1788,
	3000, 3645, 1669, 1670, 2998, 1821, 1870, 3589, 3776, 1155,
	2394, 2878, 3640, 635, 1814, 1466, 2643, 2005, 1156, 635,
	635, 635, 669, 669, 1717, 1718, 3589, 1721, 2621, 2015,
	2016, 2017, 2018, 3639, 3638, 1736, 2024, 1783, 1895, 1039,
	1040, 1041, 2521, 204, 2108, 2304, 204, 204, 1743, 204,
	1745, 1942, 1746, 1747, 1748, 1996, 1749, 1196, 1197, 1198,
	1195, 2509, 1876, 2424, 1194, 3692, 1196, 1197, 1198, 1195,
	1818, 3647, 1307, 1778, 2263, 3637, 3617, 1988, 1989, 871,
	872, 873, 874, 2142, 1834, 3589, 1156, 2099, 1843, 1735,
	1735, 2067, 1961, 2288, 1784, 3160, 3616, 2204, 1966, 1847,
	1968, 1735, 1735, 2967, 1974, 3588, 3589, 3589, 2083, 1858,
	1986, 1987, 2273, 1196, 1197, 1198, 1195, 1809, 1874, 3363,
	1854, 1610, 1856, 1857, 3311, 1865, 2198, 2197, 1868, 1869,
	2170, 1981, 2007, 2008, 2009, 1838, 1863, 1842, 2004, 2090,
	1839, 1466, 2097, 1991, 1385, 1557, 3276, 1849, 3589, 2108,
	3230, 1844, 1845, 1855, 2077, 1367, 1818, 1477, 1389, 2141,
	1859, 1677, 3226, 3140, 1877, 1878, 2069, 2854, 658, 2108,
	1389, 1452, 1864, 2033, 3890, 3875, 2036, 2037, 3589, 2039,
	1196, 1197, 1198, 1195, 3297, 2882, 2699, 2596, 1810, 1811,
	1812, 3262, 2424, 1941, 2091, 2534, 2588, 3312, 2533, 1949,
	1825, 1826, 1827, 1828, 1965, 1621, 1967, 1946, 2525, 1013,
	1975, 2282, 1013, 2547, 2158, 2143, 1850, 1851, 3083, 3277,
	2088, 1013, 3533, 3231, 2073, 1010, 2139, 2529, 876, 3361,
	2517, 2511, 1012, 1860, 1861, 3227, 3141, 1010, 2506, 2062,
	2394, 2003, 2498, 2496, 1012, 2002, 2494, 2010, 2011, 2027,
	2492, 2062, 2262, 1871, 871, 872, 873, 874, 2126, 2127,
	1194, 1158, 2028, 2030, 1875, 1750, 1751, 1752, 1753, 1194,
	2013, 1757, 1758, 1759, 1760, 1762, 1763, 1764, 1765, 1766,
	1767, 1768, 1769, 1770, 1771, 1227, 1194, 2047, 1210, 1209,
	1219, 1220, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1211,
	2263, 1577, 2079, 2507, 2512, 2068, 1211, 2165, 2200, 2177,
	2176, 2507, 2161, 2076, 1013, 2499, 2497, 2152, 2151, 2493,
	1244, 2074, 2122, 2493, 2209, 2263, 2211, 656, 2150, 2214,
	1010, 2107, 1143, 2087, 657, 1111, 1106, 1012, 712, 2302,
	2305, 635, 635, 635, 653, 2092, 1199, 655, 1990, 2929,
	3074, 1584, 3696, 654, 1229, 2086, 635, 635, 635, 635,
	746, 756, 1372, 1239, 1386, 3884, 1373, 2085, 3853, 2260,
	747, 2330, 748, 752, 755, 751, 749, 750, 887, 2266,
	1434, 2199, 1194, 1194, 3587, 1194, 3555, 3500, 1247, 1456,
	1194, 1194, 2484, 2121, 1724, 1723, 3697, 2123, 1724, 1723,
	1457, 1194, 2565, 876, 2108, 3499, 1434, 3485, 2130, 2171,
	2172, 1454, 2174, 1662, 1427, 1428, 3442, 1430, 1431, 2181,
	1435, 1436, 1437, 2324, 1585, 753, 2135, 3188, 3075, 3269,
	1105, 1101, 1102, 1103, 1104, 3470, 2570, 3161, 2569, 2568,
	2566, 3289, 3152, 3146, 2124, 2125, 1214, 1215, 1216, 1217,
	1218, 1211, 1482, 1483, 1484, 1485, 1486, 754, 1488, 1489,
	1490, 1491, 1492, 3142, 1417, 3089, 1498, 1499, 1500, 1501,
	3287, 2306, 3076, 2331, 3054, 2823, 2301, 2295, 2300, 3471,
	2298, 2303, 1387, 2822, 2668, 3290, 2398, 2398, 1960, 2398,
	2626, 2554, 2290, 1212, 1213, 1214, 1215, 1216, 1217, 1218,
	1211, 2544, 2193, 2195, 2196, 2567, 1761, 611, 611, 1668,
	1754, 2201, 1453, 892, 3288, 1127, 2284, 1196, 1197, 1198,
	1195, 1466, 635, 2510, 2415, 1665, 1667, 1664, 3191, 1666,
	2072, 2478, 2281, 2071, 2283, 2304, 2070, 635, 2223, 1363,
	2294, 1362, 1129, 1127, 2468, 629, 1267, 2031, 2293, 2419,
	1681, 1506, 2241, 1960, 1805, 1681, 2473, 2136, 2475, 1511,
	2884, 2031, 204, 1198, 1195, 1372, 3748, 2268, 2269, 1373,
	1196, 1197, 1198, 1195, 2287, 1195, 3512, 2271, 2272, 3511,
	2901, 2488, 2760, 2411, 2400, 2412, 2404, 2758, 2736, 2402,
	2267, 2270, 1196, 1197, 1198, 1195, 2276, 2734, 3881, 2277,
	3491, 3189, 2514, 2416, 2417, 3438, 2523, 2524, 1013, 3443,
	3444, 1196, 1197, 1198, 1195, 2307, 2308, 3858, 2313, 2527,
	2556, 1739, 3857, 2097, 1010, 1196, 1197, 1198, 1195, 3803,
	1466, 1012, 1466, 1511, 1466, 1389, 1740, 2280, 1246, 1127,
	1196, 1197, 1198, 1195, 2571, 2572, 2609, 2546, 2610, 2480,
	2426, 1245, 3774, 3773, 2472, 1196, 1197, 1198, 1195, 1268,
	2537, 3880, 3698, 3439, 1512, 2637, 1505, 1505, 2667, 3642,
	3630, 2154, 2376, 1466, 2574, 2948, 3260, 2811, 1446, 1448,
	1196, 1197, 1198, 1195, 3620, 2809, 3610, 2432, 3546, 2581,
	2406, 3784, 2479, 3473, 1466, 3472, 3303, 2960, 3268, 2275,
	2807, 1464, 1219, 1220, 1212, 1213, 1214, 1215, 1216, 1217,
	1218, 1211, 2573, 3291, 3259, 3045, 2420, 2796, 1196, 1197,
	1198, 1195, 1464, 2423, 1202, 1203, 1204, 1205, 1206, 1207,
	1208, 1200, 2925, 2582, 3261, 2810, 2470, 2469, 2153, 3154,
	2896, 2627, 2471, 2808, 2630, 2477, 2585, 2586, 2558, 3684,
	2558, 1196, 1197, 1198, 1195, 2895, 2583, 2959, 2806, 1127,
	2794, 2793, 2792, 1127, 3030, 1196, 1197, 1198, 1195, 2562,
	1466, 3417, 3877, 2664, 2665, 2795, 1196, 1197, 1198, 1195,
	1944, 3405, 2580, 2541, 1196, 1197, 1198, 1195, 2695, 2784,
	2778, 2777, 2543, 2776, 2701, 2775, 3715, 2622, 1196, 1197,
	1198, 1195, 2500, 2203, 2519, 2050, 2049, 2552, 1196, 1197,
	1198, 1195, 2530, 2712, 2528, 2538, 2048, 2044, 2535, 2043,
	1621, 1999, 2140, 1127, 1998, 1633, 1634, 1635, 1636, 1637,
	1997, 2733, 1578, 2613, 1325, 2683, 2146, 3876, 1127, 1127,
	1127, 1873, 3581, 3582, 1127, 3396, 2744, 2745, 2746, 2747,
	1127, 2754, 1109, 2755, 2756, 3404, 2757, 2679, 2759, 2564,
	2726, 3851, 2548, 2549, 3351, 3819, 2692, 1678, 2680, 2754,
	3818, 1682, 1683, 1684, 1685, 3815, 1196, 1197, 1198, 1195,
	1719, 2398, 1196, 1197, 1198, 1195, 3753, 3735, 1729, 3680,
	3447, 1196, 1197, 1198, 1195, 2812, 2714, 1895, 1196, 1197,
	1198, 1195, 1013, 2644, 611, 3662, 3653, 2432, 2551, 1108,
	1944, 1127, 1960, 1960, 1960, 1960, 3634, 3629, 2702, 3628,
	3584, 3572, 2006, 3218, 1127, 1960, 3571, 2646, 2398, 2648,
	1196, 1197, 1198, 1195, 2731, 3547, 3493, 3454, 2731, 707,
	1781, 2138, 709, 3424, 1466, 2817, 2963, 708, 2645, 3423,
	1196, 1197, 1198, 1195, 2662, 635, 635, 2727, 3419, 3416,
	1818, 1196, 1197, 1198, 1195, 2686, 3415, 8, 3394, 2700,
	2694, 7, 2738, 1196, 1197, 1198, 1195, 3392, 3371, 3370,
	3367, 3365, 2816, 2739, 2740, 3298, 3258, 2704, 2743, 3257,
	2713, 2716, 2707, 3254, 2750, 3711, 3239, 3223, 758, 127,
	2729, 3221, 2735, 3149, 127, 3148, 3143, 1846, 2850, 2742,
	3138, 204, 2711, 3137, 3055, 3017, 204, 1196, 1197, 1198,
	1195, 3016, 3012, 2591, 2592, 3009, 3005, 2208, 2939, 2597,
	2936, 2894, 1862, 2868, 2805, 2797, 2774, 2787, 1735, 2785,
	1735, 2786, 2879, 2911, 1209, 1219, 1220, 1212, 1213, 1214,
	1215, 1216, 1217, 1218, 1211, 2836, 2924, 2781, 2780, 2779,
	641, 2623, 1466, 127, 2520, 2931, 2212, 2818, 2836, 2962,
	813, 812, 2824, 2053, 3568, 2821, 2837, 2838, 2839, 2840,
	2046, 1791, 1790, 1579, 1275, 1271, 1781, 2851, 2853, 2852,
	2906, 1781, 1781, 2849, 1270, 1112, 1196, 1197, 1198, 1195,
	880, 2917, 2336, 2703, 2869, 2339, 2340, 2341, 2342, 2343,
	2344, 2345, 2708, 2709, 2348, 2349, 2350, 2351, 2352, 2353,
	2354, 2355, 2356, 2357, 2358, 2866, 2360, 2361, 2362, 2363,
	2364, 3567, 2365, 1538, 1539, 3556, 3418, 3403, 3282, 1780,
	3281, 2885, 2032, 2732, 2910, 2035, 2889, 2953, 2038, 2955,
	3280, 2040, 1543, 3251, 3235, 1547, 3233, 1013, 1546, 3232,
	3008, 3229, 3228, 2883, 2908, 2886, 3011, 3222, 1013, 2933,
	3014, 3015, 2887, 3220, 2918, 3204, 3194, 3193, 1127, 3179,
	1011, 2862, 3178, 3084, 3033, 2928, 3020, 127, 2907, 2909,
	2904, 2902, 2921, 2920, 3049, 2997, 2965, 2919, 2958, 2950,
	635, 2949, 127, 2943, 127, 2961, 2877, 2082, 2927, 2607,
	2642, 1531, 3064, 1127, 2495, 2606, 635, 2491, 1127, 1127,
	2490, 1532, 1533, 1958, 2940, 2182, 2941, 1960, 2260, 2947,
	3082, 2175, 1196, 1197, 1198, 1195, 1196, 1197, 1198, 1195,
	2956, 2957, 1196, 1197, 1198, 1195, 2169, 2605, 2168, 2324,
	2167, 2166, 2954, 2164, 3019, 2160, 2159, 3058, 2157, 2148,
	2999, 3109, 2145, 3112, 2144, 3112, 3112, 2052, 3067, 187,
	1127, 176, 149, 3071, 1196, 1197, 1198, 1195, 1774, 1773,
	1772, 634, 634, 1738, 1737, 1728, 2679, 642, 1478, 3133,
	2604, 1476, 3802, 3004, 2603, 3129, 3003, 1466, 1466, 3092,
	1265, 3710, 187, 3648, 3636, 3631, 3018, 1526, 2132, 3527,
	3510, 3506, 2137, 3096, 3098, 3484, 3131, 1196, 1197, 1198,
	1195, 1196, 1197, 1198, 1195, 1464, 1464, 3467, 3080, 3379,
	3050, 3051, 3377, 1013, 3349, 1013, 3134, 3135, 3107, 181,
	1013, 3057, 2951, 2952, 635, 3081, 2602, 3348, 3345, 1010,
	3033, 3077, 3066, 2149, 3108, 3344, 1012, 3069, 3070, 1434,
	3310, 2156, 1944, 1944, 3307, 3117, 1013, 3086, 3305, 3271,
	3091, 2294, 181, 1196, 1197, 1198, 1195, 3727, 2601, 2293,
	1537, 1528, 1542, 2173, 3113, 3114, 3725, 2600, 2178, 2179,
	2180, 1545, 1534, 2183, 2184, 2185, 2186, 2187, 2188, 2189,
	2190, 2191, 2192, 2599, 3118, 1196, 1197, 1198, 1195, 1127,
	1370, 2813, 2737, 2574, 1196, 1197, 1198, 1195, 2688, 2687,
	3085, 2681, 3192, 2647, 3723, 3087, 3088, 2608, 2505, 2414,
	1196, 1197, 1198, 1195, 2972, 2973, 2366, 2261, 642, 2653,
	2974, 2975, 2976, 2977, 3621, 2978, 2979, 2980, 2981, 2982,
	2983, 2984, 2985, 2986, 2987, 2232, 1222, 3139, 1226, 2202,
	1663, 181, 3145, 2012, 1808, 3144, 1787, 3151, 635, 3155,
	3150, 3157, 3158, 3147, 1223, 1225, 1221, 3168, 1224, 1210,
	1209, 1219, 1220, 1212, 1213, 1214, 1215, 1216, 1217, 1218,
	1211, 2598, 1606, 3172, 1560, 3175, 3176, 3177, 1210, 1209,
	1219, 1220, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1211,
	1535, 1324, 1309, 3181, 3721, 2595, 3187, 1305, 1196, 1197,
	1198, 1195, 1304, 1303, 1431, 1302, 3170, 2594, 1301, 1300,
	1299, 1298, 1297, 2766, 2767, 1296, 1295, 1294, 3242, 1293,
	1292, 3244, 1196, 1197, 1198, 1195, 1291, 3090, 2782, 2783,
	3207, 3159, 1290, 2432, 1196, 1197, 1198, 1195, 2558, 3211,
	1289, 3205, 1288, 3224, 1287, 3346, 2593, 3171, 1286, 1285,
	1284, 1283, 3206, 2819, 2587, 1282, 1281, 3216, 1278, 3210,
	3115, 2385, 2389, 2390, 2391, 2386, 2577, 2387, 2392, 3245,
	1277, 2388, 3275, 1196, 1197, 1198, 1195, 1781, 2553, 1781,
	1276, 1196, 1197, 1198, 1195, 3250, 1274, 1273, 2398, 1960,
	3294, 1272, 3253, 1196, 1197, 1198, 1195, 1781, 1781, 1269,
	1262, 1261, 1259, 1258, 1257, 1196, 1197, 1198, 1195, 3240,
	1676, 1256, 1255, 1254, 3313, 1253, 1252, 1127, 1251, 3236,
	1250, 1249, 1248, 1243, 1242, 1241, 3109, 127, 127, 1011,
	1127, 1505, 1240, 1160, 1110, 3164, 3165, 1196, 1197, 1198,
	1195, 1127, 2265, 3360, 2247, 1148, 3833, 1466, 3831, 3789,
	3167, 2669, 1013, 2425, 2055, 3265, 3266, 1159, 3169, 1013,
	2846, 2843, 2842, 3296, 2844, 2847, 3304, 1944, 3306, 2845,
	2848, 1127, 2390, 2391, 3381, 1464, 2841, 112, 60, 3489,
	2518, 2513, 3382, 2516, 59, 3292, 3362, 2508, 1364, 3343,
	3293, 1836, 1837, 3053, 3300, 2923, 3336, 1831, 1832, 1833,
	204, 2762, 1228, 3105, 2503, 3106, 3208, 3209, 2763, 2764,
	2765, 2334, 3356, 1127, 3373, 3182, 1932, 1520, 2542, 3350,
	2523, 2524, 3355, 1574, 3383, 3352, 1554, 2220, 2014, 1154,
	3359, 3380, 3028, 3021, 2715, 2689, 2286, 2256, 1840, 637,
	638, 3366, 3364, 1807, 3368, 3842, 639, 2555, 3633, 3369,
	2561, 3136, 3420, 2377, 3374, 3372, 2372, 2575, 2576, 3427,
	1945, 3314, 1426, 1127, 1425, 2578, 2579, 1724, 1723, 1320,
	1321, 3401, 1318, 1319, 3353, 3375, 1187, 3295, 1316, 1317,
	3174, 2584, 1127, 1466, 1466, 2750, 2871, 3299, 3064, 1314,
	1315, 2219, 2084, 1378, 1355, 1401, 3184, 3397, 3809, 3462,
	3398, 3462, 3425, 3426, 3807, 3767, 3745, 3744, 3742, 1633,
	1781, 1464, 1674, 3687, 3649, 2836, 1127, 3478, 1127, 3541,
	3456, 3457, 3452, 3835, 3385, 3540, 3479, 3393, 3225, 3481,
	3387, 3483, 3201, 2380, 3200, 1466, 634, 1116, 3433, 3429,
	3185, 2319, 3432, 2289, 3459, 3434, 1576, 1125, 1313, 2881,
	1376, 3453, 3243, 635, 2926, 1127, 1127, 2836, 2631, 1127,
	1127, 3835, 3834, 1674, 3414, 3455, 2249, 3466, 3465, 1149,
	2385, 2389, 2390, 2391, 2386, 3296, 2387, 2392, 2069, 3529,
	2388, 3486, 3524, 3477, 2705, 2706, 3487, 2147, 1842, 2550,
	3538, 3492, 3514, 3515, 1328, 3490, 3525, 3526, 3343, 3542,
	3543, 1145, 3494, 3834, 3508, 3336, 3180, 1124, 191, 3,
	1393, 1013, 1466, 1210, 1209, 1219, 1220, 1212, 1213, 1214,
	1215, 1216, 1217, 1218, 1211, 3530, 3450, 871, 872, 873,
	874, 68, 1124, 3570, 2, 3535, 3854, 3855, 1, 2614,
	1464, 3534, 3562, 1785, 1322, 3536, 875, 870, 1443, 2407,
	1992, 3554, 1470, 1789, 877, 2855, 2856, 3173, 2858, 2633,
	1627, 2104, 1627, 2825, 3549, 2370, 2236, 3048, 1365, 924,
	1730, 3557, 1589, 3553, 1036, 3561, 1138, 1586, 3602, 1137,
	3596, 1135, 1679, 760, 2058, 2814, 2788, 3537, 1475, 3474,
	3475, 3841, 641, 3870, 3801, 1127, 3844, 1604, 744, 3450,
	3450, 3736, 3654, 3450, 3450, 3805, 3656, 3625, 3619, 3590,
	3552, 2109, 1192, 2903, 948, 801, 771, 1260, 1567, 2970,
	2968, 3597, 1038, 3401, 3594, 127, 3599, 770, 3598, 3611,
	3264, 2658, 2874, 3604, 1035, 949, 3615, 2041, 1127, 3651,
	3550, 1521, 1525, 1466, 2285, 3612, 3706, 3406, 3488, 3407,
	3101, 2723, 1549, 3701, 3308, 3410, 3408, 3409, 677, 1971,
	609, 3632, 995, 3528, 2054, 678, 2264, 3758, 3635, 904,
	2246, 1464, 905, 897, 2677, 3641, 2676, 1644, 1201, 1661,
	3672, 2988, 3643, 2989, 1238, 3676, 716, 2134, 2655, 3331,
	3667, 1013, 127, 2867, 67, 2888, 66, 2890, 65, 127,
	1127, 3650, 64, 2023, 212, 762, 211, 3445, 3732, 3846,
	742, 741, 127, 740, 3688, 739, 1781, 738, 737, 2384,
	2382, 1781, 2381, 1955, 127, 1954, 2021, 3062, 2753, 3674,
	2748, 1884, 2082, 1882, 2741, 2314, 3683, 3679, 3682, 1627,
	2321, 1881, 3705, 3786, 3716, 3717, 3690, 1127, 3505, 2798,
	3400, 1830, 2310, 1901, 2769, 1466, 1898, 1897, 3730, 3733,
	2761, 3501, 3720, 3722, 3724, 3726, 3495, 2942, 3704, 1929,
	3600, 3461, 3734, 3699, 3315, 3316, 3713, 3322, 2255, 1061,
	1057, 1059, 3450, 1464, 3719, 1429, 1060, 1058, 2563, 2291,
	3023, 2964, 2228, 2227, 3729, 2225, 2224, 3741, 3739, 1340,
	1466, 3675, 3754, 3602, 3428, 2430, 2428, 1107, 3166, 3162,
	1472, 2066, 2080, 2922, 1956, 1952, 2827, 3575, 1835, 3777,
	898, 2244, 41, 110, 101, 3785, 166, 3768, 1464, 3770,
	3766, 53, 165, 52, 108, 3771, 3772, 163, 51, 3769,
	3272, 3273, 3274, 96, 3450, 95, 3278, 3279, 107, 161,
	50, 196, 195, 198, 197, 194, 3794, 2481, 3795, 2482,
	3796, 193, 3797, 3814, 1509, 3808, 3798, 3810, 3811, 192,
	3746, 3464, 865, 3806, 3804, 40, 39, 38, 1127, 34,
	3667, 3813, 13, 12, 35, 22, 21, 1593, 20, 26,
	32, 3450, 31, 120, 1079, 119, 3625, 30, 3823, 118,
	117, 116, 115, 114, 29, 3826, 3825, 3824, 19, 45,
	3832, 3840, 3829, 3848, 3830, 44, 3847, 43, 9, 3836,
	3837, 3838, 3839, 106, 104, 28, 105, 102, 99, 97,
	79, 3859, 3852, 1127, 78, 77, 92, 91, 90, 89,
	88, 87, 85, 3861, 3705, 86, 3860, 947, 3116, 3863,
	76, 75, 74, 3869, 3872, 73, 72, 94, 100, 98,
	83, 93, 84, 82, 81, 187, 57, 176, 149, 80,
	71, 70, 69, 147, 146, 145, 144, 3879, 143, 141,
	142, 140, 139, 177, 138, 3848, 3886, 137, 3847, 3885,
	169, 136, 135, 46, 178, 3872, 3887, 47, 48, 49,
	157, 3891, 156, 158, 160, 162, 159, 164, 154, 152,
	155, 153, 151, 125, 62, 11, 1065, 1959, 109, 18,
	25, 4, 3821, 0, 0, 0, 0, 0, 113, 0,
	0, 0, 0, 0, 0, 181, 1087, 1091, 1093, 1095,
	1097, 1098, 1100, 0, 1105, 1101, 1102, 1103, 1104, 0,
	1082, 1083, 1084, 1085, 1063, 1064, 1088, 0, 1066, 0,
	1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1078,
	1080, 1076, 1077, 1086, 2131, 0, 0, 1627, 0, 0,
	0, 1090, 1092, 1094, 1096, 1099, 0, 0, 0, 0,
	0, 127, 0, 0, 127, 127, 0, 127, 1210, 1209,
	1219, 1220, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1211,
	0, 0, 131, 132, 0, 133, 134, 0, 0, 1081,
	1210, 1209, 1219, 1220, 1212, 1213, 1214, 1215, 1216, 1217,
	1218, 1211, 0, 0, 3482, 0, 0, 1011, 0, 3531,
	127, 0, 0, 3532, 1708, 0, 0, 0, 0, 1011,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1824,
	3480, 0, 0, 127, 1829, 0, 0, 0, 0, 0,
	0, 3217, 0, 0, 0, 0, 0, 0, 3219, 0,
	0, 0, 0, 148, 175, 185, 0, 111, 1210, 1209,
	1219, 1220, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1211,
	0, 0, 0, 0, 0, 174, 168, 167, 0, 3234,
	0, 0, 63, 0, 1210, 1209, 1219, 1220, 1212, 1213,
	1214, 1215, 1216, 1217, 1218, 1211, 0, 0, 0, 0,
	0, 1879, 1880, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1228, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2559, 2560,
	187, 57, 176, 149, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 170, 171, 172, 0, 0, 177, 0,
	0, 0, 0, 0, 0, 169, 2001, 0, 0, 178,
	0, 0, 2001, 2001, 2001, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 179, 0, 0, 1704, 125, 0,
	0, 0, 0, 0, 1701, 3644, 0, 0, 1703, 1700,
	1702, 1706, 1707, 113, 0, 121, 1705, 0, 0, 173,
	181, 122, 0, 0, 0, 0, 0, 0, 689, 688,
	695, 685, 0, 0, 0, 0, 0, 0, 0, 0,
	692, 693, 0, 694, 698, 0, 0, 679, 1781, 0,
	0, 0, 2966, 0, 0, 0, 0, 703, 0, 0,
	0, 0, 1781, 0, 0, 3376, 0, 0, 3378, 3689,
	0, 0, 0, 0, 3693, 3694, 0, 0, 123, 0,
	0, 0, 0, 0, 0, 3384, 0, 0, 0, 0,
	0, 56, 1089, 0, 0, 0, 0, 131, 132, 0,
	133, 134, 0, 0, 0, 3714, 1210, 1209, 1219, 1220,
	1212, 1213, 1214, 1215, 1216, 1217, 1218, 1211, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 689,
	688, 695, 685, 0, 0, 0, 0, 0, 0, 0,
	58, 692, 693, 0, 694, 698, 0, 0, 679, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 703, 0,
	1711, 1712, 1713, 1714, 1715, 1716, 1709, 1710, 148, 175,
	185, 0, 111, 0, 0, 182, 183, 0, 184, 0,
	0, 0, 0, 150, 0, 0, 0, 0, 54, 0,
	174, 168, 167, 0, 0, 0, 0, 63, 0, 0,
	0, 0, 707, 0, 0, 709, 0, 0, 0, 0,
	708, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2401, 0, 0, 0,
	0, 3816, 3817, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 680, 682, 681, 0,
	0, 0, 0, 0, 124, 42, 687, 0, 170, 171,
	172, 55, 0, 0, 0, 5, 0, 0, 691, 0,
	0, 0, 0, 128, 129, 706, 0, 130, 0, 0,
	0, 0, 684, 0, 0, 0, 0, 0, 0, 179,
	0, 1959, 0, 0, 0, 0, 0, 0, 0, 0,
	127, 0, 0, 0, 2233, 2234, 2235, 0, 0, 0,
	121, 0, 0, 0, 173, 0, 122, 0, 0, 2251,
	2252, 2253, 2254, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 680, 682, 681,
	0, 0, 3591, 1930, 0, 0, 0, 687, 1891, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 691,
	0, 0, 0, 123, 0, 0, 706, 0, 0, 0,
	0, 0, 0, 684, 0, 0, 56, 674, 1932, 1900,
	0, 0, 686, 690, 696, 0, 697, 699, 1933, 1934,
	700, 701, 702, 0, 0, 704, 705, 0, 0, 0,
	0, 0, 1196, 1197, 1198, 1195, 0, 0, 0, 0,
	0, 0, 0, 0, 1899, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 58, 0, 0, 0, 0,
	1907, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1247, 0, 0,
	182, 183, 0, 184, 0, 0, 0, 0, 150, 0,
	0, 0, 0, 54, 0, 1472, 0, 0, 0, 0,
	0, 1708, 0, 686, 690, 696, 0, 697, 699, 0,
	2001, 700, 701, 702, 0, 0, 704, 705, 1923, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	127, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	127, 0, 3712, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 124,
	42, 0, 0, 0, 0, 0, 55, 0, 0, 0,
	0, 683, 0, 0, 0, 0, 0, 0, 128, 129,
	0, 0, 130, 0, 0, 0, 0, 0, 0, 1890,
	1892, 1889, 0, 1886, 0, 0, 0, 0, 1911, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1917,
	0, 0, 0, 1930, 0, 0, 0, 1902, 1891, 1885,
	0, 3782, 0, 0, 0, 0, 0, 0, 0, 1905,
	1939, 0, 0, 1906, 1908, 1910, 0, 1912, 1913, 1914,
	1918, 1919, 1920, 1922, 1925, 1926, 1927, 0, 1932, 1900,
	0, 0, 0, 0, 1915, 1924, 1916, 0, 1933, 1934,
	1959, 1959, 1959, 1959, 1704, 0, 1894, 0, 0, 0,
	0, 1701, 683, 1959, 0, 1703, 1700, 1702, 1706, 1707,
	0, 0, 0, 1705, 1899, 0, 0, 0, 1931, 0,
	3782, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1907, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1887, 1888, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1928, 0, 0, 0, 0, 0, 3782,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1904, 0, 0, 0, 0, 0, 0, 1903, 0, 127,
	0, 2693, 0, 0, 127, 0, 0, 0, 1923, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1921, 0, 0, 0, 127, 0, 0, 0, 0,
	1909, 0, 0, 0, 0, 3889, 127, 0, 0, 0,
	0, 0, 0, 1936, 1935, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1689, 1690, 1691, 1692,
	1693, 1694, 1695, 1696, 1697, 1698, 1699, 1711, 1712, 1713,
	1714, 1715, 1716, 1709, 1710, 0, 0, 0, 0, 1890,
	2718, 1889, 0, 2717, 0, 0, 0, 0, 1911, 0,
	0, 0, 0, 0, 0, 0, 1896, 0, 0, 1917,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1905,
	1939, 0, 0, 1906, 1908, 1910, 0, 1912, 1913, 1914,
	1918, 1919, 1920, 1922, 1925, 1926, 1927, 0, 1938, 0,
	0, 1937, 0, 0, 1915, 1924, 1916, 0, 0, 0,
	0, 0, 0, 1079, 0, 0, 1894, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2872, 2873,
	0, 0, 0, 0, 0, 0, 0, 0, 1931, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1011, 0, 127, 0, 1887, 1888, 0, 127, 0,
	0, 0, 0, 0, 0, 1959, 0, 0, 0, 0,
	0, 0, 0, 1928, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 127, 0, 0, 0, 0, 0,
	1904, 0, 0, 0, 0, 0, 0, 1903, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1079, 0, 0, 0, 0, 0,
	0, 1921, 0, 0, 0, 1065, 0, 0, 0, 1055,
	1909, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1936, 1935, 1087, 1091, 1093, 1095, 1097,
	1098, 1100, 0, 1105, 1101, 1102, 1103, 1104, 0, 1082,
	1083, 1084, 1085, 1063, 1064, 1088, 0, 1066, 0, 1067,
	1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1078, 1080,
	1076, 1077, 1086, 0, 0, 0, 0, 0, 0, 0,
	1090, 1092, 1094, 1096, 1099, 0, 1896, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1930, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1081, 0,
	0, 0, 0, 0, 0, 0, 1065, 0, 1938, 0,
	0, 1937, 0, 0, 0, 0, 1932, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1087, 1091, 1093, 1095,
	1097, 1098, 1100, 3056, 1105, 1101, 1102, 1103, 1104, 0,
	1082, 1083, 1084, 1085, 1063, 1064, 1088, 0, 1066, 3068,
	1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1078,
	1080, 1076, 1077, 1086, 689, 688, 695, 685, 1907, 0,
	0, 1090, 1092, 1094, 1096, 1099, 692, 693, 0, 694,
	698, 0, 0, 679, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 703, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1081,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3595, 0, 0, 0, 1923, 707, 0, 0,
	709, 0, 0, 0, 0, 708, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	127, 0, 0, 0, 0, 0, 0, 127, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2001, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1911, 1959, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1917, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1905, 1939, 0,
	0, 1906, 1908, 1910, 0, 1912, 1913, 1914, 1918, 1919,
	1920, 1922, 1925, 1926, 1927, 0, 0, 0, 0, 0,
	0, 0, 1915, 1924, 1916, 0, 0, 0, 0, 0,
	0, 1089, 680, 682, 681, 0, 0, 0, 0, 0,
	0, 0, 687, 0, 0, 0, 0, 0, 0, 0,
	0, 3213, 0, 0, 691, 0, 1931, 0, 0, 0,
	0, 706, 0, 0, 0, 0, 0, 0, 684, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1928, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1904, 0,
	0, 0, 0, 0, 0, 1903, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1089, 0, 0, 0, 0, 0, 0, 1921,
	0, 0, 0, 0, 0, 0, 0, 0, 1909, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	0, 0, 0, 0, 0, 0, 0, 0, 686, 690,
	696, 0, 697, 699, 0, 0, 700, 701, 702, 0,
	0, 704, 705, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 778, 0, 0, 0,
	0, 0, 0, 0, 0, 375, 0, 501, 534, 523,
	607, 489, 0, 0, 0, 0, 0, 0, 731, 0,
	0, 0, 315, 0, 0, 345, 538, 520, 530, 521,
	506, 507, 508, 515, 325, 509, 510, 511, 481, 512,
	482, 513, 514, 769, 537, 488, 406, 359, 555, 554,
	0, 0, 836, 844, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 723, 0, 0, 759, 813,
	812, 746, 756, 0, 0, 288, 210, 483, 603, 485,
	484, 747, 0, 748, 752, 755, 751, 749, 750, 0,
	828, 0, 0, 0, 0, 0, 0, 715, 727, 0,
	732, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 724, 725, 0, 683, 0, 127,
	779, 0, 726, 0, 0, 774, 753, 757, 0, 0,
	0, 0, 278, 412, 429, 289, 402, 442, 294, 409,
	284, 374, 398, 0, 0, 280, 427, 408, 356, 335,
	336, 279, 0, 393, 313, 327, 310, 372, 754, 777,
	781, 309, 850, 775, 437, 282, 0, 436, 371, 423,
	428, 357, 351, 281, 425, 355, 350, 339, 317, 851,
	340, 341, 331, 383, 349, 384, 332, 361, 360, 362,
	0, 0, 0, 0, 0, 465, 466, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 596,
	772, 0, 600, 0, 439, 0, 0, 834, 0, 0,
	0, 411, 0, 0, 342, 0, 3513, 0, 776, 0,
	396, 377, 847, 0, 0, 394, 347, 424, 385, 430,
	413, 438, 390, 386, 273, 414, 312, 358, 285, 287,
	307, 314, 316, 318, 319, 367, 368, 380, 401, 415,
	416, 417, 311, 295, 395, 296, 329, 297, 274, 303,
	301, 304, 403, 305, 276, 381, 421, 0, 324, 391,
	354, 277, 353, 382, 420, 419, 286, 446, 452, 453,
	542, 0, 458, 623, 624, 625, 467, 472, 473, 474,
	476, 477, 478, 479, 543, 560, 527, 497, 460, 551,
	494, 498, 499, 563, 1732, 1731, 1733, 451, 343, 344,
	0, 322, 270, 271, 618, 832, 373, 565, 598, 599,
	490, 0, 846, 827, 829, 830, 833, 837, 838, 839,
	840, 841, 843, 845, 849, 617, 0, 544, 559, 621,
	558, 614, 379, 0, 400, 556, 503, 0, 548, 522,
	0, 549, 518, 553, 0, 492, 0, 407, 432, 444,
	461, 464, 493, 578, 579, 580, 275, 463, 582, 583,
	584, 585, 586, 587, 588, 581, 848, 525, 502, 528,
	443, 505, 504, 0, 0, 539, 780, 540, 541, 363,
	364, 365, 366, 835, 566, 293, 462, 389, 0, 526,
	0, 0, 0, 0, 0, 0, 0, 0, 531, 532,
	529, 626, 0, 589, 590, 0, 0, 456, 457, 321,
	328, 475, 330, 292, 378, 323, 441, 337, 0, 468,
	533, 469, 592, 595, 593, 594, 370, 333, 334, 404,
	338, 348, 392, 440, 376, 397, 290, 431, 405, 352,
	519, 546, 857, 831, 856, 858, 859, 855, 860, 861,
	842, 736, 0, 787, 853, 852, 854, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 574, 573,
	572, 571, 570, 569, 568, 567, 0, 0, 516, 418,
	302, 264, 298, 299, 306, 615, 612, 422, 616, 0,
	272, 496, 346, 0, 387, 320, 561, 562, 0, 0,
	820, 794, 795, 796, 733, 797, 791, 792, 734, 793,
	821, 785, 817, 818, 761, 788, 798, 816, 799, 819,
	822, 823, 862, 863, 805, 789, 236, 864, 802, 824,
	815, 814, 800, 786, 825, 826, 768, 763, 803, 804,
	790, 808, 809, 810, 735, 782, 783, 784, 806, 807,
	764, 765, 766, 767, 0, 0, 0, 447, 448, 449,
	471, 0, 433, 495, 613, 0, 0, 0, 0, 0,
	0, 0, 545, 557, 591, 0, 601, 602, 604, 606,
	811, 608, 410, 778, 619, 486, 487, 620, 597, 0,
	728, 0, 375, 0, 501, 534, 523, 607, 489, 0,
	0, 0, 0, 0, 0, 731, 0, 0, 0, 315,
	1782, 0, 345, 538, 520, 530, 521, 506, 507, 508,
	515, 325, 509, 510, 511, 481, 512, 482, 513, 514,
	769, 537, 488, 406, 359, 555, 554, 0, 0, 836,
	844, 0, 0, 0, 0, 0, 0, 0, 0, 1983,
	0, 0, 723, 0, 0, 759, 813, 812, 746, 756,
	0, 0, 288, 210, 483, 603, 485, 484, 747, 0,
	748, 752, 755, 751, 749, 750, 0, 828, 0, 0,
	0, 0, 0, 0, 715, 727, 0, 732, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 724, 725, 0, 0, 0, 0, 779, 0, 726,
	0, 0, 1984, 753, 757, 0, 0, 0, 0, 278,
	412, 429, 289, 402, 442, 294, 409, 284, 374, 398,
	0, 0, 280, 427, 408, 356, 335, 336, 279, 0,
	393, 313, 327, 310, 372, 754, 777, 781, 309, 850,
	775, 437, 282, 0, 436, 371, 423, 428, 357, 351,
	281, 425, 355, 350, 339, 317, 851, 340, 341, 331,
	383, 349, 384, 332, 361, 360, 362, 0, 0, 0,
	0, 0, 465, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 596, 772, 0, 600,
	0, 439, 0, 0, 834, 0, 0, 0, 411, 0,
	0, 342, 0, 0, 0, 776, 0, 396, 377, 847,
	0, 0, 394, 347, 424, 385, 430, 413, 438, 390,
	386, 273, 414, 312, 358, 285, 287, 307, 314, 316,
	318, 319, 367, 368, 380, 401, 415, 416, 417, 311,
	295, 395, 296, 329, 297, 274, 303, 301, 304, 403,
	305, 276, 381, 421, 0, 324, 391, 354, 277, 353,
	382, 420, 419, 286, 446, 452, 453, 542, 0, 458,
	623, 624, 625, 467, 472, 473, 474, 476, 477, 478,
	479, 543, 560, 527, 497, 460, 551, 494, 498, 499,
	563, 0, 0, 0, 451, 343, 344, 0, 322, 270,
	271, 618, 832, 373, 565, 598, 599, 490, 0, 846,
	827, 829, 830, 833, 837, 838, 839, 840, 841, 843,
	845, 849, 617, 0, 544, 559, 621, 558, 614, 379,
	0, 400, 556, 503, 0, 548, 522, 0, 549, 518,
	553, 0, 492, 0, 407, 432, 444, 461, 464, 493,
	578, 579, 580, 275, 463, 582, 583, 584, 585, 586,
	587, 588, 581, 848, 525, 502, 528, 443, 505, 504,
	0, 0, 539, 780, 540, 541, 363, 364, 365, 366,
	835, 566, 293, 462, 389, 0, 526, 0, 0, 0,
	0, 0, 0, 0, 0, 531, 532, 529, 626, 0,
	589, 590, 0, 0, 456, 457, 321, 328, 475, 330,
	292, 378, 323, 441, 337, 0, 468, 533, 469, 592,
	595, 593, 594, 370, 333, 334, 404, 338, 348, 392,
	440, 376, 397, 290, 431, 405, 352, 519, 546, 857,
	831, 856, 858, 859, 855, 860, 861, 842, 736, 0,
	787, 853, 852, 854, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 574, 573, 572, 571, 570,
	569, 568, 567, 0, 0, 516, 418, 302, 264, 298,
	299, 306, 615, 612, 422, 616, 0, 272, 496, 346,
	0, 387, 320, 561, 562, 0, 0, 820, 794, 795,
	796, 733, 797, 791, 792, 734, 793, 821, 785, 817,
	818, 761, 788, 798, 816, 799, 819, 822, 823, 862,
	863, 805, 789, 236, 864, 802, 824, 815, 814, 800,
	786, 825, 826, 768, 763, 803, 804, 790, 808, 809,
	810, 735, 782, 783, 784, 806, 807, 764, 765, 766,
	767, 0, 0, 0, 447, 448, 449, 471, 0, 433,
	495, 613, 0, 0, 0, 0, 0, 0, 0, 545,
	557, 591, 0, 601, 602, 604, 606, 811, 608, 410,
	0, 619, 486, 487, 620, 597, 0, 728, 187, 778,
	0, 0, 0, 0, 0, 0, 0, 0, 375, 0,
	501, 534, 523, 607, 489, 0, 0, 0, 0, 0,
	0, 731, 0, 0, 0, 315, 0, 0, 345, 538,
	520, 530, 521, 506, 507, 508, 515, 325, 509, 510,
	511, 481, 512, 482, 513, 514, 1231, 537, 488, 406,
	359, 555, 554, 0, 0, 836, 844, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 723, 0,
	0, 759, 813, 812, 746, 756, 0, 0, 288, 210,
	483, 603, 485, 484, 747, 0, 748, 752, 755, 751,
	749, 750, 0, 828, 0, 0, 0, 0, 0, 0,
	715, 727, 0, 732, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 724, 725, 0,
	0, 0, 0, 779, 0, 726, 0, 0, 774, 753,
	757, 0, 0, 0, 0, 278, 412, 429, 289, 402,
	442, 294, 409, 284, 374, 398, 0, 0, 280, 427,
	408, 356, 335, 336, 279, 0, 393, 313, 327, 310,
	372, 754, 777, 781, 309, 850, 775, 437, 282, 0,
	436, 371, 423, 428, 357, 351, 281, 425, 355, 350,
	339, 317, 851, 340, 341, 331, 383, 349, 384, 332,
	361, 360, 362, 0, 0, 0, 0, 0, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 596, 772, 0, 600, 0, 439, 0, 0,
	834, 0, 0, 0, 411, 0, 0, 342, 0, 0,
	0, 776, 0, 396, 377, 847, 0, 0, 394, 347,
	424, 385, 430, 413, 438, 390, 386, 273, 414, 312,
	358, 285, 287, 307, 314, 316, 318, 319, 367, 368,
	380, 401, 415, 416, 417, 311, 295, 395, 296, 329,
	297, 274, 303, 301, 304, 403, 305, 276, 381, 421,
	0, 324, 391, 354, 277, 353, 382, 420, 419, 286,
	446, 452, 453, 542, 0, 458, 623, 624, 625, 467,
	472, 473, 474, 476, 477, 478, 479, 543, 560, 527,
	497, 460, 551, 494, 498, 499, 563, 0, 0, 0,
	451, 343, 344, 0, 322, 270, 271, 618, 832, 373,
	565, 598, 599, 490, 0, 846, 827, 829, 830, 833,
	837, 838, 839, 840, 841, 843, 845, 849, 617, 0,
	544, 559, 621, 558, 614, 379, 0, 400, 556, 503,
	0, 548, 522, 0, 549, 518, 553, 0, 492, 0,
	407, 432, 444, 461, 464, 493, 578, 579, 580, 275,
	463, 582, 583, 584, 585, 586, 587, 588, 581, 848,
	525, 502, 528, 443, 505, 504, 0, 0, 539, 780,
	540, 541, 363, 364, 365, 366, 835, 566, 293, 462,
	389, 0, 526, 0, 0, 0, 0, 0, 0, 0,
	0, 531, 532, 529, 626, 0, 589, 590, 0, 0,
	456, 457, 321, 328, 475, 330, 292, 378, 323, 441,
	337, 0, 468, 533, 469, 592, 595, 593, 594, 370,
	333, 334, 404, 338, 348, 392, 440, 376, 397, 290,
	431, 405, 352, 519, 546, 857, 831, 856, 858, 859,
	855, 860, 861, 842, 736, 0, 787, 853, 852, 854,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 574, 573, 572, 571, 570, 569, 568, 567, 0,
	0, 516, 418, 302, 264, 298, 299, 306, 615, 612,
	422, 616, 0, 272, 496, 346, 150, 387, 320, 561,
	562, 0, 0, 820, 794, 795, 796, 733, 797, 791,
	792, 734, 793, 821, 785, 817, 818, 761, 788, 798,
	816, 799, 819, 822, 823, 862, 863, 805, 789, 236,
	864, 802, 824, 815, 814, 800, 786, 825, 826, 768,
	763, 803, 804, 790, 808, 809, 810, 735, 782, 783,
	784, 806, 807, 764, 765, 766, 767, 0, 0, 0,
	447, 448, 449, 471, 0, 433, 495, 613, 0, 0,
	0, 0, 0, 0, 0, 545, 557, 591, 0, 601,
	602, 604, 606, 811, 608, 410, 778, 619, 486, 487,
	620, 597, 0, 728, 0, 375, 0, 501, 534, 523,
	607, 489, 0, 0, 0, 0, 0, 0, 731, 0,
	0, 0, 315, 3888, 0, 345, 538, 520, 530, 521,
	506, 507, 508, 515, 325, 509, 510, 511, 481, 512,
	482, 513, 514, 769, 537, 488, 406, 359, 555, 554,
	0, 0, 836, 844, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 723, 0, 0, 759, 813,
	812, 746, 756, 0, 0, 288, 210, 483, 603, 485,
	484, 747, 0, 748, 752, 755, 751, 749, 750, 0,
	828, 0, 0, 0, 0, 0, 0, 715, 727, 0,
	732, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 724, 725, 0, 0, 0, 0,
	779, 0, 726, 0, 0, 774, 753, 757, 0, 0,
	0, 0, 278, 412, 429, 289, 402, 442, 294, 409,
	284, 374, 398, 0, 0, 280, 427, 408, 356, 335,
	336, 279, 0, 393, 313, 327, 310, 372, 754, 777,
	781, 309, 850, 775, 437, 282, 0, 436, 371, 423,
	428, 357, 351, 281, 425, 355, 350, 339, 317, 851,
	340, 341, 331, 383, 349, 384, 332, 361, 360, 362,
	0, 0, 0, 0, 0, 465, 466, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 596,
	772, 0, 600, 0, 439, 0, 0, 834, 0, 0,
	0, 411, 0, 0, 342, 0, 0, 0, 776, 0,
	396, 377, 847, 0, 0, 394, 347, 424, 385, 430,
	413, 438, 390, 386, 273, 414, 312, 358, 285, 287,
	307, 314, 316, 318, 319, 367, 368, 380, 401, 415,
	416, 417, 311, 295, 395, 296, 329, 297, 274, 303,
	301, 304, 403, 305, 276, 381, 421, 0, 324, 391,
	354, 277, 353, 382, 420, 419, 286, 446, 452, 453,
	542, 0, 458, 623, 624, 625, 467, 472, 473, 474,
	476, 477, 478, 479, 543, 560, 527, 497, 460, 551,
	494, 498, 499, 563, 0, 0, 0, 451, 343, 344,
	0, 322, 270, 271, 618, 832, 373, 565, 598, 599,
	490, 0, 846, 827, 829, 830, 833, 837, 838, 839,
	840, 841, 843, 845, 849, 617, 0, 544, 559, 621,
	558, 614, 379, 0, 400, 556, 503, 0, 548, 522,
	0, 549, 518, 553, 0, 492, 0, 407, 432, 444,
	461, 464, 493, 578, 579, 580, 275, 463, 582, 583,
	584, 585, 586, 587, 588, 581, 848, 525, 502, 528,
	443, 505, 504, 0, 0, 539, 780, 540, 541, 363,
	364, 365, 366, 835, 566, 293, 462, 389, 0, 526,
	0, 0, 0, 0, 0, 0, 0, 0, 531, 532,
	529, 626, 0, 589, 590, 0, 0, 456, 457, 321,
	328, 475, 330, 292, 378, 323, 441, 337, 0, 468,
	533, 469, 592, 595, 593, 594, 370, 333, 334, 404,
	338, 348, 392, 440, 376, 397, 290, 431, 405, 352,
	519, 546, 857, 831, 856, 858, 859, 855, 860, 861,
	842, 736, 0, 787, 853, 852, 854, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 574, 573,
	572, 571, 570, 569, 568, 567, 0, 0, 516, 418,
	302, 264, 298, 299, 306, 615, 612, 422, 616, 0,
	272, 496, 346, 0, 387, 320, 561, 562, 0, 0,
	820, 794, 795, 796, 733, 797, 791, 792, 734, 793,
	821, 785, 817, 818, 761, 788, 798, 816, 799, 819,
	822, 823, 862, 863, 805, 789, 236, 864, 802, 824,
	815, 814, 800, 786, 825, 826, 768, 763, 803, 804,
	790, 808, 809, 810, 735, 782, 783, 784, 806, 807,
	764, 765, 766, 767, 0, 0, 0, 447, 448, 449,
	471, 0, 433, 495, 613, 0, 0, 0, 0, 0,
	0, 0, 545, 557, 591, 0, 601, 602, 604, 606,
	811, 608, 410, 778, 619, 486, 487, 620, 597, 0,
	728, 0, 375, 0, 501, 534, 523, 607, 489, 0,
	0, 0, 0, 0, 0, 731, 0, 0, 0, 315,
	0, 0, 345, 538, 520, 530, 521, 506, 507, 508,
	515, 325, 509, 510, 511, 481, 512, 482, 513, 514,
	769, 537, 488, 406, 359, 555, 554, 0, 0, 836,
	844, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 723, 0, 0, 759, 813, 812, 746, 756,
	0, 0, 288, 210, 483, 603, 485, 484, 747, 0,
	748, 752, 755, 751, 749, 750, 0, 828, 0, 0,
	0, 0, 0, 0, 715, 727, 0, 732, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 724, 725, 0, 0, 0, 0, 779, 0, 726,
	0, 0, 774, 753, 757, 0, 0, 0, 0, 278,
	412, 429, 289, 402, 442, 294, 409, 284, 374, 398,
	0, 0, 280, 427, 408, 356, 335, 336, 279, 0,
	393, 313, 327, 310, 372, 754, 777, 781, 309, 850,
	775, 437, 282, 0, 436, 371, 423, 428, 357, 351,
	281, 425, 355, 350, 339, 317, 851, 340, 341, 331,
	383, 349, 384, 332, 361, 360, 362, 0, 0, 0,
	0, 0, 465, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 596, 772, 0, 600,
	0, 439, 0, 0, 834, 0, 0, 0, 411, 0,
	0, 342, 0, 0, 0, 776, 0, 396, 377, 847,
	3783, 0, 394, 347, 424, 385, 430, 413, 438, 390,
	386, 273, 414, 312, 358, 285, 287, 307, 314, 316,
	318, 319, 367, 368, 380, 401, 415, 416, 417, 311,
	295, 395, 296, 329, 297, 274, 303, 301, 304, 403,
	305, 276, 381, 421, 0, 324, 391, 354, 277, 353,
	382, 420, 419, 286, 446, 452, 453, 542, 0, 458,
	623, 624, 625, 467, 472, 473, 474, 476, 477, 478,
	479, 543, 560, 527, 497, 460, 551, 494, 498, 499,
	563, 0, 0, 0, 451, 343, 344, 0, 322, 270,
	271, 618, 832, 373, 565, 598, 599, 490, 0, 846,
	827, 829, 830, 833, 837, 838, 839, 840, 841, 843,
	845, 849, 617, 0, 544, 559, 621, 558, 614, 379,
	0, 400, 556, 503, 0, 548, 522, 0, 549, 518,
	553, 0, 492, 0, 407, 432, 444, 461, 464, 493,
	578, 579, 580, 275, 463, 582, 583, 584, 585, 586,
	587, 588, 581, 848, 525, 502, 528, 443, 505, 504,
	0, 0, 539, 780, 540, 541, 363, 364, 365, 366,
	835, 566, 293, 462, 389, 0, 526, 0, 0, 0,
	0, 0, 0, 0, 0, 531, 532, 529, 626, 0,
	589, 590, 0, 0, 456, 457, 321, 328, 475, 330,
	292, 378, 323, 441, 337, 0, 468, 533, 469, 592,
	595, 593, 594, 370, 333, 334, 404, 338, 348, 392,
	440, 376, 397, 290, 431, 405, 352, 519, 546, 857,
	831, 856, 858, 859, 855, 860, 861, 842, 736, 0,
	787, 853, 852, 854, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 574, 573, 572, 571, 570,
	569, 568, 567, 0, 0, 516, 418, 302, 264, 298,
	299, 306, 615, 612, 422, 616, 0, 272, 496, 346,
	0, 387, 320, 561, 562, 0, 0, 820, 794, 795,
	796, 733, 797, 791, 792, 734, 793, 821, 785, 817,
	818, 761, 788, 798, 816, 799, 819, 822, 823, 862,
	863, 805, 789, 236, 864, 802, 824, 815, 814, 800,
	786, 825, 826, 768, 763, 803, 804, 790, 808, 809,
	810, 735, 782, 783, 784, 806, 807, 764, 765, 766,
	767, 0, 0, 0, 447, 448, 449, 471, 0, 433,
	495, 613, 0, 0, 0, 0, 0, 0, 0, 545,
	557, 591, 0, 601, 602, 604, 606, 811, 608, 410,
	778, 619, 486, 487, 620, 597, 0, 728, 0, 375,
	0, 501, 534, 523, 607, 489, 0, 0, 0, 0,
	0, 0, 731, 0, 0, 0, 315, 1782, 0, 345,
	538, 520, 530, 521, 506, 507, 508, 515, 325, 509,
	510, 511, 481, 512, 482, 513, 514, 769, 537, 488,
	406, 359, 555, 554, 0, 0, 836, 844, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 723,
	0, 0, 759, 813, 812, 746, 756, 0, 0, 288,
	210, 483, 603, 485, 484, 747, 0, 748, 752, 755,
	751, 749, 750, 0, 828, 0, 0, 0, 0, 0,
	0, 715, 727, 0, 732, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 724, 725,
	0, 0, 0, 0, 779, 0, 726, 0, 0, 774,
	753, 757, 0, 0, 0, 0, 278, 412, 429, 289,
	402, 442, 294, 409, 284, 374, 398, 0, 0, 280,
	427, 408, 356, 335, 336, 279, 0, 393, 313, 327,
	310, 372, 754, 777, 781, 309, 850, 775, 437, 282,
	0, 436, 371, 423, 428, 357, 351, 281, 425, 355,
	350, 339, 317, 851, 340, 341, 331, 383, 349, 384,
	332, 361, 360, 362, 0, 0, 0, 0, 0, 465,
	466, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 596, 772, 0, 600, 0, 439, 0,
	0, 834, 0, 0, 0, 411, 0, 0, 342, 0,
	0, 0, 776, 0, 396, 377, 847, 0, 0, 394,
	347, 424, 385, 430, 413, 438, 390, 386, 273, 414,
	312, 358, 285, 287, 307, 314, 316, 318, 319, 367,
	368, 380, 401, 415, 416, 417, 311, 295, 395, 296,
	329, 297, 274, 303, 301, 304, 403, 305, 276, 381,
	421, 0, 324, 391, 354, 277, 353, 382, 420, 419,
	286, 446, 452, 453, 542, 0, 458, 623, 624, 625,
	467, 472, 473, 474, 476, 477, 478, 479, 543, 560,
	527, 497, 460, 551, 494, 498, 499, 563, 0, 0,
	0, 451, 343, 344, 0, 322, 270, 271, 618, 832,
	373, 565, 598, 599, 490, 0, 846, 827, 829, 830,
	833, 837, 838, 839, 840, 841, 843, 845, 849, 617,
	0, 544, 559, 621, 558, 614, 379, 0, 400, 556,
	503, 0, 548, 522, 0, 549, 518, 553, 0, 492,
	0, 407, 432, 444, 461, 464, 493, 578, 579, 580,
	275, 463, 582, 583, 584, 585, 586, 587, 588, 581,
	848, 525, 502, 528, 443, 505, 504, 0, 0, 539,
	780, 540, 541, 363, 364, 365, 366, 835, 566, 293,
	462, 389, 0, 526, 0, 0, 0, 0, 0, 0,
	0, 0, 531, 532, 529, 626, 0, 589, 590, 0,
	0, 456, 457, 321, 328, 475, 330, 292, 378, 323,
	441, 337, 0, 468, 533, 469, 592, 595, 593, 594,
	370, 333, 334, 404, 338, 348, 392, 440, 376, 397,
	290, 431, 405, 352, 519, 546, 857, 831, 856, 858,
	859, 855, 860, 861, 842, 736, 0, 787, 853, 852,
	854, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 574, 573, 572, 571, 570, 569, 568, 567,
	0, 0, 516, 418, 302, 264, 298, 299, 306, 615,
	612, 422, 616, 0, 272, 496, 346, 0, 387, 320,
	561, 562, 0, 0, 820, 794, 795, 796, 733, 797,
	791, 792, 734, 793, 821, 785, 817, 818, 761, 788,
	798, 816, 799, 819, 822, 823, 862, 863, 805, 789,
	236, 864, 802, 824, 815, 814, 800, 786, 825, 826,
	768, 763, 803, 804, 790, 808, 809, 810, 735, 782,
	783, 784, 806, 807, 764, 765, 766, 767, 0, 0,
	0, 447, 448, 449, 471, 0, 433, 495, 613, 0,
	0, 0, 0, 0, 0, 0, 545, 557, 591, 0,
	601, 602, 604, 606, 811, 608, 410, 778, 619, 486,
	487, 620, 597, 0, 728, 0, 375, 0, 501, 534,
	523, 607, 489, 0, 0, 0, 0, 0, 0, 731,
	0, 0, 0, 315, 0, 0, 345, 538, 520, 530,
	521, 506, 507, 508, 515, 325, 509, 510, 511, 481,
	512, 482, 513, 514, 769, 537, 488, 406, 359, 555,
	554, 0, 0, 836, 844, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 723, 0, 0, 759,
	813, 812, 746, 756, 0, 0, 288, 210, 483, 603,
	485, 484, 747, 0, 748, 752, 755, 751, 749, 750,
	0, 828, 0, 0, 0, 0, 0, 0, 715, 727,
	0, 732, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 724, 725, 1504, 0, 0,
	0, 779, 0, 726, 0, 0, 774, 753, 757, 0,
	0, 0, 0, 278, 412, 429, 289, 402, 442, 294,
	409, 284, 374, 398, 0, 0, 280, 427, 408, 356,
	335, 336, 279, 0, 393, 313, 327, 310, 372, 754,
	777, 781, 309, 850, 775, 437, 282, 0, 436, 371,
	423, 428, 357, 351, 281, 425, 355, 350, 339, 317,
	851, 340, 341, 331, 383, 349, 384, 332, 361, 360,
	362, 0, 0, 0, 0, 0, 465, 466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	596, 772, 0, 600, 0, 439, 0, 0, 834, 0,
	0, 0, 411, 0, 0, 342, 0, 0, 0, 776,
	0, 396, 377, 847, 0, 0, 394, 347, 424, 385,
	430, 413, 438, 390, 386, 273, 414, 312, 358, 285,
	287, 307, 314, 316, 318, 319, 367, 368, 380, 401,
	415, 416, 417, 311, 295, 395, 296, 329, 297, 274,
	303, 301, 304, 403, 305, 276, 381, 421, 0, 324,
	391, 354, 277, 353, 382, 420, 419, 286, 446, 452,
	453, 542, 0, 458, 623, 624, 625, 467, 472, 473,
	474, 476, 477, 478, 479, 543, 560, 527, 497, 460,
	551, 494, 498, 499, 563, 0, 0, 0, 451, 343,
	344, 0, 322, 270, 271, 618, 832, 373, 565, 598,
	599, 490, 0, 846, 827, 829, 830, 833, 837, 838,
	839, 840, 841, 843, 845, 849, 617, 0, 544, 559,
	621, 558, 614, 379, 0, 400, 556, 503, 0, 548,
	522, 0, 549, 518, 553, 0, 492, 0, 407, 432,
	444, 461, 464, 493, 578, 579, 580, 275, 463, 582,
	583, 584, 585, 586, 587, 588, 581, 848, 525, 502,
	528, 443, 505, 504, 0, 0, 539, 780, 540, 541,
	363, 364, 365, 366, 835, 566, 293, 462, 389, 0,
	526, 0, 0, 0, 0, 0, 0, 0, 0, 531,
	532, 529, 626, 0, 589, 590, 0, 0, 456, 457,
	321, 328, 475, 330, 292, 378, 323, 441, 337, 0,
	468, 533, 469, 592, 595, 593, 594, 370, 333, 334,
	404, 338, 348, 392, 440, 376, 397, 290, 431, 405,
	352, 519, 546, 857, 831, 856, 858, 859, 855, 860,
	861, 842, 736, 0, 787, 853, 852, 854, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 574,
	573, 572, 571, 570, 569, 568, 567, 0, 0, 516,
	418, 302, 264, 298, 299, 306, 615, 612, 422, 616,
	0, 272, 496, 346, 0, 387, 320, 561, 562, 0,
	0, 820, 794, 795, 796, 733, 797, 791, 792, 734,
	793, 821, 785, 817, 818, 761, 788, 798, 816, 799,
	819, 822, 823, 862, 863, 805, 789, 236, 864, 802,
	824, 815, 814, 800, 786, 825, 826, 768, 763, 803,
	804, 790, 808, 809, 810, 735, 782, 783, 784, 806,
	807, 764, 765, 766, 767, 0, 0, 0, 447, 448,
	449, 471, 0, 433, 495, 613, 0, 0, 0, 0,
	0, 0, 0, 545, 557, 591, 0, 601, 602, 604,
	606, 811, 608, 410, 0, 619, 486, 487, 620, 597,
	778, 728, 0, 2155, 0, 0, 0, 0, 0, 375,
	0, 501, 534, 523, 607, 489, 0, 0, 0, 0,
	0, 0, 731, 0, 0, 0, 315, 0, 0, 345,
	538, 520, 530, 521, 506, 507, 508, 515, 325, 509,
	510, 511, 481, 512, 482, 513, 514, 769, 537, 488,
	406, 359, 555, 554, 0, 0, 836, 844, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 723,
	0, 0, 759, 813, 812, 746, 756, 0, 0, 288,
	210, 483, 603, 485, 484, 747, 0, 748, 752, 755,
	751, 749, 750, 0, 828, 0, 0, 0, 0, 0,
	0, 715, 727, 0, 732, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 724, 725,
	0, 0, 0, 0, 779, 0, 726, 0, 0, 774,
	753, 757, 0, 0, 0, 0, 278, 412, 429, 289,
	402, 442, 294, 409, 284, 374, 398, 0, 0, 280,
	427, 408, 356, 335, 336, 279, 0, 393, 313, 327,
	310, 372, 754, 777, 781, 309, 850, 775, 437, 282,
	0, 436, 371, 423, 428, 357, 351, 281, 425, 355,
	350, 339, 317, 851, 340, 341, 331, 383, 349, 384,
	332, 361, 360, 362, 0, 0, 0, 0, 0, 465,
	466, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 596, 772, 0, 600, 0, 439, 0,
	0, 834, 0, 0, 0, 411, 0, 0, 342, 0,
	0, 0, 776, 0, 396, 377, 847, 0, 0, 394,
	347, 424, 385, 430, 413, 438, 390, 386, 273, 414,
	312, 358, 285, 287, 307, 314, 316, 318, 319, 367,
	368, 380, 401, 415, 416, 417, 311, 295, 395, 296,
	329, 297, 274, 303, 301, 304, 403, 305, 276, 381,
	421, 0, 324, 391, 354, 277, 353, 382, 420, 419,
	286, 446, 452, 453, 542, 0, 458, 623, 624, 625,
	467, 472, 473, 474, 476, 477, 478, 479, 543, 560,
	527, 497, 460, 551, 494, 498, 499, 563, 0, 0,
	0, 451, 343, 344, 0, 322, 270, 271, 618, 832,
	373, 565, 598, 599, 490, 0, 846, 827, 829, 830,
	833, 837, 838, 839, 840, 841, 843, 845, 849, 617,
	0, 544, 559, 621, 558, 614, 379, 0, 400, 556,
	503, 0, 548, 522, 0, 549, 518, 553, 0, 492,
	0, 407, 432, 444, 461, 464, 493, 578, 579, 580,
	275, 463, 582, 583, 584, 585, 586, 587, 588, 581,
	848, 525, 502, 528, 443, 505, 504, 0, 0, 539,
	780, 540, 541, 363, 364, 365, 366, 835, 566, 293,
	462, 389, 0, 526, 0, 0, 0, 0, 0, 0,
	0, 0, 531, 532, 529, 626, 0, 589, 590, 0,
	0, 456, 457, 321, 328, 475, 330, 292, 378, 323,
	441, 337, 0, 468, 533, 469, 592, 595, 593, 594,
	370, 333, 334, 404, 338, 348, 392, 440, 376, 397,
	290, 431, 405, 352, 519, 546, 857, 831, 856, 858,
	859, 855, 860, 861, 842, 736, 0, 787, 853, 852,
	854, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 574, 573, 572, 571, 570, 569, 568, 567,
	0, 0, 516, 418, 302, 264, 298, 299, 306, 615,
	612, 422, 616, 0, 272, 496, 346, 0, 387, 320,
	561, 562, 0, 0, 820, 794, 795, 796, 733, 797,
	791, 792, 734, 793, 821, 785, 817, 818, 761, 788,
	798, 816, 799, 819, 822, 823, 862, 863, 805, 789,
	236, 864, 802, 824, 815, 814, 800, 786, 825, 826,
	768, 763, 803, 804, 790, 808, 809, 810, 735, 782,
	783, 784, 806, 807, 764, 765, 766, 767, 0, 0,
	0, 447, 448, 449, 471, 0, 433, 495, 613, 0,
	0, 0, 0, 0, 0, 0, 545, 557, 591, 0,
	601, 602, 604, 606, 811, 608, 410, 778, 619, 486,
	487, 620, 597, 0, 728, 0, 375, 0, 501, 534,
	523, 607, 489, 0, 0, 0, 0, 0, 0, 731,
	0, 0, 0, 315, 0, 0, 345, 538, 520, 530,
	521, 506, 507, 508, 515, 325, 509, 510, 511, 481,
	512, 482, 513, 514, 769, 537, 488, 406, 359, 555,
	554, 0, 0, 836, 844, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 723, 0, 0, 759,
	813, 812, 746, 756, 0, 0, 288, 210, 483, 603,
	485, 484, 747, 0, 748, 752, 755, 751, 749, 750,
	0, 828, 0, 0, 0, 0, 0, 0, 715, 727,
	0, 732, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 724, 725, 1775, 0, 0,
	0, 779, 0, 726, 0, 0, 774, 753, 757, 0,
	0, 0, 0, 278, 412, 429, 289, 402, 442, 294,
	409, 284, 374, 398, 0, 0, 280, 427, 408, 356,
	335, 336, 279, 0, 393, 313, 327, 310, 372, 754,
	777, 781, 309, 850, 775, 437, 282, 0, 436, 371,
	423, 428, 357, 351, 281, 425, 355, 350, 339, 317,
	851, 340, 341, 331, 383, 349, 384, 332, 361, 360,
	362, 0, 0, 0, 0, 0, 465, 466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	596, 772, 0, 600, 0, 439, 0, 0, 834, 0,
	0, 0, 411, 0, 0, 342, 0, 0, 0, 776,
	0, 396, 377, 847, 0, 0, 394, 347, 424, 385,
	430, 413, 438, 390, 386, 273, 414, 312, 358, 285,
	287, 307, 314, 316, 318, 319, 367, 368, 380, 401,
	415, 416, 417, 311, 295, 395, 296, 329, 297, 274,
	303, 301, 304, 403, 305, 276, 381, 421, 0, 324,
	391, 354, 277, 353, 382, 420, 419, 286, 446, 452,
	453, 542, 0, 458, 623, 624, 625, 467, 472, 473,
	474, 476, 477, 478, 479, 543, 560, 527, 497, 460,
	551, 494, 498, 499, 563, 0, 0, 0, 451, 343,
	344, 0, 322, 270, 271, 618, 832, 373, 565, 598,
	599, 490, 0, 846, 827, 829, 830, 833, 837, 838,
	839, 840, 841, 843, 845, 849, 617, 0, 544, 559,
	621, 558, 614, 379, 0, 400, 556, 503, 0, 548,
	522, 0, 549, 518, 553, 0, 492, 0, 407, 432,
	444, 461, 464, 493, 578, 579, 580, 275, 463, 582,
	583, 584, 585, 586, 587, 588, 581, 848, 525, 502,
	528, 443, 505, 504, 0, 0, 539, 780, 540, 541,
	363, 364, 365, 366, 835, 566, 293, 462, 389, 0,
	526, 0, 0, 0, 0, 0, 0, 0, 0, 531,
	532, 529, 626, 0, 589, 590, 0, 0, 456, 457,
	321, 328, 475, 330, 292, 378, 323, 441, 337, 0,
	468, 533, 469, 592, 595, 593, 594, 370, 333, 334,
	404, 338, 348, 392, 440, 376, 397, 290, 431, 405,
	352, 519, 546, 857, 831, 856, 858, 859, 855, 860,
	861, 842, 736, 0, 787, 853, 852, 854, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 574,
	573, 572, 571, 570, 569, 568, 567, 0, 0, 516,
	418, 302, 264, 298, 299, 306, 615, 612, 422, 616,
	0, 272, 496, 346, 0, 387, 320, 561, 562, 0,
	0, 820, 794, 795, 796, 733, 797, 791, 792, 734,
	793, 821, 785, 817, 818, 761, 788, 798, 816, 799,
	819, 822, 823, 862, 863, 805, 789, 236, 864, 802,
	824, 815, 814, 800, 786, 825, 826, 768, 763, 803,
	804, 790, 808, 809, 810, 735, 782, 783, 784, 806,
	807, 764, 765, 766, 767, 0, 0, 0, 447, 448,
	449, 471, 0, 433, 495, 613, 0, 0, 0, 0,
	0, 0, 0, 545, 557, 591, 0, 601, 602, 604,
	606, 811, 608, 410, 778, 619, 486, 487, 620, 597,
	0, 728, 0, 375, 0, 501, 534, 523, 607, 489,
	0, 0, 0, 0, 0, 0, 731, 0, 0, 0,
	315, 0, 0, 345, 538, 520, 530, 521, 506, 507,
	508, 515, 325, 509, 510, 511, 481, 512, 482, 513,
	514, 769, 537, 488, 406, 359, 555, 554, 0, 0,
	836, 844, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 723, 0, 0, 759, 813, 812, 746,
	756, 0, 0, 288, 210, 483, 603, 485, 484, 747,
	0, 748, 752, 755, 751, 749, 750, 0, 828, 0,
	0, 0, 0, 0, 0, 715, 727, 0, 732, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 724, 725, 0, 0, 0, 0, 779, 0,
	726, 0, 0, 774, 753, 757, 0, 0, 0, 0,
	278, 412, 429, 289, 402, 442, 294, 409, 284, 374,
	398, 0, 0, 280, 427, 408, 356, 335, 336, 279,
	0, 393, 313, 327, 310, 372, 754, 777, 781, 309,
	850, 775, 437, 282, 0, 436, 371, 423, 428, 357,
	351, 281, 425, 355, 350, 339, 317, 851, 340, 341,
	331, 383, 349, 384, 332, 361, 360, 362, 0, 0,
	0, 0, 0, 465, 466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 596, 772, 0,
	600, 0, 439, 0, 0, 834, 0, 0, 0, 411,
	0, 0, 342, 0, 0, 0, 776, 0, 396, 377,
	847, 0, 0, 394, 347, 424, 385, 430, 413, 438,
	390, 386, 273, 414, 312, 358, 285, 287, 307, 314,
	316, 318, 319, 367, 368, 380, 401, 415, 416, 417,
	311, 295, 395, 296, 329, 297, 274, 303, 301, 304,
	403, 305, 276, 381, 421, 0, 324, 391, 354, 277,
	353, 382, 420, 419, 286, 446, 452, 453, 542, 0,
	458, 623, 624, 625, 467, 472, 473, 474, 476, 477,
	478, 479, 543, 560, 527, 497, 460, 551, 494, 498,
	499, 563, 0, 0, 0, 451, 343, 344, 0, 322,
	270, 271, 618, 832, 373, 565, 598, 599, 490, 0,
	846, 827, 829, 830, 833, 837, 838, 839, 840, 841,
	843, 845, 849, 617, 0, 544, 559, 621, 558, 614,
	379, 0, 400, 556, 503, 0, 548, 522, 0, 549,
	518, 553, 0, 492, 0, 407, 432, 444, 461, 464,
	493, 578, 579, 580, 275, 463, 582, 583, 584, 585,
	586, 587, 588, 581, 848, 525, 502, 528, 443, 505,
	504, 0, 0, 539, 780, 540, 541, 363, 364, 365,
	366, 835, 566, 293, 462, 389, 0, 526, 0, 0,
	0, 0, 0, 0, 0, 0, 531, 532, 529, 626,
	0, 589, 590, 0, 0, 456, 457, 321, 328, 475,
	330, 292, 378, 323, 441, 337, 0, 468, 533, 469,
	592, 595, 593, 594, 370, 333, 334, 404, 338, 348,
	392, 440, 376, 397, 290, 431, 405, 352, 519, 546,
	857, 831, 856, 858, 859, 855, 860, 861, 842, 736,
	0, 787, 853, 852, 854, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 574, 573, 572, 571,
	570, 569, 568, 567, 0, 0, 516, 418, 302, 264,
	298, 299, 306, 615, 612, 422, 616, 0, 272, 496,
	346, 0, 387, 320, 561, 562, 0, 0, 820, 794,
	795, 796, 733, 797, 791, 792, 734, 793, 821, 785,
	817, 818, 761, 788, 798, 816, 799, 819, 822, 823,
	862, 863, 805, 789, 236, 864, 802, 824, 815, 814,
	800, 786, 825, 826, 768, 763, 803, 804, 790, 808,
	809, 810, 735, 782, 783, 784, 806, 807, 764, 765,
	766, 767, 0, 0, 0, 447, 448, 449, 471, 0,
	433, 495, 613, 0, 0, 0, 0, 0, 0, 0,
	545, 557, 591, 0, 601, 602, 604, 606, 811, 608,
	410, 778, 619, 486, 487, 620, 597, 0, 728, 0,
	375, 0, 501, 534, 523, 607, 489, 0, 0, 0,
	0, 0, 0, 731, 0, 0, 0, 315, 0, 0,
	345, 538, 520, 530, 521, 506, 507, 508, 515, 325,
	509, 510, 511, 481, 512, 482, 513, 514, 769, 537,
	488, 406, 359, 555, 554, 0, 0, 836, 844, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	723, 0, 0, 759, 813, 812, 746, 756, 0, 0,
	288, 210, 483, 603, 485, 484, 2611, 0, 2612, 752,
	755, 751, 749, 750, 0, 828, 0, 0, 0, 0,
	0, 0, 715, 727, 0, 732, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 724,
	725, 0, 0, 0, 0, 779, 0, 726, 0, 0,
	774, 753, 757, 0, 0, 0, 0, 278, 412, 429,
	289, 402, 442, 294, 409, 284, 374, 398, 0, 0,
	280, 427, 408, 356, 335, 336, 279, 0, 393, 313,
	327, 310, 372, 754, 777, 781, 309, 850, 775, 437,
	282, 0, 436, 371, 423, 428, 357, 351, 281, 425,
	355, 350, 339, 317, 851, 340, 341, 331, 383, 349,
	384, 332, 361, 360, 362, 0, 0, 0, 0, 0,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 596, 772, 0, 600, 0, 439,
	0, 0, 834, 0, 0, 0, 411, 0, 0, 342,
	0, 0, 0, 776, 0, 396, 377, 847, 0, 0,
	394, 347, 424, 385, 430, 413, 438, 390, 386, 273,
	414, 312, 358, 285, 287, 307, 314, 316, 318, 319,
	367, 368, 380, 401, 415, 416, 417, 311, 295, 395,
	296, 329, 297, 274, 303, 301, 304, 403, 305, 276,
	381, 421, 0, 324, 391, 354, 277, 353, 382, 420,
	419, 286, 446, 452, 453, 542, 0, 458, 623, 624,
	625, 467, 472, 473, 474, 476, 477, 478, 479, 543,
	560, 527, 497, 460, 551, 494, 498, 499, 563, 0,
	0, 0, 451, 343, 344, 0, 322, 270, 271, 618,
	832, 373, 565, 598, 599, 490, 0, 846, 827, 829,
	830, 833, 837, 838, 839, 840, 841, 843, 845, 849,
	617, 0, 544, 559, 621, 558, 614, 379, 0, 400,
	556, 503, 0, 548, 522, 0, 549, 518, 553, 0,
	492, 0, 407, 432, 444, 461, 464, 493, 578, 579,
	580, 275, 463, 582, 583, 584, 585, 586, 587, 588,
	581, 848, 525, 502, 528, 443, 505, 504, 0, 0,
	539, 780, 540, 541, 363, 364, 365, 366, 835, 566,
	293, 462, 389, 0, 526, 0, 0, 0, 0, 0,
	0, 0, 0, 531, 532, 529, 626, 0, 589, 590,
	0, 0, 456, 457, 321, 328, 475, 330, 292, 378,
	323, 441, 337, 0, 468, 533, 469, 592, 595, 593,
	594, 370, 333, 334, 404, 338, 348, 392, 440, 376,
	397, 290, 431, 405, 352, 519, 546, 857, 831, 856,
	858, 859, 855, 860, 861, 842, 736, 0, 787, 853,
	852, 854, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 574, 573, 572, 571, 570, 569, 568,
	567, 0, 0, 516, 418, 302, 264, 298, 299, 306,
	615, 612, 422, 616, 0, 272, 496, 346, 0, 387,
	320, 561, 562, 0, 0, 820, 794, 795, 796, 733,
	797, 791, 792, 734, 793, 821, 785, 817, 818, 761,
	788, 798, 816, 799, 819, 822, 823, 862, 863, 805,
	789, 236, 864, 802, 824, 815, 814, 800, 786, 825,
	826, 768, 763, 803, 804, 790, 808, 809, 810, 735,
	782, 783, 784, 806, 807, 764, 765, 766, 767, 0,
	0, 0, 447, 448, 449, 471, 0, 433, 495, 613,
	0, 0, 0, 0, 0, 0, 0, 545, 557, 591,
	0, 601, 602, 604, 606, 811, 608, 410, 778, 619,
	486, 487, 620, 597, 0, 728, 0, 375, 0, 501,
	534, 523, 607, 489, 0, 0, 1645, 0, 0, 0,
	731, 0, 0, 0, 315, 0, 0, 345, 538, 520,
	530, 521, 506, 507, 508, 515, 325, 509, 510, 511,
	481, 512, 482, 513, 514, 769, 537, 488, 406, 359,
	555, 554, 0, 0, 836, 844, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 723, 0, 0,
	759, 813, 812, 746, 756, 0, 0, 288, 210, 483,
	603, 485, 484, 747, 0, 748, 752, 755, 751, 749,
	750, 0, 828, 0, 0, 0, 0, 0, 0, 0,
	727, 0, 732, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 724, 725, 0, 0,
	0, 0, 779, 0, 726, 0, 0, 774, 753, 757,
	0, 0, 0, 0, 278, 412, 429, 289, 402, 442,
	294, 409, 284, 374, 398, 0, 0, 280, 427, 408,
	356, 335, 336, 279, 0, 393, 313, 327, 310, 372,
	754, 777, 781, 309, 850, 775, 437, 282, 0, 436,
	371, 423, 428, 357, 351, 281, 425, 355, 350, 339,
	317, 851, 340, 341, 331, 383, 349, 384, 332, 361,
	360, 362, 0, 0, 0, 0, 0, 465, 466, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 596, 772, 0, 600, 0, 439, 0, 0, 834,
	0, 0, 0, 411, 0, 0, 342, 0, 0, 0,
	776, 0, 396, 377, 847, 0, 0, 394, 347, 424,
	385, 430, 413, 438, 390, 386, 273, 414, 312, 358,
	285, 287, 307, 314, 316, 318, 319, 367, 368, 380,
	401, 415, 416, 417, 311, 295, 395, 296, 329, 297,
	274, 303, 301, 304, 403, 305, 276, 381, 421, 0,
	324, 391, 354, 277, 353, 382, 420, 419, 286, 446,
	1646, 1647, 542, 0, 458, 623, 624, 625, 467, 472,
	473, 474, 476, 477, 478, 479, 543, 560, 527, 497,
	460, 551, 494, 498, 499, 563, 0, 0, 0, 451,
	343, 344, 0, 322, 270, 271, 618, 832, 373, 565,
	598, 599, 490, 0, 846, 827, 829, 830, 833, 837,
	838, 839, 840, 841, 843, 845, 849, 617, 0, 544,
	559, 621, 558, 614, 379, 0, 400, 556, 503, 0,
	548, 522, 0, 549, 518, 553, 0, 492, 0, 407,
	432, 444, 461, 464, 493, 578, 579, 580, 275, 463,
	582, 583, 584, 585, 586, 587, 588, 581, 848, 525,
	502, 528, 443, 505, 504, 0, 0, 539, 780, 540,
	541, 363, 364, 365, 366, 835, 566, 293, 462, 389,
	0, 526, 0, 0, 0, 0, 0, 0, 0, 0,
	531, 532, 529, 626, 0, 589, 590, 0, 0, 456,
	457, 321, 328, 475, 330, 292, 378, 323, 441, 337,
	0, 468, 533, 469, 592, 595, 593, 594, 370, 333,
	334, 404, 338, 348, 392, 440, 376, 397, 290, 431,
	405, 352, 519, 546, 857, 831, 856, 858, 859, 855,
	860, 861, 842, 736, 0, 787, 853, 852, 854, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	574, 573, 572, 571, 570, 569, 568, 567, 0, 0,
	516, 418, 302, 264, 298, 299, 306, 615, 612, 422,
	616, 0, 272, 496, 346, 0, 387, 320, 561, 562,
	0, 0, 820, 794, 795, 796, 733, 797, 791, 792,
	734, 793, 821, 785, 817, 818, 761, 788, 798, 816,
	799, 819, 822, 823, 862, 863, 805, 789, 236, 864,
	802, 824, 815, 814, 800, 786, 825, 826, 768, 763,
	803, 804, 790, 808, 809, 810, 735, 782, 783, 784,
	806, 807, 764, 765, 766, 767, 0, 0, 0, 447,
	448, 449, 471, 0, 433, 495, 613, 0, 0, 0,
	0, 0, 0, 0, 545, 557, 591, 0, 601, 602,
	604, 606, 811, 608, 410, 778, 619, 486, 487, 620,
	597, 0, 728, 0, 375, 0, 501, 534, 523, 607,
	489, 0, 0, 0, 0, 0, 0, 731, 0, 0,
	0, 315, 0, 0, 345, 538, 520, 530, 521, 506,
	507, 508, 515, 325, 509, 510, 511, 481, 512, 482,
	513, 514, 769, 537, 488, 406, 359, 555, 554, 0,
	0, 836, 844, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 723, 0, 0, 759, 813, 812,
	746, 756, 0, 0, 288, 210, 483, 603, 485, 484,
	747, 0, 748, 752, 755, 751, 749, 750, 0, 828,
	0, 0, 0, 0, 0, 0, 0, 727, 0, 732,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 724, 725, 0, 0, 0, 0, 779,
	0, 726, 0, 0, 774, 753, 757, 0, 0, 0,
	0, 278, 412, 429, 289, 402, 442, 294, 409, 284,
	374, 398, 0, 0, 280, 427, 408, 356, 335, 336,
	279, 0, 393, 313, 327, 310, 372, 754, 777, 781,
	309, 850, 775, 437, 282, 0, 436, 371, 423, 428,
	357, 351, 281, 425, 355, 350, 339, 317, 851, 340,
	341, 331, 383, 349, 384, 332, 361, 360, 362, 0,
	0, 0, 0, 0, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 596, 772,
	0, 600, 0, 439, 0, 0, 834, 0, 0, 0,
	411, 0, 0, 342, 0, 0, 0, 776, 0, 396,
	377, 847, 0, 0, 394, 347, 424, 385, 430, 413,
	438, 390, 386, 273, 414, 312, 358, 285, 287, 307,
	314, 316, 318, 319, 367, 368, 380, 401, 415, 416,
	417, 311, 295, 395, 296, 329, 297, 274, 303, 301,
	304, 403, 305, 276, 381, 421, 0, 324, 391, 354,
	277, 353, 382, 420, 419, 286, 446, 452, 453, 542,
	0, 458, 623, 624, 625, 467, 472, 473, 474, 476,
	477, 478, 479, 543, 560, 527, 497, 460, 551, 494,
	498, 499, 563, 0, 0, 0, 451, 343, 344, 0,
	322, 270, 271, 618, 832, 373, 565, 598, 599, 490,
	0, 846, 827, 829, 830, 833, 837, 838, 839, 840,
	841, 843, 845, 849, 617, 0, 544, 559, 621, 558,
	614, 379, 0, 400, 556, 503, 0, 548, 522, 0,
	549, 518, 553, 0, 492, 0, 407, 432, 444, 461,
	464, 493, 578, 579, 580, 275, 463, 582, 583, 584,
	585, 586, 587, 588, 581, 848, 525, 502, 528, 443,
	505, 504, 0, 0, 539, 780, 540, 541, 363, 364,
	365, 366, 835, 566, 293, 462, 389, 0, 526, 0,
	0, 0, 0, 0, 0, 0, 0, 531, 532, 529,
	626, 0, 589, 590, 0, 0, 456, 457, 321, 328,
	475, 330, 292, 378, 323, 441, 337, 0, 468, 533,
	469, 592, 595, 593, 594, 370, 333, 334, 404, 338,
	348, 392, 440, 376, 397, 290, 431, 405, 352, 519,
	546, 857, 831, 856, 858, 859, 855, 860, 861, 842,
	736, 0, 787, 853, 852, 854, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 574, 573, 572,
	571, 570, 569, 568, 567, 0, 0, 516, 418, 302,
	264, 298, 299, 306, 615, 612, 422, 616, 0, 272,
	496, 346, 0, 387, 320, 561, 562, 0, 0, 820,
	794, 795, 796, 733, 797, 791, 792, 734, 793, 821,
	785, 817, 818, 761, 788, 798, 816, 799, 819, 822,
	823, 862, 863, 805, 789, 236, 864, 802, 824, 815,
	814, 800, 786, 825, 826, 768, 763, 803, 804, 790,
	808, 809, 810, 735, 782, 783, 784, 806, 807, 764,
	765, 766, 767, 0, 0, 0, 447, 448, 449, 471,
	0, 433, 495, 613, 0, 0, 0, 0, 0, 0,
	0, 545, 557, 591, 0, 601, 602, 604, 606, 811,
	608, 410, 778, 619, 486, 487, 620, 597, 0, 728,
	0, 375, 0, 501, 534, 523, 607, 489, 0, 0,
	0, 0, 0, 0, 731, 0, 0, 0, 315, 0,
	0, 345, 538, 520, 530, 521, 506, 507, 508, 515,
	325, 509, 510, 511, 481, 512, 482, 513, 514, 769,
	537, 488, 406, 359, 555, 554, 0, 0, 836, 844,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 759, 813, 812, 746, 756, 0,
	0, 288, 210, 483, 603, 485, 484, 747, 0, 748,
	752, 755, 751, 749, 750, 0, 828, 0, 0, 0,
	0, 0, 0, 715, 727, 0, 732, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	724, 725, 0, 0, 0, 0, 779, 0, 726, 0,
	0, 774, 753, 757, 0, 0, 0, 0, 278, 412,
	429, 289, 402, 442, 294, 409, 284, 374, 398, 0,
	0, 280, 427, 408, 356, 335, 336, 279, 0, 393,
	313, 327, 310, 372, 754, 777, 781, 309, 850, 775,
	437, 282, 0, 436, 371, 423, 428, 357, 351, 281,
	425, 355, 350, 339, 317, 851, 340, 341, 331, 383,
	349, 384, 332, 361, 360, 362, 0, 0, 0, 0,
	0, 465, 466, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 596, 772, 0, 600, 0,
	439, 0, 0, 834, 0, 0, 0, 411, 0, 0,
	342, 0, 0, 0, 776, 0, 396, 377, 847, 0,
	0, 394, 347, 424, 385, 430, 413, 438, 390, 386,
	273, 414, 312, 358, 285, 287, 307, 314, 316, 318,
	319, 367, 368, 380, 401, 415, 416, 417, 311, 295,
	395, 296, 329, 297, 274, 303, 301, 304, 403, 305,
	276, 381, 421, 0, 324, 391, 354, 277, 353, 382,
	420, 419, 286, 446, 452, 453, 542, 0, 458, 623,
	624, 625, 467, 472, 473, 474, 476, 477, 478, 479,
	543, 560, 527, 497, 460, 551, 494, 498, 499, 563,
	0, 0, 0, 451, 343, 344, 0, 322, 270, 271,
	618, 832, 373, 565, 598, 599, 490, 0, 846, 827,
	829, 830, 833, 837, 838, 839, 840, 841, 843, 845,
	849, 617, 0, 544, 559, 621, 558, 614, 379, 0,
	400, 556, 503, 0, 548, 522, 0, 549, 518, 553,
	0, 492, 0, 407, 432, 444, 461, 464, 493, 578,
	579, 580, 275, 463, 582, 583, 584, 585, 586, 587,
	588, 581, 848, 525, 502, 528, 443, 505, 504, 0,
	0, 539, 780, 540, 541, 363, 364, 365, 366, 835,
	566, 293, 462, 389, 0, 526, 0, 0, 0, 0,
	0, 0, 0, 0, 531, 532, 529, 626, 0, 589,
	590, 0, 0, 456, 457, 321, 328, 475, 330, 292,
	378, 323, 441, 337, 0, 468, 533, 469, 592, 595,
	593, 594, 370, 333, 334, 404, 338, 348, 392, 440,
	376, 397, 290, 431, 405, 352, 519, 546, 857, 831,
	856, 858, 859, 855, 860, 861, 842, 736, 0, 787,
	853, 852, 854, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 574, 573, 572, 571, 570, 569,
	568, 567, 0, 0, 516, 418, 302, 264, 298, 299,
	306, 615, 612, 422, 616, 0, 272, 496, 346, 0,
	387, 320, 561, 562, 0, 0, 820, 794, 795, 796,
	733, 797, 791, 792, 734, 793, 821, 785, 817, 818,
	761, 788, 798, 816, 799, 819, 822, 823, 862, 863,
	805, 789, 236, 864, 802, 824, 815, 814, 800, 786,
	825, 826, 768, 763, 803, 804, 790, 808, 809, 810,
	735, 782, 783, 784, 806, 807, 764, 765, 766, 767,
	0, 0, 0, 447, 448, 449, 471, 0, 433, 495,
	613, 0, 0, 0, 0, 0, 0, 0, 545, 557,
	591, 0, 601, 602, 604, 606, 811, 608, 410, 0,
	619, 486, 487, 620, 597, 0, 728, 187, 57, 176,
	149, 0, 0, 0, 0, 0, 0, 375, 0, 501,
	534, 523, 607, 489, 0, 177, 0, 0, 0, 0,
	0, 0, 169, 0, 315, 0, 178, 345, 538, 520,
	530, 521, 506, 507, 508, 515, 325, 509, 510, 511,
	481, 512, 482, 513, 514, 125, 537, 488, 406, 359,
	555, 554, 0, 0, 0, 0, 0, 0, 0, 0,
	113, 0, 0, 0, 0, 0, 0, 181, 0, 0,
	209, 0, 0, 0, 0, 0, 0, 288, 210, 483,
	603, 485, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 291, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 201, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 278, 412, 429, 289, 402, 442,
	294, 409, 284, 374, 398, 0, 0, 280, 427, 408,
	356, 335, 336, 279, 0, 393, 313, 327, 310, 372,
	0, 426, 454, 309, 445, 0, 437, 282, 0, 436,
	371, 423, 428, 357, 351, 281, 425, 355, 350, 339,
	317, 470, 340, 341, 331, 383, 349, 384, 332, 361,
	360, 362, 0, 0, 0, 0, 0, 465, 466, 0,
	0, 0, 0, 0, 0, 148, 175, 185, 0, 111,
	0, 596, 0, 0, 600, 0, 439, 0, 0, 202,
	0, 0, 0, 411, 0, 0, 342, 174, 168, 167,
	455, 0, 396, 377, 214, 0, 0, 394, 347, 424,
	385, 430, 413, 438, 390, 386, 273, 414, 312, 358,
	285, 287, 307, 314, 316, 318, 319, 367, 368, 380,
	401, 415, 416, 417, 311, 295, 395, 296, 329, 297,
	274, 303, 301, 304, 403, 305, 276, 381, 421, 0,
	324, 391, 354, 277, 353, 382, 420, 419, 286, 446,
	452, 453, 542, 0, 458, 575, 576, 577, 467, 472,
	473, 474, 476, 477, 478, 479, 543, 560, 527, 497,
	460, 551, 494, 498, 499, 563, 0, 0, 0, 451,
	343, 344, 0, 322, 270, 271, 434, 308, 373, 565,
	598, 599, 490, 0, 552, 491, 500, 300, 524, 536,
	535, 369, 450, 205, 547, 550, 480, 215, 0, 544,
	559, 517, 558, 216, 379, 0, 400, 556, 503, 0,
	548, 522, 0, 549, 518, 553, 0, 492, 0, 407,
	432, 444, 461, 464, 493, 578, 579, 580, 275, 463,
	582, 583, 584, 585, 586, 587, 588, 581, 435, 525,
	502, 528, 443, 505, 504, 0, 0, 539, 459, 540,
	541, 363, 364, 365, 366, 326, 566, 293, 462, 389,
	123, 526, 0, 0, 0, 0, 0, 0, 0, 0,
	531, 532, 529, 213, 0, 589, 590, 0, 0, 456,
	457, 321, 328, 475, 330, 292, 378, 323, 441, 337,
	0, 468, 533, 469, 592, 595, 593, 594, 370, 333,
	334, 404, 338, 348, 392, 440, 376, 397, 290, 431,
	405, 352, 519, 546, 0, 0, 0, 0, 0, 0,
	0, 0, 58, 0, 0, 259, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	574, 573, 572, 571, 570, 569, 568, 567, 0, 0,
	516, 418, 302, 264, 298, 299, 306, 388, 283, 422,
	399, 0, 272, 496, 346, 150, 387, 320, 561, 562,
	54, 0, 220, 221, 222, 223, 224, 225, 226, 227,
	265, 228, 229, 230, 231, 232, 233, 234, 237, 238,
	239, 240, 241, 242, 243, 244, 564, 235, 236, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	256, 257, 258, 0, 0, 0, 266, 267, 268, 269,
	0, 0, 260, 261, 262, 263, 0, 0, 0, 447,
	448, 449, 471, 0, 433, 495, 217, 42, 203, 206,
	208, 207, 0, 55, 545, 557, 591, 5, 601, 602,
	604, 606, 605, 608, 410, 128, 218, 486, 487, 219,
	597, 187, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 375, 0, 501, 534, 523, 607, 489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 315, 0,
	0, 345, 538, 520, 530, 521, 506, 507, 508, 515,
	325, 509, 510, 511, 481, 512, 482, 513, 514, 125,
	537, 488, 406, 359, 555, 554, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 181, 0, 0, 209, 0, 0, 0, 0, 0,
	0, 288, 210, 483, 603, 485, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 291, 2302, 2305, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 278, 412,
	429, 289, 402, 442, 294, 409, 284, 374, 398, 0,
	0, 280, 427, 408, 356, 335, 336, 279, 0, 393,
	313, 327, 310, 372, 0, 426, 454, 309, 445, 0,
	437, 282, 0, 436, 371, 423, 428, 357, 351, 281,
	425, 355, 350, 339, 317, 470, 340, 341, 331, 383,
	349, 384, 332, 361, 360, 362, 0, 0, 0, 0,
	0, 465, 466, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 596, 0, 0, 600, 2306,
	439, 0, 0, 0, 2301, 0, 2300, 411, 2298, 2303,
	342, 0, 0, 0, 455, 0, 396, 377, 622, 0,
	0, 394, 347, 424, 385, 430, 413, 438, 390, 386,
	273, 414, 312, 358, 285, 287, 307, 314, 316, 318,
	319, 367, 368, 380, 401, 415, 416, 417, 311, 295,
	395, 296, 329, 297, 274, 303, 301, 304, 403, 305,
	276, 381, 421, 2304, 324, 391, 354, 277, 353, 382,
	420, 419, 286, 446, 452, 453, 542, 0, 458, 623,
	624, 625, 467, 472, 473, 474, 476, 477, 478, 479,
	543, 560, 527, 497, 460, 551, 494, 498, 499, 563,
	0, 0, 0, 451, 343, 344, 0, 322, 270, 271,
	618, 308, 373, 565, 598, 599, 490, 0, 552, 491,
	500, 300, 524, 536, 535, 369, 450, 0, 547, 550,
	480, 617, 0, 544, 559, 621, 558, 614, 379, 0,
	400, 556, 503, 0, 548, 522, 0, 549, 518, 553,
	0, 492, 0, 407, 432, 444, 461, 464, 493, 578,
	579, 580, 275, 463, 582, 583, 584, 585, 586, 587,
	588, 581, 435, 525, 502, 528, 443, 505, 504, 0,
	0, 539, 459, 540, 541, 363, 364, 365, 366, 326,
	566, 293, 462, 389, 0, 526, 0, 0, 0, 0,
	0, 0, 0, 0, 531, 532, 529, 626, 0, 589,
	590, 0, 0, 456, 457, 321, 328, 475, 330, 292,
	378, 323, 441, 337, 0, 468, 533, 469, 592, 595,
	593, 594, 370, 333, 334, 404, 338, 348, 392, 440,
	376, 397, 290, 431, 405, 352, 519, 546, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 259,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 574, 573, 572, 571, 570, 569,
	568, 567, 0, 0, 516, 418, 302, 264, 298, 299,
	306, 615, 612, 422, 616, 0, 272, 496, 346, 150,
	387, 320, 561, 562, 0, 0, 220, 221, 222, 223,
	224, 225, 226, 227, 265, 228, 229, 230, 231, 232,
	233, 234, 237, 238, 239, 240, 241, 242, 243, 244,
	564, 235, 236, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257, 258, 0, 0, 0,
	266, 267, 268, 269, 0, 0, 260, 261, 262, 263,
	0, 0, 0, 447, 448, 449, 471, 0, 433, 495,
	613, 0, 0, 0, 0, 0, 0, 0, 545, 557,
	591, 0, 601, 602, 604, 606, 605, 608, 410, 0,
	619, 486, 487, 620, 597, 375, 0, 501, 534, 523,
	607, 489, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 315, 0, 0, 345, 538, 520, 530, 521,
	506, 507, 508, 515, 325, 509, 510, 511, 481, 512,
	482, 513, 514, 0, 537, 488, 406, 359, 555, 554,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1266, 0, 0, 209, 0,
	0, 746, 756, 0, 0, 288, 210, 483, 603, 485,
	484, 747, 0, 748, 752, 755, 751, 749, 750, 0,
	291, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 753, 0, 0, 0,
	0, 0, 278, 412, 429, 289, 402, 442, 294, 409,
	284, 374, 398, 0, 0, 280, 427, 408, 356, 335,
	336, 279, 0, 393, 313, 327, 310, 372, 754, 426,
	454, 309, 445, 0, 437, 282, 0, 436, 371, 423,
	428, 357, 351, 281, 425, 355, 350, 339, 317, 470,
	340, 341, 331, 383, 349, 384, 332, 361, 360, 362,
	0, 0, 0, 0, 0, 465, 466, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 596,
	0, 0, 600, 0, 439, 0, 0, 0, 0, 0,
	0, 411, 0, 0, 342, 0, 0, 0, 455, 0,
	396, 377, 622, 0, 0, 394, 347, 424, 385, 430,
	413, 438, 390, 386, 273, 414, 312, 358, 285, 287,
	307, 314, 316, 318, 319, 367, 368, 380, 401, 415,
	416, 417, 311, 295, 395, 296, 329, 297, 274, 303,
	301, 304, 403, 305, 276, 381, 421, 0, 324, 391,
	354, 277, 353, 382, 420, 419, 286, 446, 452, 453,
	542, 0, 458, 623, 624, 625, 467, 472, 473, 474,
	476, 477, 478, 479, 543, 560, 527, 497, 460, 551,
	494, 498, 499, 563, 0, 0, 0, 451, 343, 344,
	0, 322, 270, 271, 618, 308, 373, 565, 598, 599,
	490, 0, 552, 491, 500, 300, 524, 536, 535, 369,
	450, 0, 547, 550, 480, 617, 0, 544, 559, 621,
	558, 614, 379, 0, 400, 556, 503, 0, 548, 522,
	0, 549, 518, 553, 0, 492, 0, 407, 432, 444,
	461, 464, 493, 578, 579, 580, 275, 463, 582, 583,
	584, 585, 586, 587, 588, 581, 435, 525, 502, 528,
	443, 505, 504, 0, 0, 539, 459, 540, 541, 363,
	364, 365, 366, 326, 566, 293, 462, 389, 0, 526,
	0, 0, 0, 0, 0, 0, 0, 0, 531, 532,
	529, 626, 0, 589, 590, 0, 0, 456, 457, 321,
	328, 475, 330, 292, 378, 323, 441, 337, 0, 468,
	533, 469, 592, 595, 593, 594, 370, 333, 334, 404,
	338, 348, 392, 440, 376, 397, 290, 431, 405, 352,
	519, 546, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 259, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 574, 573,
	572, 571, 570, 569, 568, 567, 0, 0, 516, 418,
	302, 264, 298, 299, 306, 615, 612, 422, 616, 0,
	272, 496, 346, 0, 387, 320, 561, 562, 0, 0,
	220, 221, 222, 223, 224, 225, 226, 227, 265, 228,
	229, 230, 231, 232, 233, 234, 237, 238, 239, 240,
	241, 242, 243, 244, 564, 235, 236, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 255, 256, 257,
	258, 0, 0, 0, 266, 267, 268, 269, 0, 0,
	260, 261, 262, 263, 0, 0, 0, 447, 448, 449,
	471, 0, 433, 495, 613, 0, 0, 0, 0, 0,
	0, 0, 545, 557, 591, 0, 601, 602, 604, 606,
	605, 608, 410, 0, 619, 486, 487, 620, 597, 187,
	57, 176, 149, 0, 0, 0, 0, 0, 0, 375,
	645, 501, 534, 523, 607, 489, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 315, 0, 0, 345,
	538, 520, 530, 521, 506, 507, 508, 515, 325, 509,
	510, 511, 481, 512, 482, 513, 514, 0, 537, 488,
	406, 359, 555, 554, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 651, 0, 0, 0, 0, 0, 650,
	0, 0, 209, 0, 0, 0, 0, 0, 0, 288,
	210, 483, 603, 485, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 291, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 278, 412, 429, 289,
	402, 442, 294, 409, 284, 374, 398, 0, 0, 280,
	427, 408, 356, 335, 336, 279, 0, 393, 313, 327,
	310, 372, 0, 426, 454, 309, 445, 0, 437, 282,
	0, 436, 371, 423, 428, 357, 351, 281, 425, 355,
	350, 339, 317, 470, 340, 341, 331, 383, 349, 384,
	332, 361, 360, 362, 0, 0, 0, 0, 0, 465,
	466, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 649, 0, 596, 0, 0, 600, 0, 439, 0,
	0, 0, 0, 0, 0, 411, 0, 0, 342, 0,
	0, 0, 455, 0, 396, 377, 622, 0, 0, 394,
	347, 424, 385, 430, 413, 438, 390, 386, 273, 414,
	312, 358, 285, 287, 307, 314, 316, 318, 319, 367,
	368, 380, 401, 415, 416, 417, 311, 295, 395, 296,
	329, 297, 274, 303, 301, 304, 403, 305, 276, 381,
	421, 0, 324, 391, 354, 277, 353, 382, 420, 419,
	286, 446, 452, 453, 542, 0, 458, 623, 624, 625,
	467, 472, 473, 474, 476, 477, 478, 479, 543, 560,
	527, 497, 460, 551, 494, 498, 499, 563, 0, 0,
	0, 451, 343, 344, 0, 322, 270, 271, 618, 308,
	373, 565, 598, 599, 490, 0, 552, 491, 500, 300,
	524, 536, 535, 369, 450, 0, 547, 550, 480, 617,
	0, 544, 559, 621, 558, 614, 379, 0, 400, 556,
	503, 0, 548, 522, 0, 549, 518, 553, 0, 492,
	0, 407, 432, 444, 461, 464, 493, 578, 579, 580,
	275, 463, 582, 583, 584, 585, 586, 587, 588, 581,
	435, 525, 502, 528, 443, 505, 504, 0, 0, 539,
	459, 540, 541, 363, 364, 365, 366, 646, 648, 293,
	462, 389, 659, 526, 0, 0, 0, 0, 0, 0,
	0, 0, 531, 532, 529, 626, 0, 589, 590, 0,
	0, 456, 457, 321, 328, 475, 330, 292, 378, 323,
	441, 337, 0, 468, 533, 469, 592, 595, 593, 594,
	370, 333, 334, 404, 338, 348, 392, 440, 376, 397,
	290, 431, 405, 352, 519, 546, 0, 0, 0, 0,
	0, 0, 0, 0, 58, 0, 0, 259, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 574, 573, 572, 571, 570, 569, 568, 567,
	0, 0, 516, 418, 302, 264, 298, 299, 306, 615,
	612, 422, 616, 0, 272, 496, 346, 150, 387, 320,
	561, 562, 0, 0, 220, 221, 222, 223, 224, 225,
	226, 227, 265, 228, 229, 230, 231, 232, 233, 234,
	237, 238, 239, 240, 241, 242, 243, 244, 564, 235,
	236, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 256, 257, 258, 0, 0, 0, 266, 267,
	268, 269, 0, 0, 260, 261, 262, 263, 0, 0,
	0, 447, 448, 449, 471, 0, 433, 495, 613, 0,
	0, 0, 0, 0, 0, 0, 545, 557, 591, 0,
	601, 602, 604, 606, 605, 608, 410, 0, 619, 486,
	487, 620, 597, 375, 0, 501, 534, 523, 607, 489,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	315, 0, 0, 345, 538, 520, 530, 521, 506, 507,
	508, 515, 325, 509, 510, 511, 481, 512, 482, 513,
	514, 0, 537, 488, 406, 359, 555, 554, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 209, 0, 0, 0,
	0, 0, 0, 288, 210, 483, 603, 485, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 291, 2302,
	2305, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	278, 412, 429, 289, 402, 442, 294, 409, 284, 374,
	398, 0, 0, 280, 427, 408, 356, 335, 336, 279,
	0, 393, 313, 327, 310, 372, 0, 426, 454, 309,
	445, 0, 437, 282, 0, 436, 371, 423, 428, 357,
	351, 281, 425, 355, 350, 339, 317, 470, 340, 341,
	331, 383, 349, 384, 332, 361, 360, 362, 0, 0,
	0, 0, 0, 465, 466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 596, 0, 0,
	600, 2306, 439, 0, 0, 0, 2301, 0, 2300, 411,
	2298, 2303, 342, 0, 0, 0, 455, 0, 396, 377,
	622, 0, 0, 394, 347, 424, 385, 430, 413, 438,
	390, 386, 273, 414, 312, 358, 285, 287, 307, 314,
	316, 318, 319, 367, 368, 380, 401, 415, 416, 417,
	311, 295, 395, 296, 329, 297, 274, 303, 301, 304,
	403, 305, 276, 381, 421, 2304, 324, 391, 354, 277,
	353, 382, 420, 419, 286, 446, 452, 453, 542, 0,
	458, 623, 624, 625, 467, 472, 473, 474, 476, 477,
	478, 479, 543, 560, 527, 497, 460, 551, 494, 498,
	499, 563, 0, 0, 0, 451, 343, 344, 0, 322,
	270, 271, 618, 308, 373, 565, 598, 599, 490, 0,
	552, 491, 500, 300, 524, 536, 535, 369, 450, 0,
	547, 550, 480, 617, 0, 544, 559, 621, 558, 614,
	379, 0, 400, 556, 503, 0, 548, 522, 0, 549,
	518, 553, 0, 492, 0, 407, 432, 444, 461, 464,
	493, 578, 579, 580, 275, 463, 582, 583, 584, 585,
	586, 587, 588, 581, 435, 525, 502, 528, 443, 505,
	504, 0, 0, 539, 459, 540, 541, 363, 364, 365,
	366, 326, 566, 293, 462, 389, 0, 526, 0, 0,
	0, 0, 0, 0, 0, 0, 531, 532, 529, 626,
	0, 589, 590, 0, 0, 456, 457, 321, 328, 475,
	330, 292, 378, 323, 441, 337, 0, 468, 533, 469,
	592, 595, 593, 594, 370, 333, 334, 404, 338, 348,
	392, 440, 376, 397, 290, 431, 405, 352, 519, 546,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 259, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 574, 573, 572, 571,
	570, 569, 568, 567, 0, 0, 516, 418, 302, 264,
	298, 299, 306, 615, 612, 422, 616, 0, 272, 496,
	346, 0, 387, 320, 561, 562, 0, 0, 220, 221,
	222, 223, 224, 225, 226, 227, 265, 228, 229, 230,
	231, 232, 233, 234, 237, 238, 239, 240, 241, 242,
	243, 244, 564, 235, 236, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 254, 255, 256, 257, 258, 0,
	0, 0, 266, 267, 268, 269, 0, 0, 260, 261,
	262, 263, 0, 0, 0, 447, 448, 449, 471, 0,
	433, 495, 613, 0, 0, 0, 0, 0, 0, 0,
	545, 557, 591, 0, 601, 602, 604, 606, 605, 608,
	410, 0, 619, 486, 487, 620, 597, 375, 0, 501,
	534, 523, 607, 489, 0, 1079, 0, 0, 0, 0,
	0, 0, 0, 0, 315, 0, 0, 345, 538, 520,
	530, 521, 506, 507, 508, 515, 325, 509, 510, 511,
	481, 512, 482, 513, 514, 0, 537, 488, 406, 359,
	555, 554, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	209, 0, 0, 0, 0, 0, 0, 288, 210, 483,
	603, 485, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 291, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1065, 0, 0,
	0, 0, 0, 0, 278, 412, 429, 289, 402, 442,
	294, 409, 284, 374, 398, 0, 0, 2454, 2457, 2458,
	2459, 2460, 2461, 2462, 0, 2467, 2463, 2464, 2465, 2466,
	0, 2449, 2450, 2451, 2452, 1063, 2433, 2455, 0, 2434,
	371, 2435, 2436, 2437, 2438, 2439, 2440, 2441, 2442, 2443,
	2446, 2447, 2444, 2445, 2453, 383, 349, 384, 332, 361,
	360, 362, 1090, 1092, 1094, 1096, 1099, 465, 466, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 596, 0, 0, 600, 0, 439, 0, 0, 0,
	0, 0, 0, 411, 0, 0, 342, 0, 0, 0,
	2448, 0, 396, 377, 622, 0, 0, 394, 347, 424,
	385, 430, 413, 438, 390, 386, 273, 414, 312, 358,
	285, 287, 307, 314, 316, 318, 319, 367, 368, 380,
	401, 415, 416, 417, 311, 295, 395, 296, 329, 297,
	274, 303, 301, 304, 403, 305, 276, 381, 421, 0,
	324, 391, 354, 277, 353, 382, 420, 419, 286, 446,
	452, 453, 542, 0, 458, 623, 624, 625, 467, 472,
	473, 474, 476, 477, 478, 479, 543, 560, 527, 497,
	460, 551, 494, 498, 499, 563, 0, 0, 0, 451,
	343, 344, 0, 322, 270, 271, 618, 308, 373, 565,
	598, 599, 490, 0, 552, 491, 500, 300, 524, 536,
	535, 369, 450, 0, 547, 550, 480, 617, 0, 544,
	559, 621, 558, 614, 379, 0, 400, 556, 503, 0,
	548, 522, 0, 549, 518, 553, 0, 492, 0, 407,
	432, 444, 461, 464, 493, 578, 579, 580, 275, 463,
	582, 583, 584, 585, 586, 587, 588, 581, 435, 525,
	502, 528, 443, 505, 504, 0, 0, 539, 459, 540,
	541, 363, 364, 365, 366, 326, 566, 293, 462, 389,
	0, 526, 0, 0, 0, 0, 0, 0, 0, 0,
	531, 532, 529, 626, 0, 589, 590, 0, 0, 456,
	457, 321, 328, 475, 330, 292, 378, 323, 441, 337,
	0, 468, 533, 469, 592, 595, 593, 594, 370, 333,
	334, 404, 338, 348, 392, 440, 376, 397, 290, 431,
	405, 352, 519, 546, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 259, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	574, 573, 572, 571, 570, 569, 568, 567, 0, 0,
	516, 418, 302, 264, 298, 299, 306, 615, 612, 422,
	616, 0, 272, 2456, 346, 0, 387, 320, 561, 562,
	0, 0, 220, 221, 222, 223, 224, 225, 226, 227,
	265, 228, 229, 230, 231, 232, 233, 234, 237, 238,
	239, 240, 241, 242, 243, 244, 564, 235, 236, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	256, 257, 258, 0, 0, 0, 266, 267, 268, 269,
	0, 0, 260, 261, 262, 263, 0, 0, 0, 447,
	448, 449, 471, 0, 433, 495, 613, 0, 0, 0,
	0, 0, 0, 0, 545, 557, 591, 0, 601, 602,
	604, 606, 605, 608, 410, 0, 619, 486, 487, 620,
	597, 375, 0, 501, 534, 523, 607, 489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 315, 0,
	0, 345, 538, 520, 530, 521, 506, 507, 508, 515,
	325, 509, 510, 511, 481, 512, 482, 513, 514, 0,
	537, 488, 406, 359, 555, 554, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 209, 0, 0, 0, 0, 0,
	0, 288, 210, 483, 603, 485, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 291, 0, 2323, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 278, 412,
	429, 289, 402, 442, 294, 409, 284, 374, 398, 0,
	0, 280, 427, 408, 356, 335, 336, 279, 0, 393,
	313, 327, 310, 372, 0, 426, 454, 309, 445, 0,
	437, 282, 0, 436, 371, 423, 428, 357, 351, 281,
	425, 355, 350, 339, 317, 470, 340, 341, 331, 383,
	349, 384, 332, 361, 360, 362, 0, 0, 0, 0,
	0, 465, 466, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 596, 0, 0, 600, 2322,
	439, 0, 0, 0, 2328, 2325, 2327, 411, 0, 2326,
	342, 0, 0, 0, 455, 0, 396, 377, 622, 0,
	2320, 394, 347, 424, 385, 430, 413, 438, 390, 386,
	273, 414, 312, 358, 285, 287, 307, 314, 316, 318,
	319, 367, 368, 380, 401, 415, 416, 417, 311, 295,
	395, 296, 329, 297, 274, 303, 301, 304, 403, 305,
	276, 381, 421, 0, 324, 391, 354, 277, 353, 382,
	420, 419, 286, 446, 452, 453, 542, 0, 458, 623,
	624, 625, 467, 472, 473, 474, 476, 477, 478, 479,
	543, 560, 527, 497, 460, 551, 494, 498, 499, 563,
	0, 0, 0, 451, 343, 344, 0, 322, 270, 271,
	618, 308, 373, 565, 598, 599, 490, 0, 552, 491,
	500, 300, 524, 536, 535, 369, 450, 0, 547, 550,
	480, 617, 0, 544, 559, 621, 558, 614, 379, 0,
	400, 556, 503, 0, 548, 522, 0, 549, 518, 553,
	0, 492, 0, 407, 432, 444, 461, 464, 493, 578,
	579, 580, 275, 463, 582, 583, 584, 585, 586, 587,
	588, 581, 435, 525, 502, 528, 443, 505, 504, 0,
	0, 539, 459, 540, 541, 363, 364, 365, 366, 326,
	566, 293, 462, 389, 0, 526, 0, 0, 0, 0,
	0, 0, 0, 0, 531, 532, 529, 626, 0, 589,
	590, 0, 0, 456, 457, 321, 328, 475, 330, 292,
	378, 323, 441, 337, 0, 468, 533, 469, 592, 595,
	593, 594, 370, 333, 334, 404, 338, 348, 392, 440,
	376, 397, 290, 431, 405, 352, 519, 546, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 259,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 574, 573, 572, 571, 570, 569,
	568, 567, 0, 0, 516, 418, 302, 264, 298, 299,
	306, 615, 612, 422, 616, 0, 272, 496, 346, 0,
	387, 320, 561, 562, 0, 0, 220, 221, 222, 223,
	224, 225, 226, 227, 265, 228, 229, 230, 231, 232,
	233, 234, 237, 238, 239, 240, 241, 242, 243, 244,
	564, 235, 236, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257, 258, 0, 0, 0,
	266, 267, 268, 269, 0, 0, 260, 261, 262, 263,
	0, 0, 0, 447, 448, 449, 471, 0, 433, 495,
	613, 0, 0, 0, 0, 0, 0, 0, 545, 557,
	591, 0, 601, 602, 604, 606, 605, 608, 410, 0,
	619, 486, 487, 620, 597, 375, 0, 501, 534, 523,
	607, 489, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 315, 0, 0, 345, 538, 520, 530, 521,
	506, 507, 508, 515, 325, 509, 510, 511, 481, 512,
	482, 513, 514, 0, 537, 488, 406, 359, 555, 554,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 209, 0,
	0, 0, 0, 0, 0, 288, 210, 483, 603, 485,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	291, 0, 2323, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 278, 412, 429, 289, 402, 442, 294, 409,
	284, 374, 398, 0, 0, 280, 427, 408, 356, 335,
	336, 279, 0, 393, 313, 327, 310, 372, 0, 426,
	454, 309, 445, 0, 437, 282, 0, 436, 371, 423,
	428, 357, 351, 281, 425, 355, 350, 339, 317, 470,
	340, 341, 331, 383, 349, 384, 332, 361, 360, 362,
	0, 0, 0, 0, 0, 465, 466, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 596,
	0, 0, 600, 2322, 439, 0, 0, 0, 2328, 2325,
	2327, 411, 0, 2326, 342, 0, 0, 0, 455, 0,
	396, 377, 622, 0, 0, 394, 347, 424, 385, 430,
	413, 438, 390, 386, 273, 414, 312, 358, 285, 287,
	307, 314, 316, 318, 319, 367, 368, 380, 401, 415,
	416, 417, 311, 295, 395, 296, 329, 297, 274, 303,
	301, 304, 403, 305, 276, 381, 421, 0, 324, 391,
	354, 277, 353, 382, 420, 419, 286, 446, 452, 453,
	542, 0, 458, 623, 624, 625, 467, 472, 473, 474,
	476, 477, 478, 479, 543, 560, 527, 497, 460, 551,
	494, 498, 499, 563, 0, 0, 0, 451, 343, 344,
	0, 322, 270, 271, 618, 308, 373, 565, 598, 599,
	490, 0, 552, 491, 500, 300, 524, 536, 535, 369,
	450, 0, 547, 550, 480, 617, 0, 544, 559, 621,
	558, 614, 379, 0, 400, 556, 503, 0, 548, 522,
	0, 549, 518, 553, 0, 492, 0, 407, 432, 444,
	461, 464, 493, 578, 579, 580, 275, 463, 582, 583,
	584, 585, 586, 587, 588, 581, 435, 525, 502, 528,
	443, 505, 504, 0, 0, 539, 459, 540, 541, 363,
	364, 365, 366, 326, 566, 293, 462, 389, 0, 526,
	0, 0, 0, 0, 0, 0, 0, 0, 531, 532,
	529, 626, 0, 589, 590, 0, 0, 456, 457, 321,
	328, 475, 330, 292, 378, 323, 441, 337, 0, 468,
	533, 469, 592, 595, 593, 594, 370, 333, 334, 404,
	338, 348, 392, 440, 376, 397, 290, 431, 405, 352,
	519, 546, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 259, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 574, 573,
	572, 571, 570, 569, 568, 567, 0, 0, 516, 418,
	302, 264, 298, 299, 306, 615, 612, 422, 616, 0,
	272, 496, 346, 0, 387, 320, 561, 562, 0, 0,
	220, 221, 222, 223, 224, 225, 226, 227, 265, 228,
	229, 230, 231, 232, 233, 234, 237, 238, 239, 240,
	241, 242, 243, 244, 564, 235, 236, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 255, 256, 257,
	258, 0, 0, 0, 266, 267, 268, 269, 0, 0,
	260, 261, 262, 263, 0, 0, 0, 447, 448, 449,
	471, 0, 433, 495, 613, 0, 0, 0, 0, 0,
	0, 0, 545, 557, 591, 0, 601, 602, 604, 606,
	605, 608, 410, 0, 619, 486, 487, 620, 597, 375,
	0, 501, 534, 523, 607, 489, 0, 0, 0, 0,
	0, 2025, 0, 0, 0, 0, 315, 0, 0, 345,
	538, 520, 530, 521, 506, 507, 508, 515, 325, 509,
	510, 511, 481, 512, 482, 513, 514, 0, 537, 488,
	406, 359, 555, 554, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 209, 0, 0, 2026, 0, 0, 0, 288,
	210, 483, 603, 485, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 291, 0, 0, 1196, 1197, 1198,
	1195, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 278, 412, 429, 289,
	402, 442, 294, 409, 284, 374, 398, 0, 0, 280,
	427, 408, 356, 335, 336, 279, 0, 393, 313, 327,
	310, 372, 0, 426, 454, 309, 445, 0, 437, 282,
	0, 436, 371, 423, 428, 357, 351, 281, 425, 355,
	350, 339, 317, 470, 340, 341, 331, 383, 349, 384,
	332, 361, 360, 362, 0, 0, 0, 0, 0, 465,
	466, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 596, 0, 0, 600, 0, 439, 0,
	0, 0, 0, 0, 0, 411, 0, 0, 342, 0,
	0, 0, 455, 0, 396, 377, 622, 0, 0, 394,
	347, 424, 385, 430, 413, 438, 390, 386, 273, 414,
	312, 358, 285, 287, 307, 314, 316, 318, 319, 367,
	368, 380, 401, 415, 416, 417, 311, 295, 395, 296,
	329, 297, 274, 303, 301, 304, 403, 305, 276, 381,
	421, 0, 324, 391, 354, 277, 353, 382, 420, 419,
	286, 446, 452, 453, 542, 0, 458, 623, 624, 625,
	467, 472, 473, 474, 476, 477, 478, 479, 543, 560,
	527, 497, 460, 551, 494, 498, 499, 563, 0, 0,
	0, 451, 343, 344, 0, 322, 270, 271, 618, 308,
	373, 565, 598, 599, 490, 0, 552, 491, 500, 300,
	524, 536, 535, 369, 450, 0, 547, 550, 480, 617,
	0, 544, 559, 621, 558, 614, 379, 0, 400, 556,
	503, 0, 548, 522, 0, 549, 518, 553, 0, 492,
	0, 407, 432, 444, 461, 464, 493, 578, 579, 580,
	275, 463, 582, 583, 584, 585, 586, 587, 588, 581,
	435, 525, 502, 528, 443, 505, 504, 0, 0, 539,
	459, 540, 541, 363, 364, 365, 366, 326, 566, 293,
	462, 389, 0, 526, 0, 0, 0, 0, 0, 0,
	0, 0, 531, 532, 529, 626, 0, 589, 590, 0,
	0, 456, 457, 321, 328, 475, 330, 292, 378, 323,
	441, 337, 0, 468, 533, 469, 592, 595, 593, 594,
	370, 333, 334, 404, 338, 348, 392, 440, 376, 397,
	290, 431, 405, 352, 519, 546, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 259, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 574, 573, 572, 571, 570, 569, 568, 567,
	0, 0, 516, 418, 302, 264, 298, 299, 306, 615,
	612, 422, 616, 0, 272, 496, 346, 0, 387, 320,
	561, 562, 0, 0, 220, 221, 222, 223, 224, 225,
	226, 227, 265, 228, 229, 230, 231, 232, 233, 234,
	237, 238, 239, 240, 241, 242, 243, 244, 564, 235,
	236, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 256, 257, 258, 0, 0, 0, 266, 267,
	268, 269, 0, 0, 260, 261, 262, 263, 0, 0,
	0, 447, 448, 449, 471, 0, 433, 495, 613, 0,
	0, 0, 0, 0, 0, 0, 545, 557, 591, 0,
	601, 602, 604, 606, 605, 608, 410, 187, 619, 486,
	487, 620, 597, 0, 0, 0, 0, 375, 0, 501,
	534, 523, 607, 489, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 315, 0, 0, 345, 538, 520,
	530, 521, 506, 507, 508, 515, 325, 509, 510, 511,
	481, 512, 482, 513, 514, 125, 537, 488, 406, 359,
	555, 554, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 181, 2075, 0,
	209, 0, 0, 0, 0, 0, 0, 288, 210, 483,
	603, 485, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 291, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 278, 412, 429, 289, 402, 442,
	294, 409, 284, 374, 398, 0, 0, 280, 427, 408,
	356, 335, 336, 279, 0, 393, 313, 327, 310, 372,
	0, 426, 454, 309, 445, 0, 437, 282, 0, 436,
	371, 423, 428, 357, 351, 281, 425, 355, 350, 339,
	317, 470, 340, 341, 331, 383, 349, 384, 332, 361,
	360, 362, 0, 0, 0, 0, 0, 465, 466, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 596, 0, 0, 600, 0, 439, 0, 0, 0,
	0, 0, 0, 411, 0, 0, 342, 0, 0, 0,
	455, 0, 396, 377, 622, 0, 0, 394, 347, 424,
	385, 430, 413, 438, 390, 386, 273, 414, 312, 358,
	285, 287, 307, 314, 316, 318, 319, 367, 368, 380,
	401, 415, 416, 417, 311, 295, 395, 296, 329, 297,
	274, 303, 301, 304, 403, 305, 276, 381, 421, 0,
	324, 391, 354, 277, 353, 382, 420, 419, 286, 446,
	452, 453, 542, 0, 458, 623, 624, 625, 467, 472,
	473, 474, 476, 477, 478, 479, 543, 560, 527, 497,
	460, 551, 494, 498, 499, 563, 0, 0, 0, 451,
	343, 344, 0, 322, 270, 271, 618, 308, 373, 565,
	598, 599, 490, 0, 552, 491, 500, 300, 524, 536,
	535, 369, 450, 0, 547, 550, 480, 617, 0, 544,
	559, 621, 558, 614, 379, 0, 400, 556, 503, 0,
	548, 522, 0, 549, 518, 553, 0, 492, 0, 407,
	432, 444, 461, 464, 493, 578, 579, 580, 275, 463,
	582, 583, 584, 585, 586, 587, 588, 581, 435, 525,
	502, 528, 443, 505, 504, 0, 0, 539, 459, 540,
	541, 363, 364, 365, 366, 326, 566, 293, 462, 389,
	0, 526, 0, 0, 0, 0, 0, 0, 0, 0,
	531, 532, 529, 626, 0, 589, 590, 0, 0, 456,
	457, 321, 328, 475, 330, 292, 378, 323, 441, 337,
	0, 468, 533, 469, 592, 595, 593, 594, 370, 333,
	334, 404, 338, 348, 392, 440, 376, 397, 290, 431,
	405, 352, 519, 546, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 259, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	574, 573, 572, 571, 570, 569, 568, 567, 0, 0,
	516, 418, 302, 264, 298, 299, 306, 615, 612, 422,
	616, 0, 272, 496, 346, 150, 387, 320, 561, 562,
	0, 0, 220, 221, 222, 223, 224, 225, 226, 227,
	265, 228, 229, 230, 231, 232, 233, 234, 237, 238,
	239, 240, 241, 242, 243, 244, 564, 235, 236, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	256, 257, 258, 0, 0, 0, 266, 267, 268, 269,
	0, 0, 260, 261, 262, 263, 0, 0, 0, 447,
	448, 449, 471, 0, 433, 495, 613, 0, 0, 0,
	0, 0, 0, 0, 545, 557, 591, 0, 601, 602,
	604, 606, 605, 608, 410, 187, 619, 486, 487, 620,
	597, 0, 0, 0, 0, 375, 0, 501, 534, 523,
	607, 489, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 315, 0, 0, 345, 538, 520, 530, 521,
	506, 507, 508, 515, 325, 509, 510, 511, 481, 512,
	482, 513, 514, 125, 537, 488, 406, 359, 555, 554,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 181, 2061, 0, 209, 0,
	0, 0, 0, 0, 0, 288, 210, 483, 603, 485,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	291, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 278, 412, 429, 289, 402, 442, 294, 409,
	284, 374, 398, 0, 0, 280, 427, 408, 356, 335,
	336, 279, 0, 393, 313, 327, 310, 372, 0, 426,
	454, 309, 445, 0, 437, 282, 0, 436, 371, 423,
	428, 357, 351, 281, 425, 355, 350, 339, 317, 470,
	340, 341, 331, 383, 349, 384, 332, 361, 360, 362,
	0, 0, 0, 0, 0, 465, 466, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 596,
	0, 0, 600, 0, 439, 0, 0, 0, 0, 0,
	0, 411, 0, 0, 342, 0, 0, 0, 455, 0,
	396, 377, 622, 0, 0, 394, 347, 424, 385, 430,
	413, 438, 390, 386, 273, 414, 312, 358, 285, 287,
	307, 314, 316, 318, 319, 367, 368, 380, 401, 415,
	416, 417, 311, 295, 395, 296, 329, 297, 274, 303,
	301, 304, 403, 305, 276, 381, 421, 0, 324, 391,
	354, 277, 353, 382, 420, 419, 286, 446, 452, 453,
	542, 0, 458, 623, 624, 625, 467, 472, 473, 474,
	476, 477, 478, 479, 543, 560, 527, 497, 460, 551,
	494, 498, 499, 563, 0, 0, 0, 451, 343, 344,
	0, 322, 270, 271, 618, 308, 373, 565, 598, 599,
	490, 0, 552, 491, 500, 300, 524, 536, 535, 369,
	450, 0, 547, 550, 480, 617, 0, 544, 559, 621,
	558, 614, 379, 0, 400, 556, 503, 0, 548, 522,
	0, 549, 518, 553, 0, 492, 0, 407, 432, 444,
	461, 464, 493, 578, 579, 580, 275, 463, 582, 583,
	584, 585, 586, 587, 588, 581, 435, 525, 502, 528,
	443, 505, 504, 0, 0, 539, 459, 540, 541, 363,
	364, 365, 366, 326, 566, 293, 462, 389, 0, 526,
	0, 0, 0, 0, 0, 0, 0, 0, 531, 532,
	529, 626, 0, 589, 590, 0, 0, 456, 457, 321,
	328, 475, 330, 292, 378, 323, 441, 337, 0, 468,
	533, 469, 592, 595, 593, 594, 370, 333, 334, 404,
	338, 348, 392, 440, 376, 397, 290, 431, 405, 352,
	519, 546, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 259, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 574, 573,
	572, 571, 570, 569, 568, 567, 0, 0, 516, 418,
	302, 264, 298, 299, 306, 615, 612, 422, 616, 0,
	272, 496, 346, 150, 387, 320, 561, 562, 0, 0,
	220, 221, 222, 223, 224, 225, 226, 227, 265, 228,
	229, 230, 231, 232, 233, 234, 237, 238, 239, 240,
	241, 242, 243, 244, 564, 235, 236, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 255, 256, 257,
	258, 0, 0, 0, 266, 267, 268, 269, 0, 0,
	260, 261, 262, 263, 0, 0, 0, 447, 448, 449,
	471, 0, 433, 495, 613, 0, 0, 0, 0, 0,
	0, 0, 545, 557, 591, 0, 601, 602, 604, 606,
	605, 608, 410, 0, 619, 486, 487, 620, 597, 375,
	0, 501, 534, 523, 607, 489, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 315, 994, 0, 345,
	538, 520, 530, 521, 506, 507, 508, 515, 325, 509,
	510, 511, 481, 512, 482, 513, 514, 0, 537, 488,
	406, 359, 555, 554, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 209, 1001, 1002, 0, 0, 0, 0, 288,
	210, 483, 603, 485, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1005, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 278, 412, 989, 289,
	402, 442, 294, 409, 284, 374, 398, 0, 0, 280,
	427, 408, 356, 335, 336, 279, 0, 393, 313, 327,
	310, 372, 0, 426, 454, 309, 445, 978, 437, 282,
	977, 436, 371, 423, 428, 357, 351, 281, 425, 355,
	350, 339, 317, 470, 340, 341, 331, 383, 349, 384,
	332, 361, 360, 362, 0, 0, 0, 0, 0, 465,
	466, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 596, 0, 0, 600, 0, 439, 0,
	0, 0, 0, 0, 0, 411, 0, 0, 342, 0,
	0, 0, 455, 0, 396, 377, 622, 0, 0, 394,
	347, 424, 385, 430, 413, 438, 992, 386, 273, 414,
	312, 358, 285, 287, 307, 314, 316, 318, 319, 367,
	368, 380, 401, 415, 416, 417, 311, 295, 395, 296,
	329, 297, 274, 303, 301, 304, 403, 305, 276, 381,
	421, 0, 324, 391, 354, 277, 353, 382, 420, 419,
	286, 446, 452, 453, 542, 0, 458, 623, 624, 625,
	467, 472, 473, 474, 476, 477, 478, 479, 543, 560,
	527, 497, 460, 551, 494, 498, 499, 563, 0, 0,
	0, 451, 343, 344, 0, 322, 270, 271, 618, 308,
	373, 565, 598, 599, 490, 0, 552, 491, 500, 300,
	524, 536, 535, 369, 450, 0, 547, 550, 480, 617,
	0, 544, 559, 621, 558, 614, 379, 0, 400, 556,
	503, 0, 548, 522, 0, 549, 518, 553, 0, 492,
	0, 407, 432, 444, 461, 464, 493, 578, 579, 580,
	275, 463, 582, 583, 584, 585, 586, 587, 993, 581,
	435, 525, 502, 528, 443, 505, 504, 0, 0, 539,
	996, 540, 541, 363, 364, 365, 366, 326, 566, 293,
	462, 389, 0, 526, 0, 0, 0, 0, 0, 0,
	0, 0, 531, 532, 529, 626, 0, 589, 590, 0,
	0, 456, 457, 321, 328, 475, 330, 292, 378, 323,
	441, 337, 0, 468, 533, 469, 592, 595, 593, 594,
	1003, 990, 999, 991, 338, 348, 392, 440, 376, 397,
	290, 431, 405, 1000, 519, 546, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 259, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 574, 573, 572, 571, 570, 569, 568, 567,
	0, 0, 516, 418, 302, 264, 298, 299, 306, 615,
	612, 422, 616, 0, 272, 496, 346, 0, 387, 320,
	561, 562, 0, 0, 220, 221, 222, 223, 224, 225,
	226, 227, 265, 228, 229, 230, 231, 232, 233, 234,
	237, 238, 239, 240, 241, 242, 243, 244, 564, 235,
	236, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 256, 257, 258, 0, 0, 0, 266, 267,
	268, 269, 0, 0, 260, 261, 262, 263, 0, 0,
	0, 447, 448, 449, 471, 0, 433, 495, 613, 0,
	0, 0, 0, 0, 0, 0, 545, 557, 591, 0,
	601, 602, 604, 606, 605, 608, 410, 187, 619, 486,
	487, 620, 597, 0, 0, 0, 0, 375, 0, 501,
	534, 523, 607, 489, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 315, 0, 0, 345, 538, 520,
	530, 521, 506, 507, 508, 515, 325, 509, 510, 511,
	481, 512, 482, 513, 514, 125, 537, 488, 406, 359,
	555, 554, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1957, 0, 0,
	209, 0, 0, 0, 0, 0, 0, 288, 210, 483,
	603, 485, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 291, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 278, 412, 429, 289, 402, 442,
	294, 409, 284, 374, 398, 0, 0, 280, 427, 408,
	356, 335, 336, 279, 0, 393, 313, 327, 310, 372,
	0, 426, 454, 309, 445, 0, 437, 282, 0, 436,
	371, 423, 428, 357, 351, 281, 425, 355, 350, 339,
	317, 470, 340, 341, 331, 383, 349, 384, 332, 361,
	360, 362, 0, 0, 0, 0, 0, 465, 466, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 596, 0, 0, 600, 0, 439, 0, 0, 0,
	0, 0, 0, 411, 0, 0, 342, 0, 0, 0,
	455, 0, 396, 377, 622, 0, 0, 394, 347, 424,
	385, 430, 413, 438, 390, 386, 273, 414, 312, 358,
	285, 287, 307, 314, 316, 318, 319, 367, 368, 380,
	401, 415, 416, 417, 311, 295, 395, 296, 329, 297,
	274, 303, 301, 304, 403, 305, 276, 381, 421, 0,
	324, 391, 354, 277, 353, 382, 420, 419, 286, 446,
	452, 453, 542, 0, 458, 623, 624, 625, 467, 472,
	473, 474, 476, 477, 478, 479, 543, 560, 527, 497,
	460, 551, 494, 498, 499, 563, 0, 0, 0, 451,
	343, 344, 0, 322, 270, 271, 618, 308, 373, 565,
	598, 599, 490, 0, 552, 491, 500, 300, 524, 536,
	535, 369, 450, 0, 547, 550, 480, 617, 0, 544,
	559, 621, 558, 614, 379, 0, 400, 556, 503, 0,
	548, 522, 0, 549, 518, 553, 0, 492, 0, 407,
	432, 444, 461, 464, 493, 578, 579, 580, 275, 463,
	582, 583, 584, 585, 586, 587, 588, 581, 435, 525,
	502, 528, 443, 505, 504, 0, 0, 539, 459, 540,
	541, 363, 364, 365, 366, 326, 566, 293, 462, 389,
	0, 526, 0, 0, 0, 0, 0, 0, 0, 0,
	531, 532, 529, 626, 0, 589, 590, 0, 0, 456,
	457, 321, 328, 475, 330, 292, 378, 323, 441, 337,
	0, 468, 533, 469, 592, 595, 593, 594, 370, 333,
	334, 404, 338, 348, 392, 440, 376, 397, 290, 431,
	405, 352, 519, 546, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 259, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	574, 573, 572, 571, 570, 569, 568, 567, 0, 0,
	516, 418, 302, 264, 298, 299, 306, 615, 612, 422,
	616, 0, 272, 496, 346, 150, 387, 320, 561, 562,
	0, 0, 220, 221, 222, 223, 224, 225, 226, 227,
	265, 228, 229, 230, 231, 232, 233, 234, 237, 238,
	239, 240, 241, 242, 243, 244, 564, 235, 236, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	256, 257, 258, 0, 0, 0, 266, 267, 268, 269,
	0, 0, 260, 261, 262, 263, 0, 0, 0, 447,
	448, 449, 471, 0, 433, 495, 613, 0, 0, 0,
	0, 0, 0, 0, 545, 557, 591, 0, 601, 602,
	604, 606, 605, 608, 410, 0, 619, 486, 487, 620,
	597, 375, 0, 501, 534, 523, 607, 489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 315, 0,
	0, 345, 538, 520, 530, 521, 506, 507, 508, 515,
	325, 509, 510, 511, 481, 512, 482, 513, 514, 0,
	537, 488, 406, 359, 555, 554, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 209, 1001, 1002, 0, 0, 0,
	0, 288, 210, 483, 603, 485, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1005, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 278, 412,
	429, 289, 402, 442, 294, 409, 284, 374, 398, 0,
	0, 280, 427, 408, 356, 335, 336, 279, 0, 393,
	313, 327, 310, 372, 0, 426, 454, 309, 445, 978,
	437, 282, 977, 436, 371, 423, 428, 357, 351, 281,
	425, 355, 350, 339, 317, 470, 340, 341, 331, 383,
	349, 384, 332, 361, 360, 362, 0, 0, 0, 0,
	0, 465, 466, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 596, 0, 0, 600, 0,
	439, 0, 0, 0, 0, 0, 0, 411, 0, 0,
	342, 0, 0, 0, 455, 0, 396, 377, 622, 0,
	0, 394, 347, 424, 385, 430, 413, 438, 390, 386,
	273, 414, 312, 358, 285, 287, 307, 314, 316, 318,
	319, 367, 368, 380, 401, 415, 416, 417, 311, 295,
	395, 296, 329, 297, 274, 303, 301, 304, 403, 305,
	276, 381, 421, 0, 324, 391, 354, 277, 353, 382,
	420, 419, 286, 446, 452, 453, 542, 0, 458, 623,
	624, 625, 467, 472, 473, 474, 476, 477, 478, 479,
	543, 560, 527, 497, 460, 551, 494, 498, 499, 563,
	0, 0, 0, 451, 343, 344, 0, 322, 270, 271,
	618, 308, 373, 565, 598, 599, 490, 0, 552, 491,
	500, 300, 524, 536, 535, 369, 450, 0, 547, 550,
	480, 617, 0, 544, 559, 621, 558, 614, 379, 0,
	400, 556, 503, 0, 548, 522, 0, 549, 518, 553,
	0, 492, 0, 407, 432, 444, 461, 464, 493, 578,
	579, 580, 275, 463, 582, 583, 584, 585, 586, 587,
	588, 581, 435, 525, 502, 528, 443, 505, 504, 0,
	0, 539, 459, 540, 541, 363, 364, 365, 366, 326,
	566, 293, 462, 389, 0, 526, 0, 0, 0, 0,
	0, 0, 0, 0, 531, 532, 529, 626, 0, 589,
	590, 0, 0, 456, 457, 321, 328, 475, 330, 292,
	378, 323, 441, 337, 0, 468, 533, 469, 592, 595,
	593, 594, 1003, 1976, 999, 1977, 338, 348, 392, 440,
	376, 397, 290, 431, 405, 1000, 519, 546, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 259,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 574, 573, 572, 571, 570, 569,
	568, 567, 0, 0, 516, 418, 302, 264, 298, 299,
	306, 615, 612, 422, 616, 0, 272, 496, 346, 0,
	387, 320, 561, 562, 0, 0, 220, 221, 222, 223,
	224, 225, 226, 227, 265, 228, 229, 230, 231, 232,
	233, 234, 237, 238, 239, 240, 241, 242, 243, 244,
	564, 235, 236, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257, 258, 0, 0, 0,
	266, 267, 268, 269, 0, 0, 260, 261, 262, 263,
	0, 0, 0, 447, 448, 449, 471, 0, 433, 495,
	613, 0, 0, 0, 0, 0, 0, 0, 545, 557,
	591, 0, 601, 602, 604, 606, 605, 608, 410, 0,
	619, 486, 487, 620, 597, 375, 0, 501, 534, 523,
	607, 489, 0, 0, 2829, 0, 0, 0, 0, 0,
	0, 0, 315, 0, 0, 345, 538, 520, 530, 521,
	506, 507, 508, 515, 325, 509, 510, 511, 481, 512,
	482, 513, 514, 0, 537, 488, 406, 359, 555, 554,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 209, 0,
	0, 0, 0, 0, 0, 288, 210, 483, 603, 485,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	291, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 278, 412, 429, 289, 402, 442, 294, 409,
	284, 374, 398, 0, 0, 280, 427, 408, 356, 335,
	336, 279, 0, 393, 313, 327, 310, 372, 0, 426,
	454, 309, 445, 0, 437, 282, 0, 436, 371, 423,
	428, 357, 351, 281, 425, 355, 350, 339, 317, 470,
	340, 341, 331, 383, 349, 384, 332, 361, 360, 362,
	0, 0, 0, 0, 0, 465, 466, 0, 0, 0,
	0, 0, 0, 0, 0, 2832, 0, 0, 2831, 596,
	0, 0, 600, 0, 439, 0, 0, 0, 0, 0,
	0, 411, 0, 0, 342, 0, 0, 0, 455, 0,
	396, 377, 622, 0, 0, 394, 347, 424, 385, 430,
	413, 438, 390, 386, 273, 414, 312, 358, 285, 287,
	307, 314, 316, 318, 319, 367, 368, 380, 401, 415,
	416, 417, 311, 295, 395, 296, 329, 297, 274, 303,
	301, 304, 403, 305, 276, 381, 421, 0, 324, 391,
	354, 277, 353, 382, 420, 419, 286, 446, 452, 453,
	542, 0, 458, 623, 624, 625, 467, 472, 473, 474,
	476, 477, 478, 479, 543, 560, 527, 497, 460, 551,
	494, 498, 499, 563, 0, 0, 0, 451, 343, 344,
	0, 322, 270, 271, 618, 308, 373, 565, 598, 599,
	490, 0, 552, 491, 500, 300, 524, 536, 535, 369,
	450, 0, 547, 550, 480, 617, 0, 544, 559, 621,
	558, 614, 379, 0, 400, 556, 503, 0, 548, 522,
	0, 549, 518, 553, 0, 492, 0, 407, 432, 444,
	461, 464, 493, 578, 579, 580, 275, 463, 582, 583,
	584, 585, 586, 587, 588, 581, 435, 525, 502, 528,
	443, 505, 504, 0, 0, 539, 459, 540, 541, 363,
	364, 365, 366, 326, 566, 293, 462, 389, 0, 526,
	0, 0, 0, 0, 0, 0, 0, 0, 531, 532,
	529, 626, 0, 589, 590, 0, 0, 456, 457, 321,
	328, 475, 330, 292, 378, 323, 441, 337, 0, 468,
	533, 469, 592, 595, 593, 594, 370, 333, 334, 404,
	338, 348, 392, 440, 376, 397, 290, 431, 405, 352,
	519, 546, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 259, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 574, 573,
	572, 571, 570, 569, 568, 567, 0, 0, 516, 418,
	302, 264, 298, 299, 306, 615, 612, 422, 616, 0,
	272, 496, 346, 0, 387, 320, 561, 562, 0, 0,
	220, 221, 222, 223, 224, 225, 226, 227, 265, 228,
	229, 230, 231, 232, 233, 234, 237, 238, 239, 240,
	241, 242, 243, 244, 564, 235, 236, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 255, 256, 257,
	258, 0, 0, 0, 266, 267, 268, 269, 0, 0,
	260, 261, 262, 263, 0, 0, 0, 447, 448, 449,
	471, 0, 433, 495, 613, 0, 0, 0, 0, 0,
	0, 0, 545, 557, 591, 0, 601, 602, 604, 606,
	605, 608, 410, 0, 619, 486, 487, 620, 597, 375,
	0, 501, 534, 523, 607, 489, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 315, 1469, 0, 345,
	538, 520, 530, 521, 506, 507, 508, 515, 325, 509,
	510, 511, 481, 512, 482, 513, 514, 0, 537, 488,
	406, 359, 555, 554, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 209, 0, 0, 1467, 0, 0, 0, 288,
	210, 483, 603, 485, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 291, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1465,
	0, 0, 0, 0, 0, 0, 278, 412, 429, 289,
	402, 442, 294, 409, 284, 374, 398, 0, 0, 280,
	427, 408, 356, 335, 336, 279, 0, 393, 313, 327,
	310, 372, 0, 426, 454, 309, 445, 0, 437, 282,
	0, 436, 371, 423, 428, 357, 351, 281, 425, 355,
	350, 339, 317, 470, 340, 341, 331, 383, 349, 384,
	332, 361, 360, 362, 0, 0, 0, 0, 0, 465,
	466, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 596, 0, 0, 600, 0, 439, 0,
	0, 0, 0, 0, 0, 411, 0, 0, 342, 0,
	0, 0, 455, 0, 396, 377, 622, 0, 0, 394,
	347, 424, 385, 430, 413, 438, 390, 386, 273, 414,
	312, 358, 285, 287, 307, 314, 316, 318, 319, 367,
	368, 380, 401, 415, 416, 417, 311, 295, 395, 296,
	329, 297, 274, 303, 301, 304, 403, 305, 276, 381,
	421, 0, 324, 391, 354, 277, 353, 382, 420, 419,
	286, 446, 452, 453, 542, 0, 458, 623, 624, 625,
	467, 472, 473, 474, 476, 477, 478, 479, 543, 560,
	527, 497, 460, 551, 494, 498, 499, 563, 0, 0,
	0, 451, 343, 344, 0, 322, 270, 271, 618, 308,
	373, 565, 598, 599, 490, 0, 552, 491, 500, 300,
	524, 536, 535, 369, 450, 0, 547, 550, 480, 617,
	0, 544, 559, 621, 558, 614, 379, 0, 400, 556,
	503, 0, 548, 522, 0, 549, 518, 553, 0, 492,
	0, 407, 432, 444, 461, 464, 493, 578, 579, 580,
	275, 463, 582, 583, 584, 585, 586, 587, 588, 581,
	435, 525, 502, 528, 443, 505, 504, 0, 0, 539,
	459, 540, 541, 363, 364, 365, 366, 326, 566, 293,
	462, 389, 0, 526, 0, 0, 0, 0, 0, 0,
	0, 0, 531, 532, 529, 626, 0, 589, 590, 0,
	0, 456, 457, 321, 328, 475, 330, 292, 378, 323,
	441, 337, 0, 468, 533, 469, 592, 595, 593, 594,
	370, 333, 334, 404, 338, 348, 392, 440, 376, 397,
	290, 431, 405, 352, 519, 546, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 259, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 574, 573, 572, 571, 570, 569, 568, 567,
	0, 0, 516, 418, 302, 264, 298, 299, 306, 615,
	612, 422, 616, 0, 272, 496, 346, 0, 387, 320,
	561, 562, 0, 0, 220, 221, 222, 223, 224, 225,
	226, 227, 265, 228, 229, 230, 231, 232, 233, 234,
	237, 238, 239, 240, 241, 242, 243, 244, 564, 235,
	236, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 256, 257, 258, 0, 0, 0, 266, 267,
	268, 269, 0, 0, 260, 261, 262, 263, 0, 0,
	0, 447, 448, 449, 471, 0, 433, 495, 613, 0,
	0, 0, 0, 0, 0, 0, 545, 557, 591, 0,
	601, 602, 604, 606, 605, 608, 410, 0, 619, 486,
	487, 620, 597, 375, 0, 501, 534, 523, 607, 489,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	315, 1463, 0, 345, 538, 520, 530, 521, 506, 507,
	508, 515, 325, 509, 510, 511, 481, 512, 482, 513,
	514, 0, 537, 488, 406, 359, 555, 554, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 209, 0, 0, 1467,
	0, 0, 0, 288, 210, 483, 603, 485, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 291, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1465, 0, 0, 0, 0, 0, 0,
	278, 412, 429, 289, 402, 442, 294, 409, 284, 374,
	398, 0, 0, 280, 427, 408, 356, 335, 336, 279,
	0, 393, 313, 327, 310, 372, 0, 426, 454, 309,
	445, 0, 437, 282, 0, 436, 371, 423, 428, 357,
	351, 281, 425, 355, 350, 339, 317, 470, 340, 341,
	331, 383, 349, 384, 332, 361, 360, 362, 0, 0,
	0, 0, 0, 465, 466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 596, 0, 0,
	600, 0, 439, 0, 0, 0, 0, 0, 0, 411,
	0, 0, 342, 0, 0, 0, 455, 0, 396, 377,
	622, 0, 0, 394, 347, 424, 385, 430, 413, 438,
	390, 386, 273, 414, 312, 358, 285, 287, 307, 314,
	316, 318, 319, 367, 368, 380, 401, 415, 416, 417,
	311, 295, 395, 296, 329, 297, 274, 303, 301, 304,
	403, 305, 276, 381, 421, 0, 324, 391, 354, 277,
	353, 382, 420, 419, 286, 446, 452, 453, 542, 0,
	458, 623, 624, 625, 467, 472, 473, 474, 476, 477,
	478, 479, 543, 560, 527, 497, 460, 551, 494, 498,
	499, 563, 0, 0, 0, 451, 343, 344, 0, 322,
	270, 271, 618, 308, 373, 565, 598, 599, 490, 0,
	552, 491, 500, 300, 524, 536, 535, 369, 450, 0,
	547, 550, 480, 617, 0, 544, 559, 621, 558, 614,
	379, 0, 400, 556, 503, 0, 548, 522, 0, 549,
	518, 553, 0, 492, 0, 407, 432, 444, 461, 464,
	493, 578, 579, 580, 275, 463, 582, 583, 584, 585,
	586, 587, 588, 581, 435, 525, 502, 528, 443, 505,
	504, 0, 0, 539, 459, 540, 541, 363, 364, 365,
	366, 326, 566, 293, 462, 389, 0, 526, 0, 0,
	0, 0, 0, 0, 0, 0, 531, 532, 529, 626,
	0, 589, 590, 0, 0, 456, 457, 321, 328, 475,
	330, 292, 378, 323, 441, 337, 0, 468, 533, 469,
	592, 595, 593, 594, 370, 333, 334, 404, 338, 348,
	392, 440, 376, 397, 290, 431, 405, 352, 519, 546,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 259, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 574, 573, 572, 571,
	570, 569, 568, 567, 0, 0, 516, 418, 302, 264,
	298, 299, 306, 615, 612, 422, 616, 0, 272, 496,
	346, 0, 387, 320, 561, 562, 0, 0, 220, 221,
	222, 223, 224, 225, 226, 227, 265, 228, 229, 230,
	231, 232, 233, 234, 237, 238, 239, 240, 241, 242,
	243, 244, 564, 235, 236, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 254, 255, 256, 257, 258, 0,
	0, 0, 266, 267, 268, 269, 0, 0, 260, 261,
	262, 263, 0, 0, 0, 447, 448, 449, 471, 0,
	433, 495, 613, 0, 0, 0, 0, 0, 0, 0,
	545, 557, 591, 0, 601, 602, 604, 606, 605, 608,
	410, 0, 619, 486, 487, 620, 597, 375, 0, 501,
	534, 523, 607, 489, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 315, 0, 0, 345, 538, 520,
	530, 521, 506, 507, 508, 515, 325, 509, 510, 511,
	481, 512, 482, 513, 514, 0, 537, 488, 406, 359,
	555, 554, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3843, 0,
	209, 813, 0, 0, 0, 0, 0, 288, 210, 483,
	603, 485, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 291, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 278, 412, 429, 289, 402, 442,
	294, 409, 284, 374, 398, 0, 0, 280, 427, 408,
	356, 335, 336, 279, 0, 393, 313, 327, 310, 372,
	0, 426, 454, 309, 445, 0, 437, 282, 0, 436,
	371, 423, 428, 357, 351, 281, 425, 355, 350, 339,
	317, 470, 340, 341, 331, 383, 349, 384, 332, 361,
	360, 362, 0, 0, 0, 0, 0, 465, 466, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 596, 0, 0, 600, 0, 439, 0, 0, 0,
	0, 0, 0, 411, 0, 0, 342, 0, 0, 0,
	455, 0, 396, 377, 622, 0, 0, 394, 347, 424,
	385, 430, 413, 438, 390, 386, 273, 414, 312, 358,
	285, 287, 307, 314, 316, 318, 319, 367, 368, 380,
	401, 415, 416, 417, 311, 295, 395, 296, 329, 297,
	274, 303, 301, 304, 403, 305, 276, 381, 421, 0,
	324, 391, 354, 277, 353, 382, 420, 419, 286, 446,
	452, 453, 542, 0, 458, 623, 624, 625, 467, 472,
	473, 474, 476, 477, 478, 479, 543, 560, 527, 497,
	460, 551, 494, 498, 499, 563, 0, 0, 0, 451,
	343, 344, 0, 322, 270, 271, 618, 308, 373, 565,
	598, 599, 490, 0, 552, 491, 500, 300, 524, 536,
	535, 369, 450, 0, 547, 550, 480, 617, 0, 544,
	559, 621, 558, 614, 379, 0, 400, 556, 503, 0,
	548, 522, 0, 549, 518, 553, 0, 492, 0, 407,
	432, 444, 461, 464, 493, 578, 579, 580, 275, 463,
	582, 583, 584, 585, 586, 587, 588, 581, 435, 525,
	502, 528, 443, 505, 504, 0, 0, 539, 459, 540,
	541, 363, 364, 365, 366, 326, 566, 293, 462, 389,
	0, 526, 0, 0, 0, 0, 0, 0, 0, 0,
	531, 532, 529, 626, 0, 589, 590, 0, 0, 456,
	457, 321, 328, 475, 330, 292, 378, 323, 441, 337,
	0, 468, 533, 469, 592, 595, 593, 594, 370, 333,
	334, 404, 338, 348, 392, 440, 376, 397, 290, 431,
	405, 352, 519, 546, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 259, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	574, 573, 572, 571, 570, 569, 568, 567, 0, 0,
	516, 418, 302, 264, 298, 299, 306, 615, 612, 422,
	616, 0, 272, 496, 346, 0, 387, 320, 561, 562,
	0, 0, 220, 221, 222, 223, 224, 225, 226, 227,
	265, 228, 229, 230, 231, 232, 233, 234, 237, 238,
	239, 240, 241, 242, 243, 244, 564, 235, 236, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	256, 257, 258, 0, 0, 0, 266, 267, 268, 269,
	0, 0, 260, 261, 262, 263, 0, 0, 0, 447,
	448, 449, 471, 0, 433, 495, 613, 0, 0, 0,
	0, 0, 0, 0, 545, 557, 591, 0, 601, 602,
	604, 606, 605, 608, 410, 0, 619, 486, 487, 620,
	597, 375, 0, 501, 534, 523, 607, 489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 315, 0,
	0, 345, 538, 520, 530, 521, 506, 507, 508, 515,
	325, 509, 510, 511, 481, 512, 482, 513, 514, 0,
	537, 488, 406, 359, 555, 554, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 209, 0, 0, 1467, 0, 0,
	0, 288, 210, 483, 603, 485, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 291, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1465, 0, 0, 0, 0, 0, 0, 278, 412,
	429, 289, 402, 442, 294, 409, 284, 374, 398, 0,
	0, 280, 427, 408, 356, 335, 336, 279, 0, 393,
	313, 327, 310, 372, 0, 426, 454, 309, 445, 0,
	437, 282, 0, 436, 371, 423, 428, 357, 351, 281,
	425, 355, 350, 339, 317, 470, 340, 341, 331, 383,
	349, 384, 332, 361, 360, 362, 0, 0, 0, 0,
	0, 465, 466, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 596, 0, 0, 600, 0,
	439, 0, 0, 0, 0, 0, 0, 411, 0, 0,
	342, 0, 0, 0, 455, 0, 396, 377, 622, 0,
	0, 394, 347, 424, 385, 430, 413, 438, 390, 386,
	273, 414, 312, 358, 285, 287, 307, 314, 316, 318,
	319, 367, 368, 380, 401, 415, 416, 417, 311, 295,
	395, 296, 329, 297, 274, 303, 301, 304, 403, 305,
	276, 381, 421, 0, 324, 391, 354, 277, 353, 382,
	420, 419, 286, 446, 452, 453, 542, 0, 458, 623,
	624, 625, 467, 472, 473, 474, 476, 477, 478, 479,
	543, 560, 527, 497, 460, 551, 494, 498, 499, 563,
	0, 0, 0, 451, 343, 344, 0, 322, 270, 271,
	618, 308, 373, 565, 598, 599, 490, 0, 552, 491,
	500, 300, 524, 536, 535, 369, 450, 0, 547, 550,
	480, 617, 0, 544, 559, 621, 558, 614, 379, 0,
	400, 556, 503, 0, 548, 522, 0, 549, 518, 553,
	0, 492, 0, 407, 432, 444, 461, 464, 493, 578,
	579, 580, 275, 463, 582, 583, 584, 585, 586, 587,
	588, 581, 435, 525, 502, 528, 443, 505, 504, 0,
	0, 539, 459, 540, 541, 363, 364, 365, 366, 326,
	566, 293, 462, 389, 0, 526, 0, 0, 0, 0,
	0, 0, 0, 0, 531, 532, 529, 626, 0, 589,
	590, 0, 0, 456, 457, 321, 328, 475, 330, 292,
	378, 323, 441, 337, 0, 468, 533, 469, 592, 595,
	593, 594, 370, 333, 334, 404, 338, 348, 392, 440,
	376, 397, 290, 431, 405, 352, 519, 546, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 259,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 574, 573, 572, 571, 570, 569,
	568, 567, 0, 0, 516, 418, 302, 264, 298, 299,
	306, 615, 612, 422, 616, 0, 272, 496, 346, 0,
	387, 320, 561, 562, 0, 0, 220, 221, 222, 223,
	224, 225, 226, 227, 265, 228, 229, 230, 231, 232,
	233, 234, 237, 238, 239, 240, 241, 242, 243, 244,
	564, 235, 236, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257, 258, 0, 0, 0,
	266, 267, 268, 269, 0, 0, 260, 261, 262, 263,
	0, 0, 0, 447, 448, 449, 471, 0, 433, 495,
	613, 0, 0, 0, 0, 0, 0, 0, 545, 557,
	591, 0, 601, 602, 604, 606, 605, 608, 410, 0,
	619, 486, 487, 620, 597, 375, 0, 501, 534, 523,
	607, 489, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 315, 0, 0, 345, 538, 520, 530, 521,
	506, 507, 508, 515, 325, 509, 510, 511, 481, 512,
	482, 513, 514, 0, 537, 488, 406, 359, 555, 554,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 209, 0,
	0, 1467, 0, 0, 0, 288, 210, 483, 603, 485,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	291, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1675, 0, 0, 0, 0,
	0, 0, 278, 412, 429, 289, 402, 442, 294, 409,
	284, 374, 398, 0, 0, 280, 427, 408, 356, 335,
	336, 279, 0, 393, 313, 327, 310, 372, 0, 426,
	454, 309, 445, 0, 437, 282, 0, 436, 371, 423,
	428, 357, 351, 281, 425, 355, 350, 339, 317, 470,
	340, 341, 331, 383, 349, 384, 332, 361, 360, 362,
	0, 0, 0, 0, 0, 465, 466, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 596,
	0, 0, 600, 0, 439, 0, 0, 0, 0, 0,
	0, 411, 0, 0, 342, 0, 0, 0, 455, 0,
	396, 377, 622, 0, 0, 394, 347, 424, 385, 430,
	413, 438, 390, 386, 273, 414, 312, 358, 285, 287,
	307, 314, 316, 318, 319, 367, 368, 380, 401, 415,
	416, 417, 311, 295, 395, 296, 329, 297, 274, 303,
	301, 304, 403, 305, 276, 381, 421, 0, 324, 391,
	354, 277, 353, 382, 420, 419, 286, 446, 452, 453,
	542, 0, 458, 623, 624, 625, 467, 472, 473, 474,
	476, 477, 478, 479, 543, 560, 527, 497, 460, 551,
	494, 498, 499, 563, 0, 0, 0, 451, 343, 344,
	0, 322, 270, 271, 618, 308, 373, 565, 598, 599,
	490, 0, 552, 491, 500, 300, 524, 536, 535, 369,
	450, 0, 547, 550, 480, 617, 0, 544, 559, 621,
	558, 614, 379, 0, 400, 556, 503, 0, 548, 522,
	0, 549, 518, 553, 0, 492, 0, 407, 432, 444,
	461, 464, 493, 578, 579, 580, 275, 463, 582, 583,
	584, 585, 586, 587, 588, 581, 435, 525, 502, 528,
	443, 505, 504, 0, 0, 539, 459, 540, 541, 363,
	364, 365, 366, 326, 566, 293, 462, 389, 0, 526,
	0, 0, 0, 0, 0, 0, 0, 0, 531, 532,
	529, 626, 0, 589, 590, 0, 0, 456, 457, 321,
	328, 475, 330, 292, 378, 323, 441, 337, 0, 468,
	533, 469, 592, 595, 593, 594, 370, 333, 334, 404,
	338, 348, 392, 440, 376, 397, 290, 431, 405, 352,
	519, 546, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 259, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 574, 573,
	572, 571, 570, 569, 568, 567, 0, 0, 516, 418,
	302, 264, 298, 299, 306, 615, 612, 422, 616, 0,
	272, 496, 346, 0, 387, 320, 561, 562, 0, 0,
	220, 221, 222, 223, 224, 225, 226, 227, 265, 228,
	229, 230, 231, 232, 233, 234, 237, 238, 239, 240,
	241, 242, 243, 244, 564, 235, 236, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 255, 256, 257,
	258, 0, 0, 0, 266, 267, 268, 269, 0, 0,
	260, 261, 262, 263, 0, 0, 0, 447, 448, 449,
	471, 0, 433, 495, 613, 0, 0, 0, 0, 0,
	0, 0, 545, 557, 591, 0, 601, 602, 604, 606,
	605, 608, 410, 0, 619, 486, 487, 620, 597, 375,
	0, 501, 534, 523, 607, 489, 0, 0, 0, 0,
	0, 2397, 0, 0, 0, 0, 315, 0, 0, 345,
	538, 520, 530, 521, 506, 507, 508, 515, 325, 509,
	510, 511, 481, 512, 482, 513, 514, 0, 537, 488,
	406, 359, 555, 554, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 209, 0, 0, 2399, 0, 0, 0, 288,
	210, 483, 603, 485, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 291, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 278, 412, 429, 289,
	402, 442, 294, 409, 284, 374, 398, 0, 0, 280,
	427, 408, 356, 335, 336, 279, 0, 393, 313, 327,
	310, 372, 0, 426, 454, 309, 445, 0, 437, 282,
	0, 436, 371, 423, 428, 357, 351, 281, 425, 355,
	350, 339, 317, 470, 340, 341, 331, 383, 349, 384,
	332, 361, 360, 362, 0, 0, 0, 0, 0, 465,
	466, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 596, 0, 0, 600, 0, 439, 0,
	0, 0, 0, 0, 0, 411, 0, 0, 342, 0,
	0, 0, 455, 0, 396, 377, 622, 0, 0, 394,
	347, 424, 385, 430, 413, 438, 390, 386, 273, 414,
	312, 358, 285, 287, 307, 314, 316, 318, 319, 367,
	368, 380, 401, 415, 416, 417, 311, 295, 395, 296,
	329, 297, 274, 303, 301, 304, 403, 305, 276, 381,
	421, 0, 324, 391, 354, 277, 353, 382, 420, 419,
	286, 446, 452, 453, 542, 0, 458, 623, 624, 625,
	467, 472, 473, 474, 476, 477, 478, 479, 543, 560,
	527, 497, 460, 551, 494, 498, 499, 563, 0, 0,
	0, 451, 343, 344, 0, 322, 270, 271, 618, 308,
	373, 565, 598, 599, 490, 0, 552, 491, 500, 300,
	524, 536, 535, 369, 450, 0, 547, 550, 480, 617,
	0, 544, 559, 621, 558, 614, 379, 0, 400, 556,
	503, 0, 548, 522, 0, 549, 518, 553, 0, 492,
	0, 407, 432, 444, 461, 464, 493, 578, 579, 580,
	275, 463, 582, 583, 584, 585, 586, 587, 588, 581,
	435, 525, 502, 528, 443, 505, 504, 0, 0, 539,
	459, 540, 541, 363, 364, 365, 366, 326, 566, 293,
	462, 389, 0, 526, 0, 0, 0, 0, 0, 0,
	0, 0, 531, 532, 529, 626, 0, 589, 590, 0,
	0, 456, 457, 321, 328, 475, 330, 292, 378, 323,
	441, 337, 0, 468, 533, 469, 592, 595, 593, 594,
	370, 333, 334, 404, 338, 348, 392, 440, 376, 397,
	290, 431, 405, 352, 519, 546, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 259, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 574, 573, 572, 571, 570, 569, 568, 567,
	0, 0, 516, 418, 302, 264, 298, 299, 306, 615,
	612, 422, 616, 0, 272, 496, 346, 0, 387, 320,
	561, 562, 0, 0, 220, 221, 222, 223, 224, 225,
	226, 227, 265, 228, 229, 230, 231, 232, 233, 234,
	237, 238, 239, 240, 241, 242, 243, 244, 564, 235,
	236, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 256, 257, 258, 0, 0, 0, 266, 267,
	268, 269, 0, 0, 260, 261, 262, 263, 0, 0,
	0, 447, 448, 449, 471, 0, 433, 495, 613, 0,
	0, 0, 0, 0, 0, 0, 545, 557, 591, 0,
	601, 602, 604, 606, 605, 608, 410, 0, 619, 486,
	487, 620, 597, 375, 0, 501, 534, 523, 607, 489,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	315, 0, 0, 345, 538, 520, 530, 521, 506, 507,
	508, 515, 325, 509, 510, 511, 481, 512, 482, 513,
	514, 0, 537, 488, 406, 359, 555, 554, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 209, 0, 0, 3032,
	3034, 0, 0, 288, 210, 483, 603, 485, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 291, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	278, 412, 429, 289, 402, 442, 294, 409, 284, 374,
	398, 0, 0, 280, 427, 408, 356, 335, 336, 279,
	0, 393, 313, 327, 310, 372, 0, 426, 454, 309,
	445, 0, 437, 282, 0, 436, 371, 423, 428, 357,
	351, 281, 425, 355, 350, 339, 317, 470, 340, 341,
	331, 383, 349, 384, 332, 361, 360, 362, 0, 0,
	0, 0, 0, 465, 466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 596, 0, 0,
	600, 0, 439, 0, 0, 0, 0, 0, 0, 411,
	0, 0, 342, 0, 0, 0, 455, 0, 396, 377,
	622, 0, 0, 394, 347, 424, 385, 430, 413, 438,
	390, 386, 273, 414, 312, 358, 285, 287, 307, 314,
	316, 318, 319, 367, 368, 380, 401, 415, 416, 417,
	311, 295, 395, 296, 329, 297, 274, 303, 301, 304,
	403, 305, 276, 381, 421, 0, 324, 391, 354, 277,
	353, 382, 420, 419, 286, 446, 452, 453, 542, 0,
	458, 623, 624, 625, 467, 472, 473, 474, 476, 477,
	478, 479, 543, 560, 527, 497, 460, 551, 494, 498,
	499, 563, 0, 0, 0, 451, 343, 344, 0, 322,
	270, 271, 618, 308, 373, 565, 598, 599, 490, 0,
	552, 491, 500, 300, 524, 536, 535, 369, 450, 0,
	547, 550, 480, 617, 0, 544, 559, 621, 558, 614,
	379, 0, 400, 556, 503, 0, 548, 522, 0, 549,
	518, 553, 0, 492, 0, 407, 432, 444, 461, 464,
	493, 578, 579, 580, 275, 463, 582, 583, 584, 585,
	586, 587, 588, 581, 435, 525, 502, 528, 443, 505,
	504, 0, 0, 539, 459, 540, 541, 363, 364, 365,
	366, 326, 566, 293, 462, 389, 0, 526, 0, 0,
	0, 0, 0, 0, 0, 0, 531, 532, 529, 626,
	0, 589, 590, 0, 0, 456, 457, 321, 328, 475,
	330, 292, 378, 323, 441, 337, 0, 468, 533, 469,
	592, 595, 593, 594, 370, 333, 334, 404, 338, 348,
	392, 440, 376, 397, 290, 431, 405, 352, 519, 546,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 259, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 574, 573, 572, 571,
	570, 569, 568, 567, 0, 0, 516, 418, 302, 264,
	298, 299, 306, 615, 612, 422, 616, 0, 272, 496,
	346, 0, 387, 320, 561, 562, 0, 0, 220, 221,
	222, 223, 224, 225, 226, 227, 265, 228, 229, 230,
	231, 232, 233, 234, 237, 238, 239, 240, 241, 242,
	243, 244, 564, 235, 236, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 254, 255, 256, 257, 258, 0,
	0, 0, 266, 267, 268, 269, 0, 0, 260, 261,
	262, 263, 0, 0, 0, 447, 448, 449, 471, 0,
	433, 495, 613, 0, 0, 0, 0, 0, 0, 0,
	545, 557, 591, 0, 601, 602, 604, 606, 605, 608,
	410, 0, 619, 486, 487, 620, 597, 375, 0, 501,
	534, 523, 607, 489, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 315, 2418, 0, 345, 538, 520,
	530, 521, 506, 507, 508, 515, 325, 509, 510, 511,
	481, 512, 482, 513, 514, 0, 537, 488, 406, 359,
	555, 554, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	209, 0, 0, 1467, 0, 0, 0, 288, 210, 483,
	603, 485, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 291, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 278, 412, 429, 289, 402, 442,
	294, 409, 284, 374, 398, 0, 0, 280, 427, 408,
	356, 335, 336, 279, 0, 393, 313, 327, 310, 372,
	0, 426, 454, 309, 445, 0, 437, 282, 0, 436,
	371, 423, 428, 357, 351, 281, 425, 355, 350, 339,
	317, 470, 340, 341, 331, 383, 349, 384, 332, 361,
	360, 362, 0, 0, 0, 0, 0, 465, 466, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 596, 0, 0, 600, 0, 439, 0, 0, 0,
	0, 0, 0, 411, 0, 0, 342, 0, 0, 0,
	455, 0, 396, 377, 622, 0, 0, 394, 347, 424,
	385, 430, 413, 438, 390, 386, 273, 414, 312, 358,
	285, 287, 307, 314, 316, 318, 319, 367, 368, 380,
	401, 415, 416, 417, 311, 295, 395, 296, 329, 297,
	274, 303, 301, 304, 403, 305, 276, 381, 421, 0,
	324, 391, 354, 277, 353, 382, 420, 419, 286, 446,
	452, 453, 542, 0, 458, 623, 624, 625, 467, 472,
	473, 474, 476, 477, 478, 479, 543, 560, 527, 497,
	460, 551, 494, 498, 499, 563, 0, 0, 0, 451,
	343, 344, 0, 322, 270, 271, 618, 308, 373, 565,
	598, 599, 490, 0, 552, 491, 500, 300, 524, 536,
	535, 369, 450, 0, 547, 550, 480, 617, 0, 544,
	559, 621, 558, 614, 379, 0, 400, 556, 503, 0,
	548, 522, 0, 549, 518, 553, 0, 492, 0, 407,
	432, 444, 461, 464, 493, 578, 579, 580, 275, 463,
	582, 583, 584, 585, 586, 587, 588, 581, 435, 525,
	502, 528, 443, 505, 504, 0, 0, 539, 459, 540,
	541, 363, 364, 365, 366, 326, 566, 293, 462, 389,
	0, 526, 0, 0, 0, 0, 0, 0, 0, 0,
	531, 532, 529, 626, 0, 589, 590, 0, 0, 456,
	457, 321, 328, 475, 330, 292, 378, 323, 441, 337,
	0, 468, 533, 469, 592, 595, 593, 594, 370, 333,
	334, 404, 338, 348, 392, 440, 376, 397, 290, 431,
	405, 352, 519, 546, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 259, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	574, 573, 572, 571, 570, 569, 568, 567, 0, 0,
	516, 418, 302, 264, 298, 299, 306, 615, 612, 422,
	616, 0, 272, 496, 346, 0, 387, 320, 561, 562,
	0, 0, 220, 221, 222, 223, 224, 225, 226, 227,
	265, 228, 229, 230, 231, 232, 233, 234, 237, 238,
	239, 240, 241, 242, 243, 244, 564, 235, 236, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	256, 257, 258, 0, 0, 0, 266, 267, 268, 269,
	0, 0, 260, 261, 262, 263, 0, 0, 0, 447,
	448, 449, 471, 0, 433, 495, 613, 0, 0, 0,
	0, 0, 0, 0, 545, 557, 591, 0, 601, 602,
	604, 606, 605, 608, 410, 0, 619, 486, 487, 620,
	597, 375, 0, 501, 534, 523, 607, 489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 633, 315, 0,
	0, 345, 538, 520, 530, 521, 506, 507, 508, 515,
	325, 509, 510, 511, 481, 512, 482, 513, 514, 0,
	537, 488, 406, 359, 555, 554, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 209, 0, 0, 0, 0, 0,
	0, 288, 210, 483, 603, 485, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 291, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 278, 412,
	429, 289, 402, 442, 294, 409, 284, 374, 398, 0,
	0, 280, 427, 408, 356, 335, 336, 279, 0, 393,
	313, 327, 310, 372, 0, 426, 454, 309, 445, 0,
	437, 282, 0, 436, 371, 423, 428, 357, 351, 281,
	425, 355, 350, 339, 317, 470, 340, 341, 331, 383,
	349, 384, 332, 361, 360, 362, 0, 0, 0, 0,
	0, 465, 466, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 596, 0, 0, 600, 0,
	439, 0, 632, 0, 0, 0, 0, 411, 0, 0,
	342, 0, 0, 0, 455, 0, 396, 377, 622, 0,
	0, 394, 347, 424, 385, 430, 413, 438, 390, 386,
	273, 414, 312, 358, 285, 287, 307, 314, 316, 318,
	319, 367, 368, 380, 401, 415, 416, 417, 311, 295,
	395, 296, 329, 297, 274, 303, 301, 304, 403, 305,
	276, 381, 421, 0, 324, 391, 354, 277, 353, 382,
	420, 419, 286, 446, 452, 453, 542, 0, 458, 623,
	624, 625, 467, 472, 473, 474, 476, 477, 478, 479,
	543, 560, 527, 497, 460, 551, 494, 498, 499, 563,
	0, 0, 0, 451, 343, 344, 0, 322, 270, 271,
	618, 308, 373, 565, 598, 599, 490, 0, 552, 491,
	500, 300, 524, 536, 535, 369, 450, 0, 547, 550,
	480, 617, 0, 544, 559, 621, 558, 614, 379, 0,
	400, 556, 503, 0, 548, 522, 0, 549, 518, 553,
	0, 492, 0, 407, 432, 444, 461, 464, 493, 578,
	579, 580, 275, 463, 582, 583, 584, 585, 586, 587,
	588, 581, 435, 525, 502, 528, 443, 505, 504, 0,
	0, 539, 459, 540, 541, 363, 364, 365, 366, 326,
	566, 293, 462, 389, 0, 526, 0, 0, 0, 0,
	0, 0, 0, 0, 531, 532, 529, 626, 0, 589,
	590, 0, 0, 456, 457, 321, 328, 475, 330, 292,
	378, 323, 441, 337, 0, 468, 533, 469, 592, 595,
	593, 594, 370, 333, 334, 404, 338, 348, 392, 440,
	376, 397, 290, 431, 405, 352, 519, 546, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 259,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 574, 573, 572, 571, 570, 569,
	568, 567, 0, 0, 516, 418, 302, 264, 298, 299,
	306, 615, 612, 422, 616, 0, 272, 496, 346, 0,
	387, 320, 561, 562, 0, 0, 220, 221, 222, 223,
	224, 225, 226, 227, 265, 228, 229, 230, 231, 232,
	233, 234, 237, 238, 239, 240, 241, 242, 243, 244,
	564, 235, 236, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257, 258, 0, 0, 0,
	266, 267, 268, 269, 0, 0, 260, 261, 262, 263,
	0, 0, 0, 447, 448, 449, 471, 0, 433, 495,
	613, 0, 0, 0, 0, 0, 0, 0, 545, 557,
	591, 0, 601, 602, 604, 606, 605, 608, 410, 0,
	619, 486, 487, 620, 597, 375, 0, 501, 534, 523,
	607, 489, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 315, 0, 0, 345, 538, 520, 530, 521,
	506, 507, 508, 515, 325, 509, 510, 511, 481, 512,
	482, 513, 514, 0, 537, 488, 406, 359, 555, 554,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 209, 813,
	0, 0, 0, 0, 0, 288, 210, 483, 603, 485,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	291, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 278, 412, 429, 289, 402, 442, 294, 409,
	284, 374, 398, 0, 0, 280, 427, 408, 356, 335,
	336, 279, 0, 393, 313, 327, 310, 372, 0, 426,
	454, 309, 445, 0, 437, 282, 0, 436, 371, 423,
	428, 357, 351, 281, 425, 355, 350, 339, 317, 470,
	340, 341, 331, 383, 349, 384, 332, 361, 360, 362,
	0, 0, 0, 0, 0, 465, 466, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 596,
	0, 0, 600, 0, 439, 0, 0, 0, 0, 0,
	0, 411, 0, 0, 342, 0, 0, 0, 455, 0,
	396, 377, 622, 0, 0, 394, 347, 424, 385, 430,
	413, 438, 390, 386, 273, 414, 312, 358, 285, 287,
	307, 314, 316, 318, 319, 367, 368, 380, 401, 415,
	416, 417, 311, 295, 395, 296, 329, 297, 274, 303,
	301, 304, 403, 305, 276, 381, 421, 0, 324, 391,
	354, 277, 353, 382, 420, 419, 286, 446, 452, 453,
	542, 0, 458, 623, 624, 625, 467, 472, 473, 474,
	476, 477, 478, 479, 543, 560, 527, 497, 460, 551,
	494, 498, 499, 563, 0, 0, 0, 451, 343, 344,
	0, 322, 270, 271, 618, 308, 373, 565, 598, 599,
	490, 0, 552, 491, 500, 300, 524, 536, 535, 369,
	450, 0, 547, 550, 480, 617, 0, 544, 559, 621,
	558, 614, 379, 0, 400, 556, 503, 0, 548, 522,
	0, 549, 518, 553, 0, 492, 0, 407, 432, 444,
	461, 464, 493, 578, 579, 580, 275, 463, 582, 583,
	584, 585, 586, 587, 588, 581, 435, 525, 502, 528,
	443, 505, 504, 0, 0, 539, 459, 540, 541, 363,
	364, 365, 366, 326, 566, 293, 462, 389, 0, 526,
	0, 0, 0, 0, 0, 0, 0, 0, 531, 532,
	529, 626, 0, 589, 590, 0, 0, 456, 457, 321,
	328, 475, 330, 292, 378, 323, 441, 337, 0, 468,
	533, 469, 592, 595, 593, 594, 370, 333, 334, 404,
	338, 348, 392, 440, 376, 397, 290, 431, 405, 352,
	519, 546, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 259, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 574, 573,
	572, 571, 570, 569, 568, 567, 0, 0, 516, 418,
	302, 264, 298, 299, 306, 615, 612, 422, 616, 0,
	272, 496, 346, 0, 387, 320, 561, 562, 0, 0,
	220, 221, 222, 223, 224, 225, 226, 227, 265, 228,
	229, 230, 231, 232, 233, 234, 237, 238, 239, 240,
	241, 242, 243, 244, 564, 235, 236, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 255, 256, 257,
	258, 0, 0, 0, 266, 267, 268, 269, 0, 0,
	260, 261, 262, 263, 0, 0, 0, 447, 448, 449,
	471, 0, 433, 495, 613, 0, 0, 0, 0, 0,
	0, 0, 545, 557, 591, 0, 601, 602, 604, 606,
	605, 608, 410, 0, 619, 486, 487, 620, 597, 375,
	0, 501, 534, 523, 607, 489, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 315, 0, 0, 345,
	538, 520, 530, 521, 506, 507, 508, 515, 325, 509,
	510, 511, 481, 512, 482, 513, 514, 0, 537, 488,
	406, 359, 555, 554, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3822,
	0, 0, 209, 0, 0, 0, 0, 0, 0, 288,
	210, 483, 603, 485, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 291, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 278, 412, 429, 289,
	402, 442, 294, 409, 284, 374, 398, 0, 0, 280,
	427, 408, 356, 335, 336, 279, 0, 393, 313, 327,
	310, 372, 0, 426, 454, 309, 445, 0, 437, 282,
	0, 436, 371, 423, 428, 357, 351, 281, 425, 355,
	350, 339, 317, 470, 340, 341, 331, 383, 349, 384,
	332, 361, 360, 362, 0, 0, 0, 0, 0, 465,
	466, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 596, 0, 0, 600, 0, 439, 0,
	0, 0, 0, 0, 0, 411, 0, 0, 342, 0,
	0, 0, 455, 0, 396, 377, 622, 0, 0, 394,
	347, 424, 385, 430, 413, 438, 390, 386, 273, 414,
	312, 358, 285, 287, 307, 314, 316, 318, 319, 367,
	368, 380, 401, 415, 416, 417, 311, 295, 395, 296,
	329, 297, 274, 303, 301, 304, 403, 305, 276, 381,
	421, 0, 324, 391, 354, 277, 353, 382, 420, 419,
	286, 446, 452, 453, 542, 0, 458, 623, 624, 625,
	467, 472, 473, 474, 476, 477, 478, 479, 543, 560,
	527, 497, 460, 551, 494, 498, 499, 563, 0, 0,
	0, 451, 343, 344, 0, 322, 270, 271, 618, 308,
	373, 565, 598, 599, 490, 0, 552, 491, 500, 300,
	524, 536, 535, 369, 450, 0, 547, 550, 480, 617,
	0, 544, 559, 621, 558, 614, 379, 0, 400, 556,
	503, 0, 548, 522, 0, 549, 518, 553, 0, 492,
	0, 407, 432, 444, 461, 464, 493, 578, 579, 580,
	275, 463, 582, 583, 584, 585, 586, 587, 588, 581,
	435, 525, 502, 528, 443, 505, 504, 0, 0, 539,
	459, 540, 541, 363, 364, 365, 366, 326, 566, 293,
	462, 389, 0, 526, 0, 0, 0, 0, 0, 0,
	0, 0, 531, 532, 529, 626, 0, 589, 590, 0,
	0, 456, 457, 321, 328, 475, 330, 292, 378, 323,
	441, 337, 0, 468, 533, 469, 592, 595, 593, 594,
	370, 333, 334, 404, 338, 348, 392, 440, 376, 397,
	290, 431, 405, 352, 519, 546, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 259, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 574, 573, 572, 571, 570, 569, 568, 567,
	0, 0, 516, 418, 302, 264, 298, 299, 306, 615,
	612, 422, 616, 0, 272, 496, 346, 0, 387, 320,
	561, 562, 0, 0, 220, 221, 222, 223, 224, 225,
	226, 227, 265, 228, 229, 230, 231, 232, 233, 234,
	237, 238, 239, 240, 241, 242, 243, 244, 564, 235,
	236, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 256, 257, 258, 0, 0, 0, 266, 267,
	268, 269, 0, 0, 260, 261, 262, 263, 0, 0,
	0, 447, 448, 449, 471, 0, 433, 495, 613, 0,
	0, 0, 0, 0, 0, 0, 545, 557, 591, 0,
	601, 602, 604, 606, 605, 608, 410, 0, 619, 486,
	487, 620, 597, 375, 0, 501, 534, 523, 607, 489,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	315, 0, 0, 345, 538, 520, 530, 521, 506, 507,
	508, 515, 325, 509, 510, 511, 481, 512, 482, 513,
	514, 0, 537, 488, 406, 359, 555, 554, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 209, 0, 0, 3603,
	0, 0, 0, 288, 210, 483, 603, 485, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 291, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	278, 412, 429, 289, 402, 442, 294, 409, 284, 374,
	398, 0, 0, 280, 427, 408, 356, 335, 336, 279,
	0, 393, 313, 327, 310, 372, 0, 426, 454, 309,
	445, 0, 437, 282, 0, 436, 371, 423, 428, 357,
	351, 281, 425, 355, 350, 339, 317, 470, 340, 341,
	331, 383, 349, 384, 332, 361, 360, 362, 0, 0,
	0, 0, 0, 465, 466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 596, 0, 0,
	600, 0, 439, 0, 0, 0, 0, 0, 0, 411,
	0, 0, 342, 0, 0, 0, 455, 0, 396, 377,
	622, 0, 0, 394, 347, 424, 385, 430, 413, 438,
	390, 386, 273, 414, 312, 358, 285, 287, 307, 314,
	316, 318, 319, 367, 368, 380, 401, 415, 416, 417,
	311, 295, 395, 296, 329, 297, 274, 303, 301, 304,
	403, 305, 276, 381, 421, 0, 324, 391, 354, 277,
	353, 382, 420, 419, 286, 446, 452, 453, 542, 0,
	458, 623, 624, 625, 467, 472, 473, 474, 476, 477,
	478, 479, 543, 560, 527, 497, 460, 551, 494, 498,
	499, 563, 0, 0, 0, 451, 343, 344, 0, 322,
	270, 271, 618, 308, 373, 565, 598, 599, 490, 0,
	552, 491, 500, 300, 524, 536, 535, 369, 450, 0,
	547, 550, 480, 617, 0, 544, 559, 621, 558, 614,
	379, 0, 400, 556, 503, 0, 548, 522, 0, 549,
	518, 553, 0, 492, 0, 407, 432, 444, 461, 464,
	493, 578, 579, 580, 275, 463, 582, 583, 584, 585,
	586, 587, 588, 581, 435, 525, 502, 528, 443, 505,
	504, 0, 0, 539, 459, 540, 541, 363, 364, 365,
	366, 326, 566, 293, 462, 389, 0, 526, 0, 0,
	0, 0, 0, 0, 0, 0, 531, 532, 529, 626,
	0, 589, 590, 0, 0, 456, 457, 321, 328, 475,
	330, 292, 378, 323, 441, 337, 0, 468, 533, 469,
	592, 595, 593, 594, 370, 333, 334, 404, 338, 348,
	392, 440, 376, 397, 290, 431, 405, 352, 519, 546,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 259, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 574, 573, 572, 571,
	570, 569, 568, 567, 0, 0, 516, 418, 302, 264,
	298, 299, 306, 615, 612, 422, 616, 0, 272, 496,
	346, 0, 387, 320, 561, 562, 0, 0, 220, 221,
	222, 223, 224, 225, 226, 227, 265, 228, 229, 230,
	231, 232, 233, 234, 237, 238, 239, 240, 241, 242,
	243, 244, 564, 235, 236, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 254, 255, 256, 257, 258, 0,
	0, 0, 266, 267, 268, 269, 0, 0, 260, 261,
	262, 263, 0, 0, 0, 447, 448, 449, 471, 0,
	433, 495, 613, 0, 0, 0, 0, 0, 0, 0,
	545, 557, 591, 0, 601, 602, 604, 606, 605, 608,
	410, 0, 619, 486, 487, 620, 597, 375, 0, 501,
	534, 523, 607, 489, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 315, 0, 0, 345, 538, 520,
	530, 521, 506, 507, 508, 515, 325, 509, 510, 511,
	481, 512, 482, 513, 514, 0, 537, 488, 406, 359,
	555, 554, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	209, 0, 0, 0, 0, 0, 0, 288, 210, 483,
	603, 485, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 291, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 278, 412, 429, 289, 402, 442,
	294, 409, 284, 374, 398, 0, 0, 280, 427, 408,
	356, 335, 336, 279, 0, 393, 313, 327, 310, 372,
	0, 426, 454, 309, 445, 0, 437, 282, 0, 436,
	371, 423, 428, 357, 351, 281, 425, 355, 350, 339,
	317, 470, 340, 341, 331, 383, 349, 384, 332, 361,
	360, 362, 0, 0, 0, 0, 0, 465, 466, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 596, 0, 0, 600, 0, 439, 0, 0, 0,
	3731, 0, 0, 411, 0, 0, 342, 0, 0, 0,
	455, 0, 396, 377, 622, 0, 0, 394, 347, 424,
	385, 430, 413, 438, 390, 386, 273, 414, 312, 358,
	285, 287, 307, 314, 316, 318, 319, 367, 368, 380,
	401, 415, 416, 417, 311, 295, 395, 296, 329, 297,
	274, 303, 301, 304, 403, 305, 276, 381, 421, 0,
	324, 391, 354, 277, 353, 382, 420, 419, 286, 446,
	452, 453, 542, 0, 458, 623, 624, 625, 467, 472,
	473, 474, 476, 477, 478, 479, 543, 560, 527, 497,
	460, 551, 494, 498, 499, 563, 0, 0, 0, 451,
	343, 344, 0, 322, 270, 271, 618, 308, 373, 565,
	598, 599, 490, 0, 552, 491, 500, 300, 524, 536,
	535, 369, 450, 0, 547, 550, 480, 617, 0, 544,
	559, 621, 558, 614, 379, 0, 400, 556, 503, 0,
	548, 522, 0, 549, 518, 553, 0, 492, 0, 407,
	432, 444, 461, 464, 493, 578, 579, 580, 275, 463,
	582, 583, 584, 585, 586, 587, 588, 581, 435, 525,
	502, 528, 443, 505, 504, 0, 0, 539, 459, 540,
	541, 363, 364, 365, 366, 326, 566, 293, 462, 389,
	0, 526, 0, 0, 0, 0, 0, 0, 0, 0,
	531, 532, 529, 626, 0, 589, 590, 0, 0, 456,
	457, 321, 328, 475, 330, 292, 378, 323, 441, 337,
	0, 468, 533, 469, 592, 595, 593, 594, 370, 333,
	334, 404, 338, 348, 392, 440, 376, 397, 290, 431,
	405, 352, 519, 546, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 259, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	574, 573, 572, 571, 570, 569, 568, 567, 0, 0,
	516, 418, 302, 264, 298, 299, 306, 615, 612, 422,
	616, 0, 272, 496, 346, 0, 387, 320, 561, 562,
	0, 0, 220, 221, 222, 223, 224, 225, 226, 227,
	265, 228, 229, 230, 231, 232, 233, 234, 237, 238,
	239, 240, 241, 242, 243, 244, 564, 235, 236, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	256, 257, 258, 0, 0, 0, 266, 267, 268, 269,
	0, 0, 260, 261, 262, 263, 0, 0, 0, 447,
	448, 449, 471, 0, 433, 495, 613, 0, 0, 0,
	0, 0, 0, 0, 545, 557, 591, 0, 601, 602,
	604, 606, 605, 608, 410, 0, 619, 486, 487, 620,
	597, 375, 0, 501, 534, 523, 607, 489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 315, 0,
	0, 345, 538, 520, 530, 521, 506, 507, 508, 515,
	325, 509, 510, 511, 481, 512, 482, 513, 514, 0,
	537, 488, 406, 359, 555, 554, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3451, 0, 0, 209, 0, 0, 0, 0, 0,
	0, 288, 210, 483, 603, 485, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 291, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 278, 412,
	429, 289, 402, 442, 294, 409, 284, 374, 398, 0,
	0, 280, 427, 408, 356, 335, 336, 279, 0, 393,
	313, 327, 310, 372, 0, 426, 454, 309, 445, 0,
	437, 282, 0, 436, 371, 423, 428, 357, 351, 281,
	425, 355, 350, 339, 317, 470, 340, 341, 331, 383,
	349, 384, 332, 361, 360, 362, 0, 0, 0, 0,
	0, 465, 466, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 596, 0, 0, 600, 0,
	439, 0, 0, 0, 0, 0, 0, 411, 0, 0,
	342, 0, 0, 0, 455, 0, 396, 377, 622, 0,
	0, 394, 347, 424, 385, 430, 413, 438, 390, 386,
	273, 414, 312, 358, 285, 287, 307, 314, 316, 318,
	319, 367, 368, 380, 401, 415, 416, 417, 311, 295,
	395, 296, 329, 297, 274, 303, 301, 304, 403, 305,
	276, 381, 421, 0, 324, 391, 354, 277, 353, 382,
	420, 419, 286, 446, 452, 453, 542, 0, 458, 623,
	624, 625, 467, 472, 473, 474, 476, 477, 478, 479,
	543, 560, 527, 497, 460, 551, 494, 498, 499, 563,
	0, 0, 0, 451, 343, 344, 0, 322, 270, 271,
	618, 308, 373, 565, 598, 599, 490, 0, 552, 491,
	500, 300, 524, 536, 535, 369, 450, 0, 547, 550,
	480, 617, 0, 544, 559, 621, 558, 614, 379, 0,
	400, 556, 503, 0, 548, 522, 0, 549, 518, 553,
	0, 492, 0, 407, 432, 444, 461, 464, 493, 578,
	579, 580, 275, 463, 582, 583, 584, 585, 586, 587,
	588, 581, 435, 525, 502, 528, 443, 505, 504, 0,
	0, 539, 459, 540, 541, 363, 364, 365, 366, 326,
	566, 293, 462, 389, 0, 526, 0, 0, 0, 0,
	0, 0, 0, 0, 531, 532, 529, 626, 0, 589,
	590, 0, 0, 456, 457, 321, 328, 475, 330, 292,
	378, 323, 441, 337, 0, 468, 533, 469, 592, 595,
	593, 594, 370, 333, 334, 404, 338, 348, 392, 440,
	376, 397, 290, 431, 405, 352, 519, 546, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 259,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 574, 573, 572, 571, 570, 569,
	568, 567, 0, 0, 516, 418, 302, 264, 298, 299,
	306, 615, 612, 422, 616, 0, 272, 496, 346, 0,
	387, 320, 561, 562, 0, 0, 220, 221, 222, 223,
	224, 225, 226, 227, 265, 228, 229, 230, 231, 232,
	233, 234, 237, 238, 239, 240, 241, 242, 243, 244,
	564, 235, 236, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257, 258, 0, 0, 0,
	266, 267, 268, 269, 0, 0, 260, 261, 262, 263,
	0, 0, 0, 447, 448, 449, 471, 0, 433, 495,
	613, 0, 0, 0, 0, 0, 0, 0, 545, 557,
	591, 0, 601, 602, 604, 606, 605, 608, 410, 0,
	619, 486, 487, 620, 597, 375, 0, 501, 534, 523,
	607, 489, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 315, 0, 0, 345, 538, 520, 530, 521,
	506, 507, 508, 515, 325, 509, 510, 511, 481, 512,
	482, 513, 514, 0, 537, 488, 406, 359, 555, 554,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3618, 0, 209, 0,
	0, 0, 0, 0, 0, 288, 210, 483, 603, 485,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	291, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 278, 412, 429, 289, 402, 442, 294, 409,
	284, 374, 398, 0, 0, 280, 427, 408, 356, 335,
	336, 279, 0, 393, 313, 327, 310, 372, 0, 426,
	454, 309, 445, 0, 437, 282, 0, 436, 371, 423,
	428, 357, 351, 281, 425, 355, 350, 339, 317, 470,
	340, 341, 331, 383, 349, 384, 332, 361, 360, 362,
	0, 0, 0, 0, 0, 465, 466, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 596,
	0, 0, 600, 0, 439, 0, 0, 0, 0, 0,
	0, 411, 0, 0, 342, 0, 0, 0, 455, 0,
	396, 377, 622, 0, 0, 394, 347, 424, 385, 430,
	413, 438, 390, 386, 273, 414, 312, 358, 285, 287,
	307, 314, 316, 318, 319, 367, 368, 380, 401, 415,
	416, 417, 311, 295, 395, 296, 329, 297, 274, 303,
	301, 304, 403, 305, 276, 381, 421, 0, 324, 391,
	354, 277, 353, 382, 420, 419, 286, 446, 452, 453,
	542, 0, 458, 623, 624, 625, 467, 472, 473, 474,
	476, 477, 478, 479, 543, 560, 527, 497, 460, 551,
	494, 498, 499, 563, 0, 0, 0, 451, 343, 344,
	0, 322, 270, 271, 618, 308, 373, 565, 598, 599,
	490, 0, 552, 491, 500, 300, 524, 536, 535, 369,
	450, 0, 547, 550, 480, 617, 0, 544, 559, 621,
	558, 614, 379, 0, 400, 556, 503, 0, 548, 522,
	0, 549, 518, 553, 0, 492, 0, 407, 432, 444,
	461, 464, 493, 578, 579, 580, 275, 463, 582, 583,
	584, 585, 586, 587, 588, 581, 435, 525, 502, 528,
	443, 505, 504, 0, 0, 539, 459, 540, 541, 363,
	364, 365, 366, 326, 566, 293, 462, 389, 0, 526,
	0, 0, 0, 0, 0, 0, 0, 0, 531, 532,
	529, 626, 0, 589, 590, 0, 0, 456, 457, 321,
	328, 475, 330, 292, 378, 323, 441, 337, 0, 468,
	533, 469, 592, 595, 593, 594, 370, 333, 334, 404,
	338, 348, 392, 440, 376, 397, 290, 431, 405, 352,
	519, 546, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 259, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 574, 573,
	572, 571, 570, 569, 568, 567, 0, 0, 516, 418,
	302, 264, 298, 299, 306, 615, 612, 422, 616, 0,
	272, 496, 346, 0, 387, 320, 561, 562, 0, 0,
	220, 221, 222, 223, 224, 225, 226, 227, 265, 228,
	229, 230, 231, 232, 233, 234, 237, 238, 239, 240,
	241, 242, 243, 244, 564, 235, 236, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 255, 256, 257,
	258, 0, 0, 0, 266, 267, 268, 269, 0, 0,
	260, 261, 262, 263, 0, 0, 0, 447, 448, 449,
	471, 0, 433, 495, 613, 0, 0, 0, 0, 0,
	0, 0, 545, 557, 591, 0, 601, 602, 604, 606,
	605, 608, 410, 0, 619, 486, 487, 620, 597, 375,
	0, 501, 534, 523, 607, 489, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 315, 0, 0, 345,
	538, 520, 530, 521, 506, 507, 508, 515, 325, 509,
	510, 511, 481, 512, 482, 513, 514, 0, 537, 488,
	406, 359, 555, 554, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 209, 0, 0, 0, 0, 0, 0, 288,
	210, 483, 603, 485, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 291, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 278, 412, 429, 289,
	402, 442, 294, 409, 284, 374, 398, 0, 0, 280,
	427, 408, 356, 335, 336, 279, 0, 393, 313, 327,
	310, 372, 0, 426, 454, 309, 445, 0, 437, 282,
	0, 436, 371, 423, 428, 357, 351, 281, 425, 355,
	350, 339, 317, 470, 340, 341, 331, 383, 349, 384,
	332, 361, 360, 362, 0, 0, 0, 0, 0, 465,
	466, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 596, 0, 0, 600, 0, 439, 0,
	0, 0, 3539, 0, 0, 411, 0, 0, 342, 0,
	0, 0, 455, 0, 396, 377, 622, 0, 0, 394,
	347, 424, 385, 430, 413, 438, 390, 386, 273, 414,
	312, 358, 285, 287, 307, 314, 316, 318, 319, 367,
	368, 380, 401, 415, 416, 417, 311, 295, 395, 296,
	329, 297, 274, 303, 301, 304, 403, 305, 276, 381,
	421, 0, 324, 391, 354, 277, 353, 382, 420, 419,
	286, 446, 452, 453, 542, 0, 458, 623, 624, 625,
	467, 472, 473, 474, 476, 477, 478, 479, 543, 560,
	527, 497, 460, 551, 494, 498, 499, 563, 0, 0,
	0, 451, 343, 344, 0, 322, 270, 271, 618, 308,
	373, 565, 598, 599, 490, 0, 552, 491, 500, 300,
	524, 536, 535, 369, 450, 0, 547, 550, 480, 617,
	0, 544, 559, 621, 558, 614, 379, 0, 400, 556,
	503, 0, 548, 522, 0, 549, 518, 553, 0, 492,
	0, 407, 432, 444, 461, 464, 493, 578, 579, 580,
	275, 463, 582, 583, 584, 585, 586, 587, 588, 581,
	435, 525, 502, 528, 443, 505, 504, 0, 0, 539,
	459, 540, 541, 363, 364, 365, 366, 326, 566, 293,
	462, 389, 0, 526, 0, 0, 0, 0, 0, 0,
	0, 0, 531, 532, 529, 626, 0, 589, 590, 0,
	0, 456, 457, 321, 328, 475, 330, 292, 378, 323,
	441, 337, 0, 468, 533, 469, 592, 595, 593, 594,
	370, 333, 334, 404, 338, 348, 392, 440, 376, 397,
	290, 431, 405, 352, 519, 546, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 259, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 574, 573, 572, 571, 570, 569, 568, 567,
	0, 0, 516, 418, 302, 264, 298, 299, 306, 615,
	612, 422, 616, 0, 272, 496, 346, 0, 387, 320,
	561, 562, 0, 0, 220, 221, 222, 223, 224, 225,
	226, 227, 265, 228, 229, 230, 231, 232, 233, 234,
	237, 238, 239, 240, 241, 242, 243, 244, 564, 235,
	236, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 256, 257, 258, 0, 0, 0, 266, 267,
	268, 269, 0, 0, 260, 261, 262, 263, 0, 0,
	0, 447, 448, 449, 471, 0, 433, 495, 613, 0,
	0, 0, 0, 0, 0, 0, 545, 557, 591, 0,
	601, 602, 604, 606, 605, 608, 410, 0, 619, 486,
	487, 620, 597, 375, 0, 501, 534, 523, 607, 489,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	315, 0, 0, 345, 538, 520, 530, 521, 506, 507,
	508, 515, 325, 509, 510, 511, 481, 512, 482, 513,
	514, 0, 537, 488, 406, 359, 555, 554, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 209, 0, 0, 3065,
	0, 0, 0, 288, 210, 483, 603, 485, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 291, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	278, 412, 429, 289, 402, 442, 294, 409, 284, 374,
	398, 0, 0, 280, 427, 408, 356, 335, 336, 279,
	0, 393, 313, 327, 310, 372, 0, 426, 454, 309,
	445, 0, 437, 282, 0, 436, 371, 423, 428, 357,
	351, 281, 425, 355, 350, 339, 317, 470, 340, 341,
	331, 383, 349, 384, 332, 361, 360, 362, 0, 0,
	0, 0, 0, 465, 466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 596, 0, 0,
	600, 0, 439, 0, 0, 0, 0, 0, 0, 411,
	0, 0, 342, 0, 0, 0, 455, 0, 396, 377,
	622, 0, 0, 394, 347, 424, 385, 430, 413, 438,
	390, 386, 273, 414, 312, 358, 285, 287, 307, 314,
	316, 318, 319, 367, 368, 380, 401, 415, 416, 417,
	311, 295, 395, 296, 329, 297, 274, 303, 301, 304,
	403, 305, 276, 381, 421, 0, 324, 391, 354, 277,
	353, 382, 420, 419, 286, 446, 452, 453, 542, 0,
	458, 623, 624, 625, 467, 472, 473, 474, 476, 477,
	478, 479, 543, 560, 527, 497, 460, 551, 494, 498,
	499, 563, 0, 0, 0, 451, 343, 344, 0, 322,
	270, 271, 618, 308, 373, 565, 598, 599, 490, 0,
	552, 491, 500, 300, 524, 536, 535, 369, 450, 0,
	547, 550, 480, 617, 0, 544, 559, 621, 558, 614,
	379, 0, 400, 556, 503, 0, 548, 522, 0, 549,
	518, 553, 0, 492, 0, 407, 432, 444, 461, 464,
	493, 578, 579, 580, 275, 463, 582, 583, 584, 585,
	586, 587, 588, 581, 435, 525, 502, 528, 443, 505,
	504, 0, 0, 539, 459, 540, 541, 363, 364, 365,
	366, 326, 566, 293, 462, 389, 0, 526, 0, 0,
	0, 0, 0, 0, 0, 0, 531, 532, 529, 626,
	0, 589, 590, 0, 0, 456, 457, 321, 328, 475,
	330, 292, 378, 323, 441, 337, 0, 468, 533, 469,
	592, 595, 593, 594, 370, 333, 334, 404, 338, 348,
	392, 440, 376, 397, 290, 431, 405, 352, 519, 546,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 259, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 574, 573, 572, 571,
	570, 569, 568, 567, 0, 0, 516, 418, 302, 264,
	298, 299, 306, 615, 612, 422, 616, 0, 272, 496,
	346, 0, 387, 320, 561, 562, 0, 0, 220, 221,
	222, 223, 224, 225, 226, 227, 265, 228, 229, 230,
	231, 232, 233, 234, 237, 238, 239, 240, 241, 242,
	243, 244, 564, 235, 236, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 254, 255, 256, 257, 258, 0,
	0, 0, 266, 267, 268, 269, 0, 0, 260, 261,
	262, 263, 0, 0, 0, 447, 448, 449, 471, 0,
	433, 495, 613, 0, 0, 0, 0, 0, 0, 0,
	545, 557, 591, 0, 601, 602, 604, 606, 605, 608,
	410, 0, 619, 486, 487, 620, 597, 375, 0, 501,
	534, 523, 607, 489, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 315, 0, 0, 345, 538, 520,
	530, 521, 506, 507, 508, 515, 325, 509, 510, 511,
	481, 512, 482, 513, 514, 0, 537, 488, 406, 359,
	555, 554, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	209, 0, 0, 0, 0, 0, 0, 288, 210, 483,
	603, 485, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 291, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3083, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 278, 412, 429, 289, 402, 442,
	294, 409, 284, 374, 398, 0, 0, 280, 427, 408,
	356, 335, 336, 279, 0, 393, 313, 327, 310, 372,
	0, 426, 454, 309, 445, 0, 437, 282, 0, 436,
	371, 423, 428, 357, 351, 281, 425, 355, 350, 339,
	317, 470, 340, 341, 331, 383, 349, 384, 332, 361,
	360, 362, 0, 0, 0, 0, 0, 465, 466, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 596, 0, 0, 600, 0, 439, 0, 0, 0,
	0, 0, 0, 411, 0, 0, 342, 0, 0, 0,
	455, 0, 396, 377, 622, 0, 0, 394, 347, 424,
	385, 430, 413, 438, 390, 386, 273, 414, 312, 358,
	285, 287, 307, 314, 316, 318, 319, 367, 368, 380,
	401, 415, 416, 417, 311, 295, 395, 296, 329, 297,
	274, 303, 301, 304, 403, 305, 276, 381, 421, 0,
	324, 391, 354, 277, 353, 382, 420, 419, 286, 446,
	452, 453, 542, 0, 458, 623, 624, 625, 467, 472,
	473, 474, 476, 477, 478, 479, 543, 560, 527, 497,
	460, 551, 494, 498, 499, 563, 0, 0, 0, 451,
	343, 344, 0, 322, 270, 271, 618, 308, 373, 565,
	598, 599, 490, 0, 552, 491, 500, 300, 524, 536,
	535, 369, 450, 0, 547, 550, 480, 617, 0, 544,
	559, 621, 558, 614, 379, 0, 400, 556, 503, 0,
	548, 522, 0, 549, 518, 553, 0, 492, 0, 407,
	432, 444, 461, 464, 493, 578, 579, 580, 275, 463,
	582, 583, 584, 585, 586, 587, 588, 581, 435, 525,
	502, 528, 443, 505, 504, 0, 0, 539, 459, 540,
	541, 363, 364, 365, 366, 326, 566, 293, 462, 389,
	0, 526, 0, 0, 0, 0, 0, 0, 0, 0,
	531, 532, 529, 626, 0, 589, 590, 0, 0, 456,
	457, 321, 328, 475, 330, 292, 378, 323, 441, 337,
	0, 468, 533, 469, 592, 595, 593, 594, 370, 333,
	334, 404, 338, 348, 392, 440, 376, 397, 290, 431,
	405, 352, 519, 546, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 259, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	574, 573, 572, 571, 570, 569, 568, 567, 0, 0,
	516, 418, 302, 264, 298, 299, 306, 615, 612, 422,
	616, 0, 272, 496, 346, 0, 387, 320, 561, 562,
	0, 0, 220, 221, 222, 223, 224, 225, 226, 227,
	265, 228, 229, 230, 231, 232, 233, 234, 237, 238,
	239, 240, 241, 242, 243, 244, 564, 235, 236, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	256, 257, 258, 0, 0, 0, 266, 267, 268, 269,
	0, 0, 260, 261, 262, 263, 0, 0, 0, 447,
	448, 449, 471, 0, 433, 495, 613, 0, 0, 0,
	0, 0, 0, 0, 545, 557, 591, 0, 601, 602,
	604, 606, 605, 608, 410, 0, 619, 486, 487, 620,
	597, 375, 0, 501, 534, 523, 607, 489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 315, 0,
	0, 345, 538, 520, 530, 521, 506, 507, 508, 515,
	325, 509, 510, 511, 481, 512, 482, 513, 514, 0,
	537, 488, 406, 359, 555, 554, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1957, 0, 0, 209, 0, 0, 0, 0, 0,
	0, 288, 210, 483, 603, 485, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 291, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 278, 412,
	429, 289, 402, 442, 294, 409, 284, 374, 398, 0,
	0, 280, 427, 408, 356, 335, 336, 279, 0, 393,
	313, 327, 310, 372, 0, 426, 454, 309, 445, 0,
	437, 282, 0, 436, 371, 423, 428, 357, 351, 281,
	425, 355, 350, 339, 317, 470, 340, 341, 331, 383,
	349, 384, 332, 361, 360, 362, 0, 0, 0, 0,
	0, 465, 466, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 596, 0, 0, 600, 0,
	439, 0, 0, 0, 0, 0, 0, 411, 0, 0,
	342, 0, 0, 0, 455, 0, 396, 377, 622, 0,
	0, 394, 347, 424, 385, 430, 413, 438, 390, 386,
	273, 414, 312, 358, 285, 287, 307, 314, 316, 318,
	319, 367, 368, 380, 401, 415, 416, 417, 311, 295,
	395, 296, 329, 297, 274, 303, 301, 304, 403, 305,
	276, 381, 421, 0, 324, 391, 354, 277, 353, 382,
	420, 419, 286, 446, 452, 453, 542, 0, 458, 623,
	624, 625, 467, 472, 473, 474, 476, 477, 478, 479,
	543, 560, 527, 497, 460, 551, 494, 498, 499, 563,
	0, 0, 0, 451, 343, 344, 0, 322, 270, 271,
	618, 308, 373, 565, 598, 599, 490, 0, 552, 491,
	500, 300, 524, 536, 535, 369, 450, 0, 547, 550,
	480, 617, 0, 544, 559, 621, 558, 614, 379, 0,
	400, 556, 503, 0, 548, 522, 0, 549, 518, 553,
	0, 492, 0, 407, 432, 444, 461, 464, 493, 578,
	579, 580, 275, 463, 582, 583, 584, 585, 586, 587,
	588, 581, 435, 525, 502, 528, 443, 505, 504, 0,
	0, 539, 459, 540, 541, 363, 364, 365, 366, 326,
	566, 293, 462, 389, 0, 526, 0, 0, 0, 0,
	0, 0, 0, 0, 531, 532, 529, 626, 0, 589,
	590, 0, 0, 456, 457, 321, 328, 475, 330, 292,
	378, 323, 441, 337, 0, 468, 533, 469, 592, 595,
	593, 594, 370, 333, 334, 404, 338, 348, 392, 440,
	376, 397, 290, 431, 405, 352, 519, 546, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 259,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 574, 573, 572, 571, 570, 569,
	568, 567, 0, 0, 516, 418, 302, 264, 298, 299,
	306, 615, 612, 422, 616, 0, 272, 496, 346, 0,
	387, 320, 561, 562, 0, 0, 220, 221, 222, 223,
	224, 225, 226, 227, 265, 228, 229, 230, 231, 232,
	233, 234, 237, 238, 239, 240, 241, 242, 243, 244,
	564, 235, 236, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257, 258, 0, 0, 0,
	266, 267, 268, 269, 0, 0, 260, 261, 262, 263,
	0, 0, 0, 447, 448, 449, 471, 0, 433, 495,
	613, 0, 0, 0, 0, 0, 0, 0, 545, 557,
	591, 0, 601, 602, 604, 606, 605, 608, 410, 0,
	619, 486, 487, 620, 597, 375, 0, 501, 534, 523,
	607, 489, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 315, 0, 0, 345, 538, 520, 530, 521,
	506, 507, 508, 515, 325, 509, 510, 511, 481, 512,
	482, 513, 514, 0, 537, 488, 406, 359, 555, 554,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 209, 0,
	0, 0, 0, 0, 0, 288, 210, 483, 603, 485,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	291, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3186, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 278, 412, 429, 289, 402, 442, 294, 409,
	284, 374, 398, 0, 0, 280, 427, 408, 356, 335,
	336, 279, 0, 393, 313, 327, 310, 372, 0, 426,
	454, 309, 445, 0, 437, 282, 0, 436, 371, 423,
	428, 357, 351, 281, 425, 355, 350, 339, 317, 470,
	340, 341, 331, 383, 349, 384, 332, 361, 360, 362,
	0, 0, 0, 0, 0, 465, 466, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 596,
	0, 0, 600, 0, 439, 0, 0, 0, 0, 0,
	0, 411, 0, 0, 342, 0, 0, 0, 455, 0,
	396, 377, 622, 0, 0, 394, 347, 424, 385, 430,
	413, 438, 390, 386, 273, 414, 312, 358, 285, 287,
	307, 314, 316, 318, 319, 367, 368, 380, 401, 415,
	416, 417, 311, 295, 395, 296, 329, 297, 274, 303,
	301, 304, 403, 305, 276, 381, 421, 0, 324, 391,
	354, 277, 353, 382, 420, 419, 286, 446, 452, 453,
	542, 0, 458, 623, 624, 625, 467, 472, 473, 474,
	476, 477, 478, 479, 543, 560, 527, 497, 460, 551,
	494, 498, 499, 563, 0, 0, 0, 451, 343, 344,
	0, 322, 270, 271, 618, 308, 373, 565, 598, 599,
	490, 0, 552, 491, 500, 300, 524, 536, 535, 369,
	450, 0, 547, 550, 480, 617, 0, 544, 559, 621,
	558, 614, 379, 0, 400, 556, 503, 0, 548, 522,
	0, 549, 518, 553, 0, 492, 0, 407, 432, 444,
	461, 464, 493, 578, 579, 580, 275, 463, 582, 583,
	584, 585, 586, 587, 588, 581, 435, 525, 502, 528,
	443, 505, 504, 0, 0, 539, 459, 540, 541, 363,
	364, 365, 366, 326, 566, 293, 462, 389, 0, 526,
	0, 0, 0, 0, 0, 0, 0, 0, 531, 532,
	529, 626, 0, 589, 590, 0, 0, 456, 457, 321,
	328, 475, 330, 292, 378, 323, 441, 337, 0, 468,
	533, 469, 592, 595, 593, 594, 370, 333, 334, 404,
	338, 348, 392, 440, 376, 397, 290, 431, 405, 352,
	519, 546, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 259, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 574, 573,
	572, 571, 570, 569, 568, 567, 0, 0, 516, 418,
	302, 264, 298, 299, 306, 615, 612, 422, 616, 0,
	272, 496, 346, 0, 387, 320, 561, 562, 0, 0,
	220, 221, 222, 223, 224, 225, 226, 227, 265, 228,
	229, 230, 231, 232, 233, 234, 237, 238, 239, 240,
	241, 242, 243, 244, 564, 235, 236, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 255, 256, 257,
	258, 0, 0, 0, 266, 267, 268, 269, 0, 0,
	260, 261, 262, 263, 0, 0, 0, 447, 448, 449,
	471, 0, 433, 495, 613, 0, 0, 0, 0, 0,
	0, 0, 545, 557, 591, 0, 601, 602, 604, 606,
	605, 608, 410, 0, 619, 486, 487, 620, 597, 375,
	0, 501, 534, 523, 607, 489, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 315, 0, 0, 345,
	538, 520, 530, 521, 506, 507, 508, 515, 325, 509,
	510, 511, 481, 512, 482, 513, 514, 0, 537, 488,
	406, 359, 555, 554, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 209, 0, 0, 0, 0, 0, 0, 288,
	210, 483, 603, 485, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 291, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2930, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 278, 412, 429, 289,
	402, 442, 294, 409, 284, 374, 398, 0, 0, 280,
	427, 408, 356, 335, 336, 279, 0, 393, 313, 327,
	310, 372, 0, 426, 454, 309, 445, 0, 437, 282,
	0, 436, 371, 423, 428, 357, 351, 281, 425, 355,
	350, 339, 317, 470, 340, 341, 331, 383, 349, 384,
	332, 361, 360, 362, 0, 0, 0, 0, 0, 465,
	466, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 596, 0, 0, 600, 0, 439, 0,
	0, 0, 0, 0, 0, 411, 0, 0, 342, 0,
	0, 0, 455, 0, 396, 377, 622, 0, 0, 394,
	347, 424, 385, 430, 413, 438, 390, 386, 273, 414,
	312, 358, 285, 287, 307, 314, 316, 318, 319, 367,
	368, 380, 401, 415, 416, 417, 311, 295, 395, 296,
	329, 297, 274, 303, 301, 304, 403, 305, 276, 381,
	421, 0, 324, 391, 354, 277, 353, 382, 420, 419,
	286, 446, 452, 453, 542, 0, 458, 623, 624, 625,
	467, 472, 473, 474, 476, 477, 478, 479, 543, 560,
	527, 497, 460, 551, 494, 498, 499, 563, 0, 0,
	0, 451, 343, 344, 0, 322, 270, 271, 618, 308,
	373, 565, 598, 599, 490, 0, 552, 491, 500, 300,
	524, 536, 535, 369, 450, 0, 547, 550, 480, 617,
	0, 544, 559, 621, 558, 614, 379, 0, 400, 556,
	503, 0, 548, 522, 0, 549, 518, 553, 0, 492,
	0, 407, 432, 444, 461, 464, 493, 578, 579, 580,
	275, 463, 582, 583, 584, 585, 586, 587, 588, 581,
	435, 525, 502, 528, 443, 505, 504, 0, 0, 539,
	459, 540, 541, 363, 364, 365, 366, 326, 566, 293,
	462, 389, 0, 526, 0, 0, 0, 0, 0, 0,
	0, 0, 531, 532, 529, 626, 0, 589, 590, 0,
	0, 456, 457, 321, 328, 475, 330, 292, 378, 323,
	441, 337, 0, 468, 533, 469, 592, 595, 593, 594,
	370, 333, 334, 404, 338, 348, 392, 440, 376, 397,
	290, 431, 405, 352, 519, 546, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 259, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 574, 573, 572, 571, 570, 569, 568, 567,
	0, 0, 516, 418, 302, 264, 298, 299, 306, 615,
	612, 422, 616, 0, 272, 496, 346, 0, 387, 320,
	561, 562, 0, 0, 220, 221, 222, 223, 224, 225,
	226, 227, 265, 228, 229, 230, 231, 232, 233, 234,
	237, 238, 239, 240, 241, 242, 243, 244, 564, 235,
	236, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 256, 257, 258, 0, 0, 0, 266, 267,
	268, 269, 0, 0, 260, 261, 262, 263, 0, 0,
	0, 447, 448, 449, 471, 0, 433, 495, 613, 0,
	0, 0, 0, 0, 0, 0, 545, 557, 591, 0,
	601, 602, 604, 606, 605, 608, 410, 0, 619, 486,
	487, 620, 597, 375, 0, 501, 534, 523, 607, 489,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	315, 0, 0, 345, 538, 520, 530, 521, 506, 507,
	508, 515, 325, 509, 510, 511, 481, 512, 482, 513,
	514, 0, 537, 488, 406, 359, 555, 554, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 209, 0, 0, 1467,
	0, 0, 0, 288, 210, 483, 603, 485, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 291, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	278, 412, 429, 289, 402, 442, 294, 409, 284, 374,
	398, 0, 0, 280, 427, 408, 356, 335, 336, 279,
	0, 393, 313, 327, 310, 372, 0, 426, 454, 309,
	445, 0, 437, 282, 0, 436, 371, 423, 428, 357,
	351, 281, 425, 355, 350, 339, 317, 470, 340, 341,
	331, 383, 349, 384, 332, 361, 360, 362, 0, 0,
	0, 0, 0, 465, 466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 596, 0, 0,
	600, 0, 439, 0, 0, 0, 0, 0, 0, 411,
	0, 0, 342, 0, 0, 0, 455, 0, 396, 377,
	622, 0, 0, 394, 347, 424, 385, 430, 413, 438,
	390, 386, 273, 414, 312, 358, 285, 287, 307, 314,
	316, 318, 319, 367, 368, 380, 401, 415, 416, 417,
	311, 295, 395, 296, 329, 297, 274, 303, 301, 304,
	403, 305, 276, 381, 421, 0, 324, 391, 354, 277,
	353, 382, 420, 419, 286, 446, 452, 453, 542, 0,
	458, 623, 624, 625, 467, 472, 473, 474, 476, 477,
	478, 479, 543, 560, 527, 497, 460, 551, 494, 498,
	499, 563, 0, 0, 0, 451, 343, 344, 0, 322,
	270, 271, 618, 308, 373, 565, 598, 599, 490, 0,
	552, 491, 500, 300, 524, 536, 535, 369, 450, 0,
	547, 550, 480, 617, 0, 544, 559, 621, 558, 614,
	379, 0, 400, 556, 503, 0, 548, 522, 0, 549,
	518, 553, 0, 492, 0, 407, 432, 444, 461, 464,
	493, 578, 579, 580, 275, 463, 582, 583, 584, 585,
	586, 587, 588, 581, 435, 525, 502, 528, 443, 505,
	504, 0, 0, 539, 459, 540, 541, 363, 364, 365,
	366, 326, 566, 293, 462, 389, 0, 526, 0, 0,
	0, 0, 0, 0, 0, 0, 531, 532, 529, 626,
	0, 589, 590, 0, 0, 456, 457, 321, 328, 475,
	330, 292, 378, 323, 441, 337, 0, 468, 533, 469,
	592, 595, 593, 594, 370, 333, 334, 404, 338, 348,
	392, 440, 376, 397, 290, 431, 405, 352, 519, 546,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 259, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 574, 573, 572, 571,
	570, 569, 568, 567, 0, 0, 516, 418, 302, 264,
	298, 299, 306, 615, 612, 422, 616, 0, 272, 496,
	346, 0, 387, 320, 561, 562, 0, 0, 220, 221,
	222, 223, 224, 225, 226, 227, 265, 228, 229, 230,
	231, 232, 233, 234, 237, 238, 239, 240, 241, 242,
	243, 244, 564, 235, 236, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 254, 255, 256, 257, 258, 0,
	0, 0, 266, 267, 268, 269, 0, 0, 260, 261,
	262, 263, 0, 0, 0, 447, 448, 449, 471, 0,
	433, 495, 613, 0, 0, 0, 0, 0, 0, 0,
	545, 557, 591, 0, 601, 602, 604, 606, 605, 608,
	410, 0, 619, 486, 487, 620, 597, 375, 0, 501,
	534, 523, 607, 489, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 315, 0, 0, 345, 538, 520,
	530, 521, 506, 507, 508, 515, 325, 509, 510, 511,
	481, 512, 482, 513, 514, 0, 537, 488, 406, 359,
	555, 554, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	209, 0, 0, 2399, 0, 0, 0, 288, 210, 483,
	603, 485, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 291, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 278, 412, 429, 289, 402, 442,
	294, 409, 284, 374, 398, 0, 0, 280, 427, 408,
	356, 335, 336, 279, 0, 393, 313, 327, 310, 372,
	0, 426, 454, 309, 445, 0, 437, 282, 0, 436,
	371, 423, 428, 357, 351, 281, 425, 355, 350, 339,
	317, 470, 340, 341, 331, 383, 349, 384, 332, 361,
	360, 362, 0, 0, 0, 0, 0, 465, 466, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 596, 0, 0, 600, 0, 439, 0, 0, 0,
	0, 0, 0, 411, 0, 0, 342, 0, 0, 0,
	455, 0, 396, 377, 622, 0, 0, 394, 347, 424,
	385, 430, 413, 438, 390, 386, 273, 414, 312, 358,
	285, 287, 307, 314, 316, 318, 319, 367, 368, 380,
	401, 415, 416, 417, 311, 295, 395, 296, 329, 297,
	274, 303, 301, 304, 403, 305, 276, 381, 421, 0,
	324, 391, 354, 277, 353, 382, 420, 419, 286, 446,
	452, 453, 542, 0, 458, 623, 624, 625, 467, 472,
	473, 474, 476, 477, 478, 479, 543, 560, 527, 497,
	460, 551, 494, 498, 499, 563, 0, 0, 0, 451,
	343, 344, 0, 322, 270, 271, 618, 308, 373, 565,
	598, 599, 490, 0, 552, 491, 500, 300, 524, 536,
	535, 369, 450, 0, 547, 550, 480, 617, 0, 544,
	559, 621, 558, 614, 379, 0, 400, 556, 503, 0,
	548, 522, 0, 549, 518, 553, 0, 492, 0, 407,
	432, 444, 461, 464, 493, 578, 579, 580, 275, 463,
	582, 583, 584, 585, 586, 587, 588, 581, 435, 525,
	502, 528, 443, 505, 504, 0, 0, 539, 459, 540,
	541, 363, 364, 365, 366, 326, 566, 293, 462, 389,
	0, 526, 0, 0, 0, 0, 0, 0, 0, 0,
	531, 532, 529, 626, 0, 589, 590, 0, 0, 456,
	457, 321, 328, 475, 330, 292, 378, 323, 441, 337,
	0, 468, 533, 469, 592, 595, 593, 594, 370, 333,
	334, 404, 338, 348, 392, 440, 376, 397, 290, 431,
	405, 352, 519, 546, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 259, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	574, 573, 572, 571, 570, 569, 568, 567, 0, 0,
	516, 418, 302, 264, 298, 299, 306, 615, 612, 422,
	616, 0, 272, 496, 346, 0, 387, 320, 561, 562,
	0, 0, 220, 221, 222, 223, 224, 225, 226, 227,
	265, 228, 229, 230, 231, 232, 233, 234, 237, 238,
	239, 240, 241, 242, 243, 244, 564, 235, 236, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	256, 257, 258, 0, 0, 0, 266, 267, 268, 269,
	0, 0, 260, 261, 262, 263, 0, 0, 0, 447,
	448, 449, 471, 0, 433, 495, 613, 0, 0, 0,
	0, 0, 0, 0, 545, 557, 591, 0, 601, 602,
	604, 606, 605, 608, 410, 0, 619, 486, 487, 620,
	597, 375, 0, 501, 534, 523, 607, 489, 0, 0,
	2752, 0, 0, 0, 0, 0, 0, 0, 315, 0,
	0, 345, 538, 520, 530, 521, 506, 507, 508, 515,
	325, 509, 510, 511, 481, 512, 482, 513, 514, 0,
	537, 488, 406, 359, 555, 554, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 209, 0, 0, 0, 0, 0,
	0, 288, 210, 483, 603, 485, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 291, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 278, 412,
	429, 289, 402, 442, 294, 409, 284, 374, 398, 0,
	0, 280, 427, 408, 356, 335, 336, 279, 0, 393,
	313, 327, 310, 372, 0, 426, 454, 309, 445, 0,
	437, 282, 0, 436, 371, 423, 428, 357, 351, 281,
	425, 355, 350, 339, 317, 470, 340, 341, 331, 383,
	349, 384, 332, 361, 360, 362, 0, 0, 0, 0,
	0, 465, 466, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 596, 0, 0, 600, 0,
	439, 0, 0, 0, 0, 0, 0, 411, 0, 0,
	342, 0, 0, 0, 455, 0, 396, 377, 622, 0,
	0, 394, 347, 424, 385, 430, 413, 438, 390, 386,
	273, 414, 312, 358, 285, 287, 307, 314, 316, 318,
	319, 367, 368, 380, 401, 415, 416, 417, 311, 295,
	395, 296, 329, 297, 274, 303, 301, 304, 403, 305,
	276, 381, 421, 0, 324, 391, 354, 277, 353, 382,
	420, 419, 286, 446, 452, 453, 542, 0, 458, 623,
	624, 625, 467, 472, 473, 474, 476, 477, 478, 479,
	543, 560, 527, 497, 460, 551, 494, 498, 499, 563,
	0, 0, 0, 451, 343, 344, 0, 322, 270, 271,
	618, 308, 373, 565, 598, 599, 490, 0, 552, 491,
	500, 300, 524, 536, 535, 369, 450, 0, 547, 550,
	480, 617, 0, 544, 559, 621, 558, 614, 379, 0,
	400, 556, 503, 0, 548, 522, 0, 549, 518, 553,
	0, 492, 0, 407, 432, 444, 461, 464, 493, 578,
	579, 580, 275, 463, 582, 583, 584, 585, 586, 587,
	588, 581, 435, 525, 502, 528, 443, 505, 504, 0,
	0, 539, 459, 540, 541, 363, 364, 365, 366, 326,
	566, 293, 462, 389, 0, 526, 0, 0, 0, 0,
	0, 0, 0, 0, 531, 532, 529, 626, 0, 589,
	590, 0, 0, 456, 457, 321, 328, 475, 330, 292,
	378, 323, 441, 337, 0, 468, 533, 469, 592, 595,
	593, 594, 370, 333, 334, 404, 338, 348, 392, 440,
	376, 397, 290, 431, 405, 352, 519, 546, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 259,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 574, 573, 572, 571, 570, 569,
	568, 567, 0, 0, 516, 418, 302, 264, 298, 299,
	306, 615, 612, 422, 616, 0, 272, 496, 346, 0,
	387, 320, 561, 562, 0, 0, 220, 221, 222, 223,
	224, 225, 226, 227, 265, 228, 229, 230, 231, 232,
	233, 234, 237, 238, 239, 240, 241, 242, 243, 244,
	564, 235, 236, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257, 258, 0, 0, 0,
	266, 267, 268, 269, 0, 0, 260, 261, 262, 263,
	0, 0, 0, 447, 448, 449, 471, 0, 433, 495,
	613, 0, 0, 0, 0, 0, 0, 0, 545, 557,
	591, 0, 601, 602, 604, 606, 605, 608, 410, 0,
	619, 486, 487, 620, 597, 375, 0, 501, 534, 523,
	607, 489, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 315, 0, 0, 345, 538, 520, 530, 521,
	506, 507, 508, 515, 325, 509, 510, 511, 481, 512,
	482, 513, 514, 0, 537, 488, 406, 359, 555, 554,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 209, 0,
	0, 0, 0, 0, 0, 288, 210, 483, 603, 485,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	291, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2096, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 278, 412, 429, 289, 402, 442, 294, 409,
	284, 374, 398, 0, 0, 280, 427, 408, 356, 335,
	336, 279, 0, 393, 313, 327, 310, 372, 0, 426,
	454, 309, 445, 0, 437, 282, 0, 436, 371, 423,
	428, 357, 351, 281, 425, 355, 350, 339, 317, 470,
	340, 341, 331, 383, 349, 384, 332, 361, 360, 362,
	0, 0, 0, 0, 0, 465, 466, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 596,
	0, 0, 600, 0, 439, 0, 0, 0, 0, 0,
	0, 411, 0, 0, 342, 0, 0, 0, 455, 0,
	396, 377, 622, 0, 0, 394, 347, 424, 385, 430,
	413, 438, 390, 386, 273, 414, 312, 358, 285, 287,
	307, 314, 316, 318, 319, 367, 368, 380, 401, 415,
	416, 417, 311, 295, 395, 296, 329, 297, 274, 303,
	301, 304, 403, 305, 276, 381, 421, 0, 324, 391,
	354, 277, 353, 382, 420, 419, 286, 446, 452, 453,
	542, 0, 458, 623, 624, 625, 467, 472, 473, 474,
	476, 477, 478, 479, 543, 560, 527, 497, 460, 551,
	494, 498, 499, 563, 0, 0, 0, 451, 343, 344,
	0, 322, 270, 271, 618, 308, 373, 565, 598, 599,
	490, 0, 552, 491, 500, 300, 524, 536, 535, 369,
	450, 0, 547, 550, 480, 617, 0, 544, 559, 621,
	558, 614, 379, 0, 400, 556, 503, 0, 548, 522,
	0, 549, 518, 553, 0, 492, 0, 407, 432, 444,
	461, 464, 493, 578, 579, 580, 275, 463, 582, 583,
	584, 585, 586, 587, 588, 581, 435, 525, 502, 528,
	443, 505, 504, 0, 0, 539, 459, 540, 541, 363,
	364, 365, 366, 326, 566, 293, 462, 389, 0, 526,
	0, 0, 0, 0, 0, 0, 0, 0, 531, 532,
	529, 626, 0, 589, 590, 0, 0, 456, 457, 321,
	328, 475, 330, 292, 378, 323, 441, 337, 0, 468,
	533, 469, 592, 595, 593, 594, 370, 333, 334, 404,
	338, 348, 392, 440, 376, 397, 290, 431, 405, 352,
	519, 546, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 259, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 574, 573,
	572, 571, 570, 569, 568, 567, 0, 0, 516, 418,
	302, 264, 298, 299, 306, 615, 612, 422, 616, 0,
	272, 496, 346, 0, 387, 320, 561, 562, 0, 0,
	220, 221, 222, 223, 224, 225, 226, 227, 265, 228,
	229, 230, 231, 232, 233, 234, 237, 238, 239, 240,
	241, 242, 243, 244, 564, 235, 236, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 255, 256, 257,
	258, 0, 0, 0, 266, 267, 268, 269, 0, 0,
	260, 261, 262, 263, 0, 0, 0, 447, 448, 449,
	471, 0, 433, 495, 613, 0, 0, 0, 0, 0,
	0, 0, 545, 557, 591, 0, 601, 602, 604, 606,
	605, 608, 410, 0, 619, 486, 487, 620, 597, 375,
	0, 501, 534, 523, 607, 489, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 315, 0, 0, 345,
	538, 520, 530, 521, 506, 507, 508, 515, 325, 509,
	510, 511, 481, 512, 482, 513, 514, 0, 537, 488,
	406, 359, 555, 554, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 209, 0, 0, 2515, 0, 0, 0, 288,
	210, 483, 603, 485, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 291, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 278, 412, 429, 289,
	402, 442, 294, 409, 284, 374, 398, 0, 0, 280,
	427, 408, 356, 335, 336, 279, 0, 393, 313, 327,
	310, 372, 0, 426, 454, 309, 445, 0, 437, 282,
	0, 436, 371, 423, 428, 357, 351, 281, 425, 355,
	350, 339, 317, 470, 340, 341, 331, 383, 349, 384,
	332, 361, 360, 362, 0, 0, 0, 0, 0, 465,
	466, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 596, 0, 0, 600, 0, 439, 0,
	0, 0, 0, 0, 0, 411, 0, 0, 342, 0,
	0, 0, 455, 0, 396, 377, 622, 0, 0, 394,
	347, 424, 385, 430, 413, 438, 390, 386, 273, 414,
	312, 358, 285, 287, 307, 314, 316, 318, 319, 367,
	368, 380, 401, 415, 416, 417, 311, 295, 395, 296,
	329, 297, 274, 303, 301, 304, 403, 305, 276, 381,
	421, 0, 324, 391, 354, 277, 353, 382, 420, 419,
	286, 446, 452, 453, 542, 0, 458, 623, 624, 625,
	467, 472, 473, 474, 476, 477, 478, 479, 543, 560,
	527, 497, 460, 551, 494, 498, 499, 563, 0, 0,
	0, 451, 343, 344, 0, 322, 270, 271, 618, 308,
	373, 565, 598, 599, 490, 0, 552, 491, 500, 300,
	524, 536, 535, 369, 450, 0, 547, 550, 480, 617,
	0, 544, 559, 621, 558, 614, 379, 0, 400, 556,
	503, 0, 548, 522, 0, 549, 518, 553, 0, 492,
	0, 407, 432, 444, 461, 464, 493, 578, 579, 580,
	275, 463, 582, 583, 584, 585, 586, 587, 588, 581,
	435, 525, 502, 528, 443, 505, 504, 0, 0, 539,
	459, 540, 541, 363, 364, 365, 366, 326, 566, 293,
	462, 389, 0, 526, 0, 0, 0, 0, 0, 0,
	0, 0, 531, 532, 529, 626, 0, 589, 590, 0,
	0, 456, 457, 321, 328, 475, 330, 292, 378, 323,
	441, 337, 0, 468, 533, 469, 592, 595, 593, 594,
	370, 333, 334, 404, 338, 348, 392, 440, 376, 397,
	290, 431, 405, 352, 519, 546, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 259, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 574, 573, 572, 571, 570, 569, 568, 567,
	0, 0, 516, 418, 302, 264, 298, 299, 306, 615,
	612, 422, 616, 0, 272, 496, 346, 0, 387, 320,
	561, 562, 0, 0, 220, 221, 222, 223, 224, 225,
	226, 227, 265, 228, 229, 230, 231, 232, 233, 234,
	237, 238, 239, 240, 241, 242, 243, 244, 564, 235,
	236, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 256, 257, 258, 0, 0, 0, 266, 267,
	268, 269, 0, 0, 260, 261, 262, 263, 0, 0,
	0, 447, 448, 449, 471, 0, 433, 495, 613, 0,
	0, 0, 0, 0, 0, 0, 545, 557, 591, 0,
	601, 602, 604, 606, 605, 608, 410, 0, 619, 486,
	487, 620, 597, 375, 0, 501, 534, 523, 607, 489,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	315, 0, 0, 345, 538, 520, 530, 521, 506, 507,
	508, 515, 325, 509, 510, 511, 481, 512, 482, 513,
	514, 0, 537, 488, 406, 359, 555, 554, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 209, 0, 0, 0,
	0, 0, 0, 288, 210, 483, 603, 485, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 291, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2476, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	278, 412, 429, 289, 402, 442, 294, 409, 284, 374,
	398, 0, 0, 280, 427, 408, 356, 335, 336, 279,
	0, 393, 313, 327, 310, 372, 0, 426, 454, 309,
	445, 0, 437, 282, 0, 436, 371, 423, 428, 357,
	351, 281, 425, 355, 350, 339, 317, 470, 340, 341,
	331, 383, 349, 384, 332, 361, 360, 362, 0, 0,
	0, 0, 0, 465, 466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 596, 0, 0,
	600, 0, 439, 0, 0, 0, 0, 0, 0, 411,
	0, 0, 342, 0, 0, 0, 455, 0, 396, 377,
	622, 0, 0, 394, 347, 424, 385, 430, 413, 438,
	390, 386, 273, 414, 312, 358, 285, 287, 307, 314,
	316, 318, 319, 367, 368, 380, 401, 415, 416, 417,
	311, 295, 395, 296, 329, 297, 274, 303, 301, 304,
	403, 305, 276, 381, 421, 0, 324, 391, 354, 277,
	353, 382, 420, 419, 286, 446, 452, 453, 542, 0,
	458, 623, 624, 625, 467, 472, 473, 474, 476, 477,
	478, 479, 543, 560, 527, 497, 460, 551, 494, 498,
	499, 563, 0, 0, 0, 451, 343, 344, 0, 322,
	270, 271, 618, 308, 373, 565, 598, 599, 490, 0,
	552, 491, 500, 300, 524, 536, 535, 369, 450, 0,
	547, 550, 480, 617, 0, 544, 559, 621, 558, 614,
	379, 0, 400, 556, 503, 0, 548, 522, 0, 549,
	518, 553, 0, 492, 0, 407, 432, 444, 461, 464,
	493, 578, 579, 580, 275, 463, 582, 583, 584, 585,
	586, 587, 588, 581, 435, 525, 502, 528, 443, 505,
	504, 0, 0, 539, 459, 540, 541, 363, 364, 365,
	366, 326, 566, 293, 462, 389, 0, 526, 0, 0,
	0, 0, 0, 0, 0, 0, 531, 532, 529, 626,
	0, 589, 590, 0, 0, 456, 457, 321, 328, 475,
	330, 292, 378, 323, 441, 337, 0, 468, 533, 469,
	592, 595, 593, 594, 370, 333, 334, 404, 338, 348,
	392, 440, 376, 397, 290, 431, 405, 352, 519, 546,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 259, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 574, 573, 572, 571,
	570, 569, 568, 567, 0, 0, 516, 418, 302, 264,
	298, 299, 306, 615, 612, 422, 616, 0, 272, 496,
	346, 0, 387, 320, 561, 562, 0, 0, 220, 221,
	222, 223, 224, 225, 226, 227, 265, 228, 229, 230,
	231, 232, 233, 234, 237, 238, 239, 240, 241, 242,
	243, 244, 564, 235, 236, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 254, 255, 256, 257, 258, 0,
	0, 0, 266, 267, 268, 269, 0, 0, 260, 261,
	262, 263, 0, 0, 0, 447, 448, 449, 471, 0,
	433, 495, 613, 0, 0, 0, 0, 0, 0, 0,
	545, 557, 591, 0, 601, 602, 604, 606, 605, 608,
	410, 0, 619, 486, 487, 620, 597, 375, 0, 501,
	534, 523, 607, 489, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 315, 0, 0, 345, 538, 520,
	530, 521, 506, 507, 508, 515, 325, 509, 510, 511,
	481, 512, 482, 513, 514, 0, 537, 488, 406, 359,
	555, 554, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	209, 0, 0, 2474, 0, 0, 0, 288, 210, 483,
	603, 485, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 291, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 278, 412, 429, 289, 402, 442,
	294, 409, 284, 374, 398, 0, 0, 280, 427, 408,
	356, 335, 336, 279, 0, 393, 313, 327, 310, 372,
	0, 426, 454, 309, 445, 0, 437, 282, 0, 436,
	371, 423, 428, 357, 351, 281, 425, 355, 350, 339,
	317, 470, 340, 341, 331, 383, 349, 384, 332, 361,
	360, 362, 0, 0, 0, 0, 0, 465, 466, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 596, 0, 0, 600, 0, 439, 0, 0, 0,
	0, 0, 0, 411, 0, 0, 342, 0, 0, 0,
	455, 0, 396, 377, 622, 0, 0, 394, 347, 424,
	385, 430, 413, 438, 390, 386, 273, 414, 312, 358,
	285, 287, 307, 314, 316, 318, 319, 367, 368, 380,
	401, 415, 416, 417, 311, 295, 395, 296, 329, 297,
	274, 303, 301, 304, 403, 305, 276, 381, 421, 0,
	324, 391, 354, 277, 353, 382, 420, 419, 286, 446,
	452, 453, 542, 0, 458, 623, 624, 625, 467, 472,
	473, 474, 476, 477, 478, 479, 543, 560, 527, 497,
	460, 551, 494, 498, 499, 563, 0, 0, 0, 451,
	343, 344, 0, 322, 270, 271, 618, 308, 373, 565,
	598, 599, 490, 0, 552, 491, 500, 300, 524, 536,
	535, 369, 450, 0, 547, 550, 480, 617, 0, 544,
	559, 621, 558, 614, 379, 0, 400, 556, 503, 0,
	548, 522, 0, 549, 518, 553, 0, 492, 0, 407,
	432, 444, 461, 464, 493, 578, 579, 580, 275, 463,
	582, 583, 584, 585, 586, 587, 588, 581, 435, 525,
	502, 528, 443, 505, 504, 0, 0, 539, 459, 540,
	541, 363, 364, 365, 366, 326, 566, 293, 462, 389,
	0, 526, 0, 0, 0, 0, 0, 0, 0, 0,
	531, 532, 529, 626, 0, 589, 590, 0, 0, 456,
	457, 321, 328, 475, 330, 292, 378, 323, 441, 337,
	0, 468, 533, 469, 592, 595, 593, 594, 370, 333,
	334, 404, 338, 348, 392, 440, 376, 397, 290, 431,
	405, 352, 519, 546, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 259, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	574, 573, 572, 571, 570, 569, 568, 567, 0, 0,
	516, 418, 302, 264, 298, 299, 306, 615, 612, 422,
	616, 0, 272, 496, 346, 0, 387, 320, 561, 562,
	0, 0, 220, 221, 222, 223, 224, 225, 226, 227,
	265, 228, 229, 230, 231, 232, 233, 234, 237, 238,
	239, 240, 241, 242, 243, 244, 564, 235, 236, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	256, 257, 258, 0, 0, 0, 266, 267, 268, 269,
	0, 0, 260, 261, 262, 263, 0, 0, 0, 447,
	448, 449, 471, 0, 433, 495, 613, 0, 0, 0,
	0, 0, 0, 0, 545, 557, 591, 0, 601, 602,
	604, 606, 605, 608, 410, 2257, 619, 486, 487, 620,
	597, 375, 0, 501, 534, 523, 607, 489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 315, 0,
	0, 345, 538, 520, 530, 521, 506, 507, 508, 515,
	325, 509, 510, 511, 481, 512, 482, 513, 514, 0,
	537, 488, 406, 359, 555, 554, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 209, 0, 0, 0, 0, 0,
	0, 288, 210, 483, 603, 485, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 291, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 278, 412,
	429, 289, 402, 442, 294, 409, 284, 374, 398, 0,
	0, 280, 427, 408, 356, 335, 336, 279, 0, 393,
	313, 327, 310, 372, 0, 426, 454, 309, 445, 0,
	437, 282, 0, 436, 371, 423, 428, 357, 351, 281,
	425, 355, 350, 339, 317, 470, 340, 341, 331, 383,
	349, 384, 332, 361, 360, 362, 0, 0, 0, 0,
	0, 465, 466, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 596, 0, 0, 600, 0,
	439, 0, 0, 0, 0, 0, 0, 411, 0, 0,
	342, 0, 0, 0, 455, 0, 396, 377, 622, 0,
	0, 394, 347, 424, 385, 430, 413, 438, 390, 386,
	273, 414, 312, 358, 285, 287, 307, 314, 316, 318,
	319, 367, 368, 380, 401, 415, 416, 417, 311, 295,
	395, 296, 329, 297, 274, 303, 301, 304, 403, 305,
	276, 381, 421, 0, 324, 391, 354, 277, 353, 382,
	420, 419, 286, 446, 452, 453, 542, 0, 458, 623,
	624, 625, 467, 472, 473, 474, 476, 477, 478, 479,
	543, 560, 527, 497, 460, 551, 494, 498, 499, 563,
	0, 0, 0, 451, 343, 344, 0, 322, 270, 271,
	618, 308, 373, 565, 598, 599, 490, 0, 552, 491,
	500, 300, 524, 536, 535, 369, 450, 0, 547, 550,
	480, 617, 0, 544, 559, 621, 558, 614, 379, 0,
	400, 556, 503, 0, 548, 522, 0, 549, 518, 553,
	0, 492, 0, 407, 432, 444, 461, 464, 493, 578,
	579, 580, 275, 463, 582, 583, 584, 585, 586, 587,
	588, 581, 435, 525, 502, 528, 443, 505, 504, 0,
	0, 539, 459, 540, 541, 363, 364, 365, 366, 326,
	566, 293, 462, 389, 0, 526, 0, 0, 0, 0,
	0, 0, 0, 0, 531, 532, 529, 626, 0, 589,
	590, 0, 0, 456, 457, 321, 328, 475, 330, 292,
	378, 323, 441, 337, 0, 468, 533, 469, 592, 595,
	593, 594, 370, 333, 334, 404, 338, 348, 392, 440,
	376, 397, 290, 431, 405, 352, 519, 546, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 259,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 574, 573, 572, 571, 570, 569,
	568, 567, 0, 0, 516, 418, 302, 264, 298, 299,
	306, 615, 612, 422, 616, 0, 272, 496, 346, 0,
	387, 320, 561, 562, 0, 0, 220, 221, 222, 223,
	224, 225, 226, 227, 265, 228, 229, 230, 231, 232,
	233, 234, 237, 238, 239, 240, 241, 242, 243, 244,
	564, 235, 236, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257, 258, 0, 0, 0,
	266, 267, 268, 269, 0, 0, 260, 261, 262, 263,
	0, 0, 0, 447, 448, 449, 471, 0, 433, 495,
	613, 0, 0, 0, 0, 0, 0, 0, 545, 557,
	591, 0, 601, 602, 604, 606, 605, 608, 410, 0,
	619, 486, 487, 620, 597, 375, 0, 501, 534, 523,
	607, 489, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 315, 0, 0, 345, 538, 520, 530, 521,
	506, 507, 508, 515, 325, 509, 510, 511, 481, 512,
	482, 513, 514, 0, 537, 488, 406, 359, 555, 554,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 209, 0,
	0, 0, 1815, 0, 0, 288, 210, 483, 603, 485,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	291, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 278, 412, 429, 289, 402, 442, 294, 409,
	284, 374, 398, 0, 0, 280, 427, 408, 356, 335,
	336, 279, 0, 393, 313, 327, 310, 372, 0, 426,
	454, 309, 445, 0, 437, 282, 0, 436, 371, 423,
	428, 357, 351, 281, 425, 355, 350, 339, 317, 470,
	340, 341, 331, 383, 349, 384, 332, 361, 360, 362,
	0, 0, 0, 0, 0, 465, 466, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 596,
	0, 0, 600, 0, 439, 0, 0, 0, 0, 0,
	0, 411, 0, 0, 342, 0, 0, 0, 455, 0,
	396, 377, 622, 0, 0, 394, 347, 424, 385, 430,
	413, 438, 390, 386, 273, 414, 312, 358, 285, 287,
	307, 314, 316, 318, 319, 367, 368, 380, 401, 415,
	416, 417, 311, 295, 395, 296, 329, 297, 274, 303,
	301, 304, 403, 305, 276, 381, 421, 0, 324, 391,
	354, 277, 353, 382, 420, 419, 286, 446, 452, 453,
	542, 0, 458, 623, 624, 625, 467, 472, 473, 474,
	476, 477, 478, 479, 543, 560, 527, 497, 460, 551,
	494, 498, 499, 563, 0, 0, 0, 451, 343, 344,
	0, 322, 270, 271, 618, 308, 373, 565, 598, 599,
	490, 0, 552, 491, 500, 300, 524, 536, 535, 369,
	450, 0, 547, 550, 480, 617, 0, 544, 559, 621,
	558, 614, 379, 0, 400, 556, 503, 0, 548, 522,
	0, 549, 518, 553, 0, 492, 0, 407, 432, 444,
	461, 464, 493, 578, 579, 580, 275, 463, 582, 583,
	584, 585, 586, 587, 588, 581, 435, 525, 502, 528,
	443, 505, 504, 0, 0, 539, 459, 540, 541, 363,
	364, 365, 366, 326, 566, 293, 462, 389, 0, 526,
	0, 0, 0, 0, 0, 0, 0, 0, 531, 532,
	529, 626, 0, 589, 590, 0, 0, 456, 457, 321,
	328, 475, 330, 292, 378, 323, 441, 337, 0, 468,
	533, 469, 592, 595, 593, 594, 370, 333, 334, 404,
	338, 348, 392, 440, 376, 397, 290, 431, 405, 352,
	519, 546, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 259, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 574, 573,
	572, 571, 570, 569, 568, 567, 0, 0, 516, 418,
	302, 264, 298, 299, 306, 615, 612, 422, 616, 0,
	272, 496, 346, 0, 387, 320, 561, 562, 0, 0,
	220, 221, 222, 223, 224, 225, 226, 227, 265, 228,
	229, 230, 231, 232, 233, 234, 237, 238, 239, 240,
	241, 242, 243, 244, 564, 235, 236, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 255, 256, 257,
	258, 0, 0, 0, 266, 267, 268, 269, 0, 0,
	260, 261, 262, 263, 0, 0, 0, 447, 448, 449,
	471, 0, 433, 495, 613, 0, 0, 0, 0, 0,
	0, 0, 545, 557, 591, 0, 601, 602, 604, 606,
	605, 608, 410, 0, 619, 486, 487, 620, 597, 375,
	0, 501, 534, 523, 607, 489, 0, 1943, 0, 0,
	0, 0, 0, 0, 0, 0, 315, 0, 0, 345,
	538, 520, 530, 521, 506, 507, 508, 515, 325, 509,
	510, 511, 481, 512, 482, 513, 514, 0, 537, 488,
	406, 359, 555, 554, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 209, 0, 0, 0, 0, 0, 0, 288,
	210, 483, 603, 485, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 291, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 278, 412, 429, 289,
	402, 442, 294, 409, 284, 374, 398, 0, 0, 280,
	427, 408, 356, 335, 336, 279, 0, 393, 313, 327,
	310, 372, 0, 426, 454, 309, 445, 0, 437, 282,
	0, 436, 371, 423, 428, 357, 351, 281, 425, 355,
	350, 339, 317, 470, 340, 341, 331, 383, 349, 384,
	332, 361, 360, 362, 0, 0, 0, 0, 0, 465,
	466, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 596, 0, 0, 600, 0, 439, 0,
	0, 0, 0, 0, 0, 411, 0, 0, 342, 0,
	0, 0, 455, 0, 396, 377, 622, 0, 0, 394,
	347, 424, 385, 430, 413, 438, 390, 386, 273, 414,
	312, 358, 285, 287, 307, 314, 316, 318, 319, 367,
	368, 380, 401, 415, 416, 417, 311, 295, 395, 296,
	329, 297, 274, 303, 301, 304, 403, 305, 276, 381,
	421, 0, 324, 391, 354, 277, 353, 382, 420, 419,
	286, 446, 452, 453, 542, 0, 458, 623, 624, 625,
	467, 472, 473, 474, 476, 477, 478, 479, 543, 560,
	527, 497, 460, 551, 494, 498, 499, 563, 0, 0,
	0, 451, 343, 344, 0, 322, 270, 271, 618, 308,
	373, 565, 598, 599, 490, 0, 552, 491, 500, 300,
	524, 536, 535, 369, 450, 0, 547, 550, 480, 617,
	0, 544, 559, 621, 558, 614, 379, 0, 400, 556,
	503, 0, 548, 522, 0, 549, 518, 553, 0, 492,
	0, 407, 432, 444, 461, 464, 493, 578, 579, 580,
	275, 463, 582, 583, 584, 585, 586, 587, 588, 581,
	435, 525, 502, 528, 443, 505, 504, 0, 0, 539,
	459, 540, 541, 363, 364, 365, 366, 326, 566, 293,
	462, 389, 0, 526, 0, 0, 0, 0, 0, 0,
	0, 0, 531, 532, 529, 626, 0, 589, 590, 0,
	0, 456, 457, 321, 328, 475, 330, 292, 378, 323,
	441, 337, 0, 468, 533, 469, 592, 595, 593, 594,
	370, 333, 334, 404, 338, 348, 392, 440, 376, 397,
	290, 431, 405, 352, 519, 546, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 259, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 574, 573, 572, 571, 570, 569, 568, 567,
	0, 0, 516, 418, 302, 264, 298, 299, 306, 615,
	612, 422, 616, 0, 272, 496, 346, 0, 387, 320,
	561, 562, 0, 0, 220, 221, 222, 223, 224, 225,
	226, 227, 265, 228, 229, 230, 231, 232, 233, 234,
	237, 238, 239, 240, 241, 242, 243, 244, 564, 235,
	236, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 256, 257, 258, 0, 0, 0, 266, 267,
	268, 269, 0, 0, 260, 261, 262, 263, 0, 0,
	0, 447, 448, 449, 471, 0, 433, 495, 613, 0,
	0, 0, 0, 0, 0, 0, 545, 557, 591, 0,
	601, 602, 604, 606, 605, 608, 410, 0, 619, 486,
	487, 620, 597, 375, 0, 501, 534, 523, 607, 489,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	315, 0, 0, 345, 538, 520, 530, 521, 506, 507,
	508, 515, 325, 509, 510, 511, 481, 512, 482, 513,
	514, 0, 537, 488, 406, 359, 555, 554, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 209, 0, 0, 1467,
	0, 0, 0, 288, 210, 483, 603, 485, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 291, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	278, 412, 429, 289, 402, 442, 294, 409, 284, 374,
	398, 0, 0, 280, 427, 408, 356, 335, 336, 279,
	0, 393, 313, 327, 310, 372, 0, 426, 454, 309,
	445, 0, 437, 282, 0, 436, 371, 423, 428, 357,
	351, 281, 425, 355, 350, 339, 317, 470, 340, 341,
	331, 383, 349, 384, 332, 361, 360, 362, 0, 0,
	0, 0, 0, 465, 466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 596, 0, 0,
	600, 0, 439, 0, 0, 0, 0, 0, 0, 411,
	0, 0, 342, 0, 0, 0, 455, 0, 396, 377,
	622, 0, 0, 394, 347, 424, 385, 430, 413, 438,
	1848, 386, 273, 414, 312, 358, 285, 287, 307, 314,
	316, 318, 319, 367, 368, 380, 401, 415, 416, 417,
	311, 295, 395, 296, 329, 297, 274, 303, 301, 304,
	403, 305, 276, 381, 421, 0, 324, 391, 354, 277,
	353, 382, 420, 419, 286, 446, 452, 453, 542, 0,
	458, 623, 624, 625, 467, 472, 473, 474, 476, 477,
	478, 479, 543, 560, 527, 497, 460, 551, 494, 498,
	499, 563, 0, 0, 0, 451, 343, 344, 0, 322,
	270, 271, 618, 308, 373, 565, 598, 599, 490, 0,
	552, 491, 500, 300, 524, 536, 535, 369, 450, 0,
	547, 550, 480, 617, 0, 544, 559, 621, 558, 614,
	379, 0, 400, 556, 503, 0, 548, 522, 0, 549,
	518, 553, 0, 492, 0, 407, 432, 444, 461, 464,
	493, 578, 579, 580, 275, 463, 582, 583, 584, 585,
	586, 587, 588, 581, 435, 525, 502, 528, 443, 505,
	504, 0, 0, 539, 459, 540, 541, 363, 364, 365,
	366, 326, 566, 293, 462, 389, 0, 526, 0, 0,
	0, 0, 0, 0, 0, 0, 531, 532, 529, 626,
	0, 589, 590, 0, 0, 456, 457, 321, 328, 475,
	330, 292, 378, 323, 441, 337, 0, 468, 533, 469,
	592, 595, 593, 594, 370, 333, 334, 404, 338, 348,
	392, 440, 376, 397, 290, 431, 405, 352, 519, 546,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 259, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 574, 573, 572, 571,
	570, 569, 568, 567, 0, 0, 516, 418, 302, 264,
	298, 299, 306, 615, 612, 422, 616, 0, 272, 496,
	346, 0, 387, 320, 561, 562, 0, 0, 220, 221,
	222, 223, 224, 225, 226, 227, 265, 228, 229, 230,
	231, 232, 233, 234, 237, 238, 239, 240, 241, 242,
	243, 244, 564, 235, 236, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 254, 255, 256, 257, 258, 0,
	0, 0, 266, 267, 268, 269, 0, 0, 260, 261,
	262, 263, 0, 0, 0, 447, 448, 449, 471, 0,
	433, 495, 613, 0, 0, 0, 0, 0, 0, 0,
	545, 557, 591, 0, 601, 602, 604, 606, 605, 608,
	410, 0, 619, 486, 487, 620, 597, 375, 0, 501,
	534, 523, 607, 489, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 315, 0, 0, 345, 538, 520,
	530, 521, 506, 507, 508, 515, 325, 509, 510, 511,
	481, 512, 482, 513, 514, 0, 537, 488, 406, 359,
	555, 554, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	209, 0, 0, 0, 0, 0, 0, 288, 210, 483,
	603, 485, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 291, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 278, 412, 429, 289, 402, 442,
	294, 409, 284, 374, 398, 0, 0, 280, 427, 408,
	356, 335, 336, 279, 0, 393, 313, 327, 310, 372,
	0, 426, 454, 309, 445, 0, 437, 282, 0, 436,
	371, 423, 428, 357, 351, 281, 425, 355, 350, 339,
	317, 470, 340, 341, 331, 383, 349, 384, 332, 361,
	360, 362, 0, 0, 0, 0, 0, 465, 466, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 596, 0, 0, 600, 0, 439, 0, 0, 1497,
	0, 0, 0, 411, 0, 0, 342, 0, 0, 0,
	455, 0, 396, 377, 622, 0, 0, 394, 347, 424,
	385, 430, 413, 438, 390, 386, 273, 414, 312, 358,
	285, 287, 307, 314, 316, 318, 319, 367, 368, 380,
	401, 415, 416, 417, 311, 295, 395, 296, 329, 297,
	274, 303, 301, 304, 403, 305, 276, 381, 421, 0,
	324, 391, 354, 277, 353, 382, 420, 419, 286, 446,
	452, 453, 542, 0, 458, 623, 624, 625, 467, 472,
	473, 474, 476, 477, 478, 479, 543, 560, 527, 497,
	460, 551, 494, 498, 499, 563, 0, 0, 0, 451,
	343, 344, 0, 322, 270, 271, 618, 308, 373, 565,
	598, 599, 490, 0, 552, 491, 500, 300, 524, 536,
	535, 369, 450, 0, 547, 550, 480, 617, 0, 544,
	559, 621, 558, 614, 379, 0, 400, 556, 503, 0,
	548, 522, 0, 549, 518, 553, 0, 492, 0, 407,
	432, 444, 461, 464, 493, 578, 579, 580, 275, 463,
	582, 583, 584, 585, 586, 587, 588, 581, 435, 525,
	502, 528, 443, 505, 504, 0, 0, 539, 459, 540,
	541, 363, 364, 365, 366, 326, 566, 293, 462, 389,
	0, 526, 0, 0, 0, 0, 0, 0, 0, 0,
	531, 532, 529, 626, 0, 589, 590, 0, 0, 456,
	457, 321, 328, 475, 330, 292, 378, 323, 441, 337,
	0, 468, 533, 469, 592, 595, 593, 594, 370, 333,
	334, 404, 338, 348, 392, 440, 376, 397, 290, 431,
	405, 352, 519, 546, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 259, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	574, 573, 572, 571, 570, 569, 568, 567, 0, 0,
	516, 418, 302, 264, 298, 299, 306, 615, 612, 422,
	616, 0, 272, 496, 346, 0, 387, 320, 561, 562,
	0, 0, 220, 221, 222, 223, 224, 225, 226, 227,
	265, 228, 229, 230, 231, 232, 233, 234, 237, 238,
	239, 240, 241, 242, 243, 244, 564, 235, 236, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	256, 257, 258, 0, 0, 0, 266, 267, 268, 269,
	0, 0, 260, 261, 262, 263, 0, 0, 0, 447,
	448, 449, 471, 0, 433, 495, 613, 0, 0, 0,
	0, 0, 0, 0, 545, 557, 591, 0, 601, 602,
	604, 606, 605, 608, 410, 0, 619, 486, 487, 620,
	597, 375, 0, 501, 534, 523, 607, 489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 633, 315, 0,
	0, 345, 538, 520, 530, 521, 506, 507, 508, 515,
	325, 509, 510, 511, 481, 512, 482, 513, 514, 0,
	537, 488, 406, 359, 555, 554, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 209, 0, 0, 0, 0, 0,
	0, 288, 210, 483, 603, 485, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 291, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 278, 412,
	429, 289, 402, 442, 294, 409, 284, 374, 398, 0,
	0, 280, 427, 408, 356, 335, 336, 279, 0, 393,
	313, 327, 310, 372, 0, 426, 454, 309, 445, 0,
	437, 282, 0, 436, 371, 423, 428, 357, 351, 281,
	425, 355, 350, 339, 317, 470, 340, 341, 331, 383,
	349, 384, 332, 361, 360, 362, 0, 0, 0, 0,
	0, 465, 466, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 596, 0, 0, 600, 0,
	439, 0, 0, 0, 0, 0, 0, 411, 0, 0,
	342, 0, 0, 0, 455, 0, 396, 377, 622, 0,
	0, 394, 347, 424, 385, 430, 413, 438, 390, 386,
	273, 414, 312, 358, 285, 287, 307, 314, 316, 318,
	319, 367, 368, 380, 401, 415, 416, 417, 311, 295,
	395, 296, 329, 297, 274, 303, 301, 304, 403, 305,
	276, 381, 421, 0, 324, 391, 354, 277, 353, 382,
	420, 419, 286, 446, 452, 453, 542, 0, 458, 623,
	624, 625, 467, 472, 473, 474, 476, 477, 478, 479,
	543, 560, 527, 497, 460, 551, 494, 498, 499, 563,
	0, 0, 0, 451, 343, 344, 0, 322, 270, 271,
	618, 308, 373, 565, 598, 599, 490, 0, 552, 491,
	500, 300, 524, 536, 535, 369, 450, 0, 547, 550,
	480, 617, 0, 544, 559, 621, 558, 614, 379, 0,
	400, 556, 503, 0, 548, 522, 0, 549, 518, 553,
	0, 492, 0, 407, 432, 444, 461, 464, 493, 578,
	579, 580, 275, 463, 582, 583, 584, 585, 586, 587,
	588, 581, 435, 525, 502, 528, 443, 505, 504, 0,
	0, 539, 459, 540, 541, 363, 364, 365, 366, 326,
	566, 293, 462, 389, 0, 526, 0, 0, 0, 0,
	0, 0, 0, 0, 531, 532, 529, 626, 0, 589,
	590, 0, 0, 456, 457, 321, 328, 475, 330, 292,
	378, 323, 441, 337, 0, 468, 533, 469, 592, 595,
	593, 594, 370, 333, 334, 404, 338, 348, 392, 440,
	376, 397, 290, 431, 405, 352, 519, 546, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 259,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 574, 573, 572, 571, 570, 569,
	568, 567, 0, 0, 516, 418, 302, 264, 298, 299,
	306, 615, 612, 422, 616, 0, 272, 496, 346, 0,
	387, 320, 561, 562, 0, 0, 220, 221, 222, 223,
	224, 225, 226, 227, 265, 228, 229, 230, 231, 232,
	233, 234, 237, 238, 239, 240, 241, 242, 243, 244,
	564, 235, 236, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257, 258, 0, 0, 0,
	266, 267, 268, 269, 0, 0, 260, 261, 262, 263,
	0, 0, 0, 447, 448, 449, 471, 0, 433, 495,
	613, 0, 0, 0, 0, 0, 0, 0, 545, 557,
	591, 0, 601, 602, 604, 606, 605, 608, 410, 0,
	619, 486, 487, 620, 597, 375, 0, 501, 534, 523,
	607, 489, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 315, 0, 0, 345, 538, 520, 530, 521,
	506, 507, 508, 515, 325, 509, 510, 511, 481, 512,
	482, 513, 514, 0, 537, 488, 406, 359, 555, 554,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 209, 0,
	0, 0, 0, 0, 0, 288, 210, 483, 603, 485,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	291, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 278, 412, 429, 289, 402, 442, 294, 409,
	284, 374, 398, 0, 0, 280, 427, 408, 356, 335,
	336, 279, 0, 393, 313, 327, 310, 372, 0, 426,
	454, 309, 445, 0, 437, 282, 0, 436, 371, 423,
	428, 357, 351, 281, 425, 355, 350, 339, 317, 470,
	340, 341, 331, 383, 349, 384, 332, 361, 360, 362,
	0, 0, 0, 0, 0, 465, 466, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 596,
	0, 643, 600, 0, 439, 0, 0, 0, 0, 0,
	0, 411, 0, 0, 342, 0, 0, 0, 455, 0,
	396, 377, 622, 0, 0, 394, 347, 424, 385, 430,
	413, 438, 390, 386, 273, 414, 312, 358, 285, 287,
	307, 314, 316, 318, 319, 367, 368, 380, 401, 415,
	416, 417, 311, 295, 395, 296, 329, 297, 274, 303,
	301, 304, 403, 305, 276, 381, 421, 0, 324, 391,
	354, 277, 353, 382, 420, 419, 286, 446, 452, 453,
	542, 0, 458, 623, 624, 625, 467, 472, 473, 474,
	476, 477, 478, 479, 543, 560, 527, 497, 460, 551,
	494, 498, 499, 563, 0, 0, 0, 451, 343, 344,
	0, 322, 270, 271, 618, 308, 373, 565, 598, 599,
	490, 0, 552, 491, 500, 300, 524, 536, 535, 369,
	450, 0, 547, 550, 480, 617, 0, 544, 559, 621,
	558, 614, 379, 0, 400, 556, 503, 0, 548, 522,
	0, 549, 518, 553, 0, 492, 0, 407, 432, 444,
	461, 464, 493, 578, 579, 580, 275, 463, 582, 583,
	584, 585, 586, 587, 588, 581, 435, 525, 502, 528,
	443, 505, 504, 0, 0, 539, 459, 540, 541, 363,
	364, 365, 366, 326, 566, 293, 462, 389, 0, 526,
	0, 0, 0, 0, 0, 0, 0, 0, 531, 532,
	529, 626, 0, 589, 590, 0, 0, 456, 457, 321,
	328, 475, 330, 292, 378, 323, 441, 337, 0, 468,
	533, 469, 592, 595, 593, 594, 370, 333, 334, 404,
	338, 348, 392, 440, 376, 397, 290, 431, 405, 352,
	519, 546, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 259, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 574, 573,
	572, 571, 570, 569, 568, 567, 0, 0, 516, 418,
	302, 264, 298, 299, 306, 615, 612, 422, 616, 0,
	272, 496, 346, 0, 387, 320, 561, 562, 0, 0,
	220, 221, 222, 223, 224, 225, 226, 227, 265, 228,
	229, 230, 231, 232, 233, 234, 237, 238, 239, 240,
	241, 242, 243, 244, 564, 235, 236, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 255, 256, 257,
	258, 0, 0, 0, 266, 267, 268, 269, 0, 0,
	260, 261, 262, 263, 0, 0, 0, 447, 448, 449,
	471, 0, 433, 495, 613, 0, 0, 0, 0, 0,
	0, 0, 545, 557, 591, 0, 601, 602, 604, 606,
	605, 608, 410, 0, 619, 486, 487, 620, 597, 375,
	0, 501, 534, 523, 607, 489, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 315, 0, 0, 345,
	538, 520, 530, 521, 506, 507, 508, 515, 325, 509,
	510, 511, 481, 512, 482, 513, 514, 0, 537, 488,
	406, 359, 555, 554, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 209, 0, 0, 0, 0, 0, 0, 288,
	210, 483, 603, 485, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 291, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 278, 412, 429, 289,
	402, 442, 294, 409, 284, 374, 398, 0, 0, 280,
	427, 408, 356, 335, 336, 279, 0, 393, 313, 327,
	310, 372, 0, 426, 454, 309, 445, 0, 437, 282,
	0, 436, 371, 423, 428, 357, 351, 281, 425, 355,
	350, 339, 317, 470, 340, 341, 331, 383, 349, 384,
	332, 361, 360, 362, 0, 0, 0, 0, 0, 465,
	466, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 596, 0, 0, 600, 0, 439, 0,
	0, 0, 0, 0, 0, 411, 0, 0, 342, 0,
	0, 0, 455, 0, 396, 377, 622, 0, 0, 394,
	347, 424, 385, 430, 413, 438, 390, 386, 273, 414,
	312, 358, 285, 287, 307, 314, 316, 318, 319, 367,
	368, 380, 401, 415, 416, 417, 311, 295, 395, 296,
	329, 297, 274, 303, 301, 304, 403, 305, 276, 381,
	421, 0, 324, 391, 354, 277, 353, 382, 420, 419,
	286, 446, 452, 453, 542, 0, 458, 623, 624, 625,
	467, 472, 473, 474, 476, 477, 478, 479, 543, 560,
	527, 497, 460, 551, 494, 498, 499, 563, 0, 0,
	0, 451, 343, 344, 0, 322, 270, 271, 618, 308,
	373, 565, 598, 599, 490, 0, 552, 491, 500, 300,
	524, 536, 535, 369, 450, 0, 547, 550, 480, 617,
	0, 544, 559, 621, 558, 614, 379, 0, 400, 556,
	503, 0, 548, 522, 0, 549, 518, 553, 0, 492,
	0, 407, 432, 444, 461, 464, 493, 578, 579, 580,
	275, 463, 582, 583, 584, 585, 586, 587, 588, 581,
	435, 525, 502, 528, 443, 505, 504, 0, 0, 539,
	459, 540, 541, 363, 364, 365, 366, 326, 566, 293,
	462, 389, 0, 526, 0, 0, 0, 0, 0, 0,
	0, 0, 531, 532, 529, 626, 0, 589, 590, 0,
	0, 456, 457, 321, 328, 475, 330, 292, 378, 323,
	441, 337, 0, 468, 533, 469, 592, 595, 593, 594,
	370, 333, 334, 404, 338, 348, 392, 440, 376, 397,
	290, 431, 405, 352, 519, 546, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 259, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 574, 573, 572, 571, 570, 569, 568, 567,
	929, 0, 516, 418, 302, 264, 298, 299, 306, 615,
	612, 422, 616, 0, 272, 496, 346, 0, 387, 320,
	561, 562, 0, 0, 220, 221, 222, 223, 224, 225,
	226, 227, 265, 228, 229, 230, 231, 232, 233, 234,
	237, 238, 239, 240, 241, 242, 243, 244, 564, 235,
	236, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 256, 257, 258, 0, 0, 0, 266, 267,
	268, 269, 0, 0, 260, 261, 262, 263, 0, 0,
	0, 447, 448, 449, 471, 0, 433, 495, 613, 0,
	0, 0, 0, 0, 0, 0, 545, 557, 591, 0,
	601, 602, 604, 606, 605, 608, 410, 0, 619, 486,
	487, 620, 597, 375, 0, 501, 534, 523, 607, 489,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	315, 0, 0, 345, 538, 520, 530, 521, 506, 507,
	508, 515, 325, 509, 510, 511, 481, 512, 482, 513,
	514, 0, 537, 488, 406, 359, 555, 554, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 209, 0, 0, 0,
	0, 0, 0, 288, 210, 483, 603, 485, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 291, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	278, 412, 429, 289, 402, 442, 294, 409, 284, 374,
	398, 0, 0, 280, 427, 408, 356, 335, 336, 279,
	0, 393, 313, 327, 310, 372, 0, 426, 454, 309,
	445, 0, 437, 282, 0, 436, 371, 423, 428, 357,
	351, 281, 425, 355, 350, 339, 317, 470, 340, 341,
	331, 383, 349, 384, 332, 361, 360, 362, 0, 0,
	0, 0, 0, 465, 466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 596, 0, 0,
	600, 0, 439, 0, 0, 0, 0, 0, 0, 411,
	0, 0, 342, 0, 0, 0, 455, 0, 396, 377,
	622, 0, 0, 394, 347, 424, 385, 430, 413, 438,
	390, 386, 273, 414, 312, 358, 285, 287, 307, 314,
	316, 318, 319, 367, 368, 380, 401, 415, 416, 417,
	311, 295, 395, 296, 329, 297, 274, 303, 301, 304,
	403, 305, 276, 381, 421, 0, 324, 391, 354, 277,
	353, 382, 420, 419, 286, 446, 452, 453, 542, 0,
	458, 623, 624, 625, 467, 472, 473, 474, 476, 477,
	478, 479, 543, 560, 527, 497, 460, 551, 494, 498,
	499, 563, 0, 0, 0, 451, 343, 344, 0, 322,
	270, 271, 618, 308, 373, 565, 598, 599, 490, 0,
	552, 491, 500, 300, 524, 536, 535, 369, 450, 0,
	547, 550, 480, 617, 0, 544, 559, 621, 558, 614,
	379, 0, 400, 556, 503, 0, 548, 522, 0, 549,
	518, 553, 0, 492, 0, 407, 432, 444, 461, 464,
	493, 578, 579, 580, 275, 463, 582, 583, 584, 585,
	586, 587, 588, 581, 435, 525, 502, 528, 443, 505,
	504, 0, 0, 539, 459, 540, 541, 363, 364, 365,
	366, 326, 566, 293, 462, 389, 0, 526, 0, 0,
	0, 0, 0, 0, 0, 0, 531, 532, 529, 626,
	0, 589, 590, 0, 0, 456, 457, 321, 328, 475,
	330, 292, 378, 323, 441, 337, 0, 468, 533, 469,
	592, 595, 593, 594, 370, 333, 334, 404, 338, 348,
	392, 440, 376, 397, 290, 431, 405, 352, 519, 546,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 259, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 574, 573, 572, 571,
	570, 569, 568, 567, 0, 0, 516, 418, 302, 264,
	298, 299, 306, 615, 612, 422, 616, 0, 272, 496,
	346, 0, 387, 320, 561, 562, 0, 0, 220, 221,
	222, 223, 224, 225, 226, 227, 265, 228, 229, 230,
	231, 232, 233, 234, 237, 238, 239, 240, 241, 242,
	243, 244, 564, 235, 236, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 254, 255, 256, 257, 258, 0,
	0, 0, 266, 267, 268, 269, 0, 0, 260, 261,
	262, 263, 0, 0, 0, 447, 448, 449, 471, 0,
	433, 495, 613, 0, 0, 0, 0, 0, 0, 0,
	545, 557, 591, 0, 601, 602, 604, 606, 605, 608,
	410, 0, 619, 486, 487, 620, 597, 375, 0, 501,
	534, 523, 607, 489, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 315, 0, 0, 345, 538, 520,
	530, 521, 506, 507, 508, 515, 325, 509, 510, 511,
	481, 512, 482, 513, 514, 0, 537, 488, 406, 359,
	555, 554, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	209, 0, 0, 0, 0, 0, 0, 288, 210, 483,
	603, 485, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 291, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 278, 412, 1447, 289, 402, 442,
	294, 409, 284, 374, 398, 0, 0, 280, 427, 408,
	356, 335, 336, 279, 0, 393, 313, 327, 310, 372,
	0, 426, 454, 309, 445, 0, 437, 282, 0, 436,
	371, 423, 428, 357, 351, 281, 425, 355, 350, 339,
	317, 470, 340, 341, 331, 383, 349, 384, 332, 361,
	360, 362, 0, 0, 0, 0, 0, 465, 466, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 596, 0, 0, 600, 0, 439, 0, 0, 0,
	0, 0, 0, 411, 0, 0, 342, 0, 0, 0,
	455, 0, 396, 377, 622, 0, 0, 394, 347, 424,
	385, 430, 413, 438, 390, 386, 273, 414, 312, 358,
	285, 287, 307, 314, 316, 318, 319, 367, 368, 380,
	401, 415, 416, 417, 311, 295, 395, 296, 329, 297,
	274, 303, 301, 304, 403, 305, 276, 381, 421, 0,
	324, 391, 354, 277, 353, 382, 420, 419, 286, 446,
	452, 453, 542, 0, 458, 623, 624, 625, 467, 472,
	473, 474, 476, 477, 478, 479, 543, 560, 527, 497,
	460, 551, 494, 498, 499, 563, 0, 0, 0, 451,
	343, 344, 0, 322, 270, 271, 618, 308, 373, 565,
	598, 599, 490, 0, 552, 491, 500, 300, 524, 536,
	535, 369, 450, 0, 547, 550, 480, 617, 0, 544,
	559, 621, 558, 614, 379, 0, 400, 556, 503, 0,
	548, 522, 0, 549, 518, 553, 0, 492, 0, 407,
	432, 444, 461, 464, 493, 578, 579, 580, 275, 463,
	582, 583, 584, 585, 586, 587, 588, 581, 435, 525,
	502, 528, 443, 505, 504, 0, 0, 539, 459, 540,
	541, 363, 364, 365, 366, 326, 566, 293, 462, 389,
	0, 526, 0, 0, 0, 0, 0, 0, 0, 0,
	531, 532, 529, 626, 0, 589, 590, 0, 0, 456,
	457, 321, 328, 475, 330, 292, 378, 323, 441, 337,
	0, 468, 533, 469, 592, 595, 593, 594, 370, 333,
	334, 404, 338, 348, 392, 440, 376, 397, 290, 431,
	405, 352, 519, 546, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 259, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	574, 573, 572, 571, 570, 569, 568, 567, 0, 0,
	516, 418, 302, 264, 298, 299, 306, 615, 612, 422,
	616, 0, 272, 496, 346, 0, 387, 320, 561, 562,
	0, 0, 220, 221, 222, 223, 224, 225, 226, 227,
	265, 228, 229, 230, 231, 232, 233, 234, 237, 238,
	239, 240, 241, 242, 243, 244, 564, 235, 236, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	256, 257, 258, 0, 0, 0, 266, 267, 268, 269,
	0, 0, 260, 261, 262, 263, 0, 0, 0, 447,
	448, 449, 471, 0, 433, 495, 613, 0, 0, 0,
	0, 0, 0, 0, 545, 557, 591, 0, 601, 602,
	604, 606, 605, 608, 410, 0, 619, 486, 487, 620,
	597, 375, 0, 501, 534, 523, 607, 489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 315, 0,
	0, 345, 538, 520, 530, 521, 506, 507, 508, 515,
	325, 509, 510, 511, 481, 512, 482, 513, 514, 0,
	537, 488, 406, 359, 555, 554, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 209, 0, 0, 0, 0, 0,
	0, 288, 210, 483, 603, 485, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 291, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 278, 412,
	1445, 289, 402, 442, 294, 409, 284, 374, 398, 0,
	0, 280, 427, 408, 356, 335, 336, 279, 0, 393,
	313, 327, 310, 372, 0, 426, 454, 309, 445, 0,
	437, 282, 0, 436, 371, 423, 428, 357, 351, 281,
	425, 355, 350, 339, 317, 470, 340, 341, 331, 383,
	349, 384, 332, 361, 360, 362, 0, 0, 0, 0,
	0, 465, 466, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 596, 0, 0, 600, 0,
	439, 0, 0, 0, 0, 0, 0, 411, 0, 0,
	342, 0, 0, 0, 455, 0, 396, 377, 622, 0,
	0, 394, 347, 424, 385, 430, 413, 438, 390, 386,
	273, 414, 312, 358, 285, 287, 307, 314, 316, 318,
	319, 367, 368, 380, 401, 415, 416, 417, 311, 295,
	395, 296, 329, 297, 274, 303, 301, 304, 403, 305,
	276, 381, 421, 0, 324, 391, 354, 277, 353, 382,
	420, 419, 286, 446, 452, 453, 542, 0, 458, 623,
	624, 625, 467, 472, 473, 474, 476, 477, 478, 479,
	543, 560, 527, 497, 460, 551, 494, 498, 499, 563,
	0, 0, 0, 451, 343, 344, 0, 322, 270, 271,
	618, 308, 373, 565, 598, 599, 490, 0, 552, 491,
	500, 300, 524, 536, 535, 369, 450, 0, 547, 550,
	480, 617, 0, 544, 559, 621, 558, 614, 379, 0,
	400, 556, 503, 0, 548, 522, 0, 549, 518, 553,
	0, 492, 0, 407, 432, 444, 461, 464, 493, 578,
	579, 580, 275, 463, 582, 583, 584, 585, 586, 587,
	588, 581, 435, 525, 502, 528, 443, 505, 504, 0,
	0, 539, 459, 540, 541, 363, 364, 365, 366, 326,
	566, 293, 462, 389, 0, 526, 0, 0, 0, 0,
	0, 0, 0, 0, 531, 532, 529, 626, 0, 589,
	590, 0, 0, 456, 457, 321, 328, 475, 330, 292,
	378, 323, 441, 337, 0, 468, 533, 469, 592, 595,
	593, 594, 370, 333, 334, 404, 338, 348, 392, 440,
	376, 397, 290, 431, 405, 352, 519, 546, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 259,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 574, 573, 572, 571, 570, 569,
	568, 567, 0, 0, 516, 418, 302, 264, 298, 299,
	306, 615, 612, 422, 616, 0, 272, 496, 346, 0,
	387, 320, 561, 562, 0, 0, 220, 221, 222, 223,
	224, 225, 226, 227, 265, 228, 229, 230, 231, 232,
	233, 234, 237, 238, 239, 240, 241, 242, 243, 244,
	564, 235, 236, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257, 258, 0, 0, 0,
	266, 267, 268, 269, 0, 0, 260, 261, 262, 263,
	0, 0, 0, 447, 448, 449, 471, 0, 433, 495,
	613, 0, 0, 0, 0, 0, 0, 0, 545, 557,
	591, 0, 601, 602, 604, 606, 605, 608, 410, 0,
	619, 486, 487, 620, 597, 375, 0, 501, 534, 523,
	607, 489, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 315, 0, 0, 345, 538, 520, 530, 521,
	506, 507, 508, 515, 325, 509, 510, 511, 481, 512,
	482, 513, 514, 0, 537, 488, 406, 359, 555, 554,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 209, 0,
	0, 0, 0, 0, 0, 288, 210, 483, 603, 485,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	291, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 278, 412, 429, 289, 402, 442, 294, 409,
	284, 374, 398, 0, 0, 280, 427, 408, 356, 335,
	336, 279, 0, 393, 313, 327, 310, 372, 0, 426,
	454, 309, 445, 0, 437, 282, 0, 436, 371, 423,
	428, 357, 351, 281, 425, 355, 350, 339, 317, 470,
	340, 341, 331, 383, 349, 384, 332, 361, 360, 362,
	0, 0, 0, 0, 0, 465, 466, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 596,
	0, 0, 600, 0, 439, 0, 0, 0, 0, 0,
	0, 411, 0, 0, 342, 0, 0, 0, 455, 0,
	396, 377, 622, 0, 0, 394, 347, 424, 385, 430,
	413, 438, 390, 386, 273, 414, 312, 358, 285, 287,
	710, 314, 316, 318, 319, 367, 368, 380, 401, 415,
	416, 417, 311, 295, 395, 296, 329, 297, 274, 303,
	301, 304, 403, 305, 276, 381, 421, 0, 324, 391,
	354, 277, 353, 382, 420, 419, 286, 446, 452, 453,
	542, 0, 458, 623, 624, 625, 467, 472, 473, 474,
	476, 477, 478, 479, 543, 560, 527, 497, 460, 551,
	494, 498, 499, 563, 0, 0, 0, 451, 343, 344,
	0, 322, 270, 271, 618, 308, 373, 565, 598, 599,
	490, 0, 552, 491, 500, 300, 524, 536, 535, 369,
	450, 0, 547, 550, 480, 617, 0, 544, 559, 621,
	558, 614, 379, 0, 400, 556, 503, 0, 548, 522,
	0, 549, 518, 553, 0, 492, 0, 407, 432, 444,
	461, 464, 493, 578, 579, 580, 275, 463, 582, 583,
	584, 585, 586, 587, 588, 581, 435, 525, 502, 528,
	443, 505, 504, 0, 0, 539, 459, 540, 541, 363,
	364, 365, 366, 326, 566, 293, 462, 389, 0, 526,
	0, 0, 0, 0, 0, 0, 0, 0, 531, 532,
	529, 626, 0, 589, 590, 0, 0, 456, 457, 321,
	328, 475, 330, 292, 378, 323, 441, 337, 0, 468,
	533, 469, 592, 595, 593, 594, 370, 333, 334, 404,
	338, 348, 392, 440, 376, 397, 290, 431, 405, 352,
	519, 546, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 259, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 574, 573,
	572, 571, 570, 569, 568, 567, 0, 0, 516, 418,
	302, 264, 298, 299, 306, 615, 612, 422, 616, 0,
	272, 496, 346, 0, 387, 320, 561, 562, 0, 0,
	220, 221, 222, 223, 224, 225, 226, 227, 265, 228,
	229, 230, 231, 232, 233, 234, 237, 238, 239, 240,
	241, 242, 243, 244, 564, 235, 236, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 255, 256, 257,
	258, 0, 0, 0, 266, 267, 268, 269, 0, 0,
	260, 261, 262, 263, 0, 0, 0, 447, 448, 449,
	471, 0, 433, 495, 613, 0, 0, 0, 0, 0,
	0, 0, 545, 557, 591, 0, 601, 602, 604, 606,
	605, 608, 410, 0, 619, 486, 487, 620, 597, 375,
	0, 501, 534, 523, 607, 489, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 315, 0, 0, 345,
	538, 520, 530, 521, 506, 507, 508, 515, 325, 509,
	510, 511, 481, 512, 482, 513, 514, 0, 537, 488,
	406, 359, 555, 554, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 209, 0, 0, 0, 0, 0, 0, 288,
	210, 483, 603, 485, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 291, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 278, 412, 429, 289,
	402, 442, 294, 409, 284, 374, 398, 0, 0, 280,
	427, 408, 356, 335, 336, 279, 0, 393, 313, 327,
	310, 372, 0, 426, 454, 309, 445, 0, 437, 282,
	0, 436, 371, 423, 428, 357, 351, 281, 425, 355,
	350, 339, 317, 470, 340, 341, 331, 383, 349, 384,
	332, 361, 360, 362, 0, 0, 0, 0, 0, 465,
	466, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 596, 0, 0, 600, 0, 439, 0,
	0, 0, 0, 0, 0, 411, 0, 0, 342, 0,
	0, 0, 455, 0, 396, 377, 622, 0, 0, 394,
	347, 424, 385, 430, 413, 438, 667, 386, 273, 414,
	312, 358, 285, 287, 307, 314, 316, 318, 319, 367,
	368, 380, 401, 415, 416, 417, 311, 295, 395, 296,
	329, 297, 274, 303, 301, 304, 403, 305, 276, 381,
	421, 0, 324, 391, 354, 277, 353, 382, 420, 419,
	286, 446, 452, 453, 542, 0, 458, 623, 624, 625,
	467, 472, 473, 474, 476, 477, 478, 479, 543, 560,
	527, 497, 460, 551, 494, 498, 499, 563, 0, 0,
	0, 451, 343, 344, 0, 322, 270, 271, 618, 308,
	373, 565, 598, 599, 490, 0, 552, 491, 500, 300,
	524, 536, 535, 369, 450, 0, 547, 550, 480, 617,
	0, 544, 559, 621, 558, 614, 379, 0, 400, 556,
	503, 0, 548, 522, 0, 549, 518, 553, 0, 492,
	0, 407, 432, 444, 461, 464, 493, 578, 579, 580,
	275, 463, 582, 583, 584, 585, 586, 587, 668, 581,
	435, 525, 502, 528, 443, 505, 504, 0, 0, 539,
	459, 540, 541, 363, 364, 365, 366, 326, 566, 293,
	462, 389, 0, 526, 0, 0, 0, 0, 0, 0,
	0, 0, 531, 532, 529, 626, 0, 589, 590, 0,
	0, 456, 457, 321, 328, 475, 330, 292, 378, 323,
	441, 337, 0, 468, 533, 469, 592, 595, 593, 594,
	370, 333, 334, 404, 338, 348, 392, 440, 376, 397,
	290, 431, 405, 352, 519, 546, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 259, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 574, 573, 572, 571, 570, 569, 568, 567,
	0, 0, 516, 418, 302, 264, 298, 299, 306, 615,
	612, 422, 616, 0, 272, 496, 346, 0, 387, 320,
	561, 562, 0, 0, 220, 221, 222, 223, 224, 225,
	226, 227, 265, 228, 229, 230, 231, 232, 233, 234,
	237, 238, 239, 240, 241, 242, 243, 244, 564, 235,
	236, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 256, 257, 258, 0, 0, 0, 266, 267,
	268, 269, 0, 0, 260, 261, 262, 263, 1930, 0,
	0, 447, 448, 449, 471, 187, 433, 495, 613, 0,
	0, 0, 0, 0, 0, 0, 545, 557, 591, 0,
	601, 602, 604, 606, 605, 608, 410, 3460, 619, 486,
	487, 620, 597, 1932, 0, 0, 1930, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1932, 0, 0, 1930, 181, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1907, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1932,
	0, 0, 0, 3624, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1907, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1923, 0, 0, 0, 0, 0, 0,
	0, 1907, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1923, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1923,
	0, 0, 0, 1911, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1917, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1905, 1939, 0, 0, 1906, 1908,
	1910, 1911, 1912, 1913, 1914, 1918, 1919, 1920, 1922, 1925,
	1926, 1927, 1917, 0, 0, 0, 0, 0, 0, 1915,
	1924, 1916, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1905, 1939, 0, 0, 1906, 1908, 1910, 1911,
	1912, 1913, 1914, 1918, 1919, 1920, 1922, 1925, 1926, 1927,
	1917, 0, 0, 1931, 0, 0, 0, 1915, 1924, 1916,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1905, 1939, 0, 0, 1906, 1908, 1910, 0, 1912, 1913,
	1914, 1918, 1919, 1920, 1922, 1925, 1926, 1927, 0, 0,
	0, 1931, 0, 0, 0, 1915, 1924, 1916, 1928, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1904, 0, 0, 0, 0,
	0, 0, 1903, 0, 0, 0, 0, 0, 0, 1931,
	0, 0, 0, 0, 0, 0, 1928, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1921, 0, 0, 0,
	0, 0, 0, 1904, 0, 1909, 0, 0, 0, 0,
	1903, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1928, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1921, 0, 0, 0, 0, 0,
	0, 1904, 0, 1909, 0, 0, 0, 0, 1903, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1921, 0, 0, 0, 0, 0, 0, 0,
	0, 1909, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 150,
}

var yyPact = [...]int{
	3842, -1000, -1000, -1000, -308, 14444, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 45790, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 403, 45790, -305, 28598, 43948, -1000,
	-1000, 2726, -1000, 44562, 16306, 45790, 462, 457, 45790, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 937, -1000, 48246, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 854, 4316, 47632, 11350, -216, -1000, 1718, -39, 2481,
	455, 1127, 1136, 1277, 1277, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 261, 981,
	45176, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 242, 254, 981, 21226, 98, 95,
	1718, 471, -106, -103, -107, 216, -1000, 1284, 4137, 204,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 11350, 11350, 14444, -351, 14444, 11350, 45790, 45790, -1000,
	-1000, -1000, -1000, -305, 44562, 854, 4316, 11350, 2481, 455,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -103, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -106, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -107,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 95, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 5072,
	-1000, 1650, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2290, 3041, 1649,
	2476, 797, 43948, 45790, -1000, 152, 797, -1000, -1000, -1000,
	1718, 3411, -1000, 45790, 45790, 189, 1887, -1000, 402, 500,
	377, 307, 1646, -1000, -1000, -1000, -1000, -1000, -1000, 634,
	3374, -1000, 45790, 45790, 3054, 45790, -1000, 2323, 723, -1000,
	5381, 3183, 1399, 951, 3067, -1000, -1000, 3040, -1000, 305,
	601, 304, 702, 399, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 284, -1000, 3239, -1000, -1000, 289, -1000, -1000, 303,
	-1000, -1000, -1000, 94, -1000, -1000, -1000, -1000, -1000, -1000,
	-41, -1000, -1000, 1172, 2320, 11350, 2069, -1000, 2811, 1603,
	-1000, -1000, -1000, 7025, 13201, 13201, 13201, 13201, 45790, -1000,
	-1000, 2848, 11350, 3039, 3032, 3031, 3030, -1000, -1000, -1000,
	-1000, -1000, -1000, 1634, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2019, -1000, -1000, -1000, 13818, -1000, 3029,
	3028, 3027, 3025, 3023, 3022, 3020, 3019, 3018, 3011, 3010,
	3009, 3008, 3007, 2687, 15682, 3006, 2475, 2466, 2998, 2994,
	2993, 2465, 2987, 2977, 2965, 2687, 2687, 2963, 2962, 2958,
	2957, 2956, 2955, 2951, 2949, 2947, 2939, 2933, 2927, 2926,
	2924, 2923, 2922, 2919, 2918, 2917, 2916, 2915, 2912, 2910,
	2909, 2904, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1385, -1000, 2899, 3386, 2759,
	-1000, 3247, 3236, 3230, 3227, -267, 2898, 2205, -1000, -1000,
	114, 3367, 45790, -286, 45790, -1000, -82, -1000, -1000, 1086,
	-1000, 1054, -1000, 852, 852, 45790, 45790, 199, 1006, 852,
	852, 852, 852, 852, 906, 852, 3260, 936, 934, 929,
	911, 852, -64, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1886, 1884, 3119, 1033, -1000, -1000, -1000, -1000, 1468, 45790,
	-1000, 2797, 1699, 1699, 3322, 3322, 3259, 743, 731, 728,
	1699, 537, -1000, 1817, 1817, 1817, 1817, 1699, 480, 766,
	3263, 3263, 79, 1817, 46, 1699, 1699, 46, 1699, 1699,
	-1000, 1902, 313, -273, -1000, -1000, -1000, -1000, 1817, 1817,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 3223, 3221, 854,
	854, 45790, 854, 198, 45790, 854, 854, 854, 859, 44,
	47018, 46404, 2323, 714, 695, 1484, 1857, -1000, 1734, 45790,
	45790, 1734, 1734, 24300, 23686, -1000, 45790, -1000, 3386, 2759,
	2677, 1543, 2674, 2759, -111, -112, -121, 854, 854, 854,
	854, 854, 263, 854, 854, 854, 854, 854, 45790, 45790,
	43334, 854, 854, 854, 854, 9493, 9493, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 14444, 1984, 2014, 202,
	-14, -295, 268, -1000, -1000, 45790, 3166, 283, -1000, -1000,
	-1000, 2694, -1000, 2768, 2768, 2768, 2768, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2768, 2768, 2779, 2897,
	-1000, -1000, 2767, 2767, 2767, 2694, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2769, 2769, 2778, 2778, 2769, 45790, -136, -1000, -1000,
	11350, 45790, 3177, 417, 2881, 797, -1000, -1000, 45790, 111,
	422, 3386, 3174, 3263, 3315, -1000, -1000, 1615, 2203, 2464,
	-1000, 307, -1000, 397, 307, 1737, -1000, 1092, -1000, -1000,
	-1000, -1000, -1000, 45790, -41, 406, -1000, -1000, 2453, 2879,
	-1000, 615, 1331, 1574, -1000, 279, 4215, 36580, 2323, 36580,
	45790, -1000, -1000, -1000, -1000, -1000, -1000, 93, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 295, -1000, 11350, 11350, 11350, 11350, 11350, -1000,
	788, 12584, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 13201,
	13201, 13201, 13201, 13201, 13201, 13201, 13201, 13201, 13201, 13201,
	13201, 2847, 1862, 13201, 13201, 13201, 13201, 26142, 1543, 3016,
	1474, 302, 1603, 1603, 1603, 1603, 11350, -1000, 1901, 2320,
	11350, 11350, 11350, 11350, 45790, -1000, -1000, 4501, 11350, 11350,
	561, 11350, 3225, 11350, 11350, 11350, 2671, 5782, 45790, 11350,
	-1000, 2670, 2669, -1000, -1000, 2007, 11350, -1000, -1000, 11350,
	-1000, -1000, 11350, 13201, 11350, -1000, 11350, 11350, 11350, -1000,
	-1000, 3844, 3225, 3225, 3225, 1836, 11350, 11350, 3225, 3225,
	3225, 1832, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225,
	3225, 3225, 2666, 2665, 2664, 10733, 3263, -216, -1000, 8876,
	3174, 3263, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -269, 2853, 45790, 2463, 2462, -317, 1102, 458,
	45790, 1160, 25, 1118, 1053, 1058, -1000, 45790, 1909, 45790,
	3198, -1000, 2851, 45790, 852, 852, 852, -1000, 41492, 36580,
	45790, 45790, 2323, 45790, 45790, 45790, 852, 852, 852, 852,
	45790, -1000, 3134, 36580, 3125, 859, -1000, 45790, 1468, 3193,
	45790, 3322, 13201, 13201, -1000, -1000, 11350, -1000, 42720, 1817,
	1699, 1699, -1000, -1000, 45790, -1000, -1000, -1000, 1817, 45790,
	1817, 1817, 3322, 1817, -1000, -1000, -1000, 1699, 1699, -1000,
	-1000, 11350, -1000, -1000, 1817, 1817, -1000, -1000, 3322, 45790,
	73, 3322, 3322, 81, -1000, -1000, -1000, 1699, 45790, 45790,
	852, 45790, -1000, 45790, 45790, -1000, -1000, 45790, 45790, 4547,
	45790, 41492, 42106, 3219, -1000, 36580, 45790, 45790, 34738, -1000,
	1405, -1000, -2, -1000, 10, 44, 1734, 44, 1734, -1000,
	603, 734, 22458, 536, 36580, 6399, -1000, -1000, 1734, 1734,
	6399, 6399, 1666, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1456, -1000, 274, 3263, -1000, -1000, -1000, -1000, -1000, 2201,
	2195, 2192, 45790, 41492, 36580, 2323, 45790, 854, 45790, 45790,
	45790, 45790, 45790, -1000, 2850, 1584, -1000, 3182, 45790, 45790,
	45790, 45790, 1297, -1000, -1000, 19376, 1563, 1297, -1000, 1910,
	-1000, 11350, 14444, -252, 11350, 14444, 14444, 11350, 14444, -1000,
	11350, 264, -1000, -1000, -1000, -1000, 2190, -1000, 2188, -1000,
	-1000, -1000, -1000, -1000, 2461, 2461, -1000, 2187, -1000, -1000,
	-1000, -1000, 2177, -1000, -1000, 2176, -1000, -1000, -1000, -1000,
	-158, 2653, 1172, -1000, 2454, 3064, -217, -1000, 20612, 45790,
	45790, 417, -323, -1000, 1881, 1878, 1875, -1000, -217, -1000,
	19994, 45790, 3263, -1000, -226, 3174, 11350, 45790, -1000, 3258,
	-1000, -1000, 307, -1000, 544, 384, -1000, -1000, -1000, -1000,
	-1000, -1000, 1534, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 398, 1452, -1000, 45790, -1000, -1000, 279,
	36580, 38422, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 251,
	-1000, -1000, 180, -1000, 891, 221, 1717, -1000, -1000, 195,
	215, 182, 965, 2320, -1000, 1920, 1920, 1931, -1000, 680,
	-1000, -1000, -1000, -1000, 2848, -1000, -1000, -1000, 2032, 2375,
	-1000, 1772, 1772, 1627, 1627, 1627, 1627, 1627, 1821, 1821,
	-1000, -1000, -1000, 7025, 2847, 13201, 13201, 13201, 13201, 935,
	935, 3872, 3850, -1000, -1000, -1000, -1000, 11350, 174, 1906,
	-1000, 11350, 2376, 1539, 2257, 1472, 1529, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2650, 2648, 2289,
	3360, 2645, 11350, -1000, -1000, 1714, 1704, 1703, -1000, 2124,
	10116, -1000, -1000, -1000, 2644, 1528, 2642, -1000, -1000, -1000,
	2641, 1698, 1255, 2639, 1620, 2637, 2636, 2634, 2632, 1443,
	11350, 11350, 11350, 11350, 2617, 1696, 1695, 11350, 11350, 11350,
	11350, 2611, 11350, 11350, 11350, 11350, 11350, 11350, 11350, 11350,
	11350, 11350, 115, 115, 115, 1440, 1439, -1000, -1000, 1694,
	-1000, 2320, -1000, -1000, 3174, -1000, 2846, 2174, 1410, -1000,
	-1000, -302, 2408, 45790, 1077, 45790, 2447, -287, 45790, -1000,
	-1000, 1075, 1050, 1082, 3257, 3181, 818, 45790, 1235, 2842,
	45790, 45790, 45790, 249, -1000, -1000, 1270, -1000, 221, 201,
	483, 1203, 3053, 3339, -137, 45790, 45790, 45790, 45790, 3192,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 40878, -1000,
	2824, 1638, -1000, -1000, 1603, 1603, 2320, 3051, 45790, 45790,
	3322, 3322, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1817,
	3322, 3322, 1425, 1699, 1817, -1000, -1000, 1817, -329, -1000,
	1817, -1000, -329, 1525, -329, 45790, -1000, -1000, -1000, 3191,
	2797, 1406, -1000, -1000, -1000, 3312, 1700, 846, 846, 1061,
	740, 3310, 18148, -1000, 1716, 1141, 885, 3158, 298, -1000,
	1716, -154, 824, 1716, 1716, 1716, 1716, 1716, 1716, 1716,
	607, 598, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716,
	1716, 1716, 1716, 1132, 1716, 1716, 1716, 1716, 1716, -1000,
	1716, 2823, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 748,
	557, 222, 3215, 345, -1000, 338, 1270, 3212, 394, 3292,
	1306, -1000, -1000, -1000, -1000, 26756, 26756, 21844, 26756, -1000,
	213, 44, 50, -1000, -1000, 1405, 6399, 1405, 6399, -1000,
	-1000, 883, -1000, -1000, 1203, -1000, 45790, 45790, -1000, -1000,
	2816, 1869, -1000, -1000, 15682, -1000, 6399, 6399, -1000, -1000,
	27984, 45790, -1000, -42, -1000, -34, 3174, -1000, -1000, -1000,
	1376, -1000, -1000, 1400, 1203, 3063, 45790, 1376, 1376, 1376,
	-1000, -1000, 17534, 45790, 45790, -1000, -1000, -1000, -1000, 3322,
	9493, -1000, 34738, -1000, -1000, 40264, -1000, 39650, 3322, 1879,
	-1000, 14444, 1999, 197, -1000, 262, -296, 192, 1929, 190,
	2320, -1000, -1000, 2606, 2603, 1636, -1000, 1632, 2600, 1629,
	1628, 2173, -1000, 28, -1000, 3154, 1223, -1000, 2815, -1000,
	1624, 3116, -1000, 1374, -1000, 1868, 1617, -1000, -1000, -1000,
	11350, 39036, 11350, 1223, 1616, 3109, 1374, 3174, 2445, -1000,
	1355, -1000, 2039, 1522, 188, -1000, -1000, -1000, 45790, 854,
	2453, 1613, 38422, 1302, -1000, 878, 1512, 1509, -1000, 36580,
	293, 36580, -1000, 36580, -1000, -1000, 379, -1000, 45790, 3169,
	-1000, -1000, -1000, 2408, 1846, -328, 45790, -1000, -1000, -1000,
	-1000, -1000, 1599, -1000, 935, 935, 3872, 3265, -1000, 13201,
	-1000, 13201, 2984, -1000, 1839, -1000, 11350, 1970, 3753, 11350,
	3753, 1719, 25528, 45790, -1000, -1000, 11350, 11350, -1000, 2972,
	-1000, -1000, -1000, -1000, 11350, 11350, 2235, -1000, 45790, -1000,
	-1000, -1000, -1000, 25528, -1000, 13201, -1000, -1000, -1000, -1000,
	11350, 1377, 1377, 2960, 1582, 115, 115, 115, 2952, 2913,
	2901, 1573, 115, 2877, 2789, 2773, 2764, 2732, 2680, 2676,
	2633, 2601, 2595, -1000, 2814, -1000, -1000, 2017, 11967, 8876,
	-1000, -1000, 297, 1341, 2168, 2442, 138, -1000, 1835, -1000,
	45790, 1153, -1000, 45790, 3331, -1000, -1000, -1000, 1042, 410,
	-1000, 2036, 137, 271, 2596, 1329, -1000, -1000, 45790, -1000,
	-1000, -1000, 17534, 2797, 2810, 2797, 106, 1716, 604, 36580,
	678, -1000, 45790, 45790, 2042, 1829, 3061, 519, 3165, 45790,
	2808, 414, 2806, 2805, 3190, 400, 5183, 45790, 1292, -1000,
	1500, 4137, -1000, 45790, -1000, 2323, -1000, 1699, -1000, -1000,
	3322, -1000, -1000, 11350, 11350, 3322, 1699, 1699, -1000, 1071,
	1817, -1000, 45790, -1000, -1000, 400, 5183, 3189, 4797, 591,
	2247, -1000, 45790, -1000, -1000, -1000, 800, -1000, 1059, 852,
	45790, 1957, 1059, 1948, 2799, -1000, -1000, 45790, 45790, 45790,
	45790, -1000, -1000, 45790, -1000, 45790, 45790, 45790, 45790, 45790,
	37808, -1000, 45790, 45790, -1000, 45790, 1947, 45790, 1942, 3150,
	-1000, 1716, 1716, 1001, -1000, -1000, 583, -1000, 37808, 2166,
	2164, 2162, 2161, 2440, 2439, 2438, 1716, 1716, 2160, 2420,
	37194, 2418, 1212, 2133, 2132, 2131, 2146, 2416, 861, -1000,
	2415, 2129, 2114, 2106, 45790, 2798, 2363, -1000, -1000, 2036,
	106, 1716, 335, 45790, 1828, 1820, 604, 479, -47, 23072,
	45790, 34738, 34738, 34738, 34738, -1000, 3098, 3084, 3083, -1000,
	3086, 3082, 3092, 45790, 34738, 2797, -1000, 37194, -1000, -1000,
	-1000, 1543, 1553, 2983, 1055, 11350, -1000, -1000, -12, -23,
	-1000, -1000, -1000, 36580, 2414, 536, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 3252, 45790, 45790, 829, 2592, 1324, -1000,
	-1000, -1000, 5183, 2768, 2768, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2768, 2768, 2779, -1000, -1000, 2767,
	2767, 2767, 2694, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2769, 2769, 2778, 2778, 2769, -1000, -1000,
	3320, -1000, 1323, -1000, -1000, 1499, -1000, 3320, 1912, -310,
	14444, 1896, 1739, -1000, 11350, 14444, 11350, -253, 321, -257,
	-1000, -1000, -1000, 2412, -1000, -1000, -1000, 2126, -1000, 2111,
	-1000, 165, 179, 1940, -217, 8876, 437, 45790, -217, 45790,
	8876, -1000, 45790, 168, -338, -346, 159, 429, -217, 3252,
	28, 11350, 3141, -1000, -1000, 45790, 2103, -1000, -1000, -1000,
	3327, 36580, 2323, 1675, 35966, -1000, 287, -1000, 240, 581,
	2411, -1000, 910, 135, 2409, 2408, -1000, -1000, -1000, -1000,
	13201, 1603, -1000, -1000, -1000, 2320, 11350, 2589, -1000, 1052,
	1052, 2110, 2587, 2585, -1000, 2768, 2768, -1000, 2694, 2767,
	2694, 1052, 1052, 2584, -1000, 2143, 2591, -1000, 2455, 2332,
	11350, -1000, 2582, 4168, 1416, -68, -186, 115, 115, -1000,
	-1000, -1000, -1000, 115, 115, 115, 115, -1000, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 803, -98,
	-279, -110, -282, -1000, 2581, 1317, -1000, -1000, -1000, -1000,
	-1000, 561, 1313, 497, 497, 2408, 2407, 875, 1068, 45790,
	2406, -292, -1000, -1000, -1000, 45790, 2403, -1000, 556, 45790,
	45790, 2402, 2396, 1235, 5183, 2572, 3188, 16920, 3187, 2141,
	-1000, -1000, -1000, 27370, 567, -1000, -1000, -1000, 656, 336,
	2086, 553, -1000, 45790, 394, 394, 3131, 1819, 2395, 45790,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 3165, -1000, 952,
	433, 33510, 15068, -1000, 393, 45790, -1000, 16920, 16920, 393,
	436, 1799, -1000, 797, 1286, 144, 34738, 45790, -1000, 34124,
	2569, -1000, 1203, 3322, -1000, 2320, 2320, -329, 3322, 3322,
	1810, 1699, -1000, 436, -1000, 393, -1000, 1210, 18762, 515,
	501, 493, -1000, 666, -1000, -1000, 781, 3148, 5183, -1000,
	45790, -1000, 45790, -1000, 45790, 45790, 852, 11350, 3148, 45790,
	872, -1000, -1000, 1154, 463, 395, 733, 733, 1309, -1000,
	3173, -1000, -1000, 1307, -1000, -1000, -1000, -1000, 45790, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 25528, 25528, 3210, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2394, 2391, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 45790, 1549, -1000, 1808, 2387, 2141, 27370,
	1788, 1734, 2386, 2384, 567, 2042, 1787, 2116, 45790, -1000,
	1243, 45790, 45790, -1000, 1408, -1000, 1782, 3045, 3060, 3045,
	-1000, -1000, -1000, -1000, -1000, 3080, -1000, 2928, -1000, -1000,
	1408, -1000, -1000, -1000, -1000, -1000, 1055, -1000, 3246, 1059,
	1059, 1059, 2568, -1000, -1000, -1000, 1302, 2565, -1000, -1000,
	-1000, 3381, -1000, -1000, -1000, -1000, -1000, -1000, 17534, 3164,
	3266, 3309, 35352, 3266, -1000, -310, 1775, -1000, 1951, 185,
	1876, 45790, -1000, -1000, -1000, 2563, 2562, -228, 175, 3303,
	3301, 1083, -1000, 2561, 1295, -217, -1000, -1000, 1223, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -217, -1000, 1223, -1000,
	165, -1000, -1000, 3151, -1000, -1000, 2323, -1000, 238, -1000,
	-1000, -1000, -1000, -1000, -1000, 208, -1000, 45790, -1000, 1288,
	119, -1000, 2320, -1000, -1000, -1000, -1000, -1000, 3753, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	11350, -1000, -1000, -1000, 2309, -1000, -1000, 11350, 2559, 2382,
	2553, 2378, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3386, -1000,
	3297, 1548, 2548, 2547, 1536, 2545, 2542, -1000, 11350, 2540,
	561, 1012, 2377, 1012, -1000, -1000, 387, 45790, 3325, -1000,
	45790, -1000, -1000, 2036, 542, 672, -1000, -1000, -1000, -1000,
	947, 393, 2539, 1287, -1000, -1000, -1000, -1000, 393, -1000,
	2374, 211, -1000, -1000, -1000, -1000, 2370, 2367, 2085, -1000,
	-1000, 2105, 1506, 241, -1000, -1000, -1000, -1000, -1000, -1000,
	2116, 2116, 2075, 1774, -332, -1000, 2756, -1000, 1716, 1716,
	1716, 45790, 1532, -1000, 1716, 1716, 2536, -1000, -1000, 2526,
	2524, -138, 789, 1841, 1812, -1000, 2084, 26756, 34738, 34124,
	1310, -1000, 1498, -1000, -1000, -1000, -1000, -1000, -1000, 2366,
	3322, 789, -1000, 507, 2067, 13201, 2755, 13201, 2751, 528,
	2747, 1510, -1000, 45790, -1000, -1000, 45790, 721, 2742, -1000,
	2735, 2954, 495, 2734, 2721, 45790, 2250, -1000, 3148, 45790,
	724, 3161, -1000, -1000, -1000, 381, -1000, -1000, 559, -1000,
	45790, -1000, 45790, -1000, 1547, -1000, 25528, -1000, -1000, 1505,
	-1000, 2363, 2362, -1000, -1000, 211, 2361, 6399, -1000, -1000,
	-1000, 3131, 2360, -1000, 2359, -1000, 45790, 1243, 1243, 3386,
	45790, 8876, -1000, -1000, 11350, 2719, -1000, 11350, -1000, -1000,
	-1000, -1000, -1000, 2716, 3153, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1741, -1000, 11350, 11350, -1000, -1000, 849, 14444,
	-258, 319, -1000, -1000, -1000, -235, 2358, -1000, -1000, 3296,
	2349, 2226, 45790, -1000, -1000, 1223, 1223, -228, -1000, -1000,
	1203, -1000, -1000, 1139, 629, -1000, 2523, 2241, -1000, 2167,
	115, -1000, 115, -1000, 228, 11350, -1000, 2347, -1000, -1000,
	-1000, 2340, -1000, -1000, 2157, -1000, 2522, -1000, 2339, -1000,
	-1000, 45790, 870, 1065, 2330, 2324, 2036, 2036, 45790, 5183,
	-142, -138, 16920, -142, -1000, -1000, 375, -1000, -1000, 369,
	-1000, -1000, 2034, 616, -1000, -1000, -1000, -1000, 1761, 1974,
	2271, 31668, 25528, 26142, 2318, -1000, -1000, 33510, 1741, 1741,
	48842, 295, 48918, -1000, 2714, 1140, 1806, -1000, 2066, -1000,
	2064, -1000, 3322, 1310, 142, -1000, -1000, 1544, -348, -1000,
	1140, 2247, 3295, -1000, 3966, 45790, 3940, 45790, 2702, 1752,
	13201, -1000, 781, 3108, -1000, -1000, 721, -1000, -1000, 1966,
	13201, -1000, -1000, 2317, 26142, 896, 1750, 1732, 927, 2698,
	-1000, 570, 3379, -1000, -1000, -1000, 999, 2697, -1000, 1939,
	1936, -1000, 45790, -1000, 31668, 31668, 801, 801, 31668, 31668,
	2696, 733, -1000, -1000, 13201, -1000, -1000, 1716, -1000, -1000,
	-1000, 1716, 1540, -1000, -1000, -1000, -1000, -1000, -1000, 2075,
	-1000, -1000, -1000, 3263, -1000, -1000, 2320, 45790, 2320, 32896,
	-1000, 3294, 3288, -1000, 2320, 1172, -1000, -310, 45790, 45790,
	-240, 2059, -1000, 2316, 169, -1000, -1000, 1186, -235, -243,
	81, 25528, 1731, -1000, -1000, -1000, -1000, -1000, 2521, -1000,
	1010, -1000, -1000, -1000, 1172, 2517, 2460, -1000, -1000, -1000,
	-1000, 386, 45790, -1000, -1000, 2307, 2302, 540, -133, -1000,
	-1000, 465, -1000, -1000, -1000, 593, 2223, -1000, -1000, 363,
	-1000, -1000, 2301, -1000, -1000, 117, -1000, 1729, 1491, -1000,
	2694, 11350, -1000, -1000, -1000, -1000, -1000, -1000, 778, -1000,
	393, 5305, -1000, 1141, -1000, 1139, 778, 30440, 633, 294,
	-1000, 2057, -1000, -1000, 3386, -1000, -1000, 631, -1000, 522,
	-1000, 1482, -1000, 1462, 32282, 2055, 2830, -1000, 48880, 892,
	-1000, -1000, 3872, -1000, -1000, -1000, -1000, -1000, -1000, 2300,
	2298, -1000, -1000, -1000, -1000, -1000, 2041, 2692, -27, 3207,
	2297, -1000, -1000, 2691, 1461, 1420, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1419, 1398, 31668, -1000, -1000,
	3872, 2040, 25528, 1716, -1000, -1000, 1387, 1384, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2690, -1000, -1000, 3283, -240,
	-246, 2287, 164, 157, -1000, 2286, -1000, -1000, 962, -219,
	118, 116, 105, -1000, -1000, -1000, 11350, -1000, -1000, 45790,
	863, -1000, -1000, 2036, 45790, 565, -1000, -1000, -1000, -1000,
	207, -1000, -1000, -1000, -1000, -1000, 2271, 2270, -1000, 31668,
	3173, 2135, 503, 3282, -1000, 48918, -1000, 1716, -1000, 503,
	1378, -1000, 1716, 1716, -1000, 446, -1000, 1723, -1000, 2033,
	-1000, 3263, -1000, 442, -1000, 505, -1000, -1000, -1000, 1357,
	-1000, -1000, -1000, 48880, 512, -1000, 755, 2688, -1000, -1000,
	2381, 11350, 2687, 1716, 2182, -128, 31668, 2903, 2813, 2775,
	2766, 1339, -1000, -1000, 25528, -1000, -1000, 31054, 45790, 2226,
	-1000, -1000, 2268, -1000, 857, 163, 157, -1000, 3277, 121,
	3276, 3275, 1165, 1922, -1000, 140, 136, 112, -1000, -1000,
	-1000, -1000, -1000, 378, 2267, 551, -1000, 285, -1000, -1000,
	-1000, 309, -1000, -1000, 3173, -1000, 3274, 591, -1000, 25528,
	-1000, -1000, 30440, 1741, 1741, -1000, -1000, 2024, -1000, -1000,
	-1000, -1000, 2023, -1000, -1000, -1000, 1321, -1000, 45790, 1007,
	8259, -1000, 2077, -1000, 45790, -1000, 3059, -1000, 277, 1320,
	309, 801, 309, 801, 309, 801, 309, 801, 281, -1000,
	-1000, -1000, 1293, -1000, -1000, -1000, 2679, 2000, 175, 160,
	3273, -1000, 2226, 3267, 2226, 2226, -1000, 130, 962, -1000,
	-1000, -1000, 45790, -1000, 2256, -1000, -1000, -1000, -1000, 1716,
	1716, 2251, 2246, 427, -1000, -1000, -1000, 29826, 515, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 512, 48918, -1000, 8259,
	1278, -1000, 2320, -1000, 733, -1000, -1000, 3058, 3056, 3336,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	45790, 3204, 24914, 150, -1000, -1000, -1000, 2242, -1000, 2226,
	-1000, -1000, 1713, -1000, -1000, -275, 1993, 1988, -1000, -1000,
	45790, -1000, 45790, 507, -1000, 48918, 1273, -1000, 8259, -1000,
	-1000, 3298, -1000, 3377, 990, 990, 309, 309, 309, 309,
	-1000, -1000, 45790, -1000, 1261, -1000, -1000, -1000, 1489, -1000,
	-1000, -1000, -1000, 2218, -1000, -1000, 2153, -1000, -1000, -1000,
	1257, 2247, -1000, -1000, -1000, -1000, -1000, 2027, 574, -1000,
	1164, -1000, 1710, -1000, 29212, 45790, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 45790, 7642, -1000, 1488, -1000, -1000, 2320,
	45790, -1000,
}

var yyPgo = [...]int{
	0, 177, 3398, 249, 179, 3911, 130, 257, 232, 229,
	256, 3910, 3909, 3908, 3905, 3174, 3168, 3904, 3902, 3901,
	3900, 3899, 3898, 3897, 3896, 3895, 3894, 3893, 3892, 3890,
	3889, 3888, 3887, 3883, 3882, 3881, 3877, 3874, 3872, 3871,
	3870, 3869, 3868, 3866, 3865, 3864, 3863, 255, 3862, 3861,
	3860, 3859, 3854, 3853, 3852, 3851, 3850, 3849, 3848, 3847,
	3846, 3845, 3842, 3841, 3840, 3837, 3835, 3832, 3831, 3830,
	3829, 3828, 3827, 3826, 3825, 3824, 3820, 3819, 3818, 251,
	3817, 3816, 219, 3815, 3167, 3814, 3813, 3808, 3807, 3805,
	3799, 3798, 240, 3794, 3793, 3792, 3791, 3790, 3789, 3787,
	3785, 3783, 3782, 3780, 238, 3779, 3778, 3777, 3776, 254,
	3775, 212, 3774, 175, 143, 3773, 3772, 3769, 3767, 3766,
	3765, 3762, 235, 196, 76, 3761, 52, 3760, 3759, 223,
	3754, 153, 3751, 159, 3749, 3747, 3745, 3744, 3743, 3742,
	3741, 3740, 3739, 3738, 3735, 3733, 3728, 3727, 3724, 3723,
	3722, 3721, 3716, 3714, 3713, 3712, 3711, 94, 3710, 265,
	3708, 81, 3707, 183, 135, 3706, 53, 136, 268, 2468,
	275, 258, 191, 182, 101, 3705, 333, 3704, 164, 230,
	162, 35, 3703, 140, 3702, 266, 44, 51, 252, 150,
	57, 163, 127, 3701, 220, 109, 107, 3699, 3698, 147,
	3697, 243, 185, 3696, 104, 3695, 3694, 3692, 3691, 3689,
	200, 192, 3686, 3685, 132, 3683, 3682, 73, 139, 3680,
	75, 131, 173, 123, 3679, 2693, 117, 113, 134, 98,
	3678, 79, 3677, 3676, 3671, 3670, 187, 3669, 3668, 138,
	68, 3667, 3665, 3664, 74, 3661, 80, 3660, 39, 3659,
	67, 3656, 3651, 3650, 3647, 3646, 3644, 3643, 3642, 3641,
	3640, 3639, 3638, 55, 3635, 3634, 7, 11, 16, 3633,
	27, 3631, 172, 3630, 3625, 3624, 3623, 3621, 96, 89,
	3620, 91, 167, 3618, 8, 26, 77, 3617, 3616, 224,
	186, 102, 155, 3615, 290, 3613, 3612, 3610, 170, 3609,
	452, 3608, 3607, 3605, 3603, 3601, 3600, 144, 3599, 1,
	221, 41, 3598, 137, 148, 3597, 40, 47, 110, 210,
	141, 95, 3596, 3595, 3594, 671, 197, 97, 28, 0,
	3593, 225, 160, 3592, 3588, 3586, 259, 3584, 233, 236,
	168, 305, 263, 201, 3583, 3579, 71, 129, 3578, 165,
	31, 54, 145, 60, 21, 248, 3577, 1100, 10, 207,
	3576, 202, 3574, 245, 15, 128, 156, 3573, 3571, 33,
	262, 3569, 3568, 3567, 133, 3566, 3564, 313, 78, 3563,
	3562, 3560, 3559, 37, 3558, 38, 14, 3557, 122, 3556,
	247, 3555, 190, 146, 188, 184, 181, 226, 241, 83,
	84, 3554, 1848, 158, 100, 17, 3553, 227, 3552, 171,
	121, 3550, 86, 3549, 250, 264, 205, 3548, 189, 13,
	49, 36, 29, 46, 9, 316, 199, 3547, 3546, 22,
	50, 3545, 62, 3544, 19, 3543, 3542, 45, 3541, 63,
	5, 3540, 3538, 18, 20, 3536, 34, 218, 174, 126,
	92, 72, 3535, 3534, 48, 246, 3532, 152, 157, 161,
	3531, 82, 3530, 3529, 3527, 3525, 904, 3524, 260, 3523,
	3522, 3521, 3520, 3517, 3512, 3510, 3509, 213, 3508, 125,
	42, 3507, 3506, 3505, 3504, 103, 154, 3503, 3502, 3501,
	3500, 30, 142, 3496, 12, 3495, 25, 23, 32, 3492,
	99, 3491, 3, 193, 3488, 3487, 4, 3486, 3484, 2,
	3483, 3481, 119, 3477, 93, 24, 169, 105, 3476, 3475,
	90, 211, 149, 3474, 3473, 108, 244, 216, 3472, 120,
	242, 261, 3471, 217, 3469, 3467, 3466, 3464, 3462, 3460,
	1231, 3459, 3458, 239, 70, 88, 3457, 231, 112, 3456,
	3455, 85, 166, 116, 115, 61, 87, 3453, 111, 203,
	3451, 195, 3449, 3448, 3447, 106, 3446, 3445, 3444, 3443,
	194, 3442, 3440, 198, 228, 3439, 3438, 283, 3437, 3436,
	3434, 3433, 3429, 3428, 3427, 3426, 3424, 3421, 237, 234,
	3400,
}

//line mysql_sql.y:12274
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) atTimeStampUnion() *tree.AtTimeStamp {
	v, _ := st.union.(*tree.AtTimeStamp)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() tree.GroupBy {
	v, _ := st.union.(tree.GroupBy)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) snapshotObjectUnion() tree.ObjectInfo {
	v, _ := st.union.(tree.ObjectInfo)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) upgrade_targetUnion() *tree.Target {
	v, _ := st.union.(*tree.Target)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 583, 586, 586, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 119, 119, 320, 320,
	321, 321, 149, 562, 562, 151, 151, 151, 151, 151,
	437, 120, 120, 120, 120, 120, 120, 120, 155, 155,
	155, 118, 568, 568, 568, 569, 569, 115, 138, 137,
	140, 140, 139, 139, 136, 136, 132, 135, 135, 134,
	134, 133, 128, 130, 130, 129, 131, 131, 116, 104,
	117, 511, 511, 510, 510, 509, 509, 462, 462, 463,
	463, 309, 309, 309, 508, 508, 508, 507, 507, 506,
	506, 505, 505, 503, 503, 504, 502, 501, 501, 501,
	499, 499, 499, 495, 495, 497, 496, 496, 498, 490,
	490, 493, 493, 491, 491, 491, 491, 494, 489, 489,
	489, 488, 488, 103, 103, 103, 404, 404, 102, 102,
	418, 418, 418, 418, 418, 416, 416, 416, 416, 416,
	416, 415, 415, 414, 414, 419, 419, 417, 417, 417,
	417, 417, 417, 417, 417, 417, 417, 417, 417, 417,
	417, 417, 417, 417, 417, 417, 417, 417, 417, 417,
	417, 417, 417, 417, 417, 417, 417, 417, 417, 417,
	417, 417, 417, 417, 417, 417, 417, 417, 417, 417,
	417, 417, 417, 417, 417, 417, 417, 417, 93, 93,
	93, 93, 93, 98, 98, 98, 574, 574, 573, 573,
	575, 575, 575, 575, 576, 576, 96, 96, 96, 97,
	413, 413, 413, 94, 95, 95, 403, 403, 408, 408,
	407, 407, 407, 407, 407, 407, 407, 407, 407, 407,
	407, 407, 407, 412, 412, 412, 410, 410, 409, 409,
	411, 411, 87, 87, 87, 90, 89, 402, 402, 402,
	402, 402, 402, 402, 402, 402, 88, 88, 88, 88,
	88, 88, 83, 83, 83, 83, 83, 82, 82, 84,
	84, 400, 400, 399, 99, 99, 100, 571, 571, 570,
	572, 572, 572, 572, 101, 107, 107, 107, 107, 107,
	107, 107, 107, 106, 106, 109, 109, 108, 110, 92,
	92, 92, 92, 92, 92, 91, 91, 91, 91, 91,
	91, 91, 91, 91, 91, 91, 91, 91, 536, 536,
	536, 538, 538, 334, 335, 587, 337, 333, 333, 333,
	532, 532, 533, 534, 535, 535, 535, 105, 14, 200,
	200, 436, 436, 11, 11, 11, 11, 11, 11, 11,
	11, 11, 13, 81, 86, 86, 271, 271, 276, 276,
	154, 277, 277, 277, 282, 282, 283, 283, 272, 272,
	272, 272, 272, 272, 272, 272, 272, 272, 272, 272,
	272, 272, 272, 272, 272, 272, 272, 272, 272, 272,
	258, 258, 258, 253, 253, 253, 253, 254, 254, 255,
	255, 256, 256, 256, 256, 257, 257, 326, 326, 278,
	278, 278, 280, 280, 279, 275, 273, 273, 273, 273,
	273, 273, 273, 274, 274, 274, 274, 281, 281, 79,
	85, 85, 85, 85, 550, 550, 80, 561, 561, 466,
	466, 349, 349, 348, 348, 348, 348, 348, 348, 348,
	348, 348, 348, 348, 348, 348, 348, 348, 348, 471,
	472, 344, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 54, 57, 58, 153, 53,
	53, 53, 389, 389, 52, 588, 588, 319, 319, 67,
	66, 56, 68, 69, 70, 71, 72, 73, 51, 65,
	65, 65, 65, 65, 65, 65, 65, 76, 484, 484,
	590, 590, 590, 74, 75, 465, 465, 465, 64, 63,
	62, 61, 60, 60, 50, 50, 49, 49, 55, 144,
	59, 145, 145, 341, 341, 341, 343, 343, 339, 347,
	347, 589, 589, 432, 432, 342, 342, 48, 48, 48,
	48, 77, 340, 340, 318, 338, 338, 338, 12, 12,
	10, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 26, 27, 29,
	397, 397, 394, 28, 20, 19, 19, 23, 22, 18,
	18, 21, 24, 25, 25, 9, 9, 9, 9, 15,
	15, 16, 173, 173, 226, 226, 544, 544, 540, 540,
	541, 541, 541, 542, 542, 543, 543, 111, 478, 478,
	478, 478, 478, 478, 8, 8, 195, 195, 477, 477,
	477, 477, 477, 477, 401, 401, 401, 521, 521, 521,
	522, 194, 194, 189, 189, 479, 479, 366, 523, 523,
	487, 487, 486, 486, 485, 485, 192, 192, 193, 193,
	176, 176, 123, 123, 492, 492, 492, 492, 500, 500,
	461, 461, 263, 263, 311, 311, 312, 312, 166, 166,
	167, 167, 167, 167, 167, 167, 577, 577, 578, 579,
	580, 580, 581, 581, 581, 582, 582, 582, 582, 582,
	529, 529, 531, 531, 530, 191, 191, 187, 187, 188,
	188, 188, 186, 186, 185, 184, 184, 183, 181, 181,
	181, 182, 182, 182, 199, 199, 169, 169, 169, 168,
	168, 168, 168, 168, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 170, 170, 537, 537,
	537, 467, 467, 467, 474, 474, 291, 291, 292, 292,
	290, 290, 171, 171, 172, 172, 172, 172, 289, 289,
	288, 174, 174, 180, 179, 179, 175, 175, 175, 175,
	299, 299, 298, 298, 298, 298, 114, 121, 121, 122,
	198, 198, 297, 296, 296, 296, 296, 197, 197, 196,
	196, 190, 190, 178, 178, 178, 178, 295, 177, 293,
	567, 567, 566, 566, 565, 563, 563, 563, 564, 564,
	564, 564, 513, 513, 513, 513, 513, 327, 327, 327,
	332, 332, 330, 330, 330, 330, 330, 336, 7, 7,
	7, 7, 7, 7, 7, 7, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 39,
	209, 210, 40, 211, 211, 212, 212, 213, 213, 214,
	215, 216, 216, 216, 216, 38, 201, 201, 202, 202,
	203, 203, 204, 205, 205, 205, 208, 206, 207, 207,
	585, 585, 584, 37, 37, 30, 158, 158, 159, 159,
	159, 161, 161, 259, 259, 259, 160, 160, 162, 162,
	162, 545, 547, 547, 549, 548, 548, 548, 551, 551,
	551, 551, 551, 552, 552, 552, 552, 553, 553, 31,
	141, 141, 146, 556, 556, 556, 555, 555, 557, 557,
	558, 558, 315, 315, 316, 316, 156, 157, 157, 148,
	143, 164, 164, 164, 164, 164, 165, 165, 142, 147,
	150, 152, 546, 554, 554, 554, 398, 398, 395, 396,
	396, 393, 392, 392, 392, 560, 560, 559, 559, 559,
	328, 328, 32, 388, 388, 390, 391, 391, 391, 382,
	382, 382, 382, 36, 386, 386, 387, 387, 387, 387,
	387, 387, 387, 383, 383, 385, 385, 381, 381, 381,
	381, 381, 381, 381, 35, 163, 163, 380, 380, 377,
	377, 375, 375, 376, 376, 374, 374, 374, 378, 378,
	43, 78, 44, 45, 46, 42, 379, 379, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 125, 124,
	124, 124, 124, 124, 127, 127, 314, 314, 313, 313,
	126, 260, 260, 41, 238, 238, 453, 453, 448, 448,
	448, 448, 448, 469, 469, 469, 449, 449, 449, 450,
	450, 450, 452, 452, 452, 451, 451, 451, 451, 451,
	468, 468, 470, 470, 470, 420, 420, 421, 421, 421,
	424, 424, 440, 440, 441, 441, 439, 439, 446, 446,
	445, 445, 444, 444, 443, 443, 442, 442, 442, 442,
	435, 435, 434, 434, 422, 422, 422, 422, 422, 423,
	423, 423, 433, 433, 438, 438, 287, 287, 286, 286,
	246, 246, 247, 247, 285, 285, 244, 244, 245, 245,
	245, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 519, 519, 520, 249,
	249, 261, 261, 261, 261, 261, 261, 248, 248, 250,
	250, 227, 227, 225, 225, 217, 217, 217, 217, 217,
	217, 218, 218, 219, 219, 220, 220, 220, 224, 224,
	223, 223, 223, 223, 221, 221, 222, 222, 222, 222,
	222, 222, 406, 406, 516, 516, 517, 517, 512, 512,
	512, 515, 515, 515, 515, 515, 515, 515, 518, 518,
	518, 514, 514, 228, 308, 308, 308, 329, 329, 329,
	329, 331, 307, 307, 307, 243, 243, 242, 242, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 405, 405, 345, 345, 346, 346, 270, 269, 269,
	269, 269, 269, 267, 268, 266, 266, 266, 266, 266,
	265, 265, 264, 264, 264, 384, 384, 262, 262, 252,
	252, 252, 251, 251, 251, 447, 353, 353, 353, 353,
	353, 353, 353, 353, 353, 353, 353, 353, 353, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 305, 305, 305, 306, 306,
	306, 306, 306, 306, 306, 306, 356, 356, 362, 362,
	528, 528, 527, 229, 229, 229, 230, 230, 230, 230,
	230, 230, 230, 230, 230, 239, 239, 239, 429, 429,
	429, 429, 430, 430, 430, 430, 431, 431, 431, 427,
	427, 428, 428, 367, 368, 368, 475, 475, 476, 476,
	425, 425, 426, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 483, 483, 483, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 539, 539, 539, 524, 524, 524,
	525, 525, 525, 525, 525, 525, 525, 525, 525, 525,
	525, 525, 526, 526, 526, 526, 526, 526, 526, 526,
	526, 526, 526, 526, 526, 526, 526, 526, 526, 303,
	303, 303, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	369, 369, 370, 370, 480, 480, 480, 480, 480, 480,
	481, 481, 482, 482, 482, 482, 473, 473, 473, 473,
	473, 473, 473, 473, 473, 473, 473, 473, 473, 473,
	473, 473, 473, 473, 473, 473, 473, 473, 473, 473,
	473, 473, 473, 473, 473, 354, 300, 300, 300, 371,
	363, 363, 364, 364, 365, 365, 357, 357, 357, 357,
	357, 357, 358, 358, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 352, 352, 352, 352, 352,
	352, 352, 352, 352, 352, 352, 359, 359, 361, 361,
	373, 373, 373, 372, 372, 372, 372, 372, 372, 372,
	241, 241, 241, 241, 351, 351, 351, 350, 350, 350,
	350, 350, 350, 350, 350, 350, 350, 350, 350, 231,
	231, 231, 231, 235, 235, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 236,
	236, 236, 236, 236, 234, 234, 234, 234, 234, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 112, 113, 113,
	233, 310, 310, 454, 454, 457, 457, 455, 455, 456,
	458, 458, 458, 459, 459, 459, 460, 460, 460, 464,
	464, 317, 317, 317, 325, 325, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 8, 8, 0, 2,
	0, 2, 6, 1, 2, 7, 9, 10, 10, 12,
	1, 5, 6, 8, 10, 9, 11, 13, 5, 7,
	9, 4, 0, 1, 1, 0, 1, 5, 2, 2,
	6, 9, 6, 9, 4, 7, 8, 0, 1, 1,
	2, 4, 6, 1, 2, 4, 0, 2, 10, 11,
	2, 0, 2, 1, 3, 3, 3, 0, 2, 0,
	2, 1, 3, 5, 0, 2, 3, 1, 3, 1,
	1, 1, 3, 1, 1, 1, 1, 0, 3, 3,
	0, 3, 3, 0, 1, 3, 0, 1, 3, 0,
	2, 1, 2, 3, 4, 3, 3, 1, 0, 1,
	1, 0, 1, 8, 5, 7, 0, 3, 8, 5,
	1, 3, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 4, 1, 3, 1, 2, 2,
	2, 2, 2, 2, 2, 1, 2, 2, 2, 2,
	1, 1, 2, 2, 1, 1, 1, 1, 1, 2,
	2, 2, 1, 2, 1, 2, 2, 1, 2, 1,
	1, 2, 2, 1, 1, 1, 3, 2, 2, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 4, 4, 1, 3, 3, 1,
	2, 2, 2, 1, 2, 2, 3, 4, 4, 6,
	1, 1, 1, 2, 4, 6, 1, 4, 1, 3,
	3, 4, 4, 4, 4, 3, 3, 2, 4, 4,
	2, 2, 2, 1, 1, 1, 1, 1, 1, 3,
	1, 3, 1, 1, 1, 2, 2, 0, 1, 4,
	2, 4, 1, 5, 3, 2, 1, 2, 2, 4,
	4, 5, 2, 1, 3, 4, 4, 1, 2, 9,
	7, 1, 3, 3, 1, 1, 3, 1, 3, 2,
	1, 2, 1, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 4, 2, 4, 3, 3, 1,
	1, 1, 1, 1, 1, 2, 3, 4, 7, 2,
	3, 3, 4, 5, 3, 4, 4, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 2, 1, 1, 1, 1, 6, 4, 1,
	1, 0, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 10, 7, 4, 4, 1, 3, 1, 6,
	7, 3, 3, 3, 1, 1, 1, 3, 2, 4,
	5, 5, 6, 5, 5, 3, 2, 2, 1, 3,
	4, 3, 7, 5, 8, 2, 2, 1, 3, 2,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 0,
	1, 2, 1, 3, 2, 1, 2, 2, 1, 2,
	3, 2, 2, 3, 6, 3, 3, 1, 1, 7,
	7, 7, 8, 8, 0, 4, 7, 0, 3, 0,
	2, 0, 1, 1, 1, 1, 4, 2, 2, 3,
	3, 4, 5, 3, 4, 4, 2, 2, 2, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 3, 3, 3, 2,
	5, 5, 0, 2, 7, 0, 1, 0, 1, 5,
	5, 3, 3, 2, 4, 4, 4, 4, 4, 1,
	1, 1, 3, 3, 1, 1, 1, 6, 0, 1,
	1, 1, 1, 5, 5, 0, 1, 1, 3, 3,
	3, 4, 7, 7, 5, 4, 7, 8, 3, 3,
	2, 3, 4, 0, 2, 2, 0, 2, 2, 0,
	5, 1, 1, 1, 1, 0, 1, 5, 5, 5,
	4, 3, 1, 3, 1, 1, 3, 5, 2, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 4, 4,
	1, 3, 1, 4, 6, 6, 4, 4, 4, 4,
	4, 3, 6, 3, 5, 1, 1, 2, 2, 11,
	8, 9, 1, 3, 2, 4, 0, 2, 0, 1,
	1, 1, 1, 0, 1, 0, 1, 4, 2, 1,
	5, 4, 4, 2, 5, 5, 1, 3, 2, 1,
	5, 4, 4, 2, 0, 5, 4, 0, 1, 3,
	3, 1, 3, 1, 3, 1, 3, 4, 0, 1,
	0, 1, 1, 3, 1, 1, 0, 4, 1, 3,
	2, 1, 0, 8, 0, 4, 7, 4, 0, 2,
	0, 2, 0, 2, 0, 4, 1, 3, 1, 1,
	6, 4, 5, 7, 4, 5, 0, 1, 3, 8,
	0, 6, 0, 4, 6, 1, 1, 1, 1, 1,
	2, 3, 1, 3, 6, 0, 3, 0, 1, 2,
	4, 4, 0, 1, 3, 1, 3, 3, 0, 1,
	1, 0, 2, 2, 0, 2, 3, 3, 3, 1,
	3, 3, 3, 3, 1, 2, 2, 1, 2, 2,
	1, 2, 2, 1, 2, 2, 7, 7, 1, 1,
	1, 0, 1, 1, 1, 1, 0, 2, 0, 3,
	0, 2, 1, 3, 1, 2, 3, 5, 0, 1,
	2, 1, 3, 1, 1, 1, 4, 4, 4, 3,
	2, 2, 2, 3, 2, 3, 4, 1, 3, 4,
	0, 2, 1, 1, 2, 2, 2, 0, 1, 2,
	4, 1, 3, 1, 3, 2, 3, 1, 4, 3,
	0, 1, 1, 2, 5, 2, 2, 2, 0, 2,
	3, 3, 0, 1, 3, 1, 3, 0, 1, 2,
	1, 1, 0, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 7,
	1, 1, 7, 1, 3, 0, 1, 1, 3, 1,
	3, 0, 1, 1, 1, 14, 1, 3, 0, 1,
	1, 3, 1, 1, 2, 4, 1, 1, 1, 1,
	0, 1, 2, 9, 9, 7, 1, 2, 3, 3,
	3, 0, 4, 1, 1, 1, 1, 1, 0, 1,
	1, 1, 1, 1, 4, 1, 1, 1, 3, 3,
	4, 3, 3, 0, 1, 1, 1, 0, 2, 7,
	8, 8, 8, 0, 3, 3, 0, 3, 0, 3,
	0, 5, 1, 3, 0, 3, 3, 0, 2, 9,
	7, 0, 2, 2, 3, 3, 0, 2, 4, 4,
	4, 4, 1, 0, 2, 2, 1, 3, 2, 1,
	3, 2, 1, 3, 2, 0, 1, 3, 4, 3,
	1, 1, 4, 1, 3, 1, 1, 1, 1, 0,
	1, 1, 1, 11, 0, 2, 3, 3, 2, 2,
	3, 1, 1, 1, 3, 3, 4, 0, 2, 2,
	2, 2, 2, 2, 6, 0, 4, 1, 1, 0,
	3, 0, 1, 1, 2, 4, 4, 4, 0, 1,
	8, 2, 4, 4, 4, 9, 0, 2, 11, 9,
	11, 8, 6, 9, 7, 10, 7, 6, 2, 2,
	9, 4, 5, 3, 0, 4, 1, 3, 0, 3,
	6, 0, 2, 10, 0, 2, 0, 2, 0, 3,
	2, 4, 3, 0, 2, 1, 0, 2, 3, 0,
	2, 3, 0, 2, 1, 0, 3, 2, 4, 3,
	0, 1, 0, 1, 1, 0, 6, 0, 3, 5,
	0, 4, 0, 3, 1, 3, 4, 5, 0, 3,
	1, 3, 2, 3, 1, 2, 0, 4, 6, 5,
	0, 2, 0, 2, 4, 5, 4, 5, 1, 5,
	6, 5, 0, 3, 0, 1, 1, 3, 3, 3,
	0, 4, 1, 3, 3, 3, 0, 1, 1, 3,
	2, 3, 3, 3, 4, 4, 3, 3, 3, 3,
	4, 4, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 1, 5, 4, 1, 3, 3, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 2, 4, 0, 2, 5, 5, 5,
	5, 0, 1, 1, 3, 1, 1, 1, 1, 1,
	7, 9, 7, 9, 2, 1, 7, 9, 7, 9,
	8, 5, 0, 1, 0, 1, 1, 1, 1, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 3, 1, 3, 5, 1, 1, 1,
	1, 1, 1, 3, 5, 0, 1, 1, 2, 1,
	2, 2, 1, 1, 2, 2, 2, 3, 3, 2,
	2, 1, 5, 6, 4, 1, 1, 1, 5, 4,
	1, 1, 2, 0, 1, 1, 2, 5, 0, 1,
	1, 2, 2, 3, 3, 1, 1, 2, 2, 2,
	0, 1, 2, 2, 2, 0, 3, 0, 3, 1,
	1, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 1, 1,
	1, 1, 3, 5, 2, 2, 2, 2, 4, 1,
	1, 2, 5, 6, 8, 6, 6, 6, 1, 1,
	1, 1, 1, 1, 3, 4, 4, 4, 7, 9,
	7, 7, 7, 9, 7, 7, 0, 2, 0, 1,
	1, 2, 4, 1, 2, 2, 1, 2, 2, 1,
	2, 2, 2, 2, 2, 0, 1, 1, 1, 2,
	2, 2, 2, 2, 2, 2, 1, 1, 1, 2,
	5, 0, 1, 3, 0, 1, 0, 2, 0, 2,
	0, 1, 6, 8, 8, 6, 6, 5, 5, 5,
	6, 6, 6, 6, 5, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 1, 1, 1, 4, 4,
	6, 8, 6, 4, 5, 4, 4, 4, 3, 4,
	6, 6, 7, 4, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 8, 4, 2, 3, 2, 4, 2, 2, 4,
	6, 2, 2, 4, 6, 4, 2, 4, 4, 4,
	0, 1, 2, 3, 1, 1, 1, 1, 1, 1,
	0, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 1, 1, 3,
	0, 1, 1, 3, 1, 3, 3, 3, 3, 3,
	2, 1, 1, 1, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 1, 3, 4, 4, 5, 4,
	5, 3, 4, 5, 6, 1, 0, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 1, 1, 2, 3,
	1, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 2, 2, 2, 2, 2,
	2, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 4, 4, 1, 2, 3, 5,
	1, 1, 3, 0, 1, 0, 3, 0, 3, 3,
	0, 3, 5, 0, 3, 5, 0, 1, 1, 0,
	1, 1, 2, 2, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1,
}

var yyChk = [...]int{
	-1000, -583, -586, -2, -5, 623, -1, -4, -113, -87,
	-7, -14, -115, -116, -8, -111, -9, -10, -12, -91,
	-106, -108, -110, -109, -47, -11, -105, -82, -83, -93,
	-99, -102, -103, -104, -117, -112, -114, -166, -118, -119,
	-120, -155, 613, -88, -89, -90, -33, -32, -31, -30,
	-141, -146, -149, -151, 546, 619, 449, 14, 498, -15,
	-16, -529, -17, 260, -333, -334, -335, -337, -587, -48,
	-49, -50, -60, -61, -62, -63, -64, -74, -75, -76,
	-51, -52, -53, -56, -54, -67, -66, -68, -69, -70,
	-71, -72, -73, -55, -59, -144, -145, -77, -57, -78,
	-58, -153, -80, -79, -85, -81, -86, -143, -148, -13,
	-154, 235, -84, 76, -94, -95, -96, -97, -98, -100,
	-101, 373, 379, 436, 612, 61, -167, -169, 631, 632,
	635, 160, 161, 163, 164, -34, -35, -36, -37, -38,
	-39, -41, -40, -42, -43, -44, -45, -46, 231, 16,
	541, -18, -21, -19, -22, -20, -28, -29, -27, -24,
	-26, -142, -25, -147, -23, -150, -152, 255, 254, 38,
	321, 322, 323, 377, 253, 232, 15, 31, 42, 352,
	-168, 83, 533, 534, 536, 233, -170, 13, 637, -6,
	-3, -2, -128, -132, -136, -139, -140, -137, -138, -4,
	-113, 118, 245, 614, -329, 369, 615, 617, 616, 86,
	94, -322, -324, 449, 260, 373, 379, 612, 632, 635,
	548, 549, 550, 551, 552, 553, 554, 555, 557, 558,
	559, 560, 561, 562, 563, 573, 574, 564, 565, 566,
	567, 568, 569, 570, 571, 575, 576, 577, 578, 579,
	580, 581, 582, 583, 584, 585, 586, 587, 588, 501,
	598, 599, 600, 601, 529, 556, 592, 593, 594, 595,
	350, 351, 538, 272, 296, 404, 302, 309, 160, 179,
	173, 201, 193, 534, 168, 276, 314, 277, 93, 163,
	484, 108, 461, 433, 166, 291, 293, 295, 530, 531,
	363, 298, 528, 297, 299, 301, 532, 278, 353, 189,
	184, 290, 274, 182, 279, 40, 280, 206, 281, 282,
	543, 457, 349, 463, 306, 52, 431, 183, 458, 294,
	460, 210, 214, 475, 476, 177, 178, 465, 478, 205,
	208, 209, 252, 346, 347, 43, 540, 264, 479, 212,
	204, 200, 487, 310, 308, 203, 176, 199, 275, 65,
	216, 215, 217, 427, 428, 429, 430, 283, 284, 367,
	474, 196, 185, 354, 169, 23, 482, 259, 462, 380,
	285, 303, 311, 211, 213, 266, 271, 542, 533, 435,
	270, 307, 480, 181, 263, 292, 258, 483, 170, 536,
	382, 286, 164, 300, 477, 486, 64, 395, 175, 167,
	630, 249, 161, 268, 273, 287, 288, 289, 527, 313,
	312, 304, 535, 197, 265, 202, 187, 174, 198, 162,
	267, 485, 396, 610, 352, 414, 195, 192, 269, 242,
	481, 464, 165, 418, 397, 190, 315, 605, 606, 607,
	368, 345, 316, 317, 188, 256, 455, 456, 320, 424,
	336, 398, 434, 405, 399, 223, 224, 324, 467, 469,
	207, 608, 325, 326, 327, 459, 328, 329, 330, 331,
	372, 56, 58, 95, 98, 97, 633, 634, 63, 29,
	358, 361, 393, 400, 338, 611, 539, 335, 339, 340,
	362, 25, 416, 384, 420, 419, 48, 49, 50, 53,
	54, 55, 57, 59, 60, 51, 526, 377, 390, 488,
	45, 47, 387, 27, 364, 415, 437, 334, 417, 448,
	46, 446, 447, 468, 26, 366, 365, 62, 44, 423,
	425, 426, 318, 332, 375, 620, 489, 370, 386, 389,
	371, 337, 360, 391, 67, 66, 383, 621, 378, 376,
	333, 544, 545, 341, 572, 355, 432, 523, 522, 521,
	520, 519, 518, 517, 516, 321, 322, 323, 401, 402,
	403, 413, 406, 407, 408, 409, 410, 411, 412, 451,
	452, 622, 470, 472, 473, 471, 237, 636, 356, 357,
	240, 624, 625, 96, 626, 628, 627, 28, 629, -411,
	-409, -329, 534, 612, 379, 533, 536, 373, 352, 632,
	635, 377, 260, 321, 322, 323, 449, 350, -211, -329,
	636, -176, 244, 39, -225, -329, -176, -84, -16, -15,
	-168, -169, -225, 239, -338, 24, 431, -92, 432, 235,
	83, 77, -329, -9, -104, -8, -111, -82, -166, 436,
	-336, -329, 321, 321, -336, 239, -331, 270, 412, -329,
	-466, 245, -415, -388, 271, -414, -390, -417, -391, 32,
	231, 233, 232, 546, 267, 16, 377, 241, 14, 13,
	378, 253, 25, 26, 28, 15, 379, 381, 29, 382,
	385, 386, 387, 42, 390, 391, 260, 86, 94, 89,
	278, -210, -329, -365, -357, 115, -360, -352, -353, -355,
	-309, -503, -350, 83, 142, 143, 150, 116, 638, -354,
	-447, 36, 118, 552, 556, 592, 499, -301, -302, -303,
	-304, -305, -306, -329, -504, -502, 89, 99, 101, 105,
	106, 104, 102, 154, 186, 103, 90, 155, -169, 86,
	-524, 562, -323, 585, 598, 599, 600, 601, 584, 61,
	-473, -482, 238, -480, 153, 191, 256, 187, 14, 148,
	424, 188, 593, 594, 595, 559, 581, 501, 563, 573,
	588, 554, 555, 557, 549, 550, 551, 553, 564, 566,
	580, -483, 576, 586, 587, 572, 596, 597, 589, 590,
	591, 628, 88, 87, 579, 578, 565, 560, 561, 567,
	548, 558, 568, 569, 577, 582, 583, 361, 108, 362,
	363, 491, 353, 364, 245, 431, 70, 365, 366, 367,
	368, 369, 498, 370, 71, 371, 360, 260, 414, 372,
	190, 207, 503, 502, 504, 495, 492, 490, 493, 494,
	496, 497, 570, 571, 575, -121, -122, 603, -577, -294,
	-578, 6, 7, 8, 9, -579, 155, -568, 433, 542,
	89, 314, 350, 17, 491, 165, 162, -402, 165, 114,
	170, 169, -402, 167, 630, 324, 266, -379, -158, 350,
	414, 328, 95, 270, -382, -380, 530, -468, 318, 314,
	290, 240, 111, -159, 250, 249, 109, 491, 238, 388,
	309, 56, 58, -540, -541, 228, 229, 230, -531, 524,
	-530, -329, 363, 97, 98, 630, 27, 239, 374, 266,
	469, 467, 468, 470, 471, 472, 473, -65, -484, -465,
	464, 463, -342, 456, 462, 454, 466, 457, 351, 330,
	546, 329, 231, 624, 531, 525, -317, 398, 434, 488,
	489, 375, 435, 475, 477, 458, 108, 194, 191, 240,
	242, 239, 630, 350, 491, 414, 95, 328, -540, 162,
	475, 477, 270, 412, 41, -408, 424, -407, -409, 476,
	487, 87, 88, 474, -317, 108, 455, 455, -577, -294,
	-167, -169, -114, -529, 532, 532, 532, 240, 350, 414,
	270, 241, 239, 527, 530, 242, 491, 238, 321, 374,
	266, 328, 95, 167, 630, -467, -537, 32, -474, 225,
	226, 227, 33, 34, -1, 122, 637, -357, -357, -6,
	640, -6, -357, -329, -329, 157, -231, -235, -232, -234,
	-233, -237, -236, 191, 192, 153, 195, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 208, 209, 206, 31,
	207, 256, 187, 188, 189, 190, 210, 173, 193, 539,
	218, 174, 219, 175, 220, 176, 221, 177, 178, 222,
	179, 182, 183, 184, 185, 181, 156, -200, 89, 32,
	83, 156, 89, -192, 262, -176, -225, -217, 156, 638,
	-192, -577, -185, -186, 11, -225, -307, -329, 433, 125,
	-92, 77, -92, 432, 77, -532, -533, -534, -536, 235,
	432, 431, -109, 156, 278, 17, -336, -336, 81, -225,
	-390, 270, -415, -388, 36, 80, 157, 243, 157, 80,
	83, 375, 350, 414, 376, 491, 239, 388, 242, 270,
	389, 350, 414, 239, 242, 491, 270, 350, 239, 242,
	414, 270, 389, 350, 454, 455, 242, 27, 380, 383,
	384, 455, -488, 487, 157, 114, 111, 112, 113, -357,
	132, -372, 125, 126, 127, 128, 129, 130, 131, 139,
	138, 149, 142, 143, 144, 145, 146, 147, 148, 140,
	141, 135, 115, 133, 137, 134, 117, 152, -169, -357,
	-365, 61, -355, -355, -355, -355, -329, -447, -362, -357,
	83, 83, 83, 83, 156, 102, 89, -357, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	-481, 83, 83, -369, -370, 83, 83, -350, -307, 83,
	89, 89, 83, 83, 83, 89, 83, 83, 83, -370,
	-370, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, -186, 157, -185, 83,
	-185, -186, -170, -169, 32, 33, 32, 33, 32, 33,
	32, 33, -580, 621, 83, 99, 633, 223, 17, -329,
	630, -329, 480, 541, 168, 169, 170, -377, 245, -377,
	-209, -329, -211, 374, 242, 527, 242, -159, -377, -377,
	-377, -377, -377, 241, -377, 24, 239, 239, 239, 239,
	-377, 498, 125, 125, 59, -542, 172, 157, -531, -191,
	83, -341, 133, 137, -341, -290, 18, -290, 24, 268,
	268, 268, -341, 308, -588, -589, 17, 135, -339, -589,
	-339, -339, -341, -590, 241, 465, 43, 269, 268, -187,
	-188, 22, -187, 459, 455, -432, 460, 461, -343, -589,
	-342, -341, -341, -342, -341, -341, -341, 32, 239, 242,
	491, 328, 625, -588, -588, 31, 31, -466, -466, -225,
	-466, -466, 525, -318, -329, -466, -466, -466, -543, 244,
	-574, -573, 478, -576, 480, 162, -409, 162, -409, -390,
	270, 270, 157, 125, 24, -410, 125, 136, -409, -409,
	-410, -410, -248, 41, -328, 153, -329, 89, -248, 41,
	-571, -570, -225, -186, -170, -169, 84, 84, 84, 535,
	535, 535, -466, -466, -466, -466, -466, -468, -466, -466,
	-466, -466, -466, -336, -201, -329, -211, 245, -466, -466,
	-466, -466, -171, -172, 144, -357, -329, -171, -3, -130,
	-129, 119, 120, 122, 615, 369, 614, 618, 612, -409,
	41, -460, 396, 395, -454, -456, 83, -455, 83, -455,
	-455, -455, -455, -455, 83, 83, -457, 83, -457, -457,
	-454, -458, 83, -458, -459, 83, -459, -458, -329, -436,
	541, -363, -365, -329, 39, -477, 61, -166, 83, 31,
	83, -192, -329, 639, 188, 167, 629, -478, 61, -166,
	83, 31, -186, -123, 39, -188, 21, 156, 99, 89,
	-109, -92, 77, -109, 84, 157, -535, 105, 106, -538,
	205, 197, -329, -107, 89, -7, -8, -9, -10, -47,
	-82, -79, -166, 232, -505, -503, 83, 32, 423, 80,
	17, -416, 239, 491, 374, 266, 242, 350, -414, -397,
	-394, -392, -328, -390, -393, -392, -419, -307, 455, -124,
	438, 437, 320, -357, -357, -357, -357, -357, 104, 115,
	345, 105, 106, -352, -373, 32, 316, 317, -353, -353,
	-353, -353, -353, -353, -353, -353, -353, -353, -353, -353,
	-361, -371, -447, 83, 135, 133, 137, 134, 117, -355,
	-355, -353, -353, -250, -328, 153, 84, 157, -357, -528,
	-527, 119, -357, -357, -357, -357, -329, -525, -526, 505,
	506, 507, 508, 509, 510, 511, 512, 513, 514, 515,
	365, 360, 366, 364, 353, 372, 367, 368, 190, 522,
	523, 516, 517, 518, 519, 520, 521, -363, -363, -357,
	-525, -363, -300, 33, 32, -365, -365, -365, 84, -357,
	-539, 343, 342, 344, -189, -329, -363, 84, 84, 84,
	99, -365, -365, -363, -353, -363, -363, -363, -363, -526,
	-300, -300, -300, -300, 144, -365, -365, -300, -300, -300,
	-300, 144, -300, -300, -300, -300, -300, -300, -300, -300,
	-300, -300, 84, 84, 84, 144, -365, -187, -122, -486,
	-485, -357, 41, -123, -188, -581, 622, 83, -307, -569,
	89, 89, 638, 167, 17, 491, -329, 17, 239, 481,
	482, 166, 169, 168, -329, 115, -329, 35, 83, -201,
	-377, -377, -377, -547, -329, 90, -398, -395, -392, -329,
	-329, -388, -329, -318, -225, -377, -377, -377, -377, -225,
	-259, 53, 54, 55, -392, -160, 56, 57, -543, -530,
	35, -190, -329, -290, -355, -355, -357, -392, 270, -588,
	-341, -341, -319, -318, -343, -338, -343, -343, -290, -339,
	-341, -341, -357, -343, -339, -290, -329, 455, -290, -290,
	-432, -341, -340, -329, -340, -377, -318, -319, -319, -225,
	-225, -271, -276, -272, -277, 262, 236, 358, 359, 234,
	232, 11, 233, -284, 309, -378, 499, -254, -255, 77,
	42, -257, 260, 400, 393, 272, 276, 93, 277, 433,
	278, 241, 280, 281, 282, 297, 299, 252, 283, 284,
	285, 424, 286, 161, 298, 287, 288, 289, 376, -249,
	6, 331, 41, 51, 52, 447, 446, 544, 541, 273,
	-329, -547, -545, 31, -329, 31, -398, -329, -329, -179,
	-174, -178, -175, -180, -293, -295, -177, 83, -225, -169,
	-329, 157, 479, 481, 482, -574, -410, -574, -410, 32,
	423, -413, 423, 32, -388, -407, 475, 477, -403, 89,
	424, -393, -412, 80, 153, -485, -410, -410, -412, -412,
	152, 157, -572, 480, 481, 228, -187, 99, 99, 99,
	-227, -225, -547, -397, -388, -329, -466, -227, -227, -227,
	-331, -331, 83, 156, 36, -329, -329, -329, -329, -289,
	157, -288, 17, -330, -329, 35, 89, 156, -289, -131,
	-129, 121, -357, -6, 614, -357, -6, -6, -357, -6,
	-357, -464, 397, 99, 99, -310, 89, -310, 99, 99,
	99, 547, 84, 89, -401, 80, -479, -366, -523, 603,
	-194, 84, -189, -521, -522, -189, -193, -329, -477, -217,
	125, 125, 125, -479, -194, 84, -521, -187, 604, -123,
	-184, -183, -357, -329, 24, -109, -92, -533, 156, 350,
	157, -190, -416, -396, -393, -418, 144, -329, -404, 157,
	541, 641, 87, 243, -560, -559, 415, 84, 157, -489,
	244, 498, 89, 638, 431, 223, 224, 104, 345, 105,
	106, -447, -365, -361, -355, -355, -353, -353, -359, 257,
	-359, 114, -357, 639, -356, -527, 121, -357, 35, 157,
	35, 157, 81, 156, 84, 84, 17, 17, 84, -357,
	84, 84, 84, 84, 17, 17, -357, 84, 156, 84,
	84, 84, 84, 81, 84, 157, 84, 84, 84, 84,
	157, -365, -365, -357, -365, 84, 84, 84, -357, -357,
	-357, -365, 84, -357, -357, -357, -357, -357, -357, -357,
	-357, -357, -357, -426, 450, -426, -426, 157, 157, 157,
	84, -123, 83, 99, 157, 634, -314, -313, 89, -329,
	167, -329, 89, 630, -329, 167, 170, 170, 169, 24,
	36, 307, 24, -210, -212, -213, -214, -215, -216, 135,
	158, 159, 83, -225, -225, -225, -549, 401, -561, 157,
	41, -559, 491, 239, -156, 320, -381, 81, -163, 17,
	541, -225, -225, -225, -225, -238, 35, 17, -173, -226,
	-329, 83, 84, 157, -389, 81, -329, -319, -290, -290,
	-343, -290, -290, 157, 23, -341, -343, -343, -347, 638,
	-339, -347, 156, -347, -318, -453, 35, -191, 157, 21,
	262, -224, -326, -221, -223, 247, -346, -222, 250, -517,
	248, 246, 109, 251, 305, 110, 241, -326, -326, 247,
	-258, 243, 35, -326, -274, 241, 348, 305, 248, 21,
	262, -273, 241, 110, -329, 247, 251, 248, 246, -325,
	125, -317, 152, 243, 43, 376, -325, 545, 262, -325,
	-325, -325, -325, -325, -325, -325, 279, 279, -325, -325,
	-325, -325, -325, -325, -325, -325, -325, -325, -325, 162,
	-325, -325, -325, -325, -325, -325, 83, 274, 275, 307,
	-550, 401, 31, 356, 356, 357, -561, 31, -164, 350,
	31, -296, -297, -298, -299, 68, 72, 74, 78, 69,
	70, 71, 75, 31, 157, -327, -332, 35, -329, 89,
	-327, -169, -174, -179, -327, 83, -573, -575, 483, 480,
	486, -412, -412, 243, 83, 125, -412, -412, 41, -328,
	-570, 487, 481, -123, 157, 80, -227, -202, -203, -204,
	-205, -231, -307, 192, 195, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 208, 209, 206, 207, 256, 187,
	188, 189, 190, 210, 173, 193, 539, 174, 175, 176,
	177, 178, 179, 182, 183, 184, 185, 181, -329, -211,
	-290, -172, -174, -329, 89, -329, 144, -290, 122, -6,
	120, -135, -134, -133, 123, 612, 618, 122, 122, 122,
	84, 84, 84, 157, 84, 84, 84, 157, 84, 157,
	99, -492, 460, 40, 157, 83, 84, 157, 61, 157,
	125, 84, 157, -357, -329, 89, -357, 84, 61, -123,
	89, 157, -181, 37, 38, 156, 433, -329, -503, 84,
	-418, 157, 243, 156, 156, -394, 379, -328, -396, 21,
	541, -307, 39, -314, 125, 638, -329, 84, -359, -359,
	114, -355, -352, 84, 122, -357, 120, -229, -231, 395,
	396, -357, -229, -230, -236, 153, 191, 256, 190, 189,
	187, 395, 396, -248, -329, -357, -357, 84, -357, -357,
	17, -329, -248, -353, -357, -186, -186, 84, 84, -425,
	-426, -425, -425, 84, 84, 84, 84, -425, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 83, 99,
	101, 99, 101, -485, -582, 63, 620, 62, 423, 104,
	310, 157, 99, 89, 639, 157, 125, -329, 17, 239,
	-329, 17, 170, -562, 314, 350, -437, 99, 314, 350,
	491, 387, 84, 157, -307, -202, -191, 83, -191, -552,
	462, 403, 413, -325, -349, -348, 352, 42, -471, 424,
	409, 410, -395, 270, -329, -329, -558, 96, 125, 80,
	335, 339, 340, 336, 337, 338, -375, -376, -374, -378,
	-545, 83, 83, -166, 35, 133, -163, 83, 83, 35,
	-448, 325, -231, -225, -173, -329, 17, 157, -544, 156,
	-1, -329, -388, -341, -290, -357, -357, -290, -341, -341,
	167, -343, -329, -448, -231, 35, -272, 236, 233, -422,
	307, 308, -423, -438, 310, -440, 83, -228, -307, -222,
	-516, -517, -377, -329, 110, -516, 110, 83, -228, -307,
	-307, -275, -340, -307, -329, -329, -329, -329, -280, -279,
	-307, -282, 32, -283, -329, -329, -329, -329, 110, -329,
	110, -253, 41, 48, 49, 50, -325, -325, 194, -256,
	41, 423, 425, 426, -282, 99, 99, 99, 99, 89,
	89, 89, -325, -325, 99, 89, -332, 89, -518, 169,
	45, 46, 99, 99, 99, 99, 41, 89, -261, 41,
	290, 294, 291, 292, 293, 89, 99, 41, 99, 41,
	99, 41, -329, 83, -519, -520, 89, -437, -552, -325,
	356, -409, 125, 125, -349, -557, 320, -165, 491, 32,
	-195, 236, 233, -545, -400, -399, -307, -178, -178, -178,
	-178, 68, 68, 68, 68, 73, 68, 73, 68, -298,
	-400, -180, -191, -332, 84, -567, -566, -565, -563, 76,
	244, 77, -363, 480, 484, 485, -396, -344, 89, -403,
	-199, 24, -225, -225, -470, 300, 301, 84, 157, -231,
	-292, 19, 156, -292, 118, -6, -131, -133, -357, -6,
	-357, 614, 369, 615, 89, 99, 99, -500, 444, 439,
	441, 110, -366, -487, -486, 61, -166, -189, -479, -522,
	-485, -329, 639, 639, 639, 639, 61, -166, -479, -199,
	-492, -183, -182, 44, -329, 99, 17, -393, -388, 144,
	144, -329, 380, -404, 89, 402, 89, 239, 639, 89,
	-314, -352, -357, 84, -239, 178, 177, -239, 35, 84,
	84, -455, -455, -454, -457, -454, -239, -239, 84, 84,
	24, 84, 84, 84, -357, 84, 84, 157, -475, 500,
	-476, 574, -425, -425, -425, -425, -425, -425, -425, -425,
	-425, -425, -425, -425, -425, -425, -425, -425, -368, -367,
	262, 445, 627, 627, 445, 627, 627, 84, 157, -525,
	157, -320, 315, -320, -313, 89, 243, 167, -329, 89,
	630, -329, 89, 307, -329, -329, 89, 89, -214, -231,
	84, 35, -218, -219, -220, -228, -221, -223, 35, -553,
	93, -548, 89, -329, 90, -554, 93, 404, 155, 354,
	41, 405, 406, 421, 349, 99, 99, 411, -546, -329,
	-164, -164, -556, 52, 125, 89, -225, -374, -317, 152,
	281, 328, -287, -286, -329, 89, -218, -166, -225, -218,
	-218, -166, -449, 327, 21, 99, 143, -192, 81, 156,
	-174, -226, -329, 144, 84, -290, -347, -290, -290, 125,
	-341, -449, -166, -434, 311, 83, -432, 83, -432, 110,
	336, -441, -439, 262, -278, 45, 47, -231, -514, -329,
	-512, -514, -329, -512, -512, -377, -357, -278, -228, 243,
	31, 233, -281, 333, 334, 339, -405, 306, 115, -405,
	157, -181, 157, -329, -248, -248, 31, 89, 89, -227,
	84, 157, 125, 89, -553, -548, 125, -410, 89, 89,
	-554, -558, 125, -157, 93, -318, 157, -195, -195, -290,
	157, 125, -197, -196, 80, 81, -198, 80, -196, 68,
	68, -290, -565, -564, 24, -517, -517, -517, 84, 84,
	15, -204, 41, -291, 20, 21, 144, -291, 122, 120,
	122, 122, -329, 84, 84, -461, 605, -496, -498, 439,
	21, 21, 15, 244, 84, -479, -479, -500, 45, 46,
	-388, -404, 424, -225, 157, 639, -229, -357, 84, -357,
	84, 89, 84, 89, -186, 21, 84, 157, 84, 84,
	84, 157, 84, 84, -357, 84, -525, -321, 188, 89,
	-321, 350, -329, 17, -329, -437, 307, 307, 239, 237,
	-166, 84, 157, -166, 89, -551, 415, 89, 89, 99,
	41, 99, 155, 407, -472, -157, -157, -555, 93, 125,
	638, 83, -325, -325, -325, -329, 84, 157, -325, -325,
	84, 84, 84, -246, 541, -450, 261, 99, 143, 99,
	143, 99, -327, -174, -329, -290, -544, 156, 89, -290,
	-450, -424, 312, 99, -353, 83, -353, 83, -433, 309,
	83, 84, 157, -329, -307, -243, -242, -240, 104, 115,
	41, 393, -241, 93, 152, 295, 298, 297, 273, 296,
	-270, -345, 80, 399, 333, 334, -378, 605, 529, 246,
	109, 110, 381, -346, 83, 83, 81, 315, 83, 83,
	-514, 84, -278, -307, 41, -281, 41, 346, 306, -279,
	-329, 152, -248, 84, -520, 89, -551, 89, -412, -556,
	89, 89, -545, -186, -399, -485, -357, 83, -357, 83,
	68, 11, 19, -350, -357, -365, 245, -6, 615, 369,
	-263, 606, 89, 21, 89, -494, 89, -400, -461, -126,
	-260, -317, 278, 84, 84, 84, -425, -425, -428, -427,
	-431, 445, 307, 453, -365, 89, 89, 84, 84, 89,
	-329, 243, 167, 89, 89, -437, -437, -329, -206, -231,
	-161, 541, -246, -220, -161, 21, 541, 353, 41, 99,
	41, 408, 125, 105, 106, -315, -316, 89, -383, -385,
	-307, 83, -248, -250, 89, -286, -350, -350, -244, -166,
	35, -245, -284, -378, -125, -124, -244, 83, -451, 161,
	99, 143, 99, 99, -290, -290, 639, -451, -440, 21,
	84, -419, 84, -419, 83, 125, -353, -439, -442, 61,
	-240, 104, -353, 89, -250, -251, 41, 294, 290, 125,
	125, -252, 41, 274, 275, -262, 83, 305, 15, 194,
	83, 110, 110, -225, -383, -383, -515, 335, 336, 337,
	341, 339, 340, 338, -515, -383, -383, 83, -406, -405,
	-353, -325, -325, 152, -555, -187, -190, -513, -329, 246,
	21, 21, -329, -329, -311, 607, 99, 89, 441, -263,
	-462, 608, -490, -432, -248, 125, 84, -430, 117, 407,
	411, -351, -354, 99, 101, 186, 155, 84, 84, 350,
	-329, 89, 89, 307, 540, -162, 60, 487, 89, 90,
	402, 89, 90, 353, 89, 639, 157, 125, 84, 157,
	-454, -357, -420, 262, -166, 157, -284, -317, -126, -420,
	-247, -285, -329, 89, -469, 169, 326, 541, 99, 143,
	99, -186, -452, 169, 326, -423, 84, 84, 84, -419,
	99, 84, -446, -443, 83, -284, 264, 135, 89, 89,
	99, 83, -480, 31, 89, -384, 83, 84, 84, 84,
	84, -383, 99, -248, -325, 84, 84, 157, 83, 21,
	-311, -463, 609, 89, -499, 444, -493, -491, 439, 440,
	441, 442, 89, -429, -430, 411, -351, -354, 603, 451,
	451, 451, -329, 243, -437, -208, -329, 305, 424, -316,
	89, -386, -385, -181, 84, -421, 314, 21, -284, -325,
	-421, 84, 157, -325, -325, 326, 99, 143, 99, -187,
	326, -435, 313, 84, -446, -284, -445, -444, 312, 265,
	83, 84, -357, -369, -325, 84, -265, -264, 537, -383,
	-386, 81, -386, 81, -386, 81, -386, 81, 84, -248,
	-329, 246, -312, -329, -494, 89, -501, 244, -497, -498,
	443, -491, 21, 441, 21, 21, -127, 157, 114, 452,
	452, 452, 350, 89, -207, 35, 446, 380, -387, 252,
	346, 347, 93, 541, 333, 334, -181, 21, -422, -248,
	-285, -350, -350, 99, 99, 84, 157, -329, 261, 83,
	-364, -358, -357, 261, 84, -329, -269, -267, -268, 80,
	458, 303, 304, 84, -515, -515, -515, -515, -270, 84,
	157, -508, 83, 99, -496, -495, -497, 21, -494, 21,
	-494, -494, 448, -429, -329, 89, -325, -325, 89, 89,
	332, -307, 83, -434, -444, -443, -364, 84, 157, -405,
	-268, 80, -267, 80, 16, 15, -386, -386, -386, -386,
	-329, -511, 31, 84, -507, -506, -308, -502, -329, 444,
	445, 89, -494, 125, -585, -584, 626, 99, 99, -329,
	-419, -424, 84, -358, -266, 300, 301, 31, 169, -266,
	-510, -509, -309, 84, 157, 156, 89, 89, 84, -440,
	104, 41, 302, 157, 125, -506, -329, -509, 41, -357,
	156, -329,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 0, 292, 293, 294, 908, 909, 910, 911,
	912, 913, 914, 915, 0, 0, 0, 0, 0, 665,
	666, 0, 630, 0, 0, 0, 0, 0, 0, 512,
	513, 514, 515, 516, 517, 518, 519, 520, 521, 522,
	523, 524, 525, 526, 527, 528, 529, 530, 531, 532,
	533, 534, 535, 536, 537, 538, 539, 540, 541, 542,
	543, 544, 393, 394, 395, 396, 397, 398, 399, 400,
	401, 0, 317, 313, 238, 239, 240, 241, 242, 324,
	325, 489, 0, 0, 0, 0, 748, -2, 82, 0,
	0, 306, 0, 297, 297, 916, 917, 918, 919, 920,
	921, 922, 923, 924, 925, 926, 927, 928, -2, 678,
	0, 631, 632, 633, 634, 635, 636, 637, 638, 639,
	640, 641, 642, 643, 644, 645, 646, 377, 378, 379,
	373, 374, 376, 375, -2, 0, 678, 0, 0, 0,
	756, 0, 0, 0, 0, 0, 799, 821, 23, 0,
	7, 9, 10, 11, 12, 13, 14, 15, 16, 17,
	18, 0, 0, 19, 0, 19, 0, 0, 0, 1327,
	1328, 1329, 1330, 2111, 2081, -2, 1852, 1829, 2005, 2006,
	2142, 2143, 2144, 2145, 2146, 2147, 2148, 2149, 2150, 2151,
	2152, 2153, 2154, 2155, 2156, 2157, 2158, 2159, 2160, 2161,
	2162, 2163, 2164, 2165, 2166, 2167, 2168, 2169, 2170, 2171,
	2172, 2173, 2174, 2175, 2176, 2177, 2178, 2179, 2180, 2181,
	2182, 2183, 2184, 2185, 2186, 2187, 2188, 2189, 2190, 2191,
	1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795,
	1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805,
	1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815,
	1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825,
	1826, 1827, 1828, 1830, 1831, 1832, 1833, 1834, 1835, 1836,
	1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846,
	1847, 1848, 1849, 1850, 1851, 1853, 1854, 1855, 1856, 1857,
	1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867,
	1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877,
	1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887,
	1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897,
	1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907,
	1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917,
	1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928,
	1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938,
	1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948,
	1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958,
	1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968,
	1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978,
	1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988,
	1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
	1999, 2000, 2001, 2002, 2003, 2004, 2007, 2008, 2009, 2010,
	2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020,
	2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030,
	2031, 2032, 2033, 2034, 2035, 2036, 2037, -2, 2039, 2040,
	2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050,
	2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060,
	2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070,
	2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080,
	2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091,
	2092, 2093, 2094, 2095, 2096, -2, -2, -2, 2100, 2101,
	2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110, 2112,
	2113, 2114, 2115, 2116, 2117, 2118, 2119, 2120, 2121, 2122,
	2123, 2124, 2125, 2126, 2127, 2128, 2129, 2130, 2131, 0,
	290, 288, 1799, 1829, 1852, 1906, 1917, 1918, 1953, 2005,
	2006, 2038, 2081, 2097, 2098, 2099, 2111, 0, 0, 933,
	0, 726, 0, 0, 731, 1275, 726, 318, 667, 668,
	756, 782, 628, 0, 355, 0, 1843, 359, 2088, 0,
	0, 0, 625, 349, 350, 351, 352, 353, 354, 0,
	0, 907, 0, 0, 345, 0, 312, 1908, 2110, 1331,
	0, 0, 0, 0, 0, 181, 1053, 183, 1055, 187,
	195, 0, 0, 0, 200, 201, 204, 205, 206, 207,
	208, 0, 212, 0, 214, 217, 0, 219, 220, 0,
	223, 224, 225, 0, 235, 236, 237, 1056, 1057, 1058,
	-2, 110, 931, 1757, 1644, 0, 1651, 1664, 1675, 1408,
	1409, 1410, 1411, 0, 0, 0, 0, 0, 0, 1419,
	1420, 0, 1448, 2146, 2187, 2188, 0, 1428, 1429, 1430,
	1431, 1432, 1433, 121, 133, 134, 1697, 1698, 1699, 1700,
	1701, 1702, 1703, 0, 1705, 1706, 1707, 1615, 1395, 1327,
	0, 2155, 0, 2177, 2182, 2183, 2184, 2185, 2176, 0,
	0, 1600, 0, 1590, 0, 0, -2, -2, 0, 0,
	1978, -2, 2189, 2190, 2191, 2152, 2173, 2181, 2156, 2157,
	2180, 2148, 2149, 2150, 2143, 2144, 2145, 2147, 2159, 2161,
	2172, 0, 2168, 2178, 2179, 2086, 0, 0, 0, 0,
	0, 2128, 135, 136, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 1611, -2, -2, 1614, -2, 1617, -2, -2, -2,
	-2, 1622, 1623, -2, 1625, -2, -2, -2, -2, -2,
	-2, -2, 1602, 1603, 1604, 1605, 1594, 1595, 1596, 1597,
	1598, 1599, -2, -2, -2, 782, 857, 0, 782, 0,
	757, 804, 807, 810, 813, 760, 0, 0, 83, 84,
	0, 0, 0, 0, 0, 307, 308, 296, 298, 0,
	302, 0, 295, 1089, 1089, 0, 0, 0, 0, 1089,
	1089, 1089, 1089, 1089, 0, 1089, 0, 0, 0, 0,
	0, 1089, 0, 966, 1060, 1061, 1062, 1087, 1088, 1161,
	0, 0, 0, 683, 679, 680, 681, 682, 770, 0,
	772, 775, 603, 603, 830, 830, 549, 0, 0, 0,
	603, 0, 563, 555, 0, 0, 0, 603, 0, 0,
	777, 777, 0, 606, 615, 603, 603, -2, 603, 603,
	600, 603, 0, 0, 1101, 569, 570, 571, 555, 555,
	574, 575, 576, 586, 587, 616, 1781, 0, 0, 489,
	489, 0, 489, 489, 0, 489, 489, 489, 685, 1948,
	1850, 1923, 1908, 2110, 0, 263, 1978, 268, 0, 1851,
	1870, 0, 0, 1888, 0, -2, 0, 334, 782, 0,
	0, 756, 0, 0, 0, 0, 0, 489, 489, 489,
	489, 489, 1160, 489, 489, 489, 489, 489, 0, 0,
	0, 489, 489, 489, 489, 0, 0, 822, 823, 818,
	819, 820, 824, 825, 5, 6, 19, 0, 0, 0,
	0, 0, 0, 89, 88, 0, 1758, 1776, 1710, 1711,
	1712, 1763, 1714, 1767, 1767, 1767, 1767, 1743, 1744, 1745,
	1746, 1747, 1748, 1749, 1750, 1751, 1767, 1767, 0, 0,
	1756, 1734, 1765, 1765, 1765, 1763, 1760, 1715, 1716, 1717,
	1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727,
	1728, 1770, 1770, 1773, 1773, 1770, 0, 391, 389, 390,
	1640, 0, 0, 0, 0, 726, 730, 1273, 0, 0,
	0, 782, -2, 0, 0, 629, 356, 1332, 0, 0,
	360, 0, 361, 0, 0, 0, 380, 0, 383, 368,
	369, 370, 364, 0, 161, 0, 347, 348, 0, 0,
	314, 0, 0, 0, 490, 0, 0, 0, 0, 0,
	0, 192, 188, 196, 199, 209, 216, 0, 228, 230,
	233, 189, 197, 202, 203, 210, 231, 190, 193, 194,
	198, 232, 234, 191, 211, 215, 229, 213, 218, 221,
	222, 227, 0, 162, 0, 0, 0, 0, 0, 1650,
	0, 0, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, -2, 1644,
	0, 0, 1414, 1415, 1416, 1417, 0, 1421, 0, 1449,
	0, 0, 0, 0, 0, 1704, 1708, 0, 1640, 1640,
	0, 1640, 1636, 0, 0, 0, 0, 0, 0, 1640,
	1573, 0, 0, 1575, 1591, 0, 0, 1577, 1578, 0,
	1581, 1582, 1640, 0, 1640, 1586, 1640, 1640, 1640, 1569,
	1570, 0, 1636, 1636, 1636, 1636, 0, 0, 1636, 1636,
	1636, 1636, 1636, 1636, 1636, 1636, 1636, 1636, 1636, 1636,
	1636, 1636, 0, 0, 0, 0, 777, 0, 783, 0,
	-2, 0, 801, 803, 805, 806, 808, 809, 811, 812,
	814, 815, 762, 0, 0, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 300, 0, 305, 0, 0, 0,
	0, 930, 0, 0, 1089, 1089, 1089, 967, 0, 0,
	0, 0, 0, 0, 0, 0, 1089, 1089, 1089, 1089,
	0, 1107, 0, 0, 0, 685, 684, 0, 771, 0,
	0, 830, 0, 0, 546, 547, 0, 548, 0, 555,
	603, 603, 561, 562, 557, 556, 611, 612, 606, 0,
	606, 606, 830, 0, 580, 581, 582, 603, 603, 588,
	778, 0, 589, 590, 606, 0, 613, 614, 830, 0,
	0, 830, 830, 0, 598, 599, 601, 603, 0, 0,
	1089, 0, 621, 557, 557, 1782, 1783, 0, 0, 1098,
	0, 0, 0, 0, 624, 0, 0, 0, 0, 686,
	243, 246, 0, 249, 0, 1948, 0, 1948, 0, 256,
	0, 0, 0, 0, 0, 0, 286, 287, 0, 0,
	0, 0, 277, 280, 1267, 1268, 1050, 1051, 281, 282,
	326, 327, 0, 777, 800, 802, 796, 797, 798, 0,
	0, 0, 0, 0, 0, 0, 0, 489, 0, 0,
	0, 0, 0, 661, 0, 946, 663, 0, 0, 0,
	0, 0, 838, 832, 834, 902, 121, 838, 8, 106,
	103, 0, 19, 0, 0, 19, 19, 0, 19, 291,
	0, 1779, 1777, 1778, 1713, 1764, 0, 1739, 0, 1740,
	1741, 1742, 1752, 1753, 0, 0, 1735, 0, 1736, 1737,
	1738, 1729, 0, 1730, 1731, 0, 1732, 1733, 289, 388,
	0, 0, 1641, 934, 0, 704, 718, 699, 0, 707,
	0, 0, 1275, 1276, 0, 0, 0, 687, 718, 689,
	0, 707, 777, 754, 0, 732, 0, 0, 357, 0,
	365, 362, 0, 366, 0, 0, 382, 384, 385, 386,
	371, 372, 626, 343, 344, 335, 336, 337, 338, 339,
	340, 341, 342, 0, 346, 131, 0, 315, 316, 0,
	0, 0, 175, 176, 177, 178, 179, 180, 182, 166,
	650, 652, 1042, 1054, 0, 1045, 0, 185, 226, 158,
	0, 0, 0, 1645, 1646, 1647, 1648, 1649, 1654, 0,
	1656, 1658, 1660, 1662, 0, 1680, -2, -2, 1396, 1397,
	1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407,
	1665, 1678, 1679, 0, 0, 0, 0, 0, 0, 1676,
	1676, 1671, 0, 1434, 1269, 1270, 1412, 0, 0, 1446,
	1450, 0, 0, 0, 0, 0, 122, 1635, 1540, 1541,
	1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551,
	1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561,
	1562, 1563, 1564, 1565, 1566, 1567, 1568, 0, 0, 1644,
	0, 0, 0, 1637, 1638, 0, 0, 0, 1528, 0,
	0, 1534, 1535, 1536, 0, 713, 0, 1601, 1574, 1592,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 856, 858, 0,
	722, 724, 725, 751, 732, 758, 0, 0, 0, 81,
	86, 0, 1128, 0, 0, 0, 0, 0, 0, 309,
	310, 0, 0, 304, 0, 0, 0, 0, -2, 0,
	0, 0, 0, 0, 982, 983, 487, 1036, 0, 0,
	0, 1052, 1077, 1085, 0, 0, 0, 0, 0, 1134,
	968, 973, 974, 975, 969, 970, 976, 977, 0, 773,
	0, 0, 871, 545, 604, 605, 831, 552, 1908, 557,
	830, 830, 564, 558, 565, 608, 566, 567, 568, 606,
	830, 830, 779, 603, 606, 591, 607, 606, 609, 595,
	0, 602, 609, 622, 609, 0, 620, 572, 573, 1136,
	775, 404, 405, 406, 408, 0, 457, 457, 457, 440,
	457, 0, 0, 428, 1784, 0, 0, 0, 0, 437,
	1784, 0, 0, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
	0, 0, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
	1784, 1784, 1784, 0, 1784, 1784, 1784, 1784, 1784, 1253,
	1784, 0, 1099, 447, 448, 449, 450, 455, 456, 0,
	0, 484, 0, 0, 981, 0, 487, 0, 1021, 843,
	0, 844, 845, 841, 873, 897, 897, 0, 897, 877,
	1275, 0, 0, 254, 255, 244, 0, 245, 0, 257,
	258, 0, 260, 261, 262, 269, 1850, 1923, 264, 266,
	0, 0, 270, 283, 284, 285, 0, 0, 275, 276,
	0, 0, 329, 330, 332, 0, 732, 1102, 1103, 1104,
	647, 1271, 648, 649, 653, 0, 0, 656, 657, 658,
	659, 660, 948, 0, 0, 1028, 1029, 1030, 1031, 830,
	0, 839, 0, 835, 903, 0, 905, 0, 830, 0,
	104, 19, 0, 97, 94, 0, 0, 0, 0, 0,
	1759, 1709, 1780, 0, 0, 0, 1761, 0, 0, 0,
	0, 0, 87, 734, 694, 0, 698, 715, 0, 719,
	0, 0, 711, 703, 708, 0, 0, 728, 695, 1274,
	0, 0, 0, 688, 0, 0, 693, 732, 0, 755,
	784, 785, 788, 1333, 0, 367, 363, 381, 0, 489,
	0, 0, 0, 169, 1039, 0, 170, 174, 164, 0,
	0, 0, 1044, 0, 1041, 1046, 0, 184, 0, 0,
	159, 160, 1119, 1128, 0, 0, 0, 1655, 1657, 1659,
	1661, 1663, 0, 1666, 1676, 1676, 1672, 0, 1667, 0,
	1669, 0, 1645, 1418, 0, 1451, 0, 0, 0, 0,
	0, 0, 0, 0, 1518, 1519, 0, 0, 1523, 0,
	1525, 1526, 1527, 1529, 0, 0, 0, 1533, 0, 1572,
	1593, 1576, 1579, 0, 1583, 0, 1585, 1587, 1588, 1589,
	0, 782, 782, 0, 0, 1490, 1490, 1490, 0, 0,
	0, 0, 1490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1435, 0, 1436, 1437, 0, 0, 0,
	859, 752, 0, 0, 0, 0, 0, 1126, 0, 71,
	0, 0, 78, 0, 0, 311, 299, 301, 0, 0,
	1090, 0, 0, 0, 0, 936, 937, 939, 0, 942,
	943, 944, 948, 775, 0, 775, 993, 1784, 491, 0,
	0, 1038, 0, 0, 1010, 0, 0, 0, -2, 0,
	0, 1085, 0, 0, 0, 1138, 0, 0, 0, 672,
	676, 23, 776, 0, 550, 0, 551, 603, 559, 560,
	830, 583, 584, 0, 0, 830, 603, 603, 594, 0,
	606, 617, 0, 618, 619, 1138, 0, 0, 1098, 1204,
	1172, 418, 0, 1288, 1289, 458, 0, 1295, 1304, 1089,
	1365, 0, 1304, 0, 0, 1306, 1307, 0, 0, 0,
	0, 441, 442, 0, 427, 0, 0, 0, 0, 0,
	0, 426, 0, 0, 468, 0, 0, 0, 0, 0,
	1785, 1784, 1784, 0, 435, 436, 0, 439, 0, 0,
	0, 0, 0, 0, 0, 0, 1784, 1784, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1244,
	0, 0, 0, 0, 0, 0, 0, 1259, 1260, 0,
	993, 1784, 0, 0, 0, 0, 491, 1008, 1026, 0,
	0, 0, 0, 0, 0, 863, 0, 0, 0, 862,
	0, 0, 0, 0, 0, 775, 898, 0, 900, 901,
	875, -2, 0, 843, 880, 1640, 247, 248, 0, 0,
	253, 271, 273, 0, 0, 0, 272, 274, 278, 279,
	328, 331, 333, 794, 0, 0, 1162, 0, 949, 950,
	952, 953, 0, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 1834, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 947, 664,
	828, 833, 840, 904, 906, 122, 836, 828, 0, 107,
	19, 106, 98, 99, 0, 19, 0, 0, 0, 0,
	1769, 1768, 1754, 0, 1755, 1766, 1771, 0, 1774, 0,
	392, 738, 0, 0, 718, 720, 0, 0, 718, 0,
	0, 727, 0, 0, 0, 0, 0, 0, 718, 794,
	734, 0, 791, 789, 790, 0, 0, 627, 132, 387,
	0, 0, 0, 0, 0, 651, 0, 1043, 166, 0,
	0, 186, 0, 0, 0, 1128, 1123, 1639, 1668, 1670,
	0, 1677, 1673, 1413, 1422, 1447, 0, 0, 1453, 1465,
	1465, 0, 0, 0, 1456, 1767, 1767, 1459, 1763, 1765,
	1763, 1465, 1465, 0, 123, 0, 0, 1524, 0, 0,
	0, 714, 0, 0, 0, 1486, 1488, 1490, 1490, 1497,
	1491, 1498, 1499, 1490, 1490, 1490, 1490, 1504, 1490, 1490,
	1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1484, 0,
	0, 1698, 1699, 723, 0, 0, 765, 766, 767, 768,
	769, 0, 0, 58, 58, 1128, 0, 72, 0, 0,
	0, 0, 303, 62, 63, 0, 0, 70, 0, 0,
	0, 0, 0, 941, 0, 0, 0, 1281, 0, 997,
	994, 995, 996, 0, 1033, 492, 493, 494, 495, 0,
	0, 0, 1037, 0, 1021, 1021, 1003, 0, 0, 0,
	1078, 1079, 1080, 1081, 1082, 1083, 1084, -2, 1093, 0,
	0, 0, 1281, 1112, 0, 0, 1117, 1281, 1281, 0,
	1146, 0, 1135, 726, 0, -2, 0, 0, 674, 0,
	0, 872, 553, 830, 577, 780, 781, 609, 830, 830,
	0, 603, 623, 1146, 1137, 0, 407, 457, 0, 1192,
	0, 0, 1198, 0, 1205, 411, 0, 459, 0, 1294,
	1321, 1305, 1321, 1366, 1321, 1321, 1089, 0, 459, 0,
	0, 429, 465, 0, 0, 0, 0, 0, 425, 462,
	788, 412, 414, 415, 416, 466, 467, 469, 0, 471,
	472, 431, 443, 444, 445, 446, 0, 0, 0, 438,
	451, 452, 453, 454, 413, 1221, 1222, 1223, 1226, 1227,
	1228, 1229, 0, 0, 1232, 1233, 1234, 1235, 1236, 1318,
	1319, 1320, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1261,
	1262, 1263, 1264, 1265, 1266, 1245, 1246, 1247, 1248, 1249,
	1250, 1251, 1252, 0, 0, 1256, 0, 0, 997, 0,
	0, 0, 0, 0, 1033, 1010, 0, 1017, 0, 1022,
	1023, 0, 0, 696, 830, 321, 0, 867, 860, 0,
	849, 864, 865, 866, 852, 0, 854, 0, 850, 851,
	830, 842, 874, 899, 876, 879, 881, 882, 888, 0,
	0, 0, 0, 250, 251, 252, 259, 0, 511, 265,
	750, 0, 1272, 654, 655, 1163, 1164, 662, 0, 954,
	826, 0, 0, 826, 102, 105, 0, 100, 0, 0,
	0, 0, 92, 90, 1762, 0, 0, 740, 146, 0,
	0, 0, 716, 0, 721, 718, 702, 712, 701, 709,
	710, 729, 1277, 1278, 1279, 1280, 718, 692, 691, 753,
	738, 786, 787, 0, 1334, 358, 0, 1040, 166, 171,
	172, 173, 167, 165, 1047, 0, 1049, 0, 1121, 0,
	0, 1674, 1452, 1423, 1454, 1466, 1467, 1455, 0, 1425,
	1426, 1457, 1458, 1460, 1461, 1462, 1463, 1464, 1427, 1520,
	0, 1522, 1530, 1531, 0, 1580, 1584, 0, 0, 0,
	0, 0, 1495, 1496, 1500, 1501, 1502, 1503, 1505, 1506,
	1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 782, 1485,
	0, 0, 0, 0, 0, 0, 0, 763, 0, 0,
	0, 60, 0, 60, 1127, 1129, 0, 0, 0, 79,
	0, 64, 65, 0, 0, 0, 929, 932, 938, 940,
	0, 0, 0, 1282, 1283, 1285, 1286, 1287, 0, 965,
	0, 0, 985, 986, 987, 999, 0, 0, 0, 497,
	498, 0, 0, 0, 510, 506, 507, 508, 488, 1032,
	1017, 1017, 1006, 0, 0, 1016, 0, 1094, 1784, 1784,
	1784, 0, 0, 1206, 1784, 1784, 0, 1114, 1116, 0,
	0, 1210, 1149, 0, 0, 1140, 0, 897, 0, 0,
	830, 673, 676, 677, 774, 554, 592, 596, 593, 0,
	830, 1149, 403, 1170, 0, 0, 0, 0, 0, 1202,
	0, 0, 1174, 0, 430, 460, 0, -2, 0, 1322,
	0, 1308, 1322, 0, 0, 1321, 0, 419, 459, 0,
	0, 0, 473, 477, 478, 0, 475, 1361, 0, 476,
	0, 464, 0, 470, 1224, 1225, 0, 1230, 1231, 0,
	1255, 0, 0, 410, 479, 0, 0, 0, 480, 481,
	486, 1003, 0, 1020, 0, 1027, 0, 1024, 1025, 782,
	0, 0, 846, 868, 0, 0, 847, 0, 848, 853,
	855, 320, 883, 0, 0, 885, 886, 887, 878, 267,
	795, 951, 0, 816, 0, 0, 837, 817, 0, 19,
	0, 0, 95, 1772, 1775, 742, 0, 739, 147, 0,
	0, 0, 0, 706, 717, 700, 690, 740, 792, 793,
	168, 163, 1048, 1131, 0, 1122, 0, 0, 1532, 0,
	1490, 1487, 1490, 1489, 1481, 0, 1438, 0, 1440, 1441,
	1442, 0, 1444, 1445, 0, 761, 0, 56, 0, 59,
	57, 0, 73, 0, 0, 0, 0, 0, 0, 0,
	971, 1210, 0, 971, 998, 984, 0, 1034, 1035, 0,
	499, 500, 0, 503, 509, 1000, 1001, 1002, 0, 0,
	1014, 0, 0, 0, 0, 1086, 1100, 0, 0, 0,
	-2, 0, -2, 1111, 0, 1155, 0, 1147, 0, 1139,
	0, 1142, 830, 830, -2, 670, 675, 0, 0, 597,
	1155, 1172, 0, 1193, 0, 0, 0, 0, 0, 0,
	0, 1173, 0, 1186, 461, 1323, -2, 1337, 1339, 0,
	1099, 1342, 1343, 0, 0, 0, 0, 0, 0, 1387,
	1351, 0, 0, 1355, 1356, 1357, 0, 0, 1360, 0,
	1692, 1693, 0, 1364, 0, 0, 0, 0, 0, 0,
	0, 1302, 420, 421, 0, 423, 424, 1784, 1362, 463,
	417, 1784, 433, 1254, 1257, 1258, 485, 482, 483, 1006,
	1009, 1018, 697, 777, 322, 323, 869, 0, 861, 892,
	889, 0, 0, 955, 827, 829, 96, 101, 0, 0,
	744, 0, 741, 0, 735, 737, 157, 705, 742, 117,
	149, 0, 0, 1424, 1521, 1571, 1493, 1494, 0, 1482,
	0, 1476, 1477, 1478, 1483, 0, 0, 764, 759, 61,
	75, 0, 0, 80, 66, 0, 0, 0, 0, 957,
	964, 978, 1105, 1284, 963, 0, 0, 496, 501, 0,
	504, 505, 0, 1004, 1005, 0, 1012, 0, 0, 1073,
	1763, 0, 1095, 1096, 1097, 1207, 1208, 1209, 1165, 1113,
	0, -2, 1218, 0, 1109, 1131, 1165, 0, 1143, 0,
	1150, 0, 1148, 1141, 782, 671, 610, 1152, 409, 1204,
	1194, 0, 1196, 0, 0, 0, 0, 1175, -2, 0,
	1338, 1340, 1341, 1344, 1345, 1346, 1392, 1393, 1394, 0,
	0, 1349, 1389, 1390, 1391, 1350, 0, 0, 0, 0,
	0, 1690, 1691, 1385, 0, 0, 1309, 1311, 1312, 1313,
	1314, 1315, 1316, 1317, 1310, 0, 0, 0, 1301, 1303,
	422, 0, 0, 1784, 1019, 319, 0, 0, 893, 895,
	890, 891, 91, 93, 108, 0, 743, 148, 0, 744,
	119, 0, 140, 0, 1132, 0, 1492, 1479, 0, 0,
	0, 0, 0, 1694, 1695, 1696, 0, 1439, 1443, 0,
	74, 67, 68, 0, 0, 0, 979, 980, 988, 989,
	0, 991, 992, 502, 1007, 1011, 1014, 0, 1064, 0,
	788, 0, 1167, 0, 1115, 1098, 1220, 1784, 1118, 1167,
	0, 1212, 1784, 1784, 1133, 0, 1145, 0, 1157, 0,
	1151, 777, 402, 0, 1154, 1190, 1195, 1197, 1199, 0,
	1203, 1201, 1176, -2, 0, 1184, 0, 0, 1347, 1348,
	0, 0, 1590, 1784, 0, 1380, 0, 1064, 1064, 1064,
	1064, 0, 474, 432, 0, 870, 884, 0, 0, 0,
	733, 109, 0, 118, 137, 0, 150, 151, 0, 0,
	0, 0, 1124, 0, 1468, 0, 0, 0, 1472, 1473,
	1474, 1475, 76, 0, 0, 0, 956, 0, 990, 1013,
	1015, 1063, 1074, 1075, 788, 1108, 0, 1204, 1219, 0,
	1110, 1211, 0, 0, 0, 1144, 1156, 0, 1159, 669,
	1153, 1171, 0, 1200, 1177, 1185, 0, 1180, 0, 0,
	0, 1388, 0, 1354, 0, 1359, 1368, 1381, 0, 0,
	1290, 0, 1292, 0, 1296, 0, 1298, 0, 0, 434,
	894, 896, 0, 746, 736, 120, 124, 0, 146, 143,
	0, 152, 0, 0, 0, 0, 1120, 0, 0, 1469,
	1470, 1471, 0, 69, 0, 958, 959, 972, 1065, 1784,
	1784, 0, 0, 0, 1071, 1072, 1076, 0, 1192, 1224,
	1213, 1214, 1215, 1158, 1191, 1179, 0, -2, 1187, 0,
	0, 1642, 1652, 1653, 1352, 1358, 1367, 1369, 1370, 0,
	1382, 1383, 1384, 1386, 1064, 1064, 1064, 1064, 1300, 745,
	0, 111, 0, 0, 141, 142, 144, 0, 153, 0,
	155, 156, 0, 1480, 77, 960, 0, 0, 1068, 1069,
	0, 1168, 0, 1170, 1181, -2, 0, 1189, 0, 1353,
	1371, 0, 1372, 0, 0, 0, 1291, 1293, 1297, 1299,
	747, 1130, 0, 125, 0, 127, 129, 130, 1324, 138,
	139, 145, 154, 0, 945, 961, 0, 1066, 1067, 1070,
	0, 1172, 1188, 1643, 1373, 1375, 1376, 0, 0, 1374,
	112, 113, 0, 126, 0, 0, 1125, 962, 1169, 1166,
	1377, 1379, 1378, 0, 0, 128, 1325, 114, 115, 116,
	0, 1326,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 116, 3, 3, 3, 147, 139, 3,
	83, 84, 144, 142, 157, 143, 156, 145, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 640, 637,
	126, 125, 127, 3, 641, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 149, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 638, 138, 639, 150,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 85, 86, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 117, 118, 119, 120, 121, 122, 123, 124,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	140, 141, 146, 148, 151, 152, 153, 154, 155, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 57956, 631, 57957, 632, 57958, 633, 57959, 634,
	57960, 635, 57961, 636, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:818
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:825
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:831
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:839
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:845
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:849
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:864
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:868
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:874
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:879
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:883
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:916
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 56:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:927
		{
			var timestamp = yyDollar[2].str
			var isS3 = false
			var dir = yyDollar[4].str
			var parallelism = yyDollar[6].str
			var option []string
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 57:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:938
		{
			var timestamp = yyDollar[2].str
			var isS3 = true
			var dir string
			var parallelism string
			var option = yyDollar[5].strsUnion()
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 58:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:950
		{
			yyVAL.str = ""
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:954
		{
			yyVAL.str = yyDollar[2].str
		}
	case 60:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:959
		{
			yyVAL.str = ""
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:963
		{
			yyVAL.str = yyDollar[2].str
		}
	case 62:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:971
		{
			yyLOCAL = &tree.CreateSnapShot{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Object:      yyDollar[6].snapshotObjectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:981
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELCLUSTER,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:991
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 65:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1003
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				PitrValue:   yyDollar[6].int64ValUnion(),
				PitrUnit:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1013
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELCLUSTER,
				PitrValue:   yyDollar[8].int64ValUnion(),
				PitrUnit:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1023
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				AccountName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:   yyDollar[9].int64ValUnion(),
				PitrUnit:    yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1034
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:    yyDollar[9].int64ValUnion(),
				PitrUnit:     yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-12 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1045
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[9].cstrUnion().Compare()),
				PitrValue:    yyDollar[11].int64ValUnion(),
				PitrUnit:     yyDollar[12].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1059
		{
			yyLOCAL = yyDollar[1].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1067
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELCLUSTER,
				SnapShotName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}

		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1075
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELACCOUNT,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[6].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1083
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELDATABASE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1092
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELTABLE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[10].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1102
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELACCOUNT,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[9].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1111
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELDATABASE,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName:  tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[11].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-13 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1121
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELTABLE,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName:  tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:     tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[10].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[13].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1134
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELACCOUNT,
				Name:      tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				TimeStamp: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1142
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1151
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				TimeStamp:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1163
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1183
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1189
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1196
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1204
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1210
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1219
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1229
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1237
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1245
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1253
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1263
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1271
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1281
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1288
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1297
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1307
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1311
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1317
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1321
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1327
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1336
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1346
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1350
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1356
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1365
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1369
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1375
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1396
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
			yyLOCAL.(*tree.Load).Param.Strict = yyDollar[11].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1410
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1417
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1421
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1427
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1431
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1437
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1444
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1452
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1456
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error strict flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1468
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1472
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1486
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1490
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1495
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1502
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1506
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1510
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1516
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1525
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1536
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1540
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1546
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1550
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1556
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1560
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1566
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1590
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            goto ret1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1609
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1613
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1617
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1622
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1626
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1635
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1645
		{
			yyVAL.str = ""
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1652
		{
			yyVAL.str = yyDollar[3].str
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1657
		{
			yyVAL.str = "\n"
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1664
		{
			yyVAL.str = yyDollar[3].str
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1669
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1673
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1701
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1705
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1711
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1719
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1739
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1758
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1783
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1787
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1791
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1796
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1800
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 163:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1806
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 164:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1819
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 165:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1830
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1843
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1847
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1857
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1870
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1883
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1889
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1895
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1903
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  dbName,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1913
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1923
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1927
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1931
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1935
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1939
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1943
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1950
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1954
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1960
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1967
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1976
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1980
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1986
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1990
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1994
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1998
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2002
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPGRADE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2006
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2010
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2014
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2018
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2022
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2026
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2030
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2034
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2038
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2042
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2046
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2050
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2054
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2058
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2062
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2066
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2070
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2074
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2078
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2082
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2086
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2090
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2094
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2098
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2102
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2106
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2110
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2114
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2118
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2122
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2126
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2130
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2134
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2138
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2142
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2146
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2150
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2154
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2158
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2162
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2166
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2170
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2174
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2178
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2182
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2186
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2199
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2206
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2213
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2223
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2227
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2233
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2240
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2248
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2252
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2256
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2260
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2266
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2270
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2276
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2283
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2290
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 259:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2299
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2329
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2333
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2337
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2343
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2349
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 265:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2353
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2360
		{
			yyVAL.str = yyDollar[3].str
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2366
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2370
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2376
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2384
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2393
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2402
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2410
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2418
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2441
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2464
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2471
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2478
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2486
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2493
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2500
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2509
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2513
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2517
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2523
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2527
		{
			yyVAL.str = yyDollar[1].str
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2533
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2537
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2543
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2547
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2558
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2564
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2569
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2573
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2577
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2581
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2585
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2589
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2593
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2597
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2601
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2607
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2611
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2615
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 309:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2619
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 310:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2624
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 311:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2629
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2635
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2648
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2661
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2674
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2687
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2703
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 319:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2710
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 320:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2721
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].joinTableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2732
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2736
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2742
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2752
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2758
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2762
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:2768
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2774
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2778
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2782
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2786
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2792
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2805
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 343:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2811
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 344:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2815
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2821
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2825
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2831
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2837
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2848
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2854
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2858
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 357:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2862
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 358:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2866
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2870
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2874
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2882
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 362:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2890
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 363:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2900
		{
			if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2912
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 365:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2916
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 366:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2924
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 367:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2932
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:2971
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:2975
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:2981
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2987
		{
			yyVAL.str = yyDollar[1].str
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2992
		{
			yyVAL.str = "true"
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2993
		{
			yyVAL.str = "false"
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2994
		{
			yyVAL.str = yyDollar[1].str
		}
	case 387:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2999
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 388:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3005
		{
			yyLOCAL = &tree.UpgradeStatement{
				Target: yyDollar[3].upgrade_targetUnion(),
				Retry:  yyDollar[4].int64ValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3014
		{
			yyLOCAL = &tree.Target{
				AccountName:  yyDollar[1].str,
				IsALLAccount: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3021
		{
			yyLOCAL = &tree.Target{
				AccountName:  "",
				IsALLAccount: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 391:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3029
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3033
		{
			res := yyDollar[3].item.(int64)
			if res <= 0 {
				yylex.Error("retry value can not less than 0")
				yyLOCAL = -1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 402:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3057
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3080
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 404:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3090
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 405:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3097
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3106
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3110
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3116
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 409:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3120
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()

			partitionDef := tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)

			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 410:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3144
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var pitrValue = yyDollar[6].int64ValUnion()
			var pitrUnit = yyDollar[7].str
			yyLOCAL = tree.NewAlterPitr(ifExists, name, pitrValue, pitrUnit)
		}
		yyVAL.union = yyLOCAL
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3154
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3164
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3180
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3198
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3202
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3208
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3212
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 418:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3218
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 419:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3224
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 420:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3232
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 421:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3242
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 422:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3250
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 423:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3260
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 424:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3270
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3280
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3287
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3291
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3295
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3299
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 430:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3303
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3310
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 432:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3316
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 433:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3320
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 434:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3324
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3328
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3332
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3336
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3340
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3344
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3349
		{
			yyVAL.str = ""
		}
	case 457:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3380
		{
			yyVAL.str = ""
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3384
		{
			yyVAL.str = string("COLUMN")
		}
	case 459:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3389
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3395
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3401
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3409
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3413
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3419
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3427
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterOptionTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3434
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3440
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3446
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3452
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3458
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3465
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3472
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3480
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 474:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3486
		{
			val := int64(yyDollar[6].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = val
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3498
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3504
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3512
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3516
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 479:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3523
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 480:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3541
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 481:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3556
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.UNIQUE_CHECK_ON_AUTOINCR,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 482:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3571
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 483:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3586
		{
			assignments := []*tree.VarAssignmentExpr{
				{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 484:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3599
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 485:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3605
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].exprUnion(),
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 486:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3616
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 487:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3629
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 488:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3633
		{
			var UserName = yyDollar[3].str
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 489:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3641
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3645
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 491:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3650
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3654
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3670
		{
			yyLOCAL = tree.NewUserMiscOptionAccountUnlock()
		}
		yyVAL.union = yyLOCAL
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3674
		{
			yyLOCAL = tree.NewUserMiscOptionAccountLock()
		}
		yyVAL.union = yyLOCAL
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3678
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNone()
		}
		yyVAL.union = yyLOCAL
	case 496:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3682
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireInterval(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3689
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNever()
		}
		yyVAL.union = yyLOCAL
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3693
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireDefault()
		}
		yyVAL.union = yyLOCAL
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3697
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryDefault()
		}
		yyVAL.union = yyLOCAL
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3701
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 501:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3708
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalDefault()
		}
		yyVAL.union = yyLOCAL
	case 502:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3712
		{
			var Value = yyDollar[4].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3719
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentNone()
		}
		yyVAL.union = yyLOCAL
	case 504:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3723
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentDefault()
		}
		yyVAL.union = yyLOCAL
	case 505:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3727
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentOptional()
		}
		yyVAL.union = yyLOCAL
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3731
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionFailedLoginAttempts(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3738
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3745
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeUnbounded()
		}
		yyVAL.union = yyLOCAL
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:3751
		{
			yyVAL.item = nil
		}
	case 510:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3756
		{
			yyVAL.item = nil
		}
	case 545:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3800
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3809
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3817
		{
			yyLOCAL = &tree.ShowSnapShots{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3825
		{
			yyLOCAL = &tree.ShowPitr{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3833
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 550:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3837
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 551:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3841
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{
				{UserName: yyDollar[5].cstrUnion().Compare()},
			}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 552:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3852
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3856
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 554:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3862
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 555:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3867
		{
		}
	case 557:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3871
		{
		}
	case 559:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3876
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 560:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3886
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3896
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3904
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3910
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 564:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3916
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 565:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3922
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 566:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3928
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 567:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3934
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 568:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3940
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3949
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3953
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3957
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3961
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3965
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3969
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3973
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3977
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 577:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3983
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 578:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3992
		{
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3994
		{
		}
	case 583:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4003
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 584:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4013
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 585:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4022
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4026
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4030
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4036
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4042
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 590:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4048
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 591:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4054
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 592:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4063
		{
			yyLOCAL = &tree.ShowTables{
				Open:         false,
				Full:         yyDollar[2].fullOptUnion(),
				DBName:       yyDollar[4].str,
				Like:         yyDollar[5].comparisionExprUnion(),
				Where:        yyDollar[6].whereUnion(),
				SnapshotName: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 593:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4074
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 594:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4086
		{
			yyLOCAL = &tree.ShowDatabases{
				Like:         yyDollar[3].comparisionExprUnion(),
				Where:        yyDollar[4].whereUnion(),
				SnapshotName: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 595:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4094
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 596:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4100
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 597:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4112
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4126
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4132
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4138
		{
			yyLOCAL = &tree.ShowAccountUpgrade{}
		}
		yyVAL.union = yyLOCAL
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4145
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 602:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4149
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 603:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4154
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 604:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4158
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4162
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4167
		{
			yyVAL.str = ""
		}
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4171
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4177
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4182
		{
			yyVAL.str = ""
		}
	case 610:
		yyDollar = yyS[yypt-5 : yypt+1]
//line mysql_sql.y:4186
		{
			yyVAL.str = yyDollar[4].str
		}
	case 615:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4201
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4205
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4211
		{
			yyLOCAL = &tree.ShowCreateTable{
				Name:         yyDollar[4].unresolvedObjectNameUnion(),
				SnapshotName: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4219
		{
			yyLOCAL = &tree.ShowCreateView{
				Name:         yyDollar[4].unresolvedObjectNameUnion(),
				SnapshotName: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4226
		{
			yyLOCAL = &tree.ShowCreateDatabase{IfNotExists: yyDollar[4].ifNotExistsUnion(), Name: yyDollar[5].str}
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4230
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4236
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4242
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4247
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4255
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4261
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4266
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4272
		{
			yyLOCAL = tree.NewUnresolvedObjectName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4278
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 629:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4282
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4309
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4317
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4325
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4333
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 651:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4337
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:4343
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption *tree.AccountIdentified
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4356
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 654:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4364
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 655:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4373
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 656:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4379
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 657:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4387
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 658:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4395
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 659:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4403
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 660:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4409
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 661:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4417
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 662:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4423
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 663:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4431
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 664:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4437
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 667:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4447
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 668:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4452
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 669:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4459
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 670:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4475
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 671:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4488
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4499
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 673:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4503
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4509
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 675:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4515
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 676:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4524
		{
		}
	case 677:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4526
		{
		}
	case 678:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4529
		{
		}
	case 683:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4538
		{
		}
	case 685:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4542
		{
		}
	case 687:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4547
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 688:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4556
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4563
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 690:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4569
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 691:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4577
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 692:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4584
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 693:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4591
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 694:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4611
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 695:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4619
		{
			ins := yyDollar[5].insertUnion()
			ins.Table = yyDollar[3].tableExprUnion()
			ins.PartitionNames = yyDollar[4].identifierListUnion()
			ins.OnDuplicateUpdate = []*tree.UpdateExpr{nil}
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4629
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 697:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4633
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 698:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4639
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4646
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 700:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4652
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 701:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4660
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 702:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4667
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 703:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4674
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 704:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4693
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 705:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4697
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 706:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4701
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4706
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4710
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 709:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4714
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:4720
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4729
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4733
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4739
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 714:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4743
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4749
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4753
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4759
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4764
		{
		}
	case 720:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4768
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4775
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4779
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4786
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4791
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4795
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4801
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4805
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4811
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4815
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4820
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4824
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4837
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4848
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4859
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 737:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4881
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:4904
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:4912
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4921
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 741:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4925
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4938
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4942
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4947
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4951
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4958
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4963
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4970
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4976
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4980
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4984
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4988
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4992
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4996
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5001
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5005
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5011
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:5021
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5036
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5040
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5054
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5058
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5064
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5073
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5077
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5081
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5085
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5089
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5095
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5102
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5111
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5115
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:5121
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5129
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 776:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5133
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5138
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5142
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5148
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5152
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5156
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5161
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5165
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5171
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5177
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5181
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:5187
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5192
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5196
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5200
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5205
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5209
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5213
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5218
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5222
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5230
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5234
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5238
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5252
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5256
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5266
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5276
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5286
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5298
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5306
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5314
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5323
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5331
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5339
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5347
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5355
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5363
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5371
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5379
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5387
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5397
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5408
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5422
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5426
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5430
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 821:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5435
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5439
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5443
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5452
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5456
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5461
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5465
		{
			yyLOCAL = tree.GroupBy(yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5470
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5474
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5480
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5484
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5490
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5494
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5498
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 837:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5502
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion(), yyDollar[3].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5507
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix, nil)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5515
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5521
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5529
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5537
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].joinTableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5547
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5553
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5562
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5571
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5580
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5590
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 851:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5594
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 852:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5604
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 853:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5608
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 854:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5612
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 855:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5616
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 856:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5622
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5632
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5636
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5642
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5648
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5652
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5658
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5664
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 864:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5668
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 865:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5672
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 866:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5676
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS_L2
		}
	case 867:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5682
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5686
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 869:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5692
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 870:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5696
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5702
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 872:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5706
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5712
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 874:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5716
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 875:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5726
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 876:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5739
		{
			yyLOCAL = yyDollar[2].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:5745
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 878:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5751
		{
			name := tree.NewUnresolvedName(yyDollar[1].cstrUnion())
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:     tree.FuncName2ResolvableFunctionReference(name),
					FuncName: yyDollar[1].cstrUnion(),
					Exprs:    yyDollar[3].exprsUnion(),
					Type:     tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 879:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:5765
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 880:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5776
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5783
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 883:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5787
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 884:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:5793
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 885:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5803
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 886:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5807
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 887:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5811
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 888:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5816
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 889:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5820
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 890:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5824
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 891:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5828
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 892:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5833
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5837
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 894:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5841
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5845
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 896:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5849
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 897:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5854
		{
			yyVAL.str = ""
		}
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5858
		{
			yyVAL.str = yyDollar[1].str
		}
	case 899:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5862
		{
			yyVAL.str = yyDollar[2].str
		}
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5868
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5872
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].str)
		}
	case 902:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5877
		{
			yyLOCAL = tree.NewCStr("", 1)
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5881
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 904:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5885
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5889
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5893
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5899
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 929:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5940
		{
			var Language = yyDollar[3].str
			var Name = tree.Identifier(yyDollar[5].str)
			var Filename = tree.Identifier(yyDollar[7].str)
			yyLOCAL = tree.NewCreateExtension(
				Language,
				Name,
				Filename,
			)
		}
		yyVAL.union = yyLOCAL
	case 930:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5953
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 931:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5959
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 932:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5965
		{
			var Name = yyDollar[3].procNameUnion()
			var Args = yyDollar[5].procArgsUnion()
			var Body = yyDollar[7].str
			yyLOCAL = tree.NewCreateProcedure(
				Name,
				Args,
				Body,
			)
		}
		yyVAL.union = yyLOCAL
	case 933:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:5978
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 934:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:5983
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 935:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5990
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 937:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5997
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 938:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6001
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:6007
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 940:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:6013
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 941:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6018
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 942:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6022
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 943:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6026
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6030
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 945:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6037
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				goto ret1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				goto ret1
			}

			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[4].functionNameUnion()
			var Args = yyDollar[6].funcArgsUnion()
			var ReturnType = yyDollar[9].funcReturnUnion()
			var Language = yyDollar[11].str
			var Import = yyDollar[12].boolValUnion()
			var Body = yyDollar[13].str
			var Handler = yyDollar[14].str

			yyLOCAL = tree.NewCreateFunction(
				Replace,
				Name,
				Args,
				ReturnType,
				Language,
				Import,
				Body,
				Handler,
			)
		}
		yyVAL.union = yyLOCAL
	case 946:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6070
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 947:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6075
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 948:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6082
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 950:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6089
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 951:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6093
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 952:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:6099
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 953:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6105
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 954:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6109
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 955:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6113
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 956:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6119
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 957:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:6125
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6131
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 959:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6135
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 960:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6141
		{
			yyVAL.str = ""
		}
	case 962:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6148
		{
			yyVAL.str = yyDollar[2].str
		}
	case 963:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6154
		{
			var Replace bool
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6169
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 965:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6186
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = yyDollar[4].exprUnion()
			var AuthOption = yyDollar[5].accountAuthOptionUnion()
			var StatusOption = yyDollar[6].accountStatusUnion()
			var Comment = yyDollar[7].accountCommentUnion()
			yyLOCAL = tree.NewCreateAccount(
				IfNotExists,
				Name,
				AuthOption,
				StatusOption,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 966:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6203
		{
			yyVAL.str = yyDollar[1].str
		}
	case 967:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6207
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 968:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6213
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 969:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6217
		{
			yyVAL.str = "DEFINER = "
		}
	case 970:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6221
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 971:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6226
		{
			yyVAL.str = ""
		}
	case 972:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:6230
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 978:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6244
		{
			yyVAL.str = ""
		}
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6252
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6258
		{
			var Str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6263
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 984:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:6269
		{
			var Equal = yyDollar[2].str
			var AdminName = yyDollar[3].exprUnion()
			var IdentifiedType = yyDollar[4].accountIdentifiedUnion()
			yyLOCAL = *tree.NewAccountAuthOption(
				Equal,
				AdminName,
				IdentifiedType,
			)
		}
		yyVAL.union = yyLOCAL
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6282
		{
			var Str = yyDollar[1].str
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 986:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6287
		{
			var Str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 987:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6292
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 988:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6298
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 989:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6305
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 990:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6312
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByRandomPassword,
				nil,
			)
		}
		yyVAL.union = yyLOCAL
	case 991:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6319
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 992:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6326
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 993:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6334
		{
			as := tree.NewAccountStatus()
			as.Exist = false
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 994:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6340
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusOpen
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 995:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6347
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusSuspend
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 996:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6354
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusRestricted
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 997:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6362
		{
			ac := tree.NewAccountComment()
			ac.Exist = false
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 998:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6368
		{
			ac := tree.NewAccountComment()
			ac.Exist = true
			ac.Comment = yyDollar[2].str
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 999:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6377
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Users = yyDollar[4].usersUnion()
			var Role = yyDollar[5].accountRoleUnion()
			var MiscOpt = yyDollar[6].userMiscOptionUnion()
			var CommentOrAttribute = yyDollar[7].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewCreateUser(
				IfNotExists,
				Users,
				Role,
				MiscOpt,
				CommentOrAttribute,
			)
		}
		yyVAL.union = yyLOCAL
	case 1000:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6394
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].cstrUnion().Compare())
			var Table = tree.Identifier("")
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				Table,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1001:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6411
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier("")
			var Table = tree.Identifier(yyDollar[6].cstrUnion().Compare())
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				Table,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1002:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6430
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Url = yyDollar[5].str
			var Credentials = yyDollar[6].stageCredentialsUnion()
			var Status = yyDollar[7].stageStatusUnion()
			var Comment = yyDollar[8].stageCommentUnion()
			yyLOCAL = tree.NewCreateStage(
				IfNotExists,
				Name,
				Url,
				Credentials,
				Status,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1003:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6448
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1004:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6454
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1005:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6461
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6469
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1007:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6475
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6483
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6489
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6497
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6503
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6512
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6516
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6521
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6525
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6532
		{
			yyVAL.str = yyDollar[3].str
		}
	case 1017:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6537
		{
			yyVAL.str = ""
		}
	case 1018:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6541
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1019:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6547
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6560
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var dbName = yyDollar[6].str
			var comment = yyDollar[7].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, dbName, comment)
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6570
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6574
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6580
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6586
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6592
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6599
		{
			yyVAL.str = ""
		}
	case 1027:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6603
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1028:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6609
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6617
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6625
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropSnapShot(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6633
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPitr(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6641
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1033:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6646
		{
			var Exist = false
			var IsComment bool
			var Str string
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)

		}
		yyVAL.union = yyLOCAL
	case 1034:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6658
		{
			var Exist = true
			var IsComment = true
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6669
		{
			var Exist = true
			var IsComment = false
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6778
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6782
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6788
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6801
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6805
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1041:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6811
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6824
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6828
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 1044:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6832
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1045:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6837
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1046:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6841
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 1047:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6847
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1048:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6854
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 1049:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6860
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1050:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6869
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1052:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6876
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewCreateRole(
				IfNotExists,
				Roles,
			)
		}
		yyVAL.union = yyLOCAL
	case 1053:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:6887
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1054:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:6891
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 1055:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:6897
		{
			var UserName = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 1056:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6906
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6910
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6914
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6919
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6923
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6927
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6931
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6937
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = tree.NewIndexOption()
				io.IType = yyDollar[5].indexTypeUnion()
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = tree.NewIndexOption()
				io.IType = tree.INDEX_TYPE_INVALID
			}
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Table = yyDollar[7].tableNameUnion()
			var ifNotExists = false
			var IndexCat = yyDollar[2].indexCategoryUnion()
			var KeyParts = yyDollar[9].keyPartsUnion()
			var IndexOption = io
			var MiscOption []tree.MiscOption
			yyLOCAL = tree.NewCreateIndex(
				Name,
				Table,
				ifNotExists,
				IndexCat,
				KeyParts,
				IndexOption,
				MiscOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6968
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6972
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6998
		{
			io := tree.NewIndexOption()
			io.KeyBlockSize = uint64(yyDollar[3].item.(int64))
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7004
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}

			io := tree.NewIndexOption()
			io.AlgoParamList = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7016
		{
			io := tree.NewIndexOption()
			io.AlgoParamVectorOpType = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7022
		{
			io := tree.NewIndexOption()
			io.Comment = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7028
		{
			io := tree.NewIndexOption()
			io.ParserName = yyDollar[3].cstrUnion().Compare()
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7034
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_VISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7040
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_INVISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7048
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7052
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7058
		{
			// Order is parsed but just ignored as MySQL dtree.
			var ColName = yyDollar[1].unresolvedNameUnion()
			var Length = int(yyDollar[2].lengthOptUnion())
			var Direction = yyDollar[3].directionUnion()
			var Expr tree.Expr
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7072
		{
			var ColName *tree.UnresolvedName
			var Length int
			var Expr = yyDollar[2].exprUnion()
			var Direction = yyDollar[4].directionUnion()
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7086
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7090
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7094
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7098
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7102
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7106
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7110
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7116
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].str)
			var SubscriptionOption = yyDollar[5].subscriptionOptionUnion()
			var CreateOptions = yyDollar[6].createOptionsUnion()
			yyLOCAL = tree.NewCreateDatabase(
				IfNotExists,
				Name,
				SubscriptionOption,
				CreateOptions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7131
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7135
		{
			var From = tree.Identifier(yyDollar[2].str)
			var Publication = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewSubscriptionOption(From, Publication)
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7146
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7150
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7155
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7159
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7165
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7169
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7175
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Charset = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCharset(
				IsDefault,
				Charset,
			)
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7184
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Collate = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCollate(
				IsDefault,
				Collate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1097:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7193
		{
			var Encrypt = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionEncryption(Encrypt)
		}
		yyVAL.union = yyLOCAL
	case 1098:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7199
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7203
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7209
		{
			var TableName = yyDollar[4].tableNameUnion()
			var Options = yyDollar[7].connectorOptionsUnion()
			yyLOCAL = tree.NewCreateConnector(
				TableName,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1101:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7220
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1102:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7226
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1103:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7244
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7262
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1105:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7280
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			var SourceName = yyDollar[5].tableNameUnion()
			var Defs = yyDollar[7].tableDefsUnion()
			var Options = yyDollar[9].tableOptionsUnion()
			yyLOCAL = tree.NewCreateSource(
				Replace,
				IfNotExists,
				SourceName,
				Defs,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7296
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7300
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7309
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7321
		{
			t := tree.NewCreateTable()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Param = yyDollar[9].loadParamUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7330
		{
			t := tree.NewCreateTable()
			t.IsClusterTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7342
		{
			t := tree.NewCreateTable()
			t.IsDynamicTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			t.DTOptions = yyDollar[8].tableOptionsUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7352
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[6].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1113:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7362
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[9].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1114:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7373
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1115:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7383
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[10].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1116:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7394
		{
			t := tree.NewCreateTable()
			t.IsAsLike = true
			t.Table = *yyDollar[5].tableNameUnion()
			t.LikeTableName = *yyDollar[7].tableNameUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7402
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.SubscriptionOption = yyDollar[6].subscriptionOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7413
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7420
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7430
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1121:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7443
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7451
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7460
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7469
		{
			yyVAL.str = ""
		}
	case 1125:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:7473
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1126:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7479
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7483
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7488
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7492
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:7499
		{
			yyLOCAL = &tree.TailParameter{
				Charset:      yyDollar[1].str,
				Fields:       yyDollar[2].fieldsUnion(),
				Lines:        yyDollar[3].linesUnion(),
				IgnoredLines: uint64(yyDollar[4].int64ValUnion()),
				ColumnList:   yyDollar[5].loadColumnsUnion(),
				Assignments:  yyDollar[6].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7511
		{
			yyVAL.str = ""
		}
	case 1132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7515
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1133:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7521
		{
			var Name = yyDollar[4].tableNameUnion()
			var Type = yyDollar[5].columnTypeUnion()
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var IncrementBy = yyDollar[6].incrementByOptionUnion()
			var MinValue = yyDollar[7].minValueOptionUnion()
			var MaxValue = yyDollar[8].maxValueOptionUnion()
			var StartWith = yyDollar[9].startWithOptionUnion()
			var Cycle = yyDollar[10].boolValUnion()
			yyLOCAL = tree.NewCreateSequence(
				Name,
				Type,
				IfNotExists,
				IncrementBy,
				MinValue,
				MaxValue,
				StartWith,
				Cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7542
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7556
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7560
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7564
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7570
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1139:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7574
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1140:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7581
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7588
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7595
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7602
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7606
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7610
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7614
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7618
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7625
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7632
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1150:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7636
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7643
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7650
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7654
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7660
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1155:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7666
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1156:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7670
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7677
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7684
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1159:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7691
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7698
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7702
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1162:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7707
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7711
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7715
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1165:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7720
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7724
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()
			yyLOCAL = tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7737
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7741
		{
			var ColumnList = []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)

		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7749
		{
			var ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7757
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7761
		{
			var IsSubPartition = true
			var PType = yyDollar[3].partitionByUnion()
			var Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = tree.NewPartitionBy2(
				IsSubPartition,
				PType,
				Num,
			)
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7773
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7777
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7783
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1175:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7787
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7793
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options []tree.TableOption
			var Subs = yyDollar[4].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7806
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options = yyDollar[4].tableOptionsUnion()
			var Subs = yyDollar[5].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7820
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7824
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7830
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1181:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7834
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:7840
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options []tree.TableOption
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:7849
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options = yyDollar[3].tableOptionsUnion()
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1184:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7860
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7864
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7869
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7873
		{
			expr := tree.NewMaxValue()
			var valueList = tree.Exprs{expr}
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7879
		{
			var valueList = yyDollar[5].exprsUnion()
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7884
		{
			var valueList = yyDollar[4].exprsUnion()
			yyLOCAL = tree.NewValuesIn(
				valueList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7892
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7896
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7906
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7910
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1194:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7921
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7929
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7937
		{
			listTyp := tree.NewListType()
			listTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7945
		{
			listTyp := tree.NewListType()
			listTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7956
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1200:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7965
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			keyTyp.ColumnList = yyDollar[5].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1201:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7975
		{
			Linear := yyDollar[1].boolValUnion()
			Expr := yyDollar[4].exprUnion()
			hashTyp := tree.NewHashType(Linear, Expr)
			yyLOCAL = tree.NewPartitionBy(
				hashTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7985
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7989
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1204:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7994
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1205:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7998
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8004
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1207:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8008
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1208:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8014
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8023
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1210:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8033
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1211:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8037
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1212:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8043
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1213:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8047
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1214:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8053
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1215:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8062
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8072
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8076
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8082
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8086
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1220:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8090
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1221:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8096
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1222:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8100
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1223:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8104
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1224:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8108
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1225:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8112
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8116
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1227:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8120
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1228:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8125
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1229:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8129
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1230:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8133
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1231:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8137
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1232:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8141
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1233:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8145
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1234:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8149
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1235:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8153
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1236:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8157
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1237:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8161
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1238:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8165
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1239:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8169
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1240:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8173
		{
			t := tree.NewTableOptionPackKeys()
			t.Value = yyDollar[3].item.(int64)
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1241:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8179
		{
			t := tree.NewTableOptionPackKeys()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1242:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8185
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1243:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8189
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1244:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8193
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1245:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8197
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1246:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8201
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1247:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8207
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1248:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8213
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1249:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8219
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1250:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8225
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1251:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8231
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1252:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8237
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1253:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8241
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1254:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8245
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1255:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8249
		{
			var Preperties = yyDollar[3].propertiesUnion()
			yyLOCAL = tree.NewTableOptionProperties(Preperties)
		}
		yyVAL.union = yyLOCAL
	case 1256:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8256
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1257:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8260
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1258:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:8266
		{
			var Key = yyDollar[1].str
			var Value = yyDollar[3].str
			yyLOCAL = *tree.NewProperty(
				Key,
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 1259:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8277
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1260:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8281
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1261:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8287
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1262:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8291
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1263:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8295
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1264:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8299
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1265:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8303
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1266:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8307
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8321
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8325
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8334
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[2].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8340
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[4].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1275:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8348
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8352
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8356
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPTIME,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1278:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8363
		{
			var Str = yyDollar[4].cstrUnion().Compare()
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPSNAPSHOT,
				Expr: tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1279:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8371
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPSNAPSHOT,
				Expr: tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1280:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8378
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATMOTIMESTAMP,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1281:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8386
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1283:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8393
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1284:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8397
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1285:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8403
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1286:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8407
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1287:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8411
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1288:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8417
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1289:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8421
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1290:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8427
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1291:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8440
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1292:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8453
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid the type of index")
					goto ret1
				}
			}

			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1293:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8492
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid type of index")
					goto ret1
				}
			}
			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1294:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8532
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1295:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8546
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1296:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8552
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1297:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8565
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1298:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8578
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1299:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8591
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1300:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8604
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var KeyParts = yyDollar[6].keyPartsUnion()
			var Name = yyDollar[4].str
			var Refer = yyDollar[8].attributeReferenceUnion()
			var Empty = true
			yyLOCAL = tree.NewForeignKey(
				IfNotExists,
				KeyParts,
				Name,
				Refer,
				Empty,
			)
		}
		yyVAL.union = yyLOCAL
	case 1301:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8619
		{
			var Expr = yyDollar[3].exprUnion()
			var Enforced = yyDollar[5].boolValUnion()
			yyLOCAL = tree.NewCheckIndex(
				Expr,
				Enforced,
			)
		}
		yyVAL.union = yyLOCAL
	case 1302:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8629
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1304:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8635
		{
			yyVAL.str = ""
		}
	case 1305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8639
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1308:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8649
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1309:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8655
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1310:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8661
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1321:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8682
		{
			yyVAL.str = ""
		}
	case 1322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8686
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1323:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:8692
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1324:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8698
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1325:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8702
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1326:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8707
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1327:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8715
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1328:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8719
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1329:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8723
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1330:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8727
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1331:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8733
		{
			yyLOCAL = yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
		}
		yyVAL.union = yyLOCAL
	case 1332:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8739
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1333:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8743
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1334:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8748
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1335:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8755
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1336:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8759
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1337:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8765
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1338:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8769
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1339:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8775
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1340:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8779
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1341:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8783
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1342:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8787
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1343:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8791
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1344:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8795
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1345:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8800
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1346:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8804
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1347:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8808
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1348:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8812
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1349:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8816
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1350:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8820
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1351:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8824
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1352:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8828
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1353:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8832
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1354:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8836
		{
			name := tree.NewUnresolvedColName(yyDollar[3].str)
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[3].str, 1),
				Exprs:    es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1355:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8850
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1356:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8854
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1357:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8858
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1358:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8862
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1359:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8866
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1360:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8870
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1361:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8876
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1362:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8880
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1363:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8885
		{
			yyVAL.str = ""
		}
	case 1364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8889
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8895
		{
			yyVAL.str = ""
		}
	case 1366:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8899
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1367:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:8905
		{
			var TableName = yyDollar[2].tableNameUnion()
			var KeyParts = yyDollar[3].keyPartsUnion()
			var Match = yyDollar[4].matchTypeUnion()
			var OnDelete = yyDollar[5].referenceOnRecordUnion().OnDelete
			var OnUpdate = yyDollar[5].referenceOnRecordUnion().OnUpdate
			yyLOCAL = tree.NewAttributeReference(
				TableName,
				KeyParts,
				Match,
				OnDelete,
				OnUpdate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1368:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8922
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1369:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8929
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1370:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8936
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1371:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8943
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1372:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8950
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1373:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8959
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1374:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8965
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1375:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8971
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1376:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8975
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1377:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8979
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1378:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8983
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1379:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8987
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1380:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8992
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1382:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8999
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1383:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9003
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1384:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9007
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1385:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9012
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1386:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9016
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1387:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9021
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1388:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9025
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1395:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:9041
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1396:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9047
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1397:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9051
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1398:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9055
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1399:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9059
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1400:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9063
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1401:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9067
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1402:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9071
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1403:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9075
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1404:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9079
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1405:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9083
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1406:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9087
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1407:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9091
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1408:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9095
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1409:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9101
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1410:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9105
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1411:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9109
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1412:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9113
		{
			yyLOCAL = tree.NewParentExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1413:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9117
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1414:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9121
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1415:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9125
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1416:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9129
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1417:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9133
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1418:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9137
		{
			hint := strings.ToLower(yyDollar[2].cstrUnion().Compare())
			switch hint {
			case "d":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "DATETIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "t":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimeFamily,
						FamilyString: "TIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "ts":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "TIMESTAMP",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			default:
				yylex.Error("Invalid type")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1419:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9179
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1420:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9183
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1421:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9187
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1422:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9192
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1423:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9200
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1424:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9204
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1425:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9208
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1426:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9212
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1427:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9216
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1428:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9226
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1429:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9230
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1430:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9234
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1431:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9238
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1432:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9242
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1433:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9246
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1434:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9250
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1435:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9256
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1436:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9265
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1437:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9274
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1438:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9285
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1439:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9295
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1440:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9305
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1441:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9314
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1442:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9324
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1443:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9334
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1444:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9344
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1445:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9353
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1446:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9363
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1447:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9367
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1448:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9372
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1449:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9376
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1450:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9382
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1451:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9386
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1452:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:9392
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9401
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1454:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9413
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1455:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9430
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1457:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9447
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1458:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9460
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1459:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9473
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1460:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9485
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1461:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9499
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1462:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9514
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1463:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9529
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1464:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9546
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1465:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9561
		{
		}
	case 1469:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9568
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1470:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9572
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1471:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9576
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1472:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9582
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1473:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9586
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1474:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9590
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1475:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9594
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1476:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9600
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1477:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9604
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1478:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9608
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1479:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9614
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1480:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9622
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1481:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9632
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1482:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9636
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1483:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9643
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1484:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9648
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1485:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9652
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1486:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9657
		{
			yyVAL.str = ","
		}
	case 1487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9661
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1488:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9666
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9670
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1490:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9675
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1492:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9682
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1493:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9708
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1494:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9720
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1495:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9732
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1496:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9743
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1497:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9754
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1498:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9765
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1499:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9775
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1500:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9785
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1501:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9796
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1502:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9807
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1503:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9818
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1504:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9829
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1505:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9840
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1506:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9851
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1507:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9862
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1508:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9873
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1509:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9884
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1510:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9895
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1511:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9906
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1512:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9917
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1513:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9928
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1514:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9939
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1518:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9957
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1519:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9966
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1520:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9975
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1521:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9984
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1522:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9993
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1523:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10004
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1524:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10013
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[4].exprUnion()},
				Type:     yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1525:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10023
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1526:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10032
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1527:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10041
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1528:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10050
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1529:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10059
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumValWithType(constant.MakeInt64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1530:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10071
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumValWithType(constant.MakeInt64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1531:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10082
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumValWithType(constant.MakeInt64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1532:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10095
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumValWithType(constant.MakeInt64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1533:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10107
		{
			column := tree.NewUnresolvedColName(yyDollar[3].str)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10130
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1569:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10166
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1570:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10179
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1571:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10192
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1572:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10204
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1573:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10213
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1574:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10221
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1575:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10229
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1576:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10242
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1577:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10251
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1578:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10262
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1579:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10273
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1580:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10282
		{
			cn := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1581:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10294
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1582:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10304
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1583:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10314
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1584:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10323
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1585:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10334
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1586:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10343
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1587:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10353
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1588:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10362
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1589:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10371
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1590:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10381
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1591:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10385
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1592:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10391
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1593:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10395
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(ival), str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1600:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10414
		{
		}
	case 1601:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10416
		{
		}
	case 1635:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10457
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1636:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10469
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1637:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10473
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1638:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10477
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1639:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:10483
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1640:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10488
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1641:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10492
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1642:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10498
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1643:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10502
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1644:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10508
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1645:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10512
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1646:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10519
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1647:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10523
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1648:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10527
		{
			name := tree.NewUnresolvedColName("concat")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr("concat", 1),
				Exprs:    tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1649:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10536
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1650:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10540
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1651:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10544
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1652:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10549
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1653:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10553
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1654:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10559
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1655:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10563
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1656:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10567
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1657:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10571
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1658:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10575
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1659:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10579
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1660:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10583
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1661:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10587
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1662:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10591
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1663:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10595
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1665:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10603
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1666:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10607
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1667:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10611
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1668:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10615
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1669:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10619
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1670:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10623
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1671:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10627
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1672:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10631
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1673:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10635
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1674:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10639
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1676:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10645
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1677:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10649
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1678:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10655
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1679:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10659
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1680:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10666
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1681:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10670
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1682:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10674
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1683:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10680
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1684:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10684
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1685:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10688
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1686:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10692
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1687:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10696
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1688:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10700
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1689:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10704
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1690:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10710
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1691:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10714
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1692:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10718
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1693:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10722
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1694:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10728
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1695:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10741
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1696:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10746
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1697:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10752
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1698:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10756
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1699:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10769
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1700:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10774
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1701:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10778
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1702:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10782
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1703:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10786
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1704:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10790
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1705:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10797
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1706:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10801
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1707:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10805
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1708:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10809
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1709:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10816
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1713:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10827
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1714:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10832
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1715:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10838
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1716:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10850
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1717:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10862
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1718:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10874
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1719:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10887
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1720:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10900
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1721:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10913
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1722:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10926
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1723:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10939
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1724:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10952
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1725:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10965
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1726:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10978
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1727:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10991
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1728:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11004
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1729:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11019
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1730:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11046
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1731:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11088
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1732:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11124
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1733:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11160
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1734:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11177
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1735:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11189
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1736:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11209
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1737:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11229
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1738:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11249
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1739:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11265
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1740:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11278
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1741:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11291
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1742:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11304
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1743:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11317
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1744:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11329
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1745:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11341
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1746:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11353
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1747:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11365
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1748:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11377
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1749:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11389
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1750:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11401
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1751:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11413
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1752:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11425
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1753:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11438
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1754:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11451
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1755:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11464
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1756:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11477
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1757:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11492
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1758:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11500
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1759:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11509
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1760:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11519
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1761:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11542
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1762:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11547
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1763:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11553
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1765:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11560
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1766:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11564
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1767:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11569
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1768:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11573
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1769:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11579
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1770:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11585
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1771:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11592
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1772:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11599
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1773:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11608
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1774:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11615
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1775:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11622
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1776:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11631
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1777:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11635
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1778:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11639
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1779:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11645
		{
		}
	case 1780:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11647
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1784:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11657
		{
			yyVAL.str = ""
		}
	case 1785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:11661
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
