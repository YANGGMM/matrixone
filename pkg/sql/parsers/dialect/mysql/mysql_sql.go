// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"go/constant"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const CONNECT = 57367
const MANAGE = 57368
const GRANTS = 57369
const OWNERSHIP = 57370
const REFERENCE = 57371
const LOWER_THAN_SET = 57372
const SET = 57373
const ALL = 57374
const DISTINCT = 57375
const DISTINCTROW = 57376
const AS = 57377
const EXISTS = 57378
const ASC = 57379
const DESC = 57380
const INTO = 57381
const DUPLICATE = 57382
const DEFAULT = 57383
const LOCK = 57384
const KEYS = 57385
const NULLS = 57386
const FIRST = 57387
const LAST = 57388
const AFTER = 57389
const INSTANT = 57390
const INPLACE = 57391
const COPY = 57392
const DISABLE = 57393
const ENABLE = 57394
const UNDEFINED = 57395
const MERGE = 57396
const TEMPTABLE = 57397
const DEFINER = 57398
const INVOKER = 57399
const SQL = 57400
const SECURITY = 57401
const CASCADED = 57402
const VALUES = 57403
const NEXT = 57404
const VALUE = 57405
const SHARE = 57406
const MODE = 57407
const SQL_NO_CACHE = 57408
const SQL_CACHE = 57409
const JOIN = 57410
const STRAIGHT_JOIN = 57411
const LEFT = 57412
const RIGHT = 57413
const INNER = 57414
const OUTER = 57415
const CROSS = 57416
const NATURAL = 57417
const USE = 57418
const FORCE = 57419
const CROSS_L2 = 57420
const LOWER_THAN_ON = 57421
const ON = 57422
const USING = 57423
const SUBQUERY_AS_EXPR = 57424
const LOWER_THAN_STRING = 57425
const ID = 57426
const AT_ID = 57427
const AT_AT_ID = 57428
const STRING = 57429
const VALUE_ARG = 57430
const LIST_ARG = 57431
const COMMENT = 57432
const COMMENT_KEYWORD = 57433
const QUOTE_ID = 57434
const STAGE = 57435
const CREDENTIALS = 57436
const STAGES = 57437
const SNAPSHOTS = 57438
const INTEGRAL = 57439
const HEX = 57440
const FLOAT = 57441
const HEXNUM = 57442
const BIT_LITERAL = 57443
const NULL = 57444
const TRUE = 57445
const FALSE = 57446
const LOWER_THAN_CHARSET = 57447
const CHARSET = 57448
const UNIQUE = 57449
const KEY = 57450
const OR = 57451
const PIPE_CONCAT = 57452
const XOR = 57453
const AND = 57454
const NOT = 57455
const BETWEEN = 57456
const CASE = 57457
const WHEN = 57458
const THEN = 57459
const ELSE = 57460
const END = 57461
const ELSEIF = 57462
const LOWER_THAN_EQ = 57463
const LE = 57464
const GE = 57465
const NE = 57466
const NULL_SAFE_EQUAL = 57467
const IS = 57468
const LIKE = 57469
const REGEXP = 57470
const IN = 57471
const ASSIGNMENT = 57472
const ILIKE = 57473
const SHIFT_LEFT = 57474
const SHIFT_RIGHT = 57475
const DIV = 57476
const MOD = 57477
const UNARY = 57478
const COLLATE = 57479
const BINARY = 57480
const UNDERSCORE_BINARY = 57481
const INTERVAL = 57482
const OUT = 57483
const INOUT = 57484
const BEGIN = 57485
const START = 57486
const TRANSACTION = 57487
const COMMIT = 57488
const ROLLBACK = 57489
const WORK = 57490
const CONSISTENT = 57491
const SNAPSHOT = 57492
const CHAIN = 57493
const NO = 57494
const RELEASE = 57495
const PRIORITY = 57496
const QUICK = 57497
const BIT = 57498
const TINYINT = 57499
const SMALLINT = 57500
const MEDIUMINT = 57501
const INT = 57502
const INTEGER = 57503
const BIGINT = 57504
const INTNUM = 57505
const REAL = 57506
const DOUBLE = 57507
const FLOAT_TYPE = 57508
const DECIMAL = 57509
const NUMERIC = 57510
const DECIMAL_VALUE = 57511
const TIME = 57512
const TIMESTAMP = 57513
const DATETIME = 57514
const YEAR = 57515
const CHAR = 57516
const VARCHAR = 57517
const BOOL = 57518
const CHARACTER = 57519
const VARBINARY = 57520
const NCHAR = 57521
const TEXT = 57522
const TINYTEXT = 57523
const MEDIUMTEXT = 57524
const LONGTEXT = 57525
const BLOB = 57526
const TINYBLOB = 57527
const MEDIUMBLOB = 57528
const LONGBLOB = 57529
const JSON = 57530
const ENUM = 57531
const UUID = 57532
const VECF32 = 57533
const VECF64 = 57534
const GEOMETRY = 57535
const POINT = 57536
const LINESTRING = 57537
const POLYGON = 57538
const GEOMETRYCOLLECTION = 57539
const MULTIPOINT = 57540
const MULTILINESTRING = 57541
const MULTIPOLYGON = 57542
const INT1 = 57543
const INT2 = 57544
const INT3 = 57545
const INT4 = 57546
const INT8 = 57547
const S3OPTION = 57548
const STAGEOPTION = 57549
const SQL_SMALL_RESULT = 57550
const SQL_BIG_RESULT = 57551
const SQL_BUFFER_RESULT = 57552
const LOW_PRIORITY = 57553
const HIGH_PRIORITY = 57554
const DELAYED = 57555
const CREATE = 57556
const ALTER = 57557
const DROP = 57558
const RENAME = 57559
const ANALYZE = 57560
const ADD = 57561
const RETURNS = 57562
const SCHEMA = 57563
const TABLE = 57564
const SEQUENCE = 57565
const INDEX = 57566
const VIEW = 57567
const TO = 57568
const IGNORE = 57569
const IF = 57570
const PRIMARY = 57571
const COLUMN = 57572
const CONSTRAINT = 57573
const SPATIAL = 57574
const FULLTEXT = 57575
const FOREIGN = 57576
const KEY_BLOCK_SIZE = 57577
const SHOW = 57578
const DESCRIBE = 57579
const EXPLAIN = 57580
const DATE = 57581
const ESCAPE = 57582
const REPAIR = 57583
const OPTIMIZE = 57584
const TRUNCATE = 57585
const MAXVALUE = 57586
const PARTITION = 57587
const REORGANIZE = 57588
const LESS = 57589
const THAN = 57590
const PROCEDURE = 57591
const TRIGGER = 57592
const STATUS = 57593
const VARIABLES = 57594
const ROLE = 57595
const PROXY = 57596
const AVG_ROW_LENGTH = 57597
const STORAGE = 57598
const DISK = 57599
const MEMORY = 57600
const CHECKSUM = 57601
const COMPRESSION = 57602
const DATA = 57603
const DIRECTORY = 57604
const DELAY_KEY_WRITE = 57605
const ENCRYPTION = 57606
const ENGINE = 57607
const MAX_ROWS = 57608
const MIN_ROWS = 57609
const PACK_KEYS = 57610
const ROW_FORMAT = 57611
const STATS_AUTO_RECALC = 57612
const STATS_PERSISTENT = 57613
const STATS_SAMPLE_PAGES = 57614
const DYNAMIC = 57615
const COMPRESSED = 57616
const REDUNDANT = 57617
const COMPACT = 57618
const FIXED = 57619
const COLUMN_FORMAT = 57620
const AUTO_RANDOM = 57621
const ENGINE_ATTRIBUTE = 57622
const SECONDARY_ENGINE_ATTRIBUTE = 57623
const INSERT_METHOD = 57624
const RESTRICT = 57625
const CASCADE = 57626
const ACTION = 57627
const PARTIAL = 57628
const SIMPLE = 57629
const CHECK = 57630
const ENFORCED = 57631
const RANGE = 57632
const LIST = 57633
const ALGORITHM = 57634
const LINEAR = 57635
const PARTITIONS = 57636
const SUBPARTITION = 57637
const SUBPARTITIONS = 57638
const CLUSTER = 57639
const TYPE = 57640
const ANY = 57641
const SOME = 57642
const EXTERNAL = 57643
const LOCALFILE = 57644
const URL = 57645
const PREPARE = 57646
const DEALLOCATE = 57647
const RESET = 57648
const EXTENSION = 57649
const INCREMENT = 57650
const CYCLE = 57651
const MINVALUE = 57652
const PUBLICATION = 57653
const SUBSCRIPTIONS = 57654
const PUBLICATIONS = 57655
const PROPERTIES = 57656
const PARSER = 57657
const VISIBLE = 57658
const INVISIBLE = 57659
const BTREE = 57660
const HASH = 57661
const RTREE = 57662
const BSI = 57663
const IVFFLAT = 57664
const MASTER = 57665
const ZONEMAP = 57666
const LEADING = 57667
const BOTH = 57668
const TRAILING = 57669
const UNKNOWN = 57670
const LISTS = 57671
const OP_TYPE = 57672
const REINDEX = 57673
const EXPIRE = 57674
const ACCOUNT = 57675
const ACCOUNTS = 57676
const UNLOCK = 57677
const DAY = 57678
const NEVER = 57679
const PUMP = 57680
const MYSQL_COMPATIBILITY_MODE = 57681
const UNIQUE_CHECK_ON_AUTOINCR = 57682
const MODIFY = 57683
const CHANGE = 57684
const SECOND = 57685
const ASCII = 57686
const COALESCE = 57687
const COLLATION = 57688
const HOUR = 57689
const MICROSECOND = 57690
const MINUTE = 57691
const MONTH = 57692
const QUARTER = 57693
const REPEAT = 57694
const REVERSE = 57695
const ROW_COUNT = 57696
const WEEK = 57697
const REVOKE = 57698
const FUNCTION = 57699
const PRIVILEGES = 57700
const TABLESPACE = 57701
const EXECUTE = 57702
const SUPER = 57703
const GRANT = 57704
const OPTION = 57705
const REFERENCES = 57706
const REPLICATION = 57707
const SLAVE = 57708
const CLIENT = 57709
const USAGE = 57710
const RELOAD = 57711
const FILE = 57712
const TEMPORARY = 57713
const ROUTINE = 57714
const EVENT = 57715
const SHUTDOWN = 57716
const NULLX = 57717
const AUTO_INCREMENT = 57718
const APPROXNUM = 57719
const SIGNED = 57720
const UNSIGNED = 57721
const ZEROFILL = 57722
const ENGINES = 57723
const LOW_CARDINALITY = 57724
const AUTOEXTEND_SIZE = 57725
const ADMIN_NAME = 57726
const RANDOM = 57727
const SUSPEND = 57728
const ATTRIBUTE = 57729
const HISTORY = 57730
const REUSE = 57731
const CURRENT = 57732
const OPTIONAL = 57733
const FAILED_LOGIN_ATTEMPTS = 57734
const PASSWORD_LOCK_TIME = 57735
const UNBOUNDED = 57736
const SECONDARY = 57737
const RESTRICTED = 57738
const USER = 57739
const IDENTIFIED = 57740
const CIPHER = 57741
const ISSUER = 57742
const X509 = 57743
const SUBJECT = 57744
const SAN = 57745
const REQUIRE = 57746
const SSL = 57747
const NONE = 57748
const PASSWORD = 57749
const SHARED = 57750
const EXCLUSIVE = 57751
const MAX_QUERIES_PER_HOUR = 57752
const MAX_UPDATES_PER_HOUR = 57753
const MAX_CONNECTIONS_PER_HOUR = 57754
const MAX_USER_CONNECTIONS = 57755
const FORMAT = 57756
const VERBOSE = 57757
const CONNECTION = 57758
const TRIGGERS = 57759
const PROFILES = 57760
const LOAD = 57761
const INLINE = 57762
const INFILE = 57763
const TERMINATED = 57764
const OPTIONALLY = 57765
const ENCLOSED = 57766
const ESCAPED = 57767
const STARTING = 57768
const LINES = 57769
const ROWS = 57770
const IMPORT = 57771
const DISCARD = 57772
const JSONTYPE = 57773
const MODUMP = 57774
const OVER = 57775
const PRECEDING = 57776
const FOLLOWING = 57777
const GROUPS = 57778
const DATABASES = 57779
const TABLES = 57780
const SEQUENCES = 57781
const EXTENDED = 57782
const FULL = 57783
const PROCESSLIST = 57784
const FIELDS = 57785
const COLUMNS = 57786
const OPEN = 57787
const ERRORS = 57788
const WARNINGS = 57789
const INDEXES = 57790
const SCHEMAS = 57791
const NODE = 57792
const LOCKS = 57793
const ROLES = 57794
const TABLE_NUMBER = 57795
const COLUMN_NUMBER = 57796
const TABLE_VALUES = 57797
const TABLE_SIZE = 57798
const NAMES = 57799
const GLOBAL = 57800
const PERSIST = 57801
const SESSION = 57802
const ISOLATION = 57803
const LEVEL = 57804
const READ = 57805
const WRITE = 57806
const ONLY = 57807
const REPEATABLE = 57808
const COMMITTED = 57809
const UNCOMMITTED = 57810
const SERIALIZABLE = 57811
const LOCAL = 57812
const EVENTS = 57813
const PLUGINS = 57814
const CURRENT_TIMESTAMP = 57815
const DATABASE = 57816
const CURRENT_TIME = 57817
const LOCALTIME = 57818
const LOCALTIMESTAMP = 57819
const UTC_DATE = 57820
const UTC_TIME = 57821
const UTC_TIMESTAMP = 57822
const REPLACE = 57823
const CONVERT = 57824
const SEPARATOR = 57825
const TIMESTAMPDIFF = 57826
const CURRENT_DATE = 57827
const CURRENT_USER = 57828
const CURRENT_ROLE = 57829
const SECOND_MICROSECOND = 57830
const MINUTE_MICROSECOND = 57831
const MINUTE_SECOND = 57832
const HOUR_MICROSECOND = 57833
const HOUR_SECOND = 57834
const HOUR_MINUTE = 57835
const DAY_MICROSECOND = 57836
const DAY_SECOND = 57837
const DAY_MINUTE = 57838
const DAY_HOUR = 57839
const YEAR_MONTH = 57840
const SQL_TSI_HOUR = 57841
const SQL_TSI_DAY = 57842
const SQL_TSI_WEEK = 57843
const SQL_TSI_MONTH = 57844
const SQL_TSI_QUARTER = 57845
const SQL_TSI_YEAR = 57846
const SQL_TSI_SECOND = 57847
const SQL_TSI_MINUTE = 57848
const RECURSIVE = 57849
const CONFIG = 57850
const DRAINER = 57851
const SOURCE = 57852
const STREAM = 57853
const HEADERS = 57854
const CONNECTOR = 57855
const CONNECTORS = 57856
const DAEMON = 57857
const PAUSE = 57858
const CANCEL = 57859
const TASK = 57860
const RESUME = 57861
const MATCH = 57862
const AGAINST = 57863
const BOOLEAN = 57864
const LANGUAGE = 57865
const WITH = 57866
const QUERY = 57867
const EXPANSION = 57868
const WITHOUT = 57869
const VALIDATION = 57870
const UPGRADE = 57871
const RETRY = 57872
const ADDDATE = 57873
const BIT_AND = 57874
const BIT_OR = 57875
const BIT_XOR = 57876
const CAST = 57877
const COUNT = 57878
const APPROX_COUNT = 57879
const APPROX_COUNT_DISTINCT = 57880
const SERIAL_EXTRACT = 57881
const APPROX_PERCENTILE = 57882
const CURDATE = 57883
const CURTIME = 57884
const DATE_ADD = 57885
const DATE_SUB = 57886
const EXTRACT = 57887
const GROUP_CONCAT = 57888
const MAX = 57889
const MID = 57890
const MIN = 57891
const NOW = 57892
const POSITION = 57893
const SESSION_USER = 57894
const STD = 57895
const STDDEV = 57896
const MEDIAN = 57897
const CLUSTER_CENTERS = 57898
const KMEANS = 57899
const STDDEV_POP = 57900
const STDDEV_SAMP = 57901
const SUBDATE = 57902
const SUBSTR = 57903
const SUBSTRING = 57904
const SUM = 57905
const SYSDATE = 57906
const SYSTEM_USER = 57907
const TRANSLATE = 57908
const TRIM = 57909
const VARIANCE = 57910
const VAR_POP = 57911
const VAR_SAMP = 57912
const AVG = 57913
const RANK = 57914
const ROW_NUMBER = 57915
const DENSE_RANK = 57916
const BIT_CAST = 57917
const BITMAP_BIT_POSITION = 57918
const BITMAP_BUCKET_NUMBER = 57919
const BITMAP_COUNT = 57920
const BITMAP_CONSTRUCT_AGG = 57921
const BITMAP_OR_AGG = 57922
const NEXTVAL = 57923
const SETVAL = 57924
const CURRVAL = 57925
const LASTVAL = 57926
const ARROW = 57927
const ROW = 57928
const OUTFILE = 57929
const HEADER = 57930
const MAX_FILE_SIZE = 57931
const FORCE_QUOTE = 57932
const PARALLEL = 57933
const STRICT = 57934
const UNUSED = 57935
const BINDINGS = 57936
const DO = 57937
const DECLARE = 57938
const LOOP = 57939
const WHILE = 57940
const LEAVE = 57941
const ITERATE = 57942
const UNTIL = 57943
const CALL = 57944
const PREV = 57945
const SLIDING = 57946
const FILL = 57947
const SPBEGIN = 57948
const BACKEND = 57949
const SERVERS = 57950
const HANDLER = 57951
const PERCENT = 57952
const SAMPLE = 57953
const MO_TS = 57954
const PITR = 57955
const KILL = 57956
const BACKUP = 57957
const FILESYSTEM = 57958
const PARALLELISM = 57959
const RESTORE = 57960
const QUERY_RESULT = 57961

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"CROSS_L2",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"SNAPSHOTS",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"UNIQUE_CHECK_ON_AUTOINCR",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UPGRADE",
	"RETRY",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"BITMAP_BIT_POSITION",
	"BITMAP_BUCKET_NUMBER",
	"BITMAP_COUNT",
	"BITMAP_CONSTRUCT_AGG",
	"BITMAP_OR_AGG",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"STRICT",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"MO_TS",
	"PITR",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"RESTORE",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:12263

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 127,
	11, 754,
	22, 754,
	-2, 747,
	-1, 148,
	239, 1158,
	241, 1057,
	-2, 1104,
	-1, 174,
	43, 578,
	241, 578,
	268, 585,
	269, 585,
	465, 578,
	-2, 613,
	-1, 215,
	640, 1915,
	-2, 489,
	-1, 517,
	640, 2035,
	-2, 375,
	-1, 575,
	640, 2094,
	-2, 373,
	-1, 576,
	640, 2095,
	-2, 374,
	-1, 577,
	640, 2096,
	-2, 376,
	-1, 710,
	320, 161,
	437, 161,
	438, 161,
	-2, 1820,
	-1, 776,
	83, 1607,
	-2, 1971,
	-1, 777,
	83, 1625,
	-2, 1942,
	-1, 781,
	83, 1626,
	-2, 1970,
	-1, 814,
	83, 1534,
	-2, 2168,
	-1, 815,
	83, 1535,
	-2, 2167,
	-1, 816,
	83, 1536,
	-2, 2157,
	-1, 817,
	83, 2129,
	-2, 2150,
	-1, 818,
	83, 2130,
	-2, 2151,
	-1, 819,
	83, 2131,
	-2, 2159,
	-1, 820,
	83, 2132,
	-2, 2139,
	-1, 821,
	83, 2133,
	-2, 2148,
	-1, 822,
	83, 2134,
	-2, 2160,
	-1, 823,
	83, 2135,
	-2, 2161,
	-1, 824,
	83, 2136,
	-2, 2166,
	-1, 825,
	83, 2137,
	-2, 2171,
	-1, 826,
	83, 2138,
	-2, 2172,
	-1, 827,
	83, 1603,
	-2, 2009,
	-1, 828,
	83, 1604,
	-2, 1804,
	-1, 829,
	83, 1605,
	-2, 2018,
	-1, 830,
	83, 1606,
	-2, 1813,
	-1, 832,
	83, 1609,
	-2, 1821,
	-1, 833,
	83, 1610,
	-2, 2042,
	-1, 835,
	83, 1613,
	-2, 1840,
	-1, 837,
	83, 1615,
	-2, 2054,
	-1, 838,
	83, 1616,
	-2, 2053,
	-1, 839,
	83, 1617,
	-2, 1884,
	-1, 840,
	83, 1618,
	-2, 1966,
	-1, 843,
	83, 1621,
	-2, 2065,
	-1, 845,
	83, 1623,
	-2, 2068,
	-1, 846,
	83, 1624,
	-2, 2070,
	-1, 847,
	83, 1627,
	-2, 2078,
	-1, 848,
	83, 1628,
	-2, 1951,
	-1, 849,
	83, 1629,
	-2, 1996,
	-1, 850,
	83, 1630,
	-2, 1961,
	-1, 851,
	83, 1631,
	-2, 1986,
	-1, 862,
	83, 1512,
	-2, 2162,
	-1, 863,
	83, 1513,
	-2, 2163,
	-1, 864,
	83, 1514,
	-2, 2164,
	-1, 957,
	460, 613,
	461, 613,
	-2, 579,
	-1, 1005,
	125, 1804,
	136, 1804,
	156, 1804,
	-2, 1778,
	-1, 1122,
	22, 781,
	-2, 730,
	-1, 1228,
	11, 754,
	22, 754,
	-2, 1392,
	-1, 1310,
	22, 781,
	-2, 730,
	-1, 1645,
	83, 1678,
	-2, 1968,
	-1, 1646,
	83, 1679,
	-2, 1969,
	-1, 1807,
	84, 933,
	-2, 939,
	-1, 2247,
	108, 1096,
	152, 1096,
	191, 1096,
	194, 1096,
	281, 1096,
	-2, 1089,
	-1, 2399,
	11, 754,
	22, 754,
	-2, 875,
	-1, 2431,
	84, 1764,
	157, 1764,
	-2, 1953,
	-1, 2432,
	84, 1764,
	157, 1764,
	-2, 1952,
	-1, 2433,
	84, 1740,
	157, 1740,
	-2, 1939,
	-1, 2434,
	84, 1741,
	157, 1741,
	-2, 1944,
	-1, 2435,
	84, 1742,
	157, 1742,
	-2, 1872,
	-1, 2436,
	84, 1743,
	157, 1743,
	-2, 1866,
	-1, 2437,
	84, 1744,
	157, 1744,
	-2, 1794,
	-1, 2438,
	84, 1745,
	157, 1745,
	-2, 1941,
	-1, 2439,
	84, 1746,
	157, 1746,
	-2, 1870,
	-1, 2440,
	84, 1747,
	157, 1747,
	-2, 1865,
	-1, 2441,
	84, 1748,
	157, 1748,
	-2, 1854,
	-1, 2442,
	84, 1764,
	157, 1764,
	-2, 1855,
	-1, 2443,
	84, 1764,
	157, 1764,
	-2, 1856,
	-1, 2445,
	84, 1753,
	157, 1753,
	-2, 1986,
	-1, 2446,
	84, 1731,
	157, 1731,
	-2, 1971,
	-1, 2447,
	84, 1762,
	157, 1762,
	-2, 1942,
	-1, 2448,
	84, 1762,
	157, 1762,
	-2, 1970,
	-1, 2449,
	84, 1762,
	157, 1762,
	-2, 1822,
	-1, 2450,
	84, 1760,
	157, 1760,
	-2, 1961,
	-1, 2451,
	84, 1757,
	157, 1757,
	-2, 1845,
	-1, 2452,
	83, 1712,
	84, 1712,
	157, 1712,
	395, 1712,
	396, 1712,
	397, 1712,
	-2, 1793,
	-1, 2453,
	83, 1713,
	84, 1713,
	157, 1713,
	395, 1713,
	396, 1713,
	397, 1713,
	-2, 1795,
	-1, 2454,
	83, 1714,
	84, 1714,
	157, 1714,
	395, 1714,
	396, 1714,
	397, 1714,
	-2, 2014,
	-1, 2455,
	83, 1716,
	84, 1716,
	157, 1716,
	395, 1716,
	396, 1716,
	397, 1716,
	-2, 1943,
	-1, 2456,
	83, 1718,
	84, 1718,
	157, 1718,
	395, 1718,
	396, 1718,
	397, 1718,
	-2, 1924,
	-1, 2457,
	83, 1720,
	84, 1720,
	157, 1720,
	395, 1720,
	396, 1720,
	397, 1720,
	-2, 1871,
	-1, 2458,
	83, 1722,
	84, 1722,
	157, 1722,
	395, 1722,
	396, 1722,
	397, 1722,
	-2, 1850,
	-1, 2459,
	83, 1723,
	84, 1723,
	157, 1723,
	395, 1723,
	396, 1723,
	397, 1723,
	-2, 1851,
	-1, 2460,
	83, 1725,
	84, 1725,
	157, 1725,
	395, 1725,
	396, 1725,
	397, 1725,
	-2, 1792,
	-1, 2461,
	84, 1767,
	157, 1767,
	395, 1767,
	396, 1767,
	397, 1767,
	-2, 1827,
	-1, 2462,
	84, 1767,
	157, 1767,
	395, 1767,
	396, 1767,
	397, 1767,
	-2, 1841,
	-1, 2463,
	84, 1770,
	157, 1770,
	395, 1770,
	396, 1770,
	397, 1770,
	-2, 1823,
	-1, 2464,
	84, 1770,
	157, 1770,
	395, 1770,
	396, 1770,
	397, 1770,
	-2, 1887,
	-1, 2465,
	84, 1767,
	157, 1767,
	395, 1767,
	396, 1767,
	397, 1767,
	-2, 1908,
	-1, 2675,
	108, 1096,
	152, 1096,
	191, 1096,
	194, 1096,
	281, 1096,
	-2, 1090,
	-1, 2693,
	81, 674,
	157, 674,
	-2, 1273,
	-1, 3103,
	194, 1096,
	305, 1360,
	-2, 1332,
	-1, 3276,
	108, 1096,
	152, 1096,
	191, 1096,
	194, 1096,
	-2, 1214,
	-1, 3278,
	108, 1096,
	152, 1096,
	191, 1096,
	194, 1096,
	-2, 1214,
	-1, 3290,
	81, 674,
	157, 674,
	-2, 1273,
	-1, 3311,
	194, 1096,
	305, 1360,
	-2, 1333,
	-1, 3456,
	108, 1096,
	152, 1096,
	191, 1096,
	194, 1096,
	-2, 1215,
	-1, 3482,
	84, 1176,
	157, 1176,
	-2, 1096,
	-1, 3617,
	84, 1176,
	157, 1176,
	-2, 1096,
	-1, 3771,
	84, 1180,
	157, 1180,
	-2, 1096,
	-1, 3819,
	84, 1181,
	157, 1181,
	-2, 1096,
}

const yyPrivate = 57344

const yyLast = 48978

var yyAct = [...]int{
	743, 720, 3865, 745, 3839, 2722, 204, 3858, 1892, 3775,
	1625, 3296, 3390, 3781, 3122, 3617, 3782, 3675, 3774, 3701,
	3089, 3657, 729, 3193, 3732, 3595, 3510, 3325, 3651, 2716,
	3194, 722, 1263, 3679, 3441, 3616, 2520, 3443, 3444, 3538,
	773, 1399, 2719, 611, 1123, 2634, 3385, 1004, 3586, 3658,
	3394, 1540, 3660, 1840, 3263, 1405, 629, 3098, 635, 635,
	1672, 3463, 61, 3453, 635, 652, 661, 3312, 2696, 661,
	1628, 2294, 1117, 3060, 3279, 3191, 3425, 3458, 3021, 2831,
	2832, 1984, 3049, 1621, 3251, 1462, 2429, 2830, 1981, 37,
	2812, 3118, 2746, 3107, 3149, 3281, 3100, 2393, 3233, 2894,
	2555, 1949, 3179, 2427, 2854, 673, 1686, 2097, 2297, 189,
	2055, 3159, 2827, 1852, 669, 1455, 3032, 2664, 1999, 3028,
	3106, 3026, 3024, 3022, 712, 3023, 2725, 3069, 2258, 3019,
	1113, 2676, 2998, 2206, 2376, 2093, 2080, 2225, 2941, 126,
	717, 2205, 2499, 2063, 1778, 2867, 2056, 2877, 2481, 1544,
	1977, 931, 2064, 2028, 658, 2394, 1952, 2092, 2647, 1541,
	2652, 2381, 1369, 1536, 2748, 1871, 2727, 2295, 1882, 2688,
	200, 8, 1816, 2257, 36, 199, 7, 1950, 611, 6,
	2127, 2247, 1062, 2094, 2425, 628, 1375, 1619, 718, 1503,
	1441, 2290, 1851, 711, 1388, 2237, 2588, 1529, 721, 1471,
	1551, 1572, 1679, 2104, 204, 1659, 204, 1610, 1053, 1054,
	2062, 1555, 27, 2059, 1136, 635, 2044, 1510, 2018, 719,
	1440, 1812, 966, 666, 730, 15, 997, 1618, 2401, 1815,
	644, 16, 1384, 930, 1494, 1409, 1438, 866, 14, 1624,
	33, 23, 1687, 190, 1013, 1502, 103, 1408, 24, 17,
	10, 1400, 913, 907, 660, 647, 675, 676, 180, 186,
	952, 2327, 928, 1264, 1308, 672, 1032, 2101, 868, 921,
	1050, 922, 1196, 1197, 1198, 1195, 3580, 657, 869, 1196,
	1197, 1198, 1195, 1196, 1197, 1198, 1195, 2623, 2623, 2911,
	656, 2623, 2403, 2910, 3266, 3293, 653, 3076, 1118, 1552,
	2111, 3186, 1119, 655, 2543, 654, 2484, 998, 902, 2487,
	1791, 2485, 2587, 1049, 2482, 1051, 1517, 1513, 1045, 1046,
	640, 1010, 916, 664, 912, 1046, 188, 630, 2204, 631,
	1327, 1564, 1371, 3007, 2212, 1046, 1330, 1337, 1033, 2993,
	2990, 986, 2991, 2988, 3850, 2615, 2613, 1422, 1785, 1323,
	610, 3383, 1563, 1515, 2890, 2888, 1012, 2033, 3646, 8,
	3545, 3539, 3386, 3192, 7, 1118, 2077, 3662, 1044, 1196,
	1197, 1198, 1195, 2058, 1258, 867, 1196, 1197, 1198, 1195,
	893, 2968, 2050, 3756, 2335, 3426, 187, 2617, 636, 3280,
	1158, 878, 3602, 1332, 2529, 3430, 2249, 2098, 1550, 187,
	2537, 187, 57, 176, 149, 3568, 3712, 1481, 1480, 1027,
	1022, 1017, 1021, 1025, 187, 57, 176, 149, 1479, 1016,
	187, 1014, 1015, 1344, 713, 2966, 187, 187, 57, 176,
	149, 187, 57, 176, 149, 671, 3603, 1030, 2109, 187,
	1361, 1020, 2242, 2248, 1559, 187, 187, 2913, 2825, 1008,
	187, 918, 1793, 911, 1333, 3570, 181, 2419, 883, 1009,
	1193, 2682, 915, 914, 1570, 2860, 2636, 1994, 125, 181,
	1721, 181, 2861, 2862, 1556, 1962, 1963, 1593, 1581, 896,
	1798, 1799, 2420, 903, 181, 981, 979, 1442, 980, 1444,
	181, 1134, 1028, 2902, 1567, 1131, 1558, 181, 125, 1031,
	879, 181, 2637, 910, 1961, 187, 57, 176, 149, 2680,
	2500, 187, 57, 176, 149, 181, 1569, 713, 1396, 975,
	181, 1018, 920, 177, 2992, 2989, 2407, 909, 1866, 2406,
	169, 908, 2408, 1418, 178, 1166, 1419, 895, 1168, 1627,
	1611, 901, 3753, 1615, 857, 1029, 856, 858, 859, 1186,
	860, 861, 2649, 125, 1191, 1343, 1007, 1173, 1006, 2683,
	1174, 3093, 2650, 899, 3665, 1404, 1169, 1614, 113, 1403,
	1406, 1407, 3091, 3664, 987, 181, 1406, 1407, 3785, 3786,
	3407, 181, 1631, 3665, 3745, 1019, 3664, 3744, 1176, 3663,
	3743, 3663, 3749, 2618, 2193, 3806, 983, 3649, 1516, 1514,
	2895, 919, 3843, 3844, 3652, 3653, 3654, 3655, 3195, 3734,
	2524, 2648, 3734, 2896, 3737, 2897, 3542, 3195, 1128, 148,
	1602, 185, 1421, 3758, 3759, 1972, 1139, 900, 2113, 2767,
	1978, 3672, 3208, 635, 635, 3252, 3754, 3755, 2105, 3043,
	2931, 174, 1139, 2638, 635, 1127, 1162, 3033, 3435, 1968,
	2655, 1616, 131, 132, 1606, 133, 134, 3259, 3572, 3573,
	985, 2369, 1026, 661, 661, 2236, 635, 2041, 1171, 1523,
	1522, 2639, 1164, 919, 1161, 1613, 3337, 2534, 3041, 707,
	1189, 1190, 709, 3751, 1167, 1170, 2929, 708, 1188, 173,
	2333, 3384, 2110, 2889, 2241, 2817, 1056, 2371, 1023, 1630,
	1629, 1024, 2372, 2373, 917, 3577, 2616, 3432, 1345, 3746,
	1163, 3563, 2632, 1013, 3237, 1432, 1394, 2377, 3406, 1992,
	1993, 3037, 2088, 148, 175, 185, 3408, 111, 1183, 1236,
	627, 3352, 1172, 3784, 3038, 3039, 3121, 984, 658, 658,
	1326, 3814, 3095, 906, 3058, 174, 168, 167, 2633, 3557,
	3040, 3558, 63, 2313, 3557, 881, 3558, 3694, 3579, 2293,
	2316, 1184, 1185, 3119, 3120, 3070, 3607, 1120, 3689, 3211,
	2935, 1126, 3552, 2622, 2099, 1127, 1153, 1119, 2099, 1119,
	1119, 2099, 2689, 663, 662, 1420, 1013, 1165, 2823, 2244,
	1010, 882, 1612, 1565, 2116, 2118, 2119, 3342, 2999, 3680,
	2912, 1034, 3349, 3696, 3599, 3560, 1267, 2909, 3297, 1175,
	3560, 2132, 3702, 170, 171, 172, 1046, 2315, 1637, 1640,
	1641, 2100, 1141, 1140, 1046, 1012, 1046, 3090, 1046, 1638,
	2721, 3757, 1046, 1046, 3601, 3035, 3559, 659, 1141, 1140,
	3304, 3559, 2221, 894, 179, 1383, 1133, 1119, 3353, 2112,
	659, 3567, 2717, 2718, 659, 2721, 3242, 921, 3671, 922,
	2314, 657, 657, 1010, 3124, 121, 3010, 3244, 2367, 173,
	2483, 122, 3501, 3876, 656, 656, 982, 1518, 2345, 670,
	653, 653, 3571, 1329, 3861, 1331, 2661, 655, 655, 654,
	654, 2344, 3397, 1142, 867, 1451, 1341, 629, 1012, 58,
	1450, 1268, 1144, 2614, 1130, 1132, 1122, 1151, 2422, 1121,
	1306, 1381, 58, 1311, 150, 3431, 58, 1146, 1147, 1009,
	2538, 182, 183, 3608, 184, 1150, 1794, 150, 123, 150,
	931, 1380, 884, 1379, 659, 3243, 1152, 2796, 1406, 1407,
	1395, 56, 150, 3703, 1232, 1233, 1234, 1235, 150, 1406,
	1407, 3044, 3621, 2932, 150, 150, 1237, 3282, 3034, 150,
	2654, 3600, 1115, 3496, 3490, 1979, 2300, 150, 3096, 2365,
	2366, 3574, 3587, 150, 150, 1398, 1397, 976, 150, 3099,
	1114, 1178, 635, 2987, 1179, 1434, 2336, 2310, 1227, 3381,
	58, 611, 611, 1402, 2293, 3198, 58, 3773, 1338, 671,
	611, 611, 3731, 3750, 1466, 1466, 1439, 635, 3667, 2856,
	2858, 2768, 1181, 2769, 2770, 3436, 1971, 2658, 2659, 3416,
	1158, 3056, 3862, 1230, 714, 182, 183, 3115, 184, 661,
	1495, 629, 2657, 150, 3036, 2117, 1506, 1506, 54, 150,
	1969, 3003, 2563, 1346, 3245, 1607, 2530, 204, 2411, 1279,
	1280, 2872, 2873, 1473, 2331, 3123, 611, 3553, 2102, 1639,
	978, 3659, 3553, 977, 1353, 2934, 3554, 2303, 1359, 1358,
	1105, 1101, 1102, 1103, 1104, 2626, 2568, 1357, 2567, 2566,
	2564, 3620, 1342, 1356, 665, 2114, 2115, 1464, 1464, 3503,
	1468, 1796, 1177, 2128, 3119, 3120, 2765, 3234, 1433, 925,
	926, 927, 3116, 2299, 124, 42, 1157, 1548, 2301, 923,
	920, 55, 1553, 1524, 1366, 5, 2630, 1460, 1461, 1562,
	1586, 1587, 1377, 128, 129, 2220, 2215, 130, 976, 1312,
	1336, 1182, 1801, 1310, 2668, 2671, 2672, 2673, 2669, 2670,
	1390, 1391, 2943, 2942, 1591, 2565, 1802, 976, 2217, 2216,
	3057, 1347, 3417, 3859, 3860, 3004, 1180, 2214, 1466, 2209,
	1466, 1127, 2302, 1792, 2300, 2303, 1571, 3511, 3512, 3513,
	3517, 3515, 3516, 3514, 1800, 3772, 1013, 2857, 885, 1385,
	1389, 1389, 1389, 1013, 1334, 1335, 2797, 2799, 2800, 2801,
	2798, 2330, 1368, 2357, 886, 2309, 3497, 3498, 2304, 2307,
	889, 1423, 1424, 1557, 1385, 1385, 2787, 2788, 3464, 3877,
	1568, 978, 1590, 3492, 977, 1410, 1496, 3491, 1413, 3741,
	1589, 1194, 3156, 658, 3199, 1158, 1047, 1048, 1466, 2228,
	978, 1052, 1339, 977, 3075, 1601, 3872, 1348, 1349, 1350,
	1351, 1352, 3867, 1354, 2273, 1685, 1561, 1538, 1539, 1360,
	1449, 888, 2229, 2230, 1546, 891, 890, 2502, 3152, 1734,
	3248, 1527, 1543, 1530, 1531, 1547, 1374, 2162, 3856, 1474,
	2161, 1124, 640, 1382, 1532, 1533, 1487, 1037, 1042, 1043,
	1392, 2694, 1507, 1493, 2569, 2570, 988, 1626, 1411, 1412,
	1508, 1414, 1415, 3210, 1416, 1623, 2304, 2627, 1446, 1448,
	2198, 2299, 2293, 2298, 3117, 2296, 2301, 1458, 1459, 2107,
	2695, 1673, 2529, 1797, 3821, 3868, 3128, 2288, 3258, 3126,
	1196, 1197, 1198, 1195, 2997, 1127, 2995, 2392, 2391, 2875,
	2786, 1795, 1196, 1197, 1198, 1195, 1124, 1376, 1803, 3793,
	1805, 3822, 1642, 1194, 1495, 3787, 657, 1604, 1776, 1813,
	1466, 1818, 1819, 2641, 1821, 1434, 635, 1719, 1599, 656,
	2302, 635, 3769, 1519, 1466, 653, 2964, 3722, 931, 3697,
	2239, 1841, 655, 1579, 654, 1574, 1582, 1596, 2272, 1466,
	1196, 1197, 1198, 1195, 1595, 1434, 3685, 3822, 3640, 1580,
	652, 1779, 1600, 1376, 1598, 1597, 1594, 1620, 1647, 1648,
	1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658,
	1865, 1733, 3794, 1617, 1670, 1671, 1622, 1194, 3583, 1872,
	1872, 2695, 1434, 2619, 1434, 1434, 2138, 2021, 635, 635,
	3639, 1939, 1813, 1943, 2141, 3770, 1466, 1946, 1947, 1959,
	3583, 3634, 2107, 1668, 1669, 3633, 1661, 2519, 3632, 1716,
	1717, 1787, 1720, 611, 2392, 1466, 3631, 3611, 1820, 3686,
	1735, 3641, 1743, 3610, 1196, 1197, 1198, 1195, 1822, 1869,
	1039, 1040, 1041, 1742, 3582, 1744, 2392, 1745, 1746, 1747,
	2507, 2422, 1307, 635, 1813, 1466, 2238, 2004, 1608, 635,
	635, 635, 669, 669, 871, 872, 873, 874, 2098, 2014,
	2015, 2016, 2017, 2262, 1960, 2286, 2023, 1894, 2300, 2303,
	2140, 3358, 1782, 204, 3583, 1995, 204, 204, 3583, 204,
	1941, 3583, 2203, 3306, 1748, 871, 872, 873, 874, 3583,
	2107, 3272, 3156, 2197, 2196, 1875, 2107, 1609, 2169, 2089,
	1990, 3226, 1367, 1676, 1452, 1777, 3222, 3583, 3884, 1987,
	1988, 3869, 3293, 1724, 1725, 1726, 2879, 1973, 1842, 1734,
	1734, 2066, 1965, 1783, 1967, 1156, 1740, 2019, 2697, 1741,
	1734, 1734, 1477, 2532, 1985, 1986, 2531, 2082, 1808, 1857,
	1155, 3136, 2851, 2594, 2422, 1873, 1754, 1755, 1858, 1817,
	1980, 2003, 1843, 1844, 2523, 1864, 3307, 2586, 1867, 1868,
	1863, 1838, 1837, 1833, 3273, 1775, 1841, 2006, 2007, 2008,
	1466, 2096, 1848, 2076, 3227, 1385, 1876, 1877, 1846, 3223,
	1854, 1013, 2032, 2280, 1013, 2035, 2036, 2545, 2038, 1389,
	2527, 2157, 1013, 2515, 2509, 2068, 1853, 2504, 1855, 1856,
	2304, 1389, 2142, 876, 2496, 2299, 2293, 2298, 2494, 2296,
	2301, 1557, 1862, 1940, 3137, 2392, 1194, 1156, 2087, 2090,
	2026, 2492, 2490, 2261, 2199, 1945, 1964, 1948, 1966, 2176,
	1194, 2012, 2175, 658, 876, 1817, 2160, 1158, 2072, 1974,
	1576, 1244, 1809, 1810, 1811, 1143, 1212, 1213, 1214, 1215,
	1216, 1217, 1218, 1211, 1824, 1825, 1826, 1827, 1010, 3527,
	1194, 2151, 2150, 2262, 2302, 2001, 2505, 2510, 1111, 1010,
	2505, 2061, 2002, 1849, 1850, 2009, 2010, 2497, 2149, 2106,
	3356, 2495, 2061, 1106, 1620, 1013, 2027, 2029, 1583, 3878,
	1859, 1860, 1211, 1012, 2491, 2491, 2262, 2198, 1227, 1989,
	1199, 3080, 1194, 2926, 1012, 1194, 1723, 1722, 1229, 1194,
	1870, 3071, 2046, 1749, 1750, 1751, 1752, 1239, 1874, 1756,
	1757, 1758, 1759, 1761, 1762, 1763, 1764, 1765, 1766, 1767,
	1768, 1769, 1770, 2067, 1194, 1194, 2078, 1723, 1722, 1454,
	3847, 2075, 1247, 2073, 1214, 1215, 1216, 1217, 1218, 1211,
	3690, 1194, 2107, 2208, 1456, 2210, 657, 3465, 2213, 2086,
	1372, 1584, 1010, 887, 1373, 1457, 2328, 712, 3285, 656,
	635, 635, 635, 1386, 3581, 653, 2091, 3549, 3494, 3493,
	3283, 3479, 655, 2084, 654, 635, 635, 635, 635, 3072,
	746, 756, 3437, 3265, 3691, 3157, 1417, 1012, 2259, 2085,
	747, 3466, 748, 752, 755, 751, 749, 750, 2265, 1434,
	2129, 3148, 3286, 3142, 1667, 2125, 2126, 3138, 1760, 1427,
	1428, 3615, 1430, 1431, 3284, 1435, 1436, 1437, 2120, 2122,
	1664, 1666, 1663, 3073, 1665, 1434, 1196, 1197, 1198, 1195,
	1453, 2134, 3051, 2820, 2123, 2124, 2819, 3187, 1661, 1753,
	2482, 2666, 2322, 2624, 2542, 753, 2508, 1482, 1483, 1484,
	1485, 1486, 3184, 1488, 1489, 1490, 1491, 1492, 2413, 2071,
	2070, 1498, 1499, 1500, 1501, 1210, 1209, 1219, 1220, 1212,
	1213, 1214, 1215, 1216, 1217, 1218, 1211, 754, 2069, 2030,
	1363, 1387, 1362, 758, 127, 1129, 2552, 1372, 892, 127,
	2277, 1373, 2329, 2476, 2279, 1680, 2281, 1202, 1203, 1204,
	1205, 1206, 1207, 1208, 1200, 2396, 2396, 1959, 2396, 1680,
	2881, 2135, 2121, 1196, 1197, 1198, 1195, 3742, 2192, 2194,
	2195, 1198, 1195, 1511, 2486, 2030, 611, 611, 1196, 1197,
	1198, 1195, 3875, 1804, 1127, 2200, 1195, 3185, 2282, 3506,
	1466, 635, 3505, 2898, 2757, 641, 2755, 2733, 127, 2731,
	2222, 1196, 1197, 1198, 1195, 3485, 635, 2607, 2292, 2608,
	2554, 2291, 1127, 2466, 629, 1267, 3438, 3439, 3852, 1013,
	1506, 2240, 1959, 1738, 3851, 2471, 1246, 2473, 3433, 3256,
	2957, 204, 1196, 1197, 1198, 1195, 2267, 2268, 1739, 1245,
	1511, 2266, 2285, 3797, 2808, 3874, 2270, 2271, 3768, 2170,
	2171, 2578, 2173, 2398, 2409, 2402, 2410, 2945, 2400, 2180,
	1505, 1505, 3767, 3692, 2278, 2635, 3636, 1196, 1197, 1198,
	1195, 2512, 2806, 2417, 2414, 2415, 2478, 3624, 2305, 2306,
	3614, 2311, 1196, 1197, 1198, 1195, 3434, 3257, 2525, 3604,
	2956, 1512, 2096, 3540, 3468, 3467, 1010, 3298, 3287, 1466,
	3255, 1466, 2807, 1466, 2804, 1389, 2269, 3042, 1127, 2922,
	1268, 2275, 2893, 2793, 2276, 1011, 2544, 1196, 1197, 1198,
	1195, 2665, 127, 2470, 2424, 3778, 2892, 2521, 2522, 2791,
	2805, 1012, 2790, 1196, 1197, 1198, 1195, 127, 2430, 127,
	2477, 2374, 1466, 2572, 2789, 1196, 1197, 1198, 1195, 2781,
	2775, 2404, 1196, 1197, 1198, 1195, 2145, 2774, 2579, 2773,
	2772, 2334, 2803, 1466, 2337, 2338, 2339, 2340, 2341, 2342,
	2343, 2792, 2620, 2346, 2347, 2348, 2349, 2350, 2351, 2352,
	2353, 2354, 2355, 2356, 2535, 2358, 2359, 2360, 2361, 2362,
	2418, 2363, 2498, 2202, 2049, 2274, 2048, 2421, 2047, 2467,
	1957, 1196, 1197, 1198, 1195, 2468, 2153, 2043, 3678, 2469,
	2625, 2042, 1998, 2628, 2475, 2583, 2584, 2139, 1997, 1632,
	1633, 1634, 1635, 1636, 2556, 1464, 2556, 2571, 1127, 1996,
	1577, 1325, 1127, 3264, 2539, 1196, 1197, 1198, 1195, 1466,
	2560, 3150, 2662, 2663, 3027, 3871, 1464, 3870, 2580, 1943,
	1196, 1197, 1198, 1195, 2541, 3575, 3576, 2693, 634, 634,
	2536, 1677, 3391, 2699, 642, 1681, 1682, 1683, 1684, 707,
	3845, 2550, 709, 2152, 1718, 2528, 1109, 708, 2517, 3813,
	2611, 2709, 1728, 1446, 1448, 3812, 2533, 3809, 2526, 3747,
	3729, 1127, 3674, 1196, 1197, 1198, 1195, 3442, 3656, 2730,
	1196, 1197, 1198, 1195, 2546, 2547, 1127, 1127, 1127, 1872,
	3647, 3628, 1127, 1013, 2741, 2742, 2743, 2744, 1127, 2751,
	3623, 2752, 2753, 2562, 2754, 2677, 2756, 1196, 1197, 1198,
	1195, 3622, 3412, 1108, 1780, 3578, 2678, 2751, 1620, 3566,
	2681, 3565, 2690, 3541, 3487, 3449, 3400, 3419, 2549, 2396,
	3418, 2723, 3414, 2581, 2642, 3411, 3410, 3399, 2430, 1196,
	1197, 1198, 1195, 2809, 1894, 3389, 3387, 2005, 3366, 3365,
	2700, 2711, 611, 1196, 1197, 1198, 1195, 3362, 1943, 1127,
	1959, 1959, 1959, 1959, 1196, 1197, 1198, 1195, 3360, 2813,
	3346, 3254, 1127, 1959, 3253, 2644, 2396, 2646, 3250, 3235,
	3219, 1845, 3217, 3145, 3144, 2728, 3139, 3134, 3133, 2728,
	3052, 2660, 1466, 2814, 2724, 642, 2643, 1196, 1197, 1198,
	1195, 3214, 3014, 635, 635, 3013, 1861, 3009, 3006, 2735,
	2692, 8, 2684, 2736, 2737, 3002, 7, 2137, 2740, 2207,
	2698, 2936, 2933, 2891, 2747, 2865, 2802, 2794, 1196, 1197,
	1198, 1195, 2784, 2710, 2782, 2713, 2702, 2778, 2777, 2776,
	2621, 2705, 2726, 2960, 813, 812, 3709, 2732, 3796, 2518,
	2211, 2847, 2052, 2045, 2739, 1790, 1789, 1578, 1817, 204,
	1780, 1275, 1271, 1270, 204, 1780, 1780, 1112, 2589, 2590,
	1196, 1197, 1198, 1195, 2595, 880, 3705, 3562, 2651, 3561,
	3550, 2771, 3413, 3398, 2783, 2833, 1734, 3278, 1734, 3277,
	3276, 2908, 3247, 1196, 1197, 1198, 1195, 2876, 2833, 187,
	3231, 176, 149, 3229, 2921, 3228, 2708, 2815, 3225, 3224,
	1466, 3218, 3216, 2928, 3200, 2821, 2031, 3190, 3189, 2034,
	3175, 3174, 2037, 2959, 3081, 2039, 3017, 2958, 2994, 2848,
	2962, 2850, 2846, 2955, 2947, 2946, 2849, 2834, 2835, 2836,
	2837, 2940, 2874, 2640, 2866, 2493, 2489, 1013, 2605, 2863,
	1196, 1197, 1198, 1195, 1196, 1197, 1198, 1195, 1013, 2488,
	2181, 2174, 127, 127, 1011, 1779, 2168, 2167, 2882, 181,
	2907, 2763, 2764, 2886, 2903, 1196, 1197, 1198, 1195, 2701,
	2081, 2166, 2165, 2163, 2859, 2914, 2779, 2780, 2706, 2707,
	2159, 2158, 1538, 1539, 1546, 2156, 2147, 2905, 2950, 2144,
	2952, 2143, 1543, 2880, 2051, 1547, 1773, 2915, 3005, 2884,
	1531, 2816, 1772, 2883, 3008, 2729, 2925, 1771, 3011, 3012,
	1532, 1533, 1737, 1736, 2930, 1727, 1127, 1478, 2901, 2899,
	1476, 2906, 3030, 187, 1265, 3704, 2918, 1228, 2904, 3642,
	3630, 2917, 3046, 2916, 2604, 2924, 3625, 1526, 635, 1219,
	1220, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1211, 2818,
	3061, 1127, 3721, 2603, 635, 2937, 1127, 1127, 3521, 2938,
	2602, 1196, 1197, 1198, 1195, 1959, 2259, 2944, 3079, 3504,
	3500, 2131, 3478, 3462, 3374, 2136, 3372, 3344, 2953, 2954,
	1196, 1197, 1198, 1195, 3343, 3340, 2322, 1196, 1197, 1198,
	1195, 3339, 3305, 181, 3302, 3055, 2996, 3300, 3105, 3016,
	3108, 2951, 3108, 3108, 3267, 1537, 1528, 1127, 3166, 2601,
	1542, 1545, 1534, 1013, 1370, 1013, 2148, 2810, 2734, 2686,
	1013, 2685, 2679, 2677, 2155, 3000, 3129, 3001, 2645, 3125,
	2606, 2948, 2949, 2503, 1466, 1466, 1196, 1197, 1198, 1195,
	2412, 2364, 3064, 3092, 3094, 1013, 2172, 3068, 3083, 3015,
	2260, 2177, 2178, 2179, 3127, 2231, 2182, 2183, 2184, 2185,
	2186, 2187, 2188, 2189, 2190, 2191, 3077, 3047, 3048, 2201,
	1662, 181, 3088, 1313, 2011, 1807, 1786, 3054, 1605, 1560,
	3063, 635, 3103, 1535, 1324, 3066, 3067, 3030, 1309, 1305,
	1010, 3104, 3074, 1304, 3078, 1303, 1434, 1302, 1301, 1943,
	1943, 1300, 3113, 634, 1116, 2600, 1299, 2292, 3087, 1298,
	2291, 2599, 1297, 1296, 1125, 2598, 1295, 1464, 1464, 3130,
	3131, 1294, 3109, 3110, 2597, 1012, 1293, 1292, 1291, 1290,
	3114, 1289, 1196, 1197, 1198, 1195, 1149, 1288, 1196, 1197,
	1198, 1195, 1196, 1197, 1198, 1195, 1127, 1287, 1286, 1285,
	2572, 1196, 1197, 1198, 1195, 1284, 1283, 1282, 3082, 3188,
	1281, 3719, 2596, 3084, 3085, 3827, 2593, 1278, 2969, 2970,
	1277, 1276, 3717, 2592, 2971, 2972, 2973, 2974, 1274, 2975,
	2976, 2977, 2978, 2979, 2980, 2981, 2982, 2983, 2984, 1196,
	1197, 1198, 1195, 1196, 1197, 1198, 1195, 2591, 1273, 3135,
	1196, 1197, 1198, 1195, 3143, 635, 3141, 3140, 3146, 3151,
	3147, 3153, 3154, 1475, 2585, 1272, 1269, 641, 3164, 1262,
	1261, 1259, 1258, 1257, 1196, 1197, 1198, 1195, 3168, 2575,
	1256, 1255, 1254, 1253, 1252, 3171, 3172, 3173, 1431, 2551,
	1251, 1196, 1197, 1198, 1195, 1250, 1249, 1248, 1243, 3177,
	127, 1242, 1241, 3183, 1240, 1160, 1196, 1197, 1198, 1195,
	1780, 1110, 1780, 1675, 3160, 3161, 1196, 1197, 1198, 1195,
	3715, 3341, 2430, 2264, 2246, 3238, 1148, 3825, 3240, 3783,
	1780, 1780, 3163, 3201, 2667, 2423, 2054, 3203, 3155, 1159,
	1196, 1197, 1198, 1195, 3202, 2378, 2843, 3165, 2840, 3206,
	3220, 2844, 2556, 3207, 3167, 2841, 2845, 2839, 2388, 2389,
	2842, 3086, 2838, 112, 1505, 3376, 3212, 127, 60, 59,
	3483, 2516, 2506, 3377, 127, 1364, 3241, 1835, 1836, 3271,
	3050, 2920, 2383, 2387, 2388, 2389, 2384, 127, 2385, 2390,
	2332, 3111, 2386, 3204, 3205, 2396, 1959, 3290, 3101, 127,
	3102, 1013, 3351, 2383, 2387, 2388, 2389, 2384, 1013, 2385,
	2390, 3178, 1931, 2386, 2511, 1520, 2514, 2501, 2540, 3236,
	3308, 1573, 3375, 1127, 3232, 637, 2521, 2522, 3246, 2219,
	638, 639, 3105, 2759, 1554, 3249, 1127, 1830, 1831, 1832,
	2760, 2761, 2762, 2013, 1154, 3025, 3018, 1127, 2712, 3355,
	2687, 2284, 2255, 1466, 1839, 1806, 1723, 1722, 1320, 1321,
	1318, 1319, 3261, 3262, 1316, 1317, 1314, 1315, 3292, 3836,
	3627, 3132, 2375, 1943, 2370, 1944, 1426, 1127, 1425, 1187,
	2553, 3170, 2868, 2559, 2218, 2083, 1378, 1355, 1401, 3803,
	2573, 2574, 3288, 3801, 3761, 3338, 3739, 3289, 2576, 2577,
	3738, 3331, 1429, 3295, 3736, 3681, 204, 3643, 3535, 3534,
	3473, 3388, 3221, 3197, 2582, 3196, 3181, 2317, 2287, 1127,
	3368, 1575, 3180, 2878, 1376, 3345, 3239, 1472, 3350, 2923,
	3378, 3347, 3829, 3828, 3829, 2629, 1464, 2248, 3357, 3354,
	2146, 1328, 1632, 1780, 1145, 3828, 3361, 3502, 3359, 3309,
	3364, 3176, 3363, 1124, 191, 3, 1393, 3369, 3415, 3370,
	3367, 68, 3348, 2, 3848, 3422, 3849, 1, 2612, 1127,
	1784, 1322, 875, 2747, 870, 1443, 2405, 3396, 1991, 1470,
	1707, 1788, 877, 2852, 3291, 2853, 3169, 2855, 1127, 1466,
	1466, 2631, 2103, 3294, 3061, 2822, 2368, 2235, 3392, 3393,
	3299, 3045, 3301, 2833, 1365, 3457, 924, 3457, 3420, 3421,
	1729, 871, 872, 873, 874, 3382, 1124, 2703, 2704, 1588,
	1036, 1127, 3472, 1127, 1138, 1585, 3451, 3452, 1137, 1135,
	1678, 3475, 760, 3477, 2057, 2811, 2785, 3268, 3269, 3270,
	1466, 3531, 3427, 3274, 3275, 2833, 3429, 3428, 3835, 3864,
	3448, 3795, 3424, 3838, 1603, 744, 3730, 3648, 635, 1013,
	1127, 1127, 3461, 3799, 1127, 1127, 3650, 3450, 3460, 3546,
	2108, 1192, 1464, 1673, 3447, 2900, 948, 3471, 801, 3292,
	771, 3523, 1260, 2068, 1566, 3481, 3454, 2967, 2965, 3518,
	1038, 770, 1958, 1841, 3260, 3532, 2656, 3508, 3509, 3484,
	3488, 3519, 3520, 3338, 3536, 3537, 2871, 3598, 1035, 3331,
	949, 2040, 3645, 3544, 3445, 1521, 1525, 1466, 2283, 3606,
	3700, 3482, 3097, 1673, 2720, 1549, 3695, 3303, 3405, 3403,
	3529, 3404, 677, 1970, 609, 995, 3522, 2053, 3564, 3528,
	678, 2263, 3752, 1703, 3629, 904, 3530, 1626, 3556, 1626,
	1700, 2245, 905, 897, 1702, 1699, 1701, 1705, 1706, 2675,
	3543, 2674, 1704, 1643, 1201, 1660, 127, 2985, 2986, 127,
	127, 3547, 127, 1238, 716, 3551, 2133, 2653, 3555, 3326,
	2864, 67, 66, 3596, 65, 3590, 3445, 3445, 64, 2022,
	3445, 3445, 212, 762, 211, 3469, 3470, 3440, 3726, 1127,
	1464, 3380, 3548, 3840, 742, 741, 740, 739, 738, 3613,
	737, 3619, 1011, 2382, 3480, 127, 2380, 3584, 2379, 1954,
	1953, 2020, 3059, 1011, 3486, 2750, 3591, 2885, 3396, 2887,
	3593, 3592, 2745, 1883, 3605, 1881, 3609, 127, 1013, 2738,
	2312, 3409, 1127, 2319, 1880, 3780, 3710, 1466, 1780, 3401,
	3711, 3402, 3499, 1780, 2795, 3395, 1829, 2308, 3524, 1900,
	2766, 1897, 1896, 3626, 2081, 3588, 2758, 3495, 3489, 1928,
	3594, 3456, 3310, 3311, 3317, 2254, 1823, 1061, 1057, 3635,
	1059, 1828, 1060, 1058, 3666, 2561, 2289, 3020, 2227, 3670,
	2226, 2224, 2223, 1340, 3669, 3661, 3748, 3423, 2428, 2939,
	2426, 1107, 3162, 3644, 1127, 3158, 1710, 1711, 1712, 1713,
	1714, 1715, 1708, 1709, 2065, 2079, 1228, 2919, 3682, 1955,
	1951, 2824, 3569, 2961, 1834, 1626, 898, 2243, 41, 110,
	1464, 101, 3637, 3668, 3525, 3673, 166, 53, 3526, 165,
	52, 3677, 3676, 108, 163, 51, 3699, 3684, 1878, 1879,
	96, 1127, 95, 107, 161, 50, 196, 195, 198, 1466,
	197, 194, 3724, 3727, 2479, 2480, 193, 3693, 3445, 3714,
	3716, 3718, 3720, 3698, 1509, 192, 3728, 3740, 3459, 3707,
	865, 40, 39, 38, 34, 13, 12, 35, 3713, 22,
	21, 3476, 1592, 20, 26, 187, 57, 176, 149, 3735,
	3733, 32, 31, 2000, 1466, 120, 119, 3596, 30, 2000,
	2000, 2000, 118, 177, 117, 116, 115, 114, 29, 19,
	169, 45, 44, 3771, 178, 43, 9, 106, 104, 3779,
	3445, 3762, 3764, 28, 105, 3760, 102, 99, 97, 3765,
	3766, 79, 1464, 125, 3723, 1210, 1209, 1219, 1220, 1212,
	1213, 1214, 1215, 1216, 1217, 1218, 1211, 78, 113, 77,
	92, 91, 3788, 90, 3789, 181, 3790, 3808, 3791, 3802,
	3792, 3804, 3805, 89, 88, 87, 3798, 3445, 3800, 3112,
	85, 86, 1127, 947, 3807, 3661, 76, 1464, 75, 3763,
	74, 73, 72, 94, 100, 98, 83, 93, 84, 82,
	3619, 81, 80, 3817, 71, 70, 69, 3819, 147, 3638,
	3818, 146, 3820, 3823, 145, 3834, 3826, 3842, 3824, 144,
	3841, 143, 141, 142, 140, 936, 3830, 3831, 3832, 3833,
	139, 138, 137, 136, 135, 3853, 3846, 1127, 46, 47,
	48, 49, 131, 132, 157, 133, 134, 3854, 3699, 3855,
	156, 158, 3857, 160, 162, 3315, 159, 3863, 3866, 164,
	154, 1210, 1209, 1219, 1220, 1212, 1213, 1214, 1215, 1216,
	1217, 1218, 1211, 3683, 152, 155, 153, 151, 3687, 3688,
	2164, 3873, 62, 11, 109, 18, 25, 4, 0, 3842,
	3880, 0, 3841, 3879, 3327, 933, 934, 0, 0, 3866,
	3881, 0, 0, 0, 0, 3885, 976, 3318, 3815, 3708,
	2399, 0, 0, 148, 175, 185, 0, 111, 3313, 0,
	0, 0, 0, 3335, 3336, 1222, 0, 1226, 0, 3314,
	0, 0, 0, 0, 0, 174, 168, 167, 0, 0,
	0, 0, 63, 1223, 1225, 1221, 0, 1224, 1210, 1209,
	1219, 1220, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1211,
	3474, 0, 0, 1626, 0, 0, 3319, 0, 0, 0,
	0, 0, 0, 0, 0, 1958, 0, 0, 0, 0,
	0, 0, 0, 0, 127, 0, 0, 0, 0, 978,
	0, 0, 977, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3213, 170, 171, 172, 0, 0, 0, 3215,
	0, 2963, 0, 0, 1210, 1209, 1219, 1220, 1212, 1213,
	1214, 1215, 1216, 1217, 1218, 1211, 0, 0, 0, 962,
	2232, 2233, 2234, 0, 179, 3810, 3811, 937, 0, 0,
	3230, 0, 0, 0, 0, 2250, 2251, 2252, 2253, 0,
	0, 0, 0, 0, 0, 121, 0, 0, 0, 173,
	3334, 122, 2298, 0, 939, 1210, 1209, 1219, 1220, 1212,
	1213, 1214, 1215, 1216, 1217, 1218, 1211, 0, 689, 688,
	695, 685, 0, 0, 0, 0, 0, 3323, 0, 0,
	692, 693, 0, 694, 698, 0, 0, 679, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 703, 2548, 3320,
	3324, 3322, 3321, 0, 0, 0, 0, 0, 123, 0,
	0, 0, 0, 0, 0, 0, 0, 961, 959, 0,
	0, 56, 1210, 1209, 1219, 1220, 1212, 1213, 1214, 1215,
	1216, 1217, 1218, 1211, 0, 0, 0, 3329, 3330, 958,
	0, 707, 0, 0, 709, 0, 0, 0, 0, 708,
	0, 932, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 938, 971, 0, 0, 0, 0, 0, 0,
	58, 0, 0, 0, 0, 0, 0, 0, 1780, 0,
	0, 0, 0, 0, 0, 3337, 967, 0, 0, 0,
	0, 0, 1780, 0, 127, 3371, 1079, 3316, 3373, 0,
	0, 1472, 0, 3328, 127, 182, 183, 0, 184, 0,
	0, 0, 0, 150, 0, 3379, 2000, 0, 54, 0,
	0, 0, 968, 972, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1929, 0, 0, 0, 0, 1890,
	0, 0, 955, 0, 953, 957, 975, 0, 0, 0,
	954, 951, 950, 0, 956, 941, 942, 940, 943, 944,
	945, 946, 0, 973, 0, 974, 0, 0, 0, 1931,
	1899, 0, 0, 0, 0, 0, 969, 970, 0, 1932,
	1933, 0, 0, 0, 124, 42, 680, 682, 681, 0,
	0, 55, 0, 0, 0, 0, 687, 0, 0, 0,
	0, 0, 0, 128, 129, 1898, 0, 130, 691, 0,
	0, 0, 0, 965, 0, 706, 0, 0, 1065, 964,
	0, 1906, 684, 1958, 1958, 1958, 1958, 0, 0, 0,
	0, 0, 0, 3333, 960, 0, 1958, 0, 1087, 1091,
	1093, 1095, 1097, 1098, 1100, 0, 1105, 1101, 1102, 1103,
	1104, 0, 1082, 1083, 1084, 1085, 1063, 1064, 1088, 0,
	1066, 0, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074,
	1075, 1078, 1080, 1076, 1077, 1086, 0, 0, 0, 0,
	0, 0, 0, 1090, 1092, 1094, 1096, 1099, 0, 1922,
	1210, 1209, 1219, 1220, 1212, 1213, 1214, 1215, 1216, 1217,
	1218, 1211, 0, 0, 0, 0, 0, 0, 0, 3332,
	0, 0, 963, 0, 0, 0, 0, 0, 935, 0,
	0, 1081, 127, 0, 0, 0, 0, 127, 0, 0,
	0, 0, 686, 690, 696, 0, 697, 699, 0, 0,
	700, 701, 702, 0, 0, 704, 705, 0, 127, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	1889, 1891, 1888, 0, 1885, 0, 0, 2691, 0, 1910,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1916, 3585, 0, 0, 0, 0, 0, 0, 1901, 0,
	1884, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1904, 1938, 0, 0, 1905, 1907, 1909, 0, 1911, 1912,
	1913, 1917, 1918, 1919, 1921, 1924, 1925, 1926, 1929, 0,
	0, 0, 0, 1890, 0, 1914, 1923, 1915, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1893, 0, 0,
	0, 1079, 2130, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1931, 1899, 0, 0, 0, 0, 1930,
	2557, 2558, 0, 1932, 1933, 0, 1210, 1209, 1219, 1220,
	1212, 1213, 1214, 1215, 1216, 1217, 1218, 1211, 0, 0,
	0, 0, 0, 0, 0, 0, 1886, 1887, 0, 1898,
	0, 0, 0, 0, 0, 1247, 0, 0, 0, 0,
	1707, 683, 0, 0, 1927, 1906, 1209, 1219, 1220, 1212,
	1213, 1214, 1215, 1216, 1217, 1218, 1211, 0, 0, 0,
	0, 1903, 0, 0, 1011, 0, 127, 0, 1902, 0,
	0, 127, 0, 2869, 2870, 0, 0, 0, 1958, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1920, 0, 0, 0, 127, 0, 0, 0,
	3706, 1908, 0, 1065, 0, 0, 0, 1055, 0, 0,
	0, 0, 0, 1922, 1935, 1934, 0, 0, 0, 0,
	0, 0, 0, 1087, 1091, 1093, 1095, 1097, 1098, 1100,
	0, 1105, 1101, 1102, 1103, 1104, 0, 1082, 1083, 1084,
	1085, 1063, 1064, 1088, 1089, 1066, 0, 1067, 1068, 1069,
	1070, 1071, 1072, 1073, 1074, 1075, 1078, 1080, 1076, 1077,
	1086, 0, 0, 0, 0, 0, 0, 1895, 1090, 1092,
	1094, 1096, 1099, 0, 0, 0, 0, 0, 0, 3776,
	0, 0, 0, 0, 1889, 2715, 1888, 0, 2714, 0,
	0, 0, 0, 1910, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1703, 1916, 0, 1081, 0, 0, 1937,
	1700, 0, 1936, 0, 1702, 1699, 1701, 1705, 1706, 0,
	0, 0, 1704, 0, 1904, 1938, 0, 0, 1905, 1907,
	1909, 0, 1911, 1912, 1913, 1917, 1918, 1919, 1921, 1924,
	1925, 1926, 0, 0, 0, 0, 0, 0, 3776, 1914,
	1923, 1915, 0, 0, 0, 0, 0, 0, 0, 1929,
	0, 1893, 689, 688, 695, 685, 187, 0, 0, 0,
	0, 0, 0, 0, 692, 693, 0, 694, 698, 0,
	0, 679, 0, 1930, 0, 0, 0, 0, 3455, 0,
	0, 703, 0, 0, 1931, 0, 1079, 3776, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1886, 1887, 0, 0, 0, 0, 0, 0, 3053, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1927, 0,
	0, 0, 0, 0, 3065, 707, 181, 0, 709, 0,
	0, 0, 0, 708, 0, 1903, 1906, 0, 0, 0,
	0, 0, 1902, 3883, 0, 1688, 1689, 1690, 1691, 1692,
	1693, 1694, 1695, 1696, 1697, 1698, 1710, 1711, 1712, 1713,
	1714, 1715, 1708, 1709, 0, 0, 1920, 0, 0, 0,
	0, 0, 0, 0, 0, 1908, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1935, 1934,
	0, 0, 127, 0, 0, 0, 0, 0, 0, 127,
	0, 0, 0, 0, 1922, 0, 0, 0, 1065, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1087, 1091,
	1093, 1095, 1097, 1098, 1100, 0, 1105, 1101, 1102, 1103,
	1104, 1895, 1082, 1083, 1084, 1085, 1063, 1064, 1088, 1958,
	1066, 2000, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074,
	1075, 1078, 1080, 1076, 1077, 1086, 0, 0, 0, 0,
	680, 682, 681, 1090, 1092, 1094, 1096, 1099, 0, 1089,
	687, 0, 0, 1937, 1910, 0, 1936, 0, 0, 0,
	0, 0, 691, 0, 0, 1916, 0, 0, 0, 706,
	0, 0, 0, 0, 0, 0, 684, 0, 0, 0,
	674, 1081, 0, 0, 0, 1904, 1938, 0, 0, 1905,
	1907, 1909, 0, 1911, 1912, 1913, 1917, 1918, 1919, 1921,
	1924, 1925, 1926, 0, 0, 0, 0, 0, 0, 0,
	1914, 1923, 1915, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1930, 3209, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 686, 690, 696, 1927,
	697, 699, 0, 0, 700, 701, 702, 0, 0, 704,
	705, 0, 0, 0, 0, 0, 1903, 0, 0, 0,
	0, 0, 0, 1902, 0, 0, 0, 0, 0, 0,
	127, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1920, 0, 0,
	0, 0, 0, 0, 0, 0, 1908, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 778, 0, 0,
	0, 0, 0, 0, 0, 0, 375, 0, 501, 534,
	523, 607, 489, 0, 0, 0, 0, 0, 0, 731,
	0, 0, 0, 315, 0, 0, 345, 538, 520, 530,
	521, 506, 507, 508, 515, 325, 509, 510, 511, 481,
	512, 482, 513, 514, 769, 537, 488, 406, 359, 555,
	554, 0, 0, 836, 844, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 723, 0, 0, 759,
	813, 812, 746, 756, 0, 0, 288, 210, 483, 603,
	485, 484, 747, 0, 748, 752, 755, 751, 749, 750,
	0, 828, 0, 0, 150, 683, 0, 0, 715, 727,
	0, 732, 0, 0, 1089, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 724, 725, 0, 0, 0,
	0, 779, 0, 726, 0, 0, 774, 753, 757, 127,
	0, 0, 0, 278, 412, 429, 289, 402, 442, 294,
	409, 284, 374, 398, 0, 0, 280, 427, 408, 356,
	335, 336, 279, 0, 393, 313, 327, 310, 372, 754,
	777, 781, 309, 850, 775, 437, 282, 0, 436, 371,
	423, 428, 357, 351, 281, 425, 355, 350, 339, 317,
	851, 340, 341, 331, 383, 349, 384, 332, 361, 360,
	362, 0, 0, 0, 0, 0, 465, 466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	596, 772, 0, 600, 0, 439, 0, 0, 834, 0,
	0, 0, 411, 0, 0, 342, 0, 0, 0, 776,
	0, 396, 377, 847, 0, 0, 394, 347, 424, 385,
	430, 413, 438, 390, 386, 273, 414, 312, 358, 285,
	287, 307, 314, 316, 318, 319, 367, 368, 380, 401,
	415, 416, 417, 311, 295, 395, 296, 329, 297, 274,
	303, 301, 304, 403, 305, 276, 381, 421, 3507, 324,
	391, 354, 277, 353, 382, 420, 419, 286, 446, 452,
	453, 542, 0, 458, 623, 624, 625, 467, 472, 473,
	474, 476, 477, 478, 479, 543, 560, 527, 497, 460,
	551, 494, 498, 499, 563, 1731, 1730, 1732, 451, 343,
	344, 0, 322, 270, 271, 618, 832, 373, 565, 598,
	599, 490, 0, 846, 827, 829, 830, 833, 837, 838,
	839, 840, 841, 843, 845, 849, 617, 0, 544, 559,
	621, 558, 614, 379, 0, 400, 556, 503, 0, 548,
	522, 0, 549, 518, 553, 0, 492, 0, 407, 432,
	444, 461, 464, 493, 578, 579, 580, 275, 463, 582,
	583, 584, 585, 586, 587, 588, 581, 848, 525, 502,
	528, 443, 505, 504, 0, 0, 539, 780, 540, 541,
	363, 364, 365, 366, 835, 566, 293, 462, 389, 0,
	526, 0, 0, 0, 0, 0, 0, 0, 0, 531,
	532, 529, 626, 0, 589, 590, 0, 0, 456, 457,
	321, 328, 475, 330, 292, 378, 323, 441, 337, 0,
	468, 533, 469, 592, 595, 593, 594, 370, 333, 334,
	404, 338, 348, 392, 440, 376, 397, 290, 431, 405,
	352, 519, 546, 857, 831, 856, 858, 859, 855, 860,
	861, 842, 736, 0, 787, 853, 852, 854, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 574,
	573, 572, 571, 570, 569, 568, 567, 0, 0, 516,
	418, 302, 264, 298, 299, 306, 615, 612, 422, 616,
	0, 272, 496, 346, 0, 387, 320, 561, 562, 0,
	0, 820, 794, 795, 796, 733, 797, 791, 792, 734,
	793, 821, 785, 817, 818, 761, 788, 798, 816, 799,
	819, 822, 823, 862, 863, 805, 789, 236, 864, 802,
	824, 815, 814, 800, 786, 825, 826, 768, 763, 803,
	804, 790, 808, 809, 810, 735, 782, 783, 784, 806,
	807, 764, 765, 766, 767, 0, 0, 0, 447, 448,
	449, 471, 0, 433, 495, 613, 0, 0, 0, 0,
	0, 0, 0, 545, 557, 591, 0, 601, 602, 604,
	606, 811, 608, 410, 778, 619, 486, 487, 620, 597,
	0, 728, 0, 375, 0, 501, 534, 523, 607, 489,
	0, 0, 0, 0, 0, 0, 731, 0, 0, 0,
	315, 1781, 0, 345, 538, 520, 530, 521, 506, 507,
	508, 515, 325, 509, 510, 511, 481, 512, 482, 513,
	514, 769, 537, 488, 406, 359, 555, 554, 0, 0,
	836, 844, 0, 0, 0, 0, 0, 0, 0, 0,
	1982, 0, 0, 723, 0, 0, 759, 813, 812, 746,
	756, 0, 0, 288, 210, 483, 603, 485, 484, 747,
	0, 748, 752, 755, 751, 749, 750, 0, 828, 0,
	0, 0, 0, 0, 0, 715, 727, 0, 732, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 724, 725, 0, 0, 0, 0, 779, 0,
	726, 0, 0, 1983, 753, 757, 0, 0, 0, 0,
	278, 412, 429, 289, 402, 442, 294, 409, 284, 374,
	398, 0, 0, 280, 427, 408, 356, 335, 336, 279,
	0, 393, 313, 327, 310, 372, 754, 777, 781, 309,
	850, 775, 437, 282, 0, 436, 371, 423, 428, 357,
	351, 281, 425, 355, 350, 339, 317, 851, 340, 341,
	331, 383, 349, 384, 332, 361, 360, 362, 0, 0,
	0, 0, 0, 465, 466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 596, 772, 0,
	600, 0, 439, 0, 0, 834, 0, 0, 0, 411,
	0, 0, 342, 0, 0, 0, 776, 0, 396, 377,
	847, 0, 0, 394, 347, 424, 385, 430, 413, 438,
	390, 386, 273, 414, 312, 358, 285, 287, 307, 314,
	316, 318, 319, 367, 368, 380, 401, 415, 416, 417,
	311, 295, 395, 296, 329, 297, 274, 303, 301, 304,
	403, 305, 276, 381, 421, 0, 324, 391, 354, 277,
	353, 382, 420, 419, 286, 446, 452, 453, 542, 0,
	458, 623, 624, 625, 467, 472, 473, 474, 476, 477,
	478, 479, 543, 560, 527, 497, 460, 551, 494, 498,
	499, 563, 0, 0, 0, 451, 343, 344, 0, 322,
	270, 271, 618, 832, 373, 565, 598, 599, 490, 0,
	846, 827, 829, 830, 833, 837, 838, 839, 840, 841,
	843, 845, 849, 617, 0, 544, 559, 621, 558, 614,
	379, 0, 400, 556, 503, 0, 548, 522, 0, 549,
	518, 553, 0, 492, 0, 407, 432, 444, 461, 464,
	493, 578, 579, 580, 275, 463, 582, 583, 584, 585,
	586, 587, 588, 581, 848, 525, 502, 528, 443, 505,
	504, 0, 0, 539, 780, 540, 541, 363, 364, 365,
	366, 835, 566, 293, 462, 389, 0, 526, 0, 0,
	0, 0, 0, 0, 0, 0, 531, 532, 529, 626,
	0, 589, 590, 0, 0, 456, 457, 321, 328, 475,
	330, 292, 378, 323, 441, 337, 0, 468, 533, 469,
	592, 595, 593, 594, 370, 333, 334, 404, 338, 348,
	392, 440, 376, 397, 290, 431, 405, 352, 519, 546,
	857, 831, 856, 858, 859, 855, 860, 861, 842, 736,
	0, 787, 853, 852, 854, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 574, 573, 572, 571,
	570, 569, 568, 567, 0, 0, 516, 418, 302, 264,
	298, 299, 306, 615, 612, 422, 616, 0, 272, 496,
	346, 0, 387, 320, 561, 562, 0, 0, 820, 794,
	795, 796, 733, 797, 791, 792, 734, 793, 821, 785,
	817, 818, 761, 788, 798, 816, 799, 819, 822, 823,
	862, 863, 805, 789, 236, 864, 802, 824, 815, 814,
	800, 786, 825, 826, 768, 763, 803, 804, 790, 808,
	809, 810, 735, 782, 783, 784, 806, 807, 764, 765,
	766, 767, 0, 0, 0, 447, 448, 449, 471, 0,
	433, 495, 613, 0, 0, 0, 0, 0, 0, 0,
	545, 557, 591, 0, 601, 602, 604, 606, 811, 608,
	410, 0, 619, 486, 487, 620, 597, 0, 728, 187,
	778, 0, 0, 0, 0, 0, 0, 0, 0, 375,
	0, 501, 534, 523, 607, 489, 0, 0, 0, 0,
	0, 0, 731, 0, 0, 0, 315, 0, 0, 345,
	538, 520, 530, 521, 506, 507, 508, 515, 325, 509,
	510, 511, 481, 512, 482, 513, 514, 1231, 537, 488,
	406, 359, 555, 554, 0, 0, 836, 844, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 723,
	0, 0, 759, 813, 812, 746, 756, 0, 0, 288,
	210, 483, 603, 485, 484, 747, 0, 748, 752, 755,
	751, 749, 750, 0, 828, 0, 0, 0, 0, 0,
	0, 715, 727, 0, 732, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 724, 725,
	0, 0, 0, 0, 779, 0, 726, 0, 0, 774,
	753, 757, 0, 0, 0, 0, 278, 412, 429, 289,
	402, 442, 294, 409, 284, 374, 398, 0, 0, 280,
	427, 408, 356, 335, 336, 279, 0, 393, 313, 327,
	310, 372, 754, 777, 781, 309, 850, 775, 437, 282,
	0, 436, 371, 423, 428, 357, 351, 281, 425, 355,
	350, 339, 317, 851, 340, 341, 331, 383, 349, 384,
	332, 361, 360, 362, 0, 0, 0, 0, 0, 465,
	466, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 596, 772, 0, 600, 0, 439, 0,
	0, 834, 0, 0, 0, 411, 0, 0, 342, 0,
	0, 0, 776, 0, 396, 377, 847, 0, 0, 394,
	347, 424, 385, 430, 413, 438, 390, 386, 273, 414,
	312, 358, 285, 287, 307, 314, 316, 318, 319, 367,
	368, 380, 401, 415, 416, 417, 311, 295, 395, 296,
	329, 297, 274, 303, 301, 304, 403, 305, 276, 381,
	421, 0, 324, 391, 354, 277, 353, 382, 420, 419,
	286, 446, 452, 453, 542, 0, 458, 623, 624, 625,
	467, 472, 473, 474, 476, 477, 478, 479, 543, 560,
	527, 497, 460, 551, 494, 498, 499, 563, 0, 0,
	0, 451, 343, 344, 0, 322, 270, 271, 618, 832,
	373, 565, 598, 599, 490, 0, 846, 827, 829, 830,
	833, 837, 838, 839, 840, 841, 843, 845, 849, 617,
	0, 544, 559, 621, 558, 614, 379, 0, 400, 556,
	503, 0, 548, 522, 0, 549, 518, 553, 0, 492,
	0, 407, 432, 444, 461, 464, 493, 578, 579, 580,
	275, 463, 582, 583, 584, 585, 586, 587, 588, 581,
	848, 525, 502, 528, 443, 505, 504, 0, 0, 539,
	780, 540, 541, 363, 364, 365, 366, 835, 566, 293,
	462, 389, 0, 526, 0, 0, 0, 0, 0, 0,
	0, 0, 531, 532, 529, 626, 0, 589, 590, 0,
	0, 456, 457, 321, 328, 475, 330, 292, 378, 323,
	441, 337, 0, 468, 533, 469, 592, 595, 593, 594,
	370, 333, 334, 404, 338, 348, 392, 440, 376, 397,
	290, 431, 405, 352, 519, 546, 857, 831, 856, 858,
	859, 855, 860, 861, 842, 736, 0, 787, 853, 852,
	854, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 574, 573, 572, 571, 570, 569, 568, 567,
	0, 0, 516, 418, 302, 264, 298, 299, 306, 615,
	612, 422, 616, 0, 272, 496, 346, 150, 387, 320,
	561, 562, 0, 0, 820, 794, 795, 796, 733, 797,
	791, 792, 734, 793, 821, 785, 817, 818, 761, 788,
	798, 816, 799, 819, 822, 823, 862, 863, 805, 789,
	236, 864, 802, 824, 815, 814, 800, 786, 825, 826,
	768, 763, 803, 804, 790, 808, 809, 810, 735, 782,
	783, 784, 806, 807, 764, 765, 766, 767, 0, 0,
	0, 447, 448, 449, 471, 0, 433, 495, 613, 0,
	0, 0, 0, 0, 0, 0, 545, 557, 591, 0,
	601, 602, 604, 606, 811, 608, 410, 778, 619, 486,
	487, 620, 597, 0, 728, 0, 375, 0, 501, 534,
	523, 607, 489, 0, 0, 0, 0, 0, 0, 731,
	0, 0, 0, 315, 3882, 0, 345, 538, 520, 530,
	521, 506, 507, 508, 515, 325, 509, 510, 511, 481,
	512, 482, 513, 514, 769, 537, 488, 406, 359, 555,
	554, 0, 0, 836, 844, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 723, 0, 0, 759,
	813, 812, 746, 756, 0, 0, 288, 210, 483, 603,
	485, 484, 747, 0, 748, 752, 755, 751, 749, 750,
	0, 828, 0, 0, 0, 0, 0, 0, 715, 727,
	0, 732, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 724, 725, 0, 0, 0,
	0, 779, 0, 726, 0, 0, 774, 753, 757, 0,
	0, 0, 0, 278, 412, 429, 289, 402, 442, 294,
	409, 284, 374, 398, 0, 0, 280, 427, 408, 356,
	335, 336, 279, 0, 393, 313, 327, 310, 372, 754,
	777, 781, 309, 850, 775, 437, 282, 0, 436, 371,
	423, 428, 357, 351, 281, 425, 355, 350, 339, 317,
	851, 340, 341, 331, 383, 349, 384, 332, 361, 360,
	362, 0, 0, 0, 0, 0, 465, 466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	596, 772, 0, 600, 0, 439, 0, 0, 834, 0,
	0, 0, 411, 0, 0, 342, 0, 0, 0, 776,
	0, 396, 377, 847, 0, 0, 394, 347, 424, 385,
	430, 413, 438, 390, 386, 273, 414, 312, 358, 285,
	287, 307, 314, 316, 318, 319, 367, 368, 380, 401,
	415, 416, 417, 311, 295, 395, 296, 329, 297, 274,
	303, 301, 304, 403, 305, 276, 381, 421, 0, 324,
	391, 354, 277, 353, 382, 420, 419, 286, 446, 452,
	453, 542, 0, 458, 623, 624, 625, 467, 472, 473,
	474, 476, 477, 478, 479, 543, 560, 527, 497, 460,
	551, 494, 498, 499, 563, 0, 0, 0, 451, 343,
	344, 0, 322, 270, 271, 618, 832, 373, 565, 598,
	599, 490, 0, 846, 827, 829, 830, 833, 837, 838,
	839, 840, 841, 843, 845, 849, 617, 0, 544, 559,
	621, 558, 614, 379, 0, 400, 556, 503, 0, 548,
	522, 0, 549, 518, 553, 0, 492, 0, 407, 432,
	444, 461, 464, 493, 578, 579, 580, 275, 463, 582,
	583, 584, 585, 586, 587, 588, 581, 848, 525, 502,
	528, 443, 505, 504, 0, 0, 539, 780, 540, 541,
	363, 364, 365, 366, 835, 566, 293, 462, 389, 0,
	526, 0, 0, 0, 0, 0, 0, 0, 0, 531,
	532, 529, 626, 0, 589, 590, 0, 0, 456, 457,
	321, 328, 475, 330, 292, 378, 323, 441, 337, 0,
	468, 533, 469, 592, 595, 593, 594, 370, 333, 334,
	404, 338, 348, 392, 440, 376, 397, 290, 431, 405,
	352, 519, 546, 857, 831, 856, 858, 859, 855, 860,
	861, 842, 736, 0, 787, 853, 852, 854, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 574,
	573, 572, 571, 570, 569, 568, 567, 0, 0, 516,
	418, 302, 264, 298, 299, 306, 615, 612, 422, 616,
	0, 272, 496, 346, 0, 387, 320, 561, 562, 0,
	0, 820, 794, 795, 796, 733, 797, 791, 792, 734,
	793, 821, 785, 817, 818, 761, 788, 798, 816, 799,
	819, 822, 823, 862, 863, 805, 789, 236, 864, 802,
	824, 815, 814, 800, 786, 825, 826, 768, 763, 803,
	804, 790, 808, 809, 810, 735, 782, 783, 784, 806,
	807, 764, 765, 766, 767, 0, 0, 0, 447, 448,
	449, 471, 0, 433, 495, 613, 0, 0, 0, 0,
	0, 0, 0, 545, 557, 591, 0, 601, 602, 604,
	606, 811, 608, 410, 778, 619, 486, 487, 620, 597,
	0, 728, 0, 375, 0, 501, 534, 523, 607, 489,
	0, 0, 0, 0, 0, 0, 731, 0, 0, 0,
	315, 0, 0, 345, 538, 520, 530, 521, 506, 507,
	508, 515, 325, 509, 510, 511, 481, 512, 482, 513,
	514, 769, 537, 488, 406, 359, 555, 554, 0, 0,
	836, 844, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 723, 0, 0, 759, 813, 812, 746,
	756, 0, 0, 288, 210, 483, 603, 485, 484, 747,
	0, 748, 752, 755, 751, 749, 750, 0, 828, 0,
	0, 0, 0, 0, 0, 715, 727, 0, 732, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 724, 725, 0, 0, 0, 0, 779, 0,
	726, 0, 0, 774, 753, 757, 0, 0, 0, 0,
	278, 412, 429, 289, 402, 442, 294, 409, 284, 374,
	398, 0, 0, 280, 427, 408, 356, 335, 336, 279,
	0, 393, 313, 327, 310, 372, 754, 777, 781, 309,
	850, 775, 437, 282, 0, 436, 371, 423, 428, 357,
	351, 281, 425, 355, 350, 339, 317, 851, 340, 341,
	331, 383, 349, 384, 332, 361, 360, 362, 0, 0,
	0, 0, 0, 465, 466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 596, 772, 0,
	600, 0, 439, 0, 0, 834, 0, 0, 0, 411,
	0, 0, 342, 0, 0, 0, 776, 0, 396, 377,
	847, 3777, 0, 394, 347, 424, 385, 430, 413, 438,
	390, 386, 273, 414, 312, 358, 285, 287, 307, 314,
	316, 318, 319, 367, 368, 380, 401, 415, 416, 417,
	311, 295, 395, 296, 329, 297, 274, 303, 301, 304,
	403, 305, 276, 381, 421, 0, 324, 391, 354, 277,
	353, 382, 420, 419, 286, 446, 452, 453, 542, 0,
	458, 623, 624, 625, 467, 472, 473, 474, 476, 477,
	478, 479, 543, 560, 527, 497, 460, 551, 494, 498,
	499, 563, 0, 0, 0, 451, 343, 344, 0, 322,
	270, 271, 618, 832, 373, 565, 598, 599, 490, 0,
	846, 827, 829, 830, 833, 837, 838, 839, 840, 841,
	843, 845, 849, 617, 0, 544, 559, 621, 558, 614,
	379, 0, 400, 556, 503, 0, 548, 522, 0, 549,
	518, 553, 0, 492, 0, 407, 432, 444, 461, 464,
	493, 578, 579, 580, 275, 463, 582, 583, 584, 585,
	586, 587, 588, 581, 848, 525, 502, 528, 443, 505,
	504, 0, 0, 539, 780, 540, 541, 363, 364, 365,
	366, 835, 566, 293, 462, 389, 0, 526, 0, 0,
	0, 0, 0, 0, 0, 0, 531, 532, 529, 626,
	0, 589, 590, 0, 0, 456, 457, 321, 328, 475,
	330, 292, 378, 323, 441, 337, 0, 468, 533, 469,
	592, 595, 593, 594, 370, 333, 334, 404, 338, 348,
	392, 440, 376, 397, 290, 431, 405, 352, 519, 546,
	857, 831, 856, 858, 859, 855, 860, 861, 842, 736,
	0, 787, 853, 852, 854, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 574, 573, 572, 571,
	570, 569, 568, 567, 0, 0, 516, 418, 302, 264,
	298, 299, 306, 615, 612, 422, 616, 0, 272, 496,
	346, 0, 387, 320, 561, 562, 0, 0, 820, 794,
	795, 796, 733, 797, 791, 792, 734, 793, 821, 785,
	817, 818, 761, 788, 798, 816, 799, 819, 822, 823,
	862, 863, 805, 789, 236, 864, 802, 824, 815, 814,
	800, 786, 825, 826, 768, 763, 803, 804, 790, 808,
	809, 810, 735, 782, 783, 784, 806, 807, 764, 765,
	766, 767, 0, 0, 0, 447, 448, 449, 471, 0,
	433, 495, 613, 0, 0, 0, 0, 0, 0, 0,
	545, 557, 591, 0, 601, 602, 604, 606, 811, 608,
	410, 778, 619, 486, 487, 620, 597, 0, 728, 0,
	375, 0, 501, 534, 523, 607, 489, 0, 0, 0,
	0, 0, 0, 731, 0, 0, 0, 315, 1781, 0,
	345, 538, 520, 530, 521, 506, 507, 508, 515, 325,
	509, 510, 511, 481, 512, 482, 513, 514, 769, 537,
	488, 406, 359, 555, 554, 0, 0, 836, 844, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	723, 0, 0, 759, 813, 812, 746, 756, 0, 0,
	288, 210, 483, 603, 485, 484, 747, 0, 748, 752,
	755, 751, 749, 750, 0, 828, 0, 0, 0, 0,
	0, 0, 715, 727, 0, 732, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 724,
	725, 0, 0, 0, 0, 779, 0, 726, 0, 0,
	774, 753, 757, 0, 0, 0, 0, 278, 412, 429,
	289, 402, 442, 294, 409, 284, 374, 398, 0, 0,
	280, 427, 408, 356, 335, 336, 279, 0, 393, 313,
	327, 310, 372, 754, 777, 781, 309, 850, 775, 437,
	282, 0, 436, 371, 423, 428, 357, 351, 281, 425,
	355, 350, 339, 317, 851, 340, 341, 331, 383, 349,
	384, 332, 361, 360, 362, 0, 0, 0, 0, 0,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 596, 772, 0, 600, 0, 439,
	0, 0, 834, 0, 0, 0, 411, 0, 0, 342,
	0, 0, 0, 776, 0, 396, 377, 847, 0, 0,
	394, 347, 424, 385, 430, 413, 438, 390, 386, 273,
	414, 312, 358, 285, 287, 307, 314, 316, 318, 319,
	367, 368, 380, 401, 415, 416, 417, 311, 295, 395,
	296, 329, 297, 274, 303, 301, 304, 403, 305, 276,
	381, 421, 0, 324, 391, 354, 277, 353, 382, 420,
	419, 286, 446, 452, 453, 542, 0, 458, 623, 624,
	625, 467, 472, 473, 474, 476, 477, 478, 479, 543,
	560, 527, 497, 460, 551, 494, 498, 499, 563, 0,
	0, 0, 451, 343, 344, 0, 322, 270, 271, 618,
	832, 373, 565, 598, 599, 490, 0, 846, 827, 829,
	830, 833, 837, 838, 839, 840, 841, 843, 845, 849,
	617, 0, 544, 559, 621, 558, 614, 379, 0, 400,
	556, 503, 0, 548, 522, 0, 549, 518, 553, 0,
	492, 0, 407, 432, 444, 461, 464, 493, 578, 579,
	580, 275, 463, 582, 583, 584, 585, 586, 587, 588,
	581, 848, 525, 502, 528, 443, 505, 504, 0, 0,
	539, 780, 540, 541, 363, 364, 365, 366, 835, 566,
	293, 462, 389, 0, 526, 0, 0, 0, 0, 0,
	0, 0, 0, 531, 532, 529, 626, 0, 589, 590,
	0, 0, 456, 457, 321, 328, 475, 330, 292, 378,
	323, 441, 337, 0, 468, 533, 469, 592, 595, 593,
	594, 370, 333, 334, 404, 338, 348, 392, 440, 376,
	397, 290, 431, 405, 352, 519, 546, 857, 831, 856,
	858, 859, 855, 860, 861, 842, 736, 0, 787, 853,
	852, 854, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 574, 573, 572, 571, 570, 569, 568,
	567, 0, 0, 516, 418, 302, 264, 298, 299, 306,
	615, 612, 422, 616, 0, 272, 496, 346, 0, 387,
	320, 561, 562, 0, 0, 820, 794, 795, 796, 733,
	797, 791, 792, 734, 793, 821, 785, 817, 818, 761,
	788, 798, 816, 799, 819, 822, 823, 862, 863, 805,
	789, 236, 864, 802, 824, 815, 814, 800, 786, 825,
	826, 768, 763, 803, 804, 790, 808, 809, 810, 735,
	782, 783, 784, 806, 807, 764, 765, 766, 767, 0,
	0, 0, 447, 448, 449, 471, 0, 433, 495, 613,
	0, 0, 0, 0, 0, 0, 0, 545, 557, 591,
	0, 601, 602, 604, 606, 811, 608, 410, 778, 619,
	486, 487, 620, 597, 0, 728, 0, 375, 0, 501,
	534, 523, 607, 489, 0, 0, 0, 0, 0, 0,
	731, 0, 0, 0, 315, 0, 0, 345, 538, 520,
	530, 521, 506, 507, 508, 515, 325, 509, 510, 511,
	481, 512, 482, 513, 514, 769, 537, 488, 406, 359,
	555, 554, 0, 0, 836, 844, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 723, 0, 0,
	759, 813, 812, 746, 756, 0, 0, 288, 210, 483,
	603, 485, 484, 747, 0, 748, 752, 755, 751, 749,
	750, 0, 828, 0, 0, 0, 0, 0, 0, 715,
	727, 0, 732, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 724, 725, 1504, 0,
	0, 0, 779, 0, 726, 0, 0, 774, 753, 757,
	0, 0, 0, 0, 278, 412, 429, 289, 402, 442,
	294, 409, 284, 374, 398, 0, 0, 280, 427, 408,
	356, 335, 336, 279, 0, 393, 313, 327, 310, 372,
	754, 777, 781, 309, 850, 775, 437, 282, 0, 436,
	371, 423, 428, 357, 351, 281, 425, 355, 350, 339,
	317, 851, 340, 341, 331, 383, 349, 384, 332, 361,
	360, 362, 0, 0, 0, 0, 0, 465, 466, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 596, 772, 0, 600, 0, 439, 0, 0, 834,
	0, 0, 0, 411, 0, 0, 342, 0, 0, 0,
	776, 0, 396, 377, 847, 0, 0, 394, 347, 424,
	385, 430, 413, 438, 390, 386, 273, 414, 312, 358,
	285, 287, 307, 314, 316, 318, 319, 367, 368, 380,
	401, 415, 416, 417, 311, 295, 395, 296, 329, 297,
	274, 303, 301, 304, 403, 305, 276, 381, 421, 0,
	324, 391, 354, 277, 353, 382, 420, 419, 286, 446,
	452, 453, 542, 0, 458, 623, 624, 625, 467, 472,
	473, 474, 476, 477, 478, 479, 543, 560, 527, 497,
	460, 551, 494, 498, 499, 563, 0, 0, 0, 451,
	343, 344, 0, 322, 270, 271, 618, 832, 373, 565,
	598, 599, 490, 0, 846, 827, 829, 830, 833, 837,
	838, 839, 840, 841, 843, 845, 849, 617, 0, 544,
	559, 621, 558, 614, 379, 0, 400, 556, 503, 0,
	548, 522, 0, 549, 518, 553, 0, 492, 0, 407,
	432, 444, 461, 464, 493, 578, 579, 580, 275, 463,
	582, 583, 584, 585, 586, 587, 588, 581, 848, 525,
	502, 528, 443, 505, 504, 0, 0, 539, 780, 540,
	541, 363, 364, 365, 366, 835, 566, 293, 462, 389,
	0, 526, 0, 0, 0, 0, 0, 0, 0, 0,
	531, 532, 529, 626, 0, 589, 590, 0, 0, 456,
	457, 321, 328, 475, 330, 292, 378, 323, 441, 337,
	0, 468, 533, 469, 592, 595, 593, 594, 370, 333,
	334, 404, 338, 348, 392, 440, 376, 397, 290, 431,
	405, 352, 519, 546, 857, 831, 856, 858, 859, 855,
	860, 861, 842, 736, 0, 787, 853, 852, 854, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	574, 573, 572, 571, 570, 569, 568, 567, 0, 0,
	516, 418, 302, 264, 298, 299, 306, 615, 612, 422,
	616, 0, 272, 496, 346, 0, 387, 320, 561, 562,
	0, 0, 820, 794, 795, 796, 733, 797, 791, 792,
	734, 793, 821, 785, 817, 818, 761, 788, 798, 816,
	799, 819, 822, 823, 862, 863, 805, 789, 236, 864,
	802, 824, 815, 814, 800, 786, 825, 826, 768, 763,
	803, 804, 790, 808, 809, 810, 735, 782, 783, 784,
	806, 807, 764, 765, 766, 767, 0, 0, 0, 447,
	448, 449, 471, 0, 433, 495, 613, 0, 0, 0,
	0, 0, 0, 0, 545, 557, 591, 0, 601, 602,
	604, 606, 811, 608, 410, 0, 619, 486, 487, 620,
	597, 778, 728, 0, 2154, 0, 0, 0, 0, 0,
	375, 0, 501, 534, 523, 607, 489, 0, 0, 0,
	0, 0, 0, 731, 0, 0, 0, 315, 0, 0,
	345, 538, 520, 530, 521, 506, 507, 508, 515, 325,
	509, 510, 511, 481, 512, 482, 513, 514, 769, 537,
	488, 406, 359, 555, 554, 0, 0, 836, 844, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	723, 0, 0, 759, 813, 812, 746, 756, 0, 0,
	288, 210, 483, 603, 485, 484, 747, 0, 748, 752,
	755, 751, 749, 750, 0, 828, 0, 0, 0, 0,
	0, 0, 715, 727, 0, 732, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 724,
	725, 0, 0, 0, 0, 779, 0, 726, 0, 0,
	774, 753, 757, 0, 0, 0, 0, 278, 412, 429,
	289, 402, 442, 294, 409, 284, 374, 398, 0, 0,
	280, 427, 408, 356, 335, 336, 279, 0, 393, 313,
	327, 310, 372, 754, 777, 781, 309, 850, 775, 437,
	282, 0, 436, 371, 423, 428, 357, 351, 281, 425,
	355, 350, 339, 317, 851, 340, 341, 331, 383, 349,
	384, 332, 361, 360, 362, 0, 0, 0, 0, 0,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 596, 772, 0, 600, 0, 439,
	0, 0, 834, 0, 0, 0, 411, 0, 0, 342,
	0, 0, 0, 776, 0, 396, 377, 847, 0, 0,
	394, 347, 424, 385, 430, 413, 438, 390, 386, 273,
	414, 312, 358, 285, 287, 307, 314, 316, 318, 319,
	367, 368, 380, 401, 415, 416, 417, 311, 295, 395,
	296, 329, 297, 274, 303, 301, 304, 403, 305, 276,
	381, 421, 0, 324, 391, 354, 277, 353, 382, 420,
	419, 286, 446, 452, 453, 542, 0, 458, 623, 624,
	625, 467, 472, 473, 474, 476, 477, 478, 479, 543,
	560, 527, 497, 460, 551, 494, 498, 499, 563, 0,
	0, 0, 451, 343, 344, 0, 322, 270, 271, 618,
	832, 373, 565, 598, 599, 490, 0, 846, 827, 829,
	830, 833, 837, 838, 839, 840, 841, 843, 845, 849,
	617, 0, 544, 559, 621, 558, 614, 379, 0, 400,
	556, 503, 0, 548, 522, 0, 549, 518, 553, 0,
	492, 0, 407, 432, 444, 461, 464, 493, 578, 579,
	580, 275, 463, 582, 583, 584, 585, 586, 587, 588,
	581, 848, 525, 502, 528, 443, 505, 504, 0, 0,
	539, 780, 540, 541, 363, 364, 365, 366, 835, 566,
	293, 462, 389, 0, 526, 0, 0, 0, 0, 0,
	0, 0, 0, 531, 532, 529, 626, 0, 589, 590,
	0, 0, 456, 457, 321, 328, 475, 330, 292, 378,
	323, 441, 337, 0, 468, 533, 469, 592, 595, 593,
	594, 370, 333, 334, 404, 338, 348, 392, 440, 376,
	397, 290, 431, 405, 352, 519, 546, 857, 831, 856,
	858, 859, 855, 860, 861, 842, 736, 0, 787, 853,
	852, 854, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 574, 573, 572, 571, 570, 569, 568,
	567, 0, 0, 516, 418, 302, 264, 298, 299, 306,
	615, 612, 422, 616, 0, 272, 496, 346, 0, 387,
	320, 561, 562, 0, 0, 820, 794, 795, 796, 733,
	797, 791, 792, 734, 793, 821, 785, 817, 818, 761,
	788, 798, 816, 799, 819, 822, 823, 862, 863, 805,
	789, 236, 864, 802, 824, 815, 814, 800, 786, 825,
	826, 768, 763, 803, 804, 790, 808, 809, 810, 735,
	782, 783, 784, 806, 807, 764, 765, 766, 767, 0,
	0, 0, 447, 448, 449, 471, 0, 433, 495, 613,
	0, 0, 0, 0, 0, 0, 0, 545, 557, 591,
	0, 601, 602, 604, 606, 811, 608, 410, 778, 619,
	486, 487, 620, 597, 0, 728, 0, 375, 0, 501,
	534, 523, 607, 489, 0, 0, 0, 0, 0, 0,
	731, 0, 0, 0, 315, 0, 0, 345, 538, 520,
	530, 521, 506, 507, 508, 515, 325, 509, 510, 511,
	481, 512, 482, 513, 514, 769, 537, 488, 406, 359,
	555, 554, 0, 0, 836, 844, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 723, 0, 0,
	759, 813, 812, 746, 756, 0, 0, 288, 210, 483,
	603, 485, 484, 747, 0, 748, 752, 755, 751, 749,
	750, 0, 828, 0, 0, 0, 0, 0, 0, 715,
	727, 0, 732, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 724, 725, 1774, 0,
	0, 0, 779, 0, 726, 0, 0, 774, 753, 757,
	0, 0, 0, 0, 278, 412, 429, 289, 402, 442,
	294, 409, 284, 374, 398, 0, 0, 280, 427, 408,
	356, 335, 336, 279, 0, 393, 313, 327, 310, 372,
	754, 777, 781, 309, 850, 775, 437, 282, 0, 436,
	371, 423, 428, 357, 351, 281, 425, 355, 350, 339,
	317, 851, 340, 341, 331, 383, 349, 384, 332, 361,
	360, 362, 0, 0, 0, 0, 0, 465, 466, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 596, 772, 0, 600, 0, 439, 0, 0, 834,
	0, 0, 0, 411, 0, 0, 342, 0, 0, 0,
	776, 0, 396, 377, 847, 0, 0, 394, 347, 424,
	385, 430, 413, 438, 390, 386, 273, 414, 312, 358,
	285, 287, 307, 314, 316, 318, 319, 367, 368, 380,
	401, 415, 416, 417, 311, 295, 395, 296, 329, 297,
	274, 303, 301, 304, 403, 305, 276, 381, 421, 0,
	324, 391, 354, 277, 353, 382, 420, 419, 286, 446,
	452, 453, 542, 0, 458, 623, 624, 625, 467, 472,
	473, 474, 476, 477, 478, 479, 543, 560, 527, 497,
	460, 551, 494, 498, 499, 563, 0, 0, 0, 451,
	343, 344, 0, 322, 270, 271, 618, 832, 373, 565,
	598, 599, 490, 0, 846, 827, 829, 830, 833, 837,
	838, 839, 840, 841, 843, 845, 849, 617, 0, 544,
	559, 621, 558, 614, 379, 0, 400, 556, 503, 0,
	548, 522, 0, 549, 518, 553, 0, 492, 0, 407,
	432, 444, 461, 464, 493, 578, 579, 580, 275, 463,
	582, 583, 584, 585, 586, 587, 588, 581, 848, 525,
	502, 528, 443, 505, 504, 0, 0, 539, 780, 540,
	541, 363, 364, 365, 366, 835, 566, 293, 462, 389,
	0, 526, 0, 0, 0, 0, 0, 0, 0, 0,
	531, 532, 529, 626, 0, 589, 590, 0, 0, 456,
	457, 321, 328, 475, 330, 292, 378, 323, 441, 337,
	0, 468, 533, 469, 592, 595, 593, 594, 370, 333,
	334, 404, 338, 348, 392, 440, 376, 397, 290, 431,
	405, 352, 519, 546, 857, 831, 856, 858, 859, 855,
	860, 861, 842, 736, 0, 787, 853, 852, 854, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	574, 573, 572, 571, 570, 569, 568, 567, 0, 0,
	516, 418, 302, 264, 298, 299, 306, 615, 612, 422,
	616, 0, 272, 496, 346, 0, 387, 320, 561, 562,
	0, 0, 820, 794, 795, 796, 733, 797, 791, 792,
	734, 793, 821, 785, 817, 818, 761, 788, 798, 816,
	799, 819, 822, 823, 862, 863, 805, 789, 236, 864,
	802, 824, 815, 814, 800, 786, 825, 826, 768, 763,
	803, 804, 790, 808, 809, 810, 735, 782, 783, 784,
	806, 807, 764, 765, 766, 767, 0, 0, 0, 447,
	448, 449, 471, 0, 433, 495, 613, 0, 0, 0,
	0, 0, 0, 0, 545, 557, 591, 0, 601, 602,
	604, 606, 811, 608, 410, 778, 619, 486, 487, 620,
	597, 0, 728, 0, 375, 0, 501, 534, 523, 607,
	489, 0, 0, 0, 0, 0, 0, 731, 0, 0,
	0, 315, 0, 0, 345, 538, 520, 530, 521, 506,
	507, 508, 515, 325, 509, 510, 511, 481, 512, 482,
	513, 514, 769, 537, 488, 406, 359, 555, 554, 0,
	0, 836, 844, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 723, 0, 0, 759, 813, 812,
	746, 756, 0, 0, 288, 210, 483, 603, 485, 484,
	747, 0, 748, 752, 755, 751, 749, 750, 0, 828,
	0, 0, 0, 0, 0, 0, 715, 727, 0, 732,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 724, 725, 0, 0, 0, 0, 779,
	0, 726, 0, 0, 774, 753, 757, 0, 0, 0,
	0, 278, 412, 429, 289, 402, 442, 294, 409, 284,
	374, 398, 0, 0, 280, 427, 408, 356, 335, 336,
	279, 0, 393, 313, 327, 310, 372, 754, 777, 781,
	309, 850, 775, 437, 282, 0, 436, 371, 423, 428,
	357, 351, 281, 425, 355, 350, 339, 317, 851, 340,
	341, 331, 383, 349, 384, 332, 361, 360, 362, 0,
	0, 0, 0, 0, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 596, 772,
	0, 600, 0, 439, 0, 0, 834, 0, 0, 0,
	411, 0, 0, 342, 0, 0, 0, 776, 0, 396,
	377, 847, 0, 0, 394, 347, 424, 385, 430, 413,
	438, 390, 386, 273, 414, 312, 358, 285, 287, 307,
	314, 316, 318, 319, 367, 368, 380, 401, 415, 416,
	417, 311, 295, 395, 296, 329, 297, 274, 303, 301,
	304, 403, 305, 276, 381, 421, 0, 324, 391, 354,
	277, 353, 382, 420, 419, 286, 446, 452, 453, 542,
	0, 458, 623, 624, 625, 467, 472, 473, 474, 476,
	477, 478, 479, 543, 560, 527, 497, 460, 551, 494,
	498, 499, 563, 0, 0, 0, 451, 343, 344, 0,
	322, 270, 271, 618, 832, 373, 565, 598, 599, 490,
	0, 846, 827, 829, 830, 833, 837, 838, 839, 840,
	841, 843, 845, 849, 617, 0, 544, 559, 621, 558,
	614, 379, 0, 400, 556, 503, 0, 548, 522, 0,
	549, 518, 553, 0, 492, 0, 407, 432, 444, 461,
	464, 493, 578, 579, 580, 275, 463, 582, 583, 584,
	585, 586, 587, 588, 581, 848, 525, 502, 528, 443,
	505, 504, 0, 0, 539, 780, 540, 541, 363, 364,
	365, 366, 835, 566, 293, 462, 389, 0, 526, 0,
	0, 0, 0, 0, 0, 0, 0, 531, 532, 529,
	626, 0, 589, 590, 0, 0, 456, 457, 321, 328,
	475, 330, 292, 378, 323, 441, 337, 0, 468, 533,
	469, 592, 595, 593, 594, 370, 333, 334, 404, 338,
	348, 392, 440, 376, 397, 290, 431, 405, 352, 519,
	546, 857, 831, 856, 858, 859, 855, 860, 861, 842,
	736, 0, 787, 853, 852, 854, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 574, 573, 572,
	571, 570, 569, 568, 567, 0, 0, 516, 418, 302,
	264, 298, 299, 306, 615, 612, 422, 616, 0, 272,
	496, 346, 0, 387, 320, 561, 562, 0, 0, 820,
	794, 795, 796, 733, 797, 791, 792, 734, 793, 821,
	785, 817, 818, 761, 788, 798, 816, 799, 819, 822,
	823, 862, 863, 805, 789, 236, 864, 802, 824, 815,
	814, 800, 786, 825, 826, 768, 763, 803, 804, 790,
	808, 809, 810, 735, 782, 783, 784, 806, 807, 764,
	765, 766, 767, 0, 0, 0, 447, 448, 449, 471,
	0, 433, 495, 613, 0, 0, 0, 0, 0, 0,
	0, 545, 557, 591, 0, 601, 602, 604, 606, 811,
	608, 410, 778, 619, 486, 487, 620, 597, 0, 728,
	0, 375, 0, 501, 534, 523, 607, 489, 0, 0,
	0, 0, 0, 0, 731, 0, 0, 0, 315, 0,
	0, 345, 538, 520, 530, 521, 506, 507, 508, 515,
	325, 509, 510, 511, 481, 512, 482, 513, 514, 769,
	537, 488, 406, 359, 555, 554, 0, 0, 836, 844,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 723, 0, 0, 759, 813, 812, 746, 756, 0,
	0, 288, 210, 483, 603, 485, 484, 2609, 0, 2610,
	752, 755, 751, 749, 750, 0, 828, 0, 0, 0,
	0, 0, 0, 715, 727, 0, 732, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	724, 725, 0, 0, 0, 0, 779, 0, 726, 0,
	0, 774, 753, 757, 0, 0, 0, 0, 278, 412,
	429, 289, 402, 442, 294, 409, 284, 374, 398, 0,
	0, 280, 427, 408, 356, 335, 336, 279, 0, 393,
	313, 327, 310, 372, 754, 777, 781, 309, 850, 775,
	437, 282, 0, 436, 371, 423, 428, 357, 351, 281,
	425, 355, 350, 339, 317, 851, 340, 341, 331, 383,
	349, 384, 332, 361, 360, 362, 0, 0, 0, 0,
	0, 465, 466, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 596, 772, 0, 600, 0,
	439, 0, 0, 834, 0, 0, 0, 411, 0, 0,
	342, 0, 0, 0, 776, 0, 396, 377, 847, 0,
	0, 394, 347, 424, 385, 430, 413, 438, 390, 386,
	273, 414, 312, 358, 285, 287, 307, 314, 316, 318,
	319, 367, 368, 380, 401, 415, 416, 417, 311, 295,
	395, 296, 329, 297, 274, 303, 301, 304, 403, 305,
	276, 381, 421, 0, 324, 391, 354, 277, 353, 382,
	420, 419, 286, 446, 452, 453, 542, 0, 458, 623,
	624, 625, 467, 472, 473, 474, 476, 477, 478, 479,
	543, 560, 527, 497, 460, 551, 494, 498, 499, 563,
	0, 0, 0, 451, 343, 344, 0, 322, 270, 271,
	618, 832, 373, 565, 598, 599, 490, 0, 846, 827,
	829, 830, 833, 837, 838, 839, 840, 841, 843, 845,
	849, 617, 0, 544, 559, 621, 558, 614, 379, 0,
	400, 556, 503, 0, 548, 522, 0, 549, 518, 553,
	0, 492, 0, 407, 432, 444, 461, 464, 493, 578,
	579, 580, 275, 463, 582, 583, 584, 585, 586, 587,
	588, 581, 848, 525, 502, 528, 443, 505, 504, 0,
	0, 539, 780, 540, 541, 363, 364, 365, 366, 835,
	566, 293, 462, 389, 0, 526, 0, 0, 0, 0,
	0, 0, 0, 0, 531, 532, 529, 626, 0, 589,
	590, 0, 0, 456, 457, 321, 328, 475, 330, 292,
	378, 323, 441, 337, 0, 468, 533, 469, 592, 595,
	593, 594, 370, 333, 334, 404, 338, 348, 392, 440,
	376, 397, 290, 431, 405, 352, 519, 546, 857, 831,
	856, 858, 859, 855, 860, 861, 842, 736, 0, 787,
	853, 852, 854, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 574, 573, 572, 571, 570, 569,
	568, 567, 0, 0, 516, 418, 302, 264, 298, 299,
	306, 615, 612, 422, 616, 0, 272, 496, 346, 0,
	387, 320, 561, 562, 0, 0, 820, 794, 795, 796,
	733, 797, 791, 792, 734, 793, 821, 785, 817, 818,
	761, 788, 798, 816, 799, 819, 822, 823, 862, 863,
	805, 789, 236, 864, 802, 824, 815, 814, 800, 786,
	825, 826, 768, 763, 803, 804, 790, 808, 809, 810,
	735, 782, 783, 784, 806, 807, 764, 765, 766, 767,
	0, 0, 0, 447, 448, 449, 471, 0, 433, 495,
	613, 0, 0, 0, 0, 0, 0, 0, 545, 557,
	591, 0, 601, 602, 604, 606, 811, 608, 410, 778,
	619, 486, 487, 620, 597, 0, 728, 0, 375, 0,
	501, 534, 523, 607, 489, 0, 0, 1644, 0, 0,
	0, 731, 0, 0, 0, 315, 0, 0, 345, 538,
	520, 530, 521, 506, 507, 508, 515, 325, 509, 510,
	511, 481, 512, 482, 513, 514, 769, 537, 488, 406,
	359, 555, 554, 0, 0, 836, 844, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 723, 0,
	0, 759, 813, 812, 746, 756, 0, 0, 288, 210,
	483, 603, 485, 484, 747, 0, 748, 752, 755, 751,
	749, 750, 0, 828, 0, 0, 0, 0, 0, 0,
	0, 727, 0, 732, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 724, 725, 0,
	0, 0, 0, 779, 0, 726, 0, 0, 774, 753,
	757, 0, 0, 0, 0, 278, 412, 429, 289, 402,
	442, 294, 409, 284, 374, 398, 0, 0, 280, 427,
	408, 356, 335, 336, 279, 0, 393, 313, 327, 310,
	372, 754, 777, 781, 309, 850, 775, 437, 282, 0,
	436, 371, 423, 428, 357, 351, 281, 425, 355, 350,
	339, 317, 851, 340, 341, 331, 383, 349, 384, 332,
	361, 360, 362, 0, 0, 0, 0, 0, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 596, 772, 0, 600, 0, 439, 0, 0,
	834, 0, 0, 0, 411, 0, 0, 342, 0, 0,
	0, 776, 0, 396, 377, 847, 0, 0, 394, 347,
	424, 385, 430, 413, 438, 390, 386, 273, 414, 312,
	358, 285, 287, 307, 314, 316, 318, 319, 367, 368,
	380, 401, 415, 416, 417, 311, 295, 395, 296, 329,
	297, 274, 303, 301, 304, 403, 305, 276, 381, 421,
	0, 324, 391, 354, 277, 353, 382, 420, 419, 286,
	446, 1645, 1646, 542, 0, 458, 623, 624, 625, 467,
	472, 473, 474, 476, 477, 478, 479, 543, 560, 527,
	497, 460, 551, 494, 498, 499, 563, 0, 0, 0,
	451, 343, 344, 0, 322, 270, 271, 618, 832, 373,
	565, 598, 599, 490, 0, 846, 827, 829, 830, 833,
	837, 838, 839, 840, 841, 843, 845, 849, 617, 0,
	544, 559, 621, 558, 614, 379, 0, 400, 556, 503,
	0, 548, 522, 0, 549, 518, 553, 0, 492, 0,
	407, 432, 444, 461, 464, 493, 578, 579, 580, 275,
	463, 582, 583, 584, 585, 586, 587, 588, 581, 848,
	525, 502, 528, 443, 505, 504, 0, 0, 539, 780,
	540, 541, 363, 364, 365, 366, 835, 566, 293, 462,
	389, 0, 526, 0, 0, 0, 0, 0, 0, 0,
	0, 531, 532, 529, 626, 0, 589, 590, 0, 0,
	456, 457, 321, 328, 475, 330, 292, 378, 323, 441,
	337, 0, 468, 533, 469, 592, 595, 593, 594, 370,
	333, 334, 404, 338, 348, 392, 440, 376, 397, 290,
	431, 405, 352, 519, 546, 857, 831, 856, 858, 859,
	855, 860, 861, 842, 736, 0, 787, 853, 852, 854,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 574, 573, 572, 571, 570, 569, 568, 567, 0,
	0, 516, 418, 302, 264, 298, 299, 306, 615, 612,
	422, 616, 0, 272, 496, 346, 0, 387, 320, 561,
	562, 0, 0, 820, 794, 795, 796, 733, 797, 791,
	792, 734, 793, 821, 785, 817, 818, 761, 788, 798,
	816, 799, 819, 822, 823, 862, 863, 805, 789, 236,
	864, 802, 824, 815, 814, 800, 786, 825, 826, 768,
	763, 803, 804, 790, 808, 809, 810, 735, 782, 783,
	784, 806, 807, 764, 765, 766, 767, 0, 0, 0,
	447, 448, 449, 471, 0, 433, 495, 613, 0, 0,
	0, 0, 0, 0, 0, 545, 557, 591, 0, 601,
	602, 604, 606, 811, 608, 410, 778, 619, 486, 487,
	620, 597, 0, 728, 0, 375, 0, 501, 534, 523,
	607, 489, 0, 0, 0, 0, 0, 0, 731, 0,
	0, 0, 315, 0, 0, 345, 538, 520, 530, 521,
	506, 507, 508, 515, 325, 509, 510, 511, 481, 512,
	482, 513, 514, 769, 537, 488, 406, 359, 555, 554,
	0, 0, 836, 844, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 723, 0, 0, 759, 813,
	812, 746, 756, 0, 0, 288, 210, 483, 603, 485,
	484, 747, 0, 748, 752, 755, 751, 749, 750, 0,
	828, 0, 0, 0, 0, 0, 0, 0, 727, 0,
	732, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 724, 725, 0, 0, 0, 0,
	779, 0, 726, 0, 0, 774, 753, 757, 0, 0,
	0, 0, 278, 412, 429, 289, 402, 442, 294, 409,
	284, 374, 398, 0, 0, 280, 427, 408, 356, 335,
	336, 279, 0, 393, 313, 327, 310, 372, 754, 777,
	781, 309, 850, 775, 437, 282, 0, 436, 371, 423,
	428, 357, 351, 281, 425, 355, 350, 339, 317, 851,
	340, 341, 331, 383, 349, 384, 332, 361, 360, 362,
	0, 0, 0, 0, 0, 465, 466, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 596,
	772, 0, 600, 0, 439, 0, 0, 834, 0, 0,
	0, 411, 0, 0, 342, 0, 0, 0, 776, 0,
	396, 377, 847, 0, 0, 394, 347, 424, 385, 430,
	413, 438, 390, 386, 273, 414, 312, 358, 285, 287,
	307, 314, 316, 318, 319, 367, 368, 380, 401, 415,
	416, 417, 311, 295, 395, 296, 329, 297, 274, 303,
	301, 304, 403, 305, 276, 381, 421, 0, 324, 391,
	354, 277, 353, 382, 420, 419, 286, 446, 452, 453,
	542, 0, 458, 623, 624, 625, 467, 472, 473, 474,
	476, 477, 478, 479, 543, 560, 527, 497, 460, 551,
	494, 498, 499, 563, 0, 0, 0, 451, 343, 344,
	0, 322, 270, 271, 618, 832, 373, 565, 598, 599,
	490, 0, 846, 827, 829, 830, 833, 837, 838, 839,
	840, 841, 843, 845, 849, 617, 0, 544, 559, 621,
	558, 614, 379, 0, 400, 556, 503, 0, 548, 522,
	0, 549, 518, 553, 0, 492, 0, 407, 432, 444,
	461, 464, 493, 578, 579, 580, 275, 463, 582, 583,
	584, 585, 586, 587, 588, 581, 848, 525, 502, 528,
	443, 505, 504, 0, 0, 539, 780, 540, 541, 363,
	364, 365, 366, 835, 566, 293, 462, 389, 0, 526,
	0, 0, 0, 0, 0, 0, 0, 0, 531, 532,
	529, 626, 0, 589, 590, 0, 0, 456, 457, 321,
	328, 475, 330, 292, 378, 323, 441, 337, 0, 468,
	533, 469, 592, 595, 593, 594, 370, 333, 334, 404,
	338, 348, 392, 440, 376, 397, 290, 431, 405, 352,
	519, 546, 857, 831, 856, 858, 859, 855, 860, 861,
	842, 736, 0, 787, 853, 852, 854, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 574, 573,
	572, 571, 570, 569, 568, 567, 0, 0, 516, 418,
	302, 264, 298, 299, 306, 615, 612, 422, 616, 0,
	272, 496, 346, 0, 387, 320, 561, 562, 0, 0,
	820, 794, 795, 796, 733, 797, 791, 792, 734, 793,
	821, 785, 817, 818, 761, 788, 798, 816, 799, 819,
	822, 823, 862, 863, 805, 789, 236, 864, 802, 824,
	815, 814, 800, 786, 825, 826, 768, 763, 803, 804,
	790, 808, 809, 810, 735, 782, 783, 784, 806, 807,
	764, 765, 766, 767, 0, 0, 0, 447, 448, 449,
	471, 0, 433, 495, 613, 0, 0, 0, 0, 0,
	0, 0, 545, 557, 591, 0, 601, 602, 604, 606,
	811, 608, 410, 778, 619, 486, 487, 620, 597, 0,
	728, 0, 375, 0, 501, 534, 523, 607, 489, 0,
	0, 0, 0, 0, 0, 731, 0, 0, 0, 315,
	0, 0, 345, 538, 520, 530, 521, 506, 507, 508,
	515, 325, 509, 510, 511, 481, 512, 482, 513, 514,
	769, 537, 488, 406, 359, 555, 554, 0, 0, 836,
	844, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 759, 813, 812, 746, 756,
	0, 0, 288, 210, 483, 603, 485, 484, 747, 0,
	748, 752, 755, 751, 749, 750, 0, 828, 0, 0,
	0, 0, 0, 0, 715, 727, 0, 732, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 724, 725, 0, 0, 0, 0, 779, 0, 726,
	0, 0, 774, 753, 757, 0, 0, 0, 0, 278,
	412, 429, 289, 402, 442, 294, 409, 284, 374, 398,
	0, 0, 280, 427, 408, 356, 335, 336, 279, 0,
	393, 313, 327, 310, 372, 754, 777, 781, 309, 850,
	775, 437, 282, 0, 436, 371, 423, 428, 357, 351,
	281, 425, 355, 350, 339, 317, 851, 340, 341, 331,
	383, 349, 384, 332, 361, 360, 362, 0, 0, 0,
	0, 0, 465, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 596, 772, 0, 600,
	0, 439, 0, 0, 834, 0, 0, 0, 411, 0,
	0, 342, 0, 0, 0, 776, 0, 396, 377, 847,
	0, 0, 394, 347, 424, 385, 430, 413, 438, 390,
	386, 273, 414, 312, 358, 285, 287, 307, 314, 316,
	318, 319, 367, 368, 380, 401, 415, 416, 417, 311,
	295, 395, 296, 329, 297, 274, 303, 301, 304, 403,
	305, 276, 381, 421, 0, 324, 391, 354, 277, 353,
	382, 420, 419, 286, 446, 452, 453, 542, 0, 458,
	623, 624, 625, 467, 472, 473, 474, 476, 477, 478,
	479, 543, 560, 527, 497, 460, 551, 494, 498, 499,
	563, 0, 0, 0, 451, 343, 344, 0, 322, 270,
	271, 618, 832, 373, 565, 598, 599, 490, 0, 846,
	827, 829, 830, 833, 837, 838, 839, 840, 841, 843,
	845, 849, 617, 0, 544, 559, 621, 558, 614, 379,
	0, 400, 556, 503, 0, 548, 522, 0, 549, 518,
	553, 0, 492, 0, 407, 432, 444, 461, 464, 493,
	578, 579, 580, 275, 463, 582, 583, 584, 585, 586,
	587, 588, 581, 848, 525, 502, 528, 443, 505, 504,
	0, 0, 539, 780, 540, 541, 363, 364, 365, 366,
	835, 566, 293, 462, 389, 0, 526, 0, 0, 0,
	0, 0, 0, 0, 0, 531, 532, 529, 626, 0,
	589, 590, 0, 0, 456, 457, 321, 328, 475, 330,
	292, 378, 323, 441, 337, 0, 468, 533, 469, 592,
	595, 593, 594, 370, 333, 334, 404, 338, 348, 392,
	440, 376, 397, 290, 431, 405, 352, 519, 546, 857,
	831, 856, 858, 859, 855, 860, 861, 842, 736, 0,
	787, 853, 852, 854, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 574, 573, 572, 571, 570,
	569, 568, 567, 0, 0, 516, 418, 302, 264, 298,
	299, 306, 615, 612, 422, 616, 0, 272, 496, 346,
	0, 387, 320, 561, 562, 0, 0, 820, 794, 795,
	796, 733, 797, 791, 792, 734, 793, 821, 785, 817,
	818, 761, 788, 798, 816, 799, 819, 822, 823, 862,
	863, 805, 789, 236, 864, 802, 824, 815, 814, 800,
	786, 825, 826, 768, 763, 803, 804, 790, 808, 809,
	810, 735, 782, 783, 784, 806, 807, 764, 765, 766,
	767, 0, 0, 0, 447, 448, 449, 471, 0, 433,
	495, 613, 0, 0, 0, 0, 0, 0, 0, 545,
	557, 591, 0, 601, 602, 604, 606, 811, 608, 410,
	0, 619, 486, 487, 620, 597, 0, 728, 187, 57,
	176, 149, 0, 0, 0, 0, 0, 0, 375, 0,
	501, 534, 523, 607, 489, 0, 177, 0, 0, 0,
	0, 0, 0, 169, 0, 315, 0, 178, 345, 538,
	520, 530, 521, 506, 507, 508, 515, 325, 509, 510,
	511, 481, 512, 482, 513, 514, 125, 537, 488, 406,
	359, 555, 554, 0, 0, 0, 0, 0, 0, 0,
	0, 113, 0, 0, 0, 0, 0, 0, 181, 0,
	0, 209, 0, 0, 0, 0, 0, 0, 288, 210,
	483, 603, 485, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 291, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 201, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 278, 412, 429, 289, 402,
	442, 294, 409, 284, 374, 398, 0, 0, 280, 427,
	408, 356, 335, 336, 279, 0, 393, 313, 327, 310,
	372, 0, 426, 454, 309, 445, 0, 437, 282, 0,
	436, 371, 423, 428, 357, 351, 281, 425, 355, 350,
	339, 317, 470, 340, 341, 331, 383, 349, 384, 332,
	361, 360, 362, 0, 0, 0, 0, 0, 465, 466,
	0, 0, 0, 0, 0, 0, 148, 175, 185, 0,
	111, 0, 596, 0, 0, 600, 0, 439, 0, 0,
	202, 0, 0, 0, 411, 0, 0, 342, 174, 168,
	167, 455, 0, 396, 377, 214, 0, 0, 394, 347,
	424, 385, 430, 413, 438, 390, 386, 273, 414, 312,
	358, 285, 287, 307, 314, 316, 318, 319, 367, 368,
	380, 401, 415, 416, 417, 311, 295, 395, 296, 329,
	297, 274, 303, 301, 304, 403, 305, 276, 381, 421,
	0, 324, 391, 354, 277, 353, 382, 420, 419, 286,
	446, 452, 453, 542, 0, 458, 575, 576, 577, 467,
	472, 473, 474, 476, 477, 478, 479, 543, 560, 527,
	497, 460, 551, 494, 498, 499, 563, 0, 0, 0,
	451, 343, 344, 0, 322, 270, 271, 434, 308, 373,
	565, 598, 599, 490, 0, 552, 491, 500, 300, 524,
	536, 535, 369, 450, 205, 547, 550, 480, 215, 0,
	544, 559, 517, 558, 216, 379, 0, 400, 556, 503,
	0, 548, 522, 0, 549, 518, 553, 0, 492, 0,
	407, 432, 444, 461, 464, 493, 578, 579, 580, 275,
	463, 582, 583, 584, 585, 586, 587, 588, 581, 435,
	525, 502, 528, 443, 505, 504, 0, 0, 539, 459,
	540, 541, 363, 364, 365, 366, 326, 566, 293, 462,
	389, 123, 526, 0, 0, 0, 0, 0, 0, 0,
	0, 531, 532, 529, 213, 0, 589, 590, 0, 0,
	456, 457, 321, 328, 475, 330, 292, 378, 323, 441,
	337, 0, 468, 533, 469, 592, 595, 593, 594, 370,
	333, 334, 404, 338, 348, 392, 440, 376, 397, 290,
	431, 405, 352, 519, 546, 0, 0, 0, 0, 0,
	0, 0, 0, 58, 0, 0, 259, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 574, 573, 572, 571, 570, 569, 568, 567, 0,
	0, 516, 418, 302, 264, 298, 299, 306, 388, 283,
	422, 399, 0, 272, 496, 346, 150, 387, 320, 561,
	562, 54, 0, 220, 221, 222, 223, 224, 225, 226,
	227, 265, 228, 229, 230, 231, 232, 233, 234, 237,
	238, 239, 240, 241, 242, 243, 244, 564, 235, 236,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
	255, 256, 257, 258, 0, 0, 0, 266, 267, 268,
	269, 0, 0, 260, 261, 262, 263, 0, 0, 0,
	447, 448, 449, 471, 0, 433, 495, 217, 42, 203,
	206, 208, 207, 0, 55, 545, 557, 591, 5, 601,
	602, 604, 606, 605, 608, 410, 128, 218, 486, 487,
	219, 597, 187, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 375, 0, 501, 534, 523, 607, 489, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 315,
	0, 0, 345, 538, 520, 530, 521, 506, 507, 508,
	515, 325, 509, 510, 511, 481, 512, 482, 513, 514,
	125, 537, 488, 406, 359, 555, 554, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 181, 0, 0, 209, 0, 0, 0, 0,
	0, 0, 288, 210, 483, 603, 485, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 291, 2300, 2303,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 278,
	412, 429, 289, 402, 442, 294, 409, 284, 374, 398,
	0, 0, 280, 427, 408, 356, 335, 336, 279, 0,
	393, 313, 327, 310, 372, 0, 426, 454, 309, 445,
	0, 437, 282, 0, 436, 371, 423, 428, 357, 351,
	281, 425, 355, 350, 339, 317, 470, 340, 341, 331,
	383, 349, 384, 332, 361, 360, 362, 0, 0, 0,
	0, 0, 465, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 596, 0, 0, 600,
	2304, 439, 0, 0, 0, 2299, 0, 2298, 411, 2296,
	2301, 342, 0, 0, 0, 455, 0, 396, 377, 622,
	0, 0, 394, 347, 424, 385, 430, 413, 438, 390,
	386, 273, 414, 312, 358, 285, 287, 307, 314, 316,
	318, 319, 367, 368, 380, 401, 415, 416, 417, 311,
	295, 395, 296, 329, 297, 274, 303, 301, 304, 403,
	305, 276, 381, 421, 2302, 324, 391, 354, 277, 353,
	382, 420, 419, 286, 446, 452, 453, 542, 0, 458,
	623, 624, 625, 467, 472, 473, 474, 476, 477, 478,
	479, 543, 560, 527, 497, 460, 551, 494, 498, 499,
	563, 0, 0, 0, 451, 343, 344, 0, 322, 270,
	271, 618, 308, 373, 565, 598, 599, 490, 0, 552,
	491, 500, 300, 524, 536, 535, 369, 450, 0, 547,
	550, 480, 617, 0, 544, 559, 621, 558, 614, 379,
	0, 400, 556, 503, 0, 548, 522, 0, 549, 518,
	553, 0, 492, 0, 407, 432, 444, 461, 464, 493,
	578, 579, 580, 275, 463, 582, 583, 584, 585, 586,
	587, 588, 581, 435, 525, 502, 528, 443, 505, 504,
	0, 0, 539, 459, 540, 541, 363, 364, 365, 366,
	326, 566, 293, 462, 389, 0, 526, 0, 0, 0,
	0, 0, 0, 0, 0, 531, 532, 529, 626, 0,
	589, 590, 0, 0, 456, 457, 321, 328, 475, 330,
	292, 378, 323, 441, 337, 0, 468, 533, 469, 592,
	595, 593, 594, 370, 333, 334, 404, 338, 348, 392,
	440, 376, 397, 290, 431, 405, 352, 519, 546, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 574, 573, 572, 571, 570,
	569, 568, 567, 0, 0, 516, 418, 302, 264, 298,
	299, 306, 615, 612, 422, 616, 0, 272, 496, 346,
	150, 387, 320, 561, 562, 0, 0, 220, 221, 222,
	223, 224, 225, 226, 227, 265, 228, 229, 230, 231,
	232, 233, 234, 237, 238, 239, 240, 241, 242, 243,
	244, 564, 235, 236, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 256, 257, 258, 0, 0,
	0, 266, 267, 268, 269, 0, 0, 260, 261, 262,
	263, 0, 0, 0, 447, 448, 449, 471, 0, 433,
	495, 613, 0, 0, 0, 0, 0, 0, 0, 545,
	557, 591, 0, 601, 602, 604, 606, 605, 608, 410,
	0, 619, 486, 487, 620, 597, 375, 0, 501, 534,
	523, 607, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 315, 0, 0, 345, 538, 520, 530,
	521, 506, 507, 508, 515, 325, 509, 510, 511, 481,
	512, 482, 513, 514, 0, 537, 488, 406, 359, 555,
	554, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1266, 0, 0, 209,
	0, 0, 746, 756, 0, 0, 288, 210, 483, 603,
	485, 484, 747, 0, 748, 752, 755, 751, 749, 750,
	0, 291, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 753, 0, 0,
	0, 0, 0, 278, 412, 429, 289, 402, 442, 294,
	409, 284, 374, 398, 0, 0, 280, 427, 408, 356,
	335, 336, 279, 0, 393, 313, 327, 310, 372, 754,
	426, 454, 309, 445, 0, 437, 282, 0, 436, 371,
	423, 428, 357, 351, 281, 425, 355, 350, 339, 317,
	470, 340, 341, 331, 383, 349, 384, 332, 361, 360,
	362, 0, 0, 0, 0, 0, 465, 466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	596, 0, 0, 600, 0, 439, 0, 0, 0, 0,
	0, 0, 411, 0, 0, 342, 0, 0, 0, 455,
	0, 396, 377, 622, 0, 0, 394, 347, 424, 385,
	430, 413, 438, 390, 386, 273, 414, 312, 358, 285,
	287, 307, 314, 316, 318, 319, 367, 368, 380, 401,
	415, 416, 417, 311, 295, 395, 296, 329, 297, 274,
	303, 301, 304, 403, 305, 276, 381, 421, 0, 324,
	391, 354, 277, 353, 382, 420, 419, 286, 446, 452,
	453, 542, 0, 458, 623, 624, 625, 467, 472, 473,
	474, 476, 477, 478, 479, 543, 560, 527, 497, 460,
	551, 494, 498, 499, 563, 0, 0, 0, 451, 343,
	344, 0, 322, 270, 271, 618, 308, 373, 565, 598,
	599, 490, 0, 552, 491, 500, 300, 524, 536, 535,
	369, 450, 0, 547, 550, 480, 617, 0, 544, 559,
	621, 558, 614, 379, 0, 400, 556, 503, 0, 548,
	522, 0, 549, 518, 553, 0, 492, 0, 407, 432,
	444, 461, 464, 493, 578, 579, 580, 275, 463, 582,
	583, 584, 585, 586, 587, 588, 581, 435, 525, 502,
	528, 443, 505, 504, 0, 0, 539, 459, 540, 541,
	363, 364, 365, 366, 326, 566, 293, 462, 389, 0,
	526, 0, 0, 0, 0, 0, 0, 0, 0, 531,
	532, 529, 626, 0, 589, 590, 0, 0, 456, 457,
	321, 328, 475, 330, 292, 378, 323, 441, 337, 0,
	468, 533, 469, 592, 595, 593, 594, 370, 333, 334,
	404, 338, 348, 392, 440, 376, 397, 290, 431, 405,
	352, 519, 546, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 574,
	573, 572, 571, 570, 569, 568, 567, 0, 0, 516,
	418, 302, 264, 298, 299, 306, 615, 612, 422, 616,
	0, 272, 496, 346, 0, 387, 320, 561, 562, 0,
	0, 220, 221, 222, 223, 224, 225, 226, 227, 265,
	228, 229, 230, 231, 232, 233, 234, 237, 238, 239,
	240, 241, 242, 243, 244, 564, 235, 236, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 256,
	257, 258, 0, 0, 0, 266, 267, 268, 269, 0,
	0, 260, 261, 262, 263, 0, 0, 0, 447, 448,
	449, 471, 0, 433, 495, 613, 0, 0, 0, 0,
	0, 0, 0, 545, 557, 591, 0, 601, 602, 604,
	606, 605, 608, 410, 0, 619, 486, 487, 620, 597,
	187, 57, 176, 149, 0, 0, 0, 0, 0, 0,
	375, 645, 501, 534, 523, 607, 489, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 315, 0, 0,
	345, 538, 520, 530, 521, 506, 507, 508, 515, 325,
	509, 510, 511, 481, 512, 482, 513, 514, 0, 537,
	488, 406, 359, 555, 554, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 651, 0, 0, 0, 0, 0,
	650, 0, 0, 209, 0, 0, 0, 0, 0, 0,
	288, 210, 483, 603, 485, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 291, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 278, 412, 429,
	289, 402, 442, 294, 409, 284, 374, 398, 0, 0,
	280, 427, 408, 356, 335, 336, 279, 0, 393, 313,
	327, 310, 372, 0, 426, 454, 309, 445, 0, 437,
	282, 0, 436, 371, 423, 428, 357, 351, 281, 425,
	355, 350, 339, 317, 470, 340, 341, 331, 383, 349,
	384, 332, 361, 360, 362, 0, 0, 0, 0, 0,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 649, 0, 596, 0, 0, 600, 0, 439,
	0, 0, 0, 0, 0, 0, 411, 0, 0, 342,
	0, 0, 0, 455, 0, 396, 377, 622, 0, 0,
	394, 347, 424, 385, 430, 413, 438, 390, 386, 273,
	414, 312, 358, 285, 287, 307, 314, 316, 318, 319,
	367, 368, 380, 401, 415, 416, 417, 311, 295, 395,
	296, 329, 297, 274, 303, 301, 304, 403, 305, 276,
	381, 421, 0, 324, 391, 354, 277, 353, 382, 420,
	419, 286, 446, 452, 453, 542, 0, 458, 623, 624,
	625, 467, 472, 473, 474, 476, 477, 478, 479, 543,
	560, 527, 497, 460, 551, 494, 498, 499, 563, 0,
	0, 0, 451, 343, 344, 0, 322, 270, 271, 618,
	308, 373, 565, 598, 599, 490, 0, 552, 491, 500,
	300, 524, 536, 535, 369, 450, 0, 547, 550, 480,
	617, 0, 544, 559, 621, 558, 614, 379, 0, 400,
	556, 503, 0, 548, 522, 0, 549, 518, 553, 0,
	492, 0, 407, 432, 444, 461, 464, 493, 578, 579,
	580, 275, 463, 582, 583, 584, 585, 586, 587, 588,
	581, 435, 525, 502, 528, 443, 505, 504, 0, 0,
	539, 459, 540, 541, 363, 364, 365, 366, 646, 648,
	293, 462, 389, 659, 526, 0, 0, 0, 0, 0,
	0, 0, 0, 531, 532, 529, 626, 0, 589, 590,
	0, 0, 456, 457, 321, 328, 475, 330, 292, 378,
	323, 441, 337, 0, 468, 533, 469, 592, 595, 593,
	594, 370, 333, 334, 404, 338, 348, 392, 440, 376,
	397, 290, 431, 405, 352, 519, 546, 0, 0, 0,
	0, 0, 0, 0, 0, 58, 0, 0, 259, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 574, 573, 572, 571, 570, 569, 568,
	567, 0, 0, 516, 418, 302, 264, 298, 299, 306,
	615, 612, 422, 616, 0, 272, 496, 346, 150, 387,
	320, 561, 562, 0, 0, 220, 221, 222, 223, 224,
	225, 226, 227, 265, 228, 229, 230, 231, 232, 233,
	234, 237, 238, 239, 240, 241, 242, 243, 244, 564,
	235, 236, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 256, 257, 258, 0, 0, 0, 266,
	267, 268, 269, 0, 0, 260, 261, 262, 263, 0,
	0, 0, 447, 448, 449, 471, 0, 433, 495, 613,
	0, 0, 0, 0, 0, 0, 0, 545, 557, 591,
	0, 601, 602, 604, 606, 605, 608, 410, 0, 619,
	486, 487, 620, 597, 375, 0, 501, 534, 523, 607,
	489, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 315, 0, 0, 345, 538, 520, 530, 521, 506,
	507, 508, 515, 325, 509, 510, 511, 481, 512, 482,
	513, 514, 0, 537, 488, 406, 359, 555, 554, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 209, 0, 0,
	0, 0, 0, 0, 288, 210, 483, 603, 485, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 291,
	2300, 2303, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 278, 412, 429, 289, 402, 442, 294, 409, 284,
	374, 398, 0, 0, 280, 427, 408, 356, 335, 336,
	279, 0, 393, 313, 327, 310, 372, 0, 426, 454,
	309, 445, 0, 437, 282, 0, 436, 371, 423, 428,
	357, 351, 281, 425, 355, 350, 339, 317, 470, 340,
	341, 331, 383, 349, 384, 332, 361, 360, 362, 0,
	0, 0, 0, 0, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 596, 0,
	0, 600, 2304, 439, 0, 0, 0, 2299, 0, 2298,
	411, 2296, 2301, 342, 0, 0, 0, 455, 0, 396,
	377, 622, 0, 0, 394, 347, 424, 385, 430, 413,
	438, 390, 386, 273, 414, 312, 358, 285, 287, 307,
	314, 316, 318, 319, 367, 368, 380, 401, 415, 416,
	417, 311, 295, 395, 296, 329, 297, 274, 303, 301,
	304, 403, 305, 276, 381, 421, 2302, 324, 391, 354,
	277, 353, 382, 420, 419, 286, 446, 452, 453, 542,
	0, 458, 623, 624, 625, 467, 472, 473, 474, 476,
	477, 478, 479, 543, 560, 527, 497, 460, 551, 494,
	498, 499, 563, 0, 0, 0, 451, 343, 344, 0,
	322, 270, 271, 618, 308, 373, 565, 598, 599, 490,
	0, 552, 491, 500, 300, 524, 536, 535, 369, 450,
	0, 547, 550, 480, 617, 0, 544, 559, 621, 558,
	614, 379, 0, 400, 556, 503, 0, 548, 522, 0,
	549, 518, 553, 0, 492, 0, 407, 432, 444, 461,
	464, 493, 578, 579, 580, 275, 463, 582, 583, 584,
	585, 586, 587, 588, 581, 435, 525, 502, 528, 443,
	505, 504, 0, 0, 539, 459, 540, 541, 363, 364,
	365, 366, 326, 566, 293, 462, 389, 0, 526, 0,
	0, 0, 0, 0, 0, 0, 0, 531, 532, 529,
	626, 0, 589, 590, 0, 0, 456, 457, 321, 328,
	475, 330, 292, 378, 323, 441, 337, 0, 468, 533,
	469, 592, 595, 593, 594, 370, 333, 334, 404, 338,
	348, 392, 440, 376, 397, 290, 431, 405, 352, 519,
	546, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 574, 573, 572,
	571, 570, 569, 568, 567, 0, 0, 516, 418, 302,
	264, 298, 299, 306, 615, 612, 422, 616, 0, 272,
	496, 346, 0, 387, 320, 561, 562, 0, 0, 220,
	221, 222, 223, 224, 225, 226, 227, 265, 228, 229,
	230, 231, 232, 233, 234, 237, 238, 239, 240, 241,
	242, 243, 244, 564, 235, 236, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	0, 0, 0, 266, 267, 268, 269, 0, 0, 260,
	261, 262, 263, 0, 0, 0, 447, 448, 449, 471,
	0, 433, 495, 613, 0, 0, 0, 0, 0, 0,
	0, 545, 557, 591, 0, 601, 602, 604, 606, 605,
	608, 410, 0, 619, 486, 487, 620, 597, 375, 0,
	501, 534, 523, 607, 489, 0, 1079, 0, 0, 0,
	0, 0, 0, 0, 0, 315, 0, 0, 345, 538,
	520, 530, 521, 506, 507, 508, 515, 325, 509, 510,
	511, 481, 512, 482, 513, 514, 0, 537, 488, 406,
	359, 555, 554, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 209, 0, 0, 0, 0, 0, 0, 288, 210,
	483, 603, 485, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 291, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1065, 0,
	0, 0, 0, 0, 0, 278, 412, 429, 289, 402,
	442, 294, 409, 284, 374, 398, 0, 0, 2452, 2455,
	2456, 2457, 2458, 2459, 2460, 0, 2465, 2461, 2462, 2463,
	2464, 0, 2447, 2448, 2449, 2450, 1063, 2431, 2453, 0,
	2432, 371, 2433, 2434, 2435, 2436, 2437, 2438, 2439, 2440,
	2441, 2444, 2445, 2442, 2443, 2451, 383, 349, 384, 332,
	361, 360, 362, 1090, 1092, 1094, 1096, 1099, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 596, 0, 0, 600, 0, 439, 0, 0,
	0, 0, 0, 0, 411, 0, 0, 342, 0, 0,
	0, 2446, 0, 396, 377, 622, 0, 0, 394, 347,
	424, 385, 430, 413, 438, 390, 386, 273, 414, 312,
	358, 285, 287, 307, 314, 316, 318, 319, 367, 368,
	380, 401, 415, 416, 417, 311, 295, 395, 296, 329,
	297, 274, 303, 301, 304, 403, 305, 276, 381, 421,
	0, 324, 391, 354, 277, 353, 382, 420, 419, 286,
	446, 452, 453, 542, 0, 458, 623, 624, 625, 467,
	472, 473, 474, 476, 477, 478, 479, 543, 560, 527,
	497, 460, 551, 494, 498, 499, 563, 0, 0, 0,
	451, 343, 344, 0, 322, 270, 271, 618, 308, 373,
	565, 598, 599, 490, 0, 552, 491, 500, 300, 524,
	536, 535, 369, 450, 0, 547, 550, 480, 617, 0,
	544, 559, 621, 558, 614, 379, 0, 400, 556, 503,
	0, 548, 522, 0, 549, 518, 553, 0, 492, 0,
	407, 432, 444, 461, 464, 493, 578, 579, 580, 275,
	463, 582, 583, 584, 585, 586, 587, 588, 581, 435,
	525, 502, 528, 443, 505, 504, 0, 0, 539, 459,
	540, 541, 363, 364, 365, 366, 326, 566, 293, 462,
	389, 0, 526, 0, 0, 0, 0, 0, 0, 0,
	0, 531, 532, 529, 626, 0, 589, 590, 0, 0,
	456, 457, 321, 328, 475, 330, 292, 378, 323, 441,
	337, 0, 468, 533, 469, 592, 595, 593, 594, 370,
	333, 334, 404, 338, 348, 392, 440, 376, 397, 290,
	431, 405, 352, 519, 546, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 574, 573, 572, 571, 570, 569, 568, 567, 0,
	0, 516, 418, 302, 264, 298, 299, 306, 615, 612,
	422, 616, 0, 272, 2454, 346, 0, 387, 320, 561,
	562, 0, 0, 220, 221, 222, 223, 224, 225, 226,
	227, 265, 228, 229, 230, 231, 232, 233, 234, 237,
	238, 239, 240, 241, 242, 243, 244, 564, 235, 236,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
	255, 256, 257, 258, 0, 0, 0, 266, 267, 268,
	269, 0, 0, 260, 261, 262, 263, 0, 0, 0,
	447, 448, 449, 471, 0, 433, 495, 613, 0, 0,
	0, 0, 0, 0, 0, 545, 557, 591, 0, 601,
	602, 604, 606, 605, 608, 410, 0, 619, 486, 487,
	620, 597, 375, 0, 501, 534, 523, 607, 489, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 315,
	0, 0, 345, 538, 520, 530, 521, 506, 507, 508,
	515, 325, 509, 510, 511, 481, 512, 482, 513, 514,
	0, 537, 488, 406, 359, 555, 554, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 209, 0, 0, 0, 0,
	0, 0, 288, 210, 483, 603, 485, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 291, 0, 2321,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 278,
	412, 429, 289, 402, 442, 294, 409, 284, 374, 398,
	0, 0, 280, 427, 408, 356, 335, 336, 279, 0,
	393, 313, 327, 310, 372, 0, 426, 454, 309, 445,
	0, 437, 282, 0, 436, 371, 423, 428, 357, 351,
	281, 425, 355, 350, 339, 317, 470, 340, 341, 331,
	383, 349, 384, 332, 361, 360, 362, 0, 0, 0,
	0, 0, 465, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 596, 0, 0, 600,
	2320, 439, 0, 0, 0, 2326, 2323, 2325, 411, 0,
	2324, 342, 0, 0, 0, 455, 0, 396, 377, 622,
	0, 2318, 394, 347, 424, 385, 430, 413, 438, 390,
	386, 273, 414, 312, 358, 285, 287, 307, 314, 316,
	318, 319, 367, 368, 380, 401, 415, 416, 417, 311,
	295, 395, 296, 329, 297, 274, 303, 301, 304, 403,
	305, 276, 381, 421, 0, 324, 391, 354, 277, 353,
	382, 420, 419, 286, 446, 452, 453, 542, 0, 458,
	623, 624, 625, 467, 472, 473, 474, 476, 477, 478,
	479, 543, 560, 527, 497, 460, 551, 494, 498, 499,
	563, 0, 0, 0, 451, 343, 344, 0, 322, 270,
	271, 618, 308, 373, 565, 598, 599, 490, 0, 552,
	491, 500, 300, 524, 536, 535, 369, 450, 0, 547,
	550, 480, 617, 0, 544, 559, 621, 558, 614, 379,
	0, 400, 556, 503, 0, 548, 522, 0, 549, 518,
	553, 0, 492, 0, 407, 432, 444, 461, 464, 493,
	578, 579, 580, 275, 463, 582, 583, 584, 585, 586,
	587, 588, 581, 435, 525, 502, 528, 443, 505, 504,
	0, 0, 539, 459, 540, 541, 363, 364, 365, 366,
	326, 566, 293, 462, 389, 0, 526, 0, 0, 0,
	0, 0, 0, 0, 0, 531, 532, 529, 626, 0,
	589, 590, 0, 0, 456, 457, 321, 328, 475, 330,
	292, 378, 323, 441, 337, 0, 468, 533, 469, 592,
	595, 593, 594, 370, 333, 334, 404, 338, 348, 392,
	440, 376, 397, 290, 431, 405, 352, 519, 546, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 574, 573, 572, 571, 570,
	569, 568, 567, 0, 0, 516, 418, 302, 264, 298,
	299, 306, 615, 612, 422, 616, 0, 272, 496, 346,
	0, 387, 320, 561, 562, 0, 0, 220, 221, 222,
	223, 224, 225, 226, 227, 265, 228, 229, 230, 231,
	232, 233, 234, 237, 238, 239, 240, 241, 242, 243,
	244, 564, 235, 236, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 256, 257, 258, 0, 0,
	0, 266, 267, 268, 269, 0, 0, 260, 261, 262,
	263, 0, 0, 0, 447, 448, 449, 471, 0, 433,
	495, 613, 0, 0, 0, 0, 0, 0, 0, 545,
	557, 591, 0, 601, 602, 604, 606, 605, 608, 410,
	0, 619, 486, 487, 620, 597, 375, 0, 501, 534,
	523, 607, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 315, 0, 0, 345, 538, 520, 530,
	521, 506, 507, 508, 515, 325, 509, 510, 511, 481,
	512, 482, 513, 514, 0, 537, 488, 406, 359, 555,
	554, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 209,
	0, 0, 0, 0, 0, 0, 288, 210, 483, 603,
	485, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 291, 0, 2321, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 278, 412, 429, 289, 402, 442, 294,
	409, 284, 374, 398, 0, 0, 280, 427, 408, 356,
	335, 336, 279, 0, 393, 313, 327, 310, 372, 0,
	426, 454, 309, 445, 0, 437, 282, 0, 436, 371,
	423, 428, 357, 351, 281, 425, 355, 350, 339, 317,
	470, 340, 341, 331, 383, 349, 384, 332, 361, 360,
	362, 0, 0, 0, 0, 0, 465, 466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	596, 0, 0, 600, 2320, 439, 0, 0, 0, 2326,
	2323, 2325, 411, 0, 2324, 342, 0, 0, 0, 455,
	0, 396, 377, 622, 0, 0, 394, 347, 424, 385,
	430, 413, 438, 390, 386, 273, 414, 312, 358, 285,
	287, 307, 314, 316, 318, 319, 367, 368, 380, 401,
	415, 416, 417, 311, 295, 395, 296, 329, 297, 274,
	303, 301, 304, 403, 305, 276, 381, 421, 0, 324,
	391, 354, 277, 353, 382, 420, 419, 286, 446, 452,
	453, 542, 0, 458, 623, 624, 625, 467, 472, 473,
	474, 476, 477, 478, 479, 543, 560, 527, 497, 460,
	551, 494, 498, 499, 563, 0, 0, 0, 451, 343,
	344, 0, 322, 270, 271, 618, 308, 373, 565, 598,
	599, 490, 0, 552, 491, 500, 300, 524, 536, 535,
	369, 450, 0, 547, 550, 480, 617, 0, 544, 559,
	621, 558, 614, 379, 0, 400, 556, 503, 0, 548,
	522, 0, 549, 518, 553, 0, 492, 0, 407, 432,
	444, 461, 464, 493, 578, 579, 580, 275, 463, 582,
	583, 584, 585, 586, 587, 588, 581, 435, 525, 502,
	528, 443, 505, 504, 0, 0, 539, 459, 540, 541,
	363, 364, 365, 366, 326, 566, 293, 462, 389, 0,
	526, 0, 0, 0, 0, 0, 0, 0, 0, 531,
	532, 529, 626, 0, 589, 590, 0, 0, 456, 457,
	321, 328, 475, 330, 292, 378, 323, 441, 337, 0,
	468, 533, 469, 592, 595, 593, 594, 370, 333, 334,
	404, 338, 348, 392, 440, 376, 397, 290, 431, 405,
	352, 519, 546, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 574,
	573, 572, 571, 570, 569, 568, 567, 0, 0, 516,
	418, 302, 264, 298, 299, 306, 615, 612, 422, 616,
	0, 272, 496, 346, 0, 387, 320, 561, 562, 0,
	0, 220, 221, 222, 223, 224, 225, 226, 227, 265,
	228, 229, 230, 231, 232, 233, 234, 237, 238, 239,
	240, 241, 242, 243, 244, 564, 235, 236, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 256,
	257, 258, 0, 0, 0, 266, 267, 268, 269, 0,
	0, 260, 261, 262, 263, 0, 0, 0, 447, 448,
	449, 471, 0, 433, 495, 613, 0, 0, 0, 0,
	0, 0, 0, 545, 557, 591, 0, 601, 602, 604,
	606, 605, 608, 410, 0, 619, 486, 487, 620, 597,
	375, 0, 501, 534, 523, 607, 489, 0, 0, 0,
	0, 0, 2024, 0, 0, 0, 0, 315, 0, 0,
	345, 538, 520, 530, 521, 506, 507, 508, 515, 325,
	509, 510, 511, 481, 512, 482, 513, 514, 0, 537,
	488, 406, 359, 555, 554, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 0, 0, 2025, 0, 0, 0,
	288, 210, 483, 603, 485, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 291, 0, 0, 1196, 1197,
	1198, 1195, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 278, 412, 429,
	289, 402, 442, 294, 409, 284, 374, 398, 0, 0,
	280, 427, 408, 356, 335, 336, 279, 0, 393, 313,
	327, 310, 372, 0, 426, 454, 309, 445, 0, 437,
	282, 0, 436, 371, 423, 428, 357, 351, 281, 425,
	355, 350, 339, 317, 470, 340, 341, 331, 383, 349,
	384, 332, 361, 360, 362, 0, 0, 0, 0, 0,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 596, 0, 0, 600, 0, 439,
	0, 0, 0, 0, 0, 0, 411, 0, 0, 342,
	0, 0, 0, 455, 0, 396, 377, 622, 0, 0,
	394, 347, 424, 385, 430, 413, 438, 390, 386, 273,
	414, 312, 358, 285, 287, 307, 314, 316, 318, 319,
	367, 368, 380, 401, 415, 416, 417, 311, 295, 395,
	296, 329, 297, 274, 303, 301, 304, 403, 305, 276,
	381, 421, 0, 324, 391, 354, 277, 353, 382, 420,
	419, 286, 446, 452, 453, 542, 0, 458, 623, 624,
	625, 467, 472, 473, 474, 476, 477, 478, 479, 543,
	560, 527, 497, 460, 551, 494, 498, 499, 563, 0,
	0, 0, 451, 343, 344, 0, 322, 270, 271, 618,
	308, 373, 565, 598, 599, 490, 0, 552, 491, 500,
	300, 524, 536, 535, 369, 450, 0, 547, 550, 480,
	617, 0, 544, 559, 621, 558, 614, 379, 0, 400,
	556, 503, 0, 548, 522, 0, 549, 518, 553, 0,
	492, 0, 407, 432, 444, 461, 464, 493, 578, 579,
	580, 275, 463, 582, 583, 584, 585, 586, 587, 588,
	581, 435, 525, 502, 528, 443, 505, 504, 0, 0,
	539, 459, 540, 541, 363, 364, 365, 366, 326, 566,
	293, 462, 389, 0, 526, 0, 0, 0, 0, 0,
	0, 0, 0, 531, 532, 529, 626, 0, 589, 590,
	0, 0, 456, 457, 321, 328, 475, 330, 292, 378,
	323, 441, 337, 0, 468, 533, 469, 592, 595, 593,
	594, 370, 333, 334, 404, 338, 348, 392, 440, 376,
	397, 290, 431, 405, 352, 519, 546, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 574, 573, 572, 571, 570, 569, 568,
	567, 0, 0, 516, 418, 302, 264, 298, 299, 306,
	615, 612, 422, 616, 0, 272, 496, 346, 0, 387,
	320, 561, 562, 0, 0, 220, 221, 222, 223, 224,
	225, 226, 227, 265, 228, 229, 230, 231, 232, 233,
	234, 237, 238, 239, 240, 241, 242, 243, 244, 564,
	235, 236, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 256, 257, 258, 0, 0, 0, 266,
	267, 268, 269, 0, 0, 260, 261, 262, 263, 0,
	0, 0, 447, 448, 449, 471, 0, 433, 495, 613,
	0, 0, 0, 0, 0, 0, 0, 545, 557, 591,
	0, 601, 602, 604, 606, 605, 608, 410, 187, 619,
	486, 487, 620, 597, 0, 0, 0, 0, 375, 0,
	501, 534, 523, 607, 489, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 315, 0, 0, 345, 538,
	520, 530, 521, 506, 507, 508, 515, 325, 509, 510,
	511, 481, 512, 482, 513, 514, 125, 537, 488, 406,
	359, 555, 554, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 181, 2074,
	0, 209, 0, 0, 0, 0, 0, 0, 288, 210,
	483, 603, 485, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 291, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 278, 412, 429, 289, 402,
	442, 294, 409, 284, 374, 398, 0, 0, 280, 427,
	408, 356, 335, 336, 279, 0, 393, 313, 327, 310,
	372, 0, 426, 454, 309, 445, 0, 437, 282, 0,
	436, 371, 423, 428, 357, 351, 281, 425, 355, 350,
	339, 317, 470, 340, 341, 331, 383, 349, 384, 332,
	361, 360, 362, 0, 0, 0, 0, 0, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 596, 0, 0, 600, 0, 439, 0, 0,
	0, 0, 0, 0, 411, 0, 0, 342, 0, 0,
	0, 455, 0, 396, 377, 622, 0, 0, 394, 347,
	424, 385, 430, 413, 438, 390, 386, 273, 414, 312,
	358, 285, 287, 307, 314, 316, 318, 319, 367, 368,
	380, 401, 415, 416, 417, 311, 295, 395, 296, 329,
	297, 274, 303, 301, 304, 403, 305, 276, 381, 421,
	0, 324, 391, 354, 277, 353, 382, 420, 419, 286,
	446, 452, 453, 542, 0, 458, 623, 624, 625, 467,
	472, 473, 474, 476, 477, 478, 479, 543, 560, 527,
	497, 460, 551, 494, 498, 499, 563, 0, 0, 0,
	451, 343, 344, 0, 322, 270, 271, 618, 308, 373,
	565, 598, 599, 490, 0, 552, 491, 500, 300, 524,
	536, 535, 369, 450, 0, 547, 550, 480, 617, 0,
	544, 559, 621, 558, 614, 379, 0, 400, 556, 503,
	0, 548, 522, 0, 549, 518, 553, 0, 492, 0,
	407, 432, 444, 461, 464, 493, 578, 579, 580, 275,
	463, 582, 583, 584, 585, 586, 587, 588, 581, 435,
	525, 502, 528, 443, 505, 504, 0, 0, 539, 459,
	540, 541, 363, 364, 365, 366, 326, 566, 293, 462,
	389, 0, 526, 0, 0, 0, 0, 0, 0, 0,
	0, 531, 532, 529, 626, 0, 589, 590, 0, 0,
	456, 457, 321, 328, 475, 330, 292, 378, 323, 441,
	337, 0, 468, 533, 469, 592, 595, 593, 594, 370,
	333, 334, 404, 338, 348, 392, 440, 376, 397, 290,
	431, 405, 352, 519, 546, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 574, 573, 572, 571, 570, 569, 568, 567, 0,
	0, 516, 418, 302, 264, 298, 299, 306, 615, 612,
	422, 616, 0, 272, 496, 346, 150, 387, 320, 561,
	562, 0, 0, 220, 221, 222, 223, 224, 225, 226,
	227, 265, 228, 229, 230, 231, 232, 233, 234, 237,
	238, 239, 240, 241, 242, 243, 244, 564, 235, 236,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
	255, 256, 257, 258, 0, 0, 0, 266, 267, 268,
	269, 0, 0, 260, 261, 262, 263, 0, 0, 0,
	447, 448, 449, 471, 0, 433, 495, 613, 0, 0,
	0, 0, 0, 0, 0, 545, 557, 591, 0, 601,
	602, 604, 606, 605, 608, 410, 187, 619, 486, 487,
	620, 597, 0, 0, 0, 0, 375, 0, 501, 534,
	523, 607, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 315, 0, 0, 345, 538, 520, 530,
	521, 506, 507, 508, 515, 325, 509, 510, 511, 481,
	512, 482, 513, 514, 125, 537, 488, 406, 359, 555,
	554, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 181, 2060, 0, 209,
	0, 0, 0, 0, 0, 0, 288, 210, 483, 603,
	485, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 291, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 278, 412, 429, 289, 402, 442, 294,
	409, 284, 374, 398, 0, 0, 280, 427, 408, 356,
	335, 336, 279, 0, 393, 313, 327, 310, 372, 0,
	426, 454, 309, 445, 0, 437, 282, 0, 436, 371,
	423, 428, 357, 351, 281, 425, 355, 350, 339, 317,
	470, 340, 341, 331, 383, 349, 384, 332, 361, 360,
	362, 0, 0, 0, 0, 0, 465, 466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	596, 0, 0, 600, 0, 439, 0, 0, 0, 0,
	0, 0, 411, 0, 0, 342, 0, 0, 0, 455,
	0, 396, 377, 622, 0, 0, 394, 347, 424, 385,
	430, 413, 438, 390, 386, 273, 414, 312, 358, 285,
	287, 307, 314, 316, 318, 319, 367, 368, 380, 401,
	415, 416, 417, 311, 295, 395, 296, 329, 297, 274,
	303, 301, 304, 403, 305, 276, 381, 421, 0, 324,
	391, 354, 277, 353, 382, 420, 419, 286, 446, 452,
	453, 542, 0, 458, 623, 624, 625, 467, 472, 473,
	474, 476, 477, 478, 479, 543, 560, 527, 497, 460,
	551, 494, 498, 499, 563, 0, 0, 0, 451, 343,
	344, 0, 322, 270, 271, 618, 308, 373, 565, 598,
	599, 490, 0, 552, 491, 500, 300, 524, 536, 535,
	369, 450, 0, 547, 550, 480, 617, 0, 544, 559,
	621, 558, 614, 379, 0, 400, 556, 503, 0, 548,
	522, 0, 549, 518, 553, 0, 492, 0, 407, 432,
	444, 461, 464, 493, 578, 579, 580, 275, 463, 582,
	583, 584, 585, 586, 587, 588, 581, 435, 525, 502,
	528, 443, 505, 504, 0, 0, 539, 459, 540, 541,
	363, 364, 365, 366, 326, 566, 293, 462, 389, 0,
	526, 0, 0, 0, 0, 0, 0, 0, 0, 531,
	532, 529, 626, 0, 589, 590, 0, 0, 456, 457,
	321, 328, 475, 330, 292, 378, 323, 441, 337, 0,
	468, 533, 469, 592, 595, 593, 594, 370, 333, 334,
	404, 338, 348, 392, 440, 376, 397, 290, 431, 405,
	352, 519, 546, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 574,
	573, 572, 571, 570, 569, 568, 567, 0, 0, 516,
	418, 302, 264, 298, 299, 306, 615, 612, 422, 616,
	0, 272, 496, 346, 150, 387, 320, 561, 562, 0,
	0, 220, 221, 222, 223, 224, 225, 226, 227, 265,
	228, 229, 230, 231, 232, 233, 234, 237, 238, 239,
	240, 241, 242, 243, 244, 564, 235, 236, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 256,
	257, 258, 0, 0, 0, 266, 267, 268, 269, 0,
	0, 260, 261, 262, 263, 0, 0, 0, 447, 448,
	449, 471, 0, 433, 495, 613, 0, 0, 0, 0,
	0, 0, 0, 545, 557, 591, 0, 601, 602, 604,
	606, 605, 608, 410, 0, 619, 486, 487, 620, 597,
	375, 0, 501, 534, 523, 607, 489, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 315, 994, 0,
	345, 538, 520, 530, 521, 506, 507, 508, 515, 325,
	509, 510, 511, 481, 512, 482, 513, 514, 0, 537,
	488, 406, 359, 555, 554, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 1001, 1002, 0, 0, 0, 0,
	288, 210, 483, 603, 485, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1005, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 278, 412, 989,
	289, 402, 442, 294, 409, 284, 374, 398, 0, 0,
	280, 427, 408, 356, 335, 336, 279, 0, 393, 313,
	327, 310, 372, 0, 426, 454, 309, 445, 978, 437,
	282, 977, 436, 371, 423, 428, 357, 351, 281, 425,
	355, 350, 339, 317, 470, 340, 341, 331, 383, 349,
	384, 332, 361, 360, 362, 0, 0, 0, 0, 0,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 596, 0, 0, 600, 0, 439,
	0, 0, 0, 0, 0, 0, 411, 0, 0, 342,
	0, 0, 0, 455, 0, 396, 377, 622, 0, 0,
	394, 347, 424, 385, 430, 413, 438, 992, 386, 273,
	414, 312, 358, 285, 287, 307, 314, 316, 318, 319,
	367, 368, 380, 401, 415, 416, 417, 311, 295, 395,
	296, 329, 297, 274, 303, 301, 304, 403, 305, 276,
	381, 421, 0, 324, 391, 354, 277, 353, 382, 420,
	419, 286, 446, 452, 453, 542, 0, 458, 623, 624,
	625, 467, 472, 473, 474, 476, 477, 478, 479, 543,
	560, 527, 497, 460, 551, 494, 498, 499, 563, 0,
	0, 0, 451, 343, 344, 0, 322, 270, 271, 618,
	308, 373, 565, 598, 599, 490, 0, 552, 491, 500,
	300, 524, 536, 535, 369, 450, 0, 547, 550, 480,
	617, 0, 544, 559, 621, 558, 614, 379, 0, 400,
	556, 503, 0, 548, 522, 0, 549, 518, 553, 0,
	492, 0, 407, 432, 444, 461, 464, 493, 578, 579,
	580, 275, 463, 582, 583, 584, 585, 586, 587, 993,
	581, 435, 525, 502, 528, 443, 505, 504, 0, 0,
	539, 996, 540, 541, 363, 364, 365, 366, 326, 566,
	293, 462, 389, 0, 526, 0, 0, 0, 0, 0,
	0, 0, 0, 531, 532, 529, 626, 0, 589, 590,
	0, 0, 456, 457, 321, 328, 475, 330, 292, 378,
	323, 441, 337, 0, 468, 533, 469, 592, 595, 593,
	594, 1003, 990, 999, 991, 338, 348, 392, 440, 376,
	397, 290, 431, 405, 1000, 519, 546, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 574, 573, 572, 571, 570, 569, 568,
	567, 0, 0, 516, 418, 302, 264, 298, 299, 306,
	615, 612, 422, 616, 0, 272, 496, 346, 0, 387,
	320, 561, 562, 0, 0, 220, 221, 222, 223, 224,
	225, 226, 227, 265, 228, 229, 230, 231, 232, 233,
	234, 237, 238, 239, 240, 241, 242, 243, 244, 564,
	235, 236, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 256, 257, 258, 0, 0, 0, 266,
	267, 268, 269, 0, 0, 260, 261, 262, 263, 0,
	0, 0, 447, 448, 449, 471, 0, 433, 495, 613,
	0, 0, 0, 0, 0, 0, 0, 545, 557, 591,
	0, 601, 602, 604, 606, 605, 608, 410, 187, 619,
	486, 487, 620, 597, 0, 0, 0, 0, 375, 0,
	501, 534, 523, 607, 489, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 315, 0, 0, 345, 538,
	520, 530, 521, 506, 507, 508, 515, 325, 509, 510,
	511, 481, 512, 482, 513, 514, 125, 537, 488, 406,
	359, 555, 554, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1956, 0,
	0, 209, 0, 0, 0, 0, 0, 0, 288, 210,
	483, 603, 485, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 291, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 278, 412, 429, 289, 402,
	442, 294, 409, 284, 374, 398, 0, 0, 280, 427,
	408, 356, 335, 336, 279, 0, 393, 313, 327, 310,
	372, 0, 426, 454, 309, 445, 0, 437, 282, 0,
	436, 371, 423, 428, 357, 351, 281, 425, 355, 350,
	339, 317, 470, 340, 341, 331, 383, 349, 384, 332,
	361, 360, 362, 0, 0, 0, 0, 0, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 596, 0, 0, 600, 0, 439, 0, 0,
	0, 0, 0, 0, 411, 0, 0, 342, 0, 0,
	0, 455, 0, 396, 377, 622, 0, 0, 394, 347,
	424, 385, 430, 413, 438, 390, 386, 273, 414, 312,
	358, 285, 287, 307, 314, 316, 318, 319, 367, 368,
	380, 401, 415, 416, 417, 311, 295, 395, 296, 329,
	297, 274, 303, 301, 304, 403, 305, 276, 381, 421,
	0, 324, 391, 354, 277, 353, 382, 420, 419, 286,
	446, 452, 453, 542, 0, 458, 623, 624, 625, 467,
	472, 473, 474, 476, 477, 478, 479, 543, 560, 527,
	497, 460, 551, 494, 498, 499, 563, 0, 0, 0,
	451, 343, 344, 0, 322, 270, 271, 618, 308, 373,
	565, 598, 599, 490, 0, 552, 491, 500, 300, 524,
	536, 535, 369, 450, 0, 547, 550, 480, 617, 0,
	544, 559, 621, 558, 614, 379, 0, 400, 556, 503,
	0, 548, 522, 0, 549, 518, 553, 0, 492, 0,
	407, 432, 444, 461, 464, 493, 578, 579, 580, 275,
	463, 582, 583, 584, 585, 586, 587, 588, 581, 435,
	525, 502, 528, 443, 505, 504, 0, 0, 539, 459,
	540, 541, 363, 364, 365, 366, 326, 566, 293, 462,
	389, 0, 526, 0, 0, 0, 0, 0, 0, 0,
	0, 531, 532, 529, 626, 0, 589, 590, 0, 0,
	456, 457, 321, 328, 475, 330, 292, 378, 323, 441,
	337, 0, 468, 533, 469, 592, 595, 593, 594, 370,
	333, 334, 404, 338, 348, 392, 440, 376, 397, 290,
	431, 405, 352, 519, 546, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 574, 573, 572, 571, 570, 569, 568, 567, 0,
	0, 516, 418, 302, 264, 298, 299, 306, 615, 612,
	422, 616, 0, 272, 496, 346, 150, 387, 320, 561,
	562, 0, 0, 220, 221, 222, 223, 224, 225, 226,
	227, 265, 228, 229, 230, 231, 232, 233, 234, 237,
	238, 239, 240, 241, 242, 243, 244, 564, 235, 236,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
	255, 256, 257, 258, 0, 0, 0, 266, 267, 268,
	269, 0, 0, 260, 261, 262, 263, 0, 0, 0,
	447, 448, 449, 471, 0, 433, 495, 613, 0, 0,
	0, 0, 0, 0, 0, 545, 557, 591, 0, 601,
	602, 604, 606, 605, 608, 410, 0, 619, 486, 487,
	620, 597, 375, 0, 501, 534, 523, 607, 489, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 315,
	0, 0, 345, 538, 520, 530, 521, 506, 507, 508,
	515, 325, 509, 510, 511, 481, 512, 482, 513, 514,
	0, 537, 488, 406, 359, 555, 554, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 209, 1001, 1002, 0, 0,
	0, 0, 288, 210, 483, 603, 485, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1005, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 278,
	412, 429, 289, 402, 442, 294, 409, 284, 374, 398,
	0, 0, 280, 427, 408, 356, 335, 336, 279, 0,
	393, 313, 327, 310, 372, 0, 426, 454, 309, 445,
	978, 437, 282, 977, 436, 371, 423, 428, 357, 351,
	281, 425, 355, 350, 339, 317, 470, 340, 341, 331,
	383, 349, 384, 332, 361, 360, 362, 0, 0, 0,
	0, 0, 465, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 596, 0, 0, 600,
	0, 439, 0, 0, 0, 0, 0, 0, 411, 0,
	0, 342, 0, 0, 0, 455, 0, 396, 377, 622,
	0, 0, 394, 347, 424, 385, 430, 413, 438, 390,
	386, 273, 414, 312, 358, 285, 287, 307, 314, 316,
	318, 319, 367, 368, 380, 401, 415, 416, 417, 311,
	295, 395, 296, 329, 297, 274, 303, 301, 304, 403,
	305, 276, 381, 421, 0, 324, 391, 354, 277, 353,
	382, 420, 419, 286, 446, 452, 453, 542, 0, 458,
	623, 624, 625, 467, 472, 473, 474, 476, 477, 478,
	479, 543, 560, 527, 497, 460, 551, 494, 498, 499,
	563, 0, 0, 0, 451, 343, 344, 0, 322, 270,
	271, 618, 308, 373, 565, 598, 599, 490, 0, 552,
	491, 500, 300, 524, 536, 535, 369, 450, 0, 547,
	550, 480, 617, 0, 544, 559, 621, 558, 614, 379,
	0, 400, 556, 503, 0, 548, 522, 0, 549, 518,
	553, 0, 492, 0, 407, 432, 444, 461, 464, 493,
	578, 579, 580, 275, 463, 582, 583, 584, 585, 586,
	587, 588, 581, 435, 525, 502, 528, 443, 505, 504,
	0, 0, 539, 459, 540, 541, 363, 364, 365, 366,
	326, 566, 293, 462, 389, 0, 526, 0, 0, 0,
	0, 0, 0, 0, 0, 531, 532, 529, 626, 0,
	589, 590, 0, 0, 456, 457, 321, 328, 475, 330,
	292, 378, 323, 441, 337, 0, 468, 533, 469, 592,
	595, 593, 594, 1003, 1975, 999, 1976, 338, 348, 392,
	440, 376, 397, 290, 431, 405, 1000, 519, 546, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 574, 573, 572, 571, 570,
	569, 568, 567, 0, 0, 516, 418, 302, 264, 298,
	299, 306, 615, 612, 422, 616, 0, 272, 496, 346,
	0, 387, 320, 561, 562, 0, 0, 220, 221, 222,
	223, 224, 225, 226, 227, 265, 228, 229, 230, 231,
	232, 233, 234, 237, 238, 239, 240, 241, 242, 243,
	244, 564, 235, 236, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 256, 257, 258, 0, 0,
	0, 266, 267, 268, 269, 0, 0, 260, 261, 262,
	263, 0, 0, 0, 447, 448, 449, 471, 0, 433,
	495, 613, 0, 0, 0, 0, 0, 0, 0, 545,
	557, 591, 0, 601, 602, 604, 606, 605, 608, 410,
	0, 619, 486, 487, 620, 597, 375, 0, 501, 534,
	523, 607, 489, 0, 0, 2826, 0, 0, 0, 0,
	0, 0, 0, 315, 0, 0, 345, 538, 520, 530,
	521, 506, 507, 508, 515, 325, 509, 510, 511, 481,
	512, 482, 513, 514, 0, 537, 488, 406, 359, 555,
	554, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 209,
	0, 0, 0, 0, 0, 0, 288, 210, 483, 603,
	485, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 291, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 278, 412, 429, 289, 402, 442, 294,
	409, 284, 374, 398, 0, 0, 280, 427, 408, 356,
	335, 336, 279, 0, 393, 313, 327, 310, 372, 0,
	426, 454, 309, 445, 0, 437, 282, 0, 436, 371,
	423, 428, 357, 351, 281, 425, 355, 350, 339, 317,
	470, 340, 341, 331, 383, 349, 384, 332, 361, 360,
	362, 0, 0, 0, 0, 0, 465, 466, 0, 0,
	0, 0, 0, 0, 0, 0, 2829, 0, 0, 2828,
	596, 0, 0, 600, 0, 439, 0, 0, 0, 0,
	0, 0, 411, 0, 0, 342, 0, 0, 0, 455,
	0, 396, 377, 622, 0, 0, 394, 347, 424, 385,
	430, 413, 438, 390, 386, 273, 414, 312, 358, 285,
	287, 307, 314, 316, 318, 319, 367, 368, 380, 401,
	415, 416, 417, 311, 295, 395, 296, 329, 297, 274,
	303, 301, 304, 403, 305, 276, 381, 421, 0, 324,
	391, 354, 277, 353, 382, 420, 419, 286, 446, 452,
	453, 542, 0, 458, 623, 624, 625, 467, 472, 473,
	474, 476, 477, 478, 479, 543, 560, 527, 497, 460,
	551, 494, 498, 499, 563, 0, 0, 0, 451, 343,
	344, 0, 322, 270, 271, 618, 308, 373, 565, 598,
	599, 490, 0, 552, 491, 500, 300, 524, 536, 535,
	369, 450, 0, 547, 550, 480, 617, 0, 544, 559,
	621, 558, 614, 379, 0, 400, 556, 503, 0, 548,
	522, 0, 549, 518, 553, 0, 492, 0, 407, 432,
	444, 461, 464, 493, 578, 579, 580, 275, 463, 582,
	583, 584, 585, 586, 587, 588, 581, 435, 525, 502,
	528, 443, 505, 504, 0, 0, 539, 459, 540, 541,
	363, 364, 365, 366, 326, 566, 293, 462, 389, 0,
	526, 0, 0, 0, 0, 0, 0, 0, 0, 531,
	532, 529, 626, 0, 589, 590, 0, 0, 456, 457,
	321, 328, 475, 330, 292, 378, 323, 441, 337, 0,
	468, 533, 469, 592, 595, 593, 594, 370, 333, 334,
	404, 338, 348, 392, 440, 376, 397, 290, 431, 405,
	352, 519, 546, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 574,
	573, 572, 571, 570, 569, 568, 567, 0, 0, 516,
	418, 302, 264, 298, 299, 306, 615, 612, 422, 616,
	0, 272, 496, 346, 0, 387, 320, 561, 562, 0,
	0, 220, 221, 222, 223, 224, 225, 226, 227, 265,
	228, 229, 230, 231, 232, 233, 234, 237, 238, 239,
	240, 241, 242, 243, 244, 564, 235, 236, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 256,
	257, 258, 0, 0, 0, 266, 267, 268, 269, 0,
	0, 260, 261, 262, 263, 0, 0, 0, 447, 448,
	449, 471, 0, 433, 495, 613, 0, 0, 0, 0,
	0, 0, 0, 545, 557, 591, 0, 601, 602, 604,
	606, 605, 608, 410, 0, 619, 486, 487, 620, 597,
	375, 0, 501, 534, 523, 607, 489, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 315, 1469, 0,
	345, 538, 520, 530, 521, 506, 507, 508, 515, 325,
	509, 510, 511, 481, 512, 482, 513, 514, 0, 537,
	488, 406, 359, 555, 554, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 0, 0, 1467, 0, 0, 0,
	288, 210, 483, 603, 485, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 291, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1465, 0, 0, 0, 0, 0, 0, 278, 412, 429,
	289, 402, 442, 294, 409, 284, 374, 398, 0, 0,
	280, 427, 408, 356, 335, 336, 279, 0, 393, 313,
	327, 310, 372, 0, 426, 454, 309, 445, 0, 437,
	282, 0, 436, 371, 423, 428, 357, 351, 281, 425,
	355, 350, 339, 317, 470, 340, 341, 331, 383, 349,
	384, 332, 361, 360, 362, 0, 0, 0, 0, 0,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 596, 0, 0, 600, 0, 439,
	0, 0, 0, 0, 0, 0, 411, 0, 0, 342,
	0, 0, 0, 455, 0, 396, 377, 622, 0, 0,
	394, 347, 424, 385, 430, 413, 438, 390, 386, 273,
	414, 312, 358, 285, 287, 307, 314, 316, 318, 319,
	367, 368, 380, 401, 415, 416, 417, 311, 295, 395,
	296, 329, 297, 274, 303, 301, 304, 403, 305, 276,
	381, 421, 0, 324, 391, 354, 277, 353, 382, 420,
	419, 286, 446, 452, 453, 542, 0, 458, 623, 624,
	625, 467, 472, 473, 474, 476, 477, 478, 479, 543,
	560, 527, 497, 460, 551, 494, 498, 499, 563, 0,
	0, 0, 451, 343, 344, 0, 322, 270, 271, 618,
	308, 373, 565, 598, 599, 490, 0, 552, 491, 500,
	300, 524, 536, 535, 369, 450, 0, 547, 550, 480,
	617, 0, 544, 559, 621, 558, 614, 379, 0, 400,
	556, 503, 0, 548, 522, 0, 549, 518, 553, 0,
	492, 0, 407, 432, 444, 461, 464, 493, 578, 579,
	580, 275, 463, 582, 583, 584, 585, 586, 587, 588,
	581, 435, 525, 502, 528, 443, 505, 504, 0, 0,
	539, 459, 540, 541, 363, 364, 365, 366, 326, 566,
	293, 462, 389, 0, 526, 0, 0, 0, 0, 0,
	0, 0, 0, 531, 532, 529, 626, 0, 589, 590,
	0, 0, 456, 457, 321, 328, 475, 330, 292, 378,
	323, 441, 337, 0, 468, 533, 469, 592, 595, 593,
	594, 370, 333, 334, 404, 338, 348, 392, 440, 376,
	397, 290, 431, 405, 352, 519, 546, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 574, 573, 572, 571, 570, 569, 568,
	567, 0, 0, 516, 418, 302, 264, 298, 299, 306,
	615, 612, 422, 616, 0, 272, 496, 346, 0, 387,
	320, 561, 562, 0, 0, 220, 221, 222, 223, 224,
	225, 226, 227, 265, 228, 229, 230, 231, 232, 233,
	234, 237, 238, 239, 240, 241, 242, 243, 244, 564,
	235, 236, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 256, 257, 258, 0, 0, 0, 266,
	267, 268, 269, 0, 0, 260, 261, 262, 263, 0,
	0, 0, 447, 448, 449, 471, 0, 433, 495, 613,
	0, 0, 0, 0, 0, 0, 0, 545, 557, 591,
	0, 601, 602, 604, 606, 605, 608, 410, 0, 619,
	486, 487, 620, 597, 375, 0, 501, 534, 523, 607,
	489, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 315, 1463, 0, 345, 538, 520, 530, 521, 506,
	507, 508, 515, 325, 509, 510, 511, 481, 512, 482,
	513, 514, 0, 537, 488, 406, 359, 555, 554, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 209, 0, 0,
	1467, 0, 0, 0, 288, 210, 483, 603, 485, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 291,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1465, 0, 0, 0, 0, 0,
	0, 278, 412, 429, 289, 402, 442, 294, 409, 284,
	374, 398, 0, 0, 280, 427, 408, 356, 335, 336,
	279, 0, 393, 313, 327, 310, 372, 0, 426, 454,
	309, 445, 0, 437, 282, 0, 436, 371, 423, 428,
	357, 351, 281, 425, 355, 350, 339, 317, 470, 340,
	341, 331, 383, 349, 384, 332, 361, 360, 362, 0,
	0, 0, 0, 0, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 596, 0,
	0, 600, 0, 439, 0, 0, 0, 0, 0, 0,
	411, 0, 0, 342, 0, 0, 0, 455, 0, 396,
	377, 622, 0, 0, 394, 347, 424, 385, 430, 413,
	438, 390, 386, 273, 414, 312, 358, 285, 287, 307,
	314, 316, 318, 319, 367, 368, 380, 401, 415, 416,
	417, 311, 295, 395, 296, 329, 297, 274, 303, 301,
	304, 403, 305, 276, 381, 421, 0, 324, 391, 354,
	277, 353, 382, 420, 419, 286, 446, 452, 453, 542,
	0, 458, 623, 624, 625, 467, 472, 473, 474, 476,
	477, 478, 479, 543, 560, 527, 497, 460, 551, 494,
	498, 499, 563, 0, 0, 0, 451, 343, 344, 0,
	322, 270, 271, 618, 308, 373, 565, 598, 599, 490,
	0, 552, 491, 500, 300, 524, 536, 535, 369, 450,
	0, 547, 550, 480, 617, 0, 544, 559, 621, 558,
	614, 379, 0, 400, 556, 503, 0, 548, 522, 0,
	549, 518, 553, 0, 492, 0, 407, 432, 444, 461,
	464, 493, 578, 579, 580, 275, 463, 582, 583, 584,
	585, 586, 587, 588, 581, 435, 525, 502, 528, 443,
	505, 504, 0, 0, 539, 459, 540, 541, 363, 364,
	365, 366, 326, 566, 293, 462, 389, 0, 526, 0,
	0, 0, 0, 0, 0, 0, 0, 531, 532, 529,
	626, 0, 589, 590, 0, 0, 456, 457, 321, 328,
	475, 330, 292, 378, 323, 441, 337, 0, 468, 533,
	469, 592, 595, 593, 594, 370, 333, 334, 404, 338,
	348, 392, 440, 376, 397, 290, 431, 405, 352, 519,
	546, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 574, 573, 572,
	571, 570, 569, 568, 567, 0, 0, 516, 418, 302,
	264, 298, 299, 306, 615, 612, 422, 616, 0, 272,
	496, 346, 0, 387, 320, 561, 562, 0, 0, 220,
	221, 222, 223, 224, 225, 226, 227, 265, 228, 229,
	230, 231, 232, 233, 234, 237, 238, 239, 240, 241,
	242, 243, 244, 564, 235, 236, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	0, 0, 0, 266, 267, 268, 269, 0, 0, 260,
	261, 262, 263, 0, 0, 0, 447, 448, 449, 471,
	0, 433, 495, 613, 0, 0, 0, 0, 0, 0,
	0, 545, 557, 591, 0, 601, 602, 604, 606, 605,
	608, 410, 0, 619, 486, 487, 620, 597, 375, 0,
	501, 534, 523, 607, 489, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 315, 0, 0, 345, 538,
	520, 530, 521, 506, 507, 508, 515, 325, 509, 510,
	511, 481, 512, 482, 513, 514, 0, 537, 488, 406,
	359, 555, 554, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3837,
	0, 209, 813, 0, 0, 0, 0, 0, 288, 210,
	483, 603, 485, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 291, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 278, 412, 429, 289, 402,
	442, 294, 409, 284, 374, 398, 0, 0, 280, 427,
	408, 356, 335, 336, 279, 0, 393, 313, 327, 310,
	372, 0, 426, 454, 309, 445, 0, 437, 282, 0,
	436, 371, 423, 428, 357, 351, 281, 425, 355, 350,
	339, 317, 470, 340, 341, 331, 383, 349, 384, 332,
	361, 360, 362, 0, 0, 0, 0, 0, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 596, 0, 0, 600, 0, 439, 0, 0,
	0, 0, 0, 0, 411, 0, 0, 342, 0, 0,
	0, 455, 0, 396, 377, 622, 0, 0, 394, 347,
	424, 385, 430, 413, 438, 390, 386, 273, 414, 312,
	358, 285, 287, 307, 314, 316, 318, 319, 367, 368,
	380, 401, 415, 416, 417, 311, 295, 395, 296, 329,
	297, 274, 303, 301, 304, 403, 305, 276, 381, 421,
	0, 324, 391, 354, 277, 353, 382, 420, 419, 286,
	446, 452, 453, 542, 0, 458, 623, 624, 625, 467,
	472, 473, 474, 476, 477, 478, 479, 543, 560, 527,
	497, 460, 551, 494, 498, 499, 563, 0, 0, 0,
	451, 343, 344, 0, 322, 270, 271, 618, 308, 373,
	565, 598, 599, 490, 0, 552, 491, 500, 300, 524,
	536, 535, 369, 450, 0, 547, 550, 480, 617, 0,
	544, 559, 621, 558, 614, 379, 0, 400, 556, 503,
	0, 548, 522, 0, 549, 518, 553, 0, 492, 0,
	407, 432, 444, 461, 464, 493, 578, 579, 580, 275,
	463, 582, 583, 584, 585, 586, 587, 588, 581, 435,
	525, 502, 528, 443, 505, 504, 0, 0, 539, 459,
	540, 541, 363, 364, 365, 366, 326, 566, 293, 462,
	389, 0, 526, 0, 0, 0, 0, 0, 0, 0,
	0, 531, 532, 529, 626, 0, 589, 590, 0, 0,
	456, 457, 321, 328, 475, 330, 292, 378, 323, 441,
	337, 0, 468, 533, 469, 592, 595, 593, 594, 370,
	333, 334, 404, 338, 348, 392, 440, 376, 397, 290,
	431, 405, 352, 519, 546, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 574, 573, 572, 571, 570, 569, 568, 567, 0,
	0, 516, 418, 302, 264, 298, 299, 306, 615, 612,
	422, 616, 0, 272, 496, 346, 0, 387, 320, 561,
	562, 0, 0, 220, 221, 222, 223, 224, 225, 226,
	227, 265, 228, 229, 230, 231, 232, 233, 234, 237,
	238, 239, 240, 241, 242, 243, 244, 564, 235, 236,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
	255, 256, 257, 258, 0, 0, 0, 266, 267, 268,
	269, 0, 0, 260, 261, 262, 263, 0, 0, 0,
	447, 448, 449, 471, 0, 433, 495, 613, 0, 0,
	0, 0, 0, 0, 0, 545, 557, 591, 0, 601,
	602, 604, 606, 605, 608, 410, 0, 619, 486, 487,
	620, 597, 375, 0, 501, 534, 523, 607, 489, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 315,
	0, 0, 345, 538, 520, 530, 521, 506, 507, 508,
	515, 325, 509, 510, 511, 481, 512, 482, 513, 514,
	0, 537, 488, 406, 359, 555, 554, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 209, 0, 0, 1467, 0,
	0, 0, 288, 210, 483, 603, 485, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 291, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1465, 0, 0, 0, 0, 0, 0, 278,
	412, 429, 289, 402, 442, 294, 409, 284, 374, 398,
	0, 0, 280, 427, 408, 356, 335, 336, 279, 0,
	393, 313, 327, 310, 372, 0, 426, 454, 309, 445,
	0, 437, 282, 0, 436, 371, 423, 428, 357, 351,
	281, 425, 355, 350, 339, 317, 470, 340, 341, 331,
	383, 349, 384, 332, 361, 360, 362, 0, 0, 0,
	0, 0, 465, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 596, 0, 0, 600,
	0, 439, 0, 0, 0, 0, 0, 0, 411, 0,
	0, 342, 0, 0, 0, 455, 0, 396, 377, 622,
	0, 0, 394, 347, 424, 385, 430, 413, 438, 390,
	386, 273, 414, 312, 358, 285, 287, 307, 314, 316,
	318, 319, 367, 368, 380, 401, 415, 416, 417, 311,
	295, 395, 296, 329, 297, 274, 303, 301, 304, 403,
	305, 276, 381, 421, 0, 324, 391, 354, 277, 353,
	382, 420, 419, 286, 446, 452, 453, 542, 0, 458,
	623, 624, 625, 467, 472, 473, 474, 476, 477, 478,
	479, 543, 560, 527, 497, 460, 551, 494, 498, 499,
	563, 0, 0, 0, 451, 343, 344, 0, 322, 270,
	271, 618, 308, 373, 565, 598, 599, 490, 0, 552,
	491, 500, 300, 524, 536, 535, 369, 450, 0, 547,
	550, 480, 617, 0, 544, 559, 621, 558, 614, 379,
	0, 400, 556, 503, 0, 548, 522, 0, 549, 518,
	553, 0, 492, 0, 407, 432, 444, 461, 464, 493,
	578, 579, 580, 275, 463, 582, 583, 584, 585, 586,
	587, 588, 581, 435, 525, 502, 528, 443, 505, 504,
	0, 0, 539, 459, 540, 541, 363, 364, 365, 366,
	326, 566, 293, 462, 389, 0, 526, 0, 0, 0,
	0, 0, 0, 0, 0, 531, 532, 529, 626, 0,
	589, 590, 0, 0, 456, 457, 321, 328, 475, 330,
	292, 378, 323, 441, 337, 0, 468, 533, 469, 592,
	595, 593, 594, 370, 333, 334, 404, 338, 348, 392,
	440, 376, 397, 290, 431, 405, 352, 519, 546, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 574, 573, 572, 571, 570,
	569, 568, 567, 0, 0, 516, 418, 302, 264, 298,
	299, 306, 615, 612, 422, 616, 0, 272, 496, 346,
	0, 387, 320, 561, 562, 0, 0, 220, 221, 222,
	223, 224, 225, 226, 227, 265, 228, 229, 230, 231,
	232, 233, 234, 237, 238, 239, 240, 241, 242, 243,
	244, 564, 235, 236, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 256, 257, 258, 0, 0,
	0, 266, 267, 268, 269, 0, 0, 260, 261, 262,
	263, 0, 0, 0, 447, 448, 449, 471, 0, 433,
	495, 613, 0, 0, 0, 0, 0, 0, 0, 545,
	557, 591, 0, 601, 602, 604, 606, 605, 608, 410,
	0, 619, 486, 487, 620, 597, 375, 0, 501, 534,
	523, 607, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 315, 0, 0, 345, 538, 520, 530,
	521, 506, 507, 508, 515, 325, 509, 510, 511, 481,
	512, 482, 513, 514, 0, 537, 488, 406, 359, 555,
	554, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 209,
	0, 0, 1467, 0, 0, 0, 288, 210, 483, 603,
	485, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 291, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1674, 0, 0, 0,
	0, 0, 0, 278, 412, 429, 289, 402, 442, 294,
	409, 284, 374, 398, 0, 0, 280, 427, 408, 356,
	335, 336, 279, 0, 393, 313, 327, 310, 372, 0,
	426, 454, 309, 445, 0, 437, 282, 0, 436, 371,
	423, 428, 357, 351, 281, 425, 355, 350, 339, 317,
	470, 340, 341, 331, 383, 349, 384, 332, 361, 360,
	362, 0, 0, 0, 0, 0, 465, 466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	596, 0, 0, 600, 0, 439, 0, 0, 0, 0,
	0, 0, 411, 0, 0, 342, 0, 0, 0, 455,
	0, 396, 377, 622, 0, 0, 394, 347, 424, 385,
	430, 413, 438, 390, 386, 273, 414, 312, 358, 285,
	287, 307, 314, 316, 318, 319, 367, 368, 380, 401,
	415, 416, 417, 311, 295, 395, 296, 329, 297, 274,
	303, 301, 304, 403, 305, 276, 381, 421, 0, 324,
	391, 354, 277, 353, 382, 420, 419, 286, 446, 452,
	453, 542, 0, 458, 623, 624, 625, 467, 472, 473,
	474, 476, 477, 478, 479, 543, 560, 527, 497, 460,
	551, 494, 498, 499, 563, 0, 0, 0, 451, 343,
	344, 0, 322, 270, 271, 618, 308, 373, 565, 598,
	599, 490, 0, 552, 491, 500, 300, 524, 536, 535,
	369, 450, 0, 547, 550, 480, 617, 0, 544, 559,
	621, 558, 614, 379, 0, 400, 556, 503, 0, 548,
	522, 0, 549, 518, 553, 0, 492, 0, 407, 432,
	444, 461, 464, 493, 578, 579, 580, 275, 463, 582,
	583, 584, 585, 586, 587, 588, 581, 435, 525, 502,
	528, 443, 505, 504, 0, 0, 539, 459, 540, 541,
	363, 364, 365, 366, 326, 566, 293, 462, 389, 0,
	526, 0, 0, 0, 0, 0, 0, 0, 0, 531,
	532, 529, 626, 0, 589, 590, 0, 0, 456, 457,
	321, 328, 475, 330, 292, 378, 323, 441, 337, 0,
	468, 533, 469, 592, 595, 593, 594, 370, 333, 334,
	404, 338, 348, 392, 440, 376, 397, 290, 431, 405,
	352, 519, 546, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 574,
	573, 572, 571, 570, 569, 568, 567, 0, 0, 516,
	418, 302, 264, 298, 299, 306, 615, 612, 422, 616,
	0, 272, 496, 346, 0, 387, 320, 561, 562, 0,
	0, 220, 221, 222, 223, 224, 225, 226, 227, 265,
	228, 229, 230, 231, 232, 233, 234, 237, 238, 239,
	240, 241, 242, 243, 244, 564, 235, 236, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 256,
	257, 258, 0, 0, 0, 266, 267, 268, 269, 0,
	0, 260, 261, 262, 263, 0, 0, 0, 447, 448,
	449, 471, 0, 433, 495, 613, 0, 0, 0, 0,
	0, 0, 0, 545, 557, 591, 0, 601, 602, 604,
	606, 605, 608, 410, 0, 619, 486, 487, 620, 597,
	375, 0, 501, 534, 523, 607, 489, 0, 0, 0,
	0, 0, 2395, 0, 0, 0, 0, 315, 0, 0,
	345, 538, 520, 530, 521, 506, 507, 508, 515, 325,
	509, 510, 511, 481, 512, 482, 513, 514, 0, 537,
	488, 406, 359, 555, 554, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 0, 0, 2397, 0, 0, 0,
	288, 210, 483, 603, 485, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 291, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 278, 412, 429,
	289, 402, 442, 294, 409, 284, 374, 398, 0, 0,
	280, 427, 408, 356, 335, 336, 279, 0, 393, 313,
	327, 310, 372, 0, 426, 454, 309, 445, 0, 437,
	282, 0, 436, 371, 423, 428, 357, 351, 281, 425,
	355, 350, 339, 317, 470, 340, 341, 331, 383, 349,
	384, 332, 361, 360, 362, 0, 0, 0, 0, 0,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 596, 0, 0, 600, 0, 439,
	0, 0, 0, 0, 0, 0, 411, 0, 0, 342,
	0, 0, 0, 455, 0, 396, 377, 622, 0, 0,
	394, 347, 424, 385, 430, 413, 438, 390, 386, 273,
	414, 312, 358, 285, 287, 307, 314, 316, 318, 319,
	367, 368, 380, 401, 415, 416, 417, 311, 295, 395,
	296, 329, 297, 274, 303, 301, 304, 403, 305, 276,
	381, 421, 0, 324, 391, 354, 277, 353, 382, 420,
	419, 286, 446, 452, 453, 542, 0, 458, 623, 624,
	625, 467, 472, 473, 474, 476, 477, 478, 479, 543,
	560, 527, 497, 460, 551, 494, 498, 499, 563, 0,
	0, 0, 451, 343, 344, 0, 322, 270, 271, 618,
	308, 373, 565, 598, 599, 490, 0, 552, 491, 500,
	300, 524, 536, 535, 369, 450, 0, 547, 550, 480,
	617, 0, 544, 559, 621, 558, 614, 379, 0, 400,
	556, 503, 0, 548, 522, 0, 549, 518, 553, 0,
	492, 0, 407, 432, 444, 461, 464, 493, 578, 579,
	580, 275, 463, 582, 583, 584, 585, 586, 587, 588,
	581, 435, 525, 502, 528, 443, 505, 504, 0, 0,
	539, 459, 540, 541, 363, 364, 365, 366, 326, 566,
	293, 462, 389, 0, 526, 0, 0, 0, 0, 0,
	0, 0, 0, 531, 532, 529, 626, 0, 589, 590,
	0, 0, 456, 457, 321, 328, 475, 330, 292, 378,
	323, 441, 337, 0, 468, 533, 469, 592, 595, 593,
	594, 370, 333, 334, 404, 338, 348, 392, 440, 376,
	397, 290, 431, 405, 352, 519, 546, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 574, 573, 572, 571, 570, 569, 568,
	567, 0, 0, 516, 418, 302, 264, 298, 299, 306,
	615, 612, 422, 616, 0, 272, 496, 346, 0, 387,
	320, 561, 562, 0, 0, 220, 221, 222, 223, 224,
	225, 226, 227, 265, 228, 229, 230, 231, 232, 233,
	234, 237, 238, 239, 240, 241, 242, 243, 244, 564,
	235, 236, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 256, 257, 258, 0, 0, 0, 266,
	267, 268, 269, 0, 0, 260, 261, 262, 263, 0,
	0, 0, 447, 448, 449, 471, 0, 433, 495, 613,
	0, 0, 0, 0, 0, 0, 0, 545, 557, 591,
	0, 601, 602, 604, 606, 605, 608, 410, 0, 619,
	486, 487, 620, 597, 375, 0, 501, 534, 523, 607,
	489, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 315, 0, 0, 345, 538, 520, 530, 521, 506,
	507, 508, 515, 325, 509, 510, 511, 481, 512, 482,
	513, 514, 0, 537, 488, 406, 359, 555, 554, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 209, 0, 0,
	3029, 3031, 0, 0, 288, 210, 483, 603, 485, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 291,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 278, 412, 429, 289, 402, 442, 294, 409, 284,
	374, 398, 0, 0, 280, 427, 408, 356, 335, 336,
	279, 0, 393, 313, 327, 310, 372, 0, 426, 454,
	309, 445, 0, 437, 282, 0, 436, 371, 423, 428,
	357, 351, 281, 425, 355, 350, 339, 317, 470, 340,
	341, 331, 383, 349, 384, 332, 361, 360, 362, 0,
	0, 0, 0, 0, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 596, 0,
	0, 600, 0, 439, 0, 0, 0, 0, 0, 0,
	411, 0, 0, 342, 0, 0, 0, 455, 0, 396,
	377, 622, 0, 0, 394, 347, 424, 385, 430, 413,
	438, 390, 386, 273, 414, 312, 358, 285, 287, 307,
	314, 316, 318, 319, 367, 368, 380, 401, 415, 416,
	417, 311, 295, 395, 296, 329, 297, 274, 303, 301,
	304, 403, 305, 276, 381, 421, 0, 324, 391, 354,
	277, 353, 382, 420, 419, 286, 446, 452, 453, 542,
	0, 458, 623, 624, 625, 467, 472, 473, 474, 476,
	477, 478, 479, 543, 560, 527, 497, 460, 551, 494,
	498, 499, 563, 0, 0, 0, 451, 343, 344, 0,
	322, 270, 271, 618, 308, 373, 565, 598, 599, 490,
	0, 552, 491, 500, 300, 524, 536, 535, 369, 450,
	0, 547, 550, 480, 617, 0, 544, 559, 621, 558,
	614, 379, 0, 400, 556, 503, 0, 548, 522, 0,
	549, 518, 553, 0, 492, 0, 407, 432, 444, 461,
	464, 493, 578, 579, 580, 275, 463, 582, 583, 584,
	585, 586, 587, 588, 581, 435, 525, 502, 528, 443,
	505, 504, 0, 0, 539, 459, 540, 541, 363, 364,
	365, 366, 326, 566, 293, 462, 389, 0, 526, 0,
	0, 0, 0, 0, 0, 0, 0, 531, 532, 529,
	626, 0, 589, 590, 0, 0, 456, 457, 321, 328,
	475, 330, 292, 378, 323, 441, 337, 0, 468, 533,
	469, 592, 595, 593, 594, 370, 333, 334, 404, 338,
	348, 392, 440, 376, 397, 290, 431, 405, 352, 519,
	546, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 574, 573, 572,
	571, 570, 569, 568, 567, 0, 0, 516, 418, 302,
	264, 298, 299, 306, 615, 612, 422, 616, 0, 272,
	496, 346, 0, 387, 320, 561, 562, 0, 0, 220,
	221, 222, 223, 224, 225, 226, 227, 265, 228, 229,
	230, 231, 232, 233, 234, 237, 238, 239, 240, 241,
	242, 243, 244, 564, 235, 236, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	0, 0, 0, 266, 267, 268, 269, 0, 0, 260,
	261, 262, 263, 0, 0, 0, 447, 448, 449, 471,
	0, 433, 495, 613, 0, 0, 0, 0, 0, 0,
	0, 545, 557, 591, 0, 601, 602, 604, 606, 605,
	608, 410, 0, 619, 486, 487, 620, 597, 375, 0,
	501, 534, 523, 607, 489, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 315, 2416, 0, 345, 538,
	520, 530, 521, 506, 507, 508, 515, 325, 509, 510,
	511, 481, 512, 482, 513, 514, 0, 537, 488, 406,
	359, 555, 554, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 209, 0, 0, 1467, 0, 0, 0, 288, 210,
	483, 603, 485, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 291, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 278, 412, 429, 289, 402,
	442, 294, 409, 284, 374, 398, 0, 0, 280, 427,
	408, 356, 335, 336, 279, 0, 393, 313, 327, 310,
	372, 0, 426, 454, 309, 445, 0, 437, 282, 0,
	436, 371, 423, 428, 357, 351, 281, 425, 355, 350,
	339, 317, 470, 340, 341, 331, 383, 349, 384, 332,
	361, 360, 362, 0, 0, 0, 0, 0, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 596, 0, 0, 600, 0, 439, 0, 0,
	0, 0, 0, 0, 411, 0, 0, 342, 0, 0,
	0, 455, 0, 396, 377, 622, 0, 0, 394, 347,
	424, 385, 430, 413, 438, 390, 386, 273, 414, 312,
	358, 285, 287, 307, 314, 316, 318, 319, 367, 368,
	380, 401, 415, 416, 417, 311, 295, 395, 296, 329,
	297, 274, 303, 301, 304, 403, 305, 276, 381, 421,
	0, 324, 391, 354, 277, 353, 382, 420, 419, 286,
	446, 452, 453, 542, 0, 458, 623, 624, 625, 467,
	472, 473, 474, 476, 477, 478, 479, 543, 560, 527,
	497, 460, 551, 494, 498, 499, 563, 0, 0, 0,
	451, 343, 344, 0, 322, 270, 271, 618, 308, 373,
	565, 598, 599, 490, 0, 552, 491, 500, 300, 524,
	536, 535, 369, 450, 0, 547, 550, 480, 617, 0,
	544, 559, 621, 558, 614, 379, 0, 400, 556, 503,
	0, 548, 522, 0, 549, 518, 553, 0, 492, 0,
	407, 432, 444, 461, 464, 493, 578, 579, 580, 275,
	463, 582, 583, 584, 585, 586, 587, 588, 581, 435,
	525, 502, 528, 443, 505, 504, 0, 0, 539, 459,
	540, 541, 363, 364, 365, 366, 326, 566, 293, 462,
	389, 0, 526, 0, 0, 0, 0, 0, 0, 0,
	0, 531, 532, 529, 626, 0, 589, 590, 0, 0,
	456, 457, 321, 328, 475, 330, 292, 378, 323, 441,
	337, 0, 468, 533, 469, 592, 595, 593, 594, 370,
	333, 334, 404, 338, 348, 392, 440, 376, 397, 290,
	431, 405, 352, 519, 546, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 574, 573, 572, 571, 570, 569, 568, 567, 0,
	0, 516, 418, 302, 264, 298, 299, 306, 615, 612,
	422, 616, 0, 272, 496, 346, 0, 387, 320, 561,
	562, 0, 0, 220, 221, 222, 223, 224, 225, 226,
	227, 265, 228, 229, 230, 231, 232, 233, 234, 237,
	238, 239, 240, 241, 242, 243, 244, 564, 235, 236,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
	255, 256, 257, 258, 0, 0, 0, 266, 267, 268,
	269, 0, 0, 260, 261, 262, 263, 0, 0, 0,
	447, 448, 449, 471, 0, 433, 495, 613, 0, 0,
	0, 0, 0, 0, 0, 545, 557, 591, 0, 601,
	602, 604, 606, 605, 608, 410, 0, 619, 486, 487,
	620, 597, 375, 0, 501, 534, 523, 607, 489, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 633, 315,
	0, 0, 345, 538, 520, 530, 521, 506, 507, 508,
	515, 325, 509, 510, 511, 481, 512, 482, 513, 514,
	0, 537, 488, 406, 359, 555, 554, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 209, 0, 0, 0, 0,
	0, 0, 288, 210, 483, 603, 485, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 291, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 278,
	412, 429, 289, 402, 442, 294, 409, 284, 374, 398,
	0, 0, 280, 427, 408, 356, 335, 336, 279, 0,
	393, 313, 327, 310, 372, 0, 426, 454, 309, 445,
	0, 437, 282, 0, 436, 371, 423, 428, 357, 351,
	281, 425, 355, 350, 339, 317, 470, 340, 341, 331,
	383, 349, 384, 332, 361, 360, 362, 0, 0, 0,
	0, 0, 465, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 596, 0, 0, 600,
	0, 439, 0, 632, 0, 0, 0, 0, 411, 0,
	0, 342, 0, 0, 0, 455, 0, 396, 377, 622,
	0, 0, 394, 347, 424, 385, 430, 413, 438, 390,
	386, 273, 414, 312, 358, 285, 287, 307, 314, 316,
	318, 319, 367, 368, 380, 401, 415, 416, 417, 311,
	295, 395, 296, 329, 297, 274, 303, 301, 304, 403,
	305, 276, 381, 421, 0, 324, 391, 354, 277, 353,
	382, 420, 419, 286, 446, 452, 453, 542, 0, 458,
	623, 624, 625, 467, 472, 473, 474, 476, 477, 478,
	479, 543, 560, 527, 497, 460, 551, 494, 498, 499,
	563, 0, 0, 0, 451, 343, 344, 0, 322, 270,
	271, 618, 308, 373, 565, 598, 599, 490, 0, 552,
	491, 500, 300, 524, 536, 535, 369, 450, 0, 547,
	550, 480, 617, 0, 544, 559, 621, 558, 614, 379,
	0, 400, 556, 503, 0, 548, 522, 0, 549, 518,
	553, 0, 492, 0, 407, 432, 444, 461, 464, 493,
	578, 579, 580, 275, 463, 582, 583, 584, 585, 586,
	587, 588, 581, 435, 525, 502, 528, 443, 505, 504,
	0, 0, 539, 459, 540, 541, 363, 364, 365, 366,
	326, 566, 293, 462, 389, 0, 526, 0, 0, 0,
	0, 0, 0, 0, 0, 531, 532, 529, 626, 0,
	589, 590, 0, 0, 456, 457, 321, 328, 475, 330,
	292, 378, 323, 441, 337, 0, 468, 533, 469, 592,
	595, 593, 594, 370, 333, 334, 404, 338, 348, 392,
	440, 376, 397, 290, 431, 405, 352, 519, 546, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 574, 573, 572, 571, 570,
	569, 568, 567, 0, 0, 516, 418, 302, 264, 298,
	299, 306, 615, 612, 422, 616, 0, 272, 496, 346,
	0, 387, 320, 561, 562, 0, 0, 220, 221, 222,
	223, 224, 225, 226, 227, 265, 228, 229, 230, 231,
	232, 233, 234, 237, 238, 239, 240, 241, 242, 243,
	244, 564, 235, 236, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 256, 257, 258, 0, 0,
	0, 266, 267, 268, 269, 0, 0, 260, 261, 262,
	263, 0, 0, 0, 447, 448, 449, 471, 0, 433,
	495, 613, 0, 0, 0, 0, 0, 0, 0, 545,
	557, 591, 0, 601, 602, 604, 606, 605, 608, 410,
	0, 619, 486, 487, 620, 597, 375, 0, 501, 534,
	523, 607, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 315, 0, 0, 345, 538, 520, 530,
	521, 506, 507, 508, 515, 325, 509, 510, 511, 481,
	512, 482, 513, 514, 0, 537, 488, 406, 359, 555,
	554, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 209,
	813, 0, 0, 0, 0, 0, 288, 210, 483, 603,
	485, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 291, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 278, 412, 429, 289, 402, 442, 294,
	409, 284, 374, 398, 0, 0, 280, 427, 408, 356,
	335, 336, 279, 0, 393, 313, 327, 310, 372, 0,
	426, 454, 309, 445, 0, 437, 282, 0, 436, 371,
	423, 428, 357, 351, 281, 425, 355, 350, 339, 317,
	470, 340, 341, 331, 383, 349, 384, 332, 361, 360,
	362, 0, 0, 0, 0, 0, 465, 466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	596, 0, 0, 600, 0, 439, 0, 0, 0, 0,
	0, 0, 411, 0, 0, 342, 0, 0, 0, 455,
	0, 396, 377, 622, 0, 0, 394, 347, 424, 385,
	430, 413, 438, 390, 386, 273, 414, 312, 358, 285,
	287, 307, 314, 316, 318, 319, 367, 368, 380, 401,
	415, 416, 417, 311, 295, 395, 296, 329, 297, 274,
	303, 301, 304, 403, 305, 276, 381, 421, 0, 324,
	391, 354, 277, 353, 382, 420, 419, 286, 446, 452,
	453, 542, 0, 458, 623, 624, 625, 467, 472, 473,
	474, 476, 477, 478, 479, 543, 560, 527, 497, 460,
	551, 494, 498, 499, 563, 0, 0, 0, 451, 343,
	344, 0, 322, 270, 271, 618, 308, 373, 565, 598,
	599, 490, 0, 552, 491, 500, 300, 524, 536, 535,
	369, 450, 0, 547, 550, 480, 617, 0, 544, 559,
	621, 558, 614, 379, 0, 400, 556, 503, 0, 548,
	522, 0, 549, 518, 553, 0, 492, 0, 407, 432,
	444, 461, 464, 493, 578, 579, 580, 275, 463, 582,
	583, 584, 585, 586, 587, 588, 581, 435, 525, 502,
	528, 443, 505, 504, 0, 0, 539, 459, 540, 541,
	363, 364, 365, 366, 326, 566, 293, 462, 389, 0,
	526, 0, 0, 0, 0, 0, 0, 0, 0, 531,
	532, 529, 626, 0, 589, 590, 0, 0, 456, 457,
	321, 328, 475, 330, 292, 378, 323, 441, 337, 0,
	468, 533, 469, 592, 595, 593, 594, 370, 333, 334,
	404, 338, 348, 392, 440, 376, 397, 290, 431, 405,
	352, 519, 546, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 574,
	573, 572, 571, 570, 569, 568, 567, 0, 0, 516,
	418, 302, 264, 298, 299, 306, 615, 612, 422, 616,
	0, 272, 496, 346, 0, 387, 320, 561, 562, 0,
	0, 220, 221, 222, 223, 224, 225, 226, 227, 265,
	228, 229, 230, 231, 232, 233, 234, 237, 238, 239,
	240, 241, 242, 243, 244, 564, 235, 236, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 256,
	257, 258, 0, 0, 0, 266, 267, 268, 269, 0,
	0, 260, 261, 262, 263, 0, 0, 0, 447, 448,
	449, 471, 0, 433, 495, 613, 0, 0, 0, 0,
	0, 0, 0, 545, 557, 591, 0, 601, 602, 604,
	606, 605, 608, 410, 0, 619, 486, 487, 620, 597,
	375, 0, 501, 534, 523, 607, 489, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 315, 0, 0,
	345, 538, 520, 530, 521, 506, 507, 508, 515, 325,
	509, 510, 511, 481, 512, 482, 513, 514, 0, 537,
	488, 406, 359, 555, 554, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3816, 0, 0, 209, 0, 0, 0, 0, 0, 0,
	288, 210, 483, 603, 485, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 291, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 278, 412, 429,
	289, 402, 442, 294, 409, 284, 374, 398, 0, 0,
	280, 427, 408, 356, 335, 336, 279, 0, 393, 313,
	327, 310, 372, 0, 426, 454, 309, 445, 0, 437,
	282, 0, 436, 371, 423, 428, 357, 351, 281, 425,
	355, 350, 339, 317, 470, 340, 341, 331, 383, 349,
	384, 332, 361, 360, 362, 0, 0, 0, 0, 0,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 596, 0, 0, 600, 0, 439,
	0, 0, 0, 0, 0, 0, 411, 0, 0, 342,
	0, 0, 0, 455, 0, 396, 377, 622, 0, 0,
	394, 347, 424, 385, 430, 413, 438, 390, 386, 273,
	414, 312, 358, 285, 287, 307, 314, 316, 318, 319,
	367, 368, 380, 401, 415, 416, 417, 311, 295, 395,
	296, 329, 297, 274, 303, 301, 304, 403, 305, 276,
	381, 421, 0, 324, 391, 354, 277, 353, 382, 420,
	419, 286, 446, 452, 453, 542, 0, 458, 623, 624,
	625, 467, 472, 473, 474, 476, 477, 478, 479, 543,
	560, 527, 497, 460, 551, 494, 498, 499, 563, 0,
	0, 0, 451, 343, 344, 0, 322, 270, 271, 618,
	308, 373, 565, 598, 599, 490, 0, 552, 491, 500,
	300, 524, 536, 535, 369, 450, 0, 547, 550, 480,
	617, 0, 544, 559, 621, 558, 614, 379, 0, 400,
	556, 503, 0, 548, 522, 0, 549, 518, 553, 0,
	492, 0, 407, 432, 444, 461, 464, 493, 578, 579,
	580, 275, 463, 582, 583, 584, 585, 586, 587, 588,
	581, 435, 525, 502, 528, 443, 505, 504, 0, 0,
	539, 459, 540, 541, 363, 364, 365, 366, 326, 566,
	293, 462, 389, 0, 526, 0, 0, 0, 0, 0,
	0, 0, 0, 531, 532, 529, 626, 0, 589, 590,
	0, 0, 456, 457, 321, 328, 475, 330, 292, 378,
	323, 441, 337, 0, 468, 533, 469, 592, 595, 593,
	594, 370, 333, 334, 404, 338, 348, 392, 440, 376,
	397, 290, 431, 405, 352, 519, 546, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 574, 573, 572, 571, 570, 569, 568,
	567, 0, 0, 516, 418, 302, 264, 298, 299, 306,
	615, 612, 422, 616, 0, 272, 496, 346, 0, 387,
	320, 561, 562, 0, 0, 220, 221, 222, 223, 224,
	225, 226, 227, 265, 228, 229, 230, 231, 232, 233,
	234, 237, 238, 239, 240, 241, 242, 243, 244, 564,
	235, 236, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 256, 257, 258, 0, 0, 0, 266,
	267, 268, 269, 0, 0, 260, 261, 262, 263, 0,
	0, 0, 447, 448, 449, 471, 0, 433, 495, 613,
	0, 0, 0, 0, 0, 0, 0, 545, 557, 591,
	0, 601, 602, 604, 606, 605, 608, 410, 0, 619,
	486, 487, 620, 597, 375, 0, 501, 534, 523, 607,
	489, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 315, 0, 0, 345, 538, 520, 530, 521, 506,
	507, 508, 515, 325, 509, 510, 511, 481, 512, 482,
	513, 514, 0, 537, 488, 406, 359, 555, 554, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 209, 0, 0,
	3597, 0, 0, 0, 288, 210, 483, 603, 485, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 291,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 278, 412, 429, 289, 402, 442, 294, 409, 284,
	374, 398, 0, 0, 280, 427, 408, 356, 335, 336,
	279, 0, 393, 313, 327, 310, 372, 0, 426, 454,
	309, 445, 0, 437, 282, 0, 436, 371, 423, 428,
	357, 351, 281, 425, 355, 350, 339, 317, 470, 340,
	341, 331, 383, 349, 384, 332, 361, 360, 362, 0,
	0, 0, 0, 0, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 596, 0,
	0, 600, 0, 439, 0, 0, 0, 0, 0, 0,
	411, 0, 0, 342, 0, 0, 0, 455, 0, 396,
	377, 622, 0, 0, 394, 347, 424, 385, 430, 413,
	438, 390, 386, 273, 414, 312, 358, 285, 287, 307,
	314, 316, 318, 319, 367, 368, 380, 401, 415, 416,
	417, 311, 295, 395, 296, 329, 297, 274, 303, 301,
	304, 403, 305, 276, 381, 421, 0, 324, 391, 354,
	277, 353, 382, 420, 419, 286, 446, 452, 453, 542,
	0, 458, 623, 624, 625, 467, 472, 473, 474, 476,
	477, 478, 479, 543, 560, 527, 497, 460, 551, 494,
	498, 499, 563, 0, 0, 0, 451, 343, 344, 0,
	322, 270, 271, 618, 308, 373, 565, 598, 599, 490,
	0, 552, 491, 500, 300, 524, 536, 535, 369, 450,
	0, 547, 550, 480, 617, 0, 544, 559, 621, 558,
	614, 379, 0, 400, 556, 503, 0, 548, 522, 0,
	549, 518, 553, 0, 492, 0, 407, 432, 444, 461,
	464, 493, 578, 579, 580, 275, 463, 582, 583, 584,
	585, 586, 587, 588, 581, 435, 525, 502, 528, 443,
	505, 504, 0, 0, 539, 459, 540, 541, 363, 364,
	365, 366, 326, 566, 293, 462, 389, 0, 526, 0,
	0, 0, 0, 0, 0, 0, 0, 531, 532, 529,
	626, 0, 589, 590, 0, 0, 456, 457, 321, 328,
	475, 330, 292, 378, 323, 441, 337, 0, 468, 533,
	469, 592, 595, 593, 594, 370, 333, 334, 404, 338,
	348, 392, 440, 376, 397, 290, 431, 405, 352, 519,
	546, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 574, 573, 572,
	571, 570, 569, 568, 567, 0, 0, 516, 418, 302,
	264, 298, 299, 306, 615, 612, 422, 616, 0, 272,
	496, 346, 0, 387, 320, 561, 562, 0, 0, 220,
	221, 222, 223, 224, 225, 226, 227, 265, 228, 229,
	230, 231, 232, 233, 234, 237, 238, 239, 240, 241,
	242, 243, 244, 564, 235, 236, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	0, 0, 0, 266, 267, 268, 269, 0, 0, 260,
	261, 262, 263, 0, 0, 0, 447, 448, 449, 471,
	0, 433, 495, 613, 0, 0, 0, 0, 0, 0,
	0, 545, 557, 591, 0, 601, 602, 604, 606, 605,
	608, 410, 0, 619, 486, 487, 620, 597, 375, 0,
	501, 534, 523, 607, 489, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 315, 0, 0, 345, 538,
	520, 530, 521, 506, 507, 508, 515, 325, 509, 510,
	511, 481, 512, 482, 513, 514, 0, 537, 488, 406,
	359, 555, 554, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 209, 0, 0, 0, 0, 0, 0, 288, 210,
	483, 603, 485, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 291, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 278, 412, 429, 289, 402,
	442, 294, 409, 284, 374, 398, 0, 0, 280, 427,
	408, 356, 335, 336, 279, 0, 393, 313, 327, 310,
	372, 0, 426, 454, 309, 445, 0, 437, 282, 0,
	436, 371, 423, 428, 357, 351, 281, 425, 355, 350,
	339, 317, 470, 340, 341, 331, 383, 349, 384, 332,
	361, 360, 362, 0, 0, 0, 0, 0, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 596, 0, 0, 600, 0, 439, 0, 0,
	0, 3725, 0, 0, 411, 0, 0, 342, 0, 0,
	0, 455, 0, 396, 377, 622, 0, 0, 394, 347,
	424, 385, 430, 413, 438, 390, 386, 273, 414, 312,
	358, 285, 287, 307, 314, 316, 318, 319, 367, 368,
	380, 401, 415, 416, 417, 311, 295, 395, 296, 329,
	297, 274, 303, 301, 304, 403, 305, 276, 381, 421,
	0, 324, 391, 354, 277, 353, 382, 420, 419, 286,
	446, 452, 453, 542, 0, 458, 623, 624, 625, 467,
	472, 473, 474, 476, 477, 478, 479, 543, 560, 527,
	497, 460, 551, 494, 498, 499, 563, 0, 0, 0,
	451, 343, 344, 0, 322, 270, 271, 618, 308, 373,
	565, 598, 599, 490, 0, 552, 491, 500, 300, 524,
	536, 535, 369, 450, 0, 547, 550, 480, 617, 0,
	544, 559, 621, 558, 614, 379, 0, 400, 556, 503,
	0, 548, 522, 0, 549, 518, 553, 0, 492, 0,
	407, 432, 444, 461, 464, 493, 578, 579, 580, 275,
	463, 582, 583, 584, 585, 586, 587, 588, 581, 435,
	525, 502, 528, 443, 505, 504, 0, 0, 539, 459,
	540, 541, 363, 364, 365, 366, 326, 566, 293, 462,
	389, 0, 526, 0, 0, 0, 0, 0, 0, 0,
	0, 531, 532, 529, 626, 0, 589, 590, 0, 0,
	456, 457, 321, 328, 475, 330, 292, 378, 323, 441,
	337, 0, 468, 533, 469, 592, 595, 593, 594, 370,
	333, 334, 404, 338, 348, 392, 440, 376, 397, 290,
	431, 405, 352, 519, 546, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 574, 573, 572, 571, 570, 569, 568, 567, 0,
	0, 516, 418, 302, 264, 298, 299, 306, 615, 612,
	422, 616, 0, 272, 496, 346, 0, 387, 320, 561,
	562, 0, 0, 220, 221, 222, 223, 224, 225, 226,
	227, 265, 228, 229, 230, 231, 232, 233, 234, 237,
	238, 239, 240, 241, 242, 243, 244, 564, 235, 236,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
	255, 256, 257, 258, 0, 0, 0, 266, 267, 268,
	269, 0, 0, 260, 261, 262, 263, 0, 0, 0,
	447, 448, 449, 471, 0, 433, 495, 613, 0, 0,
	0, 0, 0, 0, 0, 545, 557, 591, 0, 601,
	602, 604, 606, 605, 608, 410, 0, 619, 486, 487,
	620, 597, 375, 0, 501, 534, 523, 607, 489, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 315,
	0, 0, 345, 538, 520, 530, 521, 506, 507, 508,
	515, 325, 509, 510, 511, 481, 512, 482, 513, 514,
	0, 537, 488, 406, 359, 555, 554, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3446, 0, 0, 209, 0, 0, 0, 0,
	0, 0, 288, 210, 483, 603, 485, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 291, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 278,
	412, 429, 289, 402, 442, 294, 409, 284, 374, 398,
	0, 0, 280, 427, 408, 356, 335, 336, 279, 0,
	393, 313, 327, 310, 372, 0, 426, 454, 309, 445,
	0, 437, 282, 0, 436, 371, 423, 428, 357, 351,
	281, 425, 355, 350, 339, 317, 470, 340, 341, 331,
	383, 349, 384, 332, 361, 360, 362, 0, 0, 0,
	0, 0, 465, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 596, 0, 0, 600,
	0, 439, 0, 0, 0, 0, 0, 0, 411, 0,
	0, 342, 0, 0, 0, 455, 0, 396, 377, 622,
	0, 0, 394, 347, 424, 385, 430, 413, 438, 390,
	386, 273, 414, 312, 358, 285, 287, 307, 314, 316,
	318, 319, 367, 368, 380, 401, 415, 416, 417, 311,
	295, 395, 296, 329, 297, 274, 303, 301, 304, 403,
	305, 276, 381, 421, 0, 324, 391, 354, 277, 353,
	382, 420, 419, 286, 446, 452, 453, 542, 0, 458,
	623, 624, 625, 467, 472, 473, 474, 476, 477, 478,
	479, 543, 560, 527, 497, 460, 551, 494, 498, 499,
	563, 0, 0, 0, 451, 343, 344, 0, 322, 270,
	271, 618, 308, 373, 565, 598, 599, 490, 0, 552,
	491, 500, 300, 524, 536, 535, 369, 450, 0, 547,
	550, 480, 617, 0, 544, 559, 621, 558, 614, 379,
	0, 400, 556, 503, 0, 548, 522, 0, 549, 518,
	553, 0, 492, 0, 407, 432, 444, 461, 464, 493,
	578, 579, 580, 275, 463, 582, 583, 584, 585, 586,
	587, 588, 581, 435, 525, 502, 528, 443, 505, 504,
	0, 0, 539, 459, 540, 541, 363, 364, 365, 366,
	326, 566, 293, 462, 389, 0, 526, 0, 0, 0,
	0, 0, 0, 0, 0, 531, 532, 529, 626, 0,
	589, 590, 0, 0, 456, 457, 321, 328, 475, 330,
	292, 378, 323, 441, 337, 0, 468, 533, 469, 592,
	595, 593, 594, 370, 333, 334, 404, 338, 348, 392,
	440, 376, 397, 290, 431, 405, 352, 519, 546, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 574, 573, 572, 571, 570,
	569, 568, 567, 0, 0, 516, 418, 302, 264, 298,
	299, 306, 615, 612, 422, 616, 0, 272, 496, 346,
	0, 387, 320, 561, 562, 0, 0, 220, 221, 222,
	223, 224, 225, 226, 227, 265, 228, 229, 230, 231,
	232, 233, 234, 237, 238, 239, 240, 241, 242, 243,
	244, 564, 235, 236, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 256, 257, 258, 0, 0,
	0, 266, 267, 268, 269, 0, 0, 260, 261, 262,
	263, 0, 0, 0, 447, 448, 449, 471, 0, 433,
	495, 613, 0, 0, 0, 0, 0, 0, 0, 545,
	557, 591, 0, 601, 602, 604, 606, 605, 608, 410,
	0, 619, 486, 487, 620, 597, 375, 0, 501, 534,
	523, 607, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 315, 0, 0, 345, 538, 520, 530,
	521, 506, 507, 508, 515, 325, 509, 510, 511, 481,
	512, 482, 513, 514, 0, 537, 488, 406, 359, 555,
	554, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3612, 0, 209,
	0, 0, 0, 0, 0, 0, 288, 210, 483, 603,
	485, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 291, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 278, 412, 429, 289, 402, 442, 294,
	409, 284, 374, 398, 0, 0, 280, 427, 408, 356,
	335, 336, 279, 0, 393, 313, 327, 310, 372, 0,
	426, 454, 309, 445, 0, 437, 282, 0, 436, 371,
	423, 428, 357, 351, 281, 425, 355, 350, 339, 317,
	470, 340, 341, 331, 383, 349, 384, 332, 361, 360,
	362, 0, 0, 0, 0, 0, 465, 466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	596, 0, 0, 600, 0, 439, 0, 0, 0, 0,
	0, 0, 411, 0, 0, 342, 0, 0, 0, 455,
	0, 396, 377, 622, 0, 0, 394, 347, 424, 385,
	430, 413, 438, 390, 386, 273, 414, 312, 358, 285,
	287, 307, 314, 316, 318, 319, 367, 368, 380, 401,
	415, 416, 417, 311, 295, 395, 296, 329, 297, 274,
	303, 301, 304, 403, 305, 276, 381, 421, 0, 324,
	391, 354, 277, 353, 382, 420, 419, 286, 446, 452,
	453, 542, 0, 458, 623, 624, 625, 467, 472, 473,
	474, 476, 477, 478, 479, 543, 560, 527, 497, 460,
	551, 494, 498, 499, 563, 0, 0, 0, 451, 343,
	344, 0, 322, 270, 271, 618, 308, 373, 565, 598,
	599, 490, 0, 552, 491, 500, 300, 524, 536, 535,
	369, 450, 0, 547, 550, 480, 617, 0, 544, 559,
	621, 558, 614, 379, 0, 400, 556, 503, 0, 548,
	522, 0, 549, 518, 553, 0, 492, 0, 407, 432,
	444, 461, 464, 493, 578, 579, 580, 275, 463, 582,
	583, 584, 585, 586, 587, 588, 581, 435, 525, 502,
	528, 443, 505, 504, 0, 0, 539, 459, 540, 541,
	363, 364, 365, 366, 326, 566, 293, 462, 389, 0,
	526, 0, 0, 0, 0, 0, 0, 0, 0, 531,
	532, 529, 626, 0, 589, 590, 0, 0, 456, 457,
	321, 328, 475, 330, 292, 378, 323, 441, 337, 0,
	468, 533, 469, 592, 595, 593, 594, 370, 333, 334,
	404, 338, 348, 392, 440, 376, 397, 290, 431, 405,
	352, 519, 546, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 574,
	573, 572, 571, 570, 569, 568, 567, 0, 0, 516,
	418, 302, 264, 298, 299, 306, 615, 612, 422, 616,
	0, 272, 496, 346, 0, 387, 320, 561, 562, 0,
	0, 220, 221, 222, 223, 224, 225, 226, 227, 265,
	228, 229, 230, 231, 232, 233, 234, 237, 238, 239,
	240, 241, 242, 243, 244, 564, 235, 236, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 256,
	257, 258, 0, 0, 0, 266, 267, 268, 269, 0,
	0, 260, 261, 262, 263, 0, 0, 0, 447, 448,
	449, 471, 0, 433, 495, 613, 0, 0, 0, 0,
	0, 0, 0, 545, 557, 591, 0, 601, 602, 604,
	606, 605, 608, 410, 0, 619, 486, 487, 620, 597,
	375, 0, 501, 534, 523, 607, 489, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 315, 0, 0,
	345, 538, 520, 530, 521, 506, 507, 508, 515, 325,
	509, 510, 511, 481, 512, 482, 513, 514, 0, 537,
	488, 406, 359, 555, 554, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 0, 0,
	288, 210, 483, 603, 485, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 291, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 278, 412, 429,
	289, 402, 442, 294, 409, 284, 374, 398, 0, 0,
	280, 427, 408, 356, 335, 336, 279, 0, 393, 313,
	327, 310, 372, 0, 426, 454, 309, 445, 0, 437,
	282, 0, 436, 371, 423, 428, 357, 351, 281, 425,
	355, 350, 339, 317, 470, 340, 341, 331, 383, 349,
	384, 332, 361, 360, 362, 0, 0, 0, 0, 0,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 596, 0, 0, 600, 0, 439,
	0, 0, 0, 3533, 0, 0, 411, 0, 0, 342,
	0, 0, 0, 455, 0, 396, 377, 622, 0, 0,
	394, 347, 424, 385, 430, 413, 438, 390, 386, 273,
	414, 312, 358, 285, 287, 307, 314, 316, 318, 319,
	367, 368, 380, 401, 415, 416, 417, 311, 295, 395,
	296, 329, 297, 274, 303, 301, 304, 403, 305, 276,
	381, 421, 0, 324, 391, 354, 277, 353, 382, 420,
	419, 286, 446, 452, 453, 542, 0, 458, 623, 624,
	625, 467, 472, 473, 474, 476, 477, 478, 479, 543,
	560, 527, 497, 460, 551, 494, 498, 499, 563, 0,
	0, 0, 451, 343, 344, 0, 322, 270, 271, 618,
	308, 373, 565, 598, 599, 490, 0, 552, 491, 500,
	300, 524, 536, 535, 369, 450, 0, 547, 550, 480,
	617, 0, 544, 559, 621, 558, 614, 379, 0, 400,
	556, 503, 0, 548, 522, 0, 549, 518, 553, 0,
	492, 0, 407, 432, 444, 461, 464, 493, 578, 579,
	580, 275, 463, 582, 583, 584, 585, 586, 587, 588,
	581, 435, 525, 502, 528, 443, 505, 504, 0, 0,
	539, 459, 540, 541, 363, 364, 365, 366, 326, 566,
	293, 462, 389, 0, 526, 0, 0, 0, 0, 0,
	0, 0, 0, 531, 532, 529, 626, 0, 589, 590,
	0, 0, 456, 457, 321, 328, 475, 330, 292, 378,
	323, 441, 337, 0, 468, 533, 469, 592, 595, 593,
	594, 370, 333, 334, 404, 338, 348, 392, 440, 376,
	397, 290, 431, 405, 352, 519, 546, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 574, 573, 572, 571, 570, 569, 568,
	567, 0, 0, 516, 418, 302, 264, 298, 299, 306,
	615, 612, 422, 616, 0, 272, 496, 346, 0, 387,
	320, 561, 562, 0, 0, 220, 221, 222, 223, 224,
	225, 226, 227, 265, 228, 229, 230, 231, 232, 233,
	234, 237, 238, 239, 240, 241, 242, 243, 244, 564,
	235, 236, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 256, 257, 258, 0, 0, 0, 266,
	267, 268, 269, 0, 0, 260, 261, 262, 263, 0,
	0, 0, 447, 448, 449, 471, 0, 433, 495, 613,
	0, 0, 0, 0, 0, 0, 0, 545, 557, 591,
	0, 601, 602, 604, 606, 605, 608, 410, 0, 619,
	486, 487, 620, 597, 375, 0, 501, 534, 523, 607,
	489, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 315, 0, 0, 345, 538, 520, 530, 521, 506,
	507, 508, 515, 325, 509, 510, 511, 481, 512, 482,
	513, 514, 0, 537, 488, 406, 359, 555, 554, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 209, 0, 0,
	3062, 0, 0, 0, 288, 210, 483, 603, 485, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 291,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 278, 412, 429, 289, 402, 442, 294, 409, 284,
	374, 398, 0, 0, 280, 427, 408, 356, 335, 336,
	279, 0, 393, 313, 327, 310, 372, 0, 426, 454,
	309, 445, 0, 437, 282, 0, 436, 371, 423, 428,
	357, 351, 281, 425, 355, 350, 339, 317, 470, 340,
	341, 331, 383, 349, 384, 332, 361, 360, 362, 0,
	0, 0, 0, 0, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 596, 0,
	0, 600, 0, 439, 0, 0, 0, 0, 0, 0,
	411, 0, 0, 342, 0, 0, 0, 455, 0, 396,
	377, 622, 0, 0, 394, 347, 424, 385, 430, 413,
	438, 390, 386, 273, 414, 312, 358, 285, 287, 307,
	314, 316, 318, 319, 367, 368, 380, 401, 415, 416,
	417, 311, 295, 395, 296, 329, 297, 274, 303, 301,
	304, 403, 305, 276, 381, 421, 0, 324, 391, 354,
	277, 353, 382, 420, 419, 286, 446, 452, 453, 542,
	0, 458, 623, 624, 625, 467, 472, 473, 474, 476,
	477, 478, 479, 543, 560, 527, 497, 460, 551, 494,
	498, 499, 563, 0, 0, 0, 451, 343, 344, 0,
	322, 270, 271, 618, 308, 373, 565, 598, 599, 490,
	0, 552, 491, 500, 300, 524, 536, 535, 369, 450,
	0, 547, 550, 480, 617, 0, 544, 559, 621, 558,
	614, 379, 0, 400, 556, 503, 0, 548, 522, 0,
	549, 518, 553, 0, 492, 0, 407, 432, 444, 461,
	464, 493, 578, 579, 580, 275, 463, 582, 583, 584,
	585, 586, 587, 588, 581, 435, 525, 502, 528, 443,
	505, 504, 0, 0, 539, 459, 540, 541, 363, 364,
	365, 366, 326, 566, 293, 462, 389, 0, 526, 0,
	0, 0, 0, 0, 0, 0, 0, 531, 532, 529,
	626, 0, 589, 590, 0, 0, 456, 457, 321, 328,
	475, 330, 292, 378, 323, 441, 337, 0, 468, 533,
	469, 592, 595, 593, 594, 370, 333, 334, 404, 338,
	348, 392, 440, 376, 397, 290, 431, 405, 352, 519,
	546, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 574, 573, 572,
	571, 570, 569, 568, 567, 0, 0, 516, 418, 302,
	264, 298, 299, 306, 615, 612, 422, 616, 0, 272,
	496, 346, 0, 387, 320, 561, 562, 0, 0, 220,
	221, 222, 223, 224, 225, 226, 227, 265, 228, 229,
	230, 231, 232, 233, 234, 237, 238, 239, 240, 241,
	242, 243, 244, 564, 235, 236, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	0, 0, 0, 266, 267, 268, 269, 0, 0, 260,
	261, 262, 263, 0, 0, 0, 447, 448, 449, 471,
	0, 433, 495, 613, 0, 0, 0, 0, 0, 0,
	0, 545, 557, 591, 0, 601, 602, 604, 606, 605,
	608, 410, 0, 619, 486, 487, 620, 597, 375, 0,
	501, 534, 523, 607, 489, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 315, 0, 0, 345, 538,
	520, 530, 521, 506, 507, 508, 515, 325, 509, 510,
	511, 481, 512, 482, 513, 514, 0, 537, 488, 406,
	359, 555, 554, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 209, 0, 0, 0, 0, 0, 0, 288, 210,
	483, 603, 485, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 291, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3080,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 278, 412, 429, 289, 402,
	442, 294, 409, 284, 374, 398, 0, 0, 280, 427,
	408, 356, 335, 336, 279, 0, 393, 313, 327, 310,
	372, 0, 426, 454, 309, 445, 0, 437, 282, 0,
	436, 371, 423, 428, 357, 351, 281, 425, 355, 350,
	339, 317, 470, 340, 341, 331, 383, 349, 384, 332,
	361, 360, 362, 0, 0, 0, 0, 0, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 596, 0, 0, 600, 0, 439, 0, 0,
	0, 0, 0, 0, 411, 0, 0, 342, 0, 0,
	0, 455, 0, 396, 377, 622, 0, 0, 394, 347,
	424, 385, 430, 413, 438, 390, 386, 273, 414, 312,
	358, 285, 287, 307, 314, 316, 318, 319, 367, 368,
	380, 401, 415, 416, 417, 311, 295, 395, 296, 329,
	297, 274, 303, 301, 304, 403, 305, 276, 381, 421,
	0, 324, 391, 354, 277, 353, 382, 420, 419, 286,
	446, 452, 453, 542, 0, 458, 623, 624, 625, 467,
	472, 473, 474, 476, 477, 478, 479, 543, 560, 527,
	497, 460, 551, 494, 498, 499, 563, 0, 0, 0,
	451, 343, 344, 0, 322, 270, 271, 618, 308, 373,
	565, 598, 599, 490, 0, 552, 491, 500, 300, 524,
	536, 535, 369, 450, 0, 547, 550, 480, 617, 0,
	544, 559, 621, 558, 614, 379, 0, 400, 556, 503,
	0, 548, 522, 0, 549, 518, 553, 0, 492, 0,
	407, 432, 444, 461, 464, 493, 578, 579, 580, 275,
	463, 582, 583, 584, 585, 586, 587, 588, 581, 435,
	525, 502, 528, 443, 505, 504, 0, 0, 539, 459,
	540, 541, 363, 364, 365, 366, 326, 566, 293, 462,
	389, 0, 526, 0, 0, 0, 0, 0, 0, 0,
	0, 531, 532, 529, 626, 0, 589, 590, 0, 0,
	456, 457, 321, 328, 475, 330, 292, 378, 323, 441,
	337, 0, 468, 533, 469, 592, 595, 593, 594, 370,
	333, 334, 404, 338, 348, 392, 440, 376, 397, 290,
	431, 405, 352, 519, 546, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 574, 573, 572, 571, 570, 569, 568, 567, 0,
	0, 516, 418, 302, 264, 298, 299, 306, 615, 612,
	422, 616, 0, 272, 496, 346, 0, 387, 320, 561,
	562, 0, 0, 220, 221, 222, 223, 224, 225, 226,
	227, 265, 228, 229, 230, 231, 232, 233, 234, 237,
	238, 239, 240, 241, 242, 243, 244, 564, 235, 236,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
	255, 256, 257, 258, 0, 0, 0, 266, 267, 268,
	269, 0, 0, 260, 261, 262, 263, 0, 0, 0,
	447, 448, 449, 471, 0, 433, 495, 613, 0, 0,
	0, 0, 0, 0, 0, 545, 557, 591, 0, 601,
	602, 604, 606, 605, 608, 410, 0, 619, 486, 487,
	620, 597, 375, 0, 501, 534, 523, 607, 489, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 315,
	0, 0, 345, 538, 520, 530, 521, 506, 507, 508,
	515, 325, 509, 510, 511, 481, 512, 482, 513, 514,
	0, 537, 488, 406, 359, 555, 554, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1956, 0, 0, 209, 0, 0, 0, 0,
	0, 0, 288, 210, 483, 603, 485, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 291, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 278,
	412, 429, 289, 402, 442, 294, 409, 284, 374, 398,
	0, 0, 280, 427, 408, 356, 335, 336, 279, 0,
	393, 313, 327, 310, 372, 0, 426, 454, 309, 445,
	0, 437, 282, 0, 436, 371, 423, 428, 357, 351,
	281, 425, 355, 350, 339, 317, 470, 340, 341, 331,
	383, 349, 384, 332, 361, 360, 362, 0, 0, 0,
	0, 0, 465, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 596, 0, 0, 600,
	0, 439, 0, 0, 0, 0, 0, 0, 411, 0,
	0, 342, 0, 0, 0, 455, 0, 396, 377, 622,
	0, 0, 394, 347, 424, 385, 430, 413, 438, 390,
	386, 273, 414, 312, 358, 285, 287, 307, 314, 316,
	318, 319, 367, 368, 380, 401, 415, 416, 417, 311,
	295, 395, 296, 329, 297, 274, 303, 301, 304, 403,
	305, 276, 381, 421, 0, 324, 391, 354, 277, 353,
	382, 420, 419, 286, 446, 452, 453, 542, 0, 458,
	623, 624, 625, 467, 472, 473, 474, 476, 477, 478,
	479, 543, 560, 527, 497, 460, 551, 494, 498, 499,
	563, 0, 0, 0, 451, 343, 344, 0, 322, 270,
	271, 618, 308, 373, 565, 598, 599, 490, 0, 552,
	491, 500, 300, 524, 536, 535, 369, 450, 0, 547,
	550, 480, 617, 0, 544, 559, 621, 558, 614, 379,
	0, 400, 556, 503, 0, 548, 522, 0, 549, 518,
	553, 0, 492, 0, 407, 432, 444, 461, 464, 493,
	578, 579, 580, 275, 463, 582, 583, 584, 585, 586,
	587, 588, 581, 435, 525, 502, 528, 443, 505, 504,
	0, 0, 539, 459, 540, 541, 363, 364, 365, 366,
	326, 566, 293, 462, 389, 0, 526, 0, 0, 0,
	0, 0, 0, 0, 0, 531, 532, 529, 626, 0,
	589, 590, 0, 0, 456, 457, 321, 328, 475, 330,
	292, 378, 323, 441, 337, 0, 468, 533, 469, 592,
	595, 593, 594, 370, 333, 334, 404, 338, 348, 392,
	440, 376, 397, 290, 431, 405, 352, 519, 546, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 574, 573, 572, 571, 570,
	569, 568, 567, 0, 0, 516, 418, 302, 264, 298,
	299, 306, 615, 612, 422, 616, 0, 272, 496, 346,
	0, 387, 320, 561, 562, 0, 0, 220, 221, 222,
	223, 224, 225, 226, 227, 265, 228, 229, 230, 231,
	232, 233, 234, 237, 238, 239, 240, 241, 242, 243,
	244, 564, 235, 236, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 256, 257, 258, 0, 0,
	0, 266, 267, 268, 269, 0, 0, 260, 261, 262,
	263, 0, 0, 0, 447, 448, 449, 471, 0, 433,
	495, 613, 0, 0, 0, 0, 0, 0, 0, 545,
	557, 591, 0, 601, 602, 604, 606, 605, 608, 410,
	0, 619, 486, 487, 620, 597, 375, 0, 501, 534,
	523, 607, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 315, 0, 0, 345, 538, 520, 530,
	521, 506, 507, 508, 515, 325, 509, 510, 511, 481,
	512, 482, 513, 514, 0, 537, 488, 406, 359, 555,
	554, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 209,
	0, 0, 0, 0, 0, 0, 288, 210, 483, 603,
	485, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 291, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3182, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 278, 412, 429, 289, 402, 442, 294,
	409, 284, 374, 398, 0, 0, 280, 427, 408, 356,
	335, 336, 279, 0, 393, 313, 327, 310, 372, 0,
	426, 454, 309, 445, 0, 437, 282, 0, 436, 371,
	423, 428, 357, 351, 281, 425, 355, 350, 339, 317,
	470, 340, 341, 331, 383, 349, 384, 332, 361, 360,
	362, 0, 0, 0, 0, 0, 465, 466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	596, 0, 0, 600, 0, 439, 0, 0, 0, 0,
	0, 0, 411, 0, 0, 342, 0, 0, 0, 455,
	0, 396, 377, 622, 0, 0, 394, 347, 424, 385,
	430, 413, 438, 390, 386, 273, 414, 312, 358, 285,
	287, 307, 314, 316, 318, 319, 367, 368, 380, 401,
	415, 416, 417, 311, 295, 395, 296, 329, 297, 274,
	303, 301, 304, 403, 305, 276, 381, 421, 0, 324,
	391, 354, 277, 353, 382, 420, 419, 286, 446, 452,
	453, 542, 0, 458, 623, 624, 625, 467, 472, 473,
	474, 476, 477, 478, 479, 543, 560, 527, 497, 460,
	551, 494, 498, 499, 563, 0, 0, 0, 451, 343,
	344, 0, 322, 270, 271, 618, 308, 373, 565, 598,
	599, 490, 0, 552, 491, 500, 300, 524, 536, 535,
	369, 450, 0, 547, 550, 480, 617, 0, 544, 559,
	621, 558, 614, 379, 0, 400, 556, 503, 0, 548,
	522, 0, 549, 518, 553, 0, 492, 0, 407, 432,
	444, 461, 464, 493, 578, 579, 580, 275, 463, 582,
	583, 584, 585, 586, 587, 588, 581, 435, 525, 502,
	528, 443, 505, 504, 0, 0, 539, 459, 540, 541,
	363, 364, 365, 366, 326, 566, 293, 462, 389, 0,
	526, 0, 0, 0, 0, 0, 0, 0, 0, 531,
	532, 529, 626, 0, 589, 590, 0, 0, 456, 457,
	321, 328, 475, 330, 292, 378, 323, 441, 337, 0,
	468, 533, 469, 592, 595, 593, 594, 370, 333, 334,
	404, 338, 348, 392, 440, 376, 397, 290, 431, 405,
	352, 519, 546, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 574,
	573, 572, 571, 570, 569, 568, 567, 0, 0, 516,
	418, 302, 264, 298, 299, 306, 615, 612, 422, 616,
	0, 272, 496, 346, 0, 387, 320, 561, 562, 0,
	0, 220, 221, 222, 223, 224, 225, 226, 227, 265,
	228, 229, 230, 231, 232, 233, 234, 237, 238, 239,
	240, 241, 242, 243, 244, 564, 235, 236, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 256,
	257, 258, 0, 0, 0, 266, 267, 268, 269, 0,
	0, 260, 261, 262, 263, 0, 0, 0, 447, 448,
	449, 471, 0, 433, 495, 613, 0, 0, 0, 0,
	0, 0, 0, 545, 557, 591, 0, 601, 602, 604,
	606, 605, 608, 410, 0, 619, 486, 487, 620, 597,
	375, 0, 501, 534, 523, 607, 489, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 315, 0, 0,
	345, 538, 520, 530, 521, 506, 507, 508, 515, 325,
	509, 510, 511, 481, 512, 482, 513, 514, 0, 537,
	488, 406, 359, 555, 554, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 0, 0,
	288, 210, 483, 603, 485, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 291, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2927, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 278, 412, 429,
	289, 402, 442, 294, 409, 284, 374, 398, 0, 0,
	280, 427, 408, 356, 335, 336, 279, 0, 393, 313,
	327, 310, 372, 0, 426, 454, 309, 445, 0, 437,
	282, 0, 436, 371, 423, 428, 357, 351, 281, 425,
	355, 350, 339, 317, 470, 340, 341, 331, 383, 349,
	384, 332, 361, 360, 362, 0, 0, 0, 0, 0,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 596, 0, 0, 600, 0, 439,
	0, 0, 0, 0, 0, 0, 411, 0, 0, 342,
	0, 0, 0, 455, 0, 396, 377, 622, 0, 0,
	394, 347, 424, 385, 430, 413, 438, 390, 386, 273,
	414, 312, 358, 285, 287, 307, 314, 316, 318, 319,
	367, 368, 380, 401, 415, 416, 417, 311, 295, 395,
	296, 329, 297, 274, 303, 301, 304, 403, 305, 276,
	381, 421, 0, 324, 391, 354, 277, 353, 382, 420,
	419, 286, 446, 452, 453, 542, 0, 458, 623, 624,
	625, 467, 472, 473, 474, 476, 477, 478, 479, 543,
	560, 527, 497, 460, 551, 494, 498, 499, 563, 0,
	0, 0, 451, 343, 344, 0, 322, 270, 271, 618,
	308, 373, 565, 598, 599, 490, 0, 552, 491, 500,
	300, 524, 536, 535, 369, 450, 0, 547, 550, 480,
	617, 0, 544, 559, 621, 558, 614, 379, 0, 400,
	556, 503, 0, 548, 522, 0, 549, 518, 553, 0,
	492, 0, 407, 432, 444, 461, 464, 493, 578, 579,
	580, 275, 463, 582, 583, 584, 585, 586, 587, 588,
	581, 435, 525, 502, 528, 443, 505, 504, 0, 0,
	539, 459, 540, 541, 363, 364, 365, 366, 326, 566,
	293, 462, 389, 0, 526, 0, 0, 0, 0, 0,
	0, 0, 0, 531, 532, 529, 626, 0, 589, 590,
	0, 0, 456, 457, 321, 328, 475, 330, 292, 378,
	323, 441, 337, 0, 468, 533, 469, 592, 595, 593,
	594, 370, 333, 334, 404, 338, 348, 392, 440, 376,
	397, 290, 431, 405, 352, 519, 546, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 574, 573, 572, 571, 570, 569, 568,
	567, 0, 0, 516, 418, 302, 264, 298, 299, 306,
	615, 612, 422, 616, 0, 272, 496, 346, 0, 387,
	320, 561, 562, 0, 0, 220, 221, 222, 223, 224,
	225, 226, 227, 265, 228, 229, 230, 231, 232, 233,
	234, 237, 238, 239, 240, 241, 242, 243, 244, 564,
	235, 236, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 256, 257, 258, 0, 0, 0, 266,
	267, 268, 269, 0, 0, 260, 261, 262, 263, 0,
	0, 0, 447, 448, 449, 471, 0, 433, 495, 613,
	0, 0, 0, 0, 0, 0, 0, 545, 557, 591,
	0, 601, 602, 604, 606, 605, 608, 410, 0, 619,
	486, 487, 620, 597, 375, 0, 501, 534, 523, 607,
	489, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 315, 0, 0, 345, 538, 520, 530, 521, 506,
	507, 508, 515, 325, 509, 510, 511, 481, 512, 482,
	513, 514, 0, 537, 488, 406, 359, 555, 554, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 209, 0, 0,
	1467, 0, 0, 0, 288, 210, 483, 603, 485, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 291,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 278, 412, 429, 289, 402, 442, 294, 409, 284,
	374, 398, 0, 0, 280, 427, 408, 356, 335, 336,
	279, 0, 393, 313, 327, 310, 372, 0, 426, 454,
	309, 445, 0, 437, 282, 0, 436, 371, 423, 428,
	357, 351, 281, 425, 355, 350, 339, 317, 470, 340,
	341, 331, 383, 349, 384, 332, 361, 360, 362, 0,
	0, 0, 0, 0, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 596, 0,
	0, 600, 0, 439, 0, 0, 0, 0, 0, 0,
	411, 0, 0, 342, 0, 0, 0, 455, 0, 396,
	377, 622, 0, 0, 394, 347, 424, 385, 430, 413,
	438, 390, 386, 273, 414, 312, 358, 285, 287, 307,
	314, 316, 318, 319, 367, 368, 380, 401, 415, 416,
	417, 311, 295, 395, 296, 329, 297, 274, 303, 301,
	304, 403, 305, 276, 381, 421, 0, 324, 391, 354,
	277, 353, 382, 420, 419, 286, 446, 452, 453, 542,
	0, 458, 623, 624, 625, 467, 472, 473, 474, 476,
	477, 478, 479, 543, 560, 527, 497, 460, 551, 494,
	498, 499, 563, 0, 0, 0, 451, 343, 344, 0,
	322, 270, 271, 618, 308, 373, 565, 598, 599, 490,
	0, 552, 491, 500, 300, 524, 536, 535, 369, 450,
	0, 547, 550, 480, 617, 0, 544, 559, 621, 558,
	614, 379, 0, 400, 556, 503, 0, 548, 522, 0,
	549, 518, 553, 0, 492, 0, 407, 432, 444, 461,
	464, 493, 578, 579, 580, 275, 463, 582, 583, 584,
	585, 586, 587, 588, 581, 435, 525, 502, 528, 443,
	505, 504, 0, 0, 539, 459, 540, 541, 363, 364,
	365, 366, 326, 566, 293, 462, 389, 0, 526, 0,
	0, 0, 0, 0, 0, 0, 0, 531, 532, 529,
	626, 0, 589, 590, 0, 0, 456, 457, 321, 328,
	475, 330, 292, 378, 323, 441, 337, 0, 468, 533,
	469, 592, 595, 593, 594, 370, 333, 334, 404, 338,
	348, 392, 440, 376, 397, 290, 431, 405, 352, 519,
	546, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 574, 573, 572,
	571, 570, 569, 568, 567, 0, 0, 516, 418, 302,
	264, 298, 299, 306, 615, 612, 422, 616, 0, 272,
	496, 346, 0, 387, 320, 561, 562, 0, 0, 220,
	221, 222, 223, 224, 225, 226, 227, 265, 228, 229,
	230, 231, 232, 233, 234, 237, 238, 239, 240, 241,
	242, 243, 244, 564, 235, 236, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	0, 0, 0, 266, 267, 268, 269, 0, 0, 260,
	261, 262, 263, 0, 0, 0, 447, 448, 449, 471,
	0, 433, 495, 613, 0, 0, 0, 0, 0, 0,
	0, 545, 557, 591, 0, 601, 602, 604, 606, 605,
	608, 410, 0, 619, 486, 487, 620, 597, 375, 0,
	501, 534, 523, 607, 489, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 315, 0, 0, 345, 538,
	520, 530, 521, 506, 507, 508, 515, 325, 509, 510,
	511, 481, 512, 482, 513, 514, 0, 537, 488, 406,
	359, 555, 554, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 209, 0, 0, 2397, 0, 0, 0, 288, 210,
	483, 603, 485, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 291, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 278, 412, 429, 289, 402,
	442, 294, 409, 284, 374, 398, 0, 0, 280, 427,
	408, 356, 335, 336, 279, 0, 393, 313, 327, 310,
	372, 0, 426, 454, 309, 445, 0, 437, 282, 0,
	436, 371, 423, 428, 357, 351, 281, 425, 355, 350,
	339, 317, 470, 340, 341, 331, 383, 349, 384, 332,
	361, 360, 362, 0, 0, 0, 0, 0, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 596, 0, 0, 600, 0, 439, 0, 0,
	0, 0, 0, 0, 411, 0, 0, 342, 0, 0,
	0, 455, 0, 396, 377, 622, 0, 0, 394, 347,
	424, 385, 430, 413, 438, 390, 386, 273, 414, 312,
	358, 285, 287, 307, 314, 316, 318, 319, 367, 368,
	380, 401, 415, 416, 417, 311, 295, 395, 296, 329,
	297, 274, 303, 301, 304, 403, 305, 276, 381, 421,
	0, 324, 391, 354, 277, 353, 382, 420, 419, 286,
	446, 452, 453, 542, 0, 458, 623, 624, 625, 467,
	472, 473, 474, 476, 477, 478, 479, 543, 560, 527,
	497, 460, 551, 494, 498, 499, 563, 0, 0, 0,
	451, 343, 344, 0, 322, 270, 271, 618, 308, 373,
	565, 598, 599, 490, 0, 552, 491, 500, 300, 524,
	536, 535, 369, 450, 0, 547, 550, 480, 617, 0,
	544, 559, 621, 558, 614, 379, 0, 400, 556, 503,
	0, 548, 522, 0, 549, 518, 553, 0, 492, 0,
	407, 432, 444, 461, 464, 493, 578, 579, 580, 275,
	463, 582, 583, 584, 585, 586, 587, 588, 581, 435,
	525, 502, 528, 443, 505, 504, 0, 0, 539, 459,
	540, 541, 363, 364, 365, 366, 326, 566, 293, 462,
	389, 0, 526, 0, 0, 0, 0, 0, 0, 0,
	0, 531, 532, 529, 626, 0, 589, 590, 0, 0,
	456, 457, 321, 328, 475, 330, 292, 378, 323, 441,
	337, 0, 468, 533, 469, 592, 595, 593, 594, 370,
	333, 334, 404, 338, 348, 392, 440, 376, 397, 290,
	431, 405, 352, 519, 546, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 574, 573, 572, 571, 570, 569, 568, 567, 0,
	0, 516, 418, 302, 264, 298, 299, 306, 615, 612,
	422, 616, 0, 272, 496, 346, 0, 387, 320, 561,
	562, 0, 0, 220, 221, 222, 223, 224, 225, 226,
	227, 265, 228, 229, 230, 231, 232, 233, 234, 237,
	238, 239, 240, 241, 242, 243, 244, 564, 235, 236,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
	255, 256, 257, 258, 0, 0, 0, 266, 267, 268,
	269, 0, 0, 260, 261, 262, 263, 0, 0, 0,
	447, 448, 449, 471, 0, 433, 495, 613, 0, 0,
	0, 0, 0, 0, 0, 545, 557, 591, 0, 601,
	602, 604, 606, 605, 608, 410, 0, 619, 486, 487,
	620, 597, 375, 0, 501, 534, 523, 607, 489, 0,
	0, 2749, 0, 0, 0, 0, 0, 0, 0, 315,
	0, 0, 345, 538, 520, 530, 521, 506, 507, 508,
	515, 325, 509, 510, 511, 481, 512, 482, 513, 514,
	0, 537, 488, 406, 359, 555, 554, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 209, 0, 0, 0, 0,
	0, 0, 288, 210, 483, 603, 485, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 291, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 278,
	412, 429, 289, 402, 442, 294, 409, 284, 374, 398,
	0, 0, 280, 427, 408, 356, 335, 336, 279, 0,
	393, 313, 327, 310, 372, 0, 426, 454, 309, 445,
	0, 437, 282, 0, 436, 371, 423, 428, 357, 351,
	281, 425, 355, 350, 339, 317, 470, 340, 341, 331,
	383, 349, 384, 332, 361, 360, 362, 0, 0, 0,
	0, 0, 465, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 596, 0, 0, 600,
	0, 439, 0, 0, 0, 0, 0, 0, 411, 0,
	0, 342, 0, 0, 0, 455, 0, 396, 377, 622,
	0, 0, 394, 347, 424, 385, 430, 413, 438, 390,
	386, 273, 414, 312, 358, 285, 287, 307, 314, 316,
	318, 319, 367, 368, 380, 401, 415, 416, 417, 311,
	295, 395, 296, 329, 297, 274, 303, 301, 304, 403,
	305, 276, 381, 421, 0, 324, 391, 354, 277, 353,
	382, 420, 419, 286, 446, 452, 453, 542, 0, 458,
	623, 624, 625, 467, 472, 473, 474, 476, 477, 478,
	479, 543, 560, 527, 497, 460, 551, 494, 498, 499,
	563, 0, 0, 0, 451, 343, 344, 0, 322, 270,
	271, 618, 308, 373, 565, 598, 599, 490, 0, 552,
	491, 500, 300, 524, 536, 535, 369, 450, 0, 547,
	550, 480, 617, 0, 544, 559, 621, 558, 614, 379,
	0, 400, 556, 503, 0, 548, 522, 0, 549, 518,
	553, 0, 492, 0, 407, 432, 444, 461, 464, 493,
	578, 579, 580, 275, 463, 582, 583, 584, 585, 586,
	587, 588, 581, 435, 525, 502, 528, 443, 505, 504,
	0, 0, 539, 459, 540, 541, 363, 364, 365, 366,
	326, 566, 293, 462, 389, 0, 526, 0, 0, 0,
	0, 0, 0, 0, 0, 531, 532, 529, 626, 0,
	589, 590, 0, 0, 456, 457, 321, 328, 475, 330,
	292, 378, 323, 441, 337, 0, 468, 533, 469, 592,
	595, 593, 594, 370, 333, 334, 404, 338, 348, 392,
	440, 376, 397, 290, 431, 405, 352, 519, 546, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 574, 573, 572, 571, 570,
	569, 568, 567, 0, 0, 516, 418, 302, 264, 298,
	299, 306, 615, 612, 422, 616, 0, 272, 496, 346,
	0, 387, 320, 561, 562, 0, 0, 220, 221, 222,
	223, 224, 225, 226, 227, 265, 228, 229, 230, 231,
	232, 233, 234, 237, 238, 239, 240, 241, 242, 243,
	244, 564, 235, 236, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 256, 257, 258, 0, 0,
	0, 266, 267, 268, 269, 0, 0, 260, 261, 262,
	263, 0, 0, 0, 447, 448, 449, 471, 0, 433,
	495, 613, 0, 0, 0, 0, 0, 0, 0, 545,
	557, 591, 0, 601, 602, 604, 606, 605, 608, 410,
	0, 619, 486, 487, 620, 597, 375, 0, 501, 534,
	523, 607, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 315, 0, 0, 345, 538, 520, 530,
	521, 506, 507, 508, 515, 325, 509, 510, 511, 481,
	512, 482, 513, 514, 0, 537, 488, 406, 359, 555,
	554, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 209,
	0, 0, 0, 0, 0, 0, 288, 210, 483, 603,
	485, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 291, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2095, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 278, 412, 429, 289, 402, 442, 294,
	409, 284, 374, 398, 0, 0, 280, 427, 408, 356,
	335, 336, 279, 0, 393, 313, 327, 310, 372, 0,
	426, 454, 309, 445, 0, 437, 282, 0, 436, 371,
	423, 428, 357, 351, 281, 425, 355, 350, 339, 317,
	470, 340, 341, 331, 383, 349, 384, 332, 361, 360,
	362, 0, 0, 0, 0, 0, 465, 466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	596, 0, 0, 600, 0, 439, 0, 0, 0, 0,
	0, 0, 411, 0, 0, 342, 0, 0, 0, 455,
	0, 396, 377, 622, 0, 0, 394, 347, 424, 385,
	430, 413, 438, 390, 386, 273, 414, 312, 358, 285,
	287, 307, 314, 316, 318, 319, 367, 368, 380, 401,
	415, 416, 417, 311, 295, 395, 296, 329, 297, 274,
	303, 301, 304, 403, 305, 276, 381, 421, 0, 324,
	391, 354, 277, 353, 382, 420, 419, 286, 446, 452,
	453, 542, 0, 458, 623, 624, 625, 467, 472, 473,
	474, 476, 477, 478, 479, 543, 560, 527, 497, 460,
	551, 494, 498, 499, 563, 0, 0, 0, 451, 343,
	344, 0, 322, 270, 271, 618, 308, 373, 565, 598,
	599, 490, 0, 552, 491, 500, 300, 524, 536, 535,
	369, 450, 0, 547, 550, 480, 617, 0, 544, 559,
	621, 558, 614, 379, 0, 400, 556, 503, 0, 548,
	522, 0, 549, 518, 553, 0, 492, 0, 407, 432,
	444, 461, 464, 493, 578, 579, 580, 275, 463, 582,
	583, 584, 585, 586, 587, 588, 581, 435, 525, 502,
	528, 443, 505, 504, 0, 0, 539, 459, 540, 541,
	363, 364, 365, 366, 326, 566, 293, 462, 389, 0,
	526, 0, 0, 0, 0, 0, 0, 0, 0, 531,
	532, 529, 626, 0, 589, 590, 0, 0, 456, 457,
	321, 328, 475, 330, 292, 378, 323, 441, 337, 0,
	468, 533, 469, 592, 595, 593, 594, 370, 333, 334,
	404, 338, 348, 392, 440, 376, 397, 290, 431, 405,
	352, 519, 546, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 574,
	573, 572, 571, 570, 569, 568, 567, 0, 0, 516,
	418, 302, 264, 298, 299, 306, 615, 612, 422, 616,
	0, 272, 496, 346, 0, 387, 320, 561, 562, 0,
	0, 220, 221, 222, 223, 224, 225, 226, 227, 265,
	228, 229, 230, 231, 232, 233, 234, 237, 238, 239,
	240, 241, 242, 243, 244, 564, 235, 236, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 256,
	257, 258, 0, 0, 0, 266, 267, 268, 269, 0,
	0, 260, 261, 262, 263, 0, 0, 0, 447, 448,
	449, 471, 0, 433, 495, 613, 0, 0, 0, 0,
	0, 0, 0, 545, 557, 591, 0, 601, 602, 604,
	606, 605, 608, 410, 0, 619, 486, 487, 620, 597,
	375, 0, 501, 534, 523, 607, 489, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 315, 0, 0,
	345, 538, 520, 530, 521, 506, 507, 508, 515, 325,
	509, 510, 511, 481, 512, 482, 513, 514, 0, 537,
	488, 406, 359, 555, 554, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 0, 0, 2513, 0, 0, 0,
	288, 210, 483, 603, 485, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 291, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 278, 412, 429,
	289, 402, 442, 294, 409, 284, 374, 398, 0, 0,
	280, 427, 408, 356, 335, 336, 279, 0, 393, 313,
	327, 310, 372, 0, 426, 454, 309, 445, 0, 437,
	282, 0, 436, 371, 423, 428, 357, 351, 281, 425,
	355, 350, 339, 317, 470, 340, 341, 331, 383, 349,
	384, 332, 361, 360, 362, 0, 0, 0, 0, 0,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 596, 0, 0, 600, 0, 439,
	0, 0, 0, 0, 0, 0, 411, 0, 0, 342,
	0, 0, 0, 455, 0, 396, 377, 622, 0, 0,
	394, 347, 424, 385, 430, 413, 438, 390, 386, 273,
	414, 312, 358, 285, 287, 307, 314, 316, 318, 319,
	367, 368, 380, 401, 415, 416, 417, 311, 295, 395,
	296, 329, 297, 274, 303, 301, 304, 403, 305, 276,
	381, 421, 0, 324, 391, 354, 277, 353, 382, 420,
	419, 286, 446, 452, 453, 542, 0, 458, 623, 624,
	625, 467, 472, 473, 474, 476, 477, 478, 479, 543,
	560, 527, 497, 460, 551, 494, 498, 499, 563, 0,
	0, 0, 451, 343, 344, 0, 322, 270, 271, 618,
	308, 373, 565, 598, 599, 490, 0, 552, 491, 500,
	300, 524, 536, 535, 369, 450, 0, 547, 550, 480,
	617, 0, 544, 559, 621, 558, 614, 379, 0, 400,
	556, 503, 0, 548, 522, 0, 549, 518, 553, 0,
	492, 0, 407, 432, 444, 461, 464, 493, 578, 579,
	580, 275, 463, 582, 583, 584, 585, 586, 587, 588,
	581, 435, 525, 502, 528, 443, 505, 504, 0, 0,
	539, 459, 540, 541, 363, 364, 365, 366, 326, 566,
	293, 462, 389, 0, 526, 0, 0, 0, 0, 0,
	0, 0, 0, 531, 532, 529, 626, 0, 589, 590,
	0, 0, 456, 457, 321, 328, 475, 330, 292, 378,
	323, 441, 337, 0, 468, 533, 469, 592, 595, 593,
	594, 370, 333, 334, 404, 338, 348, 392, 440, 376,
	397, 290, 431, 405, 352, 519, 546, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 574, 573, 572, 571, 570, 569, 568,
	567, 0, 0, 516, 418, 302, 264, 298, 299, 306,
	615, 612, 422, 616, 0, 272, 496, 346, 0, 387,
	320, 561, 562, 0, 0, 220, 221, 222, 223, 224,
	225, 226, 227, 265, 228, 229, 230, 231, 232, 233,
	234, 237, 238, 239, 240, 241, 242, 243, 244, 564,
	235, 236, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 256, 257, 258, 0, 0, 0, 266,
	267, 268, 269, 0, 0, 260, 261, 262, 263, 0,
	0, 0, 447, 448, 449, 471, 0, 433, 495, 613,
	0, 0, 0, 0, 0, 0, 0, 545, 557, 591,
	0, 601, 602, 604, 606, 605, 608, 410, 0, 619,
	486, 487, 620, 597, 375, 0, 501, 534, 523, 607,
	489, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 315, 0, 0, 345, 538, 520, 530, 521, 506,
	507, 508, 515, 325, 509, 510, 511, 481, 512, 482,
	513, 514, 0, 537, 488, 406, 359, 555, 554, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 209, 0, 0,
	0, 0, 0, 0, 288, 210, 483, 603, 485, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 291,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 278, 412, 429, 289, 402, 442, 294, 409, 284,
	374, 398, 0, 0, 280, 427, 408, 356, 335, 336,
	279, 0, 393, 313, 327, 310, 372, 0, 426, 454,
	309, 445, 0, 437, 282, 0, 436, 371, 423, 428,
	357, 351, 281, 425, 355, 350, 339, 317, 470, 340,
	341, 331, 383, 349, 384, 332, 361, 360, 362, 0,
	0, 0, 0, 0, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 596, 0,
	0, 600, 0, 439, 0, 0, 0, 0, 0, 0,
	411, 0, 0, 342, 0, 0, 0, 455, 0, 396,
	377, 622, 0, 0, 394, 347, 424, 385, 430, 413,
	438, 390, 386, 273, 414, 312, 358, 285, 287, 307,
	314, 316, 318, 319, 367, 368, 380, 401, 415, 416,
	417, 311, 295, 395, 296, 329, 297, 274, 303, 301,
	304, 403, 305, 276, 381, 421, 0, 324, 391, 354,
	277, 353, 382, 420, 419, 286, 446, 452, 453, 542,
	0, 458, 623, 624, 625, 467, 472, 473, 474, 476,
	477, 478, 479, 543, 560, 527, 497, 460, 551, 494,
	498, 499, 563, 0, 0, 0, 451, 343, 344, 0,
	322, 270, 271, 618, 308, 373, 565, 598, 599, 490,
	0, 552, 491, 500, 300, 524, 536, 535, 369, 450,
	0, 547, 550, 480, 617, 0, 544, 559, 621, 558,
	614, 379, 0, 400, 556, 503, 0, 548, 522, 0,
	549, 518, 553, 0, 492, 0, 407, 432, 444, 461,
	464, 493, 578, 579, 580, 275, 463, 582, 583, 584,
	585, 586, 587, 588, 581, 435, 525, 502, 528, 443,
	505, 504, 0, 0, 539, 459, 540, 541, 363, 364,
	365, 366, 326, 566, 293, 462, 389, 0, 526, 0,
	0, 0, 0, 0, 0, 0, 0, 531, 532, 529,
	626, 0, 589, 590, 0, 0, 456, 457, 321, 328,
	475, 330, 292, 378, 323, 441, 337, 0, 468, 533,
	469, 592, 595, 593, 594, 370, 333, 334, 404, 338,
	348, 392, 440, 376, 397, 290, 431, 405, 352, 519,
	546, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 574, 573, 572,
	571, 570, 569, 568, 567, 0, 0, 516, 418, 302,
	264, 298, 299, 306, 615, 612, 422, 616, 0, 272,
	496, 346, 0, 387, 320, 561, 562, 0, 0, 220,
	221, 222, 223, 224, 225, 226, 227, 265, 228, 229,
	230, 231, 232, 233, 234, 237, 238, 239, 240, 241,
	242, 243, 244, 564, 235, 236, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	0, 0, 0, 266, 267, 268, 269, 0, 0, 260,
	261, 262, 263, 0, 0, 0, 447, 448, 449, 471,
	0, 433, 495, 613, 0, 0, 0, 0, 0, 0,
	0, 545, 557, 591, 0, 601, 602, 604, 606, 605,
	608, 410, 0, 619, 486, 487, 620, 597, 375, 0,
	501, 534, 523, 607, 489, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 315, 0, 0, 345, 538,
	520, 530, 521, 506, 507, 508, 515, 325, 509, 510,
	511, 481, 512, 482, 513, 514, 0, 537, 488, 406,
	359, 555, 554, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 209, 0, 0, 2472, 0, 0, 0, 288, 210,
	483, 603, 485, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 291, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 278, 412, 429, 289, 402,
	442, 294, 409, 284, 374, 398, 0, 0, 280, 427,
	408, 356, 335, 336, 279, 0, 393, 313, 327, 310,
	372, 0, 426, 454, 309, 445, 0, 437, 282, 0,
	436, 371, 423, 428, 357, 351, 281, 425, 355, 350,
	339, 317, 470, 340, 341, 331, 383, 349, 384, 332,
	361, 360, 362, 0, 0, 0, 0, 0, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 596, 0, 0, 600, 0, 439, 0, 0,
	0, 0, 0, 0, 411, 0, 0, 342, 0, 0,
	0, 455, 0, 396, 377, 622, 0, 0, 394, 347,
	424, 385, 430, 413, 438, 390, 386, 273, 414, 312,
	358, 285, 287, 307, 314, 316, 318, 319, 367, 368,
	380, 401, 415, 416, 417, 311, 295, 395, 296, 329,
	297, 274, 303, 301, 304, 403, 305, 276, 381, 421,
	0, 324, 391, 354, 277, 353, 382, 420, 419, 286,
	446, 452, 453, 542, 0, 458, 623, 624, 625, 467,
	472, 473, 474, 476, 477, 478, 479, 543, 560, 527,
	497, 460, 551, 494, 498, 499, 563, 0, 0, 0,
	451, 343, 344, 0, 322, 270, 271, 618, 308, 373,
	565, 598, 599, 490, 0, 552, 491, 500, 300, 524,
	536, 535, 369, 450, 0, 547, 550, 480, 617, 0,
	544, 559, 621, 558, 614, 379, 0, 400, 556, 503,
	0, 548, 522, 0, 549, 518, 553, 0, 492, 0,
	407, 432, 444, 461, 464, 493, 578, 579, 580, 275,
	463, 582, 583, 584, 585, 586, 587, 588, 581, 435,
	525, 502, 528, 443, 505, 504, 0, 0, 539, 459,
	540, 541, 363, 364, 365, 366, 326, 566, 293, 462,
	389, 0, 526, 0, 0, 0, 0, 0, 0, 0,
	0, 531, 532, 529, 626, 0, 589, 590, 0, 0,
	456, 457, 321, 328, 475, 330, 292, 378, 323, 441,
	337, 0, 468, 533, 469, 592, 595, 593, 594, 370,
	333, 334, 404, 338, 348, 392, 440, 376, 397, 290,
	431, 405, 352, 519, 546, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 574, 573, 572, 571, 570, 569, 568, 567, 0,
	0, 516, 418, 302, 264, 298, 299, 306, 615, 612,
	422, 616, 0, 272, 496, 346, 0, 387, 320, 561,
	562, 0, 0, 220, 221, 222, 223, 224, 225, 226,
	227, 265, 228, 229, 230, 231, 232, 233, 234, 237,
	238, 239, 240, 241, 242, 243, 244, 564, 235, 236,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
	255, 256, 257, 258, 0, 0, 0, 266, 267, 268,
	269, 0, 0, 260, 261, 262, 263, 0, 0, 0,
	447, 448, 449, 471, 0, 433, 495, 613, 0, 0,
	0, 0, 0, 0, 0, 545, 557, 591, 0, 601,
	602, 604, 606, 605, 608, 410, 2256, 619, 486, 487,
	620, 597, 375, 0, 501, 534, 523, 607, 489, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 315,
	0, 0, 345, 538, 520, 530, 521, 506, 507, 508,
	515, 325, 509, 510, 511, 481, 512, 482, 513, 514,
	0, 537, 488, 406, 359, 555, 554, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 209, 0, 0, 0, 0,
	0, 0, 288, 210, 483, 603, 485, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 291, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 278,
	412, 429, 289, 402, 442, 294, 409, 284, 374, 398,
	0, 0, 280, 427, 408, 356, 335, 336, 279, 0,
	393, 313, 327, 310, 372, 0, 426, 454, 309, 445,
	0, 437, 282, 0, 436, 371, 423, 428, 357, 351,
	281, 425, 355, 350, 339, 317, 470, 340, 341, 331,
	383, 349, 384, 332, 361, 360, 362, 0, 0, 0,
	0, 0, 465, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 596, 0, 0, 600,
	0, 439, 0, 0, 0, 0, 0, 0, 411, 0,
	0, 342, 0, 0, 0, 455, 0, 396, 377, 622,
	0, 0, 394, 347, 424, 385, 430, 413, 438, 390,
	386, 273, 414, 312, 358, 285, 287, 307, 314, 316,
	318, 319, 367, 368, 380, 401, 415, 416, 417, 311,
	295, 395, 296, 329, 297, 274, 303, 301, 304, 403,
	305, 276, 381, 421, 0, 324, 391, 354, 277, 353,
	382, 420, 419, 286, 446, 452, 453, 542, 0, 458,
	623, 624, 625, 467, 472, 473, 474, 476, 477, 478,
	479, 543, 560, 527, 497, 460, 551, 494, 498, 499,
	563, 0, 0, 0, 451, 343, 344, 0, 322, 270,
	271, 618, 308, 373, 565, 598, 599, 490, 0, 552,
	491, 500, 300, 524, 536, 535, 369, 450, 0, 547,
	550, 480, 617, 0, 544, 559, 621, 558, 614, 379,
	0, 400, 556, 503, 0, 548, 522, 0, 549, 518,
	553, 0, 492, 0, 407, 432, 444, 461, 464, 493,
	578, 579, 580, 275, 463, 582, 583, 584, 585, 586,
	587, 588, 581, 435, 525, 502, 528, 443, 505, 504,
	0, 0, 539, 459, 540, 541, 363, 364, 365, 366,
	326, 566, 293, 462, 389, 0, 526, 0, 0, 0,
	0, 0, 0, 0, 0, 531, 532, 529, 626, 0,
	589, 590, 0, 0, 456, 457, 321, 328, 475, 330,
	292, 378, 323, 441, 337, 0, 468, 533, 469, 592,
	595, 593, 594, 370, 333, 334, 404, 338, 348, 392,
	440, 376, 397, 290, 431, 405, 352, 519, 546, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 574, 573, 572, 571, 570,
	569, 568, 567, 0, 0, 516, 418, 302, 264, 298,
	299, 306, 615, 612, 422, 616, 0, 272, 496, 346,
	0, 387, 320, 561, 562, 0, 0, 220, 221, 222,
	223, 224, 225, 226, 227, 265, 228, 229, 230, 231,
	232, 233, 234, 237, 238, 239, 240, 241, 242, 243,
	244, 564, 235, 236, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 256, 257, 258, 0, 0,
	0, 266, 267, 268, 269, 0, 0, 260, 261, 262,
	263, 0, 0, 0, 447, 448, 449, 471, 0, 433,
	495, 613, 0, 0, 0, 0, 0, 0, 0, 545,
	557, 591, 0, 601, 602, 604, 606, 605, 608, 410,
	0, 619, 486, 487, 620, 597, 375, 0, 501, 534,
	523, 607, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 315, 0, 0, 345, 538, 520, 530,
	521, 506, 507, 508, 515, 325, 509, 510, 511, 481,
	512, 482, 513, 514, 0, 537, 488, 406, 359, 555,
	554, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 209,
	0, 0, 0, 1814, 0, 0, 288, 210, 483, 603,
	485, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 291, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 278, 412, 429, 289, 402, 442, 294,
	409, 284, 374, 398, 0, 0, 280, 427, 408, 356,
	335, 336, 279, 0, 393, 313, 327, 310, 372, 0,
	426, 454, 309, 445, 0, 437, 282, 0, 436, 371,
	423, 428, 357, 351, 281, 425, 355, 350, 339, 317,
	470, 340, 341, 331, 383, 349, 384, 332, 361, 360,
	362, 0, 0, 0, 0, 0, 465, 466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	596, 0, 0, 600, 0, 439, 0, 0, 0, 0,
	0, 0, 411, 0, 0, 342, 0, 0, 0, 455,
	0, 396, 377, 622, 0, 0, 394, 347, 424, 385,
	430, 413, 438, 390, 386, 273, 414, 312, 358, 285,
	287, 307, 314, 316, 318, 319, 367, 368, 380, 401,
	415, 416, 417, 311, 295, 395, 296, 329, 297, 274,
	303, 301, 304, 403, 305, 276, 381, 421, 0, 324,
	391, 354, 277, 353, 382, 420, 419, 286, 446, 452,
	453, 542, 0, 458, 623, 624, 625, 467, 472, 473,
	474, 476, 477, 478, 479, 543, 560, 527, 497, 460,
	551, 494, 498, 499, 563, 0, 0, 0, 451, 343,
	344, 0, 322, 270, 271, 618, 308, 373, 565, 598,
	599, 490, 0, 552, 491, 500, 300, 524, 536, 535,
	369, 450, 0, 547, 550, 480, 617, 0, 544, 559,
	621, 558, 614, 379, 0, 400, 556, 503, 0, 548,
	522, 0, 549, 518, 553, 0, 492, 0, 407, 432,
	444, 461, 464, 493, 578, 579, 580, 275, 463, 582,
	583, 584, 585, 586, 587, 588, 581, 435, 525, 502,
	528, 443, 505, 504, 0, 0, 539, 459, 540, 541,
	363, 364, 365, 366, 326, 566, 293, 462, 389, 0,
	526, 0, 0, 0, 0, 0, 0, 0, 0, 531,
	532, 529, 626, 0, 589, 590, 0, 0, 456, 457,
	321, 328, 475, 330, 292, 378, 323, 441, 337, 0,
	468, 533, 469, 592, 595, 593, 594, 370, 333, 334,
	404, 338, 348, 392, 440, 376, 397, 290, 431, 405,
	352, 519, 546, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 574,
	573, 572, 571, 570, 569, 568, 567, 0, 0, 516,
	418, 302, 264, 298, 299, 306, 615, 612, 422, 616,
	0, 272, 496, 346, 0, 387, 320, 561, 562, 0,
	0, 220, 221, 222, 223, 224, 225, 226, 227, 265,
	228, 229, 230, 231, 232, 233, 234, 237, 238, 239,
	240, 241, 242, 243, 244, 564, 235, 236, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 256,
	257, 258, 0, 0, 0, 266, 267, 268, 269, 0,
	0, 260, 261, 262, 263, 0, 0, 0, 447, 448,
	449, 471, 0, 433, 495, 613, 0, 0, 0, 0,
	0, 0, 0, 545, 557, 591, 0, 601, 602, 604,
	606, 605, 608, 410, 0, 619, 486, 487, 620, 597,
	375, 0, 501, 534, 523, 607, 489, 0, 1942, 0,
	0, 0, 0, 0, 0, 0, 0, 315, 0, 0,
	345, 538, 520, 530, 521, 506, 507, 508, 515, 325,
	509, 510, 511, 481, 512, 482, 513, 514, 0, 537,
	488, 406, 359, 555, 554, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 0, 0,
	288, 210, 483, 603, 485, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 291, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 278, 412, 429,
	289, 402, 442, 294, 409, 284, 374, 398, 0, 0,
	280, 427, 408, 356, 335, 336, 279, 0, 393, 313,
	327, 310, 372, 0, 426, 454, 309, 445, 0, 437,
	282, 0, 436, 371, 423, 428, 357, 351, 281, 425,
	355, 350, 339, 317, 470, 340, 341, 331, 383, 349,
	384, 332, 361, 360, 362, 0, 0, 0, 0, 0,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 596, 0, 0, 600, 0, 439,
	0, 0, 0, 0, 0, 0, 411, 0, 0, 342,
	0, 0, 0, 455, 0, 396, 377, 622, 0, 0,
	394, 347, 424, 385, 430, 413, 438, 390, 386, 273,
	414, 312, 358, 285, 287, 307, 314, 316, 318, 319,
	367, 368, 380, 401, 415, 416, 417, 311, 295, 395,
	296, 329, 297, 274, 303, 301, 304, 403, 305, 276,
	381, 421, 0, 324, 391, 354, 277, 353, 382, 420,
	419, 286, 446, 452, 453, 542, 0, 458, 623, 624,
	625, 467, 472, 473, 474, 476, 477, 478, 479, 543,
	560, 527, 497, 460, 551, 494, 498, 499, 563, 0,
	0, 0, 451, 343, 344, 0, 322, 270, 271, 618,
	308, 373, 565, 598, 599, 490, 0, 552, 491, 500,
	300, 524, 536, 535, 369, 450, 0, 547, 550, 480,
	617, 0, 544, 559, 621, 558, 614, 379, 0, 400,
	556, 503, 0, 548, 522, 0, 549, 518, 553, 0,
	492, 0, 407, 432, 444, 461, 464, 493, 578, 579,
	580, 275, 463, 582, 583, 584, 585, 586, 587, 588,
	581, 435, 525, 502, 528, 443, 505, 504, 0, 0,
	539, 459, 540, 541, 363, 364, 365, 366, 326, 566,
	293, 462, 389, 0, 526, 0, 0, 0, 0, 0,
	0, 0, 0, 531, 532, 529, 626, 0, 589, 590,
	0, 0, 456, 457, 321, 328, 475, 330, 292, 378,
	323, 441, 337, 0, 468, 533, 469, 592, 595, 593,
	594, 370, 333, 334, 404, 338, 348, 392, 440, 376,
	397, 290, 431, 405, 352, 519, 546, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 574, 573, 572, 571, 570, 569, 568,
	567, 0, 0, 516, 418, 302, 264, 298, 299, 306,
	615, 612, 422, 616, 0, 272, 496, 346, 0, 387,
	320, 561, 562, 0, 0, 220, 221, 222, 223, 224,
	225, 226, 227, 265, 228, 229, 230, 231, 232, 233,
	234, 237, 238, 239, 240, 241, 242, 243, 244, 564,
	235, 236, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 256, 257, 258, 0, 0, 0, 266,
	267, 268, 269, 0, 0, 260, 261, 262, 263, 0,
	0, 0, 447, 448, 449, 471, 0, 433, 495, 613,
	0, 0, 0, 0, 0, 0, 0, 545, 557, 591,
	0, 601, 602, 604, 606, 605, 608, 410, 0, 619,
	486, 487, 620, 597, 375, 0, 501, 534, 523, 607,
	489, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 315, 0, 0, 345, 538, 520, 530, 521, 506,
	507, 508, 515, 325, 509, 510, 511, 481, 512, 482,
	513, 514, 0, 537, 488, 406, 359, 555, 554, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 209, 0, 0,
	1467, 0, 0, 0, 288, 210, 483, 603, 485, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 291,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 278, 412, 429, 289, 402, 442, 294, 409, 284,
	374, 398, 0, 0, 280, 427, 408, 356, 335, 336,
	279, 0, 393, 313, 327, 310, 372, 0, 426, 454,
	309, 445, 0, 437, 282, 0, 436, 371, 423, 428,
	357, 351, 281, 425, 355, 350, 339, 317, 470, 340,
	341, 331, 383, 349, 384, 332, 361, 360, 362, 0,
	0, 0, 0, 0, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 596, 0,
	0, 600, 0, 439, 0, 0, 0, 0, 0, 0,
	411, 0, 0, 342, 0, 0, 0, 455, 0, 396,
	377, 622, 0, 0, 394, 347, 424, 385, 430, 413,
	438, 1847, 386, 273, 414, 312, 358, 285, 287, 307,
	314, 316, 318, 319, 367, 368, 380, 401, 415, 416,
	417, 311, 295, 395, 296, 329, 297, 274, 303, 301,
	304, 403, 305, 276, 381, 421, 0, 324, 391, 354,
	277, 353, 382, 420, 419, 286, 446, 452, 453, 542,
	0, 458, 623, 624, 625, 467, 472, 473, 474, 476,
	477, 478, 479, 543, 560, 527, 497, 460, 551, 494,
	498, 499, 563, 0, 0, 0, 451, 343, 344, 0,
	322, 270, 271, 618, 308, 373, 565, 598, 599, 490,
	0, 552, 491, 500, 300, 524, 536, 535, 369, 450,
	0, 547, 550, 480, 617, 0, 544, 559, 621, 558,
	614, 379, 0, 400, 556, 503, 0, 548, 522, 0,
	549, 518, 553, 0, 492, 0, 407, 432, 444, 461,
	464, 493, 578, 579, 580, 275, 463, 582, 583, 584,
	585, 586, 587, 588, 581, 435, 525, 502, 528, 443,
	505, 504, 0, 0, 539, 459, 540, 541, 363, 364,
	365, 366, 326, 566, 293, 462, 389, 0, 526, 0,
	0, 0, 0, 0, 0, 0, 0, 531, 532, 529,
	626, 0, 589, 590, 0, 0, 456, 457, 321, 328,
	475, 330, 292, 378, 323, 441, 337, 0, 468, 533,
	469, 592, 595, 593, 594, 370, 333, 334, 404, 338,
	348, 392, 440, 376, 397, 290, 431, 405, 352, 519,
	546, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 574, 573, 572,
	571, 570, 569, 568, 567, 0, 0, 516, 418, 302,
	264, 298, 299, 306, 615, 612, 422, 616, 0, 272,
	496, 346, 0, 387, 320, 561, 562, 0, 0, 220,
	221, 222, 223, 224, 225, 226, 227, 265, 228, 229,
	230, 231, 232, 233, 234, 237, 238, 239, 240, 241,
	242, 243, 244, 564, 235, 236, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	0, 0, 0, 266, 267, 268, 269, 0, 0, 260,
	261, 262, 263, 0, 0, 0, 447, 448, 449, 471,
	0, 433, 495, 613, 0, 0, 0, 0, 0, 0,
	0, 545, 557, 591, 0, 601, 602, 604, 606, 605,
	608, 410, 0, 619, 486, 487, 620, 597, 375, 0,
	501, 534, 523, 607, 489, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 315, 0, 0, 345, 538,
	520, 530, 521, 506, 507, 508, 515, 325, 509, 510,
	511, 481, 512, 482, 513, 514, 0, 537, 488, 406,
	359, 555, 554, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 209, 0, 0, 0, 0, 0, 0, 288, 210,
	483, 603, 485, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 291, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 278, 412, 429, 289, 402,
	442, 294, 409, 284, 374, 398, 0, 0, 280, 427,
	408, 356, 335, 336, 279, 0, 393, 313, 327, 310,
	372, 0, 426, 454, 309, 445, 0, 437, 282, 0,
	436, 371, 423, 428, 357, 351, 281, 425, 355, 350,
	339, 317, 470, 340, 341, 331, 383, 349, 384, 332,
	361, 360, 362, 0, 0, 0, 0, 0, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 596, 0, 0, 600, 0, 439, 0, 0,
	1497, 0, 0, 0, 411, 0, 0, 342, 0, 0,
	0, 455, 0, 396, 377, 622, 0, 0, 394, 347,
	424, 385, 430, 413, 438, 390, 386, 273, 414, 312,
	358, 285, 287, 307, 314, 316, 318, 319, 367, 368,
	380, 401, 415, 416, 417, 311, 295, 395, 296, 329,
	297, 274, 303, 301, 304, 403, 305, 276, 381, 421,
	0, 324, 391, 354, 277, 353, 382, 420, 419, 286,
	446, 452, 453, 542, 0, 458, 623, 624, 625, 467,
	472, 473, 474, 476, 477, 478, 479, 543, 560, 527,
	497, 460, 551, 494, 498, 499, 563, 0, 0, 0,
	451, 343, 344, 0, 322, 270, 271, 618, 308, 373,
	565, 598, 599, 490, 0, 552, 491, 500, 300, 524,
	536, 535, 369, 450, 0, 547, 550, 480, 617, 0,
	544, 559, 621, 558, 614, 379, 0, 400, 556, 503,
	0, 548, 522, 0, 549, 518, 553, 0, 492, 0,
	407, 432, 444, 461, 464, 493, 578, 579, 580, 275,
	463, 582, 583, 584, 585, 586, 587, 588, 581, 435,
	525, 502, 528, 443, 505, 504, 0, 0, 539, 459,
	540, 541, 363, 364, 365, 366, 326, 566, 293, 462,
	389, 0, 526, 0, 0, 0, 0, 0, 0, 0,
	0, 531, 532, 529, 626, 0, 589, 590, 0, 0,
	456, 457, 321, 328, 475, 330, 292, 378, 323, 441,
	337, 0, 468, 533, 469, 592, 595, 593, 594, 370,
	333, 334, 404, 338, 348, 392, 440, 376, 397, 290,
	431, 405, 352, 519, 546, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 574, 573, 572, 571, 570, 569, 568, 567, 0,
	0, 516, 418, 302, 264, 298, 299, 306, 615, 612,
	422, 616, 0, 272, 496, 346, 0, 387, 320, 561,
	562, 0, 0, 220, 221, 222, 223, 224, 225, 226,
	227, 265, 228, 229, 230, 231, 232, 233, 234, 237,
	238, 239, 240, 241, 242, 243, 244, 564, 235, 236,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
	255, 256, 257, 258, 0, 0, 0, 266, 267, 268,
	269, 0, 0, 260, 261, 262, 263, 0, 0, 0,
	447, 448, 449, 471, 0, 433, 495, 613, 0, 0,
	0, 0, 0, 0, 0, 545, 557, 591, 0, 601,
	602, 604, 606, 605, 608, 410, 0, 619, 486, 487,
	620, 597, 375, 0, 501, 534, 523, 607, 489, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 633, 315,
	0, 0, 345, 538, 520, 530, 521, 506, 507, 508,
	515, 325, 509, 510, 511, 481, 512, 482, 513, 514,
	0, 537, 488, 406, 359, 555, 554, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 209, 0, 0, 0, 0,
	0, 0, 288, 210, 483, 603, 485, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 291, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 278,
	412, 429, 289, 402, 442, 294, 409, 284, 374, 398,
	0, 0, 280, 427, 408, 356, 335, 336, 279, 0,
	393, 313, 327, 310, 372, 0, 426, 454, 309, 445,
	0, 437, 282, 0, 436, 371, 423, 428, 357, 351,
	281, 425, 355, 350, 339, 317, 470, 340, 341, 331,
	383, 349, 384, 332, 361, 360, 362, 0, 0, 0,
	0, 0, 465, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 596, 0, 0, 600,
	0, 439, 0, 0, 0, 0, 0, 0, 411, 0,
	0, 342, 0, 0, 0, 455, 0, 396, 377, 622,
	0, 0, 394, 347, 424, 385, 430, 413, 438, 390,
	386, 273, 414, 312, 358, 285, 287, 307, 314, 316,
	318, 319, 367, 368, 380, 401, 415, 416, 417, 311,
	295, 395, 296, 329, 297, 274, 303, 301, 304, 403,
	305, 276, 381, 421, 0, 324, 391, 354, 277, 353,
	382, 420, 419, 286, 446, 452, 453, 542, 0, 458,
	623, 624, 625, 467, 472, 473, 474, 476, 477, 478,
	479, 543, 560, 527, 497, 460, 551, 494, 498, 499,
	563, 0, 0, 0, 451, 343, 344, 0, 322, 270,
	271, 618, 308, 373, 565, 598, 599, 490, 0, 552,
	491, 500, 300, 524, 536, 535, 369, 450, 0, 547,
	550, 480, 617, 0, 544, 559, 621, 558, 614, 379,
	0, 400, 556, 503, 0, 548, 522, 0, 549, 518,
	553, 0, 492, 0, 407, 432, 444, 461, 464, 493,
	578, 579, 580, 275, 463, 582, 583, 584, 585, 586,
	587, 588, 581, 435, 525, 502, 528, 443, 505, 504,
	0, 0, 539, 459, 540, 541, 363, 364, 365, 366,
	326, 566, 293, 462, 389, 0, 526, 0, 0, 0,
	0, 0, 0, 0, 0, 531, 532, 529, 626, 0,
	589, 590, 0, 0, 456, 457, 321, 328, 475, 330,
	292, 378, 323, 441, 337, 0, 468, 533, 469, 592,
	595, 593, 594, 370, 333, 334, 404, 338, 348, 392,
	440, 376, 397, 290, 431, 405, 352, 519, 546, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 574, 573, 572, 571, 570,
	569, 568, 567, 0, 0, 516, 418, 302, 264, 298,
	299, 306, 615, 612, 422, 616, 0, 272, 496, 346,
	0, 387, 320, 561, 562, 0, 0, 220, 221, 222,
	223, 224, 225, 226, 227, 265, 228, 229, 230, 231,
	232, 233, 234, 237, 238, 239, 240, 241, 242, 243,
	244, 564, 235, 236, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 256, 257, 258, 0, 0,
	0, 266, 267, 268, 269, 0, 0, 260, 261, 262,
	263, 0, 0, 0, 447, 448, 449, 471, 0, 433,
	495, 613, 0, 0, 0, 0, 0, 0, 0, 545,
	557, 591, 0, 601, 602, 604, 606, 605, 608, 410,
	0, 619, 486, 487, 620, 597, 375, 0, 501, 534,
	523, 607, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 315, 0, 0, 345, 538, 520, 530,
	521, 506, 507, 508, 515, 325, 509, 510, 511, 481,
	512, 482, 513, 514, 0, 537, 488, 406, 359, 555,
	554, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 209,
	0, 0, 0, 0, 0, 0, 288, 210, 483, 603,
	485, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 291, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 278, 412, 429, 289, 402, 442, 294,
	409, 284, 374, 398, 0, 0, 280, 427, 408, 356,
	335, 336, 279, 0, 393, 313, 327, 310, 372, 0,
	426, 454, 309, 445, 0, 437, 282, 0, 436, 371,
	423, 428, 357, 351, 281, 425, 355, 350, 339, 317,
	470, 340, 341, 331, 383, 349, 384, 332, 361, 360,
	362, 0, 0, 0, 0, 0, 465, 466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	596, 0, 643, 600, 0, 439, 0, 0, 0, 0,
	0, 0, 411, 0, 0, 342, 0, 0, 0, 455,
	0, 396, 377, 622, 0, 0, 394, 347, 424, 385,
	430, 413, 438, 390, 386, 273, 414, 312, 358, 285,
	287, 307, 314, 316, 318, 319, 367, 368, 380, 401,
	415, 416, 417, 311, 295, 395, 296, 329, 297, 274,
	303, 301, 304, 403, 305, 276, 381, 421, 0, 324,
	391, 354, 277, 353, 382, 420, 419, 286, 446, 452,
	453, 542, 0, 458, 623, 624, 625, 467, 472, 473,
	474, 476, 477, 478, 479, 543, 560, 527, 497, 460,
	551, 494, 498, 499, 563, 0, 0, 0, 451, 343,
	344, 0, 322, 270, 271, 618, 308, 373, 565, 598,
	599, 490, 0, 552, 491, 500, 300, 524, 536, 535,
	369, 450, 0, 547, 550, 480, 617, 0, 544, 559,
	621, 558, 614, 379, 0, 400, 556, 503, 0, 548,
	522, 0, 549, 518, 553, 0, 492, 0, 407, 432,
	444, 461, 464, 493, 578, 579, 580, 275, 463, 582,
	583, 584, 585, 586, 587, 588, 581, 435, 525, 502,
	528, 443, 505, 504, 0, 0, 539, 459, 540, 541,
	363, 364, 365, 366, 326, 566, 293, 462, 389, 0,
	526, 0, 0, 0, 0, 0, 0, 0, 0, 531,
	532, 529, 626, 0, 589, 590, 0, 0, 456, 457,
	321, 328, 475, 330, 292, 378, 323, 441, 337, 0,
	468, 533, 469, 592, 595, 593, 594, 370, 333, 334,
	404, 338, 348, 392, 440, 376, 397, 290, 431, 405,
	352, 519, 546, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 574,
	573, 572, 571, 570, 569, 568, 567, 0, 0, 516,
	418, 302, 264, 298, 299, 306, 615, 612, 422, 616,
	0, 272, 496, 346, 0, 387, 320, 561, 562, 0,
	0, 220, 221, 222, 223, 224, 225, 226, 227, 265,
	228, 229, 230, 231, 232, 233, 234, 237, 238, 239,
	240, 241, 242, 243, 244, 564, 235, 236, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 256,
	257, 258, 0, 0, 0, 266, 267, 268, 269, 0,
	0, 260, 261, 262, 263, 0, 0, 0, 447, 448,
	449, 471, 0, 433, 495, 613, 0, 0, 0, 0,
	0, 0, 0, 545, 557, 591, 0, 601, 602, 604,
	606, 605, 608, 410, 0, 619, 486, 487, 620, 597,
	375, 0, 501, 534, 523, 607, 489, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 315, 0, 0,
	345, 538, 520, 530, 521, 506, 507, 508, 515, 325,
	509, 510, 511, 481, 512, 482, 513, 514, 0, 537,
	488, 406, 359, 555, 554, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 0, 0,
	288, 210, 483, 603, 485, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 291, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 278, 412, 429,
	289, 402, 442, 294, 409, 284, 374, 398, 0, 0,
	280, 427, 408, 356, 335, 336, 279, 0, 393, 313,
	327, 310, 372, 0, 426, 454, 309, 445, 0, 437,
	282, 0, 436, 371, 423, 428, 357, 351, 281, 425,
	355, 350, 339, 317, 470, 340, 341, 331, 383, 349,
	384, 332, 361, 360, 362, 0, 0, 0, 0, 0,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 596, 0, 0, 600, 0, 439,
	0, 0, 0, 0, 0, 0, 411, 0, 0, 342,
	0, 0, 0, 455, 0, 396, 377, 622, 0, 0,
	394, 347, 424, 385, 430, 413, 438, 390, 386, 273,
	414, 312, 358, 285, 287, 307, 314, 316, 318, 319,
	367, 368, 380, 401, 415, 416, 417, 311, 295, 395,
	296, 329, 297, 274, 303, 301, 304, 403, 305, 276,
	381, 421, 0, 324, 391, 354, 277, 353, 382, 420,
	419, 286, 446, 452, 453, 542, 0, 458, 623, 624,
	625, 467, 472, 473, 474, 476, 477, 478, 479, 543,
	560, 527, 497, 460, 551, 494, 498, 499, 563, 0,
	0, 0, 451, 343, 344, 0, 322, 270, 271, 618,
	308, 373, 565, 598, 599, 490, 0, 552, 491, 500,
	300, 524, 536, 535, 369, 450, 0, 547, 550, 480,
	617, 0, 544, 559, 621, 558, 614, 379, 0, 400,
	556, 503, 0, 548, 522, 0, 549, 518, 553, 0,
	492, 0, 407, 432, 444, 461, 464, 493, 578, 579,
	580, 275, 463, 582, 583, 584, 585, 586, 587, 588,
	581, 435, 525, 502, 528, 443, 505, 504, 0, 0,
	539, 459, 540, 541, 363, 364, 365, 366, 326, 566,
	293, 462, 389, 0, 526, 0, 0, 0, 0, 0,
	0, 0, 0, 531, 532, 529, 626, 0, 589, 590,
	0, 0, 456, 457, 321, 328, 475, 330, 292, 378,
	323, 441, 337, 0, 468, 533, 469, 592, 595, 593,
	594, 370, 333, 334, 404, 338, 348, 392, 440, 376,
	397, 290, 431, 405, 352, 519, 546, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 574, 573, 572, 571, 570, 569, 568,
	567, 929, 0, 516, 418, 302, 264, 298, 299, 306,
	615, 612, 422, 616, 0, 272, 496, 346, 0, 387,
	320, 561, 562, 0, 0, 220, 221, 222, 223, 224,
	225, 226, 227, 265, 228, 229, 230, 231, 232, 233,
	234, 237, 238, 239, 240, 241, 242, 243, 244, 564,
	235, 236, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 256, 257, 258, 0, 0, 0, 266,
	267, 268, 269, 0, 0, 260, 261, 262, 263, 0,
	0, 0, 447, 448, 449, 471, 0, 433, 495, 613,
	0, 0, 0, 0, 0, 0, 0, 545, 557, 591,
	0, 601, 602, 604, 606, 605, 608, 410, 0, 619,
	486, 487, 620, 597, 375, 0, 501, 534, 523, 607,
	489, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 315, 0, 0, 345, 538, 520, 530, 521, 506,
	507, 508, 515, 325, 509, 510, 511, 481, 512, 482,
	513, 514, 0, 537, 488, 406, 359, 555, 554, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 209, 0, 0,
	0, 0, 0, 0, 288, 210, 483, 603, 485, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 291,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 278, 412, 429, 289, 402, 442, 294, 409, 284,
	374, 398, 0, 0, 280, 427, 408, 356, 335, 336,
	279, 0, 393, 313, 327, 310, 372, 0, 426, 454,
	309, 445, 0, 437, 282, 0, 436, 371, 423, 428,
	357, 351, 281, 425, 355, 350, 339, 317, 470, 340,
	341, 331, 383, 349, 384, 332, 361, 360, 362, 0,
	0, 0, 0, 0, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 596, 0,
	0, 600, 0, 439, 0, 0, 0, 0, 0, 0,
	411, 0, 0, 342, 0, 0, 0, 455, 0, 396,
	377, 622, 0, 0, 394, 347, 424, 385, 430, 413,
	438, 390, 386, 273, 414, 312, 358, 285, 287, 307,
	314, 316, 318, 319, 367, 368, 380, 401, 415, 416,
	417, 311, 295, 395, 296, 329, 297, 274, 303, 301,
	304, 403, 305, 276, 381, 421, 0, 324, 391, 354,
	277, 353, 382, 420, 419, 286, 446, 452, 453, 542,
	0, 458, 623, 624, 625, 467, 472, 473, 474, 476,
	477, 478, 479, 543, 560, 527, 497, 460, 551, 494,
	498, 499, 563, 0, 0, 0, 451, 343, 344, 0,
	322, 270, 271, 618, 308, 373, 565, 598, 599, 490,
	0, 552, 491, 500, 300, 524, 536, 535, 369, 450,
	0, 547, 550, 480, 617, 0, 544, 559, 621, 558,
	614, 379, 0, 400, 556, 503, 0, 548, 522, 0,
	549, 518, 553, 0, 492, 0, 407, 432, 444, 461,
	464, 493, 578, 579, 580, 275, 463, 582, 583, 584,
	585, 586, 587, 588, 581, 435, 525, 502, 528, 443,
	505, 504, 0, 0, 539, 459, 540, 541, 363, 364,
	365, 366, 326, 566, 293, 462, 389, 0, 526, 0,
	0, 0, 0, 0, 0, 0, 0, 531, 532, 529,
	626, 0, 589, 590, 0, 0, 456, 457, 321, 328,
	475, 330, 292, 378, 323, 441, 337, 0, 468, 533,
	469, 592, 595, 593, 594, 370, 333, 334, 404, 338,
	348, 392, 440, 376, 397, 290, 431, 405, 352, 519,
	546, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 574, 573, 572,
	571, 570, 569, 568, 567, 0, 0, 516, 418, 302,
	264, 298, 299, 306, 615, 612, 422, 616, 0, 272,
	496, 346, 0, 387, 320, 561, 562, 0, 0, 220,
	221, 222, 223, 224, 225, 226, 227, 265, 228, 229,
	230, 231, 232, 233, 234, 237, 238, 239, 240, 241,
	242, 243, 244, 564, 235, 236, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	0, 0, 0, 266, 267, 268, 269, 0, 0, 260,
	261, 262, 263, 0, 0, 0, 447, 448, 449, 471,
	0, 433, 495, 613, 0, 0, 0, 0, 0, 0,
	0, 545, 557, 591, 0, 601, 602, 604, 606, 605,
	608, 410, 0, 619, 486, 487, 620, 597, 375, 0,
	501, 534, 523, 607, 489, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 315, 0, 0, 345, 538,
	520, 530, 521, 506, 507, 508, 515, 325, 509, 510,
	511, 481, 512, 482, 513, 514, 0, 537, 488, 406,
	359, 555, 554, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 209, 0, 0, 0, 0, 0, 0, 288, 210,
	483, 603, 485, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 291, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 278, 412, 1447, 289, 402,
	442, 294, 409, 284, 374, 398, 0, 0, 280, 427,
	408, 356, 335, 336, 279, 0, 393, 313, 327, 310,
	372, 0, 426, 454, 309, 445, 0, 437, 282, 0,
	436, 371, 423, 428, 357, 351, 281, 425, 355, 350,
	339, 317, 470, 340, 341, 331, 383, 349, 384, 332,
	361, 360, 362, 0, 0, 0, 0, 0, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 596, 0, 0, 600, 0, 439, 0, 0,
	0, 0, 0, 0, 411, 0, 0, 342, 0, 0,
	0, 455, 0, 396, 377, 622, 0, 0, 394, 347,
	424, 385, 430, 413, 438, 390, 386, 273, 414, 312,
	358, 285, 287, 307, 314, 316, 318, 319, 367, 368,
	380, 401, 415, 416, 417, 311, 295, 395, 296, 329,
	297, 274, 303, 301, 304, 403, 305, 276, 381, 421,
	0, 324, 391, 354, 277, 353, 382, 420, 419, 286,
	446, 452, 453, 542, 0, 458, 623, 624, 625, 467,
	472, 473, 474, 476, 477, 478, 479, 543, 560, 527,
	497, 460, 551, 494, 498, 499, 563, 0, 0, 0,
	451, 343, 344, 0, 322, 270, 271, 618, 308, 373,
	565, 598, 599, 490, 0, 552, 491, 500, 300, 524,
	536, 535, 369, 450, 0, 547, 550, 480, 617, 0,
	544, 559, 621, 558, 614, 379, 0, 400, 556, 503,
	0, 548, 522, 0, 549, 518, 553, 0, 492, 0,
	407, 432, 444, 461, 464, 493, 578, 579, 580, 275,
	463, 582, 583, 584, 585, 586, 587, 588, 581, 435,
	525, 502, 528, 443, 505, 504, 0, 0, 539, 459,
	540, 541, 363, 364, 365, 366, 326, 566, 293, 462,
	389, 0, 526, 0, 0, 0, 0, 0, 0, 0,
	0, 531, 532, 529, 626, 0, 589, 590, 0, 0,
	456, 457, 321, 328, 475, 330, 292, 378, 323, 441,
	337, 0, 468, 533, 469, 592, 595, 593, 594, 370,
	333, 334, 404, 338, 348, 392, 440, 376, 397, 290,
	431, 405, 352, 519, 546, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 574, 573, 572, 571, 570, 569, 568, 567, 0,
	0, 516, 418, 302, 264, 298, 299, 306, 615, 612,
	422, 616, 0, 272, 496, 346, 0, 387, 320, 561,
	562, 0, 0, 220, 221, 222, 223, 224, 225, 226,
	227, 265, 228, 229, 230, 231, 232, 233, 234, 237,
	238, 239, 240, 241, 242, 243, 244, 564, 235, 236,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
	255, 256, 257, 258, 0, 0, 0, 266, 267, 268,
	269, 0, 0, 260, 261, 262, 263, 0, 0, 0,
	447, 448, 449, 471, 0, 433, 495, 613, 0, 0,
	0, 0, 0, 0, 0, 545, 557, 591, 0, 601,
	602, 604, 606, 605, 608, 410, 0, 619, 486, 487,
	620, 597, 375, 0, 501, 534, 523, 607, 489, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 315,
	0, 0, 345, 538, 520, 530, 521, 506, 507, 508,
	515, 325, 509, 510, 511, 481, 512, 482, 513, 514,
	0, 537, 488, 406, 359, 555, 554, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 209, 0, 0, 0, 0,
	0, 0, 288, 210, 483, 603, 485, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 291, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 278,
	412, 1445, 289, 402, 442, 294, 409, 284, 374, 398,
	0, 0, 280, 427, 408, 356, 335, 336, 279, 0,
	393, 313, 327, 310, 372, 0, 426, 454, 309, 445,
	0, 437, 282, 0, 436, 371, 423, 428, 357, 351,
	281, 425, 355, 350, 339, 317, 470, 340, 341, 331,
	383, 349, 384, 332, 361, 360, 362, 0, 0, 0,
	0, 0, 465, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 596, 0, 0, 600,
	0, 439, 0, 0, 0, 0, 0, 0, 411, 0,
	0, 342, 0, 0, 0, 455, 0, 396, 377, 622,
	0, 0, 394, 347, 424, 385, 430, 413, 438, 390,
	386, 273, 414, 312, 358, 285, 287, 307, 314, 316,
	318, 319, 367, 368, 380, 401, 415, 416, 417, 311,
	295, 395, 296, 329, 297, 274, 303, 301, 304, 403,
	305, 276, 381, 421, 0, 324, 391, 354, 277, 353,
	382, 420, 419, 286, 446, 452, 453, 542, 0, 458,
	623, 624, 625, 467, 472, 473, 474, 476, 477, 478,
	479, 543, 560, 527, 497, 460, 551, 494, 498, 499,
	563, 0, 0, 0, 451, 343, 344, 0, 322, 270,
	271, 618, 308, 373, 565, 598, 599, 490, 0, 552,
	491, 500, 300, 524, 536, 535, 369, 450, 0, 547,
	550, 480, 617, 0, 544, 559, 621, 558, 614, 379,
	0, 400, 556, 503, 0, 548, 522, 0, 549, 518,
	553, 0, 492, 0, 407, 432, 444, 461, 464, 493,
	578, 579, 580, 275, 463, 582, 583, 584, 585, 586,
	587, 588, 581, 435, 525, 502, 528, 443, 505, 504,
	0, 0, 539, 459, 540, 541, 363, 364, 365, 366,
	326, 566, 293, 462, 389, 0, 526, 0, 0, 0,
	0, 0, 0, 0, 0, 531, 532, 529, 626, 0,
	589, 590, 0, 0, 456, 457, 321, 328, 475, 330,
	292, 378, 323, 441, 337, 0, 468, 533, 469, 592,
	595, 593, 594, 370, 333, 334, 404, 338, 348, 392,
	440, 376, 397, 290, 431, 405, 352, 519, 546, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 574, 573, 572, 571, 570,
	569, 568, 567, 0, 0, 516, 418, 302, 264, 298,
	299, 306, 615, 612, 422, 616, 0, 272, 496, 346,
	0, 387, 320, 561, 562, 0, 0, 220, 221, 222,
	223, 224, 225, 226, 227, 265, 228, 229, 230, 231,
	232, 233, 234, 237, 238, 239, 240, 241, 242, 243,
	244, 564, 235, 236, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 256, 257, 258, 0, 0,
	0, 266, 267, 268, 269, 0, 0, 260, 261, 262,
	263, 0, 0, 0, 447, 448, 449, 471, 0, 433,
	495, 613, 0, 0, 0, 0, 0, 0, 0, 545,
	557, 591, 0, 601, 602, 604, 606, 605, 608, 410,
	0, 619, 486, 487, 620, 597, 375, 0, 501, 534,
	523, 607, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 315, 0, 0, 345, 538, 520, 530,
	521, 506, 507, 508, 515, 325, 509, 510, 511, 481,
	512, 482, 513, 514, 0, 537, 488, 406, 359, 555,
	554, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 209,
	0, 0, 0, 0, 0, 0, 288, 210, 483, 603,
	485, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 291, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 278, 412, 429, 289, 402, 442, 294,
	409, 284, 374, 398, 0, 0, 280, 427, 408, 356,
	335, 336, 279, 0, 393, 313, 327, 310, 372, 0,
	426, 454, 309, 445, 0, 437, 282, 0, 436, 371,
	423, 428, 357, 351, 281, 425, 355, 350, 339, 317,
	470, 340, 341, 331, 383, 349, 384, 332, 361, 360,
	362, 0, 0, 0, 0, 0, 465, 466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	596, 0, 0, 600, 0, 439, 0, 0, 0, 0,
	0, 0, 411, 0, 0, 342, 0, 0, 0, 455,
	0, 396, 377, 622, 0, 0, 394, 347, 424, 385,
	430, 413, 438, 390, 386, 273, 414, 312, 358, 285,
	287, 710, 314, 316, 318, 319, 367, 368, 380, 401,
	415, 416, 417, 311, 295, 395, 296, 329, 297, 274,
	303, 301, 304, 403, 305, 276, 381, 421, 0, 324,
	391, 354, 277, 353, 382, 420, 419, 286, 446, 452,
	453, 542, 0, 458, 623, 624, 625, 467, 472, 473,
	474, 476, 477, 478, 479, 543, 560, 527, 497, 460,
	551, 494, 498, 499, 563, 0, 0, 0, 451, 343,
	344, 0, 322, 270, 271, 618, 308, 373, 565, 598,
	599, 490, 0, 552, 491, 500, 300, 524, 536, 535,
	369, 450, 0, 547, 550, 480, 617, 0, 544, 559,
	621, 558, 614, 379, 0, 400, 556, 503, 0, 548,
	522, 0, 549, 518, 553, 0, 492, 0, 407, 432,
	444, 461, 464, 493, 578, 579, 580, 275, 463, 582,
	583, 584, 585, 586, 587, 588, 581, 435, 525, 502,
	528, 443, 505, 504, 0, 0, 539, 459, 540, 541,
	363, 364, 365, 366, 326, 566, 293, 462, 389, 0,
	526, 0, 0, 0, 0, 0, 0, 0, 0, 531,
	532, 529, 626, 0, 589, 590, 0, 0, 456, 457,
	321, 328, 475, 330, 292, 378, 323, 441, 337, 0,
	468, 533, 469, 592, 595, 593, 594, 370, 333, 334,
	404, 338, 348, 392, 440, 376, 397, 290, 431, 405,
	352, 519, 546, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 574,
	573, 572, 571, 570, 569, 568, 567, 0, 0, 516,
	418, 302, 264, 298, 299, 306, 615, 612, 422, 616,
	0, 272, 496, 346, 0, 387, 320, 561, 562, 0,
	0, 220, 221, 222, 223, 224, 225, 226, 227, 265,
	228, 229, 230, 231, 232, 233, 234, 237, 238, 239,
	240, 241, 242, 243, 244, 564, 235, 236, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 256,
	257, 258, 0, 0, 0, 266, 267, 268, 269, 0,
	0, 260, 261, 262, 263, 0, 0, 0, 447, 448,
	449, 471, 0, 433, 495, 613, 0, 0, 0, 0,
	0, 0, 0, 545, 557, 591, 0, 601, 602, 604,
	606, 605, 608, 410, 0, 619, 486, 487, 620, 597,
	375, 0, 501, 534, 523, 607, 489, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 315, 0, 0,
	345, 538, 520, 530, 521, 506, 507, 508, 515, 325,
	509, 510, 511, 481, 512, 482, 513, 514, 0, 537,
	488, 406, 359, 555, 554, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 0, 0,
	288, 210, 483, 603, 485, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 291, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 278, 412, 429,
	289, 402, 442, 294, 409, 284, 374, 398, 0, 0,
	280, 427, 408, 356, 335, 336, 279, 0, 393, 313,
	327, 310, 372, 0, 426, 454, 309, 445, 0, 437,
	282, 0, 436, 371, 423, 428, 357, 351, 281, 425,
	355, 350, 339, 317, 470, 340, 341, 331, 383, 349,
	384, 332, 361, 360, 362, 0, 0, 0, 0, 0,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 596, 0, 0, 600, 0, 439,
	0, 0, 0, 0, 0, 0, 411, 0, 0, 342,
	0, 0, 0, 455, 0, 396, 377, 622, 0, 0,
	394, 347, 424, 385, 430, 413, 438, 667, 386, 273,
	414, 312, 358, 285, 287, 307, 314, 316, 318, 319,
	367, 368, 380, 401, 415, 416, 417, 311, 295, 395,
	296, 329, 297, 274, 303, 301, 304, 403, 305, 276,
	381, 421, 0, 324, 391, 354, 277, 353, 382, 420,
	419, 286, 446, 452, 453, 542, 0, 458, 623, 624,
	625, 467, 472, 473, 474, 476, 477, 478, 479, 543,
	560, 527, 497, 460, 551, 494, 498, 499, 563, 0,
	0, 0, 451, 343, 344, 0, 322, 270, 271, 618,
	308, 373, 565, 598, 599, 490, 0, 552, 491, 500,
	300, 524, 536, 535, 369, 450, 0, 547, 550, 480,
	617, 0, 544, 559, 621, 558, 614, 379, 0, 400,
	556, 503, 0, 548, 522, 0, 549, 518, 553, 0,
	492, 0, 407, 432, 444, 461, 464, 493, 578, 579,
	580, 275, 463, 582, 583, 584, 585, 586, 587, 668,
	581, 435, 525, 502, 528, 443, 505, 504, 0, 0,
	539, 459, 540, 541, 363, 364, 365, 366, 326, 566,
	293, 462, 389, 0, 526, 0, 0, 0, 0, 0,
	0, 0, 0, 531, 532, 529, 626, 0, 589, 590,
	0, 0, 456, 457, 321, 328, 475, 330, 292, 378,
	323, 441, 337, 0, 468, 533, 469, 592, 595, 593,
	594, 370, 333, 334, 404, 338, 348, 392, 440, 376,
	397, 290, 431, 405, 352, 519, 546, 0, 0, 0,
	0, 0, 689, 688, 695, 685, 0, 0, 259, 0,
	0, 0, 0, 0, 692, 693, 0, 694, 698, 0,
	0, 679, 0, 574, 573, 572, 571, 570, 569, 568,
	567, 703, 0, 516, 418, 302, 264, 298, 299, 306,
	615, 612, 422, 616, 0, 272, 496, 346, 0, 387,
	320, 561, 562, 0, 0, 220, 221, 222, 223, 224,
	225, 226, 227, 265, 228, 229, 230, 231, 232, 233,
	234, 237, 238, 239, 240, 241, 242, 243, 244, 564,
	235, 236, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 256, 257, 258, 0, 0, 0, 266,
	267, 268, 269, 0, 0, 260, 261, 262, 263, 0,
	0, 0, 447, 448, 449, 471, 0, 433, 495, 613,
	0, 0, 0, 0, 0, 0, 0, 545, 557, 591,
	0, 601, 602, 604, 606, 605, 608, 410, 0, 619,
	486, 487, 620, 597, 1196, 1197, 1198, 1195, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1929,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	680, 682, 681, 1707, 1931, 0, 0, 0, 0, 0,
	687, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 691, 0, 0, 0, 0, 0, 0, 706,
	0, 0, 0, 0, 0, 0, 684, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3618, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1906, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1929, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1922, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1931, 0, 0,
	1929, 0, 0, 0, 0, 0, 686, 690, 696, 0,
	697, 699, 0, 0, 700, 701, 702, 0, 0, 704,
	705, 0, 0, 0, 0, 0, 1703, 0, 0, 0,
	0, 0, 0, 1700, 0, 1931, 0, 1702, 1699, 1701,
	1705, 1706, 0, 0, 0, 1704, 0, 0, 0, 1906,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1910, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1916, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1906, 0, 0,
	0, 0, 0, 0, 0, 1904, 1938, 0, 0, 1905,
	1907, 1909, 0, 1911, 1912, 1913, 1917, 1918, 1919, 1921,
	1924, 1925, 1926, 3589, 0, 0, 0, 1922, 0, 0,
	1914, 1923, 1915, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1930, 1922, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 683, 0, 0, 1688, 1689,
	1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1710,
	1711, 1712, 1713, 1714, 1715, 1708, 1709, 1910, 0, 1927,
	0, 0, 0, 0, 0, 0, 0, 0, 1916, 0,
	0, 0, 0, 0, 0, 0, 1903, 0, 0, 0,
	0, 0, 0, 1902, 0, 0, 0, 0, 1904, 1938,
	0, 0, 1905, 1907, 1909, 1910, 1911, 1912, 1913, 1917,
	1918, 1919, 1921, 1924, 1925, 1926, 1916, 1920, 0, 0,
	0, 0, 0, 1914, 1923, 1915, 1908, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1904, 1938, 0, 0,
	1905, 1907, 1909, 0, 1911, 1912, 1913, 1917, 1918, 1919,
	1921, 1924, 1925, 1926, 0, 0, 0, 1930, 0, 0,
	0, 1914, 1923, 1915, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1930, 0, 0, 0, 0,
	0, 0, 1927, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1903,
	0, 0, 0, 0, 0, 0, 1902, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1927, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1920, 0, 0, 0, 0, 0, 0, 1903, 0, 1908,
	0, 0, 0, 0, 1902, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1920, 0,
	0, 0, 0, 0, 0, 0, 0, 1908,
}

var yyPact = [...]int{
	492, -1000, -1000, -1000, -311, 13895, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 45241, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 380, 45241, -309, 28049, 43399, -1000,
	-1000, 2506, -1000, 44013, 15757, 45241, 463, 462, 45241, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 845, -1000, 47697, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 754, 4799, 47083, 10801, -228, -1000, 1519, -42, 2406,
	441, 1013, 1032, 1086, 1086, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 213, 871,
	44627, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3778, 246, 871, 20677, 103, 101,
	1519, 437, -111, -110, -113, 171, -1000, 1245, 3662, 196,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 10801, 10801, 13895, -370, 13895, 10801, 45241, 45241, -1000,
	-1000, -1000, -1000, -309, 44013, 754, 4799, 10801, 2406, 441,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -110, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -111, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -113,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 101, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 4500,
	-1000, 1567, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2244, 2908, 1552,
	2398, 718, 43399, 45241, -1000, 142, 718, -1000, -1000, -1000,
	1519, 3285, -1000, 45241, 45241, 185, 1810, -1000, 418, 414,
	407, 312, 1529, -1000, -1000, -1000, -1000, -1000, -1000, 624,
	3207, -1000, 45241, 45241, 2925, 45241, -1000, 2183, 637, -1000,
	4045, 3088, 1500, 863, 2939, -1000, -1000, 2902, -1000, 299,
	296, 318, 742, 378, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 307, -1000, 3132, -1000, -1000, 308, -1000, -1000, 297,
	-1000, -1000, -1000, 99, -1000, -1000, -1000, -1000, -1000, -1000,
	-27, -1000, -1000, 1064, 2216, 10801, 1822, -1000, 3790, 1586,
	-1000, -1000, -1000, 6476, 12652, 12652, 12652, 12652, 45241, -1000,
	-1000, 2718, 10801, 2901, 2899, 2898, 2895, -1000, -1000, -1000,
	-1000, -1000, -1000, 1525, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1937, -1000, -1000, -1000, 13269, -1000, 2894,
	2893, 2892, 2887, 2881, 2880, 2879, 2878, 2877, 2870, 2869,
	2868, 2867, 2866, 2571, 15133, 2863, 2394, 2393, 2862, 2845,
	2825, 2392, 2818, 2817, 2814, 2571, 2571, 2807, 2804, 2803,
	2802, 2796, 2795, 2794, 2784, 2778, 2776, 2775, 2774, 2773,
	2768, 2763, 2760, 2759, 2756, 2753, 2748, 2745, 2744, 2742,
	2740, 2736, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1325, -1000, 2735, 3222, 2640,
	-1000, 3114, 3112, 3108, 3106, -272, 2731, 2132, -1000, -1000,
	107, 3204, 45241, -294, 45241, -1000, -87, -1000, -1000, 1016,
	-1000, 960, -1000, 753, 753, 45241, 45241, 181, 801, 753,
	753, 753, 753, 753, 823, 753, 3143, 844, 838, 830,
	829, 753, -58, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1807, 1805, 2996, 942, -1000, -1000, -1000, -1000, 1385, 45241,
	-1000, 2661, 1667, 1667, 3186, 3186, 3142, 665, 663, 643,
	1667, 537, -1000, 1796, 1796, 1796, 1796, 1667, 475, 707,
	3146, 3146, 110, 1796, 61, 1667, 1667, 61, 1667, 1667,
	-1000, 1804, 294, -278, -1000, -1000, -1000, -1000, 1796, 1796,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 3127, 3125, 754,
	754, 45241, 754, 190, 45241, 754, 754, 754, 762, 9,
	46469, 45855, 2183, 630, 625, 1387, 1755, -1000, 1669, 45241,
	45241, 1669, 1669, 23751, 23137, -1000, 45241, -1000, 3222, 2640,
	2566, 1488, 2563, 2640, -117, -127, -128, 754, 754, 754,
	754, 754, 285, 754, 754, 754, 754, 754, 45241, 45241,
	42785, 754, 754, 754, 754, 8944, 8944, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 13895, 1921, 1971, 195,
	-16, -302, 265, -1000, -1000, 45241, 3054, 274, -1000, -1000,
	-1000, 2584, -1000, 2653, 2653, 2653, 2653, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2653, 2653, 2659, 2730,
	-1000, -1000, 2652, 2652, 2652, 2584, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2657, 2657, 2658, 2658, 2657, 45241, -143, -1000, -1000,
	10801, 45241, 3075, 413, 2726, 718, -1000, -1000, 45241, 164,
	433, 3222, 3062, 3146, 3180, -1000, -1000, 1524, 2131, 2388,
	-1000, 312, -1000, 401, 312, 1644, -1000, 1015, -1000, -1000,
	-1000, -1000, -1000, 45241, -27, 388, -1000, -1000, 2377, 2725,
	-1000, 622, 1408, 1520, -1000, 301, 48179, 36031, 2183, 36031,
	45241, -1000, -1000, -1000, -1000, -1000, -1000, 84, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 262, -1000, 10801, 10801, 10801, 10801, 10801, -1000,
	714, 12035, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 12652,
	12652, 12652, 12652, 12652, 12652, 12652, 12652, 12652, 12652, 12652,
	12652, 2717, 1737, 12652, 12652, 12652, 12652, 25593, 1488, 2909,
	1386, 291, 1586, 1586, 1586, 1586, 10801, -1000, 1826, 2216,
	10801, 10801, 10801, 10801, 45241, -1000, -1000, 48223, 10801, 10801,
	4400, 10801, 3104, 10801, 10801, 10801, 2561, 5233, 45241, 10801,
	-1000, 2559, 2558, -1000, -1000, 1939, 10801, -1000, -1000, 10801,
	-1000, -1000, 10801, 12652, 10801, -1000, 10801, 10801, 10801, -1000,
	-1000, 3070, 3104, 3104, 3104, 1745, 10801, 10801, 3104, 3104,
	3104, 1714, 3104, 3104, 3104, 3104, 3104, 3104, 3104, 3104,
	3104, 3104, 2553, 2548, 2542, 10184, 3146, -228, -1000, 8327,
	3062, 3146, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -274, 2723, 45241, 2387, 2386, -328, 996, 435,
	45241, 1074, -1, 1008, 963, 978, -1000, 45241, 1868, 45241,
	3100, -1000, 2722, 45241, 753, 753, 753, -1000, 40943, 36031,
	45241, 45241, 2183, 45241, 45241, 45241, 753, 753, 753, 753,
	45241, -1000, 3064, 36031, 3001, 762, -1000, 45241, 1385, 3099,
	45241, 3186, 12652, 12652, -1000, -1000, 10801, -1000, 42171, 1796,
	1667, 1667, -1000, -1000, 45241, -1000, -1000, -1000, 1796, 45241,
	1796, 1796, 3186, 1796, -1000, -1000, -1000, 1667, 1667, -1000,
	-1000, 10801, -1000, -1000, 1796, 1796, -1000, -1000, 3186, 45241,
	73, 3186, 3186, 116, -1000, -1000, -1000, 1667, 45241, 45241,
	753, 45241, -1000, 45241, 45241, -1000, -1000, 45241, 45241, 4218,
	45241, 40943, 41557, 3124, -1000, 36031, 45241, 45241, 34189, -1000,
	1347, -1000, 25, -1000, -6, 9, 1669, 9, 1669, -1000,
	617, 593, 21909, 541, 36031, 5850, -1000, -1000, 1669, 1669,
	5850, 5850, 1587, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1383, -1000, 239, 3146, -1000, -1000, -1000, -1000, -1000, 2130,
	2119, 2113, 45241, 40943, 36031, 2183, 45241, 754, 45241, 45241,
	45241, 45241, 45241, -1000, 2721, 1515, -1000, 3087, 45241, 45241,
	45241, 45241, 1410, -1000, -1000, 18827, 1504, 1410, -1000, 1854,
	-1000, 10801, 13895, -257, 10801, 13895, 13895, 10801, 13895, -1000,
	10801, 270, -1000, -1000, -1000, -1000, 2112, -1000, 2108, -1000,
	-1000, -1000, -1000, -1000, 2384, 2384, -1000, 2099, -1000, -1000,
	-1000, -1000, 2097, -1000, -1000, 2095, -1000, -1000, -1000, -1000,
	-165, 2540, 1064, -1000, 2383, 2936, -230, -1000, 20063, 45241,
	45241, 413, -336, 1803, 1785, 1784, -1000, -230, -1000, 19445,
	45241, 3146, -1000, -238, 3062, 10801, 45241, -1000, 3141, -1000,
	-1000, 312, -1000, 498, 391, -1000, -1000, -1000, -1000, -1000,
	-1000, 1502, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 372, 1382, -1000, 45241, -1000, -1000, 301, 36031,
	37873, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 240, -1000,
	-1000, 180, -1000, 815, 223, 1635, -1000, -1000, 194, 211,
	197, 862, 2216, -1000, 1858, 1858, 1872, -1000, 690, -1000,
	-1000, -1000, -1000, 2718, -1000, -1000, -1000, 2529, 4457, -1000,
	1640, 1640, 1583, 1583, 1583, 1583, 1583, 1544, 1544, -1000,
	-1000, -1000, 6476, 2717, 12652, 12652, 12652, 12652, 836, 836,
	4242, 4418, -1000, -1000, -1000, -1000, 10801, 172, 1840, -1000,
	10801, 2402, 1269, 2182, 1353, 1486, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2537, 2535, 2139, 3203,
	2532, 10801, -1000, -1000, 1634, 1618, 1617, -1000, 2189, 9567,
	-1000, -1000, -1000, 2531, 1475, 2527, -1000, -1000, -1000, 2526,
	1592, 1186, 2519, 3703, 2518, 2517, 2503, 2502, 1381, 10801,
	10801, 10801, 10801, 2497, 1588, 1585, 10801, 10801, 10801, 10801,
	2496, 10801, 10801, 10801, 10801, 10801, 10801, 10801, 10801, 10801,
	10801, 144, 144, 144, 1377, 1376, -1000, -1000, 1580, -1000,
	2216, -1000, -1000, 3062, -1000, 2716, 2094, 1365, -1000, -1000,
	-306, 2350, 45241, 992, 45241, 2381, -296, 45241, -1000, -1000,
	990, 956, 979, 3140, 3073, 818, 45241, 1094, 2702, 45241,
	45241, 45241, 264, -1000, -1000, 1329, -1000, 223, 203, 469,
	1068, 2923, 3200, -145, 45241, 45241, 45241, 45241, 3097, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 40329, -1000, 2697,
	1579, -1000, -1000, 1586, 1586, 2216, 2922, 45241, 45241, 3186,
	3186, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1796, 3186,
	3186, 1221, 1667, 1796, -1000, -1000, 1796, -336, -1000, 1796,
	-1000, -336, 1467, -336, 45241, -1000, -1000, -1000, 3096, 2661,
	1348, -1000, -1000, -1000, 3177, 1055, 747, 747, 952, 512,
	3176, 17599, -1000, 1681, 1039, 811, 3027, 314, -1000, 1681,
	-161, 724, 1681, 1681, 1681, 1681, 1681, 1681, 1681, 612,
	599, 1681, 1681, 1681, 1681, 1681, 1681, 1681, 1681, 1681,
	1681, 1681, 1031, 1681, 1681, 1681, 1681, 1681, -1000, 1681,
	2688, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 695, 561,
	260, 3123, 341, -1000, 346, 1329, 3121, 367, 2994, 1297,
	-1000, -1000, -1000, -1000, 26207, 26207, 21295, 26207, -1000, 209,
	9, 46, -1000, -1000, 1347, 5850, 1347, 5850, -1000, -1000,
	805, -1000, -1000, 1068, -1000, 45241, 45241, -1000, -1000, 2687,
	1783, -1000, -1000, 15133, -1000, 5850, 5850, -1000, -1000, 27435,
	45241, -1000, -30, -1000, 1, 3062, -1000, -1000, -1000, 1324,
	-1000, -1000, 1341, 1068, 2935, 45241, 1324, 1324, 1324, -1000,
	-1000, 16985, 45241, 45241, -1000, -1000, -1000, -1000, 3186, 8944,
	-1000, 34189, -1000, -1000, 39715, -1000, 39101, 3186, 1821, -1000,
	13895, 1956, 191, -1000, 258, -312, 189, 1852, 187, 2216,
	-1000, -1000, 2495, 2482, 1578, -1000, 1577, 2481, 1564, 1560,
	2093, -1000, 50, -1000, 3057, 1100, -1000, 2680, -1000, 1553,
	2991, -1000, 1323, -1000, 1771, 1550, -1000, -1000, -1000, 10801,
	38487, 10801, 1100, 1549, 2990, 1323, 3062, 2380, -1000, 1290,
	-1000, 2090, 1438, 177, -1000, -1000, -1000, 45241, 754, 2377,
	1546, 37873, 1155, -1000, 803, 1420, 1417, -1000, 36031, 298,
	36031, -1000, 36031, -1000, -1000, 379, -1000, 45241, 3059, -1000,
	-1000, -1000, 2350, 1769, -334, 45241, -1000, -1000, -1000, -1000,
	-1000, 1543, -1000, 836, 836, 4242, 3974, -1000, 12652, -1000,
	12652, 2885, -1000, 1814, -1000, 10801, 1890, 4155, 10801, 4155,
	889, 24979, 45241, -1000, -1000, 10801, 10801, -1000, 2875, -1000,
	-1000, -1000, -1000, 10801, 10801, 2034, -1000, 45241, -1000, -1000,
	-1000, -1000, 24979, -1000, 12652, -1000, -1000, -1000, -1000, 10801,
	1260, 1260, 2860, 1513, 144, 144, 144, 2843, 2819, 2812,
	1499, 144, 2808, 2770, 2761, 2757, 2751, 2655, 2606, 2599,
	2580, 2484, -1000, 2677, -1000, -1000, 1908, 11418, 8327, -1000,
	-1000, 283, 1266, 2073, 2371, 134, -1000, 1768, -1000, 45241,
	1058, -1000, 45241, 3198, -1000, -1000, -1000, 946, 398, -1000,
	1966, 152, 284, 2479, 1196, -1000, -1000, 45241, -1000, -1000,
	-1000, 16985, 2661, 2675, 2661, 149, 1681, 608, 36031, 616,
	-1000, 45241, 45241, 2025, 1766, 2934, 799, 3051, 45241, 2669,
	426, 2668, 2666, 3095, 457, 4815, 45241, 1264, -1000, 1412,
	3662, -1000, 45241, -1000, 2183, -1000, 1667, -1000, -1000, 3186,
	-1000, -1000, 10801, 10801, 3186, 1667, 1667, -1000, 1796, -1000,
	45241, -1000, -1000, 457, 4815, 3093, 4502, 545, 2268, -1000,
	45241, -1000, -1000, -1000, 857, -1000, 957, 753, 45241, 1889,
	957, 1887, 2665, -1000, -1000, 45241, 45241, 45241, 45241, -1000,
	-1000, 45241, -1000, 45241, 45241, 45241, 45241, 45241, 37259, -1000,
	45241, 45241, -1000, 45241, 1886, 45241, 1884, 3072, -1000, 1681,
	1681, 902, -1000, -1000, 588, -1000, 37259, 2061, 2060, 2058,
	2051, 2370, 2369, 2368, 1681, 1681, 2050, 2365, 36645, 2363,
	1161, 2045, 2033, 2030, 2072, 2358, 896, -1000, 2357, 2063,
	2031, 2003, 45241, 2664, 2300, -1000, -1000, 1966, 149, 1681,
	339, 45241, 1761, 1758, 608, 468, -43, 22523, 45241, 34189,
	34189, 34189, 34189, -1000, 2974, 2969, 2960, -1000, 2967, 2958,
	2968, 45241, 34189, 2661, -1000, 36645, -1000, -1000, -1000, 1488,
	1498, 3015, 933, 10801, -1000, -1000, -15, -12, -1000, -1000,
	-1000, 36031, 2356, 541, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 3138, 45241, 45241, 751, 2478, 1172, -1000, -1000, -1000,
	4815, 2653, 2653, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2653, 2653, 2659, -1000, -1000, 2652, 2652, 2652,
	2584, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2657, 2657, 2658, 2658, 2657, -1000, -1000, 3184, -1000,
	1170, -1000, -1000, 1400, -1000, 3184, 1842, -318, 13895, 1808,
	1767, -1000, 10801, 13895, 10801, -259, 324, -261, -1000, -1000,
	-1000, 2354, -1000, -1000, -1000, 2027, -1000, 2013, -1000, 156,
	174, 1883, -230, 8327, 432, 45241, -230, 45241, 8327, -1000,
	45241, 168, -346, -350, 161, 386, -230, 3138, 50, 10801,
	3017, -1000, -1000, 45241, 2010, -1000, -1000, -1000, 3192, 36031,
	2183, 1599, 35417, -1000, 306, -1000, 237, 551, 2353, -1000,
	826, 131, 2352, 2350, -1000, -1000, -1000, -1000, 12652, 1586,
	-1000, -1000, -1000, 2216, 10801, 2477, -1000, 965, 965, 2022,
	2471, 2470, -1000, 2653, 2653, -1000, 2584, 2652, 2584, 965,
	965, 2469, -1000, 2006, 2463, -1000, 2459, 2379, 10801, -1000,
	2466, 3907, 1209, -75, -193, 144, 144, -1000, -1000, -1000,
	-1000, 144, 144, 144, 144, -1000, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 721, -102, -287, -103,
	-288, -1000, 2464, 1169, -1000, -1000, -1000, -1000, -1000, 4400,
	1167, 483, 483, 2350, 2346, 798, 988, 45241, 2339, -297,
	-1000, -1000, -1000, 45241, 2338, -1000, 559, 45241, 45241, 2336,
	2333, 1094, 4815, 2462, 3091, 16371, 3090, 2151, -1000, -1000,
	-1000, 26821, 554, -1000, -1000, -1000, 680, 329, 2008, 540,
	-1000, 45241, 367, 367, 3008, 1757, 2321, 45241, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 3051, -1000, 869, 416, 32961,
	14519, -1000, 373, 45241, -1000, 16371, 16371, 373, 438, 1730,
	-1000, 718, 1153, 141, 34189, 45241, -1000, 33575, 2460, -1000,
	1068, 3186, -1000, 2216, 2216, -336, 3186, 3186, 1667, -1000,
	438, -1000, 373, -1000, 1399, 18213, 516, 489, 478, -1000,
	632, -1000, -1000, 717, 3033, 4815, -1000, 45241, -1000, 45241,
	-1000, 45241, 45241, 753, 10801, 3033, 45241, 784, -1000, -1000,
	1071, 430, 397, 749, 749, 1162, -1000, 3069, -1000, -1000,
	1159, -1000, -1000, -1000, -1000, 45241, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 24979, 24979, 3120, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2319,
	2318, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	45241, 1497, -1000, 1732, 2317, 2151, 26821, 1728, 1669, 2315,
	2314, 554, 2025, 1726, 2148, 45241, -1000, 1101, 45241, 45241,
	-1000, 1375, -1000, 1710, 2914, 2932, 2914, -1000, -1000, -1000,
	-1000, -1000, 2959, -1000, 2670, -1000, -1000, 1375, -1000, -1000,
	-1000, -1000, -1000, 933, -1000, 3137, 957, 957, 957, 2457,
	-1000, -1000, -1000, 1155, 2456, -1000, -1000, -1000, 3216, -1000,
	-1000, -1000, -1000, -1000, -1000, 16985, 3050, 3182, 3175, 34803,
	3182, -1000, -318, 1780, -1000, 1867, 179, 1765, 45241, -1000,
	-1000, -1000, 2454, 2453, -242, 178, 3174, 3172, 980, -1000,
	2450, 1143, -230, -1000, -1000, 1100, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -230, -1000, 1100, -1000, 156, -1000, -1000,
	3028, -1000, -1000, 2183, -1000, 233, -1000, -1000, -1000, -1000,
	-1000, -1000, 208, -1000, 45241, -1000, 1136, 130, -1000, 2216,
	-1000, -1000, -1000, -1000, -1000, 4155, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 10801, -1000, -1000,
	-1000, 2337, -1000, -1000, 10801, 2448, 2313, 2447, 2311, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 3222, -1000, 3171, 1462, 2445,
	2444, 1457, 2441, 2439, -1000, 10801, 2436, 4400, 909, 2310,
	909, -1000, -1000, 364, 45241, 3189, -1000, 45241, -1000, -1000,
	1966, 549, 628, -1000, -1000, -1000, -1000, 807, 373, 2428,
	1103, -1000, -1000, -1000, -1000, 373, -1000, 2309, 220, -1000,
	-1000, -1000, -1000, 2305, 2302, 2001, -1000, -1000, 1988, 1163,
	250, -1000, -1000, -1000, -1000, -1000, -1000, 2148, 2148, 2140,
	1708, -344, -1000, 2651, -1000, 1681, 1681, 1681, 45241, 1447,
	-1000, 1681, 1681, 2426, -1000, -1000, 2425, 2423, -152, 696,
	1721, 1709, -1000, 1999, 26207, 34189, 33575, 1319, -1000, 1396,
	-1000, -1000, -1000, -1000, -1000, -1000, 3186, 696, -1000, 496,
	1998, 12652, 2644, 12652, 2641, 531, 2639, 1439, -1000, 45241,
	-1000, -1000, 45241, 3794, 2638, -1000, 2632, 2920, 482, 2631,
	2624, 45241, 2306, -1000, 3033, 45241, 761, 3041, -1000, -1000,
	-1000, 385, -1000, -1000, 542, -1000, 45241, -1000, 45241, -1000,
	1568, -1000, 24979, -1000, -1000, 1427, -1000, 2300, 2299, -1000,
	-1000, 220, 2288, 5850, -1000, -1000, -1000, 3008, 2280, -1000,
	2279, -1000, 45241, 1101, 1101, 3222, 45241, 8327, -1000, -1000,
	10801, 2623, -1000, 10801, -1000, -1000, -1000, -1000, -1000, 2621,
	3034, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1741, -1000,
	10801, 10801, -1000, -1000, 744, 13895, -264, 322, -1000, -1000,
	-1000, -244, 2277, -1000, -1000, 3170, 2276, 2173, 45241, -1000,
	-1000, 1100, 1100, -242, -1000, -1000, 1068, -1000, -1000, 1020,
	614, -1000, 2419, 2273, -1000, 2262, 144, -1000, 144, -1000,
	273, 10801, -1000, 2267, -1000, -1000, -1000, 2266, -1000, -1000,
	2248, -1000, 2418, -1000, 2263, -1000, -1000, 45241, 776, 985,
	2261, 2258, 1966, 1966, 45241, 4815, -156, -152, 16371, -156,
	-1000, -1000, 374, -1000, -1000, 354, -1000, -1000, 1987, 607,
	-1000, -1000, -1000, -1000, 1707, 1911, 2208, 31119, 24979, 25593,
	2256, -1000, -1000, 32961, 1741, 1741, 4803, 262, 48544, -1000,
	2620, 1047, 1698, -1000, 1996, -1000, 1995, -1000, 3186, 1319,
	139, -1000, -1000, 1597, -1000, 1047, 2268, 3169, -1000, 3856,
	45241, 3587, 45241, 2619, 1696, 12652, -1000, 717, 2989, -1000,
	-1000, 3794, -1000, -1000, 1901, 12652, -1000, -1000, 2255, 25593,
	923, 1694, 1693, 922, 2617, -1000, 567, 3212, -1000, -1000,
	-1000, 895, 2616, -1000, 1882, 1879, -1000, 45241, -1000, 31119,
	31119, 832, 832, 31119, 31119, 2605, 749, -1000, -1000, 12652,
	-1000, -1000, 1681, -1000, -1000, -1000, 1681, 1547, -1000, -1000,
	-1000, -1000, -1000, -1000, 2140, -1000, -1000, -1000, 3146, -1000,
	-1000, 2216, 45241, 2216, 32347, -1000, 3168, 3167, -1000, 2216,
	1064, -1000, -318, 45241, 45241, -246, 1994, -1000, 2254, 175,
	-1000, -1000, 1065, -244, -248, 116, 24979, 1692, -1000, -1000,
	-1000, -1000, -1000, 2416, -1000, 655, -1000, -1000, -1000, 1064,
	2415, 2413, -1000, -1000, -1000, -1000, 361, 45241, -1000, -1000,
	2252, 2250, 544, -135, -1000, -1000, 395, -1000, -1000, -1000,
	569, 2166, -1000, -1000, 352, -1000, -1000, 2246, -1000, -1000,
	119, -1000, 1689, 1390, -1000, 2584, 10801, -1000, -1000, -1000,
	-1000, -1000, -1000, 710, -1000, 373, 48506, -1000, 1039, -1000,
	1020, 710, 29891, 635, 293, -1000, 1990, -1000, -1000, 3222,
	-1000, 597, -1000, 520, -1000, 1379, -1000, 1373, 31733, 1981,
	1777, -1000, 48373, 817, -1000, -1000, 4242, -1000, -1000, -1000,
	-1000, -1000, -1000, 2242, 2231, -1000, -1000, -1000, -1000, -1000,
	1978, 2583, 54, 3119, 2222, -1000, -1000, 2577, 1372, 1364,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1361,
	1357, 31119, -1000, -1000, 4242, 1967, 24979, 1681, -1000, -1000,
	1346, 1304, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2576,
	-1000, -1000, 3166, -246, -251, 2221, 153, 165, -1000, 2209,
	-1000, -1000, 650, -236, 140, 122, 113, -1000, -1000, -1000,
	10801, -1000, -1000, 45241, 765, -1000, -1000, 1966, 45241, 553,
	-1000, -1000, -1000, -1000, 207, -1000, -1000, -1000, -1000, -1000,
	2208, 2203, -1000, 31119, 3069, 2124, 485, 3164, -1000, 48544,
	-1000, 1681, -1000, 485, 1302, -1000, 1681, 1681, -1000, 442,
	-1000, 1691, -1000, 1964, -1000, 3146, -1000, 431, -1000, 490,
	-1000, -1000, -1000, 1285, -1000, -1000, -1000, 48373, 500, -1000,
	678, 2572, -1000, -1000, 2412, 10801, 2571, 1681, 2382, -131,
	31119, 2919, 2821, 2810, 2601, 1283, -1000, -1000, 24979, -1000,
	-1000, 30505, 45241, 2173, -1000, -1000, 2201, -1000, 758, 169,
	165, -1000, 3163, 173, 3159, 3155, 1062, 1853, -1000, 138,
	135, 132, -1000, -1000, -1000, -1000, -1000, 359, 2200, 557,
	-1000, 303, -1000, -1000, -1000, 290, -1000, -1000, 3069, -1000,
	3153, 545, -1000, 24979, -1000, -1000, 29891, 1741, 1741, -1000,
	-1000, 1963, -1000, -1000, -1000, -1000, 1949, -1000, -1000, -1000,
	1278, -1000, 45241, 914, 7710, -1000, 2041, -1000, 45241, -1000,
	2929, -1000, 275, 1261, 290, 832, 290, 832, 290, 832,
	290, 832, 295, -1000, -1000, -1000, 1255, -1000, -1000, -1000,
	2385, 1944, 178, 166, 3152, -1000, 2173, 3148, 2173, 2173,
	-1000, 147, 650, -1000, -1000, -1000, 45241, -1000, 2198, -1000,
	-1000, -1000, -1000, 1681, 1681, 2196, 2190, 409, -1000, -1000,
	-1000, 29277, 516, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	500, 48544, -1000, 7710, 1230, -1000, 2216, -1000, 749, -1000,
	-1000, 2927, 2815, 3197, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 45241, 3118, 24365, 158, -1000, -1000,
	-1000, 2181, -1000, 2173, -1000, -1000, 1655, -1000, -1000, -282,
	1925, 1919, -1000, -1000, 45241, -1000, 45241, 496, -1000, 48544,
	1184, -1000, 7710, -1000, -1000, 3199, -1000, 3209, 853, 853,
	290, 290, 290, 290, -1000, -1000, 45241, -1000, 1158, -1000,
	-1000, -1000, 1395, -1000, -1000, -1000, -1000, 2158, -1000, -1000,
	2156, -1000, -1000, -1000, 1152, 2268, -1000, -1000, -1000, -1000,
	-1000, 1941, 571, -1000, 1052, -1000, 1604, -1000, 28663, 45241,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 45241, 7093, -1000,
	1392, -1000, -1000, 2216, 45241, -1000,
}

var yyPgo = [...]int{
	0, 179, 3234, 243, 175, 3867, 109, 250, 238, 231,
	249, 3866, 3865, 3864, 3863, 3049, 3048, 3862, 3857, 3856,
	3855, 3854, 3840, 3839, 3836, 3834, 3833, 3831, 3830, 3824,
	3821, 3820, 3819, 3818, 3814, 3813, 3812, 3811, 3810, 3804,
	3803, 3802, 3801, 3799, 3794, 3791, 3788, 248, 3786, 3785,
	3784, 3782, 3781, 3779, 3778, 3777, 3776, 3775, 3774, 3773,
	3772, 3771, 3770, 3768, 3766, 3763, 3761, 3760, 3755, 3754,
	3753, 3743, 3741, 3740, 3739, 3737, 3721, 3718, 3717, 246,
	3716, 3714, 212, 3713, 3043, 3708, 3707, 3706, 3705, 3702,
	3701, 3699, 255, 3698, 3697, 3696, 3695, 3694, 3692, 3688,
	3686, 3685, 3682, 3681, 240, 3674, 3673, 3672, 3670, 241,
	3669, 225, 3667, 170, 174, 3666, 3665, 3664, 3663, 3662,
	3661, 3660, 237, 201, 70, 3658, 50, 3657, 3655, 217,
	3654, 153, 3646, 148, 3645, 3644, 3641, 3640, 3638, 3637,
	3636, 3635, 3634, 3633, 3632, 3630, 3625, 3624, 3623, 3620,
	3619, 3617, 3616, 3611, 3609, 3608, 3607, 94, 3606, 252,
	3604, 76, 3602, 181, 134, 3601, 89, 139, 258, 1933,
	259, 245, 189, 173, 101, 3600, 329, 3599, 177, 228,
	156, 36, 3597, 136, 3595, 264, 44, 41, 251, 152,
	53, 162, 130, 3594, 213, 112, 111, 3585, 3582, 145,
	3581, 234, 184, 3580, 103, 3578, 3577, 3576, 3574, 3573,
	193, 185, 3572, 3571, 137, 3570, 3568, 72, 129, 3567,
	78, 125, 167, 122, 3566, 2200, 128, 118, 123, 100,
	3565, 86, 3563, 3562, 3560, 3558, 182, 3557, 3555, 138,
	67, 3554, 3553, 3552, 63, 3551, 74, 3550, 85, 3549,
	60, 3548, 3547, 3546, 3542, 3541, 3540, 3539, 3537, 3536,
	3535, 3534, 3532, 46, 3530, 3526, 7, 13, 16, 3525,
	27, 3524, 168, 3523, 3520, 3519, 3515, 3513, 96, 92,
	3512, 91, 164, 3505, 8, 25, 73, 3502, 3501, 218,
	186, 102, 147, 3500, 278, 3499, 3498, 3496, 161, 3493,
	470, 3490, 3488, 3487, 3486, 3485, 3484, 126, 3483, 1,
	216, 39, 3478, 133, 141, 3477, 34, 47, 113, 192,
	132, 98, 3474, 3473, 3472, 261, 191, 97, 83, 0,
	3469, 223, 155, 3468, 3464, 3462, 254, 3461, 230, 194,
	165, 332, 260, 247, 3460, 3459, 71, 3457, 160, 31,
	52, 140, 188, 22, 219, 3456, 1024, 9, 180, 3454,
	205, 3453, 200, 18, 299, 146, 3448, 3447, 32, 263,
	3445, 3444, 3443, 131, 3441, 3439, 337, 77, 3433, 3432,
	3431, 3425, 37, 3424, 38, 17, 3422, 105, 3421, 257,
	3420, 239, 135, 187, 172, 157, 227, 229, 80, 79,
	3417, 1803, 150, 107, 14, 3416, 226, 3415, 307, 115,
	3414, 88, 3413, 256, 265, 207, 3412, 183, 10, 48,
	33, 29, 42, 11, 312, 196, 3411, 3409, 21, 49,
	3408, 55, 3407, 20, 3406, 3405, 45, 3404, 57, 5,
	3402, 3401, 15, 19, 3400, 35, 224, 169, 127, 95,
	61, 3399, 3398, 51, 197, 3396, 163, 159, 149, 3395,
	75, 3393, 3392, 3391, 3390, 879, 3388, 253, 3387, 3386,
	3376, 3374, 3371, 3370, 3368, 3367, 211, 3364, 110, 40,
	3362, 3360, 3358, 3356, 81, 144, 3355, 3351, 3350, 3349,
	28, 142, 3346, 12, 3343, 23, 24, 30, 3337, 99,
	3336, 3, 198, 3335, 3334, 4, 3333, 3331, 2, 3329,
	3328, 120, 3321, 93, 26, 166, 108, 3316, 3315, 90,
	210, 143, 3314, 3312, 106, 242, 202, 3310, 62, 233,
	262, 3309, 214, 3308, 3305, 3304, 3300, 3299, 3290, 1109,
	3286, 3284, 236, 68, 87, 3281, 221, 119, 3277, 3276,
	84, 158, 121, 116, 54, 82, 3275, 117, 203, 3272,
	195, 3271, 3267, 3266, 104, 3265, 3263, 3262, 3261, 199,
	3259, 3258, 190, 220, 3256, 3255, 268, 3254, 3252, 3251,
	3250, 3248, 3247, 3246, 3244, 3243, 3241, 232, 235, 3236,
}

//line mysql_sql.y:12263
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) atTimeStampUnion() *tree.AtTimeStamp {
	v, _ := st.union.(*tree.AtTimeStamp)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() tree.GroupBy {
	v, _ := st.union.(tree.GroupBy)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) snapshotObjectUnion() tree.ObjectInfo {
	v, _ := st.union.(tree.ObjectInfo)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) upgrade_targetUnion() *tree.Target {
	v, _ := st.union.(*tree.Target)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 582, 585, 585, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 119, 119, 320, 320,
	321, 321, 149, 561, 561, 151, 151, 151, 151, 151,
	436, 120, 120, 120, 120, 120, 120, 120, 155, 155,
	155, 118, 567, 567, 567, 568, 568, 115, 138, 137,
	140, 140, 139, 139, 136, 136, 132, 135, 135, 134,
	134, 133, 128, 130, 130, 129, 131, 131, 116, 104,
	117, 510, 510, 509, 509, 508, 508, 461, 461, 462,
	462, 309, 309, 309, 507, 507, 507, 506, 506, 505,
	505, 504, 504, 502, 502, 503, 501, 500, 500, 500,
	498, 498, 498, 494, 494, 496, 495, 495, 497, 489,
	489, 492, 492, 490, 490, 490, 490, 493, 488, 488,
	488, 487, 487, 103, 103, 103, 403, 403, 102, 102,
	417, 417, 417, 417, 417, 415, 415, 415, 415, 415,
	415, 414, 414, 413, 413, 418, 418, 416, 416, 416,
	416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
	416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
	416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
	416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
	416, 416, 416, 416, 416, 416, 416, 416, 93, 93,
	93, 93, 93, 98, 98, 98, 573, 573, 572, 572,
	574, 574, 574, 574, 575, 575, 96, 96, 96, 97,
	412, 412, 412, 94, 95, 95, 402, 402, 407, 407,
	406, 406, 406, 406, 406, 406, 406, 406, 406, 406,
	406, 406, 406, 411, 411, 411, 409, 409, 408, 408,
	410, 410, 87, 87, 87, 90, 89, 401, 401, 401,
	401, 401, 401, 401, 401, 401, 88, 88, 88, 88,
	88, 88, 83, 83, 83, 83, 83, 82, 82, 84,
	84, 399, 399, 398, 99, 99, 100, 570, 570, 569,
	571, 571, 571, 571, 101, 107, 107, 107, 107, 107,
	107, 107, 107, 106, 106, 109, 109, 108, 110, 92,
	92, 92, 92, 92, 92, 91, 91, 91, 91, 91,
	91, 91, 91, 91, 91, 91, 91, 91, 535, 535,
	535, 537, 537, 334, 335, 586, 337, 333, 333, 333,
	531, 531, 532, 533, 534, 534, 534, 105, 14, 200,
	200, 435, 435, 11, 11, 11, 11, 11, 11, 11,
	11, 11, 13, 81, 86, 86, 271, 271, 276, 276,
	154, 277, 277, 277, 282, 282, 283, 283, 272, 272,
	272, 272, 272, 272, 272, 272, 272, 272, 272, 272,
	272, 272, 272, 272, 272, 272, 272, 272, 272, 272,
	258, 258, 258, 253, 253, 253, 253, 254, 254, 255,
	255, 256, 256, 256, 256, 257, 257, 326, 326, 278,
	278, 278, 280, 280, 279, 275, 273, 273, 273, 273,
	273, 273, 273, 274, 274, 274, 274, 281, 281, 79,
	85, 85, 85, 85, 549, 549, 80, 560, 560, 465,
	465, 348, 348, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 470,
	471, 344, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 54, 57, 58, 153, 53,
	53, 53, 388, 388, 52, 587, 587, 319, 319, 67,
	66, 56, 68, 69, 70, 71, 72, 73, 51, 65,
	65, 65, 65, 65, 65, 65, 65, 76, 483, 483,
	589, 589, 589, 74, 75, 464, 464, 464, 64, 63,
	62, 61, 60, 60, 50, 50, 49, 49, 55, 144,
	59, 145, 145, 341, 341, 341, 343, 343, 339, 588,
	588, 431, 431, 342, 342, 48, 48, 48, 48, 77,
	340, 340, 318, 338, 338, 338, 12, 12, 10, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 26, 27, 29, 396, 396,
	393, 28, 20, 19, 19, 23, 22, 18, 18, 21,
	24, 25, 25, 9, 9, 9, 9, 15, 15, 16,
	173, 173, 226, 226, 543, 543, 539, 539, 540, 540,
	540, 541, 541, 542, 542, 111, 477, 477, 477, 477,
	477, 477, 8, 8, 195, 195, 476, 476, 476, 476,
	476, 476, 400, 400, 400, 520, 520, 520, 521, 194,
	194, 189, 189, 478, 478, 365, 522, 522, 486, 486,
	485, 485, 484, 484, 192, 192, 193, 193, 176, 176,
	123, 123, 491, 491, 491, 491, 499, 499, 460, 460,
	263, 263, 311, 311, 312, 312, 166, 166, 167, 167,
	167, 167, 167, 167, 576, 576, 577, 578, 579, 579,
	580, 580, 580, 581, 581, 581, 581, 581, 528, 528,
	530, 530, 529, 191, 191, 187, 187, 188, 188, 188,
	186, 186, 185, 184, 184, 183, 181, 181, 181, 182,
	182, 182, 199, 199, 169, 169, 169, 168, 168, 168,
	168, 168, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 170, 170, 536, 536, 536, 466,
	466, 466, 473, 473, 291, 291, 292, 292, 290, 290,
	171, 171, 172, 172, 172, 172, 289, 289, 288, 174,
	174, 180, 179, 179, 175, 175, 175, 175, 299, 299,
	298, 298, 298, 298, 114, 121, 121, 122, 198, 198,
	297, 296, 296, 296, 296, 197, 197, 196, 196, 190,
	190, 178, 178, 178, 178, 295, 177, 293, 566, 566,
	565, 565, 564, 562, 562, 562, 563, 563, 563, 563,
	512, 512, 512, 512, 512, 327, 327, 327, 332, 332,
	330, 330, 330, 330, 330, 336, 7, 7, 7, 7,
	7, 7, 7, 7, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 39, 209, 210,
	40, 211, 211, 212, 212, 213, 213, 214, 215, 216,
	216, 216, 216, 38, 201, 201, 202, 202, 203, 203,
	204, 205, 205, 205, 208, 206, 207, 207, 584, 584,
	583, 37, 37, 30, 158, 158, 159, 159, 159, 161,
	161, 259, 259, 259, 160, 160, 162, 162, 162, 544,
	546, 546, 548, 547, 547, 547, 550, 550, 550, 550,
	550, 551, 551, 551, 551, 552, 552, 31, 141, 141,
	146, 555, 555, 555, 554, 554, 556, 556, 557, 557,
	315, 315, 316, 316, 156, 157, 157, 148, 143, 164,
	164, 164, 164, 164, 165, 165, 142, 147, 150, 152,
	545, 553, 553, 553, 397, 397, 394, 395, 395, 392,
	391, 391, 391, 559, 559, 558, 558, 558, 328, 328,
	32, 387, 387, 389, 390, 390, 390, 381, 381, 381,
	381, 36, 385, 385, 386, 386, 386, 386, 386, 386,
	386, 382, 382, 384, 384, 380, 380, 380, 380, 380,
	380, 380, 35, 163, 163, 379, 379, 376, 376, 374,
	374, 375, 375, 373, 373, 373, 377, 377, 43, 78,
	44, 45, 46, 42, 378, 378, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 125, 124, 124, 124,
	124, 124, 127, 127, 314, 314, 313, 313, 126, 260,
	260, 41, 238, 238, 452, 452, 447, 447, 447, 447,
	447, 468, 468, 468, 448, 448, 448, 449, 449, 449,
	451, 451, 451, 450, 450, 450, 450, 450, 467, 467,
	469, 469, 469, 419, 419, 420, 420, 420, 423, 423,
	439, 439, 440, 440, 438, 438, 445, 445, 444, 444,
	443, 443, 442, 442, 441, 441, 441, 441, 434, 434,
	433, 433, 421, 421, 421, 421, 421, 422, 422, 422,
	432, 432, 437, 437, 287, 287, 286, 286, 246, 246,
	247, 247, 285, 285, 244, 244, 245, 245, 245, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 518, 518, 519, 249, 249, 261,
	261, 261, 261, 261, 261, 248, 248, 250, 250, 227,
	227, 225, 225, 217, 217, 217, 217, 217, 218, 218,
	219, 219, 220, 220, 220, 224, 224, 223, 223, 223,
	223, 221, 221, 222, 222, 222, 222, 222, 222, 405,
	405, 515, 515, 516, 516, 511, 511, 511, 514, 514,
	514, 514, 514, 514, 514, 517, 517, 517, 513, 513,
	228, 308, 308, 308, 329, 329, 329, 329, 331, 307,
	307, 307, 243, 243, 242, 242, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 404, 404,
	345, 345, 346, 346, 270, 269, 269, 269, 269, 269,
	267, 268, 266, 266, 266, 266, 266, 265, 265, 264,
	264, 264, 383, 383, 262, 262, 252, 252, 252, 251,
	251, 251, 446, 352, 352, 352, 352, 352, 352, 352,
	352, 352, 352, 352, 352, 352, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 305, 305, 305, 306, 306, 306, 306, 306,
	306, 306, 306, 355, 355, 361, 361, 527, 527, 526,
	229, 229, 229, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 239, 239, 239, 428, 428, 428, 428, 429,
	429, 429, 429, 430, 430, 430, 426, 426, 427, 427,
	366, 367, 367, 474, 474, 475, 475, 424, 424, 425,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 482, 482, 482, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 538, 538, 538, 523, 523, 523, 524, 524, 524,
	524, 524, 524, 524, 524, 524, 524, 524, 524, 525,
	525, 525, 525, 525, 525, 525, 525, 525, 525, 525,
	525, 525, 525, 525, 525, 525, 303, 303, 303, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 368, 368, 369,
	369, 479, 479, 479, 479, 479, 479, 480, 480, 481,
	481, 481, 481, 472, 472, 472, 472, 472, 472, 472,
	472, 472, 472, 472, 472, 472, 472, 472, 472, 472,
	472, 472, 472, 472, 472, 472, 472, 472, 472, 472,
	472, 472, 353, 300, 300, 300, 370, 362, 362, 363,
	363, 364, 364, 356, 356, 356, 356, 356, 356, 357,
	357, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 351, 351, 351, 351, 351, 351, 351, 351,
	351, 351, 351, 358, 358, 360, 360, 372, 372, 372,
	371, 371, 371, 371, 371, 371, 371, 241, 241, 241,
	241, 350, 350, 350, 349, 349, 349, 349, 349, 349,
	349, 349, 349, 349, 349, 349, 231, 231, 231, 231,
	235, 235, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 236, 236, 236, 236,
	236, 234, 234, 234, 234, 234, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 112, 113, 113, 233, 310, 310,
	453, 453, 456, 456, 454, 454, 455, 457, 457, 457,
	458, 458, 458, 459, 459, 459, 463, 463, 317, 317,
	317, 325, 325, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 8, 8, 0, 2,
	0, 2, 6, 1, 2, 7, 9, 10, 10, 12,
	1, 5, 6, 8, 10, 9, 11, 13, 5, 7,
	9, 4, 0, 1, 1, 0, 1, 5, 2, 2,
	6, 9, 6, 9, 4, 7, 8, 0, 1, 1,
	2, 4, 6, 1, 2, 4, 0, 2, 10, 11,
	2, 0, 2, 1, 3, 3, 3, 0, 2, 0,
	2, 1, 3, 5, 0, 2, 3, 1, 3, 1,
	1, 1, 3, 1, 1, 1, 1, 0, 3, 3,
	0, 3, 3, 0, 1, 3, 0, 1, 3, 0,
	2, 1, 2, 3, 4, 3, 3, 1, 0, 1,
	1, 0, 1, 8, 5, 7, 0, 3, 8, 5,
	1, 3, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 4, 1, 3, 1, 2, 2,
	2, 2, 2, 2, 2, 1, 2, 2, 2, 2,
	1, 1, 2, 2, 1, 1, 1, 1, 1, 2,
	2, 2, 1, 2, 1, 2, 2, 1, 2, 1,
	1, 2, 2, 1, 1, 1, 3, 2, 2, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 4, 4, 1, 3, 3, 1,
	2, 2, 2, 1, 2, 2, 3, 4, 4, 6,
	1, 1, 1, 2, 4, 6, 1, 4, 1, 3,
	3, 4, 4, 4, 4, 3, 3, 2, 4, 4,
	2, 2, 2, 1, 1, 1, 1, 1, 1, 3,
	1, 3, 1, 1, 1, 2, 2, 0, 1, 4,
	2, 4, 1, 5, 3, 2, 1, 2, 2, 4,
	4, 5, 2, 1, 3, 4, 4, 1, 2, 9,
	7, 1, 3, 3, 1, 1, 3, 1, 3, 2,
	1, 2, 1, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 4, 2, 4, 3, 3, 1,
	1, 1, 1, 1, 1, 2, 3, 4, 7, 2,
	3, 3, 4, 5, 3, 4, 4, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 2, 1, 1, 1, 1, 6, 4, 1,
	1, 0, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 10, 7, 4, 4, 1, 3, 1, 6,
	7, 3, 3, 3, 1, 1, 1, 3, 2, 4,
	5, 5, 6, 5, 5, 3, 2, 2, 1, 3,
	4, 3, 7, 5, 8, 2, 2, 1, 3, 2,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 0,
	1, 2, 1, 3, 2, 1, 2, 2, 1, 2,
	3, 2, 2, 3, 6, 3, 3, 1, 1, 7,
	7, 7, 8, 8, 0, 4, 7, 0, 3, 0,
	2, 0, 1, 1, 1, 1, 4, 2, 2, 3,
	3, 4, 5, 3, 4, 4, 2, 2, 2, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 3, 3, 3, 2,
	5, 5, 0, 2, 7, 0, 1, 0, 1, 5,
	5, 3, 3, 2, 4, 4, 4, 4, 4, 1,
	1, 1, 3, 3, 1, 1, 1, 6, 0, 1,
	1, 1, 1, 5, 5, 0, 1, 1, 3, 3,
	3, 4, 7, 7, 5, 4, 7, 8, 3, 3,
	2, 3, 4, 0, 2, 2, 0, 2, 2, 1,
	1, 1, 1, 0, 1, 5, 5, 5, 4, 3,
	1, 3, 1, 1, 3, 5, 2, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 4, 4, 1, 3,
	1, 4, 6, 6, 4, 4, 4, 4, 4, 3,
	6, 3, 5, 1, 1, 2, 2, 11, 8, 9,
	1, 3, 2, 4, 0, 2, 0, 1, 1, 1,
	1, 0, 1, 0, 1, 4, 2, 1, 5, 4,
	4, 2, 5, 5, 1, 3, 2, 1, 5, 4,
	4, 2, 0, 5, 4, 0, 1, 3, 3, 1,
	3, 1, 3, 1, 3, 4, 0, 1, 0, 1,
	1, 3, 1, 1, 0, 4, 1, 3, 2, 1,
	0, 8, 0, 4, 7, 4, 0, 2, 0, 2,
	0, 2, 0, 4, 1, 3, 1, 1, 6, 4,
	5, 7, 4, 5, 0, 1, 3, 8, 0, 6,
	0, 4, 6, 1, 1, 1, 1, 1, 2, 3,
	1, 3, 6, 0, 3, 0, 1, 2, 4, 4,
	0, 1, 3, 1, 3, 3, 0, 1, 1, 0,
	2, 2, 0, 2, 3, 3, 3, 1, 3, 3,
	3, 3, 1, 2, 2, 1, 2, 2, 1, 2,
	2, 1, 2, 2, 7, 7, 1, 1, 1, 0,
	1, 1, 1, 1, 0, 2, 0, 3, 0, 2,
	1, 3, 1, 2, 3, 5, 0, 1, 2, 1,
	3, 1, 1, 1, 4, 4, 4, 3, 2, 2,
	2, 3, 2, 3, 4, 1, 3, 4, 0, 2,
	1, 1, 2, 2, 2, 0, 1, 2, 4, 1,
	3, 1, 3, 2, 3, 1, 4, 3, 0, 1,
	1, 2, 5, 2, 2, 2, 0, 2, 3, 3,
	0, 1, 3, 1, 3, 0, 1, 2, 1, 1,
	0, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 7, 1, 1,
	7, 1, 3, 0, 1, 1, 3, 1, 3, 0,
	1, 1, 1, 14, 1, 3, 0, 1, 1, 3,
	1, 1, 2, 4, 1, 1, 1, 1, 0, 1,
	2, 9, 9, 7, 1, 2, 3, 3, 3, 0,
	4, 1, 1, 1, 1, 1, 0, 1, 1, 1,
	1, 1, 4, 1, 1, 1, 3, 3, 4, 3,
	3, 0, 1, 1, 1, 0, 2, 7, 8, 8,
	8, 0, 3, 3, 0, 3, 0, 3, 0, 5,
	1, 3, 0, 3, 3, 0, 2, 9, 7, 0,
	2, 2, 3, 3, 0, 2, 4, 4, 4, 4,
	1, 0, 2, 2, 1, 3, 2, 1, 3, 2,
	1, 3, 2, 0, 1, 3, 4, 3, 1, 1,
	4, 1, 3, 1, 1, 1, 1, 0, 1, 1,
	1, 11, 0, 2, 3, 3, 2, 2, 3, 1,
	1, 1, 3, 3, 4, 0, 2, 2, 2, 2,
	2, 2, 6, 0, 4, 1, 1, 0, 3, 0,
	1, 1, 2, 4, 4, 4, 0, 1, 8, 2,
	4, 4, 4, 9, 0, 2, 11, 9, 11, 8,
	6, 9, 7, 10, 7, 6, 2, 2, 9, 4,
	5, 3, 0, 4, 1, 3, 0, 3, 6, 0,
	2, 10, 0, 2, 0, 2, 0, 3, 2, 4,
	3, 0, 2, 1, 0, 2, 3, 0, 2, 3,
	0, 2, 1, 0, 3, 2, 4, 3, 0, 1,
	0, 1, 1, 0, 6, 0, 3, 5, 0, 4,
	0, 3, 1, 3, 4, 5, 0, 3, 1, 3,
	2, 3, 1, 2, 0, 4, 6, 5, 0, 2,
	0, 2, 4, 5, 4, 5, 1, 5, 6, 5,
	0, 3, 0, 1, 1, 3, 3, 3, 0, 4,
	1, 3, 3, 3, 0, 1, 1, 3, 2, 3,
	3, 3, 4, 4, 3, 3, 3, 3, 4, 4,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 1, 5, 4, 1, 3, 3, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 2, 4, 0, 5, 5, 5, 5, 0, 1,
	1, 3, 1, 1, 1, 1, 1, 7, 9, 7,
	9, 2, 1, 7, 9, 7, 9, 8, 5, 0,
	1, 0, 1, 1, 1, 1, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	3, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	3, 5, 0, 1, 1, 2, 1, 2, 2, 1,
	1, 2, 2, 2, 3, 3, 2, 2, 1, 5,
	6, 4, 1, 1, 1, 5, 4, 1, 1, 2,
	0, 1, 1, 2, 5, 0, 1, 1, 2, 2,
	3, 3, 1, 1, 2, 2, 2, 0, 1, 2,
	2, 2, 0, 3, 0, 3, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 1, 1, 1, 1, 3,
	5, 2, 2, 2, 2, 4, 1, 1, 2, 5,
	6, 8, 6, 6, 6, 1, 1, 1, 1, 1,
	1, 3, 4, 4, 4, 7, 9, 7, 7, 7,
	9, 7, 7, 0, 2, 0, 1, 1, 2, 4,
	1, 2, 2, 1, 2, 2, 1, 2, 2, 2,
	2, 2, 0, 1, 1, 1, 2, 2, 2, 2,
	2, 2, 2, 1, 1, 1, 2, 5, 0, 1,
	3, 0, 1, 0, 2, 0, 2, 0, 1, 6,
	8, 8, 6, 6, 5, 5, 5, 6, 6, 6,
	6, 5, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 1, 1, 1, 4, 4, 6, 8, 6,
	4, 5, 4, 4, 4, 3, 4, 6, 6, 7,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 8, 4,
	2, 3, 2, 4, 2, 2, 4, 6, 2, 2,
	4, 6, 4, 2, 4, 4, 4, 0, 1, 2,
	3, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 1, 1, 3, 0, 1, 1,
	3, 1, 3, 3, 3, 3, 3, 2, 1, 1,
	1, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	4, 1, 3, 4, 4, 5, 4, 5, 3, 4,
	5, 6, 1, 0, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 1, 1, 2, 3, 1, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 4, 4, 1, 2, 3, 5, 1, 1, 3,
	0, 1, 0, 3, 0, 3, 3, 0, 3, 5,
	0, 3, 5, 0, 1, 1, 0, 1, 1, 2,
	2, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -582, -585, -2, -5, 623, -1, -4, -113, -87,
	-7, -14, -115, -116, -8, -111, -9, -10, -12, -91,
	-106, -108, -110, -109, -47, -11, -105, -82, -83, -93,
	-99, -102, -103, -104, -117, -112, -114, -166, -118, -119,
	-120, -155, 613, -88, -89, -90, -33, -32, -31, -30,
	-141, -146, -149, -151, 546, 619, 449, 14, 498, -15,
	-16, -528, -17, 260, -333, -334, -335, -337, -586, -48,
	-49, -50, -60, -61, -62, -63, -64, -74, -75, -76,
	-51, -52, -53, -56, -54, -67, -66, -68, -69, -70,
	-71, -72, -73, -55, -59, -144, -145, -77, -57, -78,
	-58, -153, -80, -79, -85, -81, -86, -143, -148, -13,
	-154, 235, -84, 76, -94, -95, -96, -97, -98, -100,
	-101, 373, 379, 436, 612, 61, -167, -169, 631, 632,
	635, 160, 161, 163, 164, -34, -35, -36, -37, -38,
	-39, -41, -40, -42, -43, -44, -45, -46, 231, 16,
	541, -18, -21, -19, -22, -20, -28, -29, -27, -24,
	-26, -142, -25, -147, -23, -150, -152, 255, 254, 38,
	321, 322, 323, 377, 253, 232, 15, 31, 42, 352,
	-168, 83, 533, 534, 536, 233, -170, 13, 637, -6,
	-3, -2, -128, -132, -136, -139, -140, -137, -138, -4,
	-113, 118, 245, 614, -329, 369, 615, 617, 616, 86,
	94, -322, -324, 449, 260, 373, 379, 612, 632, 635,
	548, 549, 550, 551, 552, 553, 554, 555, 557, 558,
	559, 560, 561, 562, 563, 573, 574, 564, 565, 566,
	567, 568, 569, 570, 571, 575, 576, 577, 578, 579,
	580, 581, 582, 583, 584, 585, 586, 587, 588, 501,
	598, 599, 600, 601, 529, 556, 592, 593, 594, 595,
	350, 351, 538, 272, 296, 404, 302, 309, 160, 179,
	173, 201, 193, 534, 168, 276, 314, 277, 93, 163,
	484, 108, 461, 433, 166, 291, 293, 295, 530, 531,
	363, 298, 528, 297, 299, 301, 532, 278, 353, 189,
	184, 290, 274, 182, 279, 40, 280, 206, 281, 282,
	543, 457, 349, 463, 306, 52, 431, 183, 458, 294,
	460, 210, 214, 475, 476, 177, 178, 465, 478, 205,
	208, 209, 252, 346, 347, 43, 540, 264, 479, 212,
	204, 200, 487, 310, 308, 203, 176, 199, 275, 65,
	216, 215, 217, 427, 428, 429, 430, 283, 284, 367,
	474, 196, 185, 354, 169, 23, 482, 259, 462, 380,
	285, 303, 311, 211, 213, 266, 271, 542, 533, 435,
	270, 307, 480, 181, 263, 292, 258, 483, 170, 536,
	382, 286, 164, 300, 477, 486, 64, 395, 175, 167,
	630, 249, 161, 268, 273, 287, 288, 289, 527, 313,
	312, 304, 535, 197, 265, 202, 187, 174, 198, 162,
	267, 485, 396, 610, 352, 414, 195, 192, 269, 242,
	481, 464, 165, 418, 397, 190, 315, 605, 606, 607,
	368, 345, 316, 317, 188, 256, 455, 456, 320, 424,
	336, 398, 434, 405, 399, 223, 224, 324, 467, 469,
	207, 608, 325, 326, 327, 459, 328, 329, 330, 331,
	372, 56, 58, 95, 98, 97, 633, 634, 63, 29,
	358, 361, 393, 400, 338, 611, 539, 335, 339, 340,
	362, 25, 416, 384, 420, 419, 48, 49, 50, 53,
	54, 55, 57, 59, 60, 51, 526, 377, 390, 488,
	45, 47, 387, 27, 364, 415, 437, 334, 417, 448,
	46, 446, 447, 468, 26, 366, 365, 62, 44, 423,
	425, 426, 318, 332, 375, 620, 489, 370, 386, 389,
	371, 337, 360, 391, 67, 66, 383, 621, 378, 376,
	333, 544, 545, 341, 572, 355, 432, 523, 522, 521,
	520, 519, 518, 517, 516, 321, 322, 323, 401, 402,
	403, 413, 406, 407, 408, 409, 410, 411, 412, 451,
	452, 622, 470, 472, 473, 471, 237, 636, 356, 357,
	240, 624, 625, 96, 626, 628, 627, 28, 629, -410,
	-408, -329, 534, 612, 379, 533, 536, 373, 352, 632,
	635, 377, 260, 321, 322, 323, 449, 350, -211, -329,
	636, -176, 244, 39, -225, -329, -176, -84, -16, -15,
	-168, -169, -225, 239, -338, 24, 431, -92, 432, 235,
	83, 77, -329, -9, -104, -8, -111, -82, -166, 436,
	-336, -329, 321, 321, -336, 239, -331, 270, 412, -329,
	-465, 245, -414, -387, 271, -413, -389, -416, -390, 32,
	231, 233, 232, 546, 267, 16, 377, 241, 14, 13,
	378, 253, 25, 26, 28, 15, 379, 381, 29, 382,
	385, 386, 387, 42, 390, 391, 260, 86, 94, 89,
	278, -210, -329, -364, -356, 115, -359, -351, -352, -354,
	-309, -502, -349, 83, 142, 143, 150, 116, 638, -353,
	-446, 36, 118, 552, 556, 592, 499, -301, -302, -303,
	-304, -305, -306, -329, -503, -501, 89, 99, 101, 105,
	106, 104, 102, 154, 186, 103, 90, 155, -169, 86,
	-523, 562, -323, 585, 598, 599, 600, 601, 584, 61,
	-472, -481, 238, -479, 153, 191, 256, 187, 14, 148,
	424, 188, 593, 594, 595, 559, 581, 501, 563, 573,
	588, 554, 555, 557, 549, 550, 551, 553, 564, 566,
	580, -482, 576, 586, 587, 572, 596, 597, 589, 590,
	591, 628, 88, 87, 579, 578, 565, 560, 561, 567,
	548, 558, 568, 569, 577, 582, 583, 361, 108, 362,
	363, 491, 353, 364, 245, 431, 70, 365, 366, 367,
	368, 369, 498, 370, 71, 371, 360, 260, 414, 372,
	190, 207, 503, 502, 504, 495, 492, 490, 493, 494,
	496, 497, 570, 571, 575, -121, -122, 603, -576, -294,
	-577, 6, 7, 8, 9, -578, 155, -567, 433, 542,
	89, 314, 350, 17, 491, 165, 162, -401, 165, 114,
	170, 169, -401, 167, 630, 324, 266, -378, -158, 350,
	414, 328, 95, 270, -381, -379, 530, -467, 318, 314,
	290, 240, 111, -159, 250, 249, 109, 491, 238, 388,
	309, 56, 58, -539, -540, 228, 229, 230, -530, 524,
	-529, -329, 363, 97, 98, 630, 27, 239, 374, 266,
	469, 467, 468, 470, 471, 472, 473, -65, -483, -464,
	464, 463, -342, 456, 462, 454, 466, 457, 351, 330,
	546, 329, 231, 624, 531, 525, -317, 398, 434, 488,
	489, 375, 435, 475, 477, 458, 108, 194, 191, 240,
	242, 239, 630, 350, 491, 414, 95, 328, -539, 162,
	475, 477, 270, 412, 41, -407, 424, -406, -408, 476,
	487, 87, 88, 474, -317, 108, 455, 455, -576, -294,
	-167, -169, -114, -528, 532, 532, 532, 240, 350, 414,
	270, 241, 239, 527, 530, 242, 491, 238, 321, 374,
	266, 328, 95, 167, 630, -466, -536, 32, -473, 225,
	226, 227, 33, 34, -1, 122, 637, -356, -356, -6,
	640, -6, -356, -329, -329, 157, -231, -235, -232, -234,
	-233, -237, -236, 191, 192, 153, 195, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 208, 209, 206, 31,
	207, 256, 187, 188, 189, 190, 210, 173, 193, 539,
	218, 174, 219, 175, 220, 176, 221, 177, 178, 222,
	179, 182, 183, 184, 185, 181, 156, -200, 89, 32,
	83, 156, 89, -192, 262, -176, -225, -217, 156, 638,
	-192, -576, -185, -186, 11, -225, -307, -329, 433, 125,
	-92, 77, -92, 432, 77, -531, -532, -533, -535, 235,
	432, 431, -109, 156, 278, 17, -336, -336, 81, -225,
	-389, 270, -414, -387, 36, 80, 157, 243, 157, 80,
	83, 375, 350, 414, 376, 491, 239, 388, 242, 270,
	389, 350, 414, 239, 242, 491, 270, 350, 239, 242,
	414, 270, 389, 350, 454, 455, 242, 27, 380, 383,
	384, 455, -487, 487, 157, 114, 111, 112, 113, -356,
	132, -371, 125, 126, 127, 128, 129, 130, 131, 139,
	138, 149, 142, 143, 144, 145, 146, 147, 148, 140,
	141, 135, 115, 133, 137, 134, 117, 152, -169, -356,
	-364, 61, -354, -354, -354, -354, -329, -446, -361, -356,
	83, 83, 83, 83, 156, 102, 89, -356, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	-480, 83, 83, -368, -369, 83, 83, -349, -307, 83,
	89, 89, 83, 83, 83, 89, 83, 83, 83, -369,
	-369, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, -186, 157, -185, 83,
	-185, -186, -170, -169, 32, 33, 32, 33, 32, 33,
	32, 33, -579, 621, 83, 99, 633, 223, 17, -329,
	630, -329, 480, 541, 168, 169, 170, -376, 245, -376,
	-209, -329, -211, 374, 242, 527, 242, -159, -376, -376,
	-376, -376, -376, 241, -376, 24, 239, 239, 239, 239,
	-376, 498, 125, 125, 59, -541, 172, 157, -530, -191,
	83, -341, 133, 137, -341, -290, 18, -290, 24, 268,
	268, 268, -341, 308, -587, -588, 17, 135, -339, -588,
	-339, -339, -341, -589, 241, 465, 43, 269, 268, -187,
	-188, 22, -187, 459, 455, -431, 460, 461, -343, -588,
	-342, -341, -341, -342, -341, -341, -341, 32, 239, 242,
	491, 328, 625, -587, -587, 31, 31, -465, -465, -225,
	-465, -465, 525, -318, -329, -465, -465, -465, -542, 244,
	-573, -572, 478, -575, 480, 162, -408, 162, -408, -389,
	270, 270, 157, 125, 24, -409, 125, 136, -408, -408,
	-409, -409, -248, 41, -328, 153, -329, 89, -248, 41,
	-570, -569, -225, -186, -170, -169, 84, 84, 84, 535,
	535, 535, -465, -465, -465, -465, -465, -467, -465, -465,
	-465, -465, -465, -336, -201, -329, -211, 245, -465, -465,
	-465, -465, -171, -172, 144, -356, -329, -171, -3, -130,
	-129, 119, 120, 122, 615, 369, 614, 618, 612, -408,
	41, -459, 396, 395, -453, -455, 83, -454, 83, -454,
	-454, -454, -454, -454, 83, 83, -456, 83, -456, -456,
	-453, -457, 83, -457, -458, 83, -458, -457, -329, -435,
	541, -362, -364, -329, 39, -476, 61, -166, 83, 31,
	83, -192, -329, 188, 167, 629, -477, 61, -166, 83,
	31, -186, -123, 39, -188, 21, 156, 99, 89, -109,
	-92, 77, -109, 84, 157, -534, 105, 106, -537, 205,
	197, -329, -107, 89, -7, -8, -9, -10, -47, -82,
	-79, -166, 232, -504, -502, 83, 32, 423, 80, 17,
	-415, 239, 491, 374, 266, 242, 350, -413, -396, -393,
	-391, -328, -389, -392, -391, -418, -307, 455, -124, 438,
	437, 320, -356, -356, -356, -356, -356, 104, 115, 345,
	105, 106, -351, -372, 32, 316, 317, -352, -352, -352,
	-352, -352, -352, -352, -352, -352, -352, -352, -352, -360,
	-370, -446, 83, 135, 133, 137, 134, 117, -354, -354,
	-352, -352, -250, -328, 153, 84, 157, -356, -527, -526,
	119, -356, -356, -356, -356, -329, -524, -525, 505, 506,
	507, 508, 509, 510, 511, 512, 513, 514, 515, 365,
	360, 366, 364, 353, 372, 367, 368, 190, 522, 523,
	516, 517, 518, 519, 520, 521, -362, -362, -356, -524,
	-362, -300, 33, 32, -364, -364, -364, 84, -356, -538,
	343, 342, 344, -189, -329, -362, 84, 84, 84, 99,
	-364, -364, -362, -352, -362, -362, -362, -362, -525, -300,
	-300, -300, -300, 144, -364, -364, -300, -300, -300, -300,
	144, -300, -300, -300, -300, -300, -300, -300, -300, -300,
	-300, 84, 84, 84, 144, -364, -187, -122, -485, -484,
	-356, 41, -123, -188, -580, 622, 83, -307, -568, 89,
	89, 638, 167, 17, 491, -329, 17, 239, 481, 482,
	166, 169, 168, -329, 115, -329, 35, 83, -201, -376,
	-376, -376, -546, -329, 90, -397, -394, -391, -329, -329,
	-387, -329, -318, -225, -376, -376, -376, -376, -225, -259,
	53, 54, 55, -391, -160, 56, 57, -542, -529, 35,
	-190, -329, -290, -354, -354, -356, -391, 270, -587, -341,
	-341, -319, -318, -343, -338, -343, -343, -290, -339, -341,
	-341, -356, -343, -339, -290, -329, 455, -290, -290, -431,
	-341, -340, -329, -340, -376, -318, -319, -319, -225, -225,
	-271, -276, -272, -277, 262, 236, 358, 359, 234, 232,
	11, 233, -284, 309, -377, 499, -254, -255, 77, 42,
	-257, 260, 400, 393, 272, 276, 93, 277, 433, 278,
	241, 280, 281, 282, 297, 299, 252, 283, 284, 285,
	424, 286, 161, 298, 287, 288, 289, 376, -249, 6,
	331, 41, 51, 52, 447, 446, 544, 541, 273, -329,
	-546, -544, 31, -329, 31, -397, -329, -329, -179, -174,
	-178, -175, -180, -293, -295, -177, 83, -225, -169, -329,
	157, 479, 481, 482, -573, -409, -573, -409, 32, 423,
	-412, 423, 32, -387, -406, 475, 477, -402, 89, 424,
	-392, -411, 80, 153, -484, -409, -409, -411, -411, 152,
	157, -571, 480, 481, 228, -187, 99, 99, 99, -227,
	-225, -546, -396, -387, -329, -465, -227, -227, -227, -331,
	-331, 83, 156, 36, -329, -329, -329, -329, -289, 157,
	-288, 17, -330, -329, 35, 89, 156, -289, -131, -129,
	121, -356, -6, 614, -356, -6, -6, -356, -6, -356,
	-463, 397, 99, 99, -310, 89, -310, 99, 99, 99,
	547, 84, 89, -400, 80, -478, -365, -522, 603, -194,
	84, -189, -520, -521, -189, -193, -329, -476, -217, 125,
	125, 125, -478, -194, 84, -520, -187, 604, -123, -184,
	-183, -356, -329, 24, -109, -92, -532, 156, 350, 157,
	-190, -415, -395, -392, -417, 144, -329, -403, 157, 541,
	641, 87, 243, -559, -558, 415, 84, 157, -488, 244,
	498, 89, 638, 431, 223, 224, 104, 345, 105, 106,
	-446, -364, -360, -354, -354, -352, -352, -358, 257, -358,
	114, -356, 639, -355, -526, 121, -356, 35, 157, 35,
	157, 81, 156, 84, 84, 17, 17, 84, -356, 84,
	84, 84, 84, 17, 17, -356, 84, 156, 84, 84,
	84, 84, 81, 84, 157, 84, 84, 84, 84, 157,
	-364, -364, -356, -364, 84, 84, 84, -356, -356, -356,
	-364, 84, -356, -356, -356, -356, -356, -356, -356, -356,
	-356, -356, -425, 450, -425, -425, 157, 157, 157, 84,
	-123, 83, 99, 157, 634, -314, -313, 89, -329, 167,
	-329, 89, 630, -329, 167, 170, 170, 169, 24, 36,
	307, 24, -210, -212, -213, -214, -215, -216, 135, 158,
	159, 83, -225, -225, -225, -548, 401, -560, 157, 41,
	-558, 491, 239, -156, 320, -380, 81, -163, 17, 541,
	-225, -225, -225, -225, -238, 35, 17, -173, -226, -329,
	83, 84, 157, -388, 81, -329, -319, -290, -290, -343,
	-290, -290, 157, 23, -341, -343, -343, -217, -339, -217,
	156, -217, -318, -452, 35, -191, 157, 21, 262, -224,
	-326, -221, -223, 247, -346, -222, 250, -516, 248, 246,
	109, 251, 305, 110, 241, -326, -326, 247, -258, 243,
	35, -326, -274, 241, 348, 305, 248, 21, 262, -273,
	241, 110, -329, 247, 251, 248, 246, -325, 125, -317,
	152, 243, 43, 376, -325, 545, 262, -325, -325, -325,
	-325, -325, -325, -325, 279, 279, -325, -325, -325, -325,
	-325, -325, -325, -325, -325, -325, -325, 162, -325, -325,
	-325, -325, -325, -325, 83, 274, 275, 307, -549, 401,
	31, 356, 356, 357, -560, 31, -164, 350, 31, -296,
	-297, -298, -299, 68, 72, 74, 78, 69, 70, 71,
	75, 31, 157, -327, -332, 35, -329, 89, -327, -169,
	-174, -179, -327, 83, -572, -574, 483, 480, 486, -411,
	-411, 243, 83, 125, -411, -411, 41, -328, -569, 487,
	481, -123, 157, 80, -227, -202, -203, -204, -205, -231,
	-307, 192, 195, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 208, 209, 206, 207, 256, 187, 188, 189,
	190, 210, 173, 193, 539, 174, 175, 176, 177, 178,
	179, 182, 183, 184, 185, 181, -329, -211, -290, -172,
	-174, -329, 89, -329, 144, -290, 122, -6, 120, -135,
	-134, -133, 123, 612, 618, 122, 122, 122, 84, 84,
	84, 157, 84, 84, 84, 157, 84, 157, 99, -491,
	460, 40, 157, 83, 84, 157, 61, 157, 125, 84,
	157, -356, -329, 89, -356, 84, 61, -123, 89, 157,
	-181, 37, 38, 156, 433, -329, -502, 84, -417, 157,
	243, 156, 156, -393, 379, -328, -395, 21, 541, -307,
	39, -314, 125, 638, -329, 84, -358, -358, 114, -354,
	-351, 84, 122, -356, 120, -229, -231, 395, 396, -356,
	-229, -230, -236, 153, 191, 256, 190, 189, 187, 395,
	396, -248, -329, -356, -356, 84, -356, -356, 17, -329,
	-248, -352, -356, -186, -186, 84, 84, -424, -425, -424,
	-424, 84, 84, 84, 84, -424, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 83, 99, 101, 99,
	101, -484, -581, 63, 620, 62, 423, 104, 310, 157,
	99, 89, 639, 157, 125, -329, 17, 239, -329, 17,
	170, -561, 314, 350, -436, 99, 314, 350, 491, 387,
	84, 157, -307, -202, -191, 83, -191, -551, 462, 403,
	413, -325, -348, -347, 352, 42, -470, 424, 409, 410,
	-394, 270, -329, -329, -557, 96, 125, 80, 335, 339,
	340, 336, 337, 338, -374, -375, -373, -377, -544, 83,
	83, -166, 35, 133, -163, 83, 83, 35, -447, 325,
	-231, -225, -173, -329, 17, 157, -543, 156, -1, -329,
	-387, -341, -290, -356, -356, -290, -341, -341, -343, -329,
	-447, -231, 35, -272, 236, 233, -421, 307, 308, -422,
	-437, 310, -439, 83, -228, -307, -222, -515, -516, -376,
	-329, 110, -515, 110, 83, -228, -307, -307, -275, -340,
	-307, -329, -329, -329, -329, -280, -279, -307, -282, 32,
	-283, -329, -329, -329, -329, 110, -329, 110, -253, 41,
	48, 49, 50, -325, -325, 194, -256, 41, 423, 425,
	426, -282, 99, 99, 99, 99, 89, 89, 89, -325,
	-325, 99, 89, -332, 89, -517, 169, 45, 46, 99,
	99, 99, 99, 41, 89, -261, 41, 290, 294, 291,
	292, 293, 89, 99, 41, 99, 41, 99, 41, -329,
	83, -518, -519, 89, -436, -551, -325, 356, -408, 125,
	125, -348, -556, 320, -165, 491, 32, -195, 236, 233,
	-544, -399, -398, -307, -178, -178, -178, -178, 68, 68,
	68, 68, 73, 68, 73, 68, -298, -399, -180, -191,
	-332, 84, -566, -565, -564, -562, 76, 244, 77, -362,
	480, 484, 485, -395, -344, 89, -402, -199, 24, -225,
	-225, -469, 300, 301, 84, 157, -231, -292, 19, 156,
	-292, 118, -6, -131, -133, -356, -6, -356, 614, 369,
	615, 89, 99, 99, -499, 444, 439, 441, 110, -365,
	-486, -485, 61, -166, -189, -478, -521, -484, -329, 639,
	639, 639, 639, 61, -166, -478, -199, -491, -183, -182,
	44, -329, 99, 17, -392, -387, 144, 144, -329, 380,
	-403, 89, 402, 89, 239, 639, 89, -314, -351, -356,
	84, -239, 178, 177, -239, 35, 84, 84, -454, -454,
	-453, -456, -453, -239, -239, 84, 84, 24, 84, 84,
	84, -356, 84, 84, 157, -474, 500, -475, 574, -424,
	-424, -424, -424, -424, -424, -424, -424, -424, -424, -424,
	-424, -424, -424, -424, -424, -367, -366, 262, 445, 627,
	627, 445, 627, 627, 84, 157, -524, 157, -320, 315,
	-320, -313, 89, 243, 167, -329, 89, 630, -329, 89,
	307, -329, -329, 89, 89, -214, -231, 84, 35, -218,
	-219, -220, -228, -221, -223, 35, -552, 93, -547, 89,
	-329, 90, -553, 93, 404, 155, 354, 41, 405, 406,
	421, 349, 99, 99, 411, -545, -329, -164, -164, -555,
	52, 125, 89, -225, -373, -317, 152, 281, 328, -287,
	-286, -329, 89, -218, -166, -225, -218, -218, -166, -448,
	327, 21, 99, 143, -192, 81, 156, -174, -226, -329,
	144, 84, -290, -217, -290, -290, -341, -448, -166, -433,
	311, 83, -431, 83, -431, 110, 336, -440, -438, 262,
	-278, 45, 47, -231, -513, -329, -511, -513, -329, -511,
	-511, -376, -356, -278, -228, 243, 31, 233, -281, 333,
	334, 339, -404, 306, 115, -404, 157, -181, 157, -329,
	-248, -248, 31, 89, 89, -227, 84, 157, 125, 89,
	-552, -547, 125, -409, 89, 89, -553, -557, 125, -157,
	93, -318, 157, -195, -195, -290, 157, 125, -197, -196,
	80, 81, -198, 80, -196, 68, 68, -290, -564, -563,
	24, -516, -516, -516, 84, 84, 15, -204, 41, -291,
	20, 21, 144, -291, 122, 120, 122, 122, -329, 84,
	84, -460, 605, -495, -497, 439, 21, 21, 15, 244,
	84, -478, -478, -499, 45, 46, -387, -403, 424, -225,
	157, 639, -229, -356, 84, -356, 84, 89, 84, 89,
	-186, 21, 84, 157, 84, 84, 84, 157, 84, 84,
	-356, 84, -524, -321, 188, 89, -321, 350, -329, 17,
	-329, -436, 307, 307, 239, 237, -166, 84, 157, -166,
	89, -550, 415, 89, 89, 99, 41, 99, 155, 407,
	-471, -157, -157, -554, 93, 125, 638, 83, -325, -325,
	-325, -329, 84, 157, -325, -325, 84, 84, 84, -246,
	541, -449, 261, 99, 143, 99, 143, 99, -327, -174,
	-329, -290, -543, 156, -290, -449, -423, 312, 99, -352,
	83, -352, 83, -432, 309, 83, 84, 157, -329, -307,
	-243, -242, -240, 104, 115, 41, 393, -241, 93, 152,
	295, 298, 297, 273, 296, -270, -345, 80, 399, 333,
	334, -377, 605, 529, 246, 109, 110, 381, -346, 83,
	83, 81, 315, 83, 83, -513, 84, -278, -307, 41,
	-281, 41, 346, 306, -279, -329, 152, -248, 84, -519,
	89, -550, 89, -411, -555, 89, 89, -544, -186, -398,
	-484, -356, 83, -356, 83, 68, 11, 19, -349, -356,
	-364, 245, -6, 615, 369, -263, 606, 89, 21, 89,
	-493, 89, -399, -460, -126, -260, -317, 278, 84, 84,
	84, -424, -424, -427, -426, -430, 445, 307, 453, -364,
	89, 89, 84, 84, 89, -329, 243, 167, 89, 89,
	-436, -436, -329, -206, -231, -161, 541, -246, -220, -161,
	21, 541, 353, 41, 99, 41, 408, 125, 105, 106,
	-315, -316, 89, -382, -384, -307, 83, -248, -250, 89,
	-286, -349, -349, -244, -166, 35, -245, -284, -377, -125,
	-124, -244, 83, -450, 161, 99, 143, 99, 99, -290,
	-290, -450, -439, 21, 84, -418, 84, -418, 83, 125,
	-352, -438, -441, 61, -240, 104, -352, 89, -250, -251,
	41, 294, 290, 125, 125, -252, 41, 274, 275, -262,
	83, 305, 15, 194, 83, 110, 110, -225, -382, -382,
	-514, 335, 336, 337, 341, 339, 340, 338, -514, -382,
	-382, 83, -405, -404, -352, -325, -325, 152, -554, -187,
	-190, -512, -329, 246, 21, 21, -329, -329, -311, 607,
	99, 89, 441, -263, -461, 608, -489, -431, -248, 125,
	84, -429, 117, 407, 411, -350, -353, 99, 101, 186,
	155, 84, 84, 350, -329, 89, 89, 307, 540, -162,
	60, 487, 89, 90, 402, 89, 90, 353, 89, 639,
	157, 125, 84, 157, -453, -356, -419, 262, -166, 157,
	-284, -317, -126, -419, -247, -285, -329, 89, -468, 169,
	326, 541, 99, 143, 99, -186, -451, 169, 326, -422,
	84, 84, 84, -418, 99, 84, -445, -442, 83, -284,
	264, 135, 89, 89, 99, 83, -479, 31, 89, -383,
	83, 84, 84, 84, 84, -382, 99, -248, -325, 84,
	84, 157, 83, 21, -311, -462, 609, 89, -498, 444,
	-492, -490, 439, 440, 441, 442, 89, -428, -429, 411,
	-350, -353, 603, 451, 451, 451, -329, 243, -436, -208,
	-329, 305, 424, -316, 89, -385, -384, -181, 84, -420,
	314, 21, -284, -325, -420, 84, 157, -325, -325, 326,
	99, 143, 99, -187, 326, -434, 313, 84, -445, -284,
	-444, -443, 312, 265, 83, 84, -356, -368, -325, 84,
	-265, -264, 537, -382, -385, 81, -385, 81, -385, 81,
	-385, 81, 84, -248, -329, 246, -312, -329, -493, 89,
	-500, 244, -496, -497, 443, -490, 21, 441, 21, 21,
	-127, 157, 114, 452, 452, 452, 350, 89, -207, 35,
	446, 380, -386, 252, 346, 347, 93, 541, 333, 334,
	-181, 21, -421, -248, -285, -349, -349, 99, 99, 84,
	157, -329, 261, 83, -363, -357, -356, 261, 84, -329,
	-269, -267, -268, 80, 458, 303, 304, 84, -514, -514,
	-514, -514, -270, 84, 157, -507, 83, 99, -495, -494,
	-496, 21, -493, 21, -493, -493, 448, -428, -329, 89,
	-325, -325, 89, 89, 332, -307, 83, -433, -443, -442,
	-363, 84, 157, -404, -268, 80, -267, 80, 16, 15,
	-385, -385, -385, -385, -329, -510, 31, 84, -506, -505,
	-308, -501, -329, 444, 445, 89, -493, 125, -584, -583,
	626, 99, 99, -329, -418, -423, 84, -357, -266, 300,
	301, 31, 169, -266, -509, -508, -309, 84, 157, 156,
	89, 89, 84, -439, 104, 41, 302, 157, 125, -505,
	-329, -508, 41, -356, 156, -329,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 0, 292, 293, 294, 906, 907, 908, 909,
	910, 911, 912, 913, 0, 0, 0, 0, 0, 663,
	664, 0, 628, 0, 0, 0, 0, 0, 0, 512,
	513, 514, 515, 516, 517, 518, 519, 520, 521, 522,
	523, 524, 525, 526, 527, 528, 529, 530, 531, 532,
	533, 534, 535, 536, 537, 538, 539, 540, 541, 542,
	543, 544, 393, 394, 395, 396, 397, 398, 399, 400,
	401, 0, 317, 313, 238, 239, 240, 241, 242, 324,
	325, 489, 0, 0, 0, 0, 746, -2, 82, 0,
	0, 306, 0, 297, 297, 914, 915, 916, 917, 918,
	919, 920, 921, 922, 923, 924, 925, 926, -2, 676,
	0, 629, 630, 631, 632, 633, 634, 635, 636, 637,
	638, 639, 640, 641, 642, 643, 644, 377, 378, 379,
	373, 374, 376, 375, -2, 0, 676, 0, 0, 0,
	754, 0, 0, 0, 0, 0, 797, 819, 23, 0,
	7, 9, 10, 11, 12, 13, 14, 15, 16, 17,
	18, 0, 0, 19, 0, 19, 0, 0, 0, 1324,
	1325, 1326, 1327, 2108, 2078, -2, 1849, 1826, 2002, 2003,
	2139, 2140, 2141, 2142, 2143, 2144, 2145, 2146, 2147, 2148,
	2149, 2150, 2151, 2152, 2153, 2154, 2155, 2156, 2157, 2158,
	2159, 2160, 2161, 2162, 2163, 2164, 2165, 2166, 2167, 2168,
	2169, 2170, 2171, 2172, 2173, 2174, 2175, 2176, 2177, 2178,
	2179, 2180, 2181, 2182, 2183, 2184, 2185, 2186, 2187, 2188,
	1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792,
	1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802,
	1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812,
	1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822,
	1823, 1824, 1825, 1827, 1828, 1829, 1830, 1831, 1832, 1833,
	1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843,
	1844, 1845, 1846, 1847, 1848, 1850, 1851, 1852, 1853, 1854,
	1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864,
	1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873, 1874,
	1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884,
	1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894,
	1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904,
	1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914,
	1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925,
	1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935,
	1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945,
	1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955,
	1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965,
	1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975,
	1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985,
	1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995,
	1996, 1997, 1998, 1999, 2000, 2001, 2004, 2005, 2006, 2007,
	2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017,
	2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027,
	2028, 2029, 2030, 2031, 2032, 2033, 2034, -2, 2036, 2037,
	2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047,
	2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057,
	2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067,
	2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077,
	2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088,
	2089, 2090, 2091, 2092, 2093, -2, -2, -2, 2097, 2098,
	2099, 2100, 2101, 2102, 2103, 2104, 2105, 2106, 2107, 2109,
	2110, 2111, 2112, 2113, 2114, 2115, 2116, 2117, 2118, 2119,
	2120, 2121, 2122, 2123, 2124, 2125, 2126, 2127, 2128, 0,
	290, 288, 1796, 1826, 1849, 1903, 1914, 1915, 1950, 2002,
	2003, 2035, 2078, 2094, 2095, 2096, 2108, 0, 0, 931,
	0, 724, 0, 0, 729, 1273, 724, 318, 665, 666,
	754, 780, 626, 0, 355, 0, 1840, 359, 2085, 0,
	0, 0, 623, 349, 350, 351, 352, 353, 354, 0,
	0, 905, 0, 0, 345, 0, 312, 1905, 2107, 1328,
	0, 0, 0, 0, 0, 181, 1051, 183, 1053, 187,
	195, 0, 0, 0, 200, 201, 204, 205, 206, 207,
	208, 0, 212, 0, 214, 217, 0, 219, 220, 0,
	223, 224, 225, 0, 235, 236, 237, 1054, 1055, 1056,
	-2, 110, 929, 1754, 1641, 0, 1648, 1661, 1672, 1405,
	1406, 1407, 1408, 0, 0, 0, 0, 0, 0, 1416,
	1417, 0, 1445, 2143, 2184, 2185, 0, 1425, 1426, 1427,
	1428, 1429, 1430, 121, 133, 134, 1694, 1695, 1696, 1697,
	1698, 1699, 1700, 0, 1702, 1703, 1704, 1612, 1392, 1324,
	0, 2152, 0, 2174, 2179, 2180, 2181, 2182, 2173, 0,
	0, 1597, 0, 1587, 0, 0, -2, -2, 0, 0,
	1975, -2, 2186, 2187, 2188, 2149, 2170, 2178, 2153, 2154,
	2177, 2145, 2146, 2147, 2140, 2141, 2142, 2144, 2156, 2158,
	2169, 0, 2165, 2175, 2176, 2083, 0, 0, 0, 0,
	0, 2125, 135, 136, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 1608, -2, -2, 1611, -2, 1614, -2, -2, -2,
	-2, 1619, 1620, -2, 1622, -2, -2, -2, -2, -2,
	-2, -2, 1599, 1600, 1601, 1602, 1591, 1592, 1593, 1594,
	1595, 1596, -2, -2, -2, 780, 855, 0, 780, 0,
	755, 802, 805, 808, 811, 758, 0, 0, 83, 84,
	0, 0, 0, 0, 0, 307, 308, 296, 298, 0,
	302, 0, 295, 1087, 1087, 0, 0, 0, 0, 1087,
	1087, 1087, 1087, 1087, 0, 1087, 0, 0, 0, 0,
	0, 1087, 0, 964, 1058, 1059, 1060, 1085, 1086, 1159,
	0, 0, 0, 681, 677, 678, 679, 680, 768, 0,
	770, 773, 603, 603, 828, 828, 549, 0, 0, 0,
	603, 0, 563, 555, 0, 0, 0, 603, 0, 0,
	775, 775, 0, 606, 613, 603, 603, -2, 603, 603,
	600, 603, 0, 0, 1099, 569, 570, 571, 555, 555,
	574, 575, 576, 586, 587, 614, 1778, 0, 0, 489,
	489, 0, 489, 489, 0, 489, 489, 489, 683, 1945,
	1847, 1920, 1905, 2107, 0, 263, 1975, 268, 0, 1848,
	1867, 0, 0, 1885, 0, -2, 0, 334, 780, 0,
	0, 754, 0, 0, 0, 0, 0, 489, 489, 489,
	489, 489, 1158, 489, 489, 489, 489, 489, 0, 0,
	0, 489, 489, 489, 489, 0, 0, 820, 821, 816,
	817, 818, 822, 823, 5, 6, 19, 0, 0, 0,
	0, 0, 0, 89, 88, 0, 1755, 1773, 1707, 1708,
	1709, 1760, 1711, 1764, 1764, 1764, 1764, 1740, 1741, 1742,
	1743, 1744, 1745, 1746, 1747, 1748, 1764, 1764, 0, 0,
	1753, 1731, 1762, 1762, 1762, 1760, 1757, 1712, 1713, 1714,
	1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724,
	1725, 1767, 1767, 1770, 1770, 1767, 0, 391, 389, 390,
	1637, 0, 0, 0, 0, 724, 728, 1271, 0, 0,
	0, 780, -2, 0, 0, 627, 356, 1329, 0, 0,
	360, 0, 361, 0, 0, 0, 380, 0, 383, 368,
	369, 370, 364, 0, 161, 0, 347, 348, 0, 0,
	314, 0, 0, 0, 490, 0, 0, 0, 0, 0,
	0, 192, 188, 196, 199, 209, 216, 0, 228, 230,
	233, 189, 197, 202, 203, 210, 231, 190, 193, 194,
	198, 232, 234, 191, 211, 215, 229, 213, 218, 221,
	222, 227, 0, 162, 0, 0, 0, 0, 0, 1647,
	0, 0, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, -2, 1641,
	0, 0, 1411, 1412, 1413, 1414, 0, 1418, 0, 1446,
	0, 0, 0, 0, 0, 1701, 1705, 0, 1637, 1637,
	0, 1637, 1633, 0, 0, 0, 0, 0, 0, 1637,
	1570, 0, 0, 1572, 1588, 0, 0, 1574, 1575, 0,
	1578, 1579, 1637, 0, 1637, 1583, 1637, 1637, 1637, 1566,
	1567, 0, 1633, 1633, 1633, 1633, 0, 0, 1633, 1633,
	1633, 1633, 1633, 1633, 1633, 1633, 1633, 1633, 1633, 1633,
	1633, 1633, 0, 0, 0, 0, 775, 0, 781, 0,
	-2, 0, 799, 801, 803, 804, 806, 807, 809, 810,
	812, 813, 760, 0, 0, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 300, 0, 305, 0, 0, 0,
	0, 928, 0, 0, 1087, 1087, 1087, 965, 0, 0,
	0, 0, 0, 0, 0, 0, 1087, 1087, 1087, 1087,
	0, 1105, 0, 0, 0, 683, 682, 0, 769, 0,
	0, 828, 0, 0, 546, 547, 0, 548, 0, 555,
	603, 603, 561, 562, 557, 556, 609, 610, 606, 0,
	606, 606, 828, 0, 580, 581, 582, 603, 603, 588,
	776, 0, 589, 590, 606, 0, 611, 612, 828, 0,
	0, 828, 828, 0, 598, 599, 601, 603, 0, 0,
	1087, 0, 619, 557, 557, 1779, 1780, 0, 0, 1096,
	0, 0, 0, 0, 622, 0, 0, 0, 0, 684,
	243, 246, 0, 249, 0, 1945, 0, 1945, 0, 256,
	0, 0, 0, 0, 0, 0, 286, 287, 0, 0,
	0, 0, 277, 280, 1265, 1266, 1048, 1049, 281, 282,
	326, 327, 0, 775, 798, 800, 794, 795, 796, 0,
	0, 0, 0, 0, 0, 0, 0, 489, 0, 0,
	0, 0, 0, 659, 0, 944, 661, 0, 0, 0,
	0, 0, 836, 830, 832, 900, 121, 836, 8, 106,
	103, 0, 19, 0, 0, 19, 19, 0, 19, 291,
	0, 1776, 1774, 1775, 1710, 1761, 0, 1736, 0, 1737,
	1738, 1739, 1749, 1750, 0, 0, 1732, 0, 1733, 1734,
	1735, 1726, 0, 1727, 1728, 0, 1729, 1730, 289, 388,
	0, 0, 1638, 932, 0, 702, 716, 697, 0, 705,
	0, 0, 1273, 0, 0, 0, 685, 716, 687, 0,
	705, 775, 752, 0, 730, 0, 0, 357, 0, 365,
	362, 0, 366, 0, 0, 382, 384, 385, 386, 371,
	372, 624, 343, 344, 335, 336, 337, 338, 339, 340,
	341, 342, 0, 346, 131, 0, 315, 316, 0, 0,
	0, 175, 176, 177, 178, 179, 180, 182, 166, 648,
	650, 1040, 1052, 0, 1043, 0, 185, 226, 158, 0,
	0, 0, 1642, 1643, 1644, 1645, 1646, 1651, 0, 1653,
	1655, 1657, 1659, 0, 1677, -2, -2, 1393, 1394, 1395,
	1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1662,
	1675, 1676, 0, 0, 0, 0, 0, 0, 1673, 1673,
	1668, 0, 1431, 1267, 1268, 1409, 0, 0, 1443, 1447,
	0, 0, 0, 0, 0, 122, 1632, 1537, 1538, 1539,
	1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549,
	1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559,
	1560, 1561, 1562, 1563, 1564, 1565, 0, 0, 1641, 0,
	0, 0, 1634, 1635, 0, 0, 0, 1525, 0, 0,
	1531, 1532, 1533, 0, 711, 0, 1598, 1571, 1589, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 854, 856, 0, 720,
	722, 723, 749, 730, 756, 0, 0, 0, 81, 86,
	0, 1126, 0, 0, 0, 0, 0, 0, 309, 310,
	0, 0, 304, 0, 0, 0, 0, -2, 0, 0,
	0, 0, 0, 980, 981, 487, 1034, 0, 0, 0,
	1050, 1075, 1083, 0, 0, 0, 0, 0, 1132, 966,
	971, 972, 973, 967, 968, 974, 975, 0, 771, 0,
	0, 869, 545, 604, 605, 829, 552, 1905, 557, 828,
	828, 564, 558, 565, 608, 566, 567, 568, 606, 828,
	828, 777, 603, 606, 591, 607, 606, 1273, 595, 0,
	602, 1273, 620, 1273, 0, 618, 572, 573, 1134, 773,
	404, 405, 406, 408, 0, 457, 457, 457, 440, 457,
	0, 0, 428, 1781, 0, 0, 0, 0, 437, 1781,
	0, 0, 1781, 1781, 1781, 1781, 1781, 1781, 1781, 0,
	0, 1781, 1781, 1781, 1781, 1781, 1781, 1781, 1781, 1781,
	1781, 1781, 0, 1781, 1781, 1781, 1781, 1781, 1251, 1781,
	0, 1097, 447, 448, 449, 450, 455, 456, 0, 0,
	484, 0, 0, 979, 0, 487, 0, 1019, 841, 0,
	842, 843, 839, 871, 895, 895, 0, 895, 875, 1273,
	0, 0, 254, 255, 244, 0, 245, 0, 257, 258,
	0, 260, 261, 262, 269, 1847, 1920, 264, 266, 0,
	0, 270, 283, 284, 285, 0, 0, 275, 276, 0,
	0, 329, 330, 332, 0, 730, 1100, 1101, 1102, 645,
	1269, 646, 647, 651, 0, 0, 654, 655, 656, 657,
	658, 946, 0, 0, 1026, 1027, 1028, 1029, 828, 0,
	837, 0, 833, 901, 0, 903, 0, 828, 0, 104,
	19, 0, 97, 94, 0, 0, 0, 0, 0, 1756,
	1706, 1777, 0, 0, 0, 1758, 0, 0, 0, 0,
	0, 87, 732, 692, 0, 696, 713, 0, 717, 0,
	0, 709, 701, 706, 0, 0, 726, 693, 1272, 0,
	0, 0, 686, 0, 0, 691, 730, 0, 753, 782,
	783, 786, 1330, 0, 367, 363, 381, 0, 489, 0,
	0, 0, 169, 1037, 0, 170, 174, 164, 0, 0,
	0, 1042, 0, 1039, 1044, 0, 184, 0, 0, 159,
	160, 1117, 1126, 0, 0, 0, 1652, 1654, 1656, 1658,
	1660, 0, 1663, 1673, 1673, 1669, 0, 1664, 0, 1666,
	0, 1642, 1415, 0, 1448, 0, 0, 0, 0, 0,
	0, 0, 0, 1515, 1516, 0, 0, 1520, 0, 1522,
	1523, 1524, 1526, 0, 0, 0, 1530, 0, 1569, 1590,
	1573, 1576, 0, 1580, 0, 1582, 1584, 1585, 1586, 0,
	780, 780, 0, 0, 1487, 1487, 1487, 0, 0, 0,
	0, 1487, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1432, 0, 1433, 1434, 0, 0, 0, 857,
	750, 0, 0, 0, 0, 0, 1124, 0, 71, 0,
	0, 78, 0, 0, 311, 299, 301, 0, 0, 1088,
	0, 0, 0, 0, 934, 935, 937, 0, 940, 941,
	942, 946, 773, 0, 773, 991, 1781, 491, 0, 0,
	1036, 0, 0, 1008, 0, 0, 0, -2, 0, 0,
	1083, 0, 0, 0, 1136, 0, 0, 0, 670, 674,
	23, 774, 0, 550, 0, 551, 603, 559, 560, 828,
	583, 584, 0, 0, 828, 603, 603, 594, 606, 615,
	0, 616, 617, 1136, 0, 0, 1096, 1202, 1170, 418,
	0, 1285, 1286, 458, 0, 1292, 1301, 1087, 1362, 0,
	1301, 0, 0, 1303, 1304, 0, 0, 0, 0, 441,
	442, 0, 427, 0, 0, 0, 0, 0, 0, 426,
	0, 0, 468, 0, 0, 0, 0, 0, 1782, 1781,
	1781, 0, 435, 436, 0, 439, 0, 0, 0, 0,
	0, 0, 0, 0, 1781, 1781, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1242, 0, 0,
	0, 0, 0, 0, 0, 1257, 1258, 0, 991, 1781,
	0, 0, 0, 0, 491, 1006, 1024, 0, 0, 0,
	0, 0, 0, 861, 0, 0, 0, 860, 0, 0,
	0, 0, 0, 773, 896, 0, 898, 899, 873, -2,
	0, 841, 878, 1637, 247, 248, 0, 0, 253, 271,
	273, 0, 0, 0, 272, 274, 278, 279, 328, 331,
	333, 792, 0, 0, 1160, 0, 947, 948, 950, 951,
	0, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 1831, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 945, 662, 826, 831,
	838, 902, 904, 122, 834, 826, 0, 107, 19, 106,
	98, 99, 0, 19, 0, 0, 0, 0, 1766, 1765,
	1751, 0, 1752, 1763, 1768, 0, 1771, 0, 392, 736,
	0, 0, 716, 718, 0, 0, 716, 0, 0, 725,
	0, 0, 0, 0, 0, 0, 716, 792, 732, 0,
	789, 787, 788, 0, 0, 625, 132, 387, 0, 0,
	0, 0, 0, 649, 0, 1041, 166, 0, 0, 186,
	0, 0, 0, 1126, 1121, 1636, 1665, 1667, 0, 1674,
	1670, 1410, 1419, 1444, 0, 0, 1450, 1462, 1462, 0,
	0, 0, 1453, 1764, 1764, 1456, 1760, 1762, 1760, 1462,
	1462, 0, 123, 0, 0, 1521, 0, 0, 0, 712,
	0, 0, 0, 1483, 1485, 1487, 1487, 1494, 1488, 1495,
	1496, 1487, 1487, 1487, 1487, 1501, 1487, 1487, 1487, 1487,
	1487, 1487, 1487, 1487, 1487, 1487, 1481, 0, 0, 1695,
	1696, 721, 0, 0, 763, 764, 765, 766, 767, 0,
	0, 58, 58, 1126, 0, 72, 0, 0, 0, 0,
	303, 62, 63, 0, 0, 70, 0, 0, 0, 0,
	0, 939, 0, 0, 0, 1278, 0, 995, 992, 993,
	994, 0, 1031, 492, 493, 494, 495, 0, 0, 0,
	1035, 0, 1019, 1019, 1001, 0, 0, 0, 1076, 1077,
	1078, 1079, 1080, 1081, 1082, -2, 1091, 0, 0, 0,
	1278, 1110, 0, 0, 1115, 1278, 1278, 0, 1144, 0,
	1133, 724, 0, -2, 0, 0, 672, 0, 0, 870,
	553, 828, 577, 778, 779, 1273, 828, 828, 603, 621,
	1144, 1135, 0, 407, 457, 0, 1190, 0, 0, 1196,
	0, 1203, 411, 0, 459, 0, 1291, 1318, 1302, 1318,
	1363, 1318, 1318, 1087, 0, 459, 0, 0, 429, 465,
	0, 0, 0, 0, 0, 425, 462, 786, 412, 414,
	415, 416, 466, 467, 469, 0, 471, 472, 431, 443,
	444, 445, 446, 0, 0, 0, 438, 451, 452, 453,
	454, 413, 1219, 1220, 1221, 1224, 1225, 1226, 1227, 0,
	0, 1230, 1231, 1232, 1233, 1234, 1315, 1316, 1317, 1235,
	1236, 1237, 1238, 1239, 1240, 1241, 1259, 1260, 1261, 1262,
	1263, 1264, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250,
	0, 0, 1254, 0, 0, 995, 0, 0, 0, 0,
	0, 1031, 1008, 0, 1015, 0, 1020, 1021, 0, 0,
	694, 828, 321, 0, 865, 858, 0, 847, 862, 863,
	864, 850, 0, 852, 0, 848, 849, 828, 840, 872,
	897, 874, 877, 879, 880, 886, 0, 0, 0, 0,
	250, 251, 252, 259, 0, 511, 265, 748, 0, 1270,
	652, 653, 1161, 1162, 660, 0, 952, 824, 0, 0,
	824, 102, 105, 0, 100, 0, 0, 0, 0, 92,
	90, 1759, 0, 0, 738, 146, 0, 0, 0, 714,
	0, 719, 716, 700, 710, 699, 707, 708, 727, 1274,
	1275, 1276, 1277, 716, 690, 689, 751, 736, 784, 785,
	0, 1331, 358, 0, 1038, 166, 171, 172, 173, 167,
	165, 1045, 0, 1047, 0, 1119, 0, 0, 1671, 1449,
	1420, 1451, 1463, 1464, 1452, 0, 1422, 1423, 1454, 1455,
	1457, 1458, 1459, 1460, 1461, 1424, 1517, 0, 1519, 1527,
	1528, 0, 1577, 1581, 0, 0, 0, 0, 0, 1492,
	1493, 1497, 1498, 1499, 1500, 1502, 1503, 1504, 1505, 1506,
	1507, 1508, 1509, 1510, 1511, 780, 1482, 0, 0, 0,
	0, 0, 0, 0, 761, 0, 0, 0, 60, 0,
	60, 1125, 1127, 0, 0, 0, 79, 0, 64, 65,
	0, 0, 0, 927, 930, 936, 938, 0, 0, 0,
	1279, 1280, 1282, 1283, 1284, 0, 963, 0, 0, 983,
	984, 985, 997, 0, 0, 0, 497, 498, 0, 0,
	0, 510, 506, 507, 508, 488, 1030, 1015, 1015, 1004,
	0, 0, 1014, 0, 1092, 1781, 1781, 1781, 0, 0,
	1204, 1781, 1781, 0, 1112, 1114, 0, 0, 1208, 1147,
	0, 0, 1138, 0, 895, 0, 0, 828, 671, 674,
	675, 772, 554, 592, 596, 593, 828, 1147, 403, 1168,
	0, 0, 0, 0, 0, 1200, 0, 0, 1172, 0,
	430, 460, 0, -2, 0, 1319, 0, 1305, 1319, 0,
	0, 1318, 0, 419, 459, 0, 0, 0, 473, 477,
	478, 0, 475, 1358, 0, 476, 0, 464, 0, 470,
	1222, 1223, 0, 1228, 1229, 0, 1253, 0, 0, 410,
	479, 0, 0, 0, 480, 481, 486, 1001, 0, 1018,
	0, 1025, 0, 1022, 1023, 780, 0, 0, 844, 866,
	0, 0, 845, 0, 846, 851, 853, 320, 881, 0,
	0, 883, 884, 885, 876, 267, 793, 949, 0, 814,
	0, 0, 835, 815, 0, 19, 0, 0, 95, 1769,
	1772, 740, 0, 737, 147, 0, 0, 0, 0, 704,
	715, 698, 688, 738, 790, 791, 168, 163, 1046, 1129,
	0, 1120, 0, 0, 1529, 0, 1487, 1484, 1487, 1486,
	1478, 0, 1435, 0, 1437, 1438, 1439, 0, 1441, 1442,
	0, 759, 0, 56, 0, 59, 57, 0, 73, 0,
	0, 0, 0, 0, 0, 0, 969, 1208, 0, 969,
	996, 982, 0, 1032, 1033, 0, 499, 500, 0, 503,
	509, 998, 999, 1000, 0, 0, 1012, 0, 0, 0,
	0, 1084, 1098, 0, 0, 0, -2, 0, -2, 1109,
	0, 1153, 0, 1145, 0, 1137, 0, 1140, 828, 828,
	-2, 668, 673, 0, 597, 1153, 1170, 0, 1191, 0,
	0, 0, 0, 0, 0, 0, 1171, 0, 1184, 461,
	1320, -2, 1334, 1336, 0, 1097, 1339, 1340, 0, 0,
	0, 0, 0, 0, 1384, 1348, 0, 0, 1352, 1353,
	1354, 0, 0, 1357, 0, 1689, 1690, 0, 1361, 0,
	0, 0, 0, 0, 0, 0, 1299, 420, 421, 0,
	423, 424, 1781, 1359, 463, 417, 1781, 433, 1252, 1255,
	1256, 485, 482, 483, 1004, 1007, 1016, 695, 775, 322,
	323, 867, 0, 859, 890, 887, 0, 0, 953, 825,
	827, 96, 101, 0, 0, 742, 0, 739, 0, 733,
	735, 157, 703, 740, 117, 149, 0, 0, 1421, 1518,
	1568, 1490, 1491, 0, 1479, 0, 1473, 1474, 1475, 1480,
	0, 0, 762, 757, 61, 75, 0, 0, 80, 66,
	0, 0, 0, 0, 955, 962, 976, 1103, 1281, 961,
	0, 0, 496, 501, 0, 504, 505, 0, 1002, 1003,
	0, 1010, 0, 0, 1071, 1760, 0, 1093, 1094, 1095,
	1205, 1206, 1207, 1163, 1111, 0, -2, 1216, 0, 1107,
	1129, 1163, 0, 1141, 0, 1148, 0, 1146, 1139, 780,
	669, 1150, 409, 1202, 1192, 0, 1194, 0, 0, 0,
	0, 1173, -2, 0, 1335, 1337, 1338, 1341, 1342, 1343,
	1389, 1390, 1391, 0, 0, 1346, 1386, 1387, 1388, 1347,
	0, 0, 0, 0, 0, 1687, 1688, 1382, 0, 0,
	1306, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1307, 0,
	0, 0, 1298, 1300, 422, 0, 0, 1781, 1017, 319,
	0, 0, 891, 893, 888, 889, 91, 93, 108, 0,
	741, 148, 0, 742, 119, 0, 140, 0, 1130, 0,
	1489, 1476, 0, 0, 0, 0, 0, 1691, 1692, 1693,
	0, 1436, 1440, 0, 74, 67, 68, 0, 0, 0,
	977, 978, 986, 987, 0, 989, 990, 502, 1005, 1009,
	1012, 0, 1062, 0, 786, 0, 1165, 0, 1113, 1096,
	1218, 1781, 1116, 1165, 0, 1210, 1781, 1781, 1131, 0,
	1143, 0, 1155, 0, 1149, 775, 402, 0, 1152, 1188,
	1193, 1195, 1197, 0, 1201, 1199, 1174, -2, 0, 1182,
	0, 0, 1344, 1345, 0, 0, 1587, 1781, 0, 1377,
	0, 1062, 1062, 1062, 1062, 0, 474, 432, 0, 868,
	882, 0, 0, 0, 731, 109, 0, 118, 137, 0,
	150, 151, 0, 0, 0, 0, 1122, 0, 1465, 0,
	0, 0, 1469, 1470, 1471, 1472, 76, 0, 0, 0,
	954, 0, 988, 1011, 1013, 1061, 1072, 1073, 786, 1106,
	0, 1202, 1217, 0, 1108, 1209, 0, 0, 0, 1142,
	1154, 0, 1157, 667, 1151, 1169, 0, 1198, 1175, 1183,
	0, 1178, 0, 0, 0, 1385, 0, 1351, 0, 1356,
	1365, 1378, 0, 0, 1287, 0, 1289, 0, 1293, 0,
	1295, 0, 0, 434, 892, 894, 0, 744, 734, 120,
	124, 0, 146, 143, 0, 152, 0, 0, 0, 0,
	1118, 0, 0, 1466, 1467, 1468, 0, 69, 0, 956,
	957, 970, 1063, 1781, 1781, 0, 0, 0, 1069, 1070,
	1074, 0, 1190, 1222, 1211, 1212, 1213, 1156, 1189, 1177,
	0, -2, 1185, 0, 0, 1639, 1649, 1650, 1349, 1355,
	1364, 1366, 1367, 0, 1379, 1380, 1381, 1383, 1062, 1062,
	1062, 1062, 1297, 743, 0, 111, 0, 0, 141, 142,
	144, 0, 153, 0, 155, 156, 0, 1477, 77, 958,
	0, 0, 1066, 1067, 0, 1166, 0, 1168, 1179, -2,
	0, 1187, 0, 1350, 1368, 0, 1369, 0, 0, 0,
	1288, 1290, 1294, 1296, 745, 1128, 0, 125, 0, 127,
	129, 130, 1321, 138, 139, 145, 154, 0, 943, 959,
	0, 1064, 1065, 1068, 0, 1170, 1186, 1640, 1370, 1372,
	1373, 0, 0, 1371, 112, 113, 0, 126, 0, 0,
	1123, 960, 1167, 1164, 1374, 1376, 1375, 0, 0, 128,
	1322, 114, 115, 116, 0, 1323,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 116, 3, 3, 3, 147, 139, 3,
	83, 84, 144, 142, 157, 143, 156, 145, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 640, 637,
	126, 125, 127, 3, 641, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 149, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 638, 138, 639, 150,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 85, 86, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 117, 118, 119, 120, 121, 122, 123, 124,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	140, 141, 146, 148, 151, 152, 153, 154, 155, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 57956, 631, 57957, 632, 57958, 633, 57959, 634,
	57960, 635, 57961, 636, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:818
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:825
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:831
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:839
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:845
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:849
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:864
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:868
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:874
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:879
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:883
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:916
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 56:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:927
		{
			var timestamp = yyDollar[2].str
			var isS3 = false
			var dir = yyDollar[4].str
			var parallelism = yyDollar[6].str
			var option []string
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 57:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:938
		{
			var timestamp = yyDollar[2].str
			var isS3 = true
			var dir string
			var parallelism string
			var option = yyDollar[5].strsUnion()
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 58:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:950
		{
			yyVAL.str = ""
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:954
		{
			yyVAL.str = yyDollar[2].str
		}
	case 60:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:959
		{
			yyVAL.str = ""
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:963
		{
			yyVAL.str = yyDollar[2].str
		}
	case 62:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:971
		{
			yyLOCAL = &tree.CreateSnapShot{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Object:      yyDollar[6].snapshotObjectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:981
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELCLUSTER,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:991
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 65:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1003
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				PitrValue:   yyDollar[6].int64ValUnion(),
				PitrUnit:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1013
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELCLUSTER,
				PitrValue:   yyDollar[8].int64ValUnion(),
				PitrUnit:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1023
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				AccountName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:   yyDollar[9].int64ValUnion(),
				PitrUnit:    yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1034
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:    yyDollar[9].int64ValUnion(),
				PitrUnit:     yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-12 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1045
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[9].cstrUnion().Compare()),
				PitrValue:    yyDollar[11].int64ValUnion(),
				PitrUnit:     yyDollar[12].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1059
		{
			yyLOCAL = yyDollar[1].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1067
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELCLUSTER,
				SnapShotName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}

		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1075
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELACCOUNT,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[6].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1083
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELDATABASE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1092
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELTABLE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[10].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1102
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELACCOUNT,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[9].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1111
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELDATABASE,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName:  tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[11].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-13 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1121
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELTABLE,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName:  tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:     tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[10].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[13].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1134
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELACCOUNT,
				Name:      tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				TimeStamp: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1142
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1151
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				TimeStamp:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1163
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1183
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1189
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1196
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1204
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1210
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1219
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1229
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1237
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1245
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1253
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1263
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1271
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1281
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1288
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1297
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1307
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1311
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1317
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1321
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1327
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1336
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1346
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1350
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1356
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1365
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1369
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1375
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1396
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
			yyLOCAL.(*tree.Load).Param.Strict = yyDollar[11].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1410
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1417
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1421
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1427
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1431
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1437
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1444
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1452
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1456
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error strict flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1468
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1472
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1486
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1490
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1495
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1502
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1506
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1510
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1516
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1525
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1536
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1540
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1546
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1550
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1556
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1560
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1566
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1590
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            goto ret1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1609
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1613
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1617
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1622
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1626
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1635
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1645
		{
			yyVAL.str = ""
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1652
		{
			yyVAL.str = yyDollar[3].str
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1657
		{
			yyVAL.str = "\n"
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1664
		{
			yyVAL.str = yyDollar[3].str
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1669
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1673
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1701
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1705
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1711
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1719
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1739
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1758
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1783
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1787
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1791
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1796
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1800
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 163:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1806
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 164:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1819
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 165:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1830
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1843
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1847
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1857
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1870
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1883
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1889
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1895
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1903
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  dbName,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1913
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1923
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1927
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1931
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1935
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1939
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1943
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1950
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1954
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1960
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1967
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1976
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1980
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1986
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1990
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1994
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1998
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2002
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPGRADE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2006
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2010
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2014
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2018
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2022
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2026
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2030
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2034
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2038
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2042
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2046
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2050
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2054
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2058
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2062
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2066
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2070
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2074
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2078
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2082
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2086
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2090
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2094
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2098
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2102
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2106
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2110
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2114
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2118
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2122
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2126
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2130
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2134
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2138
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2142
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2146
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2150
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2154
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2158
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2162
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2166
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2170
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2174
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2178
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2182
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2186
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2199
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2206
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2213
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2223
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2227
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2233
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2240
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2248
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2252
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2256
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2260
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2266
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2270
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2276
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2283
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2290
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 259:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2299
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2329
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2333
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2337
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2343
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2349
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 265:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2353
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2360
		{
			yyVAL.str = yyDollar[3].str
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2366
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2370
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2376
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2384
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2393
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2402
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2410
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2418
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2441
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2464
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2471
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2478
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2486
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2493
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2500
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2509
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2513
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2517
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2523
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2527
		{
			yyVAL.str = yyDollar[1].str
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2533
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2537
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2543
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2547
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2558
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2564
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2569
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2573
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2577
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2581
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2585
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2589
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2593
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2597
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2601
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2607
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2611
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2615
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 309:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2619
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 310:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2624
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 311:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2629
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2635
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2648
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2661
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2674
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2687
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2703
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 319:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2710
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 320:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2721
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].joinTableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2732
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2736
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2742
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2752
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2758
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2762
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:2768
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2774
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2778
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2782
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2786
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2792
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2805
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 343:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2811
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 344:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2815
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2821
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2825
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2831
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2837
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2848
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2854
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2858
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 357:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2862
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 358:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2866
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2870
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2874
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2882
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 362:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2890
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 363:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2900
		{
			if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2912
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 365:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2916
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 366:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2924
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 367:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2932
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:2971
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:2975
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:2981
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2987
		{
			yyVAL.str = yyDollar[1].str
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2992
		{
			yyVAL.str = "true"
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2993
		{
			yyVAL.str = "false"
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2994
		{
			yyVAL.str = yyDollar[1].str
		}
	case 387:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2999
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 388:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3005
		{
			yyLOCAL = &tree.UpgradeStatement{
				Target: yyDollar[3].upgrade_targetUnion(),
				Retry:  yyDollar[4].int64ValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3014
		{
			yyLOCAL = &tree.Target{
				AccountName:  yyDollar[1].str,
				IsALLAccount: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3021
		{
			yyLOCAL = &tree.Target{
				AccountName:  "",
				IsALLAccount: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 391:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3029
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3033
		{
			res := yyDollar[3].item.(int64)
			if res <= 0 {
				yylex.Error("retry value can not less than 0")
				yyLOCAL = -1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 402:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3057
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3080
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 404:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3090
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 405:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3097
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3106
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3110
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3116
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 409:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3120
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()

			partitionDef := tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)

			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 410:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3144
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var pitrValue = yyDollar[6].int64ValUnion()
			var pitrUnit = yyDollar[7].str
			yyLOCAL = tree.NewAlterPitr(ifExists, name, pitrValue, pitrUnit)
		}
		yyVAL.union = yyLOCAL
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3154
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3164
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3180
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3198
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3202
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3208
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3212
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 418:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3218
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 419:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3224
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 420:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3232
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 421:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3242
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 422:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3250
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 423:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3260
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 424:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3270
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3280
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3287
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3291
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3295
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3299
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 430:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3303
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3310
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 432:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3316
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 433:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3320
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 434:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3324
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3328
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3332
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3336
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3340
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3344
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3349
		{
			yyVAL.str = ""
		}
	case 457:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3380
		{
			yyVAL.str = ""
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3384
		{
			yyVAL.str = string("COLUMN")
		}
	case 459:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3389
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3395
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3401
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3409
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3413
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3419
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3427
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterOptionTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3434
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3440
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3446
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3452
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3458
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3465
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3472
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3480
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 474:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3486
		{
			val := int64(yyDollar[6].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = val
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3498
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3504
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3512
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3516
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 479:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3523
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 480:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3541
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 481:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3556
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.UNIQUE_CHECK_ON_AUTOINCR,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 482:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3571
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 483:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3586
		{
			assignments := []*tree.VarAssignmentExpr{
				&tree.VarAssignmentExpr{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 484:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3599
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 485:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3605
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].exprUnion(),
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 486:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3616
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 487:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3629
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 488:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3633
		{
			var UserName = yyDollar[3].str
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 489:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3641
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3645
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 491:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3650
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3654
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3670
		{
			yyLOCAL = tree.NewUserMiscOptionAccountUnlock()
		}
		yyVAL.union = yyLOCAL
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3674
		{
			yyLOCAL = tree.NewUserMiscOptionAccountLock()
		}
		yyVAL.union = yyLOCAL
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3678
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNone()
		}
		yyVAL.union = yyLOCAL
	case 496:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3682
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireInterval(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3689
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNever()
		}
		yyVAL.union = yyLOCAL
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3693
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireDefault()
		}
		yyVAL.union = yyLOCAL
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3697
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryDefault()
		}
		yyVAL.union = yyLOCAL
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3701
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 501:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3708
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalDefault()
		}
		yyVAL.union = yyLOCAL
	case 502:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3712
		{
			var Value = yyDollar[4].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3719
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentNone()
		}
		yyVAL.union = yyLOCAL
	case 504:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3723
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentDefault()
		}
		yyVAL.union = yyLOCAL
	case 505:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3727
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentOptional()
		}
		yyVAL.union = yyLOCAL
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3731
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionFailedLoginAttempts(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3738
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3745
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeUnbounded()
		}
		yyVAL.union = yyLOCAL
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:3751
		{
			yyVAL.item = nil
		}
	case 510:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3756
		{
			yyVAL.item = nil
		}
	case 545:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3800
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3809
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3817
		{
			yyLOCAL = &tree.ShowSnapShots{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3825
		{
			yyLOCAL = &tree.ShowPitr{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3833
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 550:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3837
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 551:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3841
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{
				&tree.Role{UserName: yyDollar[5].cstrUnion().Compare()},
			}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 552:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3852
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3856
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 554:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3862
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 555:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3867
		{
		}
	case 557:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3871
		{
		}
	case 559:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3876
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 560:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3886
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3896
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3904
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3910
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 564:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3916
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 565:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3922
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 566:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3928
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 567:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3934
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 568:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3940
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3949
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3953
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3957
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3961
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3965
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3969
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3973
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3977
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 577:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3983
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 578:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3992
		{
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3994
		{
		}
	case 583:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4003
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 584:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4013
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 585:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4022
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4026
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4030
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4036
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4042
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 590:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4048
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 591:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4054
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 592:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4063
		{
			yyLOCAL = &tree.ShowTables{
				Open:     false,
				Full:     yyDollar[2].fullOptUnion(),
				DBName:   yyDollar[4].str,
				Like:     yyDollar[5].comparisionExprUnion(),
				Where:    yyDollar[6].whereUnion(),
				AtTsExpr: yyDollar[7].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 593:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4074
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 594:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4086
		{
			yyLOCAL = &tree.ShowDatabases{
				Like:     yyDollar[3].comparisionExprUnion(),
				Where:    yyDollar[4].whereUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 595:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4094
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 596:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4100
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 597:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4112
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4126
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4132
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4138
		{
			yyLOCAL = &tree.ShowAccountUpgrade{}
		}
		yyVAL.union = yyLOCAL
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4145
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 602:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4149
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 603:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4154
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 604:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4158
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4162
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4167
		{
			yyVAL.str = ""
		}
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4171
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4177
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4192
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4196
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4202
		{
			yyLOCAL = &tree.ShowCreateTable{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4210
		{
			yyLOCAL = &tree.ShowCreateView{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4217
		{
			yyLOCAL = &tree.ShowCreateDatabase{IfNotExists: yyDollar[4].ifNotExistsUnion(), Name: yyDollar[5].str}
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4221
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4227
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4233
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4238
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4246
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4252
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4257
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4263
		{
			yyLOCAL = tree.NewUnresolvedObjectName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4269
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4273
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 645:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4300
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4308
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4316
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4324
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4328
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:4334
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption *tree.AccountIdentified
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 651:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4347
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4355
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4364
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 654:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4370
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 655:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4378
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 656:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4386
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 657:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4394
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 658:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4400
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 659:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4408
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 660:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4414
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 661:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4422
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 662:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4428
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 665:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4438
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 666:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4443
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 667:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4450
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 668:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4466
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 669:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4479
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4490
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 671:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4494
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 672:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4500
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 673:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4506
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4515
		{
		}
	case 675:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4517
		{
		}
	case 676:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4520
		{
		}
	case 681:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4529
		{
		}
	case 683:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4533
		{
		}
	case 685:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4538
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 686:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4547
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4554
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 688:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4560
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4568
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 690:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4575
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 691:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4582
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 692:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4602
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 693:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4610
		{
			ins := yyDollar[5].insertUnion()
			ins.Table = yyDollar[3].tableExprUnion()
			ins.PartitionNames = yyDollar[4].identifierListUnion()
			ins.OnDuplicateUpdate = []*tree.UpdateExpr{nil}
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4620
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 695:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4624
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 696:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4630
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4637
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 698:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4643
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 699:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4651
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 700:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4658
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 701:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4665
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 702:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4684
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 703:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4688
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 704:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4692
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 705:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4697
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4701
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4705
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:4711
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4720
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4724
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4730
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 712:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4734
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4740
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4744
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4750
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4755
		{
		}
	case 718:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4759
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4766
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 721:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4770
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4777
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4782
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4786
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4792
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4796
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4802
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4806
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4811
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4815
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4828
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4839
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4850
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4872
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:4895
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 737:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:4903
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4912
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4916
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4929
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 741:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4933
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4938
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4942
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4949
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4954
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4961
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4967
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4971
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4975
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4979
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4983
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4987
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4992
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4996
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5002
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:5012
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5027
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5031
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5045
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5049
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5055
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5064
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5068
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5072
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5076
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5080
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5086
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5093
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5102
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5106
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:5112
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5120
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5124
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5129
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5133
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5139
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5143
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5147
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5152
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5156
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5162
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5168
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5172
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:5178
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5183
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5187
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5191
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5196
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5200
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5204
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5209
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5213
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5221
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5225
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5229
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5243
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5247
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5257
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5267
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5277
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5289
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5297
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5305
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5314
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5322
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5330
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5338
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5346
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5354
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5362
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5370
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5378
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5388
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5399
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5413
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5417
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5421
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 819:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5426
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5430
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5434
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5443
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5447
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5452
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5456
		{
			yyLOCAL = tree.GroupBy(yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5461
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5465
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5471
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5475
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5481
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5485
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5489
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5493
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion(), yyDollar[3].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5498
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix, nil)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5506
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5512
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5520
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5528
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].joinTableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5538
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5544
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5553
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5562
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5571
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5581
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 849:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5585
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 850:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5595
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 851:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5599
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 852:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5603
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 853:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5607
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 854:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5613
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5623
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5627
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5633
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5639
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5643
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5649
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5655
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 862:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5659
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 863:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5663
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 864:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5667
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS_L2
		}
	case 865:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5673
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5677
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 867:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5683
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 868:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5687
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5693
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 870:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5697
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5703
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 872:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5707
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 873:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5717
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 874:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5730
		{
			yyLOCAL = yyDollar[2].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:5736
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 876:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5742
		{
			name := tree.NewUnresolvedName(yyDollar[1].cstrUnion())
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:     tree.FuncName2ResolvableFunctionReference(name),
					FuncName: yyDollar[1].cstrUnion(),
					Exprs:    yyDollar[3].exprsUnion(),
					Type:     tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 877:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:5756
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 878:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5767
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5774
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 881:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5778
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 882:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:5784
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 883:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5794
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 884:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5798
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 885:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5802
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 886:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5807
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 887:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5811
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 888:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5815
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 889:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5819
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 890:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5824
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5828
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 892:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5832
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5836
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 894:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5840
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 895:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5845
		{
			yyVAL.str = ""
		}
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5849
		{
			yyVAL.str = yyDollar[1].str
		}
	case 897:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5853
		{
			yyVAL.str = yyDollar[2].str
		}
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5859
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5863
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].str)
		}
	case 900:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5868
		{
			yyLOCAL = tree.NewCStr("", 1)
		}
		yyVAL.union = yyLOCAL
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5872
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 902:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5876
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5880
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 904:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5884
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5890
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 927:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5931
		{
			var Language = yyDollar[3].str
			var Name = tree.Identifier(yyDollar[5].str)
			var Filename = tree.Identifier(yyDollar[7].str)
			yyLOCAL = tree.NewCreateExtension(
				Language,
				Name,
				Filename,
			)
		}
		yyVAL.union = yyLOCAL
	case 928:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5944
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 929:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5950
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 930:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5956
		{
			var Name = yyDollar[3].procNameUnion()
			var Args = yyDollar[5].procArgsUnion()
			var Body = yyDollar[7].str
			yyLOCAL = tree.NewCreateProcedure(
				Name,
				Args,
				Body,
			)
		}
		yyVAL.union = yyLOCAL
	case 931:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:5969
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 932:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:5974
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 933:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5981
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 935:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5988
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 936:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5992
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 937:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:5998
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 938:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:6004
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 939:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6009
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 940:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6013
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 941:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6017
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 942:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6021
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 943:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6028
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				goto ret1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				goto ret1
			}

			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[4].functionNameUnion()
			var Args = yyDollar[6].funcArgsUnion()
			var ReturnType = yyDollar[9].funcReturnUnion()
			var Language = yyDollar[11].str
			var Import = yyDollar[12].boolValUnion()
			var Body = yyDollar[13].str
			var Handler = yyDollar[14].str

			yyLOCAL = tree.NewCreateFunction(
				Replace,
				Name,
				Args,
				ReturnType,
				Language,
				Import,
				Body,
				Handler,
			)
		}
		yyVAL.union = yyLOCAL
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6061
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 945:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6066
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 946:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6073
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 948:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6080
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 949:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6084
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 950:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:6090
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 951:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6096
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 952:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6100
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 953:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6104
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 954:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6110
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 955:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:6116
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 956:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6122
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 957:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6126
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 958:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6132
		{
			yyVAL.str = ""
		}
	case 960:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6139
		{
			yyVAL.str = yyDollar[2].str
		}
	case 961:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6145
		{
			var Replace bool
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 962:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6160
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 963:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6177
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = yyDollar[4].exprUnion()
			var AuthOption = yyDollar[5].accountAuthOptionUnion()
			var StatusOption = yyDollar[6].accountStatusUnion()
			var Comment = yyDollar[7].accountCommentUnion()
			yyLOCAL = tree.NewCreateAccount(
				IfNotExists,
				Name,
				AuthOption,
				StatusOption,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6194
		{
			yyVAL.str = yyDollar[1].str
		}
	case 965:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6198
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 966:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6204
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 967:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6208
		{
			yyVAL.str = "DEFINER = "
		}
	case 968:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6212
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 969:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6217
		{
			yyVAL.str = ""
		}
	case 970:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:6221
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 976:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6235
		{
			yyVAL.str = ""
		}
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6243
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6249
		{
			var Str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6254
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 982:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:6260
		{
			var Equal = yyDollar[2].str
			var AdminName = yyDollar[3].exprUnion()
			var IdentifiedType = yyDollar[4].accountIdentifiedUnion()
			yyLOCAL = *tree.NewAccountAuthOption(
				Equal,
				AdminName,
				IdentifiedType,
			)
		}
		yyVAL.union = yyLOCAL
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6273
		{
			var Str = yyDollar[1].str
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6278
		{
			var Str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6283
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 986:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6289
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 987:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6296
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 988:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6303
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByRandomPassword,
				nil,
			)
		}
		yyVAL.union = yyLOCAL
	case 989:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6310
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 990:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6317
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 991:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6325
		{
			as := tree.NewAccountStatus()
			as.Exist = false
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 992:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6331
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusOpen
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 993:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6338
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusSuspend
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 994:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6345
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusRestricted
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 995:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6353
		{
			ac := tree.NewAccountComment()
			ac.Exist = false
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 996:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6359
		{
			ac := tree.NewAccountComment()
			ac.Exist = true
			ac.Comment = yyDollar[2].str
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 997:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6368
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Users = yyDollar[4].usersUnion()
			var Role = yyDollar[5].accountRoleUnion()
			var MiscOpt = yyDollar[6].userMiscOptionUnion()
			var CommentOrAttribute = yyDollar[7].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewCreateUser(
				IfNotExists,
				Users,
				Role,
				MiscOpt,
				CommentOrAttribute,
			)
		}
		yyVAL.union = yyLOCAL
	case 998:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6385
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].cstrUnion().Compare())
			var Table = tree.Identifier("")
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				Table,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 999:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6402
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier("")
			var Table = tree.Identifier(yyDollar[6].cstrUnion().Compare())
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				Table,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1000:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6421
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Url = yyDollar[5].str
			var Credentials = yyDollar[6].stageCredentialsUnion()
			var Status = yyDollar[7].stageStatusUnion()
			var Comment = yyDollar[8].stageCommentUnion()
			yyLOCAL = tree.NewCreateStage(
				IfNotExists,
				Name,
				Url,
				Credentials,
				Status,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1001:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6439
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1002:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6445
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1003:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6452
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1004:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6460
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1005:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6466
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6474
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1007:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6480
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6488
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6494
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6503
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6507
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6512
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6516
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6523
		{
			yyVAL.str = yyDollar[3].str
		}
	case 1015:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6528
		{
			yyVAL.str = ""
		}
	case 1016:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6532
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1017:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6538
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6551
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var dbName = yyDollar[6].str
			var comment = yyDollar[7].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, dbName, comment)
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6561
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6565
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6571
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6577
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6583
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6590
		{
			yyVAL.str = ""
		}
	case 1025:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6594
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1026:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6600
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6608
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6616
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropSnapShot(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6624
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPitr(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6632
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1031:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6637
		{
			var Exist = false
			var IsComment bool
			var Str string
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)

		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6649
		{
			var Exist = true
			var IsComment = true
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1033:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6660
		{
			var Exist = true
			var IsComment = false
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1034:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6769
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6773
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6779
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6792
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6796
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6802
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6815
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 1041:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6819
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6823
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6828
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1044:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6832
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 1045:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6838
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1046:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6845
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 1047:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6851
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1048:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6860
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1050:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6867
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewCreateRole(
				IfNotExists,
				Roles,
			)
		}
		yyVAL.union = yyLOCAL
	case 1051:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:6878
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1052:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:6882
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 1053:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:6888
		{
			var UserName = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 1054:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6897
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1055:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6901
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1056:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6905
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6910
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6914
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6918
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6922
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6928
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = tree.NewIndexOption()
				io.IType = yyDollar[5].indexTypeUnion()
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = tree.NewIndexOption()
				io.IType = tree.INDEX_TYPE_INVALID
			}
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Table = yyDollar[7].tableNameUnion()
			var ifNotExists = false
			var IndexCat = yyDollar[2].indexCategoryUnion()
			var KeyParts = yyDollar[9].keyPartsUnion()
			var IndexOption = io
			var MiscOption []tree.MiscOption
			yyLOCAL = tree.NewCreateIndex(
				Name,
				Table,
				ifNotExists,
				IndexCat,
				KeyParts,
				IndexOption,
				MiscOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6959
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6963
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6989
		{
			io := tree.NewIndexOption()
			io.KeyBlockSize = uint64(yyDollar[3].item.(int64))
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6995
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}

			io := tree.NewIndexOption()
			io.AlgoParamList = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7007
		{
			io := tree.NewIndexOption()
			io.AlgoParamVectorOpType = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7013
		{
			io := tree.NewIndexOption()
			io.Comment = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7019
		{
			io := tree.NewIndexOption()
			io.ParserName = yyDollar[3].cstrUnion().Compare()
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7025
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_VISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7031
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_INVISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7039
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7043
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7049
		{
			// Order is parsed but just ignored as MySQL dtree.
			var ColName = yyDollar[1].unresolvedNameUnion()
			var Length = int(yyDollar[2].lengthOptUnion())
			var Direction = yyDollar[3].directionUnion()
			var Expr tree.Expr
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7063
		{
			var ColName *tree.UnresolvedName
			var Length int
			var Expr = yyDollar[2].exprUnion()
			var Direction = yyDollar[4].directionUnion()
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7077
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7081
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7085
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7089
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7093
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7097
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7101
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7107
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].str)
			var SubscriptionOption = yyDollar[5].subscriptionOptionUnion()
			var CreateOptions = yyDollar[6].createOptionsUnion()
			yyLOCAL = tree.NewCreateDatabase(
				IfNotExists,
				Name,
				SubscriptionOption,
				CreateOptions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7122
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7126
		{
			var From = tree.Identifier(yyDollar[2].str)
			var Publication = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewSubscriptionOption(From, Publication)
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7137
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7141
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7146
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7150
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7156
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7160
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7166
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Charset = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCharset(
				IsDefault,
				Charset,
			)
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7175
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Collate = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCollate(
				IsDefault,
				Collate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7184
		{
			var Encrypt = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionEncryption(Encrypt)
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7190
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1097:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7194
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1098:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7200
		{
			var TableName = yyDollar[4].tableNameUnion()
			var Options = yyDollar[7].connectorOptionsUnion()
			yyLOCAL = tree.NewCreateConnector(
				TableName,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7211
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7217
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1101:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7235
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1102:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7253
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1103:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7271
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			var SourceName = yyDollar[5].tableNameUnion()
			var Defs = yyDollar[7].tableDefsUnion()
			var Options = yyDollar[9].tableOptionsUnion()
			yyLOCAL = tree.NewCreateSource(
				Replace,
				IfNotExists,
				SourceName,
				Defs,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7287
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1105:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7291
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7300
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7312
		{
			t := tree.NewCreateTable()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Param = yyDollar[9].loadParamUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7321
		{
			t := tree.NewCreateTable()
			t.IsClusterTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7333
		{
			t := tree.NewCreateTable()
			t.IsDynamicTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			t.DTOptions = yyDollar[8].tableOptionsUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7343
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[6].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7353
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[9].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7364
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1113:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7374
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[10].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1114:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7385
		{
			t := tree.NewCreateTable()
			t.IsAsLike = true
			t.Table = *yyDollar[5].tableNameUnion()
			t.LikeTableName = *yyDollar[7].tableNameUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1115:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7393
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.SubscriptionOption = yyDollar[6].subscriptionOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1116:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7404
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7411
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7421
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7434
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7442
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1121:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7451
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7460
		{
			yyVAL.str = ""
		}
	case 1123:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:7464
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1124:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7470
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7474
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1126:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7479
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7483
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:7490
		{
			yyLOCAL = &tree.TailParameter{
				Charset:      yyDollar[1].str,
				Fields:       yyDollar[2].fieldsUnion(),
				Lines:        yyDollar[3].linesUnion(),
				IgnoredLines: uint64(yyDollar[4].int64ValUnion()),
				ColumnList:   yyDollar[5].loadColumnsUnion(),
				Assignments:  yyDollar[6].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7502
		{
			yyVAL.str = ""
		}
	case 1130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7506
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1131:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7512
		{
			var Name = yyDollar[4].tableNameUnion()
			var Type = yyDollar[5].columnTypeUnion()
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var IncrementBy = yyDollar[6].incrementByOptionUnion()
			var MinValue = yyDollar[7].minValueOptionUnion()
			var MaxValue = yyDollar[8].maxValueOptionUnion()
			var StartWith = yyDollar[9].startWithOptionUnion()
			var Cycle = yyDollar[10].boolValUnion()
			yyLOCAL = tree.NewCreateSequence(
				Name,
				Type,
				IfNotExists,
				IncrementBy,
				MinValue,
				MaxValue,
				StartWith,
				Cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 1132:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7533
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1133:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7547
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7551
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7555
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7561
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7565
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7572
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1139:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7579
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1140:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7586
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7593
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7597
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7601
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7605
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7609
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7616
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7623
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7627
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7634
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1150:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7641
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7645
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7651
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7657
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7661
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1155:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7668
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1156:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7675
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7682
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7689
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1159:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7693
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7698
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7702
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1162:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7706
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7711
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7715
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()
			yyLOCAL = tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1165:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7728
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7732
		{
			var ColumnList = []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)

		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7740
		{
			var ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7748
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7752
		{
			var IsSubPartition = true
			var PType = yyDollar[3].partitionByUnion()
			var Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = tree.NewPartitionBy2(
				IsSubPartition,
				PType,
				Num,
			)
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7764
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7768
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7774
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7778
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7784
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options []tree.TableOption
			var Subs = yyDollar[4].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1175:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7797
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options = yyDollar[4].tableOptionsUnion()
			var Subs = yyDollar[5].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7811
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7815
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7821
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7825
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:7831
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options []tree.TableOption
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1181:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:7840
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options = yyDollar[3].tableOptionsUnion()
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7851
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7855
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1184:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7860
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7864
		{
			expr := tree.NewMaxValue()
			var valueList = tree.Exprs{expr}
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7870
		{
			var valueList = yyDollar[5].exprsUnion()
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7875
		{
			var valueList = yyDollar[4].exprsUnion()
			yyLOCAL = tree.NewValuesIn(
				valueList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7883
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7887
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7897
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7901
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7912
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7920
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1194:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7928
		{
			listTyp := tree.NewListType()
			listTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7936
		{
			listTyp := tree.NewListType()
			listTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7947
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1198:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7956
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			keyTyp.ColumnList = yyDollar[5].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7966
		{
			Linear := yyDollar[1].boolValUnion()
			Expr := yyDollar[4].exprUnion()
			hashTyp := tree.NewHashType(Linear, Expr)
			yyLOCAL = tree.NewPartitionBy(
				hashTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1200:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7976
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1201:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7980
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7985
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7989
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1204:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:7995
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1205:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:7999
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8005
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1207:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8014
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1208:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8024
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8028
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1210:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8034
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1211:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8038
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1212:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8044
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1213:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8053
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1214:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8063
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1215:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8067
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8073
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8077
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8081
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8087
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1220:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8091
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1221:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8095
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1222:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8099
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1223:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8103
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1224:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8107
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1225:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8111
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8116
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1227:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8120
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1228:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8124
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1229:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8128
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1230:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8132
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1231:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8136
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1232:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8140
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1233:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8144
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1234:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8148
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1235:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8152
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1236:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8156
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1237:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8160
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1238:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8164
		{
			t := tree.NewTableOptionPackKeys()
			t.Value = yyDollar[3].item.(int64)
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1239:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8170
		{
			t := tree.NewTableOptionPackKeys()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1240:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8176
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1241:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8180
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1242:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8184
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1243:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8188
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1244:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8192
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1245:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8198
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1246:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8204
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1247:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8210
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1248:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8216
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1249:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8222
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1250:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8228
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1251:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8232
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1252:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8236
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1253:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8240
		{
			var Preperties = yyDollar[3].propertiesUnion()
			yyLOCAL = tree.NewTableOptionProperties(Preperties)
		}
		yyVAL.union = yyLOCAL
	case 1254:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8247
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1255:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8251
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1256:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:8257
		{
			var Key = yyDollar[1].str
			var Value = yyDollar[3].str
			yyLOCAL = *tree.NewProperty(
				Key,
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 1257:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8268
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8272
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1259:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8278
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1260:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8282
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1261:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8286
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1262:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8290
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1263:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8294
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1264:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8298
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1269:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8312
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1270:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8316
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8325
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[2].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8331
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[4].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8339
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8343
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPTIME,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1275:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8350
		{
			var Str = yyDollar[4].cstrUnion().Compare()
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yylex.(*Lexer).GetDbOrTblName(yyDollar[4].cstrUnion().Origin()),
				Expr:         tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8359
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yyDollar[4].str,
				Expr:         tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8367
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATMOTIMESTAMP,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1278:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8375
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1280:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8382
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1281:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8386
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1282:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8392
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1283:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8396
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1284:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8400
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1285:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8406
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1286:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8410
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1287:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8416
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1288:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8429
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1289:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8442
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid the type of index")
					goto ret1
				}
			}

			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1290:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8481
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid type of index")
					goto ret1
				}
			}
			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1291:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8521
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1292:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8535
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1293:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8541
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1294:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8554
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1295:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8567
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1296:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8580
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1297:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8593
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var KeyParts = yyDollar[6].keyPartsUnion()
			var Name = yyDollar[4].str
			var Refer = yyDollar[8].attributeReferenceUnion()
			var Empty = true
			yyLOCAL = tree.NewForeignKey(
				IfNotExists,
				KeyParts,
				Name,
				Refer,
				Empty,
			)
		}
		yyVAL.union = yyLOCAL
	case 1298:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8608
		{
			var Expr = yyDollar[3].exprUnion()
			var Enforced = yyDollar[5].boolValUnion()
			yyLOCAL = tree.NewCheckIndex(
				Expr,
				Enforced,
			)
		}
		yyVAL.union = yyLOCAL
	case 1299:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8618
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1301:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8624
		{
			yyVAL.str = ""
		}
	case 1302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8628
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1305:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8638
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1306:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8644
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1307:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8650
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1318:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8671
		{
			yyVAL.str = ""
		}
	case 1319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8675
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1320:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:8681
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1321:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8687
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1322:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8691
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1323:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8696
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1324:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8704
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1325:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8708
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1326:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8712
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1327:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8716
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1328:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8722
		{
			yyLOCAL = yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
		}
		yyVAL.union = yyLOCAL
	case 1329:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8728
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1330:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8732
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1331:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8737
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1332:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8744
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1333:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8748
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1334:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8754
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1335:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8758
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1336:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8764
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1337:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8768
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1338:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8772
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1339:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8776
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1340:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8780
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1341:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8784
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1342:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8789
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1343:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8793
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1344:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8797
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1345:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8801
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1346:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8805
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1347:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8809
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1348:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8813
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1349:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8817
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1350:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8821
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1351:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8825
		{
			name := tree.NewUnresolvedColName(yyDollar[3].str)
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[3].str, 1),
				Exprs:    es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1352:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8839
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1353:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8843
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1354:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8847
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1355:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8851
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1356:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8855
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1357:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8859
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1358:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8865
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1359:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8869
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1360:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8874
		{
			yyVAL.str = ""
		}
	case 1361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8878
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8884
		{
			yyVAL.str = ""
		}
	case 1363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8888
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1364:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:8894
		{
			var TableName = yyDollar[2].tableNameUnion()
			var KeyParts = yyDollar[3].keyPartsUnion()
			var Match = yyDollar[4].matchTypeUnion()
			var OnDelete = yyDollar[5].referenceOnRecordUnion().OnDelete
			var OnUpdate = yyDollar[5].referenceOnRecordUnion().OnUpdate
			yyLOCAL = tree.NewAttributeReference(
				TableName,
				KeyParts,
				Match,
				OnDelete,
				OnUpdate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1365:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8911
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1366:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8918
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1367:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8925
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1368:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8932
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1369:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8939
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1370:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8948
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1371:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8954
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1372:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8960
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1373:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8964
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1374:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8968
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1375:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8972
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1376:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8976
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1377:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8981
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1379:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8988
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1380:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8992
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1381:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8996
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1382:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9001
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1383:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9005
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1384:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9010
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1385:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9014
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1392:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:9030
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1393:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9036
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1394:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9040
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1395:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9044
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1396:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9048
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1397:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9052
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1398:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9056
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1399:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9060
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1400:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9064
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1401:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9068
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1402:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9072
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1403:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9076
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1404:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9080
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1405:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9084
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1406:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9090
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1407:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9094
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1408:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9098
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1409:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9102
		{
			yyLOCAL = tree.NewParentExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1410:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9106
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1411:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9110
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1412:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9114
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1413:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9118
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1414:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9122
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1415:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9126
		{
			hint := strings.ToLower(yyDollar[2].cstrUnion().Compare())
			switch hint {
			case "d":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "DATETIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "t":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimeFamily,
						FamilyString: "TIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "ts":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "TIMESTAMP",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			default:
				yylex.Error("Invalid type")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1416:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9168
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1417:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9172
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1418:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9176
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1419:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9181
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1420:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9189
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1421:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9193
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1422:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9197
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1423:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9201
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1424:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9205
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1425:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9215
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1426:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9219
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1427:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9223
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1428:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9227
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1429:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9231
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1430:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9235
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1431:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9239
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1432:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9245
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1433:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9254
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1434:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9263
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1435:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9274
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1436:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9284
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1437:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9294
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1438:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9303
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1439:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9313
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1440:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9323
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1441:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9333
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1442:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9342
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1443:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9352
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1444:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9356
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1445:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9361
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1446:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9365
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1447:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9371
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1448:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9375
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1449:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:9381
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9390
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1451:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9402
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1452:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9419
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1454:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9436
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1455:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9449
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1456:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9462
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1457:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9474
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1458:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9488
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1459:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9503
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1460:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9518
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1461:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9535
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1462:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9550
		{
		}
	case 1466:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9557
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1467:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9561
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1468:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9565
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1469:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9571
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1470:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9575
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1471:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9579
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1472:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9583
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1473:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9589
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1474:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9593
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1475:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9597
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1476:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9603
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1477:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9611
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1478:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9621
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1479:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9625
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1480:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9632
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1481:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9637
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1482:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9641
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1483:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9646
		{
			yyVAL.str = ","
		}
	case 1484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9650
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1485:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9655
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9659
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1487:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9664
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1489:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9671
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1490:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9697
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1491:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9709
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1492:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9721
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1493:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9732
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1494:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9743
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1495:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9754
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1496:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9764
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1497:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9774
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1498:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9785
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1499:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9796
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1500:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9807
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1501:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9818
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1502:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9829
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1503:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9840
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1504:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9851
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1505:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9862
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1506:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9873
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1507:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9884
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1508:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9895
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1509:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9906
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1510:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9917
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1511:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9928
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1515:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9946
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1516:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9955
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1517:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9964
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1518:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9973
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1519:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9982
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1520:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9993
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1521:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10002
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[4].exprUnion()},
				Type:     yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1522:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10012
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1523:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10021
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1524:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10030
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1525:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10039
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1526:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10048
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumValWithType(constant.MakeInt64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1527:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10060
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumValWithType(constant.MakeInt64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1528:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10071
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumValWithType(constant.MakeInt64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1529:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10084
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumValWithType(constant.MakeInt64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1530:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10096
		{
			column := tree.NewUnresolvedColName(yyDollar[3].str)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10119
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1566:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10155
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1567:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10168
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1568:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10181
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1569:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10193
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1570:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10202
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1571:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10210
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1572:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10218
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1573:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10231
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1574:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10240
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1575:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10251
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1576:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10262
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1577:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10271
		{
			cn := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1578:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10283
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1579:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10293
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1580:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10303
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1581:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10312
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1582:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10323
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1583:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10332
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1584:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10342
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1585:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10351
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1586:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10360
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1587:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10370
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1588:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10374
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1589:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10380
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1590:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10384
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(ival), str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1597:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10403
		{
		}
	case 1598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10405
		{
		}
	case 1632:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10446
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1633:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10458
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1634:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10462
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1635:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10466
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1636:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:10472
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1637:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10477
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1638:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10481
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1639:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10487
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1640:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10491
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1641:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10497
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1642:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10501
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1643:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10508
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1644:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10512
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1645:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10516
		{
			name := tree.NewUnresolvedColName("concat")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr("concat", 1),
				Exprs:    tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1646:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10525
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1647:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10529
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1648:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10533
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1649:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10538
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1650:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10542
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1651:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10548
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1652:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10552
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1653:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10556
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1654:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10560
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1655:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10564
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1656:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10568
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1657:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10572
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1658:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10576
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1659:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10580
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1660:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10584
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1662:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10592
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1663:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10596
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1664:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10600
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1665:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10604
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1666:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10608
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1667:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10612
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1668:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10616
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1669:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10620
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1670:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10624
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1671:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10628
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1673:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10634
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1674:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10638
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1675:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10644
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1676:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10648
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1677:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10655
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1678:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10659
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1679:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10663
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1680:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10669
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1681:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10673
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1682:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10677
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1683:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10681
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1684:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10685
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1685:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10689
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1686:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10693
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1687:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10699
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1688:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10703
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1689:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10707
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1690:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10711
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1691:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10717
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1692:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10730
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1693:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10735
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1694:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10741
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1695:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10745
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1696:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10758
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1697:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10763
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1698:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10767
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1699:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10771
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1700:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10775
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1701:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10779
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1702:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10786
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1703:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10790
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1704:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10794
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1705:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10798
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1706:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10805
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1710:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10816
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1711:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10821
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1712:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10827
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1713:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10839
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1714:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10851
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1715:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10863
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1716:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10876
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1717:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10889
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1718:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10902
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1719:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10915
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1720:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10928
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1721:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10941
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1722:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10954
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1723:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10967
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1724:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10980
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1725:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10993
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1726:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11008
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1727:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11035
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1728:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11077
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1729:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11113
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1730:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11149
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1731:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11166
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1732:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11178
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1733:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11198
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1734:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11218
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1735:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11238
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1736:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11254
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1737:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11267
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1738:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11280
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1739:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11293
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1740:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11306
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1741:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11318
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1742:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11330
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1743:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11342
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1744:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11354
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1745:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11366
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1746:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11378
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1747:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11390
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1748:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11402
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1749:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11414
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1750:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11427
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1751:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11440
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1752:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11453
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1753:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11466
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1754:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11481
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1755:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11489
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1756:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11498
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1757:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11508
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1758:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11531
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1759:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11536
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1760:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11542
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1762:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11549
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1763:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11553
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1764:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11558
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1765:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11562
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1766:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11568
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1767:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11574
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1768:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11581
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1769:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11588
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1770:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11597
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1771:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11604
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1772:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11611
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1773:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11620
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1774:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11624
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1775:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11628
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1776:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11634
		{
		}
	case 1777:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11636
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1781:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11646
		{
			yyVAL.str = ""
		}
	case 1782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:11650
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
