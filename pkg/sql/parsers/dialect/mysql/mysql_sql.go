// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"go/constant"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const CONNECT = 57367
const MANAGE = 57368
const GRANTS = 57369
const OWNERSHIP = 57370
const REFERENCE = 57371
const LOWER_THAN_SET = 57372
const SET = 57373
const ALL = 57374
const DISTINCT = 57375
const DISTINCTROW = 57376
const AS = 57377
const EXISTS = 57378
const ASC = 57379
const DESC = 57380
const INTO = 57381
const DUPLICATE = 57382
const DEFAULT = 57383
const LOCK = 57384
const KEYS = 57385
const NULLS = 57386
const FIRST = 57387
const LAST = 57388
const AFTER = 57389
const INSTANT = 57390
const INPLACE = 57391
const COPY = 57392
const DISABLE = 57393
const ENABLE = 57394
const UNDEFINED = 57395
const MERGE = 57396
const TEMPTABLE = 57397
const DEFINER = 57398
const INVOKER = 57399
const SQL = 57400
const SECURITY = 57401
const CASCADED = 57402
const VALUES = 57403
const NEXT = 57404
const VALUE = 57405
const SHARE = 57406
const MODE = 57407
const SQL_NO_CACHE = 57408
const SQL_CACHE = 57409
const JOIN = 57410
const STRAIGHT_JOIN = 57411
const LEFT = 57412
const RIGHT = 57413
const INNER = 57414
const OUTER = 57415
const CROSS = 57416
const NATURAL = 57417
const USE = 57418
const FORCE = 57419
const CROSS_L2 = 57420
const LOWER_THAN_ON = 57421
const ON = 57422
const USING = 57423
const SUBQUERY_AS_EXPR = 57424
const LOWER_THAN_STRING = 57425
const ID = 57426
const AT_ID = 57427
const AT_AT_ID = 57428
const STRING = 57429
const VALUE_ARG = 57430
const LIST_ARG = 57431
const COMMENT = 57432
const COMMENT_KEYWORD = 57433
const QUOTE_ID = 57434
const STAGE = 57435
const CREDENTIALS = 57436
const STAGES = 57437
const SNAPSHOTS = 57438
const INTEGRAL = 57439
const HEX = 57440
const FLOAT = 57441
const HEXNUM = 57442
const BIT_LITERAL = 57443
const NULL = 57444
const TRUE = 57445
const FALSE = 57446
const LOWER_THAN_CHARSET = 57447
const CHARSET = 57448
const UNIQUE = 57449
const KEY = 57450
const OR = 57451
const PIPE_CONCAT = 57452
const XOR = 57453
const AND = 57454
const NOT = 57455
const BETWEEN = 57456
const CASE = 57457
const WHEN = 57458
const THEN = 57459
const ELSE = 57460
const END = 57461
const ELSEIF = 57462
const LOWER_THAN_EQ = 57463
const LE = 57464
const GE = 57465
const NE = 57466
const NULL_SAFE_EQUAL = 57467
const IS = 57468
const LIKE = 57469
const REGEXP = 57470
const IN = 57471
const ASSIGNMENT = 57472
const ILIKE = 57473
const SHIFT_LEFT = 57474
const SHIFT_RIGHT = 57475
const DIV = 57476
const MOD = 57477
const UNARY = 57478
const COLLATE = 57479
const BINARY = 57480
const UNDERSCORE_BINARY = 57481
const INTERVAL = 57482
const OUT = 57483
const INOUT = 57484
const BEGIN = 57485
const START = 57486
const TRANSACTION = 57487
const COMMIT = 57488
const ROLLBACK = 57489
const WORK = 57490
const CONSISTENT = 57491
const SNAPSHOT = 57492
const CHAIN = 57493
const NO = 57494
const RELEASE = 57495
const PRIORITY = 57496
const QUICK = 57497
const BIT = 57498
const TINYINT = 57499
const SMALLINT = 57500
const MEDIUMINT = 57501
const INT = 57502
const INTEGER = 57503
const BIGINT = 57504
const INTNUM = 57505
const REAL = 57506
const DOUBLE = 57507
const FLOAT_TYPE = 57508
const DECIMAL = 57509
const NUMERIC = 57510
const DECIMAL_VALUE = 57511
const TIME = 57512
const TIMESTAMP = 57513
const DATETIME = 57514
const YEAR = 57515
const CHAR = 57516
const VARCHAR = 57517
const BOOL = 57518
const CHARACTER = 57519
const VARBINARY = 57520
const NCHAR = 57521
const TEXT = 57522
const TINYTEXT = 57523
const MEDIUMTEXT = 57524
const LONGTEXT = 57525
const BLOB = 57526
const TINYBLOB = 57527
const MEDIUMBLOB = 57528
const LONGBLOB = 57529
const JSON = 57530
const ENUM = 57531
const UUID = 57532
const VECF32 = 57533
const VECF64 = 57534
const GEOMETRY = 57535
const POINT = 57536
const LINESTRING = 57537
const POLYGON = 57538
const GEOMETRYCOLLECTION = 57539
const MULTIPOINT = 57540
const MULTILINESTRING = 57541
const MULTIPOLYGON = 57542
const INT1 = 57543
const INT2 = 57544
const INT3 = 57545
const INT4 = 57546
const INT8 = 57547
const S3OPTION = 57548
const STAGEOPTION = 57549
const SQL_SMALL_RESULT = 57550
const SQL_BIG_RESULT = 57551
const SQL_BUFFER_RESULT = 57552
const LOW_PRIORITY = 57553
const HIGH_PRIORITY = 57554
const DELAYED = 57555
const CREATE = 57556
const ALTER = 57557
const DROP = 57558
const RENAME = 57559
const ANALYZE = 57560
const ADD = 57561
const RETURNS = 57562
const SCHEMA = 57563
const TABLE = 57564
const SEQUENCE = 57565
const INDEX = 57566
const VIEW = 57567
const TO = 57568
const IGNORE = 57569
const IF = 57570
const PRIMARY = 57571
const COLUMN = 57572
const CONSTRAINT = 57573
const SPATIAL = 57574
const FULLTEXT = 57575
const FOREIGN = 57576
const KEY_BLOCK_SIZE = 57577
const SHOW = 57578
const DESCRIBE = 57579
const EXPLAIN = 57580
const DATE = 57581
const ESCAPE = 57582
const REPAIR = 57583
const OPTIMIZE = 57584
const TRUNCATE = 57585
const MAXVALUE = 57586
const PARTITION = 57587
const REORGANIZE = 57588
const LESS = 57589
const THAN = 57590
const PROCEDURE = 57591
const TRIGGER = 57592
const STATUS = 57593
const VARIABLES = 57594
const ROLE = 57595
const PROXY = 57596
const AVG_ROW_LENGTH = 57597
const STORAGE = 57598
const DISK = 57599
const MEMORY = 57600
const CHECKSUM = 57601
const COMPRESSION = 57602
const DATA = 57603
const DIRECTORY = 57604
const DELAY_KEY_WRITE = 57605
const ENCRYPTION = 57606
const ENGINE = 57607
const MAX_ROWS = 57608
const MIN_ROWS = 57609
const PACK_KEYS = 57610
const ROW_FORMAT = 57611
const STATS_AUTO_RECALC = 57612
const STATS_PERSISTENT = 57613
const STATS_SAMPLE_PAGES = 57614
const DYNAMIC = 57615
const COMPRESSED = 57616
const REDUNDANT = 57617
const COMPACT = 57618
const FIXED = 57619
const COLUMN_FORMAT = 57620
const AUTO_RANDOM = 57621
const ENGINE_ATTRIBUTE = 57622
const SECONDARY_ENGINE_ATTRIBUTE = 57623
const INSERT_METHOD = 57624
const RESTRICT = 57625
const CASCADE = 57626
const ACTION = 57627
const PARTIAL = 57628
const SIMPLE = 57629
const CHECK = 57630
const ENFORCED = 57631
const RANGE = 57632
const LIST = 57633
const ALGORITHM = 57634
const LINEAR = 57635
const PARTITIONS = 57636
const SUBPARTITION = 57637
const SUBPARTITIONS = 57638
const CLUSTER = 57639
const TYPE = 57640
const ANY = 57641
const SOME = 57642
const EXTERNAL = 57643
const LOCALFILE = 57644
const URL = 57645
const PREPARE = 57646
const DEALLOCATE = 57647
const RESET = 57648
const EXTENSION = 57649
const INCREMENT = 57650
const CYCLE = 57651
const MINVALUE = 57652
const PUBLICATION = 57653
const SUBSCRIPTIONS = 57654
const PUBLICATIONS = 57655
const PROPERTIES = 57656
const PARSER = 57657
const VISIBLE = 57658
const INVISIBLE = 57659
const BTREE = 57660
const HASH = 57661
const RTREE = 57662
const BSI = 57663
const IVFFLAT = 57664
const MASTER = 57665
const ZONEMAP = 57666
const LEADING = 57667
const BOTH = 57668
const TRAILING = 57669
const UNKNOWN = 57670
const LISTS = 57671
const OP_TYPE = 57672
const REINDEX = 57673
const EXPIRE = 57674
const ACCOUNT = 57675
const ACCOUNTS = 57676
const UNLOCK = 57677
const DAY = 57678
const NEVER = 57679
const PUMP = 57680
const MYSQL_COMPATIBILITY_MODE = 57681
const UNIQUE_CHECK_ON_AUTOINCR = 57682
const MODIFY = 57683
const CHANGE = 57684
const SECOND = 57685
const ASCII = 57686
const COALESCE = 57687
const COLLATION = 57688
const HOUR = 57689
const MICROSECOND = 57690
const MINUTE = 57691
const MONTH = 57692
const QUARTER = 57693
const REPEAT = 57694
const REVERSE = 57695
const ROW_COUNT = 57696
const WEEK = 57697
const REVOKE = 57698
const FUNCTION = 57699
const PRIVILEGES = 57700
const TABLESPACE = 57701
const EXECUTE = 57702
const SUPER = 57703
const GRANT = 57704
const OPTION = 57705
const REFERENCES = 57706
const REPLICATION = 57707
const SLAVE = 57708
const CLIENT = 57709
const USAGE = 57710
const RELOAD = 57711
const FILE = 57712
const TEMPORARY = 57713
const ROUTINE = 57714
const EVENT = 57715
const SHUTDOWN = 57716
const NULLX = 57717
const AUTO_INCREMENT = 57718
const APPROXNUM = 57719
const SIGNED = 57720
const UNSIGNED = 57721
const ZEROFILL = 57722
const ENGINES = 57723
const LOW_CARDINALITY = 57724
const AUTOEXTEND_SIZE = 57725
const ADMIN_NAME = 57726
const RANDOM = 57727
const SUSPEND = 57728
const ATTRIBUTE = 57729
const HISTORY = 57730
const REUSE = 57731
const CURRENT = 57732
const OPTIONAL = 57733
const FAILED_LOGIN_ATTEMPTS = 57734
const PASSWORD_LOCK_TIME = 57735
const UNBOUNDED = 57736
const SECONDARY = 57737
const RESTRICTED = 57738
const USER = 57739
const IDENTIFIED = 57740
const CIPHER = 57741
const ISSUER = 57742
const X509 = 57743
const SUBJECT = 57744
const SAN = 57745
const REQUIRE = 57746
const SSL = 57747
const NONE = 57748
const PASSWORD = 57749
const SHARED = 57750
const EXCLUSIVE = 57751
const MAX_QUERIES_PER_HOUR = 57752
const MAX_UPDATES_PER_HOUR = 57753
const MAX_CONNECTIONS_PER_HOUR = 57754
const MAX_USER_CONNECTIONS = 57755
const FORMAT = 57756
const VERBOSE = 57757
const CONNECTION = 57758
const TRIGGERS = 57759
const PROFILES = 57760
const LOAD = 57761
const INLINE = 57762
const INFILE = 57763
const TERMINATED = 57764
const OPTIONALLY = 57765
const ENCLOSED = 57766
const ESCAPED = 57767
const STARTING = 57768
const LINES = 57769
const ROWS = 57770
const IMPORT = 57771
const DISCARD = 57772
const JSONTYPE = 57773
const MODUMP = 57774
const OVER = 57775
const PRECEDING = 57776
const FOLLOWING = 57777
const GROUPS = 57778
const DATABASES = 57779
const TABLES = 57780
const SEQUENCES = 57781
const EXTENDED = 57782
const FULL = 57783
const PROCESSLIST = 57784
const FIELDS = 57785
const COLUMNS = 57786
const OPEN = 57787
const ERRORS = 57788
const WARNINGS = 57789
const INDEXES = 57790
const SCHEMAS = 57791
const NODE = 57792
const LOCKS = 57793
const ROLES = 57794
const TABLE_NUMBER = 57795
const COLUMN_NUMBER = 57796
const TABLE_VALUES = 57797
const TABLE_SIZE = 57798
const NAMES = 57799
const GLOBAL = 57800
const PERSIST = 57801
const SESSION = 57802
const ISOLATION = 57803
const LEVEL = 57804
const READ = 57805
const WRITE = 57806
const ONLY = 57807
const REPEATABLE = 57808
const COMMITTED = 57809
const UNCOMMITTED = 57810
const SERIALIZABLE = 57811
const LOCAL = 57812
const EVENTS = 57813
const PLUGINS = 57814
const CURRENT_TIMESTAMP = 57815
const DATABASE = 57816
const CURRENT_TIME = 57817
const LOCALTIME = 57818
const LOCALTIMESTAMP = 57819
const UTC_DATE = 57820
const UTC_TIME = 57821
const UTC_TIMESTAMP = 57822
const REPLACE = 57823
const CONVERT = 57824
const SEPARATOR = 57825
const TIMESTAMPDIFF = 57826
const CURRENT_DATE = 57827
const CURRENT_USER = 57828
const CURRENT_ROLE = 57829
const SECOND_MICROSECOND = 57830
const MINUTE_MICROSECOND = 57831
const MINUTE_SECOND = 57832
const HOUR_MICROSECOND = 57833
const HOUR_SECOND = 57834
const HOUR_MINUTE = 57835
const DAY_MICROSECOND = 57836
const DAY_SECOND = 57837
const DAY_MINUTE = 57838
const DAY_HOUR = 57839
const YEAR_MONTH = 57840
const SQL_TSI_HOUR = 57841
const SQL_TSI_DAY = 57842
const SQL_TSI_WEEK = 57843
const SQL_TSI_MONTH = 57844
const SQL_TSI_QUARTER = 57845
const SQL_TSI_YEAR = 57846
const SQL_TSI_SECOND = 57847
const SQL_TSI_MINUTE = 57848
const RECURSIVE = 57849
const CONFIG = 57850
const DRAINER = 57851
const SOURCE = 57852
const STREAM = 57853
const HEADERS = 57854
const CONNECTOR = 57855
const CONNECTORS = 57856
const DAEMON = 57857
const PAUSE = 57858
const CANCEL = 57859
const TASK = 57860
const RESUME = 57861
const MATCH = 57862
const AGAINST = 57863
const BOOLEAN = 57864
const LANGUAGE = 57865
const WITH = 57866
const QUERY = 57867
const EXPANSION = 57868
const WITHOUT = 57869
const VALIDATION = 57870
const UPGRADE = 57871
const RETRY = 57872
const ADDDATE = 57873
const BIT_AND = 57874
const BIT_OR = 57875
const BIT_XOR = 57876
const CAST = 57877
const COUNT = 57878
const APPROX_COUNT = 57879
const APPROX_COUNT_DISTINCT = 57880
const SERIAL_EXTRACT = 57881
const APPROX_PERCENTILE = 57882
const CURDATE = 57883
const CURTIME = 57884
const DATE_ADD = 57885
const DATE_SUB = 57886
const EXTRACT = 57887
const GROUP_CONCAT = 57888
const MAX = 57889
const MID = 57890
const MIN = 57891
const NOW = 57892
const POSITION = 57893
const SESSION_USER = 57894
const STD = 57895
const STDDEV = 57896
const MEDIAN = 57897
const CLUSTER_CENTERS = 57898
const KMEANS = 57899
const STDDEV_POP = 57900
const STDDEV_SAMP = 57901
const SUBDATE = 57902
const SUBSTR = 57903
const SUBSTRING = 57904
const SUM = 57905
const SYSDATE = 57906
const SYSTEM_USER = 57907
const TRANSLATE = 57908
const TRIM = 57909
const VARIANCE = 57910
const VAR_POP = 57911
const VAR_SAMP = 57912
const AVG = 57913
const RANK = 57914
const ROW_NUMBER = 57915
const DENSE_RANK = 57916
const BIT_CAST = 57917
const BITMAP_BIT_POSITION = 57918
const BITMAP_BUCKET_NUMBER = 57919
const BITMAP_COUNT = 57920
const BITMAP_CONSTRUCT_AGG = 57921
const BITMAP_OR_AGG = 57922
const NEXTVAL = 57923
const SETVAL = 57924
const CURRVAL = 57925
const LASTVAL = 57926
const ARROW = 57927
const ROW = 57928
const OUTFILE = 57929
const HEADER = 57930
const MAX_FILE_SIZE = 57931
const FORCE_QUOTE = 57932
const PARALLEL = 57933
const STRICT = 57934
const UNUSED = 57935
const BINDINGS = 57936
const DO = 57937
const DECLARE = 57938
const LOOP = 57939
const WHILE = 57940
const LEAVE = 57941
const ITERATE = 57942
const UNTIL = 57943
const CALL = 57944
const PREV = 57945
const SLIDING = 57946
const FILL = 57947
const SPBEGIN = 57948
const BACKEND = 57949
const SERVERS = 57950
const HANDLER = 57951
const PERCENT = 57952
const SAMPLE = 57953
const MO_TS = 57954
const PITR = 57955
const KILL = 57956
const BACKUP = 57957
const FILESYSTEM = 57958
const PARALLELISM = 57959
const RESTORE = 57960
const QUERY_RESULT = 57961

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"CROSS_L2",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"SNAPSHOTS",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"UNIQUE_CHECK_ON_AUTOINCR",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UPGRADE",
	"RETRY",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"BITMAP_BIT_POSITION",
	"BITMAP_BUCKET_NUMBER",
	"BITMAP_COUNT",
	"BITMAP_CONSTRUCT_AGG",
	"BITMAP_OR_AGG",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"STRICT",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"MO_TS",
	"PITR",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"RESTORE",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:12271

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 127,
	11, 756,
	22, 756,
	-2, 749,
	-1, 148,
	239, 1160,
	241, 1059,
	-2, 1106,
	-1, 174,
	43, 578,
	241, 578,
	268, 585,
	269, 585,
	465, 578,
	-2, 615,
	-1, 215,
	640, 1918,
	-2, 489,
	-1, 517,
	640, 2038,
	-2, 375,
	-1, 575,
	640, 2097,
	-2, 373,
	-1, 576,
	640, 2098,
	-2, 374,
	-1, 577,
	640, 2099,
	-2, 376,
	-1, 710,
	320, 161,
	437, 161,
	438, 161,
	-2, 1823,
	-1, 776,
	83, 1610,
	-2, 1974,
	-1, 777,
	83, 1628,
	-2, 1945,
	-1, 781,
	83, 1629,
	-2, 1973,
	-1, 814,
	83, 1537,
	-2, 2171,
	-1, 815,
	83, 1538,
	-2, 2170,
	-1, 816,
	83, 1539,
	-2, 2160,
	-1, 817,
	83, 2132,
	-2, 2153,
	-1, 818,
	83, 2133,
	-2, 2154,
	-1, 819,
	83, 2134,
	-2, 2162,
	-1, 820,
	83, 2135,
	-2, 2142,
	-1, 821,
	83, 2136,
	-2, 2151,
	-1, 822,
	83, 2137,
	-2, 2163,
	-1, 823,
	83, 2138,
	-2, 2164,
	-1, 824,
	83, 2139,
	-2, 2169,
	-1, 825,
	83, 2140,
	-2, 2174,
	-1, 826,
	83, 2141,
	-2, 2175,
	-1, 827,
	83, 1606,
	-2, 2012,
	-1, 828,
	83, 1607,
	-2, 1807,
	-1, 829,
	83, 1608,
	-2, 2021,
	-1, 830,
	83, 1609,
	-2, 1816,
	-1, 832,
	83, 1612,
	-2, 1824,
	-1, 833,
	83, 1613,
	-2, 2045,
	-1, 835,
	83, 1616,
	-2, 1843,
	-1, 837,
	83, 1618,
	-2, 2057,
	-1, 838,
	83, 1619,
	-2, 2056,
	-1, 839,
	83, 1620,
	-2, 1887,
	-1, 840,
	83, 1621,
	-2, 1969,
	-1, 843,
	83, 1624,
	-2, 2068,
	-1, 845,
	83, 1626,
	-2, 2071,
	-1, 846,
	83, 1627,
	-2, 2073,
	-1, 847,
	83, 1630,
	-2, 2081,
	-1, 848,
	83, 1631,
	-2, 1954,
	-1, 849,
	83, 1632,
	-2, 1999,
	-1, 850,
	83, 1633,
	-2, 1964,
	-1, 851,
	83, 1634,
	-2, 1989,
	-1, 862,
	83, 1515,
	-2, 2165,
	-1, 863,
	83, 1516,
	-2, 2166,
	-1, 864,
	83, 1517,
	-2, 2167,
	-1, 957,
	460, 615,
	461, 615,
	-2, 579,
	-1, 1005,
	125, 1807,
	136, 1807,
	156, 1807,
	-2, 1781,
	-1, 1122,
	22, 783,
	-2, 732,
	-1, 1228,
	11, 756,
	22, 756,
	-2, 1395,
	-1, 1310,
	22, 783,
	-2, 732,
	-1, 1646,
	83, 1681,
	-2, 1971,
	-1, 1647,
	83, 1682,
	-2, 1972,
	-1, 1808,
	84, 935,
	-2, 941,
	-1, 2248,
	108, 1098,
	152, 1098,
	191, 1098,
	194, 1098,
	281, 1098,
	-2, 1091,
	-1, 2401,
	11, 756,
	22, 756,
	-2, 877,
	-1, 2433,
	84, 1767,
	157, 1767,
	-2, 1956,
	-1, 2434,
	84, 1767,
	157, 1767,
	-2, 1955,
	-1, 2435,
	84, 1743,
	157, 1743,
	-2, 1942,
	-1, 2436,
	84, 1744,
	157, 1744,
	-2, 1947,
	-1, 2437,
	84, 1745,
	157, 1745,
	-2, 1875,
	-1, 2438,
	84, 1746,
	157, 1746,
	-2, 1869,
	-1, 2439,
	84, 1747,
	157, 1747,
	-2, 1797,
	-1, 2440,
	84, 1748,
	157, 1748,
	-2, 1944,
	-1, 2441,
	84, 1749,
	157, 1749,
	-2, 1873,
	-1, 2442,
	84, 1750,
	157, 1750,
	-2, 1868,
	-1, 2443,
	84, 1751,
	157, 1751,
	-2, 1857,
	-1, 2444,
	84, 1767,
	157, 1767,
	-2, 1858,
	-1, 2445,
	84, 1767,
	157, 1767,
	-2, 1859,
	-1, 2447,
	84, 1756,
	157, 1756,
	-2, 1989,
	-1, 2448,
	84, 1734,
	157, 1734,
	-2, 1974,
	-1, 2449,
	84, 1765,
	157, 1765,
	-2, 1945,
	-1, 2450,
	84, 1765,
	157, 1765,
	-2, 1973,
	-1, 2451,
	84, 1765,
	157, 1765,
	-2, 1825,
	-1, 2452,
	84, 1763,
	157, 1763,
	-2, 1964,
	-1, 2453,
	84, 1760,
	157, 1760,
	-2, 1848,
	-1, 2454,
	83, 1715,
	84, 1715,
	157, 1715,
	395, 1715,
	396, 1715,
	397, 1715,
	-2, 1796,
	-1, 2455,
	83, 1716,
	84, 1716,
	157, 1716,
	395, 1716,
	396, 1716,
	397, 1716,
	-2, 1798,
	-1, 2456,
	83, 1717,
	84, 1717,
	157, 1717,
	395, 1717,
	396, 1717,
	397, 1717,
	-2, 2017,
	-1, 2457,
	83, 1719,
	84, 1719,
	157, 1719,
	395, 1719,
	396, 1719,
	397, 1719,
	-2, 1946,
	-1, 2458,
	83, 1721,
	84, 1721,
	157, 1721,
	395, 1721,
	396, 1721,
	397, 1721,
	-2, 1927,
	-1, 2459,
	83, 1723,
	84, 1723,
	157, 1723,
	395, 1723,
	396, 1723,
	397, 1723,
	-2, 1874,
	-1, 2460,
	83, 1725,
	84, 1725,
	157, 1725,
	395, 1725,
	396, 1725,
	397, 1725,
	-2, 1853,
	-1, 2461,
	83, 1726,
	84, 1726,
	157, 1726,
	395, 1726,
	396, 1726,
	397, 1726,
	-2, 1854,
	-1, 2462,
	83, 1728,
	84, 1728,
	157, 1728,
	395, 1728,
	396, 1728,
	397, 1728,
	-2, 1795,
	-1, 2463,
	84, 1770,
	157, 1770,
	395, 1770,
	396, 1770,
	397, 1770,
	-2, 1830,
	-1, 2464,
	84, 1770,
	157, 1770,
	395, 1770,
	396, 1770,
	397, 1770,
	-2, 1844,
	-1, 2465,
	84, 1773,
	157, 1773,
	395, 1773,
	396, 1773,
	397, 1773,
	-2, 1826,
	-1, 2466,
	84, 1773,
	157, 1773,
	395, 1773,
	396, 1773,
	397, 1773,
	-2, 1890,
	-1, 2467,
	84, 1770,
	157, 1770,
	395, 1770,
	396, 1770,
	397, 1770,
	-2, 1911,
	-1, 2678,
	108, 1098,
	152, 1098,
	191, 1098,
	194, 1098,
	281, 1098,
	-2, 1092,
	-1, 2696,
	81, 676,
	157, 676,
	-2, 1275,
	-1, 3108,
	194, 1098,
	305, 1363,
	-2, 1335,
	-1, 3282,
	108, 1098,
	152, 1098,
	191, 1098,
	194, 1098,
	-2, 1216,
	-1, 3284,
	108, 1098,
	152, 1098,
	191, 1098,
	194, 1098,
	-2, 1216,
	-1, 3296,
	81, 676,
	157, 676,
	-2, 1275,
	-1, 3318,
	194, 1098,
	305, 1363,
	-2, 1336,
	-1, 3463,
	108, 1098,
	152, 1098,
	191, 1098,
	194, 1098,
	-2, 1217,
	-1, 3490,
	84, 1178,
	157, 1178,
	-2, 1098,
	-1, 3626,
	84, 1178,
	157, 1178,
	-2, 1098,
	-1, 3780,
	84, 1182,
	157, 1182,
	-2, 1098,
	-1, 3828,
	84, 1183,
	157, 1183,
	-2, 1098,
}

const yyPrivate = 57344

const yyLast = 48980

var yyAct = [...]int{
	743, 720, 3874, 745, 3848, 2726, 204, 1893, 3784, 3867,
	3303, 3790, 1626, 3684, 714, 3397, 3791, 3783, 3626, 3094,
	729, 3710, 3127, 2729, 3666, 3741, 3332, 3198, 3518, 3604,
	1462, 2720, 2522, 3199, 3660, 722, 3450, 1263, 1622, 3625,
	3688, 3448, 3451, 611, 773, 2637, 1399, 3546, 1123, 2723,
	1004, 3595, 3667, 3401, 1540, 3392, 629, 1405, 635, 635,
	37, 61, 3669, 1841, 635, 652, 661, 3269, 3460, 661,
	1673, 3319, 718, 1629, 3103, 2296, 2699, 3025, 3470, 3064,
	3465, 3432, 3285, 2431, 3196, 2835, 1985, 3053, 2836, 1117,
	1982, 3257, 2750, 3123, 2834, 3112, 3105, 3287, 2816, 2395,
	3154, 3238, 1950, 3184, 2557, 2098, 2898, 2429, 2056, 2299,
	2858, 1552, 673, 3164, 669, 2667, 3032, 3036, 1687, 2831,
	189, 1455, 1337, 3026, 712, 658, 3030, 3073, 1113, 3111,
	2259, 2278, 2679, 1853, 2945, 3023, 126, 2378, 36, 2207,
	2000, 2226, 3002, 3028, 3027, 717, 2206, 1536, 2094, 2501,
	2081, 931, 2065, 2871, 2064, 1779, 2881, 2057, 1978, 2093,
	2483, 2396, 1953, 2383, 2029, 1369, 1544, 1541, 2650, 2655,
	2752, 2731, 2297, 2691, 2258, 6, 1883, 1872, 611, 1817,
	1951, 2128, 2248, 1529, 200, 8, 2095, 2427, 1062, 1503,
	1620, 628, 1471, 721, 1573, 1441, 2590, 2105, 998, 2238,
	1680, 730, 1852, 711, 204, 1611, 204, 1371, 1053, 1054,
	199, 7, 1660, 2045, 1555, 635, 1047, 1048, 1136, 2292,
	2063, 1052, 2060, 1510, 27, 966, 666, 2019, 1619, 16,
	1813, 997, 1440, 2403, 644, 1816, 713, 866, 1384, 15,
	1388, 610, 23, 1013, 1438, 675, 930, 676, 1688, 1625,
	2589, 103, 647, 190, 24, 17, 1494, 10, 14, 1408,
	33, 952, 928, 1400, 186, 660, 1502, 1264, 672, 913,
	1308, 2102, 907, 3589, 1565, 868, 1196, 1197, 1198, 1195,
	2625, 869, 180, 719, 2625, 2625, 1032, 2405, 1050, 657,
	3478, 3299, 2915, 2914, 653, 1564, 1196, 1197, 1198, 1195,
	1196, 1197, 1198, 1195, 656, 2112, 3080, 3272, 1118, 2279,
	2545, 2486, 3191, 1119, 2489, 2487, 1792, 1551, 1010, 1046,
	1012, 188, 2484, 655, 1049, 654, 1051, 1517, 1513, 713,
	1046, 1045, 1409, 630, 664, 2205, 3011, 986, 187, 57,
	176, 149, 1327, 631, 640, 2213, 1046, 1330, 2995, 2992,
	2997, 2994, 3859, 2617, 2615, 1422, 177, 1786, 1033, 1323,
	1118, 1515, 3390, 169, 1044, 2894, 2892, 178, 1196, 1197,
	1198, 1195, 936, 8, 1196, 1197, 1198, 1195, 2034, 3655,
	3553, 3547, 3393, 3197, 2078, 1258, 125, 3671, 2059, 867,
	2972, 2051, 2337, 187, 878, 2619, 3611, 2249, 3437, 7,
	3765, 113, 636, 187, 57, 176, 149, 187, 181, 1158,
	2531, 2099, 2539, 187, 3433, 2685, 3286, 187, 2250, 1332,
	1550, 187, 57, 176, 149, 1559, 187, 187, 3577, 1027,
	1022, 1017, 1021, 1025, 187, 57, 176, 149, 3721, 1016,
	3612, 1481, 933, 934, 1571, 187, 187, 1480, 1479, 1014,
	1015, 2970, 671, 976, 1344, 1556, 1008, 1030, 1361, 2110,
	1794, 1020, 1009, 2683, 857, 2917, 856, 858, 859, 2829,
	860, 861, 2639, 181, 1568, 2906, 2243, 1558, 2421, 1594,
	1333, 981, 979, 181, 980, 131, 132, 181, 133, 134,
	1193, 181, 1995, 125, 125, 2422, 1570, 181, 1134, 1418,
	3579, 2864, 1419, 879, 181, 1442, 1173, 1444, 2640, 1174,
	2865, 2866, 1028, 2686, 1962, 181, 181, 1612, 2409, 1031,
	1616, 2408, 883, 2652, 2410, 1375, 1963, 1964, 1799, 1800,
	2996, 2993, 2502, 2653, 975, 2329, 978, 1176, 3414, 977,
	3674, 1018, 1396, 1867, 1615, 1406, 1407, 1186, 187, 57,
	176, 149, 3794, 3795, 1628, 1191, 148, 175, 185, 3762,
	111, 187, 57, 176, 149, 1029, 1007, 1404, 1006, 3098,
	987, 1403, 1406, 1407, 3096, 3673, 962, 3672, 174, 168,
	167, 2194, 2651, 3743, 937, 63, 1343, 3815, 1421, 3674,
	3754, 3758, 983, 3673, 3753, 3672, 3752, 3852, 3853, 3200,
	3658, 2620, 2900, 3743, 2901, 1019, 1516, 1514, 2899, 3746,
	3550, 939, 1582, 3661, 3662, 3663, 3664, 1171, 181, 3200,
	2526, 148, 1603, 185, 1632, 1131, 2114, 1128, 1617, 1973,
	2771, 181, 1979, 635, 635, 3681, 1969, 3213, 3258, 2106,
	3767, 3768, 3265, 174, 635, 1127, 170, 171, 172, 2641,
	919, 3047, 1614, 3763, 3764, 1139, 985, 1607, 2642, 3045,
	2371, 3037, 2237, 661, 661, 3442, 635, 1139, 1126, 2042,
	1523, 1522, 3760, 2658, 961, 959, 3413, 179, 1189, 1190,
	2935, 1172, 1026, 707, 3415, 3391, 709, 3344, 2933, 1188,
	2536, 708, 173, 1056, 2335, 1161, 958, 2893, 121, 2821,
	3581, 3582, 173, 2373, 122, 2374, 2375, 3793, 932, 658,
	658, 3586, 1013, 2111, 2618, 3042, 3043, 3439, 1023, 938,
	971, 1024, 3755, 3571, 3242, 3041, 2379, 3359, 2242, 1236,
	1199, 3044, 1432, 984, 2089, 1183, 1566, 627, 1229, 1345,
	1394, 1631, 1630, 967, 1993, 1994, 1563, 1239, 2635, 3126,
	3823, 1420, 1326, 3062, 3100, 3588, 3124, 3125, 1175, 1184,
	1185, 123, 3216, 3616, 3074, 1120, 2939, 2624, 3608, 1613,
	3356, 3703, 1247, 1119, 56, 1127, 3698, 2692, 663, 968,
	972, 662, 2827, 1153, 2636, 1013, 2245, 1010, 1119, 1012,
	1119, 3349, 3003, 2100, 2100, 2100, 3689, 3705, 1268, 955,
	3304, 953, 957, 975, 2916, 3711, 3095, 954, 951, 950,
	1267, 956, 941, 942, 940, 943, 944, 945, 946, 881,
	973, 1034, 974, 58, 2913, 2101, 2725, 1046, 2133, 1046,
	1046, 3311, 3250, 969, 970, 1230, 1046, 1383, 3610, 3039,
	3576, 3248, 1119, 1046, 659, 3014, 1046, 2369, 3766, 3885,
	3360, 1141, 1140, 1133, 2113, 882, 3680, 659, 182, 183,
	1010, 184, 1012, 1141, 1140, 3509, 150, 2222, 3129, 2485,
	965, 54, 982, 657, 657, 1518, 964, 2347, 653, 653,
	2346, 2721, 2722, 1329, 2725, 1331, 3404, 670, 656, 656,
	1144, 960, 2664, 3498, 1142, 1381, 1341, 629, 1451, 3712,
	3249, 1130, 1132, 2367, 2368, 867, 58, 655, 655, 654,
	654, 2616, 1122, 1450, 1306, 1150, 1121, 1311, 3438, 58,
	3617, 150, 1009, 182, 183, 3609, 184, 3580, 1146, 1147,
	931, 150, 2540, 1237, 1795, 150, 1151, 124, 42, 1152,
	2424, 150, 1380, 3504, 55, 150, 1406, 1407, 5, 150,
	1166, 1406, 1407, 1168, 150, 150, 128, 129, 1178, 1379,
	130, 1179, 150, 3048, 1395, 1398, 1397, 1980, 921, 963,
	922, 659, 3038, 150, 150, 935, 1115, 2117, 2119, 2120,
	3101, 1169, 635, 2657, 659, 1434, 3630, 3782, 2315, 1181,
	3596, 611, 611, 2936, 2295, 2318, 884, 3104, 1402, 3870,
	611, 611, 3759, 1114, 1466, 1466, 2991, 635, 1232, 1233,
	1234, 1235, 2772, 3583, 2773, 2774, 2338, 1339, 3288, 3565,
	1972, 3566, 1348, 1349, 1350, 1351, 1352, 1970, 1354, 661,
	1495, 629, 3443, 58, 1360, 1468, 1506, 1506, 3040, 2295,
	2661, 2662, 1464, 1464, 1227, 3388, 58, 204, 1608, 1338,
	1505, 1505, 2317, 1279, 1280, 2660, 611, 1473, 671, 3128,
	3740, 1162, 3124, 3125, 3565, 1439, 3566, 3676, 3203, 1177,
	976, 2860, 2862, 1158, 3423, 3568, 150, 3120, 3007, 1638,
	1641, 1642, 3560, 2876, 2877, 2532, 2305, 1164, 1342, 150,
	1639, 2413, 2333, 2103, 1353, 2316, 2938, 1359, 1358, 1167,
	1170, 2628, 1357, 1356, 665, 3251, 3567, 1548, 1182, 3511,
	1797, 2302, 1553, 2769, 3060, 3629, 1524, 976, 1433, 1562,
	3568, 1958, 2312, 1460, 1461, 1163, 3519, 3520, 3521, 3525,
	3523, 3524, 3522, 1180, 1312, 3121, 3246, 3871, 3239, 1310,
	2631, 1374, 3500, 1796, 1592, 923, 3499, 2633, 1382, 2129,
	2221, 3567, 1366, 978, 1346, 1392, 977, 2216, 1466, 1157,
	1466, 1127, 1336, 1411, 1412, 3781, 1414, 1415, 1347, 1416,
	1572, 925, 926, 927, 1557, 1013, 3505, 3506, 1803, 634,
	634, 1569, 1013, 1802, 1627, 642, 1390, 1391, 3424, 1446,
	1448, 2800, 1368, 3008, 658, 2115, 2116, 2711, 1458, 1459,
	978, 2215, 1165, 977, 2947, 2946, 1602, 1423, 1424, 1633,
	1634, 1635, 1636, 1637, 1587, 1588, 1410, 2306, 2118, 1413,
	885, 920, 1496, 2218, 2217, 1334, 1335, 2210, 1466, 1793,
	1801, 1538, 1539, 2671, 2674, 2675, 2676, 2672, 2673, 2861,
	1449, 2359, 886, 3061, 1561, 1686, 3471, 1527, 2301, 1530,
	1531, 1678, 3886, 2303, 1519, 1682, 1683, 1684, 1685, 1735,
	1532, 1533, 3881, 3079, 1719, 3750, 1674, 1194, 3868, 3869,
	1543, 1546, 1729, 1547, 1474, 3161, 1385, 1389, 1389, 1389,
	1124, 2565, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655,
	1656, 1657, 1658, 1659, 1493, 1487, 640, 3204, 1671, 1672,
	1508, 1385, 1385, 1507, 1158, 2504, 1591, 2304, 1624, 1105,
	1101, 1102, 1103, 1104, 1590, 2570, 3876, 2569, 2568, 2566,
	1640, 3157, 988, 2629, 1781, 1127, 3254, 3561, 2791, 2792,
	2311, 3668, 1798, 1376, 2309, 2108, 642, 3122, 1804, 2698,
	1806, 3865, 1605, 3215, 1495, 2199, 1744, 1643, 1788, 1814,
	1466, 1819, 1820, 1777, 1822, 1434, 635, 3830, 657, 2229,
	2531, 635, 3802, 653, 1466, 1725, 1726, 1727, 931, 1720,
	1600, 1842, 3561, 656, 1580, 1597, 3562, 1583, 1741, 1466,
	2240, 1742, 2230, 2231, 2567, 1434, 1581, 1575, 3133, 3877,
	652, 1846, 655, 3796, 654, 889, 1780, 1601, 1755, 1756,
	1599, 1598, 1618, 1595, 1596, 3778, 1623, 1621, 2393, 3131,
	1866, 1734, 976, 3731, 3831, 1376, 1862, 1776, 2163, 1873,
	1873, 2162, 1434, 1662, 1434, 1434, 1194, 1609, 635, 635,
	3831, 1940, 1814, 1944, 3001, 3803, 1466, 1947, 1948, 1960,
	2801, 2803, 2804, 2805, 2802, 3706, 888, 1037, 1042, 1043,
	891, 890, 2790, 611, 2999, 1466, 2332, 2394, 3694, 2274,
	3649, 1377, 2697, 3648, 3643, 1821, 3592, 1810, 1811, 1812,
	1781, 1870, 2394, 3642, 2879, 1781, 1781, 2644, 3779, 1825,
	1826, 1827, 1828, 635, 1814, 1466, 3592, 2005, 1823, 635,
	635, 635, 669, 669, 1194, 978, 2239, 2621, 977, 2015,
	2016, 2017, 2018, 3641, 1156, 1783, 2024, 1669, 1670, 2142,
	1895, 3640, 2521, 204, 3620, 2509, 204, 204, 2108, 204,
	1996, 1124, 2424, 2571, 2572, 2022, 2032, 1942, 1708, 2035,
	1749, 3695, 2038, 3650, 2394, 2040, 2263, 3592, 1155, 1196,
	1197, 1198, 1195, 1875, 3619, 1778, 3592, 1196, 1197, 1198,
	1195, 1988, 1989, 2099, 3161, 1876, 1961, 2288, 2204, 1735,
	1735, 2067, 3591, 2198, 1974, 3365, 1717, 1718, 1966, 1721,
	1968, 1735, 1735, 2197, 3313, 1784, 3592, 1736, 2083, 2170,
	1986, 1987, 3278, 2090, 3592, 2141, 1991, 2108, 1850, 1851,
	1743, 2082, 1745, 2273, 1746, 1747, 1748, 1874, 2004, 1818,
	1809, 1367, 2698, 1981, 1677, 1860, 1861, 1842, 3231, 3227,
	1838, 1466, 2097, 1834, 1839, 1156, 1452, 2108, 1849, 2077,
	1013, 3141, 1557, 1013, 1855, 1871, 1877, 1878, 1847, 2007,
	2008, 2009, 1013, 2033, 1859, 3592, 2036, 2037, 2424, 2039,
	1039, 1040, 1041, 2855, 2596, 658, 1864, 3314, 1854, 2588,
	1856, 1857, 2069, 3893, 2547, 3279, 1844, 1845, 871, 872,
	873, 874, 1941, 3878, 1863, 2020, 2529, 1307, 3299, 2517,
	2091, 1946, 1949, 871, 872, 873, 874, 2073, 1965, 2511,
	1967, 3232, 3228, 2506, 1975, 1818, 1196, 1197, 1198, 1195,
	2498, 1704, 2132, 2496, 3142, 1010, 2137, 1012, 1701, 2883,
	1610, 2700, 1703, 1700, 1702, 1706, 1707, 1010, 2534, 1012,
	1705, 2062, 1385, 2003, 2002, 2494, 2394, 1194, 2010, 2011,
	2533, 3264, 1194, 2062, 2492, 1013, 1389, 1194, 2262, 2525,
	2282, 3535, 2968, 2030, 1621, 2028, 1477, 2149, 1389, 2263,
	2126, 2127, 2507, 2200, 2177, 2156, 2302, 2305, 2176, 2047,
	2161, 1211, 2512, 2158, 634, 1116, 2507, 1196, 1197, 1198,
	1195, 2152, 2151, 2499, 2143, 1125, 2497, 2173, 2150, 2107,
	2079, 1584, 2178, 2179, 2180, 2122, 2068, 2183, 2184, 2185,
	2186, 2187, 2188, 2189, 2190, 2191, 2192, 1149, 2493, 2088,
	2027, 2013, 2076, 2074, 2209, 1577, 2211, 2493, 1244, 2214,
	1010, 2263, 1012, 2139, 2087, 1143, 1111, 876, 712, 657,
	1106, 635, 635, 635, 653, 2092, 2199, 1194, 3075, 3084,
	3363, 1194, 876, 1194, 656, 2085, 635, 635, 635, 635,
	2930, 1227, 1990, 1386, 1194, 1194, 1456, 2086, 1417, 2260,
	1158, 1194, 2108, 655, 1585, 654, 2121, 1457, 3887, 2266,
	1434, 3699, 2130, 887, 1711, 1712, 1713, 1714, 1715, 1716,
	1709, 1710, 2171, 2172, 3856, 2174, 1662, 1427, 1428, 2330,
	1430, 1431, 2181, 1435, 1436, 1437, 1434, 2123, 2306, 3590,
	2135, 1724, 1723, 2301, 2295, 2300, 1372, 2298, 2303, 3557,
	1373, 1724, 1723, 2324, 3502, 3700, 3076, 1843, 1454, 2290,
	3472, 2302, 2305, 3291, 3289, 1482, 1483, 1484, 1485, 1486,
	3501, 1488, 1489, 1490, 1491, 1492, 3487, 2484, 1858, 1498,
	1499, 1500, 1501, 1209, 1219, 1220, 1212, 1213, 1214, 1215,
	1216, 1217, 1218, 1211, 1865, 3444, 3425, 1868, 1869, 1372,
	3077, 3189, 2304, 1373, 3473, 3271, 2331, 3292, 3290, 2124,
	2125, 1387, 3162, 3153, 3147, 3143, 2398, 2398, 1960, 2398,
	1212, 1213, 1214, 1215, 1216, 1217, 1218, 1211, 3090, 2193,
	2195, 2196, 3055, 1196, 1197, 1198, 1195, 611, 611, 2201,
	1668, 1781, 3010, 1781, 3192, 1127, 2824, 2554, 892, 758,
	127, 1466, 635, 1761, 2823, 127, 1665, 1667, 1664, 1453,
	1666, 1781, 1781, 1754, 2281, 2669, 2283, 635, 1268, 2284,
	2626, 2223, 2544, 1127, 2468, 629, 2241, 2510, 2415, 1013,
	1267, 1506, 2212, 1960, 2072, 2071, 2473, 2070, 2475, 2419,
	2294, 2293, 204, 2306, 1363, 1505, 2432, 1362, 2301, 2295,
	2300, 1129, 2298, 2303, 2478, 2031, 2287, 1196, 1197, 1198,
	1195, 641, 2267, 1681, 127, 1511, 2400, 2411, 2404, 2412,
	2402, 1219, 1220, 1212, 1213, 1214, 1215, 1216, 1217, 1218,
	1211, 2275, 2514, 1681, 1511, 2136, 2031, 2416, 2417, 1214,
	1215, 1216, 1217, 1218, 1211, 2513, 2885, 2516, 1805, 2527,
	1198, 1195, 3751, 2097, 1010, 1195, 1012, 2304, 3514, 3513,
	1466, 2902, 1466, 1429, 1466, 2761, 2759, 2307, 2308, 1127,
	2313, 2280, 1196, 1197, 1198, 1195, 2737, 2546, 2735, 2270,
	3884, 746, 756, 2488, 2276, 2472, 3493, 2277, 1472, 3445,
	3446, 747, 2541, 748, 752, 755, 751, 749, 750, 2609,
	2537, 2610, 1246, 1466, 2574, 1739, 2376, 2426, 3861, 3860,
	3806, 2555, 2479, 3270, 2561, 1245, 3777, 2406, 2949, 2581,
	1740, 2575, 2576, 3776, 1466, 1196, 1197, 1198, 1195, 2578,
	2579, 1011, 3440, 2573, 3190, 1446, 1448, 3701, 127, 2961,
	2638, 1464, 3645, 3883, 2420, 2584, 753, 1196, 1197, 1198,
	1195, 2423, 3633, 127, 2582, 127, 2556, 3623, 1196, 1197,
	1198, 1195, 1464, 1389, 3262, 3613, 2469, 2480, 2154, 3548,
	2471, 2627, 3475, 1633, 1781, 2812, 2810, 3474, 754, 3305,
	2585, 2586, 2558, 2808, 2558, 3293, 3261, 2630, 3046, 1127,
	3441, 2926, 2897, 1127, 1196, 1197, 1198, 1195, 2583, 2960,
	1466, 2896, 2795, 2665, 2666, 2562, 1196, 1197, 1198, 1195,
	1944, 2580, 2645, 2794, 2668, 1512, 2432, 2797, 2696, 2793,
	2543, 2785, 3263, 2538, 2702, 2779, 1196, 1197, 1198, 1195,
	3787, 2778, 2519, 2811, 2809, 2153, 2777, 2552, 2776, 2530,
	2622, 2807, 2500, 2713, 2528, 3718, 2613, 2203, 2706, 2707,
	2535, 2050, 2049, 1127, 2146, 2048, 2044, 1196, 1197, 1198,
	1195, 2734, 1196, 1197, 1198, 1195, 2548, 2549, 1127, 1127,
	1127, 1873, 2684, 1013, 1127, 2796, 2745, 2746, 2747, 2748,
	1127, 2755, 2043, 2756, 2757, 1999, 2758, 1998, 2760, 2680,
	2564, 1997, 2740, 2741, 1578, 1325, 3155, 2744, 3031, 2755,
	2693, 3584, 3585, 2751, 2681, 1196, 1197, 1198, 1195, 1621,
	1109, 2398, 1210, 1209, 1219, 1220, 1212, 1213, 1214, 1215,
	1216, 1217, 1218, 1211, 707, 2813, 3714, 709, 3880, 1895,
	2715, 2165, 708, 3879, 611, 2006, 2268, 2269, 2703, 3398,
	1944, 1127, 1960, 1960, 1960, 1960, 2271, 2272, 1196, 1197,
	1198, 1195, 3854, 3822, 1127, 1960, 3821, 3818, 2398, 2647,
	3756, 2649, 3738, 3683, 2837, 3449, 3665, 1108, 2732, 3656,
	3637, 3632, 2732, 2551, 1466, 2818, 2728, 2837, 3631, 2663,
	2646, 3587, 2733, 3575, 3574, 635, 635, 2591, 2592, 2523,
	2524, 2739, 2695, 2597, 2687, 3549, 2336, 2701, 3495, 2339,
	2340, 2341, 2342, 2343, 2344, 2345, 8, 3456, 2348, 2349,
	2350, 2351, 2352, 2353, 2354, 2355, 2356, 2357, 2358, 2714,
	2360, 2361, 2362, 2363, 2364, 2717, 2365, 3426, 3421, 2730,
	3418, 3417, 7, 3396, 2736, 2704, 3394, 1824, 3373, 2851,
	3372, 204, 1829, 3369, 2709, 2710, 204, 3367, 2743, 1818,
	1202, 1203, 1204, 1205, 1206, 1207, 1208, 1200, 2817, 2889,
	3687, 2891, 3300, 1196, 1197, 1198, 1195, 3260, 1735, 2775,
	1735, 3259, 2787, 2912, 3419, 3256, 2880, 3240, 3224, 3570,
	1781, 1196, 1197, 1198, 1195, 1781, 2925, 1196, 1197, 1198,
	1195, 3569, 1466, 3222, 3150, 2932, 2082, 2140, 3149, 2819,
	2712, 1196, 1197, 1198, 1195, 2470, 2825, 3144, 3139, 1879,
	1880, 3138, 3056, 3018, 2477, 3017, 2850, 2852, 3013, 2854,
	3006, 2853, 2838, 2839, 2840, 2841, 2208, 2907, 1013, 2940,
	2937, 2943, 2822, 2867, 2870, 2895, 2869, 2806, 2918, 1013,
	1210, 1209, 1219, 1220, 1212, 1213, 1214, 1215, 1216, 1217,
	1218, 1211, 1780, 2798, 2788, 2965, 2786, 2911, 1538, 1539,
	2782, 2886, 2781, 2780, 2001, 2623, 2890, 813, 812, 3558,
	2001, 2001, 2001, 1196, 1197, 1198, 1195, 2909, 1531, 2520,
	1722, 2053, 2046, 2954, 3407, 2956, 2138, 2919, 1532, 1533,
	3009, 1791, 1543, 1546, 2884, 1547, 1790, 3012, 127, 127,
	1011, 3015, 3016, 2888, 2934, 2929, 2887, 3406, 1579, 1127,
	1275, 1196, 1197, 1198, 1195, 3034, 1271, 1270, 1112, 880,
	2908, 2905, 2903, 3420, 2910, 3050, 3405, 3284, 3283, 3282,
	2921, 635, 2922, 2920, 1196, 1197, 1198, 1195, 3253, 3236,
	2928, 3353, 3234, 3065, 1127, 3233, 3230, 635, 3229, 1127,
	1127, 3223, 2941, 3221, 3205, 2948, 2942, 3219, 1960, 2260,
	3195, 3083, 1196, 1197, 1198, 1195, 2957, 2958, 1196, 1197,
	1198, 1195, 187, 1228, 176, 149, 3194, 2955, 3180, 3179,
	2324, 3085, 3021, 2863, 1196, 1197, 1198, 1195, 2964, 3020,
	2998, 3059, 3110, 2966, 3113, 2959, 3113, 3113, 2951, 2950,
	3000, 1127, 2944, 2878, 2643, 1013, 3068, 1013, 2495, 2952,
	2953, 3072, 1013, 3117, 2491, 1196, 1197, 1198, 1195, 2680,
	3134, 2963, 2490, 2182, 2175, 3005, 2169, 3004, 1466, 1466,
	2168, 3130, 2167, 2654, 2166, 2164, 2160, 3093, 1013, 3097,
	3099, 2159, 181, 2727, 3132, 2157, 3019, 2148, 1196, 1197,
	1198, 1195, 2145, 2144, 2052, 1774, 2705, 1773, 3135, 3136,
	3081, 2708, 1772, 3051, 3052, 1738, 1464, 1464, 1737, 1728,
	1478, 3058, 1476, 3108, 3805, 635, 187, 1265, 3713, 3067,
	1010, 3034, 1012, 3078, 3070, 3071, 3651, 3109, 3639, 3082,
	1434, 3634, 1526, 1944, 1944, 3529, 3118, 3512, 2973, 2974,
	3087, 3508, 3092, 2962, 2975, 2976, 2977, 2978, 2607, 2979,
	2980, 2981, 2982, 2983, 2984, 2985, 2986, 2987, 2988, 1313,
	3116, 2606, 2294, 2293, 3119, 3114, 3115, 2767, 2768, 2605,
	1196, 1197, 1198, 1195, 3486, 1196, 1197, 1198, 1195, 3469,
	1127, 2604, 2783, 2784, 2574, 2603, 181, 3381, 1196, 1197,
	1198, 1195, 3379, 3193, 2602, 3351, 1196, 1197, 1198, 1195,
	2601, 3350, 3347, 2432, 3346, 3312, 3309, 2820, 1196, 1197,
	1198, 1195, 1196, 1197, 1198, 1195, 3307, 3273, 1537, 1528,
	3091, 1196, 1197, 1198, 1195, 1542, 1545, 1196, 1197, 1198,
	1195, 2600, 2233, 2234, 2235, 1534, 1370, 3146, 2814, 635,
	2738, 2689, 3152, 3151, 3148, 2688, 3145, 2251, 2252, 2253,
	2254, 2599, 3158, 3159, 3169, 3140, 2682, 2648, 1196, 1197,
	1198, 1195, 2598, 3156, 2608, 3836, 2595, 2505, 3173, 2414,
	3176, 3177, 3178, 2366, 2261, 2232, 3218, 1431, 1196, 1197,
	1198, 1195, 2202, 3220, 1663, 181, 3730, 3182, 3188, 1196,
	1197, 1198, 1195, 1196, 1197, 1198, 1195, 2012, 1808, 1475,
	1787, 3728, 2594, 641, 1606, 1560, 1535, 1324, 1309, 3243,
	3624, 1305, 1304, 1303, 3235, 3206, 1302, 2550, 1301, 1300,
	1299, 1298, 1297, 1296, 1295, 3245, 3207, 1294, 3208, 1196,
	1197, 1198, 1195, 2558, 1293, 3212, 127, 1292, 3225, 1291,
	3211, 1210, 1209, 1219, 1220, 1212, 1213, 1214, 1215, 1216,
	1217, 1218, 1211, 1290, 3217, 2380, 1289, 3834, 2593, 1288,
	3247, 1287, 1286, 3277, 1210, 1209, 1219, 1220, 1212, 1213,
	1214, 1215, 1216, 1217, 1218, 1211, 1285, 1284, 1283, 2398,
	1960, 3296, 1282, 3252, 1013, 1196, 1197, 1198, 1195, 1281,
	3255, 1013, 2385, 2389, 2390, 2391, 2386, 2587, 2387, 2392,
	1278, 1277, 2388, 127, 1276, 3315, 3241, 3792, 1127, 1274,
	127, 3726, 2577, 1472, 1273, 1272, 1269, 3110, 2553, 1262,
	3237, 1127, 1261, 127, 1196, 1197, 1198, 1195, 2001, 1259,
	1258, 3316, 1127, 1257, 3362, 127, 3724, 1676, 1466, 1196,
	1197, 1198, 1195, 1256, 3355, 1196, 1197, 1198, 1195, 1255,
	1254, 1253, 3267, 3268, 1252, 2751, 1251, 1250, 1944, 1249,
	3298, 1248, 1127, 1781, 1196, 1197, 1198, 1195, 3364, 3306,
	1243, 3308, 1242, 1241, 1240, 1160, 1464, 1781, 3294, 1110,
	3378, 3348, 3295, 3380, 3345, 2837, 3165, 3166, 2265, 3338,
	3302, 204, 2385, 2389, 2390, 2391, 2386, 2247, 2387, 2392,
	3386, 1148, 2388, 3168, 1127, 2670, 2425, 2055, 1159, 3375,
	3171, 3170, 3352, 2847, 2844, 3357, 3354, 2845, 2848, 3385,
	3383, 2843, 2846, 2849, 3361, 2390, 2391, 2837, 3384, 2842,
	3086, 3491, 2518, 2508, 112, 3088, 3089, 60, 3368, 3370,
	3371, 3366, 59, 3422, 1364, 1836, 1837, 3054, 2924, 3377,
	3376, 3429, 3374, 2763, 2334, 1127, 1831, 1832, 1833, 3358,
	2764, 2765, 2766, 2503, 3106, 3403, 3107, 3209, 3210, 3183,
	1932, 1520, 2523, 2524, 1127, 1466, 1466, 3382, 2542, 1574,
	3065, 1554, 2220, 2014, 1154, 3029, 3022, 2716, 2690, 3399,
	3464, 2286, 3464, 3400, 3427, 3428, 637, 3452, 3387, 638,
	2256, 1840, 1807, 3845, 639, 3454, 1724, 1723, 1127, 3480,
	1127, 3389, 3636, 1464, 1674, 3137, 3458, 3459, 1320, 1321,
	3483, 2377, 3485, 1318, 1319, 1316, 1317, 1466, 1314, 1315,
	2372, 1627, 3435, 1627, 1945, 3431, 3434, 3436, 3416, 1426,
	1425, 1187, 3175, 3461, 1013, 635, 3455, 1127, 1127, 2872,
	2219, 1127, 1127, 3468, 3484, 2084, 1378, 3467, 1355, 3457,
	1401, 3160, 3812, 3810, 3770, 1674, 3748, 3747, 3745, 3690,
	3452, 3452, 3652, 3298, 3452, 3452, 3531, 3172, 3526, 2694,
	1842, 3479, 3540, 3516, 3517, 3488, 2069, 3527, 3528, 3489,
	3492, 3544, 3545, 3543, 3345, 3494, 3542, 3496, 3481, 3338,
	3395, 3226, 3202, 3201, 1466, 3186, 2319, 2289, 1210, 1209,
	1219, 1220, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1211,
	2131, 1576, 3537, 3185, 2882, 3572, 1376, 3244, 1959, 3532,
	3838, 3837, 3837, 3564, 3556, 2927, 2632, 2249, 2147, 3536,
	3573, 1328, 1464, 3538, 1210, 1209, 1219, 1220, 1212, 1213,
	1214, 1215, 1216, 1217, 1218, 1211, 3551, 1145, 3838, 3510,
	3555, 3181, 1124, 191, 3, 3559, 1393, 68, 3594, 2,
	3605, 3599, 3408, 3857, 3409, 3563, 871, 872, 873, 874,
	3858, 1124, 1, 2614, 1785, 1322, 875, 1127, 870, 1443,
	2407, 1992, 1470, 1789, 877, 2856, 2857, 3174, 3628, 3622,
	2859, 2634, 127, 2104, 2826, 127, 127, 3593, 127, 2370,
	1627, 2236, 3049, 1365, 924, 1730, 3600, 1589, 3403, 1036,
	3602, 3601, 1138, 3597, 1013, 3614, 1586, 1137, 1135, 1679,
	1127, 3618, 760, 2058, 2815, 1466, 2789, 3539, 3844, 3873,
	3804, 3847, 1604, 744, 3739, 3657, 2873, 2874, 1011, 3808,
	3659, 127, 3554, 3452, 2109, 3635, 1192, 2904, 948, 801,
	1011, 771, 1260, 1567, 2971, 3646, 3644, 2969, 1038, 770,
	3266, 2659, 3675, 1464, 127, 2875, 3607, 1035, 3679, 949,
	2041, 3670, 3654, 1247, 3552, 1521, 1525, 2285, 3615, 3709,
	3490, 3102, 2724, 1127, 1549, 3274, 3275, 3276, 3704, 3653,
	3310, 3280, 3281, 3412, 3410, 3411, 3691, 3297, 677, 1971,
	609, 995, 3530, 2054, 678, 2264, 3452, 3301, 3761, 3638,
	904, 2246, 3677, 905, 897, 2678, 3686, 2677, 1644, 1201,
	1661, 3682, 2989, 2990, 3708, 3685, 1238, 716, 2134, 2656,
	1127, 3333, 2868, 3693, 3482, 67, 66, 65, 1466, 3715,
	64, 3733, 3736, 1228, 3723, 3725, 3727, 3729, 2023, 212,
	762, 3702, 211, 3452, 3447, 3735, 3707, 3849, 3737, 742,
	741, 740, 739, 3716, 738, 737, 3722, 2384, 3732, 2382,
	2381, 1955, 1954, 2021, 3063, 2754, 1464, 2749, 1884, 1882,
	2742, 2314, 3742, 1466, 3744, 2321, 3605, 1881, 1210, 1209,
	1219, 1220, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1211,
	3789, 3719, 3780, 3720, 3507, 2799, 3402, 1222, 3788, 1226,
	3769, 1830, 3771, 3772, 2310, 3773, 1901, 2770, 3785, 1898,
	1897, 1464, 3774, 3775, 2762, 1223, 1225, 1221, 3503, 1224,
	1210, 1209, 1219, 1220, 1212, 1213, 1214, 1215, 1216, 1217,
	1218, 1211, 3497, 3797, 1929, 3798, 3817, 3799, 3801, 3800,
	3603, 3811, 3463, 3813, 3814, 3317, 3318, 3324, 3809, 3807,
	2255, 1127, 3670, 1061, 1057, 1059, 3816, 1060, 1058, 2563,
	2291, 3024, 2228, 2227, 2225, 2224, 1340, 3678, 3628, 3757,
	3430, 3826, 3057, 2430, 3824, 2428, 2967, 3785, 1107, 3828,
	3829, 3827, 3167, 3835, 3843, 3163, 3851, 3833, 3069, 3850,
	3832, 3839, 3840, 3841, 3842, 2066, 2080, 2923, 1956, 1952,
	3476, 3477, 2828, 3578, 3862, 1835, 1127, 898, 3855, 2244,
	41, 110, 921, 101, 922, 166, 3708, 3864, 3863, 53,
	3866, 165, 52, 108, 163, 51, 3785, 3875, 3872, 1627,
	1210, 1209, 1219, 1220, 1212, 1213, 1214, 1215, 1216, 1217,
	1218, 1211, 96, 95, 107, 161, 50, 196, 195, 198,
	3882, 902, 197, 194, 2481, 2482, 193, 1509, 3851, 3889,
	192, 3850, 3888, 3749, 3466, 916, 865, 912, 3875, 3890,
	40, 39, 38, 34, 3894, 3533, 13, 12, 35, 3534,
	22, 21, 3892, 1750, 1751, 1752, 1753, 1593, 20, 1757,
	1758, 1759, 1760, 1762, 1763, 1764, 1765, 1766, 1767, 1768,
	1769, 1770, 1771, 26, 3322, 32, 187, 57, 176, 149,
	31, 120, 119, 30, 118, 117, 2001, 116, 115, 114,
	29, 19, 45, 893, 177, 44, 43, 2401, 9, 106,
	104, 169, 28, 105, 102, 178, 689, 688, 695, 685,
	99, 97, 79, 3334, 78, 77, 92, 91, 692, 693,
	90, 694, 698, 89, 125, 679, 3325, 88, 87, 85,
	86, 947, 76, 75, 74, 703, 73, 3320, 72, 113,
	94, 100, 3342, 3343, 98, 83, 181, 93, 3321, 84,
	82, 81, 80, 71, 70, 69, 147, 146, 145, 144,
	143, 141, 1959, 142, 918, 140, 911, 139, 138, 137,
	136, 127, 135, 46, 47, 915, 914, 48, 49, 707,
	157, 156, 709, 158, 160, 3326, 162, 708, 159, 164,
	154, 152, 896, 155, 153, 151, 903, 62, 11, 109,
	18, 25, 4, 0, 0, 0, 0, 0, 0, 0,
	3214, 0, 0, 0, 0, 0, 910, 0, 0, 0,
	0, 3647, 0, 131, 132, 0, 133, 134, 0, 0,
	0, 0, 0, 0, 0, 920, 0, 0, 0, 0,
	909, 0, 0, 0, 908, 0, 0, 0, 0, 0,
	895, 0, 0, 0, 901, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 899, 0, 0, 3341,
	0, 2300, 0, 0, 0, 0, 3692, 0, 0, 0,
	0, 3696, 3697, 0, 148, 175, 185, 0, 111, 0,
	0, 0, 0, 0, 0, 0, 3330, 0, 0, 0,
	0, 0, 0, 0, 919, 0, 174, 168, 167, 0,
	0, 0, 3717, 63, 680, 682, 681, 0, 3327, 3331,
	3329, 3328, 0, 0, 687, 0, 0, 0, 0, 0,
	900, 0, 0, 0, 0, 0, 691, 0, 0, 0,
	0, 0, 1930, 706, 0, 0, 0, 1891, 0, 0,
	684, 0, 0, 0, 674, 0, 3336, 3337, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 170, 171, 172, 1932, 1900, 0,
	0, 127, 0, 0, 0, 0, 0, 1933, 1934, 0,
	0, 127, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3344, 179, 0, 917, 0, 0,
	0, 0, 0, 1899, 0, 0, 3323, 0, 0, 0,
	0, 0, 3335, 0, 0, 0, 121, 0, 0, 1907,
	173, 0, 122, 0, 0, 0, 0, 0, 3819, 3820,
	0, 0, 0, 0, 0, 0, 906, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	686, 690, 696, 0, 697, 699, 0, 0, 700, 701,
	702, 1930, 0, 704, 705, 0, 1891, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 123,
	0, 0, 0, 0, 0, 0, 0, 1923, 0, 0,
	0, 0, 56, 0, 0, 0, 1932, 1900, 0, 0,
	0, 1959, 1959, 1959, 1959, 0, 1933, 1934, 0, 0,
	0, 0, 0, 0, 1959, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1899, 0, 0, 0, 894, 0, 0, 0,
	0, 58, 3340, 0, 0, 0, 0, 0, 1907, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1890, 1892,
	1889, 0, 1886, 0, 0, 0, 0, 1911, 0, 0,
	0, 0, 0, 0, 0, 0, 182, 183, 1917, 184,
	0, 0, 0, 0, 150, 0, 1902, 0, 1885, 54,
	0, 0, 0, 0, 0, 0, 3515, 0, 1905, 1939,
	127, 0, 1906, 1908, 1910, 127, 1912, 1913, 1914, 1918,
	1919, 1920, 1922, 1925, 1926, 1927, 1923, 0, 3339, 683,
	0, 0, 0, 1915, 1924, 1916, 127, 0, 0, 0,
	0, 0, 0, 0, 0, 1894, 0, 127, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 124, 42, 1931, 0, 0,
	0, 0, 55, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 128, 129, 0, 0, 130, 0,
	0, 0, 0, 0, 1887, 1888, 0, 1890, 2719, 1889,
	0, 2718, 0, 0, 0, 0, 1911, 0, 0, 0,
	0, 0, 1928, 0, 0, 0, 0, 1917, 0, 0,
	0, 0, 0, 1196, 1197, 1198, 1195, 0, 0, 1904,
	0, 0, 0, 0, 0, 0, 1903, 1905, 1939, 0,
	0, 1906, 1908, 1910, 0, 1912, 1913, 1914, 1918, 1919,
	1920, 1922, 1925, 1926, 1927, 0, 0, 0, 0, 0,
	1921, 0, 1915, 1924, 1916, 0, 0, 0, 0, 1909,
	0, 0, 1079, 0, 1894, 0, 0, 0, 0, 0,
	0, 0, 1936, 1935, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1931, 0, 0, 0,
	0, 0, 1708, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1011, 0, 127, 0, 0, 0, 0,
	127, 0, 0, 1887, 1888, 0, 0, 1959, 0, 0,
	0, 0, 0, 0, 0, 1896, 0, 0, 0, 0,
	0, 1928, 0, 0, 0, 0, 127, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1904, 0,
	0, 0, 0, 0, 0, 1903, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1938, 0, 0,
	1937, 1079, 0, 0, 0, 0, 0, 0, 0, 1921,
	0, 0, 0, 0, 1065, 0, 0, 0, 1909, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1936, 1935, 0, 1087, 1091, 1093, 1095, 1097, 1098,
	1100, 0, 1105, 1101, 1102, 1103, 1104, 0, 1082, 1083,
	1084, 1085, 1063, 1064, 1088, 0, 1066, 0, 1067, 1068,
	1069, 1070, 1071, 1072, 1073, 1074, 1075, 1078, 1080, 1076,
	1077, 1086, 0, 0, 0, 0, 0, 0, 0, 1090,
	1092, 1094, 1096, 1099, 1896, 1704, 0, 0, 0, 0,
	0, 0, 1701, 0, 0, 0, 1703, 1700, 1702, 1706,
	1707, 0, 0, 0, 1705, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1081, 0, 0,
	0, 0, 0, 1065, 0, 0, 1938, 1055, 0, 1937,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1087, 1091, 1093, 1095, 1097, 1098, 1100,
	0, 1105, 1101, 1102, 1103, 1104, 0, 1082, 1083, 1084,
	1085, 1063, 1064, 1088, 0, 1066, 0, 1067, 1068, 1069,
	1070, 1071, 1072, 1073, 1074, 1075, 1078, 1080, 1076, 1077,
	1086, 0, 0, 0, 0, 0, 0, 0, 1090, 1092,
	1094, 1096, 1099, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1081, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1689, 1690, 1691,
	1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1711, 1712,
	1713, 1714, 1715, 1716, 1709, 1710, 2559, 2560, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 127, 0, 0, 0, 0, 0, 0, 127,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 778, 0, 0, 0, 0,
	0, 0, 0, 0, 375, 0, 501, 534, 523, 607,
	489, 0, 0, 0, 0, 0, 0, 731, 0, 1959,
	0, 315, 0, 0, 345, 538, 520, 530, 521, 506,
	507, 508, 515, 325, 509, 510, 511, 481, 512, 482,
	513, 514, 769, 537, 488, 406, 359, 555, 554, 0,
	0, 836, 844, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 723, 0, 0, 759, 813, 812,
	746, 756, 0, 0, 288, 210, 483, 603, 485, 484,
	747, 0, 748, 752, 755, 751, 749, 750, 0, 828,
	1089, 0, 0, 0, 0, 0, 715, 727, 0, 732,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 724, 725, 0, 0, 0, 0, 779,
	127, 726, 0, 0, 774, 753, 757, 0, 0, 0,
	0, 278, 412, 429, 289, 402, 442, 294, 409, 284,
	374, 398, 0, 0, 280, 427, 408, 356, 335, 336,
	279, 0, 393, 313, 327, 310, 372, 754, 777, 781,
	309, 850, 775, 437, 282, 0, 436, 371, 423, 428,
	357, 351, 281, 425, 355, 350, 339, 317, 851, 340,
	341, 331, 383, 349, 384, 332, 361, 360, 362, 1089,
	0, 0, 0, 0, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 596, 772,
	0, 600, 127, 439, 0, 0, 834, 0, 0, 0,
	411, 0, 0, 342, 0, 0, 0, 776, 0, 396,
	377, 847, 0, 0, 394, 347, 424, 385, 430, 413,
	438, 390, 386, 273, 414, 312, 358, 285, 287, 307,
	314, 316, 318, 319, 367, 368, 380, 401, 415, 416,
	417, 311, 295, 395, 296, 329, 297, 274, 303, 301,
	304, 403, 305, 276, 381, 421, 0, 324, 391, 354,
	277, 353, 382, 420, 419, 286, 446, 452, 453, 542,
	0, 458, 623, 624, 625, 467, 472, 473, 474, 476,
	477, 478, 479, 543, 560, 527, 497, 460, 551, 494,
	498, 499, 563, 1732, 1731, 1733, 451, 343, 344, 0,
	322, 270, 271, 618, 832, 373, 565, 598, 599, 490,
	0, 846, 827, 829, 830, 833, 837, 838, 839, 840,
	841, 843, 845, 849, 617, 0, 544, 559, 621, 558,
	614, 379, 0, 400, 556, 503, 0, 548, 522, 0,
	549, 518, 553, 0, 492, 0, 407, 432, 444, 461,
	464, 493, 578, 579, 580, 275, 463, 582, 583, 584,
	585, 586, 587, 588, 581, 848, 525, 502, 528, 443,
	505, 504, 127, 0, 539, 780, 540, 541, 363, 364,
	365, 366, 835, 566, 293, 462, 389, 0, 526, 0,
	0, 0, 0, 0, 0, 0, 0, 531, 532, 529,
	626, 0, 589, 590, 0, 0, 456, 457, 321, 328,
	475, 330, 292, 378, 323, 441, 337, 0, 468, 533,
	469, 592, 595, 593, 594, 370, 333, 334, 404, 338,
	348, 392, 440, 376, 397, 290, 431, 405, 352, 519,
	546, 857, 831, 856, 858, 859, 855, 860, 861, 842,
	736, 0, 787, 853, 852, 854, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 574, 573, 572,
	571, 570, 569, 568, 567, 0, 0, 516, 418, 302,
	264, 298, 299, 306, 615, 612, 422, 616, 0, 272,
	496, 346, 0, 387, 320, 561, 562, 0, 0, 820,
	794, 795, 796, 733, 797, 791, 792, 734, 793, 821,
	785, 817, 818, 761, 788, 798, 816, 799, 819, 822,
	823, 862, 863, 805, 789, 236, 864, 802, 824, 815,
	814, 800, 786, 825, 826, 768, 763, 803, 804, 790,
	808, 809, 810, 735, 782, 783, 784, 806, 807, 764,
	765, 766, 767, 0, 0, 0, 447, 448, 449, 471,
	0, 433, 495, 613, 0, 0, 0, 0, 0, 0,
	0, 545, 557, 591, 0, 601, 602, 604, 606, 811,
	608, 410, 778, 619, 486, 487, 620, 597, 0, 728,
	0, 375, 0, 501, 534, 523, 607, 489, 0, 0,
	0, 0, 0, 0, 731, 0, 0, 0, 315, 1782,
	0, 345, 538, 520, 530, 521, 506, 507, 508, 515,
	325, 509, 510, 511, 481, 512, 482, 513, 514, 769,
	537, 488, 406, 359, 555, 554, 0, 0, 836, 844,
	0, 0, 0, 0, 0, 0, 0, 0, 1983, 0,
	0, 723, 0, 0, 759, 813, 812, 746, 756, 0,
	0, 288, 210, 483, 603, 485, 484, 747, 0, 748,
	752, 755, 751, 749, 750, 0, 828, 0, 0, 0,
	0, 0, 0, 715, 727, 0, 732, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	724, 725, 0, 0, 0, 0, 779, 0, 726, 0,
	0, 1984, 753, 757, 0, 0, 0, 0, 278, 412,
	429, 289, 402, 442, 294, 409, 284, 374, 398, 0,
	0, 280, 427, 408, 356, 335, 336, 279, 0, 393,
	313, 327, 310, 372, 754, 777, 781, 309, 850, 775,
	437, 282, 0, 436, 371, 423, 428, 357, 351, 281,
	425, 355, 350, 339, 317, 851, 340, 341, 331, 383,
	349, 384, 332, 361, 360, 362, 0, 0, 0, 0,
	0, 465, 466, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 596, 772, 0, 600, 0,
	439, 0, 0, 834, 0, 0, 0, 411, 0, 0,
	342, 0, 0, 0, 776, 0, 396, 377, 847, 0,
	0, 394, 347, 424, 385, 430, 413, 438, 390, 386,
	273, 414, 312, 358, 285, 287, 307, 314, 316, 318,
	319, 367, 368, 380, 401, 415, 416, 417, 311, 295,
	395, 296, 329, 297, 274, 303, 301, 304, 403, 305,
	276, 381, 421, 0, 324, 391, 354, 277, 353, 382,
	420, 419, 286, 446, 452, 453, 542, 0, 458, 623,
	624, 625, 467, 472, 473, 474, 476, 477, 478, 479,
	543, 560, 527, 497, 460, 551, 494, 498, 499, 563,
	0, 0, 0, 451, 343, 344, 0, 322, 270, 271,
	618, 832, 373, 565, 598, 599, 490, 0, 846, 827,
	829, 830, 833, 837, 838, 839, 840, 841, 843, 845,
	849, 617, 0, 544, 559, 621, 558, 614, 379, 0,
	400, 556, 503, 0, 548, 522, 0, 549, 518, 553,
	0, 492, 0, 407, 432, 444, 461, 464, 493, 578,
	579, 580, 275, 463, 582, 583, 584, 585, 586, 587,
	588, 581, 848, 525, 502, 528, 443, 505, 504, 0,
	0, 539, 780, 540, 541, 363, 364, 365, 366, 835,
	566, 293, 462, 389, 0, 526, 0, 0, 0, 0,
	0, 0, 0, 0, 531, 532, 529, 626, 0, 589,
	590, 0, 0, 456, 457, 321, 328, 475, 330, 292,
	378, 323, 441, 337, 0, 468, 533, 469, 592, 595,
	593, 594, 370, 333, 334, 404, 338, 348, 392, 440,
	376, 397, 290, 431, 405, 352, 519, 546, 857, 831,
	856, 858, 859, 855, 860, 861, 842, 736, 0, 787,
	853, 852, 854, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 574, 573, 572, 571, 570, 569,
	568, 567, 0, 0, 516, 418, 302, 264, 298, 299,
	306, 615, 612, 422, 616, 0, 272, 496, 346, 0,
	387, 320, 561, 562, 0, 0, 820, 794, 795, 796,
	733, 797, 791, 792, 734, 793, 821, 785, 817, 818,
	761, 788, 798, 816, 799, 819, 822, 823, 862, 863,
	805, 789, 236, 864, 802, 824, 815, 814, 800, 786,
	825, 826, 768, 763, 803, 804, 790, 808, 809, 810,
	735, 782, 783, 784, 806, 807, 764, 765, 766, 767,
	0, 0, 0, 447, 448, 449, 471, 0, 433, 495,
	613, 0, 0, 0, 0, 0, 0, 0, 545, 557,
	591, 0, 601, 602, 604, 606, 811, 608, 410, 0,
	619, 486, 487, 620, 597, 0, 728, 187, 778, 0,
	0, 0, 0, 0, 0, 0, 0, 375, 0, 501,
	534, 523, 607, 489, 0, 0, 0, 0, 0, 0,
	731, 0, 0, 0, 315, 0, 0, 345, 538, 520,
	530, 521, 506, 507, 508, 515, 325, 509, 510, 511,
	481, 512, 482, 513, 514, 1231, 537, 488, 406, 359,
	555, 554, 0, 0, 836, 844, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 723, 0, 0,
	759, 813, 812, 746, 756, 0, 0, 288, 210, 483,
	603, 485, 484, 747, 0, 748, 752, 755, 751, 749,
	750, 0, 828, 0, 0, 0, 0, 0, 0, 715,
	727, 0, 732, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 724, 725, 0, 0,
	0, 0, 779, 0, 726, 0, 0, 774, 753, 757,
	0, 0, 0, 0, 278, 412, 429, 289, 402, 442,
	294, 409, 284, 374, 398, 0, 0, 280, 427, 408,
	356, 335, 336, 279, 0, 393, 313, 327, 310, 372,
	754, 777, 781, 309, 850, 775, 437, 282, 0, 436,
	371, 423, 428, 357, 351, 281, 425, 355, 350, 339,
	317, 851, 340, 341, 331, 383, 349, 384, 332, 361,
	360, 362, 0, 0, 0, 0, 0, 465, 466, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 596, 772, 0, 600, 0, 439, 0, 0, 834,
	0, 0, 0, 411, 0, 0, 342, 0, 0, 0,
	776, 0, 396, 377, 847, 0, 0, 394, 347, 424,
	385, 430, 413, 438, 390, 386, 273, 414, 312, 358,
	285, 287, 307, 314, 316, 318, 319, 367, 368, 380,
	401, 415, 416, 417, 311, 295, 395, 296, 329, 297,
	274, 303, 301, 304, 403, 305, 276, 381, 421, 0,
	324, 391, 354, 277, 353, 382, 420, 419, 286, 446,
	452, 453, 542, 0, 458, 623, 624, 625, 467, 472,
	473, 474, 476, 477, 478, 479, 543, 560, 527, 497,
	460, 551, 494, 498, 499, 563, 0, 0, 0, 451,
	343, 344, 0, 322, 270, 271, 618, 832, 373, 565,
	598, 599, 490, 0, 846, 827, 829, 830, 833, 837,
	838, 839, 840, 841, 843, 845, 849, 617, 0, 544,
	559, 621, 558, 614, 379, 0, 400, 556, 503, 0,
	548, 522, 0, 549, 518, 553, 0, 492, 0, 407,
	432, 444, 461, 464, 493, 578, 579, 580, 275, 463,
	582, 583, 584, 585, 586, 587, 588, 581, 848, 525,
	502, 528, 443, 505, 504, 0, 0, 539, 780, 540,
	541, 363, 364, 365, 366, 835, 566, 293, 462, 389,
	0, 526, 0, 0, 0, 0, 0, 0, 0, 0,
	531, 532, 529, 626, 0, 589, 590, 0, 0, 456,
	457, 321, 328, 475, 330, 292, 378, 323, 441, 337,
	0, 468, 533, 469, 592, 595, 593, 594, 370, 333,
	334, 404, 338, 348, 392, 440, 376, 397, 290, 431,
	405, 352, 519, 546, 857, 831, 856, 858, 859, 855,
	860, 861, 842, 736, 0, 787, 853, 852, 854, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	574, 573, 572, 571, 570, 569, 568, 567, 0, 0,
	516, 418, 302, 264, 298, 299, 306, 615, 612, 422,
	616, 0, 272, 496, 346, 150, 387, 320, 561, 562,
	0, 0, 820, 794, 795, 796, 733, 797, 791, 792,
	734, 793, 821, 785, 817, 818, 761, 788, 798, 816,
	799, 819, 822, 823, 862, 863, 805, 789, 236, 864,
	802, 824, 815, 814, 800, 786, 825, 826, 768, 763,
	803, 804, 790, 808, 809, 810, 735, 782, 783, 784,
	806, 807, 764, 765, 766, 767, 0, 0, 0, 447,
	448, 449, 471, 0, 433, 495, 613, 0, 0, 0,
	0, 0, 0, 0, 545, 557, 591, 0, 601, 602,
	604, 606, 811, 608, 410, 778, 619, 486, 487, 620,
	597, 0, 728, 0, 375, 0, 501, 534, 523, 607,
	489, 0, 0, 0, 0, 0, 0, 731, 0, 0,
	0, 315, 3891, 0, 345, 538, 520, 530, 521, 506,
	507, 508, 515, 325, 509, 510, 511, 481, 512, 482,
	513, 514, 769, 537, 488, 406, 359, 555, 554, 0,
	0, 836, 844, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 723, 0, 0, 759, 813, 812,
	746, 756, 0, 0, 288, 210, 483, 603, 485, 484,
	747, 0, 748, 752, 755, 751, 749, 750, 0, 828,
	0, 0, 0, 0, 0, 0, 715, 727, 0, 732,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 724, 725, 0, 0, 0, 0, 779,
	0, 726, 0, 0, 774, 753, 757, 0, 0, 0,
	0, 278, 412, 429, 289, 402, 442, 294, 409, 284,
	374, 398, 0, 0, 280, 427, 408, 356, 335, 336,
	279, 0, 393, 313, 327, 310, 372, 754, 777, 781,
	309, 850, 775, 437, 282, 0, 436, 371, 423, 428,
	357, 351, 281, 425, 355, 350, 339, 317, 851, 340,
	341, 331, 383, 349, 384, 332, 361, 360, 362, 0,
	0, 0, 0, 0, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 596, 772,
	0, 600, 0, 439, 0, 0, 834, 0, 0, 0,
	411, 0, 0, 342, 0, 0, 0, 776, 0, 396,
	377, 847, 0, 0, 394, 347, 424, 385, 430, 413,
	438, 390, 386, 273, 414, 312, 358, 285, 287, 307,
	314, 316, 318, 319, 367, 368, 380, 401, 415, 416,
	417, 311, 295, 395, 296, 329, 297, 274, 303, 301,
	304, 403, 305, 276, 381, 421, 0, 324, 391, 354,
	277, 353, 382, 420, 419, 286, 446, 452, 453, 542,
	0, 458, 623, 624, 625, 467, 472, 473, 474, 476,
	477, 478, 479, 543, 560, 527, 497, 460, 551, 494,
	498, 499, 563, 0, 0, 0, 451, 343, 344, 0,
	322, 270, 271, 618, 832, 373, 565, 598, 599, 490,
	0, 846, 827, 829, 830, 833, 837, 838, 839, 840,
	841, 843, 845, 849, 617, 0, 544, 559, 621, 558,
	614, 379, 0, 400, 556, 503, 0, 548, 522, 0,
	549, 518, 553, 0, 492, 0, 407, 432, 444, 461,
	464, 493, 578, 579, 580, 275, 463, 582, 583, 584,
	585, 586, 587, 588, 581, 848, 525, 502, 528, 443,
	505, 504, 0, 0, 539, 780, 540, 541, 363, 364,
	365, 366, 835, 566, 293, 462, 389, 0, 526, 0,
	0, 0, 0, 0, 0, 0, 0, 531, 532, 529,
	626, 0, 589, 590, 0, 0, 456, 457, 321, 328,
	475, 330, 292, 378, 323, 441, 337, 0, 468, 533,
	469, 592, 595, 593, 594, 370, 333, 334, 404, 338,
	348, 392, 440, 376, 397, 290, 431, 405, 352, 519,
	546, 857, 831, 856, 858, 859, 855, 860, 861, 842,
	736, 0, 787, 853, 852, 854, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 574, 573, 572,
	571, 570, 569, 568, 567, 0, 0, 516, 418, 302,
	264, 298, 299, 306, 615, 612, 422, 616, 0, 272,
	496, 346, 0, 387, 320, 561, 562, 0, 0, 820,
	794, 795, 796, 733, 797, 791, 792, 734, 793, 821,
	785, 817, 818, 761, 788, 798, 816, 799, 819, 822,
	823, 862, 863, 805, 789, 236, 864, 802, 824, 815,
	814, 800, 786, 825, 826, 768, 763, 803, 804, 790,
	808, 809, 810, 735, 782, 783, 784, 806, 807, 764,
	765, 766, 767, 0, 0, 0, 447, 448, 449, 471,
	0, 433, 495, 613, 0, 0, 0, 0, 0, 0,
	0, 545, 557, 591, 0, 601, 602, 604, 606, 811,
	608, 410, 778, 619, 486, 487, 620, 597, 0, 728,
	0, 375, 0, 501, 534, 523, 607, 489, 0, 0,
	0, 0, 0, 0, 731, 0, 0, 0, 315, 0,
	0, 345, 538, 520, 530, 521, 506, 507, 508, 515,
	325, 509, 510, 511, 481, 512, 482, 513, 514, 769,
	537, 488, 406, 359, 555, 554, 0, 0, 836, 844,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 723, 0, 0, 759, 813, 812, 746, 756, 0,
	0, 288, 210, 483, 603, 485, 484, 747, 0, 748,
	752, 755, 751, 749, 750, 0, 828, 0, 0, 0,
	0, 0, 0, 715, 727, 0, 732, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	724, 725, 0, 0, 0, 0, 779, 0, 726, 0,
	0, 774, 753, 757, 0, 0, 0, 0, 278, 412,
	429, 289, 402, 442, 294, 409, 284, 374, 398, 0,
	0, 280, 427, 408, 356, 335, 336, 279, 0, 393,
	313, 327, 310, 372, 754, 777, 781, 309, 850, 775,
	437, 282, 0, 436, 371, 423, 428, 357, 351, 281,
	425, 355, 350, 339, 317, 851, 340, 341, 331, 383,
	349, 384, 332, 361, 360, 362, 0, 0, 0, 0,
	0, 465, 466, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 596, 772, 0, 600, 0,
	439, 0, 0, 834, 0, 0, 0, 411, 0, 0,
	342, 0, 0, 0, 776, 0, 396, 377, 847, 3786,
	0, 394, 347, 424, 385, 430, 413, 438, 390, 386,
	273, 414, 312, 358, 285, 287, 307, 314, 316, 318,
	319, 367, 368, 380, 401, 415, 416, 417, 311, 295,
	395, 296, 329, 297, 274, 303, 301, 304, 403, 305,
	276, 381, 421, 0, 324, 391, 354, 277, 353, 382,
	420, 419, 286, 446, 452, 453, 542, 0, 458, 623,
	624, 625, 467, 472, 473, 474, 476, 477, 478, 479,
	543, 560, 527, 497, 460, 551, 494, 498, 499, 563,
	0, 0, 0, 451, 343, 344, 0, 322, 270, 271,
	618, 832, 373, 565, 598, 599, 490, 0, 846, 827,
	829, 830, 833, 837, 838, 839, 840, 841, 843, 845,
	849, 617, 0, 544, 559, 621, 558, 614, 379, 0,
	400, 556, 503, 0, 548, 522, 0, 549, 518, 553,
	0, 492, 0, 407, 432, 444, 461, 464, 493, 578,
	579, 580, 275, 463, 582, 583, 584, 585, 586, 587,
	588, 581, 848, 525, 502, 528, 443, 505, 504, 0,
	0, 539, 780, 540, 541, 363, 364, 365, 366, 835,
	566, 293, 462, 389, 0, 526, 0, 0, 0, 0,
	0, 0, 0, 0, 531, 532, 529, 626, 0, 589,
	590, 0, 0, 456, 457, 321, 328, 475, 330, 292,
	378, 323, 441, 337, 0, 468, 533, 469, 592, 595,
	593, 594, 370, 333, 334, 404, 338, 348, 392, 440,
	376, 397, 290, 431, 405, 352, 519, 546, 857, 831,
	856, 858, 859, 855, 860, 861, 842, 736, 0, 787,
	853, 852, 854, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 574, 573, 572, 571, 570, 569,
	568, 567, 0, 0, 516, 418, 302, 264, 298, 299,
	306, 615, 612, 422, 616, 0, 272, 496, 346, 0,
	387, 320, 561, 562, 0, 0, 820, 794, 795, 796,
	733, 797, 791, 792, 734, 793, 821, 785, 817, 818,
	761, 788, 798, 816, 799, 819, 822, 823, 862, 863,
	805, 789, 236, 864, 802, 824, 815, 814, 800, 786,
	825, 826, 768, 763, 803, 804, 790, 808, 809, 810,
	735, 782, 783, 784, 806, 807, 764, 765, 766, 767,
	0, 0, 0, 447, 448, 449, 471, 0, 433, 495,
	613, 0, 0, 0, 0, 0, 0, 0, 545, 557,
	591, 0, 601, 602, 604, 606, 811, 608, 410, 778,
	619, 486, 487, 620, 597, 0, 728, 0, 375, 0,
	501, 534, 523, 607, 489, 0, 0, 0, 0, 0,
	0, 731, 0, 0, 0, 315, 1782, 0, 345, 538,
	520, 530, 521, 506, 507, 508, 515, 325, 509, 510,
	511, 481, 512, 482, 513, 514, 769, 537, 488, 406,
	359, 555, 554, 0, 0, 836, 844, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 723, 0,
	0, 759, 813, 812, 746, 756, 0, 0, 288, 210,
	483, 603, 485, 484, 747, 0, 748, 752, 755, 751,
	749, 750, 0, 828, 0, 0, 0, 0, 0, 0,
	715, 727, 0, 732, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 724, 725, 0,
	0, 0, 0, 779, 0, 726, 0, 0, 774, 753,
	757, 0, 0, 0, 0, 278, 412, 429, 289, 402,
	442, 294, 409, 284, 374, 398, 0, 0, 280, 427,
	408, 356, 335, 336, 279, 0, 393, 313, 327, 310,
	372, 754, 777, 781, 309, 850, 775, 437, 282, 0,
	436, 371, 423, 428, 357, 351, 281, 425, 355, 350,
	339, 317, 851, 340, 341, 331, 383, 349, 384, 332,
	361, 360, 362, 0, 0, 0, 0, 0, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 596, 772, 0, 600, 0, 439, 0, 0,
	834, 0, 0, 0, 411, 0, 0, 342, 0, 0,
	0, 776, 0, 396, 377, 847, 0, 0, 394, 347,
	424, 385, 430, 413, 438, 390, 386, 273, 414, 312,
	358, 285, 287, 307, 314, 316, 318, 319, 367, 368,
	380, 401, 415, 416, 417, 311, 295, 395, 296, 329,
	297, 274, 303, 301, 304, 403, 305, 276, 381, 421,
	0, 324, 391, 354, 277, 353, 382, 420, 419, 286,
	446, 452, 453, 542, 0, 458, 623, 624, 625, 467,
	472, 473, 474, 476, 477, 478, 479, 543, 560, 527,
	497, 460, 551, 494, 498, 499, 563, 0, 0, 0,
	451, 343, 344, 0, 322, 270, 271, 618, 832, 373,
	565, 598, 599, 490, 0, 846, 827, 829, 830, 833,
	837, 838, 839, 840, 841, 843, 845, 849, 617, 0,
	544, 559, 621, 558, 614, 379, 0, 400, 556, 503,
	0, 548, 522, 0, 549, 518, 553, 0, 492, 0,
	407, 432, 444, 461, 464, 493, 578, 579, 580, 275,
	463, 582, 583, 584, 585, 586, 587, 588, 581, 848,
	525, 502, 528, 443, 505, 504, 0, 0, 539, 780,
	540, 541, 363, 364, 365, 366, 835, 566, 293, 462,
	389, 0, 526, 0, 0, 0, 0, 0, 0, 0,
	0, 531, 532, 529, 626, 0, 589, 590, 0, 0,
	456, 457, 321, 328, 475, 330, 292, 378, 323, 441,
	337, 0, 468, 533, 469, 592, 595, 593, 594, 370,
	333, 334, 404, 338, 348, 392, 440, 376, 397, 290,
	431, 405, 352, 519, 546, 857, 831, 856, 858, 859,
	855, 860, 861, 842, 736, 0, 787, 853, 852, 854,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 574, 573, 572, 571, 570, 569, 568, 567, 0,
	0, 516, 418, 302, 264, 298, 299, 306, 615, 612,
	422, 616, 0, 272, 496, 346, 0, 387, 320, 561,
	562, 0, 0, 820, 794, 795, 796, 733, 797, 791,
	792, 734, 793, 821, 785, 817, 818, 761, 788, 798,
	816, 799, 819, 822, 823, 862, 863, 805, 789, 236,
	864, 802, 824, 815, 814, 800, 786, 825, 826, 768,
	763, 803, 804, 790, 808, 809, 810, 735, 782, 783,
	784, 806, 807, 764, 765, 766, 767, 0, 0, 0,
	447, 448, 449, 471, 0, 433, 495, 613, 0, 0,
	0, 0, 0, 0, 0, 545, 557, 591, 0, 601,
	602, 604, 606, 811, 608, 410, 778, 619, 486, 487,
	620, 597, 0, 728, 0, 375, 0, 501, 534, 523,
	607, 489, 0, 0, 0, 0, 0, 0, 731, 0,
	0, 0, 315, 0, 0, 345, 538, 520, 530, 521,
	506, 507, 508, 515, 325, 509, 510, 511, 481, 512,
	482, 513, 514, 769, 537, 488, 406, 359, 555, 554,
	0, 0, 836, 844, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 723, 0, 0, 759, 813,
	812, 746, 756, 0, 0, 288, 210, 483, 603, 485,
	484, 747, 0, 748, 752, 755, 751, 749, 750, 0,
	828, 0, 0, 0, 0, 0, 0, 715, 727, 0,
	732, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 724, 725, 1504, 0, 0, 0,
	779, 0, 726, 0, 0, 774, 753, 757, 0, 0,
	0, 0, 278, 412, 429, 289, 402, 442, 294, 409,
	284, 374, 398, 0, 0, 280, 427, 408, 356, 335,
	336, 279, 0, 393, 313, 327, 310, 372, 754, 777,
	781, 309, 850, 775, 437, 282, 0, 436, 371, 423,
	428, 357, 351, 281, 425, 355, 350, 339, 317, 851,
	340, 341, 331, 383, 349, 384, 332, 361, 360, 362,
	0, 0, 0, 0, 0, 465, 466, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 596,
	772, 0, 600, 0, 439, 0, 0, 834, 0, 0,
	0, 411, 0, 0, 342, 0, 0, 0, 776, 0,
	396, 377, 847, 0, 0, 394, 347, 424, 385, 430,
	413, 438, 390, 386, 273, 414, 312, 358, 285, 287,
	307, 314, 316, 318, 319, 367, 368, 380, 401, 415,
	416, 417, 311, 295, 395, 296, 329, 297, 274, 303,
	301, 304, 403, 305, 276, 381, 421, 0, 324, 391,
	354, 277, 353, 382, 420, 419, 286, 446, 452, 453,
	542, 0, 458, 623, 624, 625, 467, 472, 473, 474,
	476, 477, 478, 479, 543, 560, 527, 497, 460, 551,
	494, 498, 499, 563, 0, 0, 0, 451, 343, 344,
	0, 322, 270, 271, 618, 832, 373, 565, 598, 599,
	490, 0, 846, 827, 829, 830, 833, 837, 838, 839,
	840, 841, 843, 845, 849, 617, 0, 544, 559, 621,
	558, 614, 379, 0, 400, 556, 503, 0, 548, 522,
	0, 549, 518, 553, 0, 492, 0, 407, 432, 444,
	461, 464, 493, 578, 579, 580, 275, 463, 582, 583,
	584, 585, 586, 587, 588, 581, 848, 525, 502, 528,
	443, 505, 504, 0, 0, 539, 780, 540, 541, 363,
	364, 365, 366, 835, 566, 293, 462, 389, 0, 526,
	0, 0, 0, 0, 0, 0, 0, 0, 531, 532,
	529, 626, 0, 589, 590, 0, 0, 456, 457, 321,
	328, 475, 330, 292, 378, 323, 441, 337, 0, 468,
	533, 469, 592, 595, 593, 594, 370, 333, 334, 404,
	338, 348, 392, 440, 376, 397, 290, 431, 405, 352,
	519, 546, 857, 831, 856, 858, 859, 855, 860, 861,
	842, 736, 0, 787, 853, 852, 854, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 574, 573,
	572, 571, 570, 569, 568, 567, 0, 0, 516, 418,
	302, 264, 298, 299, 306, 615, 612, 422, 616, 0,
	272, 496, 346, 0, 387, 320, 561, 562, 0, 0,
	820, 794, 795, 796, 733, 797, 791, 792, 734, 793,
	821, 785, 817, 818, 761, 788, 798, 816, 799, 819,
	822, 823, 862, 863, 805, 789, 236, 864, 802, 824,
	815, 814, 800, 786, 825, 826, 768, 763, 803, 804,
	790, 808, 809, 810, 735, 782, 783, 784, 806, 807,
	764, 765, 766, 767, 0, 0, 0, 447, 448, 449,
	471, 0, 433, 495, 613, 0, 0, 0, 0, 0,
	0, 0, 545, 557, 591, 0, 601, 602, 604, 606,
	811, 608, 410, 0, 619, 486, 487, 620, 597, 778,
	728, 0, 2155, 0, 0, 0, 0, 0, 375, 0,
	501, 534, 523, 607, 489, 0, 0, 0, 0, 0,
	0, 731, 0, 0, 0, 315, 0, 0, 345, 538,
	520, 530, 521, 506, 507, 508, 515, 325, 509, 510,
	511, 481, 512, 482, 513, 514, 769, 537, 488, 406,
	359, 555, 554, 0, 0, 836, 844, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 723, 0,
	0, 759, 813, 812, 746, 756, 0, 0, 288, 210,
	483, 603, 485, 484, 747, 0, 748, 752, 755, 751,
	749, 750, 0, 828, 0, 0, 0, 0, 0, 0,
	715, 727, 0, 732, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 724, 725, 0,
	0, 0, 0, 779, 0, 726, 0, 0, 774, 753,
	757, 0, 0, 0, 0, 278, 412, 429, 289, 402,
	442, 294, 409, 284, 374, 398, 0, 0, 280, 427,
	408, 356, 335, 336, 279, 0, 393, 313, 327, 310,
	372, 754, 777, 781, 309, 850, 775, 437, 282, 0,
	436, 371, 423, 428, 357, 351, 281, 425, 355, 350,
	339, 317, 851, 340, 341, 331, 383, 349, 384, 332,
	361, 360, 362, 0, 0, 0, 0, 0, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 596, 772, 0, 600, 0, 439, 0, 0,
	834, 0, 0, 0, 411, 0, 0, 342, 0, 0,
	0, 776, 0, 396, 377, 847, 0, 0, 394, 347,
	424, 385, 430, 413, 438, 390, 386, 273, 414, 312,
	358, 285, 287, 307, 314, 316, 318, 319, 367, 368,
	380, 401, 415, 416, 417, 311, 295, 395, 296, 329,
	297, 274, 303, 301, 304, 403, 305, 276, 381, 421,
	0, 324, 391, 354, 277, 353, 382, 420, 419, 286,
	446, 452, 453, 542, 0, 458, 623, 624, 625, 467,
	472, 473, 474, 476, 477, 478, 479, 543, 560, 527,
	497, 460, 551, 494, 498, 499, 563, 0, 0, 0,
	451, 343, 344, 0, 322, 270, 271, 618, 832, 373,
	565, 598, 599, 490, 0, 846, 827, 829, 830, 833,
	837, 838, 839, 840, 841, 843, 845, 849, 617, 0,
	544, 559, 621, 558, 614, 379, 0, 400, 556, 503,
	0, 548, 522, 0, 549, 518, 553, 0, 492, 0,
	407, 432, 444, 461, 464, 493, 578, 579, 580, 275,
	463, 582, 583, 584, 585, 586, 587, 588, 581, 848,
	525, 502, 528, 443, 505, 504, 0, 0, 539, 780,
	540, 541, 363, 364, 365, 366, 835, 566, 293, 462,
	389, 0, 526, 0, 0, 0, 0, 0, 0, 0,
	0, 531, 532, 529, 626, 0, 589, 590, 0, 0,
	456, 457, 321, 328, 475, 330, 292, 378, 323, 441,
	337, 0, 468, 533, 469, 592, 595, 593, 594, 370,
	333, 334, 404, 338, 348, 392, 440, 376, 397, 290,
	431, 405, 352, 519, 546, 857, 831, 856, 858, 859,
	855, 860, 861, 842, 736, 0, 787, 853, 852, 854,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 574, 573, 572, 571, 570, 569, 568, 567, 0,
	0, 516, 418, 302, 264, 298, 299, 306, 615, 612,
	422, 616, 0, 272, 496, 346, 0, 387, 320, 561,
	562, 0, 0, 820, 794, 795, 796, 733, 797, 791,
	792, 734, 793, 821, 785, 817, 818, 761, 788, 798,
	816, 799, 819, 822, 823, 862, 863, 805, 789, 236,
	864, 802, 824, 815, 814, 800, 786, 825, 826, 768,
	763, 803, 804, 790, 808, 809, 810, 735, 782, 783,
	784, 806, 807, 764, 765, 766, 767, 0, 0, 0,
	447, 448, 449, 471, 0, 433, 495, 613, 0, 0,
	0, 0, 0, 0, 0, 545, 557, 591, 0, 601,
	602, 604, 606, 811, 608, 410, 778, 619, 486, 487,
	620, 597, 0, 728, 0, 375, 0, 501, 534, 523,
	607, 489, 0, 0, 0, 0, 0, 0, 731, 0,
	0, 0, 315, 0, 0, 345, 538, 520, 530, 521,
	506, 507, 508, 515, 325, 509, 510, 511, 481, 512,
	482, 513, 514, 769, 537, 488, 406, 359, 555, 554,
	0, 0, 836, 844, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 723, 0, 0, 759, 813,
	812, 746, 756, 0, 0, 288, 210, 483, 603, 485,
	484, 747, 0, 748, 752, 755, 751, 749, 750, 0,
	828, 0, 0, 0, 0, 0, 0, 715, 727, 0,
	732, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 724, 725, 1775, 0, 0, 0,
	779, 0, 726, 0, 0, 774, 753, 757, 0, 0,
	0, 0, 278, 412, 429, 289, 402, 442, 294, 409,
	284, 374, 398, 0, 0, 280, 427, 408, 356, 335,
	336, 279, 0, 393, 313, 327, 310, 372, 754, 777,
	781, 309, 850, 775, 437, 282, 0, 436, 371, 423,
	428, 357, 351, 281, 425, 355, 350, 339, 317, 851,
	340, 341, 331, 383, 349, 384, 332, 361, 360, 362,
	0, 0, 0, 0, 0, 465, 466, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 596,
	772, 0, 600, 0, 439, 0, 0, 834, 0, 0,
	0, 411, 0, 0, 342, 0, 0, 0, 776, 0,
	396, 377, 847, 0, 0, 394, 347, 424, 385, 430,
	413, 438, 390, 386, 273, 414, 312, 358, 285, 287,
	307, 314, 316, 318, 319, 367, 368, 380, 401, 415,
	416, 417, 311, 295, 395, 296, 329, 297, 274, 303,
	301, 304, 403, 305, 276, 381, 421, 0, 324, 391,
	354, 277, 353, 382, 420, 419, 286, 446, 452, 453,
	542, 0, 458, 623, 624, 625, 467, 472, 473, 474,
	476, 477, 478, 479, 543, 560, 527, 497, 460, 551,
	494, 498, 499, 563, 0, 0, 0, 451, 343, 344,
	0, 322, 270, 271, 618, 832, 373, 565, 598, 599,
	490, 0, 846, 827, 829, 830, 833, 837, 838, 839,
	840, 841, 843, 845, 849, 617, 0, 544, 559, 621,
	558, 614, 379, 0, 400, 556, 503, 0, 548, 522,
	0, 549, 518, 553, 0, 492, 0, 407, 432, 444,
	461, 464, 493, 578, 579, 580, 275, 463, 582, 583,
	584, 585, 586, 587, 588, 581, 848, 525, 502, 528,
	443, 505, 504, 0, 0, 539, 780, 540, 541, 363,
	364, 365, 366, 835, 566, 293, 462, 389, 0, 526,
	0, 0, 0, 0, 0, 0, 0, 0, 531, 532,
	529, 626, 0, 589, 590, 0, 0, 456, 457, 321,
	328, 475, 330, 292, 378, 323, 441, 337, 0, 468,
	533, 469, 592, 595, 593, 594, 370, 333, 334, 404,
	338, 348, 392, 440, 376, 397, 290, 431, 405, 352,
	519, 546, 857, 831, 856, 858, 859, 855, 860, 861,
	842, 736, 0, 787, 853, 852, 854, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 574, 573,
	572, 571, 570, 569, 568, 567, 0, 0, 516, 418,
	302, 264, 298, 299, 306, 615, 612, 422, 616, 0,
	272, 496, 346, 0, 387, 320, 561, 562, 0, 0,
	820, 794, 795, 796, 733, 797, 791, 792, 734, 793,
	821, 785, 817, 818, 761, 788, 798, 816, 799, 819,
	822, 823, 862, 863, 805, 789, 236, 864, 802, 824,
	815, 814, 800, 786, 825, 826, 768, 763, 803, 804,
	790, 808, 809, 810, 735, 782, 783, 784, 806, 807,
	764, 765, 766, 767, 0, 0, 0, 447, 448, 449,
	471, 0, 433, 495, 613, 0, 0, 0, 0, 0,
	0, 0, 545, 557, 591, 0, 601, 602, 604, 606,
	811, 608, 410, 778, 619, 486, 487, 620, 597, 0,
	728, 0, 375, 0, 501, 534, 523, 607, 489, 0,
	0, 0, 0, 0, 0, 731, 0, 0, 0, 315,
	0, 0, 345, 538, 520, 530, 521, 506, 507, 508,
	515, 325, 509, 510, 511, 481, 512, 482, 513, 514,
	769, 537, 488, 406, 359, 555, 554, 0, 0, 836,
	844, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 723, 0, 0, 759, 813, 812, 746, 756,
	0, 0, 288, 210, 483, 603, 485, 484, 747, 0,
	748, 752, 755, 751, 749, 750, 0, 828, 0, 0,
	0, 0, 0, 0, 715, 727, 0, 732, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 724, 725, 0, 0, 0, 0, 779, 0, 726,
	0, 0, 774, 753, 757, 0, 0, 0, 0, 278,
	412, 429, 289, 402, 442, 294, 409, 284, 374, 398,
	0, 0, 280, 427, 408, 356, 335, 336, 279, 0,
	393, 313, 327, 310, 372, 754, 777, 781, 309, 850,
	775, 437, 282, 0, 436, 371, 423, 428, 357, 351,
	281, 425, 355, 350, 339, 317, 851, 340, 341, 331,
	383, 349, 384, 332, 361, 360, 362, 0, 0, 0,
	0, 0, 465, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 596, 772, 0, 600,
	0, 439, 0, 0, 834, 0, 0, 0, 411, 0,
	0, 342, 0, 0, 0, 776, 0, 396, 377, 847,
	0, 0, 394, 347, 424, 385, 430, 413, 438, 390,
	386, 273, 414, 312, 358, 285, 287, 307, 314, 316,
	318, 319, 367, 368, 380, 401, 415, 416, 417, 311,
	295, 395, 296, 329, 297, 274, 303, 301, 304, 403,
	305, 276, 381, 421, 0, 324, 391, 354, 277, 353,
	382, 420, 419, 286, 446, 452, 453, 542, 0, 458,
	623, 624, 625, 467, 472, 473, 474, 476, 477, 478,
	479, 543, 560, 527, 497, 460, 551, 494, 498, 499,
	563, 0, 0, 0, 451, 343, 344, 0, 322, 270,
	271, 618, 832, 373, 565, 598, 599, 490, 0, 846,
	827, 829, 830, 833, 837, 838, 839, 840, 841, 843,
	845, 849, 617, 0, 544, 559, 621, 558, 614, 379,
	0, 400, 556, 503, 0, 548, 522, 0, 549, 518,
	553, 0, 492, 0, 407, 432, 444, 461, 464, 493,
	578, 579, 580, 275, 463, 582, 583, 584, 585, 586,
	587, 588, 581, 848, 525, 502, 528, 443, 505, 504,
	0, 0, 539, 780, 540, 541, 363, 364, 365, 366,
	835, 566, 293, 462, 389, 0, 526, 0, 0, 0,
	0, 0, 0, 0, 0, 531, 532, 529, 626, 0,
	589, 590, 0, 0, 456, 457, 321, 328, 475, 330,
	292, 378, 323, 441, 337, 0, 468, 533, 469, 592,
	595, 593, 594, 370, 333, 334, 404, 338, 348, 392,
	440, 376, 397, 290, 431, 405, 352, 519, 546, 857,
	831, 856, 858, 859, 855, 860, 861, 842, 736, 0,
	787, 853, 852, 854, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 574, 573, 572, 571, 570,
	569, 568, 567, 0, 0, 516, 418, 302, 264, 298,
	299, 306, 615, 612, 422, 616, 0, 272, 496, 346,
	0, 387, 320, 561, 562, 0, 0, 820, 794, 795,
	796, 733, 797, 791, 792, 734, 793, 821, 785, 817,
	818, 761, 788, 798, 816, 799, 819, 822, 823, 862,
	863, 805, 789, 236, 864, 802, 824, 815, 814, 800,
	786, 825, 826, 768, 763, 803, 804, 790, 808, 809,
	810, 735, 782, 783, 784, 806, 807, 764, 765, 766,
	767, 0, 0, 0, 447, 448, 449, 471, 0, 433,
	495, 613, 0, 0, 0, 0, 0, 0, 0, 545,
	557, 591, 0, 601, 602, 604, 606, 811, 608, 410,
	778, 619, 486, 487, 620, 597, 0, 728, 0, 375,
	0, 501, 534, 523, 607, 489, 0, 0, 0, 0,
	0, 0, 731, 0, 0, 0, 315, 0, 0, 345,
	538, 520, 530, 521, 506, 507, 508, 515, 325, 509,
	510, 511, 481, 512, 482, 513, 514, 769, 537, 488,
	406, 359, 555, 554, 0, 0, 836, 844, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 723,
	0, 0, 759, 813, 812, 746, 756, 0, 0, 288,
	210, 483, 603, 485, 484, 2611, 0, 2612, 752, 755,
	751, 749, 750, 0, 828, 0, 0, 0, 0, 0,
	0, 715, 727, 0, 732, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 724, 725,
	0, 0, 0, 0, 779, 0, 726, 0, 0, 774,
	753, 757, 0, 0, 0, 0, 278, 412, 429, 289,
	402, 442, 294, 409, 284, 374, 398, 0, 0, 280,
	427, 408, 356, 335, 336, 279, 0, 393, 313, 327,
	310, 372, 754, 777, 781, 309, 850, 775, 437, 282,
	0, 436, 371, 423, 428, 357, 351, 281, 425, 355,
	350, 339, 317, 851, 340, 341, 331, 383, 349, 384,
	332, 361, 360, 362, 0, 0, 0, 0, 0, 465,
	466, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 596, 772, 0, 600, 0, 439, 0,
	0, 834, 0, 0, 0, 411, 0, 0, 342, 0,
	0, 0, 776, 0, 396, 377, 847, 0, 0, 394,
	347, 424, 385, 430, 413, 438, 390, 386, 273, 414,
	312, 358, 285, 287, 307, 314, 316, 318, 319, 367,
	368, 380, 401, 415, 416, 417, 311, 295, 395, 296,
	329, 297, 274, 303, 301, 304, 403, 305, 276, 381,
	421, 0, 324, 391, 354, 277, 353, 382, 420, 419,
	286, 446, 452, 453, 542, 0, 458, 623, 624, 625,
	467, 472, 473, 474, 476, 477, 478, 479, 543, 560,
	527, 497, 460, 551, 494, 498, 499, 563, 0, 0,
	0, 451, 343, 344, 0, 322, 270, 271, 618, 832,
	373, 565, 598, 599, 490, 0, 846, 827, 829, 830,
	833, 837, 838, 839, 840, 841, 843, 845, 849, 617,
	0, 544, 559, 621, 558, 614, 379, 0, 400, 556,
	503, 0, 548, 522, 0, 549, 518, 553, 0, 492,
	0, 407, 432, 444, 461, 464, 493, 578, 579, 580,
	275, 463, 582, 583, 584, 585, 586, 587, 588, 581,
	848, 525, 502, 528, 443, 505, 504, 0, 0, 539,
	780, 540, 541, 363, 364, 365, 366, 835, 566, 293,
	462, 389, 0, 526, 0, 0, 0, 0, 0, 0,
	0, 0, 531, 532, 529, 626, 0, 589, 590, 0,
	0, 456, 457, 321, 328, 475, 330, 292, 378, 323,
	441, 337, 0, 468, 533, 469, 592, 595, 593, 594,
	370, 333, 334, 404, 338, 348, 392, 440, 376, 397,
	290, 431, 405, 352, 519, 546, 857, 831, 856, 858,
	859, 855, 860, 861, 842, 736, 0, 787, 853, 852,
	854, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 574, 573, 572, 571, 570, 569, 568, 567,
	0, 0, 516, 418, 302, 264, 298, 299, 306, 615,
	612, 422, 616, 0, 272, 496, 346, 0, 387, 320,
	561, 562, 0, 0, 820, 794, 795, 796, 733, 797,
	791, 792, 734, 793, 821, 785, 817, 818, 761, 788,
	798, 816, 799, 819, 822, 823, 862, 863, 805, 789,
	236, 864, 802, 824, 815, 814, 800, 786, 825, 826,
	768, 763, 803, 804, 790, 808, 809, 810, 735, 782,
	783, 784, 806, 807, 764, 765, 766, 767, 0, 0,
	0, 447, 448, 449, 471, 0, 433, 495, 613, 0,
	0, 0, 0, 0, 0, 0, 545, 557, 591, 0,
	601, 602, 604, 606, 811, 608, 410, 778, 619, 486,
	487, 620, 597, 0, 728, 0, 375, 0, 501, 534,
	523, 607, 489, 0, 0, 1645, 0, 0, 0, 731,
	0, 0, 0, 315, 0, 0, 345, 538, 520, 530,
	521, 506, 507, 508, 515, 325, 509, 510, 511, 481,
	512, 482, 513, 514, 769, 537, 488, 406, 359, 555,
	554, 0, 0, 836, 844, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 723, 0, 0, 759,
	813, 812, 746, 756, 0, 0, 288, 210, 483, 603,
	485, 484, 747, 0, 748, 752, 755, 751, 749, 750,
	0, 828, 0, 0, 0, 0, 0, 0, 0, 727,
	0, 732, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 724, 725, 0, 0, 0,
	0, 779, 0, 726, 0, 0, 774, 753, 757, 0,
	0, 0, 0, 278, 412, 429, 289, 402, 442, 294,
	409, 284, 374, 398, 0, 0, 280, 427, 408, 356,
	335, 336, 279, 0, 393, 313, 327, 310, 372, 754,
	777, 781, 309, 850, 775, 437, 282, 0, 436, 371,
	423, 428, 357, 351, 281, 425, 355, 350, 339, 317,
	851, 340, 341, 331, 383, 349, 384, 332, 361, 360,
	362, 0, 0, 0, 0, 0, 465, 466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	596, 772, 0, 600, 0, 439, 0, 0, 834, 0,
	0, 0, 411, 0, 0, 342, 0, 0, 0, 776,
	0, 396, 377, 847, 0, 0, 394, 347, 424, 385,
	430, 413, 438, 390, 386, 273, 414, 312, 358, 285,
	287, 307, 314, 316, 318, 319, 367, 368, 380, 401,
	415, 416, 417, 311, 295, 395, 296, 329, 297, 274,
	303, 301, 304, 403, 305, 276, 381, 421, 0, 324,
	391, 354, 277, 353, 382, 420, 419, 286, 446, 1646,
	1647, 542, 0, 458, 623, 624, 625, 467, 472, 473,
	474, 476, 477, 478, 479, 543, 560, 527, 497, 460,
	551, 494, 498, 499, 563, 0, 0, 0, 451, 343,
	344, 0, 322, 270, 271, 618, 832, 373, 565, 598,
	599, 490, 0, 846, 827, 829, 830, 833, 837, 838,
	839, 840, 841, 843, 845, 849, 617, 0, 544, 559,
	621, 558, 614, 379, 0, 400, 556, 503, 0, 548,
	522, 0, 549, 518, 553, 0, 492, 0, 407, 432,
	444, 461, 464, 493, 578, 579, 580, 275, 463, 582,
	583, 584, 585, 586, 587, 588, 581, 848, 525, 502,
	528, 443, 505, 504, 0, 0, 539, 780, 540, 541,
	363, 364, 365, 366, 835, 566, 293, 462, 389, 0,
	526, 0, 0, 0, 0, 0, 0, 0, 0, 531,
	532, 529, 626, 0, 589, 590, 0, 0, 456, 457,
	321, 328, 475, 330, 292, 378, 323, 441, 337, 0,
	468, 533, 469, 592, 595, 593, 594, 370, 333, 334,
	404, 338, 348, 392, 440, 376, 397, 290, 431, 405,
	352, 519, 546, 857, 831, 856, 858, 859, 855, 860,
	861, 842, 736, 0, 787, 853, 852, 854, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 574,
	573, 572, 571, 570, 569, 568, 567, 0, 0, 516,
	418, 302, 264, 298, 299, 306, 615, 612, 422, 616,
	0, 272, 496, 346, 0, 387, 320, 561, 562, 0,
	0, 820, 794, 795, 796, 733, 797, 791, 792, 734,
	793, 821, 785, 817, 818, 761, 788, 798, 816, 799,
	819, 822, 823, 862, 863, 805, 789, 236, 864, 802,
	824, 815, 814, 800, 786, 825, 826, 768, 763, 803,
	804, 790, 808, 809, 810, 735, 782, 783, 784, 806,
	807, 764, 765, 766, 767, 0, 0, 0, 447, 448,
	449, 471, 0, 433, 495, 613, 0, 0, 0, 0,
	0, 0, 0, 545, 557, 591, 0, 601, 602, 604,
	606, 811, 608, 410, 778, 619, 486, 487, 620, 597,
	0, 728, 0, 375, 0, 501, 534, 523, 607, 489,
	0, 0, 0, 0, 0, 0, 731, 0, 0, 0,
	315, 0, 0, 345, 538, 520, 530, 521, 506, 507,
	508, 515, 325, 509, 510, 511, 481, 512, 482, 513,
	514, 769, 537, 488, 406, 359, 555, 554, 0, 0,
	836, 844, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 723, 0, 0, 759, 813, 812, 746,
	756, 0, 0, 288, 210, 483, 603, 485, 484, 747,
	0, 748, 752, 755, 751, 749, 750, 0, 828, 0,
	0, 0, 0, 0, 0, 0, 727, 0, 732, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 724, 725, 0, 0, 0, 0, 779, 0,
	726, 0, 0, 774, 753, 757, 0, 0, 0, 0,
	278, 412, 429, 289, 402, 442, 294, 409, 284, 374,
	398, 0, 0, 280, 427, 408, 356, 335, 336, 279,
	0, 393, 313, 327, 310, 372, 754, 777, 781, 309,
	850, 775, 437, 282, 0, 436, 371, 423, 428, 357,
	351, 281, 425, 355, 350, 339, 317, 851, 340, 341,
	331, 383, 349, 384, 332, 361, 360, 362, 0, 0,
	0, 0, 0, 465, 466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 596, 772, 0,
	600, 0, 439, 0, 0, 834, 0, 0, 0, 411,
	0, 0, 342, 0, 0, 0, 776, 0, 396, 377,
	847, 0, 0, 394, 347, 424, 385, 430, 413, 438,
	390, 386, 273, 414, 312, 358, 285, 287, 307, 314,
	316, 318, 319, 367, 368, 380, 401, 415, 416, 417,
	311, 295, 395, 296, 329, 297, 274, 303, 301, 304,
	403, 305, 276, 381, 421, 0, 324, 391, 354, 277,
	353, 382, 420, 419, 286, 446, 452, 453, 542, 0,
	458, 623, 624, 625, 467, 472, 473, 474, 476, 477,
	478, 479, 543, 560, 527, 497, 460, 551, 494, 498,
	499, 563, 0, 0, 0, 451, 343, 344, 0, 322,
	270, 271, 618, 832, 373, 565, 598, 599, 490, 0,
	846, 827, 829, 830, 833, 837, 838, 839, 840, 841,
	843, 845, 849, 617, 0, 544, 559, 621, 558, 614,
	379, 0, 400, 556, 503, 0, 548, 522, 0, 549,
	518, 553, 0, 492, 0, 407, 432, 444, 461, 464,
	493, 578, 579, 580, 275, 463, 582, 583, 584, 585,
	586, 587, 588, 581, 848, 525, 502, 528, 443, 505,
	504, 0, 0, 539, 780, 540, 541, 363, 364, 365,
	366, 835, 566, 293, 462, 389, 0, 526, 0, 0,
	0, 0, 0, 0, 0, 0, 531, 532, 529, 626,
	0, 589, 590, 0, 0, 456, 457, 321, 328, 475,
	330, 292, 378, 323, 441, 337, 0, 468, 533, 469,
	592, 595, 593, 594, 370, 333, 334, 404, 338, 348,
	392, 440, 376, 397, 290, 431, 405, 352, 519, 546,
	857, 831, 856, 858, 859, 855, 860, 861, 842, 736,
	0, 787, 853, 852, 854, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 574, 573, 572, 571,
	570, 569, 568, 567, 0, 0, 516, 418, 302, 264,
	298, 299, 306, 615, 612, 422, 616, 0, 272, 496,
	346, 0, 387, 320, 561, 562, 0, 0, 820, 794,
	795, 796, 733, 797, 791, 792, 734, 793, 821, 785,
	817, 818, 761, 788, 798, 816, 799, 819, 822, 823,
	862, 863, 805, 789, 236, 864, 802, 824, 815, 814,
	800, 786, 825, 826, 768, 763, 803, 804, 790, 808,
	809, 810, 735, 782, 783, 784, 806, 807, 764, 765,
	766, 767, 0, 0, 0, 447, 448, 449, 471, 0,
	433, 495, 613, 0, 0, 0, 0, 0, 0, 0,
	545, 557, 591, 0, 601, 602, 604, 606, 811, 608,
	410, 778, 619, 486, 487, 620, 597, 0, 728, 0,
	375, 0, 501, 534, 523, 607, 489, 0, 0, 0,
	0, 0, 0, 731, 0, 0, 0, 315, 0, 0,
	345, 538, 520, 530, 521, 506, 507, 508, 515, 325,
	509, 510, 511, 481, 512, 482, 513, 514, 769, 537,
	488, 406, 359, 555, 554, 0, 0, 836, 844, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 759, 813, 812, 746, 756, 0, 0,
	288, 210, 483, 603, 485, 484, 747, 0, 748, 752,
	755, 751, 749, 750, 0, 828, 0, 0, 0, 0,
	0, 0, 715, 727, 0, 732, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 724,
	725, 0, 0, 0, 0, 779, 0, 726, 0, 0,
	774, 753, 757, 0, 0, 0, 0, 278, 412, 429,
	289, 402, 442, 294, 409, 284, 374, 398, 0, 0,
	280, 427, 408, 356, 335, 336, 279, 0, 393, 313,
	327, 310, 372, 754, 777, 781, 309, 850, 775, 437,
	282, 0, 436, 371, 423, 428, 357, 351, 281, 425,
	355, 350, 339, 317, 851, 340, 341, 331, 383, 349,
	384, 332, 361, 360, 362, 0, 0, 0, 0, 0,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 596, 772, 0, 600, 0, 439,
	0, 0, 834, 0, 0, 0, 411, 0, 0, 342,
	0, 0, 0, 776, 0, 396, 377, 847, 0, 0,
	394, 347, 424, 385, 430, 413, 438, 390, 386, 273,
	414, 312, 358, 285, 287, 307, 314, 316, 318, 319,
	367, 368, 380, 401, 415, 416, 417, 311, 295, 395,
	296, 329, 297, 274, 303, 301, 304, 403, 305, 276,
	381, 421, 0, 324, 391, 354, 277, 353, 382, 420,
	419, 286, 446, 452, 453, 542, 0, 458, 623, 624,
	625, 467, 472, 473, 474, 476, 477, 478, 479, 543,
	560, 527, 497, 460, 551, 494, 498, 499, 563, 0,
	0, 0, 451, 343, 344, 0, 322, 270, 271, 618,
	832, 373, 565, 598, 599, 490, 0, 846, 827, 829,
	830, 833, 837, 838, 839, 840, 841, 843, 845, 849,
	617, 0, 544, 559, 621, 558, 614, 379, 0, 400,
	556, 503, 0, 548, 522, 0, 549, 518, 553, 0,
	492, 0, 407, 432, 444, 461, 464, 493, 578, 579,
	580, 275, 463, 582, 583, 584, 585, 586, 587, 588,
	581, 848, 525, 502, 528, 443, 505, 504, 0, 0,
	539, 780, 540, 541, 363, 364, 365, 366, 835, 566,
	293, 462, 389, 0, 526, 0, 0, 0, 0, 0,
	0, 0, 0, 531, 532, 529, 626, 0, 589, 590,
	0, 0, 456, 457, 321, 328, 475, 330, 292, 378,
	323, 441, 337, 0, 468, 533, 469, 592, 595, 593,
	594, 370, 333, 334, 404, 338, 348, 392, 440, 376,
	397, 290, 431, 405, 352, 519, 546, 857, 831, 856,
	858, 859, 855, 860, 861, 842, 736, 0, 787, 853,
	852, 854, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 574, 573, 572, 571, 570, 569, 568,
	567, 0, 0, 516, 418, 302, 264, 298, 299, 306,
	615, 612, 422, 616, 0, 272, 496, 346, 0, 387,
	320, 561, 562, 0, 0, 820, 794, 795, 796, 733,
	797, 791, 792, 734, 793, 821, 785, 817, 818, 761,
	788, 798, 816, 799, 819, 822, 823, 862, 863, 805,
	789, 236, 864, 802, 824, 815, 814, 800, 786, 825,
	826, 768, 763, 803, 804, 790, 808, 809, 810, 735,
	782, 783, 784, 806, 807, 764, 765, 766, 767, 0,
	0, 0, 447, 448, 449, 471, 0, 433, 495, 613,
	0, 0, 0, 0, 0, 0, 0, 545, 557, 591,
	0, 601, 602, 604, 606, 811, 608, 410, 0, 619,
	486, 487, 620, 597, 0, 728, 187, 57, 176, 149,
	0, 0, 0, 0, 0, 0, 375, 0, 501, 534,
	523, 607, 489, 0, 177, 0, 0, 0, 0, 0,
	0, 169, 0, 315, 0, 178, 345, 538, 520, 530,
	521, 506, 507, 508, 515, 325, 509, 510, 511, 481,
	512, 482, 513, 514, 125, 537, 488, 406, 359, 555,
	554, 0, 0, 0, 0, 0, 0, 0, 0, 113,
	0, 0, 0, 0, 0, 0, 181, 0, 0, 209,
	0, 0, 0, 0, 0, 0, 288, 210, 483, 603,
	485, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 291, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 201, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 278, 412, 429, 289, 402, 442, 294,
	409, 284, 374, 398, 0, 0, 280, 427, 408, 356,
	335, 336, 279, 0, 393, 313, 327, 310, 372, 0,
	426, 454, 309, 445, 0, 437, 282, 0, 436, 371,
	423, 428, 357, 351, 281, 425, 355, 350, 339, 317,
	470, 340, 341, 331, 383, 349, 384, 332, 361, 360,
	362, 0, 0, 0, 0, 0, 465, 466, 0, 0,
	0, 0, 0, 0, 148, 175, 185, 0, 111, 0,
	596, 0, 0, 600, 0, 439, 0, 0, 202, 0,
	0, 0, 411, 0, 0, 342, 174, 168, 167, 455,
	0, 396, 377, 214, 0, 0, 394, 347, 424, 385,
	430, 413, 438, 390, 386, 273, 414, 312, 358, 285,
	287, 307, 314, 316, 318, 319, 367, 368, 380, 401,
	415, 416, 417, 311, 295, 395, 296, 329, 297, 274,
	303, 301, 304, 403, 305, 276, 381, 421, 0, 324,
	391, 354, 277, 353, 382, 420, 419, 286, 446, 452,
	453, 542, 0, 458, 575, 576, 577, 467, 472, 473,
	474, 476, 477, 478, 479, 543, 560, 527, 497, 460,
	551, 494, 498, 499, 563, 0, 0, 0, 451, 343,
	344, 0, 322, 270, 271, 434, 308, 373, 565, 598,
	599, 490, 0, 552, 491, 500, 300, 524, 536, 535,
	369, 450, 205, 547, 550, 480, 215, 0, 544, 559,
	517, 558, 216, 379, 0, 400, 556, 503, 0, 548,
	522, 0, 549, 518, 553, 0, 492, 0, 407, 432,
	444, 461, 464, 493, 578, 579, 580, 275, 463, 582,
	583, 584, 585, 586, 587, 588, 581, 435, 525, 502,
	528, 443, 505, 504, 0, 0, 539, 459, 540, 541,
	363, 364, 365, 366, 326, 566, 293, 462, 389, 123,
	526, 0, 0, 0, 0, 0, 0, 0, 0, 531,
	532, 529, 213, 0, 589, 590, 0, 0, 456, 457,
	321, 328, 475, 330, 292, 378, 323, 441, 337, 0,
	468, 533, 469, 592, 595, 593, 594, 370, 333, 334,
	404, 338, 348, 392, 440, 376, 397, 290, 431, 405,
	352, 519, 546, 0, 0, 0, 0, 0, 0, 0,
	0, 58, 0, 0, 259, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 574,
	573, 572, 571, 570, 569, 568, 567, 0, 0, 516,
	418, 302, 264, 298, 299, 306, 388, 283, 422, 399,
	0, 272, 496, 346, 150, 387, 320, 561, 562, 54,
	0, 220, 221, 222, 223, 224, 225, 226, 227, 265,
	228, 229, 230, 231, 232, 233, 234, 237, 238, 239,
	240, 241, 242, 243, 244, 564, 235, 236, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 256,
	257, 258, 0, 0, 0, 266, 267, 268, 269, 0,
	0, 260, 261, 262, 263, 0, 0, 0, 447, 448,
	449, 471, 0, 433, 495, 217, 42, 203, 206, 208,
	207, 0, 55, 545, 557, 591, 5, 601, 602, 604,
	606, 605, 608, 410, 128, 218, 486, 487, 219, 597,
	187, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	375, 0, 501, 534, 523, 607, 489, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 315, 0, 0,
	345, 538, 520, 530, 521, 506, 507, 508, 515, 325,
	509, 510, 511, 481, 512, 482, 513, 514, 125, 537,
	488, 406, 359, 555, 554, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	181, 0, 0, 209, 0, 0, 0, 0, 0, 0,
	288, 210, 483, 603, 485, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 291, 2302, 2305, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 278, 412, 429,
	289, 402, 442, 294, 409, 284, 374, 398, 0, 0,
	280, 427, 408, 356, 335, 336, 279, 0, 393, 313,
	327, 310, 372, 0, 426, 454, 309, 445, 0, 437,
	282, 0, 436, 371, 423, 428, 357, 351, 281, 425,
	355, 350, 339, 317, 470, 340, 341, 331, 383, 349,
	384, 332, 361, 360, 362, 0, 0, 0, 0, 0,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 596, 0, 0, 600, 2306, 439,
	0, 0, 0, 2301, 0, 2300, 411, 2298, 2303, 342,
	0, 0, 0, 455, 0, 396, 377, 622, 0, 0,
	394, 347, 424, 385, 430, 413, 438, 390, 386, 273,
	414, 312, 358, 285, 287, 307, 314, 316, 318, 319,
	367, 368, 380, 401, 415, 416, 417, 311, 295, 395,
	296, 329, 297, 274, 303, 301, 304, 403, 305, 276,
	381, 421, 2304, 324, 391, 354, 277, 353, 382, 420,
	419, 286, 446, 452, 453, 542, 0, 458, 623, 624,
	625, 467, 472, 473, 474, 476, 477, 478, 479, 543,
	560, 527, 497, 460, 551, 494, 498, 499, 563, 0,
	0, 0, 451, 343, 344, 0, 322, 270, 271, 618,
	308, 373, 565, 598, 599, 490, 0, 552, 491, 500,
	300, 524, 536, 535, 369, 450, 0, 547, 550, 480,
	617, 0, 544, 559, 621, 558, 614, 379, 0, 400,
	556, 503, 0, 548, 522, 0, 549, 518, 553, 0,
	492, 0, 407, 432, 444, 461, 464, 493, 578, 579,
	580, 275, 463, 582, 583, 584, 585, 586, 587, 588,
	581, 435, 525, 502, 528, 443, 505, 504, 0, 0,
	539, 459, 540, 541, 363, 364, 365, 366, 326, 566,
	293, 462, 389, 0, 526, 0, 0, 0, 0, 0,
	0, 0, 0, 531, 532, 529, 626, 0, 589, 590,
	0, 0, 456, 457, 321, 328, 475, 330, 292, 378,
	323, 441, 337, 0, 468, 533, 469, 592, 595, 593,
	594, 370, 333, 334, 404, 338, 348, 392, 440, 376,
	397, 290, 431, 405, 352, 519, 546, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 574, 573, 572, 571, 570, 569, 568,
	567, 0, 0, 516, 418, 302, 264, 298, 299, 306,
	615, 612, 422, 616, 0, 272, 496, 346, 150, 387,
	320, 561, 562, 0, 0, 220, 221, 222, 223, 224,
	225, 226, 227, 265, 228, 229, 230, 231, 232, 233,
	234, 237, 238, 239, 240, 241, 242, 243, 244, 564,
	235, 236, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 256, 257, 258, 0, 0, 0, 266,
	267, 268, 269, 0, 0, 260, 261, 262, 263, 0,
	0, 0, 447, 448, 449, 471, 0, 433, 495, 613,
	0, 0, 0, 0, 0, 0, 0, 545, 557, 591,
	0, 601, 602, 604, 606, 605, 608, 410, 0, 619,
	486, 487, 620, 597, 375, 0, 501, 534, 523, 607,
	489, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 315, 0, 0, 345, 538, 520, 530, 521, 506,
	507, 508, 515, 325, 509, 510, 511, 481, 512, 482,
	513, 514, 0, 537, 488, 406, 359, 555, 554, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1266, 0, 0, 209, 0, 0,
	746, 756, 0, 0, 288, 210, 483, 603, 485, 484,
	747, 0, 748, 752, 755, 751, 749, 750, 0, 291,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 753, 0, 0, 0, 0,
	0, 278, 412, 429, 289, 402, 442, 294, 409, 284,
	374, 398, 0, 0, 280, 427, 408, 356, 335, 336,
	279, 0, 393, 313, 327, 310, 372, 754, 426, 454,
	309, 445, 0, 437, 282, 0, 436, 371, 423, 428,
	357, 351, 281, 425, 355, 350, 339, 317, 470, 340,
	341, 331, 383, 349, 384, 332, 361, 360, 362, 0,
	0, 0, 0, 0, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 596, 0,
	0, 600, 0, 439, 0, 0, 0, 0, 0, 0,
	411, 0, 0, 342, 0, 0, 0, 455, 0, 396,
	377, 622, 0, 0, 394, 347, 424, 385, 430, 413,
	438, 390, 386, 273, 414, 312, 358, 285, 287, 307,
	314, 316, 318, 319, 367, 368, 380, 401, 415, 416,
	417, 311, 295, 395, 296, 329, 297, 274, 303, 301,
	304, 403, 305, 276, 381, 421, 0, 324, 391, 354,
	277, 353, 382, 420, 419, 286, 446, 452, 453, 542,
	0, 458, 623, 624, 625, 467, 472, 473, 474, 476,
	477, 478, 479, 543, 560, 527, 497, 460, 551, 494,
	498, 499, 563, 0, 0, 0, 451, 343, 344, 0,
	322, 270, 271, 618, 308, 373, 565, 598, 599, 490,
	0, 552, 491, 500, 300, 524, 536, 535, 369, 450,
	0, 547, 550, 480, 617, 0, 544, 559, 621, 558,
	614, 379, 0, 400, 556, 503, 0, 548, 522, 0,
	549, 518, 553, 0, 492, 0, 407, 432, 444, 461,
	464, 493, 578, 579, 580, 275, 463, 582, 583, 584,
	585, 586, 587, 588, 581, 435, 525, 502, 528, 443,
	505, 504, 0, 0, 539, 459, 540, 541, 363, 364,
	365, 366, 326, 566, 293, 462, 389, 0, 526, 0,
	0, 0, 0, 0, 0, 0, 0, 531, 532, 529,
	626, 0, 589, 590, 0, 0, 456, 457, 321, 328,
	475, 330, 292, 378, 323, 441, 337, 0, 468, 533,
	469, 592, 595, 593, 594, 370, 333, 334, 404, 338,
	348, 392, 440, 376, 397, 290, 431, 405, 352, 519,
	546, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 574, 573, 572,
	571, 570, 569, 568, 567, 0, 0, 516, 418, 302,
	264, 298, 299, 306, 615, 612, 422, 616, 0, 272,
	496, 346, 0, 387, 320, 561, 562, 0, 0, 220,
	221, 222, 223, 224, 225, 226, 227, 265, 228, 229,
	230, 231, 232, 233, 234, 237, 238, 239, 240, 241,
	242, 243, 244, 564, 235, 236, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	0, 0, 0, 266, 267, 268, 269, 0, 0, 260,
	261, 262, 263, 0, 0, 0, 447, 448, 449, 471,
	0, 433, 495, 613, 0, 0, 0, 0, 0, 0,
	0, 545, 557, 591, 0, 601, 602, 604, 606, 605,
	608, 410, 0, 619, 486, 487, 620, 597, 187, 57,
	176, 149, 0, 0, 0, 0, 0, 0, 375, 645,
	501, 534, 523, 607, 489, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 315, 0, 0, 345, 538,
	520, 530, 521, 506, 507, 508, 515, 325, 509, 510,
	511, 481, 512, 482, 513, 514, 0, 537, 488, 406,
	359, 555, 554, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 651, 0, 0, 0, 0, 0, 650, 0,
	0, 209, 0, 0, 0, 0, 0, 0, 288, 210,
	483, 603, 485, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 291, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 278, 412, 429, 289, 402,
	442, 294, 409, 284, 374, 398, 0, 0, 280, 427,
	408, 356, 335, 336, 279, 0, 393, 313, 327, 310,
	372, 0, 426, 454, 309, 445, 0, 437, 282, 0,
	436, 371, 423, 428, 357, 351, 281, 425, 355, 350,
	339, 317, 470, 340, 341, 331, 383, 349, 384, 332,
	361, 360, 362, 0, 0, 0, 0, 0, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	649, 0, 596, 0, 0, 600, 0, 439, 0, 0,
	0, 0, 0, 0, 411, 0, 0, 342, 0, 0,
	0, 455, 0, 396, 377, 622, 0, 0, 394, 347,
	424, 385, 430, 413, 438, 390, 386, 273, 414, 312,
	358, 285, 287, 307, 314, 316, 318, 319, 367, 368,
	380, 401, 415, 416, 417, 311, 295, 395, 296, 329,
	297, 274, 303, 301, 304, 403, 305, 276, 381, 421,
	0, 324, 391, 354, 277, 353, 382, 420, 419, 286,
	446, 452, 453, 542, 0, 458, 623, 624, 625, 467,
	472, 473, 474, 476, 477, 478, 479, 543, 560, 527,
	497, 460, 551, 494, 498, 499, 563, 0, 0, 0,
	451, 343, 344, 0, 322, 270, 271, 618, 308, 373,
	565, 598, 599, 490, 0, 552, 491, 500, 300, 524,
	536, 535, 369, 450, 0, 547, 550, 480, 617, 0,
	544, 559, 621, 558, 614, 379, 0, 400, 556, 503,
	0, 548, 522, 0, 549, 518, 553, 0, 492, 0,
	407, 432, 444, 461, 464, 493, 578, 579, 580, 275,
	463, 582, 583, 584, 585, 586, 587, 588, 581, 435,
	525, 502, 528, 443, 505, 504, 0, 0, 539, 459,
	540, 541, 363, 364, 365, 366, 646, 648, 293, 462,
	389, 659, 526, 0, 0, 0, 0, 0, 0, 0,
	0, 531, 532, 529, 626, 0, 589, 590, 0, 0,
	456, 457, 321, 328, 475, 330, 292, 378, 323, 441,
	337, 0, 468, 533, 469, 592, 595, 593, 594, 370,
	333, 334, 404, 338, 348, 392, 440, 376, 397, 290,
	431, 405, 352, 519, 546, 0, 0, 0, 0, 0,
	0, 0, 0, 58, 0, 0, 259, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 574, 573, 572, 571, 570, 569, 568, 567, 0,
	0, 516, 418, 302, 264, 298, 299, 306, 615, 612,
	422, 616, 0, 272, 496, 346, 150, 387, 320, 561,
	562, 0, 0, 220, 221, 222, 223, 224, 225, 226,
	227, 265, 228, 229, 230, 231, 232, 233, 234, 237,
	238, 239, 240, 241, 242, 243, 244, 564, 235, 236,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
	255, 256, 257, 258, 0, 0, 0, 266, 267, 268,
	269, 0, 0, 260, 261, 262, 263, 0, 0, 0,
	447, 448, 449, 471, 0, 433, 495, 613, 0, 0,
	0, 0, 0, 0, 0, 545, 557, 591, 0, 601,
	602, 604, 606, 605, 608, 410, 0, 619, 486, 487,
	620, 597, 375, 0, 501, 534, 523, 607, 489, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 315,
	0, 0, 345, 538, 520, 530, 521, 506, 507, 508,
	515, 325, 509, 510, 511, 481, 512, 482, 513, 514,
	0, 537, 488, 406, 359, 555, 554, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 209, 0, 0, 0, 0,
	0, 0, 288, 210, 483, 603, 485, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 291, 2302, 2305,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 278,
	412, 429, 289, 402, 442, 294, 409, 284, 374, 398,
	0, 0, 280, 427, 408, 356, 335, 336, 279, 0,
	393, 313, 327, 310, 372, 0, 426, 454, 309, 445,
	0, 437, 282, 0, 436, 371, 423, 428, 357, 351,
	281, 425, 355, 350, 339, 317, 470, 340, 341, 331,
	383, 349, 384, 332, 361, 360, 362, 0, 0, 0,
	0, 0, 465, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 596, 0, 0, 600,
	2306, 439, 0, 0, 0, 2301, 0, 2300, 411, 2298,
	2303, 342, 0, 0, 0, 455, 0, 396, 377, 622,
	0, 0, 394, 347, 424, 385, 430, 413, 438, 390,
	386, 273, 414, 312, 358, 285, 287, 307, 314, 316,
	318, 319, 367, 368, 380, 401, 415, 416, 417, 311,
	295, 395, 296, 329, 297, 274, 303, 301, 304, 403,
	305, 276, 381, 421, 2304, 324, 391, 354, 277, 353,
	382, 420, 419, 286, 446, 452, 453, 542, 0, 458,
	623, 624, 625, 467, 472, 473, 474, 476, 477, 478,
	479, 543, 560, 527, 497, 460, 551, 494, 498, 499,
	563, 0, 0, 0, 451, 343, 344, 0, 322, 270,
	271, 618, 308, 373, 565, 598, 599, 490, 0, 552,
	491, 500, 300, 524, 536, 535, 369, 450, 0, 547,
	550, 480, 617, 0, 544, 559, 621, 558, 614, 379,
	0, 400, 556, 503, 0, 548, 522, 0, 549, 518,
	553, 0, 492, 0, 407, 432, 444, 461, 464, 493,
	578, 579, 580, 275, 463, 582, 583, 584, 585, 586,
	587, 588, 581, 435, 525, 502, 528, 443, 505, 504,
	0, 0, 539, 459, 540, 541, 363, 364, 365, 366,
	326, 566, 293, 462, 389, 0, 526, 0, 0, 0,
	0, 0, 0, 0, 0, 531, 532, 529, 626, 0,
	589, 590, 0, 0, 456, 457, 321, 328, 475, 330,
	292, 378, 323, 441, 337, 0, 468, 533, 469, 592,
	595, 593, 594, 370, 333, 334, 404, 338, 348, 392,
	440, 376, 397, 290, 431, 405, 352, 519, 546, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 574, 573, 572, 571, 570,
	569, 568, 567, 0, 0, 516, 418, 302, 264, 298,
	299, 306, 615, 612, 422, 616, 0, 272, 496, 346,
	0, 387, 320, 561, 562, 0, 0, 220, 221, 222,
	223, 224, 225, 226, 227, 265, 228, 229, 230, 231,
	232, 233, 234, 237, 238, 239, 240, 241, 242, 243,
	244, 564, 235, 236, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 256, 257, 258, 0, 0,
	0, 266, 267, 268, 269, 0, 0, 260, 261, 262,
	263, 0, 0, 0, 447, 448, 449, 471, 0, 433,
	495, 613, 0, 0, 0, 0, 0, 0, 0, 545,
	557, 591, 0, 601, 602, 604, 606, 605, 608, 410,
	0, 619, 486, 487, 620, 597, 375, 0, 501, 534,
	523, 607, 489, 0, 1079, 0, 0, 0, 0, 0,
	0, 0, 0, 315, 0, 0, 345, 538, 520, 530,
	521, 506, 507, 508, 515, 325, 509, 510, 511, 481,
	512, 482, 513, 514, 0, 537, 488, 406, 359, 555,
	554, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 209,
	0, 0, 0, 0, 0, 0, 288, 210, 483, 603,
	485, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 291, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1065, 0, 0, 0,
	0, 0, 0, 278, 412, 429, 289, 402, 442, 294,
	409, 284, 374, 398, 0, 0, 2454, 2457, 2458, 2459,
	2460, 2461, 2462, 0, 2467, 2463, 2464, 2465, 2466, 0,
	2449, 2450, 2451, 2452, 1063, 2433, 2455, 0, 2434, 371,
	2435, 2436, 2437, 2438, 2439, 2440, 2441, 2442, 2443, 2446,
	2447, 2444, 2445, 2453, 383, 349, 384, 332, 361, 360,
	362, 1090, 1092, 1094, 1096, 1099, 465, 466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	596, 0, 0, 600, 0, 439, 0, 0, 0, 0,
	0, 0, 411, 0, 0, 342, 0, 0, 0, 2448,
	0, 396, 377, 622, 0, 0, 394, 347, 424, 385,
	430, 413, 438, 390, 386, 273, 414, 312, 358, 285,
	287, 307, 314, 316, 318, 319, 367, 368, 380, 401,
	415, 416, 417, 311, 295, 395, 296, 329, 297, 274,
	303, 301, 304, 403, 305, 276, 381, 421, 0, 324,
	391, 354, 277, 353, 382, 420, 419, 286, 446, 452,
	453, 542, 0, 458, 623, 624, 625, 467, 472, 473,
	474, 476, 477, 478, 479, 543, 560, 527, 497, 460,
	551, 494, 498, 499, 563, 0, 0, 0, 451, 343,
	344, 0, 322, 270, 271, 618, 308, 373, 565, 598,
	599, 490, 0, 552, 491, 500, 300, 524, 536, 535,
	369, 450, 0, 547, 550, 480, 617, 0, 544, 559,
	621, 558, 614, 379, 0, 400, 556, 503, 0, 548,
	522, 0, 549, 518, 553, 0, 492, 0, 407, 432,
	444, 461, 464, 493, 578, 579, 580, 275, 463, 582,
	583, 584, 585, 586, 587, 588, 581, 435, 525, 502,
	528, 443, 505, 504, 0, 0, 539, 459, 540, 541,
	363, 364, 365, 366, 326, 566, 293, 462, 389, 0,
	526, 0, 0, 0, 0, 0, 0, 0, 0, 531,
	532, 529, 626, 0, 589, 590, 0, 0, 456, 457,
	321, 328, 475, 330, 292, 378, 323, 441, 337, 0,
	468, 533, 469, 592, 595, 593, 594, 370, 333, 334,
	404, 338, 348, 392, 440, 376, 397, 290, 431, 405,
	352, 519, 546, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 574,
	573, 572, 571, 570, 569, 568, 567, 0, 0, 516,
	418, 302, 264, 298, 299, 306, 615, 612, 422, 616,
	0, 272, 2456, 346, 0, 387, 320, 561, 562, 0,
	0, 220, 221, 222, 223, 224, 225, 226, 227, 265,
	228, 229, 230, 231, 232, 233, 234, 237, 238, 239,
	240, 241, 242, 243, 244, 564, 235, 236, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 256,
	257, 258, 0, 0, 0, 266, 267, 268, 269, 0,
	0, 260, 261, 262, 263, 0, 0, 0, 447, 448,
	449, 471, 0, 433, 495, 613, 0, 0, 0, 0,
	0, 0, 0, 545, 557, 591, 0, 601, 602, 604,
	606, 605, 608, 410, 0, 619, 486, 487, 620, 597,
	375, 0, 501, 534, 523, 607, 489, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 315, 0, 0,
	345, 538, 520, 530, 521, 506, 507, 508, 515, 325,
	509, 510, 511, 481, 512, 482, 513, 514, 0, 537,
	488, 406, 359, 555, 554, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 0, 0,
	288, 210, 483, 603, 485, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 291, 0, 2323, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 278, 412, 429,
	289, 402, 442, 294, 409, 284, 374, 398, 0, 0,
	280, 427, 408, 356, 335, 336, 279, 0, 393, 313,
	327, 310, 372, 0, 426, 454, 309, 445, 0, 437,
	282, 0, 436, 371, 423, 428, 357, 351, 281, 425,
	355, 350, 339, 317, 470, 340, 341, 331, 383, 349,
	384, 332, 361, 360, 362, 0, 0, 0, 0, 0,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 596, 0, 0, 600, 2322, 439,
	0, 0, 0, 2328, 2325, 2327, 411, 0, 2326, 342,
	0, 0, 0, 455, 0, 396, 377, 622, 0, 2320,
	394, 347, 424, 385, 430, 413, 438, 390, 386, 273,
	414, 312, 358, 285, 287, 307, 314, 316, 318, 319,
	367, 368, 380, 401, 415, 416, 417, 311, 295, 395,
	296, 329, 297, 274, 303, 301, 304, 403, 305, 276,
	381, 421, 0, 324, 391, 354, 277, 353, 382, 420,
	419, 286, 446, 452, 453, 542, 0, 458, 623, 624,
	625, 467, 472, 473, 474, 476, 477, 478, 479, 543,
	560, 527, 497, 460, 551, 494, 498, 499, 563, 0,
	0, 0, 451, 343, 344, 0, 322, 270, 271, 618,
	308, 373, 565, 598, 599, 490, 0, 552, 491, 500,
	300, 524, 536, 535, 369, 450, 0, 547, 550, 480,
	617, 0, 544, 559, 621, 558, 614, 379, 0, 400,
	556, 503, 0, 548, 522, 0, 549, 518, 553, 0,
	492, 0, 407, 432, 444, 461, 464, 493, 578, 579,
	580, 275, 463, 582, 583, 584, 585, 586, 587, 588,
	581, 435, 525, 502, 528, 443, 505, 504, 0, 0,
	539, 459, 540, 541, 363, 364, 365, 366, 326, 566,
	293, 462, 389, 0, 526, 0, 0, 0, 0, 0,
	0, 0, 0, 531, 532, 529, 626, 0, 589, 590,
	0, 0, 456, 457, 321, 328, 475, 330, 292, 378,
	323, 441, 337, 0, 468, 533, 469, 592, 595, 593,
	594, 370, 333, 334, 404, 338, 348, 392, 440, 376,
	397, 290, 431, 405, 352, 519, 546, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 574, 573, 572, 571, 570, 569, 568,
	567, 0, 0, 516, 418, 302, 264, 298, 299, 306,
	615, 612, 422, 616, 0, 272, 496, 346, 0, 387,
	320, 561, 562, 0, 0, 220, 221, 222, 223, 224,
	225, 226, 227, 265, 228, 229, 230, 231, 232, 233,
	234, 237, 238, 239, 240, 241, 242, 243, 244, 564,
	235, 236, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 256, 257, 258, 0, 0, 0, 266,
	267, 268, 269, 0, 0, 260, 261, 262, 263, 0,
	0, 0, 447, 448, 449, 471, 0, 433, 495, 613,
	0, 0, 0, 0, 0, 0, 0, 545, 557, 591,
	0, 601, 602, 604, 606, 605, 608, 410, 0, 619,
	486, 487, 620, 597, 375, 0, 501, 534, 523, 607,
	489, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 315, 0, 0, 345, 538, 520, 530, 521, 506,
	507, 508, 515, 325, 509, 510, 511, 481, 512, 482,
	513, 514, 0, 537, 488, 406, 359, 555, 554, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 209, 0, 0,
	0, 0, 0, 0, 288, 210, 483, 603, 485, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 291,
	0, 2323, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 278, 412, 429, 289, 402, 442, 294, 409, 284,
	374, 398, 0, 0, 280, 427, 408, 356, 335, 336,
	279, 0, 393, 313, 327, 310, 372, 0, 426, 454,
	309, 445, 0, 437, 282, 0, 436, 371, 423, 428,
	357, 351, 281, 425, 355, 350, 339, 317, 470, 340,
	341, 331, 383, 349, 384, 332, 361, 360, 362, 0,
	0, 0, 0, 0, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 596, 0,
	0, 600, 2322, 439, 0, 0, 0, 2328, 2325, 2327,
	411, 0, 2326, 342, 0, 0, 0, 455, 0, 396,
	377, 622, 0, 0, 394, 347, 424, 385, 430, 413,
	438, 390, 386, 273, 414, 312, 358, 285, 287, 307,
	314, 316, 318, 319, 367, 368, 380, 401, 415, 416,
	417, 311, 295, 395, 296, 329, 297, 274, 303, 301,
	304, 403, 305, 276, 381, 421, 0, 324, 391, 354,
	277, 353, 382, 420, 419, 286, 446, 452, 453, 542,
	0, 458, 623, 624, 625, 467, 472, 473, 474, 476,
	477, 478, 479, 543, 560, 527, 497, 460, 551, 494,
	498, 499, 563, 0, 0, 0, 451, 343, 344, 0,
	322, 270, 271, 618, 308, 373, 565, 598, 599, 490,
	0, 552, 491, 500, 300, 524, 536, 535, 369, 450,
	0, 547, 550, 480, 617, 0, 544, 559, 621, 558,
	614, 379, 0, 400, 556, 503, 0, 548, 522, 0,
	549, 518, 553, 0, 492, 0, 407, 432, 444, 461,
	464, 493, 578, 579, 580, 275, 463, 582, 583, 584,
	585, 586, 587, 588, 581, 435, 525, 502, 528, 443,
	505, 504, 0, 0, 539, 459, 540, 541, 363, 364,
	365, 366, 326, 566, 293, 462, 389, 0, 526, 0,
	0, 0, 0, 0, 0, 0, 0, 531, 532, 529,
	626, 0, 589, 590, 0, 0, 456, 457, 321, 328,
	475, 330, 292, 378, 323, 441, 337, 0, 468, 533,
	469, 592, 595, 593, 594, 370, 333, 334, 404, 338,
	348, 392, 440, 376, 397, 290, 431, 405, 352, 519,
	546, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 574, 573, 572,
	571, 570, 569, 568, 567, 0, 0, 516, 418, 302,
	264, 298, 299, 306, 615, 612, 422, 616, 0, 272,
	496, 346, 0, 387, 320, 561, 562, 0, 0, 220,
	221, 222, 223, 224, 225, 226, 227, 265, 228, 229,
	230, 231, 232, 233, 234, 237, 238, 239, 240, 241,
	242, 243, 244, 564, 235, 236, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	0, 0, 0, 266, 267, 268, 269, 0, 0, 260,
	261, 262, 263, 0, 0, 0, 447, 448, 449, 471,
	0, 433, 495, 613, 0, 0, 0, 0, 0, 0,
	0, 545, 557, 591, 0, 601, 602, 604, 606, 605,
	608, 410, 0, 619, 486, 487, 620, 597, 375, 0,
	501, 534, 523, 607, 489, 0, 0, 0, 0, 0,
	2025, 0, 0, 0, 0, 315, 0, 0, 345, 538,
	520, 530, 521, 506, 507, 508, 515, 325, 509, 510,
	511, 481, 512, 482, 513, 514, 0, 537, 488, 406,
	359, 555, 554, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 209, 0, 0, 2026, 0, 0, 0, 288, 210,
	483, 603, 485, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 291, 0, 0, 1196, 1197, 1198, 1195,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 278, 412, 429, 289, 402,
	442, 294, 409, 284, 374, 398, 0, 0, 280, 427,
	408, 356, 335, 336, 279, 0, 393, 313, 327, 310,
	372, 0, 426, 454, 309, 445, 0, 437, 282, 0,
	436, 371, 423, 428, 357, 351, 281, 425, 355, 350,
	339, 317, 470, 340, 341, 331, 383, 349, 384, 332,
	361, 360, 362, 0, 0, 0, 0, 0, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 596, 0, 0, 600, 0, 439, 0, 0,
	0, 0, 0, 0, 411, 0, 0, 342, 0, 0,
	0, 455, 0, 396, 377, 622, 0, 0, 394, 347,
	424, 385, 430, 413, 438, 390, 386, 273, 414, 312,
	358, 285, 287, 307, 314, 316, 318, 319, 367, 368,
	380, 401, 415, 416, 417, 311, 295, 395, 296, 329,
	297, 274, 303, 301, 304, 403, 305, 276, 381, 421,
	0, 324, 391, 354, 277, 353, 382, 420, 419, 286,
	446, 452, 453, 542, 0, 458, 623, 624, 625, 467,
	472, 473, 474, 476, 477, 478, 479, 543, 560, 527,
	497, 460, 551, 494, 498, 499, 563, 0, 0, 0,
	451, 343, 344, 0, 322, 270, 271, 618, 308, 373,
	565, 598, 599, 490, 0, 552, 491, 500, 300, 524,
	536, 535, 369, 450, 0, 547, 550, 480, 617, 0,
	544, 559, 621, 558, 614, 379, 0, 400, 556, 503,
	0, 548, 522, 0, 549, 518, 553, 0, 492, 0,
	407, 432, 444, 461, 464, 493, 578, 579, 580, 275,
	463, 582, 583, 584, 585, 586, 587, 588, 581, 435,
	525, 502, 528, 443, 505, 504, 0, 0, 539, 459,
	540, 541, 363, 364, 365, 366, 326, 566, 293, 462,
	389, 0, 526, 0, 0, 0, 0, 0, 0, 0,
	0, 531, 532, 529, 626, 0, 589, 590, 0, 0,
	456, 457, 321, 328, 475, 330, 292, 378, 323, 441,
	337, 0, 468, 533, 469, 592, 595, 593, 594, 370,
	333, 334, 404, 338, 348, 392, 440, 376, 397, 290,
	431, 405, 352, 519, 546, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 574, 573, 572, 571, 570, 569, 568, 567, 0,
	0, 516, 418, 302, 264, 298, 299, 306, 615, 612,
	422, 616, 0, 272, 496, 346, 0, 387, 320, 561,
	562, 0, 0, 220, 221, 222, 223, 224, 225, 226,
	227, 265, 228, 229, 230, 231, 232, 233, 234, 237,
	238, 239, 240, 241, 242, 243, 244, 564, 235, 236,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
	255, 256, 257, 258, 0, 0, 0, 266, 267, 268,
	269, 0, 0, 260, 261, 262, 263, 0, 0, 0,
	447, 448, 449, 471, 0, 433, 495, 613, 0, 0,
	0, 0, 0, 0, 0, 545, 557, 591, 0, 601,
	602, 604, 606, 605, 608, 410, 187, 619, 486, 487,
	620, 597, 0, 0, 0, 0, 375, 0, 501, 534,
	523, 607, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 315, 0, 0, 345, 538, 520, 530,
	521, 506, 507, 508, 515, 325, 509, 510, 511, 481,
	512, 482, 513, 514, 125, 537, 488, 406, 359, 555,
	554, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 181, 2075, 0, 209,
	0, 0, 0, 0, 0, 0, 288, 210, 483, 603,
	485, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 291, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 278, 412, 429, 289, 402, 442, 294,
	409, 284, 374, 398, 0, 0, 280, 427, 408, 356,
	335, 336, 279, 0, 393, 313, 327, 310, 372, 0,
	426, 454, 309, 445, 0, 437, 282, 0, 436, 371,
	423, 428, 357, 351, 281, 425, 355, 350, 339, 317,
	470, 340, 341, 331, 383, 349, 384, 332, 361, 360,
	362, 0, 0, 0, 0, 0, 465, 466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	596, 0, 0, 600, 0, 439, 0, 0, 0, 0,
	0, 0, 411, 0, 0, 342, 0, 0, 0, 455,
	0, 396, 377, 622, 0, 0, 394, 347, 424, 385,
	430, 413, 438, 390, 386, 273, 414, 312, 358, 285,
	287, 307, 314, 316, 318, 319, 367, 368, 380, 401,
	415, 416, 417, 311, 295, 395, 296, 329, 297, 274,
	303, 301, 304, 403, 305, 276, 381, 421, 0, 324,
	391, 354, 277, 353, 382, 420, 419, 286, 446, 452,
	453, 542, 0, 458, 623, 624, 625, 467, 472, 473,
	474, 476, 477, 478, 479, 543, 560, 527, 497, 460,
	551, 494, 498, 499, 563, 0, 0, 0, 451, 343,
	344, 0, 322, 270, 271, 618, 308, 373, 565, 598,
	599, 490, 0, 552, 491, 500, 300, 524, 536, 535,
	369, 450, 0, 547, 550, 480, 617, 0, 544, 559,
	621, 558, 614, 379, 0, 400, 556, 503, 0, 548,
	522, 0, 549, 518, 553, 0, 492, 0, 407, 432,
	444, 461, 464, 493, 578, 579, 580, 275, 463, 582,
	583, 584, 585, 586, 587, 588, 581, 435, 525, 502,
	528, 443, 505, 504, 0, 0, 539, 459, 540, 541,
	363, 364, 365, 366, 326, 566, 293, 462, 389, 0,
	526, 0, 0, 0, 0, 0, 0, 0, 0, 531,
	532, 529, 626, 0, 589, 590, 0, 0, 456, 457,
	321, 328, 475, 330, 292, 378, 323, 441, 337, 0,
	468, 533, 469, 592, 595, 593, 594, 370, 333, 334,
	404, 338, 348, 392, 440, 376, 397, 290, 431, 405,
	352, 519, 546, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 574,
	573, 572, 571, 570, 569, 568, 567, 0, 0, 516,
	418, 302, 264, 298, 299, 306, 615, 612, 422, 616,
	0, 272, 496, 346, 150, 387, 320, 561, 562, 0,
	0, 220, 221, 222, 223, 224, 225, 226, 227, 265,
	228, 229, 230, 231, 232, 233, 234, 237, 238, 239,
	240, 241, 242, 243, 244, 564, 235, 236, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 256,
	257, 258, 0, 0, 0, 266, 267, 268, 269, 0,
	0, 260, 261, 262, 263, 0, 0, 0, 447, 448,
	449, 471, 0, 433, 495, 613, 0, 0, 0, 0,
	0, 0, 0, 545, 557, 591, 0, 601, 602, 604,
	606, 605, 608, 410, 187, 619, 486, 487, 620, 597,
	0, 0, 0, 0, 375, 0, 501, 534, 523, 607,
	489, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 315, 0, 0, 345, 538, 520, 530, 521, 506,
	507, 508, 515, 325, 509, 510, 511, 481, 512, 482,
	513, 514, 125, 537, 488, 406, 359, 555, 554, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 181, 2061, 0, 209, 0, 0,
	0, 0, 0, 0, 288, 210, 483, 603, 485, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 291,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 278, 412, 429, 289, 402, 442, 294, 409, 284,
	374, 398, 0, 0, 280, 427, 408, 356, 335, 336,
	279, 0, 393, 313, 327, 310, 372, 0, 426, 454,
	309, 445, 0, 437, 282, 0, 436, 371, 423, 428,
	357, 351, 281, 425, 355, 350, 339, 317, 470, 340,
	341, 331, 383, 349, 384, 332, 361, 360, 362, 0,
	0, 0, 0, 0, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 596, 0,
	0, 600, 0, 439, 0, 0, 0, 0, 0, 0,
	411, 0, 0, 342, 0, 0, 0, 455, 0, 396,
	377, 622, 0, 0, 394, 347, 424, 385, 430, 413,
	438, 390, 386, 273, 414, 312, 358, 285, 287, 307,
	314, 316, 318, 319, 367, 368, 380, 401, 415, 416,
	417, 311, 295, 395, 296, 329, 297, 274, 303, 301,
	304, 403, 305, 276, 381, 421, 0, 324, 391, 354,
	277, 353, 382, 420, 419, 286, 446, 452, 453, 542,
	0, 458, 623, 624, 625, 467, 472, 473, 474, 476,
	477, 478, 479, 543, 560, 527, 497, 460, 551, 494,
	498, 499, 563, 0, 0, 0, 451, 343, 344, 0,
	322, 270, 271, 618, 308, 373, 565, 598, 599, 490,
	0, 552, 491, 500, 300, 524, 536, 535, 369, 450,
	0, 547, 550, 480, 617, 0, 544, 559, 621, 558,
	614, 379, 0, 400, 556, 503, 0, 548, 522, 0,
	549, 518, 553, 0, 492, 0, 407, 432, 444, 461,
	464, 493, 578, 579, 580, 275, 463, 582, 583, 584,
	585, 586, 587, 588, 581, 435, 525, 502, 528, 443,
	505, 504, 0, 0, 539, 459, 540, 541, 363, 364,
	365, 366, 326, 566, 293, 462, 389, 0, 526, 0,
	0, 0, 0, 0, 0, 0, 0, 531, 532, 529,
	626, 0, 589, 590, 0, 0, 456, 457, 321, 328,
	475, 330, 292, 378, 323, 441, 337, 0, 468, 533,
	469, 592, 595, 593, 594, 370, 333, 334, 404, 338,
	348, 392, 440, 376, 397, 290, 431, 405, 352, 519,
	546, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 574, 573, 572,
	571, 570, 569, 568, 567, 0, 0, 516, 418, 302,
	264, 298, 299, 306, 615, 612, 422, 616, 0, 272,
	496, 346, 150, 387, 320, 561, 562, 0, 0, 220,
	221, 222, 223, 224, 225, 226, 227, 265, 228, 229,
	230, 231, 232, 233, 234, 237, 238, 239, 240, 241,
	242, 243, 244, 564, 235, 236, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	0, 0, 0, 266, 267, 268, 269, 0, 0, 260,
	261, 262, 263, 0, 0, 0, 447, 448, 449, 471,
	0, 433, 495, 613, 0, 0, 0, 0, 0, 0,
	0, 545, 557, 591, 0, 601, 602, 604, 606, 605,
	608, 410, 0, 619, 486, 487, 620, 597, 375, 0,
	501, 534, 523, 607, 489, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 315, 994, 0, 345, 538,
	520, 530, 521, 506, 507, 508, 515, 325, 509, 510,
	511, 481, 512, 482, 513, 514, 0, 537, 488, 406,
	359, 555, 554, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 209, 1001, 1002, 0, 0, 0, 0, 288, 210,
	483, 603, 485, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1005, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 278, 412, 989, 289, 402,
	442, 294, 409, 284, 374, 398, 0, 0, 280, 427,
	408, 356, 335, 336, 279, 0, 393, 313, 327, 310,
	372, 0, 426, 454, 309, 445, 978, 437, 282, 977,
	436, 371, 423, 428, 357, 351, 281, 425, 355, 350,
	339, 317, 470, 340, 341, 331, 383, 349, 384, 332,
	361, 360, 362, 0, 0, 0, 0, 0, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 596, 0, 0, 600, 0, 439, 0, 0,
	0, 0, 0, 0, 411, 0, 0, 342, 0, 0,
	0, 455, 0, 396, 377, 622, 0, 0, 394, 347,
	424, 385, 430, 413, 438, 992, 386, 273, 414, 312,
	358, 285, 287, 307, 314, 316, 318, 319, 367, 368,
	380, 401, 415, 416, 417, 311, 295, 395, 296, 329,
	297, 274, 303, 301, 304, 403, 305, 276, 381, 421,
	0, 324, 391, 354, 277, 353, 382, 420, 419, 286,
	446, 452, 453, 542, 0, 458, 623, 624, 625, 467,
	472, 473, 474, 476, 477, 478, 479, 543, 560, 527,
	497, 460, 551, 494, 498, 499, 563, 0, 0, 0,
	451, 343, 344, 0, 322, 270, 271, 618, 308, 373,
	565, 598, 599, 490, 0, 552, 491, 500, 300, 524,
	536, 535, 369, 450, 0, 547, 550, 480, 617, 0,
	544, 559, 621, 558, 614, 379, 0, 400, 556, 503,
	0, 548, 522, 0, 549, 518, 553, 0, 492, 0,
	407, 432, 444, 461, 464, 493, 578, 579, 580, 275,
	463, 582, 583, 584, 585, 586, 587, 993, 581, 435,
	525, 502, 528, 443, 505, 504, 0, 0, 539, 996,
	540, 541, 363, 364, 365, 366, 326, 566, 293, 462,
	389, 0, 526, 0, 0, 0, 0, 0, 0, 0,
	0, 531, 532, 529, 626, 0, 589, 590, 0, 0,
	456, 457, 321, 328, 475, 330, 292, 378, 323, 441,
	337, 0, 468, 533, 469, 592, 595, 593, 594, 1003,
	990, 999, 991, 338, 348, 392, 440, 376, 397, 290,
	431, 405, 1000, 519, 546, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 574, 573, 572, 571, 570, 569, 568, 567, 0,
	0, 516, 418, 302, 264, 298, 299, 306, 615, 612,
	422, 616, 0, 272, 496, 346, 0, 387, 320, 561,
	562, 0, 0, 220, 221, 222, 223, 224, 225, 226,
	227, 265, 228, 229, 230, 231, 232, 233, 234, 237,
	238, 239, 240, 241, 242, 243, 244, 564, 235, 236,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
	255, 256, 257, 258, 0, 0, 0, 266, 267, 268,
	269, 0, 0, 260, 261, 262, 263, 0, 0, 0,
	447, 448, 449, 471, 0, 433, 495, 613, 0, 0,
	0, 0, 0, 0, 0, 545, 557, 591, 0, 601,
	602, 604, 606, 605, 608, 410, 187, 619, 486, 487,
	620, 597, 0, 0, 0, 0, 375, 0, 501, 534,
	523, 607, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 315, 0, 0, 345, 538, 520, 530,
	521, 506, 507, 508, 515, 325, 509, 510, 511, 481,
	512, 482, 513, 514, 125, 537, 488, 406, 359, 555,
	554, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1957, 0, 0, 209,
	0, 0, 0, 0, 0, 0, 288, 210, 483, 603,
	485, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 291, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 278, 412, 429, 289, 402, 442, 294,
	409, 284, 374, 398, 0, 0, 280, 427, 408, 356,
	335, 336, 279, 0, 393, 313, 327, 310, 372, 0,
	426, 454, 309, 445, 0, 437, 282, 0, 436, 371,
	423, 428, 357, 351, 281, 425, 355, 350, 339, 317,
	470, 340, 341, 331, 383, 349, 384, 332, 361, 360,
	362, 0, 0, 0, 0, 0, 465, 466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	596, 0, 0, 600, 0, 439, 0, 0, 0, 0,
	0, 0, 411, 0, 0, 342, 0, 0, 0, 455,
	0, 396, 377, 622, 0, 0, 394, 347, 424, 385,
	430, 413, 438, 390, 386, 273, 414, 312, 358, 285,
	287, 307, 314, 316, 318, 319, 367, 368, 380, 401,
	415, 416, 417, 311, 295, 395, 296, 329, 297, 274,
	303, 301, 304, 403, 305, 276, 381, 421, 0, 324,
	391, 354, 277, 353, 382, 420, 419, 286, 446, 452,
	453, 542, 0, 458, 623, 624, 625, 467, 472, 473,
	474, 476, 477, 478, 479, 543, 560, 527, 497, 460,
	551, 494, 498, 499, 563, 0, 0, 0, 451, 343,
	344, 0, 322, 270, 271, 618, 308, 373, 565, 598,
	599, 490, 0, 552, 491, 500, 300, 524, 536, 535,
	369, 450, 0, 547, 550, 480, 617, 0, 544, 559,
	621, 558, 614, 379, 0, 400, 556, 503, 0, 548,
	522, 0, 549, 518, 553, 0, 492, 0, 407, 432,
	444, 461, 464, 493, 578, 579, 580, 275, 463, 582,
	583, 584, 585, 586, 587, 588, 581, 435, 525, 502,
	528, 443, 505, 504, 0, 0, 539, 459, 540, 541,
	363, 364, 365, 366, 326, 566, 293, 462, 389, 0,
	526, 0, 0, 0, 0, 0, 0, 0, 0, 531,
	532, 529, 626, 0, 589, 590, 0, 0, 456, 457,
	321, 328, 475, 330, 292, 378, 323, 441, 337, 0,
	468, 533, 469, 592, 595, 593, 594, 370, 333, 334,
	404, 338, 348, 392, 440, 376, 397, 290, 431, 405,
	352, 519, 546, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 574,
	573, 572, 571, 570, 569, 568, 567, 0, 0, 516,
	418, 302, 264, 298, 299, 306, 615, 612, 422, 616,
	0, 272, 496, 346, 150, 387, 320, 561, 562, 0,
	0, 220, 221, 222, 223, 224, 225, 226, 227, 265,
	228, 229, 230, 231, 232, 233, 234, 237, 238, 239,
	240, 241, 242, 243, 244, 564, 235, 236, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 256,
	257, 258, 0, 0, 0, 266, 267, 268, 269, 0,
	0, 260, 261, 262, 263, 0, 0, 0, 447, 448,
	449, 471, 0, 433, 495, 613, 0, 0, 0, 0,
	0, 0, 0, 545, 557, 591, 0, 601, 602, 604,
	606, 605, 608, 410, 0, 619, 486, 487, 620, 597,
	375, 0, 501, 534, 523, 607, 489, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 315, 0, 0,
	345, 538, 520, 530, 521, 506, 507, 508, 515, 325,
	509, 510, 511, 481, 512, 482, 513, 514, 0, 537,
	488, 406, 359, 555, 554, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 1001, 1002, 0, 0, 0, 0,
	288, 210, 483, 603, 485, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1005, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 278, 412, 429,
	289, 402, 442, 294, 409, 284, 374, 398, 0, 0,
	280, 427, 408, 356, 335, 336, 279, 0, 393, 313,
	327, 310, 372, 0, 426, 454, 309, 445, 978, 437,
	282, 977, 436, 371, 423, 428, 357, 351, 281, 425,
	355, 350, 339, 317, 470, 340, 341, 331, 383, 349,
	384, 332, 361, 360, 362, 0, 0, 0, 0, 0,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 596, 0, 0, 600, 0, 439,
	0, 0, 0, 0, 0, 0, 411, 0, 0, 342,
	0, 0, 0, 455, 0, 396, 377, 622, 0, 0,
	394, 347, 424, 385, 430, 413, 438, 390, 386, 273,
	414, 312, 358, 285, 287, 307, 314, 316, 318, 319,
	367, 368, 380, 401, 415, 416, 417, 311, 295, 395,
	296, 329, 297, 274, 303, 301, 304, 403, 305, 276,
	381, 421, 0, 324, 391, 354, 277, 353, 382, 420,
	419, 286, 446, 452, 453, 542, 0, 458, 623, 624,
	625, 467, 472, 473, 474, 476, 477, 478, 479, 543,
	560, 527, 497, 460, 551, 494, 498, 499, 563, 0,
	0, 0, 451, 343, 344, 0, 322, 270, 271, 618,
	308, 373, 565, 598, 599, 490, 0, 552, 491, 500,
	300, 524, 536, 535, 369, 450, 0, 547, 550, 480,
	617, 0, 544, 559, 621, 558, 614, 379, 0, 400,
	556, 503, 0, 548, 522, 0, 549, 518, 553, 0,
	492, 0, 407, 432, 444, 461, 464, 493, 578, 579,
	580, 275, 463, 582, 583, 584, 585, 586, 587, 588,
	581, 435, 525, 502, 528, 443, 505, 504, 0, 0,
	539, 459, 540, 541, 363, 364, 365, 366, 326, 566,
	293, 462, 389, 0, 526, 0, 0, 0, 0, 0,
	0, 0, 0, 531, 532, 529, 626, 0, 589, 590,
	0, 0, 456, 457, 321, 328, 475, 330, 292, 378,
	323, 441, 337, 0, 468, 533, 469, 592, 595, 593,
	594, 1003, 1976, 999, 1977, 338, 348, 392, 440, 376,
	397, 290, 431, 405, 1000, 519, 546, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 574, 573, 572, 571, 570, 569, 568,
	567, 0, 0, 516, 418, 302, 264, 298, 299, 306,
	615, 612, 422, 616, 0, 272, 496, 346, 0, 387,
	320, 561, 562, 0, 0, 220, 221, 222, 223, 224,
	225, 226, 227, 265, 228, 229, 230, 231, 232, 233,
	234, 237, 238, 239, 240, 241, 242, 243, 244, 564,
	235, 236, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 256, 257, 258, 0, 0, 0, 266,
	267, 268, 269, 0, 0, 260, 261, 262, 263, 0,
	0, 0, 447, 448, 449, 471, 0, 433, 495, 613,
	0, 0, 0, 0, 0, 0, 0, 545, 557, 591,
	0, 601, 602, 604, 606, 605, 608, 410, 0, 619,
	486, 487, 620, 597, 375, 0, 501, 534, 523, 607,
	489, 0, 0, 2830, 0, 0, 0, 0, 0, 0,
	0, 315, 0, 0, 345, 538, 520, 530, 521, 506,
	507, 508, 515, 325, 509, 510, 511, 481, 512, 482,
	513, 514, 0, 537, 488, 406, 359, 555, 554, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 209, 0, 0,
	0, 0, 0, 0, 288, 210, 483, 603, 485, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 291,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 278, 412, 429, 289, 402, 442, 294, 409, 284,
	374, 398, 0, 0, 280, 427, 408, 356, 335, 336,
	279, 0, 393, 313, 327, 310, 372, 0, 426, 454,
	309, 445, 0, 437, 282, 0, 436, 371, 423, 428,
	357, 351, 281, 425, 355, 350, 339, 317, 470, 340,
	341, 331, 383, 349, 384, 332, 361, 360, 362, 0,
	0, 0, 0, 0, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 0, 2833, 0, 0, 2832, 596, 0,
	0, 600, 0, 439, 0, 0, 0, 0, 0, 0,
	411, 0, 0, 342, 0, 0, 0, 455, 0, 396,
	377, 622, 0, 0, 394, 347, 424, 385, 430, 413,
	438, 390, 386, 273, 414, 312, 358, 285, 287, 307,
	314, 316, 318, 319, 367, 368, 380, 401, 415, 416,
	417, 311, 295, 395, 296, 329, 297, 274, 303, 301,
	304, 403, 305, 276, 381, 421, 0, 324, 391, 354,
	277, 353, 382, 420, 419, 286, 446, 452, 453, 542,
	0, 458, 623, 624, 625, 467, 472, 473, 474, 476,
	477, 478, 479, 543, 560, 527, 497, 460, 551, 494,
	498, 499, 563, 0, 0, 0, 451, 343, 344, 0,
	322, 270, 271, 618, 308, 373, 565, 598, 599, 490,
	0, 552, 491, 500, 300, 524, 536, 535, 369, 450,
	0, 547, 550, 480, 617, 0, 544, 559, 621, 558,
	614, 379, 0, 400, 556, 503, 0, 548, 522, 0,
	549, 518, 553, 0, 492, 0, 407, 432, 444, 461,
	464, 493, 578, 579, 580, 275, 463, 582, 583, 584,
	585, 586, 587, 588, 581, 435, 525, 502, 528, 443,
	505, 504, 0, 0, 539, 459, 540, 541, 363, 364,
	365, 366, 326, 566, 293, 462, 389, 0, 526, 0,
	0, 0, 0, 0, 0, 0, 0, 531, 532, 529,
	626, 0, 589, 590, 0, 0, 456, 457, 321, 328,
	475, 330, 292, 378, 323, 441, 337, 0, 468, 533,
	469, 592, 595, 593, 594, 370, 333, 334, 404, 338,
	348, 392, 440, 376, 397, 290, 431, 405, 352, 519,
	546, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 574, 573, 572,
	571, 570, 569, 568, 567, 0, 0, 516, 418, 302,
	264, 298, 299, 306, 615, 612, 422, 616, 0, 272,
	496, 346, 0, 387, 320, 561, 562, 0, 0, 220,
	221, 222, 223, 224, 225, 226, 227, 265, 228, 229,
	230, 231, 232, 233, 234, 237, 238, 239, 240, 241,
	242, 243, 244, 564, 235, 236, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	0, 0, 0, 266, 267, 268, 269, 0, 0, 260,
	261, 262, 263, 0, 0, 0, 447, 448, 449, 471,
	0, 433, 495, 613, 0, 0, 0, 0, 0, 0,
	0, 545, 557, 591, 0, 601, 602, 604, 606, 605,
	608, 410, 0, 619, 486, 487, 620, 597, 375, 0,
	501, 534, 523, 607, 489, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 315, 1469, 0, 345, 538,
	520, 530, 521, 506, 507, 508, 515, 325, 509, 510,
	511, 481, 512, 482, 513, 514, 0, 537, 488, 406,
	359, 555, 554, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 209, 0, 0, 1467, 0, 0, 0, 288, 210,
	483, 603, 485, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 291, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1465, 0,
	0, 0, 0, 0, 0, 278, 412, 429, 289, 402,
	442, 294, 409, 284, 374, 398, 0, 0, 280, 427,
	408, 356, 335, 336, 279, 0, 393, 313, 327, 310,
	372, 0, 426, 454, 309, 445, 0, 437, 282, 0,
	436, 371, 423, 428, 357, 351, 281, 425, 355, 350,
	339, 317, 470, 340, 341, 331, 383, 349, 384, 332,
	361, 360, 362, 0, 0, 0, 0, 0, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 596, 0, 0, 600, 0, 439, 0, 0,
	0, 0, 0, 0, 411, 0, 0, 342, 0, 0,
	0, 455, 0, 396, 377, 622, 0, 0, 394, 347,
	424, 385, 430, 413, 438, 390, 386, 273, 414, 312,
	358, 285, 287, 307, 314, 316, 318, 319, 367, 368,
	380, 401, 415, 416, 417, 311, 295, 395, 296, 329,
	297, 274, 303, 301, 304, 403, 305, 276, 381, 421,
	0, 324, 391, 354, 277, 353, 382, 420, 419, 286,
	446, 452, 453, 542, 0, 458, 623, 624, 625, 467,
	472, 473, 474, 476, 477, 478, 479, 543, 560, 527,
	497, 460, 551, 494, 498, 499, 563, 0, 0, 0,
	451, 343, 344, 0, 322, 270, 271, 618, 308, 373,
	565, 598, 599, 490, 0, 552, 491, 500, 300, 524,
	536, 535, 369, 450, 0, 547, 550, 480, 617, 0,
	544, 559, 621, 558, 614, 379, 0, 400, 556, 503,
	0, 548, 522, 0, 549, 518, 553, 0, 492, 0,
	407, 432, 444, 461, 464, 493, 578, 579, 580, 275,
	463, 582, 583, 584, 585, 586, 587, 588, 581, 435,
	525, 502, 528, 443, 505, 504, 0, 0, 539, 459,
	540, 541, 363, 364, 365, 366, 326, 566, 293, 462,
	389, 0, 526, 0, 0, 0, 0, 0, 0, 0,
	0, 531, 532, 529, 626, 0, 589, 590, 0, 0,
	456, 457, 321, 328, 475, 330, 292, 378, 323, 441,
	337, 0, 468, 533, 469, 592, 595, 593, 594, 370,
	333, 334, 404, 338, 348, 392, 440, 376, 397, 290,
	431, 405, 352, 519, 546, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 574, 573, 572, 571, 570, 569, 568, 567, 0,
	0, 516, 418, 302, 264, 298, 299, 306, 615, 612,
	422, 616, 0, 272, 496, 346, 0, 387, 320, 561,
	562, 0, 0, 220, 221, 222, 223, 224, 225, 226,
	227, 265, 228, 229, 230, 231, 232, 233, 234, 237,
	238, 239, 240, 241, 242, 243, 244, 564, 235, 236,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
	255, 256, 257, 258, 0, 0, 0, 266, 267, 268,
	269, 0, 0, 260, 261, 262, 263, 0, 0, 0,
	447, 448, 449, 471, 0, 433, 495, 613, 0, 0,
	0, 0, 0, 0, 0, 545, 557, 591, 0, 601,
	602, 604, 606, 605, 608, 410, 0, 619, 486, 487,
	620, 597, 375, 0, 501, 534, 523, 607, 489, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 315,
	1463, 0, 345, 538, 520, 530, 521, 506, 507, 508,
	515, 325, 509, 510, 511, 481, 512, 482, 513, 514,
	0, 537, 488, 406, 359, 555, 554, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 209, 0, 0, 1467, 0,
	0, 0, 288, 210, 483, 603, 485, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 291, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1465, 0, 0, 0, 0, 0, 0, 278,
	412, 429, 289, 402, 442, 294, 409, 284, 374, 398,
	0, 0, 280, 427, 408, 356, 335, 336, 279, 0,
	393, 313, 327, 310, 372, 0, 426, 454, 309, 445,
	0, 437, 282, 0, 436, 371, 423, 428, 357, 351,
	281, 425, 355, 350, 339, 317, 470, 340, 341, 331,
	383, 349, 384, 332, 361, 360, 362, 0, 0, 0,
	0, 0, 465, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 596, 0, 0, 600,
	0, 439, 0, 0, 0, 0, 0, 0, 411, 0,
	0, 342, 0, 0, 0, 455, 0, 396, 377, 622,
	0, 0, 394, 347, 424, 385, 430, 413, 438, 390,
	386, 273, 414, 312, 358, 285, 287, 307, 314, 316,
	318, 319, 367, 368, 380, 401, 415, 416, 417, 311,
	295, 395, 296, 329, 297, 274, 303, 301, 304, 403,
	305, 276, 381, 421, 0, 324, 391, 354, 277, 353,
	382, 420, 419, 286, 446, 452, 453, 542, 0, 458,
	623, 624, 625, 467, 472, 473, 474, 476, 477, 478,
	479, 543, 560, 527, 497, 460, 551, 494, 498, 499,
	563, 0, 0, 0, 451, 343, 344, 0, 322, 270,
	271, 618, 308, 373, 565, 598, 599, 490, 0, 552,
	491, 500, 300, 524, 536, 535, 369, 450, 0, 547,
	550, 480, 617, 0, 544, 559, 621, 558, 614, 379,
	0, 400, 556, 503, 0, 548, 522, 0, 549, 518,
	553, 0, 492, 0, 407, 432, 444, 461, 464, 493,
	578, 579, 580, 275, 463, 582, 583, 584, 585, 586,
	587, 588, 581, 435, 525, 502, 528, 443, 505, 504,
	0, 0, 539, 459, 540, 541, 363, 364, 365, 366,
	326, 566, 293, 462, 389, 0, 526, 0, 0, 0,
	0, 0, 0, 0, 0, 531, 532, 529, 626, 0,
	589, 590, 0, 0, 456, 457, 321, 328, 475, 330,
	292, 378, 323, 441, 337, 0, 468, 533, 469, 592,
	595, 593, 594, 370, 333, 334, 404, 338, 348, 392,
	440, 376, 397, 290, 431, 405, 352, 519, 546, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 574, 573, 572, 571, 570,
	569, 568, 567, 0, 0, 516, 418, 302, 264, 298,
	299, 306, 615, 612, 422, 616, 0, 272, 496, 346,
	0, 387, 320, 561, 562, 0, 0, 220, 221, 222,
	223, 224, 225, 226, 227, 265, 228, 229, 230, 231,
	232, 233, 234, 237, 238, 239, 240, 241, 242, 243,
	244, 564, 235, 236, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 256, 257, 258, 0, 0,
	0, 266, 267, 268, 269, 0, 0, 260, 261, 262,
	263, 0, 0, 0, 447, 448, 449, 471, 0, 433,
	495, 613, 0, 0, 0, 0, 0, 0, 0, 545,
	557, 591, 0, 601, 602, 604, 606, 605, 608, 410,
	0, 619, 486, 487, 620, 597, 375, 0, 501, 534,
	523, 607, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 315, 0, 0, 345, 538, 520, 530,
	521, 506, 507, 508, 515, 325, 509, 510, 511, 481,
	512, 482, 513, 514, 0, 537, 488, 406, 359, 555,
	554, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3846, 0, 209,
	813, 0, 0, 0, 0, 0, 288, 210, 483, 603,
	485, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 291, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 278, 412, 429, 289, 402, 442, 294,
	409, 284, 374, 398, 0, 0, 280, 427, 408, 356,
	335, 336, 279, 0, 393, 313, 327, 310, 372, 0,
	426, 454, 309, 445, 0, 437, 282, 0, 436, 371,
	423, 428, 357, 351, 281, 425, 355, 350, 339, 317,
	470, 340, 341, 331, 383, 349, 384, 332, 361, 360,
	362, 0, 0, 0, 0, 0, 465, 466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	596, 0, 0, 600, 0, 439, 0, 0, 0, 0,
	0, 0, 411, 0, 0, 342, 0, 0, 0, 455,
	0, 396, 377, 622, 0, 0, 394, 347, 424, 385,
	430, 413, 438, 390, 386, 273, 414, 312, 358, 285,
	287, 307, 314, 316, 318, 319, 367, 368, 380, 401,
	415, 416, 417, 311, 295, 395, 296, 329, 297, 274,
	303, 301, 304, 403, 305, 276, 381, 421, 0, 324,
	391, 354, 277, 353, 382, 420, 419, 286, 446, 452,
	453, 542, 0, 458, 623, 624, 625, 467, 472, 473,
	474, 476, 477, 478, 479, 543, 560, 527, 497, 460,
	551, 494, 498, 499, 563, 0, 0, 0, 451, 343,
	344, 0, 322, 270, 271, 618, 308, 373, 565, 598,
	599, 490, 0, 552, 491, 500, 300, 524, 536, 535,
	369, 450, 0, 547, 550, 480, 617, 0, 544, 559,
	621, 558, 614, 379, 0, 400, 556, 503, 0, 548,
	522, 0, 549, 518, 553, 0, 492, 0, 407, 432,
	444, 461, 464, 493, 578, 579, 580, 275, 463, 582,
	583, 584, 585, 586, 587, 588, 581, 435, 525, 502,
	528, 443, 505, 504, 0, 0, 539, 459, 540, 541,
	363, 364, 365, 366, 326, 566, 293, 462, 389, 0,
	526, 0, 0, 0, 0, 0, 0, 0, 0, 531,
	532, 529, 626, 0, 589, 590, 0, 0, 456, 457,
	321, 328, 475, 330, 292, 378, 323, 441, 337, 0,
	468, 533, 469, 592, 595, 593, 594, 370, 333, 334,
	404, 338, 348, 392, 440, 376, 397, 290, 431, 405,
	352, 519, 546, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 574,
	573, 572, 571, 570, 569, 568, 567, 0, 0, 516,
	418, 302, 264, 298, 299, 306, 615, 612, 422, 616,
	0, 272, 496, 346, 0, 387, 320, 561, 562, 0,
	0, 220, 221, 222, 223, 224, 225, 226, 227, 265,
	228, 229, 230, 231, 232, 233, 234, 237, 238, 239,
	240, 241, 242, 243, 244, 564, 235, 236, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 256,
	257, 258, 0, 0, 0, 266, 267, 268, 269, 0,
	0, 260, 261, 262, 263, 0, 0, 0, 447, 448,
	449, 471, 0, 433, 495, 613, 0, 0, 0, 0,
	0, 0, 0, 545, 557, 591, 0, 601, 602, 604,
	606, 605, 608, 410, 0, 619, 486, 487, 620, 597,
	375, 0, 501, 534, 523, 607, 489, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 315, 0, 0,
	345, 538, 520, 530, 521, 506, 507, 508, 515, 325,
	509, 510, 511, 481, 512, 482, 513, 514, 0, 537,
	488, 406, 359, 555, 554, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 0, 0, 1467, 0, 0, 0,
	288, 210, 483, 603, 485, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 291, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1465, 0, 0, 0, 0, 0, 0, 278, 412, 429,
	289, 402, 442, 294, 409, 284, 374, 398, 0, 0,
	280, 427, 408, 356, 335, 336, 279, 0, 393, 313,
	327, 310, 372, 0, 426, 454, 309, 445, 0, 437,
	282, 0, 436, 371, 423, 428, 357, 351, 281, 425,
	355, 350, 339, 317, 470, 340, 341, 331, 383, 349,
	384, 332, 361, 360, 362, 0, 0, 0, 0, 0,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 596, 0, 0, 600, 0, 439,
	0, 0, 0, 0, 0, 0, 411, 0, 0, 342,
	0, 0, 0, 455, 0, 396, 377, 622, 0, 0,
	394, 347, 424, 385, 430, 413, 438, 390, 386, 273,
	414, 312, 358, 285, 287, 307, 314, 316, 318, 319,
	367, 368, 380, 401, 415, 416, 417, 311, 295, 395,
	296, 329, 297, 274, 303, 301, 304, 403, 305, 276,
	381, 421, 0, 324, 391, 354, 277, 353, 382, 420,
	419, 286, 446, 452, 453, 542, 0, 458, 623, 624,
	625, 467, 472, 473, 474, 476, 477, 478, 479, 543,
	560, 527, 497, 460, 551, 494, 498, 499, 563, 0,
	0, 0, 451, 343, 344, 0, 322, 270, 271, 618,
	308, 373, 565, 598, 599, 490, 0, 552, 491, 500,
	300, 524, 536, 535, 369, 450, 0, 547, 550, 480,
	617, 0, 544, 559, 621, 558, 614, 379, 0, 400,
	556, 503, 0, 548, 522, 0, 549, 518, 553, 0,
	492, 0, 407, 432, 444, 461, 464, 493, 578, 579,
	580, 275, 463, 582, 583, 584, 585, 586, 587, 588,
	581, 435, 525, 502, 528, 443, 505, 504, 0, 0,
	539, 459, 540, 541, 363, 364, 365, 366, 326, 566,
	293, 462, 389, 0, 526, 0, 0, 0, 0, 0,
	0, 0, 0, 531, 532, 529, 626, 0, 589, 590,
	0, 0, 456, 457, 321, 328, 475, 330, 292, 378,
	323, 441, 337, 0, 468, 533, 469, 592, 595, 593,
	594, 370, 333, 334, 404, 338, 348, 392, 440, 376,
	397, 290, 431, 405, 352, 519, 546, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 574, 573, 572, 571, 570, 569, 568,
	567, 0, 0, 516, 418, 302, 264, 298, 299, 306,
	615, 612, 422, 616, 0, 272, 496, 346, 0, 387,
	320, 561, 562, 0, 0, 220, 221, 222, 223, 224,
	225, 226, 227, 265, 228, 229, 230, 231, 232, 233,
	234, 237, 238, 239, 240, 241, 242, 243, 244, 564,
	235, 236, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 256, 257, 258, 0, 0, 0, 266,
	267, 268, 269, 0, 0, 260, 261, 262, 263, 0,
	0, 0, 447, 448, 449, 471, 0, 433, 495, 613,
	0, 0, 0, 0, 0, 0, 0, 545, 557, 591,
	0, 601, 602, 604, 606, 605, 608, 410, 0, 619,
	486, 487, 620, 597, 375, 0, 501, 534, 523, 607,
	489, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 315, 0, 0, 345, 538, 520, 530, 521, 506,
	507, 508, 515, 325, 509, 510, 511, 481, 512, 482,
	513, 514, 0, 537, 488, 406, 359, 555, 554, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 209, 0, 0,
	1467, 0, 0, 0, 288, 210, 483, 603, 485, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 291,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1675, 0, 0, 0, 0, 0,
	0, 278, 412, 429, 289, 402, 442, 294, 409, 284,
	374, 398, 0, 0, 280, 427, 408, 356, 335, 336,
	279, 0, 393, 313, 327, 310, 372, 0, 426, 454,
	309, 445, 0, 437, 282, 0, 436, 371, 423, 428,
	357, 351, 281, 425, 355, 350, 339, 317, 470, 340,
	341, 331, 383, 349, 384, 332, 361, 360, 362, 0,
	0, 0, 0, 0, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 596, 0,
	0, 600, 0, 439, 0, 0, 0, 0, 0, 0,
	411, 0, 0, 342, 0, 0, 0, 455, 0, 396,
	377, 622, 0, 0, 394, 347, 424, 385, 430, 413,
	438, 390, 386, 273, 414, 312, 358, 285, 287, 307,
	314, 316, 318, 319, 367, 368, 380, 401, 415, 416,
	417, 311, 295, 395, 296, 329, 297, 274, 303, 301,
	304, 403, 305, 276, 381, 421, 0, 324, 391, 354,
	277, 353, 382, 420, 419, 286, 446, 452, 453, 542,
	0, 458, 623, 624, 625, 467, 472, 473, 474, 476,
	477, 478, 479, 543, 560, 527, 497, 460, 551, 494,
	498, 499, 563, 0, 0, 0, 451, 343, 344, 0,
	322, 270, 271, 618, 308, 373, 565, 598, 599, 490,
	0, 552, 491, 500, 300, 524, 536, 535, 369, 450,
	0, 547, 550, 480, 617, 0, 544, 559, 621, 558,
	614, 379, 0, 400, 556, 503, 0, 548, 522, 0,
	549, 518, 553, 0, 492, 0, 407, 432, 444, 461,
	464, 493, 578, 579, 580, 275, 463, 582, 583, 584,
	585, 586, 587, 588, 581, 435, 525, 502, 528, 443,
	505, 504, 0, 0, 539, 459, 540, 541, 363, 364,
	365, 366, 326, 566, 293, 462, 389, 0, 526, 0,
	0, 0, 0, 0, 0, 0, 0, 531, 532, 529,
	626, 0, 589, 590, 0, 0, 456, 457, 321, 328,
	475, 330, 292, 378, 323, 441, 337, 0, 468, 533,
	469, 592, 595, 593, 594, 370, 333, 334, 404, 338,
	348, 392, 440, 376, 397, 290, 431, 405, 352, 519,
	546, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 574, 573, 572,
	571, 570, 569, 568, 567, 0, 0, 516, 418, 302,
	264, 298, 299, 306, 615, 612, 422, 616, 0, 272,
	496, 346, 0, 387, 320, 561, 562, 0, 0, 220,
	221, 222, 223, 224, 225, 226, 227, 265, 228, 229,
	230, 231, 232, 233, 234, 237, 238, 239, 240, 241,
	242, 243, 244, 564, 235, 236, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	0, 0, 0, 266, 267, 268, 269, 0, 0, 260,
	261, 262, 263, 0, 0, 0, 447, 448, 449, 471,
	0, 433, 495, 613, 0, 0, 0, 0, 0, 0,
	0, 545, 557, 591, 0, 601, 602, 604, 606, 605,
	608, 410, 0, 619, 486, 487, 620, 597, 375, 0,
	501, 534, 523, 607, 489, 0, 0, 0, 0, 0,
	2397, 0, 0, 0, 0, 315, 0, 0, 345, 538,
	520, 530, 521, 506, 507, 508, 515, 325, 509, 510,
	511, 481, 512, 482, 513, 514, 0, 537, 488, 406,
	359, 555, 554, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 209, 0, 0, 2399, 0, 0, 0, 288, 210,
	483, 603, 485, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 291, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 278, 412, 429, 289, 402,
	442, 294, 409, 284, 374, 398, 0, 0, 280, 427,
	408, 356, 335, 336, 279, 0, 393, 313, 327, 310,
	372, 0, 426, 454, 309, 445, 0, 437, 282, 0,
	436, 371, 423, 428, 357, 351, 281, 425, 355, 350,
	339, 317, 470, 340, 341, 331, 383, 349, 384, 332,
	361, 360, 362, 0, 0, 0, 0, 0, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 596, 0, 0, 600, 0, 439, 0, 0,
	0, 0, 0, 0, 411, 0, 0, 342, 0, 0,
	0, 455, 0, 396, 377, 622, 0, 0, 394, 347,
	424, 385, 430, 413, 438, 390, 386, 273, 414, 312,
	358, 285, 287, 307, 314, 316, 318, 319, 367, 368,
	380, 401, 415, 416, 417, 311, 295, 395, 296, 329,
	297, 274, 303, 301, 304, 403, 305, 276, 381, 421,
	0, 324, 391, 354, 277, 353, 382, 420, 419, 286,
	446, 452, 453, 542, 0, 458, 623, 624, 625, 467,
	472, 473, 474, 476, 477, 478, 479, 543, 560, 527,
	497, 460, 551, 494, 498, 499, 563, 0, 0, 0,
	451, 343, 344, 0, 322, 270, 271, 618, 308, 373,
	565, 598, 599, 490, 0, 552, 491, 500, 300, 524,
	536, 535, 369, 450, 0, 547, 550, 480, 617, 0,
	544, 559, 621, 558, 614, 379, 0, 400, 556, 503,
	0, 548, 522, 0, 549, 518, 553, 0, 492, 0,
	407, 432, 444, 461, 464, 493, 578, 579, 580, 275,
	463, 582, 583, 584, 585, 586, 587, 588, 581, 435,
	525, 502, 528, 443, 505, 504, 0, 0, 539, 459,
	540, 541, 363, 364, 365, 366, 326, 566, 293, 462,
	389, 0, 526, 0, 0, 0, 0, 0, 0, 0,
	0, 531, 532, 529, 626, 0, 589, 590, 0, 0,
	456, 457, 321, 328, 475, 330, 292, 378, 323, 441,
	337, 0, 468, 533, 469, 592, 595, 593, 594, 370,
	333, 334, 404, 338, 348, 392, 440, 376, 397, 290,
	431, 405, 352, 519, 546, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 574, 573, 572, 571, 570, 569, 568, 567, 0,
	0, 516, 418, 302, 264, 298, 299, 306, 615, 612,
	422, 616, 0, 272, 496, 346, 0, 387, 320, 561,
	562, 0, 0, 220, 221, 222, 223, 224, 225, 226,
	227, 265, 228, 229, 230, 231, 232, 233, 234, 237,
	238, 239, 240, 241, 242, 243, 244, 564, 235, 236,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
	255, 256, 257, 258, 0, 0, 0, 266, 267, 268,
	269, 0, 0, 260, 261, 262, 263, 0, 0, 0,
	447, 448, 449, 471, 0, 433, 495, 613, 0, 0,
	0, 0, 0, 0, 0, 545, 557, 591, 0, 601,
	602, 604, 606, 605, 608, 410, 0, 619, 486, 487,
	620, 597, 375, 0, 501, 534, 523, 607, 489, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 315,
	0, 0, 345, 538, 520, 530, 521, 506, 507, 508,
	515, 325, 509, 510, 511, 481, 512, 482, 513, 514,
	0, 537, 488, 406, 359, 555, 554, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 209, 0, 0, 3033, 3035,
	0, 0, 288, 210, 483, 603, 485, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 291, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 278,
	412, 429, 289, 402, 442, 294, 409, 284, 374, 398,
	0, 0, 280, 427, 408, 356, 335, 336, 279, 0,
	393, 313, 327, 310, 372, 0, 426, 454, 309, 445,
	0, 437, 282, 0, 436, 371, 423, 428, 357, 351,
	281, 425, 355, 350, 339, 317, 470, 340, 341, 331,
	383, 349, 384, 332, 361, 360, 362, 0, 0, 0,
	0, 0, 465, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 596, 0, 0, 600,
	0, 439, 0, 0, 0, 0, 0, 0, 411, 0,
	0, 342, 0, 0, 0, 455, 0, 396, 377, 622,
	0, 0, 394, 347, 424, 385, 430, 413, 438, 390,
	386, 273, 414, 312, 358, 285, 287, 307, 314, 316,
	318, 319, 367, 368, 380, 401, 415, 416, 417, 311,
	295, 395, 296, 329, 297, 274, 303, 301, 304, 403,
	305, 276, 381, 421, 0, 324, 391, 354, 277, 353,
	382, 420, 419, 286, 446, 452, 453, 542, 0, 458,
	623, 624, 625, 467, 472, 473, 474, 476, 477, 478,
	479, 543, 560, 527, 497, 460, 551, 494, 498, 499,
	563, 0, 0, 0, 451, 343, 344, 0, 322, 270,
	271, 618, 308, 373, 565, 598, 599, 490, 0, 552,
	491, 500, 300, 524, 536, 535, 369, 450, 0, 547,
	550, 480, 617, 0, 544, 559, 621, 558, 614, 379,
	0, 400, 556, 503, 0, 548, 522, 0, 549, 518,
	553, 0, 492, 0, 407, 432, 444, 461, 464, 493,
	578, 579, 580, 275, 463, 582, 583, 584, 585, 586,
	587, 588, 581, 435, 525, 502, 528, 443, 505, 504,
	0, 0, 539, 459, 540, 541, 363, 364, 365, 366,
	326, 566, 293, 462, 389, 0, 526, 0, 0, 0,
	0, 0, 0, 0, 0, 531, 532, 529, 626, 0,
	589, 590, 0, 0, 456, 457, 321, 328, 475, 330,
	292, 378, 323, 441, 337, 0, 468, 533, 469, 592,
	595, 593, 594, 370, 333, 334, 404, 338, 348, 392,
	440, 376, 397, 290, 431, 405, 352, 519, 546, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 574, 573, 572, 571, 570,
	569, 568, 567, 0, 0, 516, 418, 302, 264, 298,
	299, 306, 615, 612, 422, 616, 0, 272, 496, 346,
	0, 387, 320, 561, 562, 0, 0, 220, 221, 222,
	223, 224, 225, 226, 227, 265, 228, 229, 230, 231,
	232, 233, 234, 237, 238, 239, 240, 241, 242, 243,
	244, 564, 235, 236, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 256, 257, 258, 0, 0,
	0, 266, 267, 268, 269, 0, 0, 260, 261, 262,
	263, 0, 0, 0, 447, 448, 449, 471, 0, 433,
	495, 613, 0, 0, 0, 0, 0, 0, 0, 545,
	557, 591, 0, 601, 602, 604, 606, 605, 608, 410,
	0, 619, 486, 487, 620, 597, 375, 0, 501, 534,
	523, 607, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 315, 2418, 0, 345, 538, 520, 530,
	521, 506, 507, 508, 515, 325, 509, 510, 511, 481,
	512, 482, 513, 514, 0, 537, 488, 406, 359, 555,
	554, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 209,
	0, 0, 1467, 0, 0, 0, 288, 210, 483, 603,
	485, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 291, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 278, 412, 429, 289, 402, 442, 294,
	409, 284, 374, 398, 0, 0, 280, 427, 408, 356,
	335, 336, 279, 0, 393, 313, 327, 310, 372, 0,
	426, 454, 309, 445, 0, 437, 282, 0, 436, 371,
	423, 428, 357, 351, 281, 425, 355, 350, 339, 317,
	470, 340, 341, 331, 383, 349, 384, 332, 361, 360,
	362, 0, 0, 0, 0, 0, 465, 466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	596, 0, 0, 600, 0, 439, 0, 0, 0, 0,
	0, 0, 411, 0, 0, 342, 0, 0, 0, 455,
	0, 396, 377, 622, 0, 0, 394, 347, 424, 385,
	430, 413, 438, 390, 386, 273, 414, 312, 358, 285,
	287, 307, 314, 316, 318, 319, 367, 368, 380, 401,
	415, 416, 417, 311, 295, 395, 296, 329, 297, 274,
	303, 301, 304, 403, 305, 276, 381, 421, 0, 324,
	391, 354, 277, 353, 382, 420, 419, 286, 446, 452,
	453, 542, 0, 458, 623, 624, 625, 467, 472, 473,
	474, 476, 477, 478, 479, 543, 560, 527, 497, 460,
	551, 494, 498, 499, 563, 0, 0, 0, 451, 343,
	344, 0, 322, 270, 271, 618, 308, 373, 565, 598,
	599, 490, 0, 552, 491, 500, 300, 524, 536, 535,
	369, 450, 0, 547, 550, 480, 617, 0, 544, 559,
	621, 558, 614, 379, 0, 400, 556, 503, 0, 548,
	522, 0, 549, 518, 553, 0, 492, 0, 407, 432,
	444, 461, 464, 493, 578, 579, 580, 275, 463, 582,
	583, 584, 585, 586, 587, 588, 581, 435, 525, 502,
	528, 443, 505, 504, 0, 0, 539, 459, 540, 541,
	363, 364, 365, 366, 326, 566, 293, 462, 389, 0,
	526, 0, 0, 0, 0, 0, 0, 0, 0, 531,
	532, 529, 626, 0, 589, 590, 0, 0, 456, 457,
	321, 328, 475, 330, 292, 378, 323, 441, 337, 0,
	468, 533, 469, 592, 595, 593, 594, 370, 333, 334,
	404, 338, 348, 392, 440, 376, 397, 290, 431, 405,
	352, 519, 546, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 574,
	573, 572, 571, 570, 569, 568, 567, 0, 0, 516,
	418, 302, 264, 298, 299, 306, 615, 612, 422, 616,
	0, 272, 496, 346, 0, 387, 320, 561, 562, 0,
	0, 220, 221, 222, 223, 224, 225, 226, 227, 265,
	228, 229, 230, 231, 232, 233, 234, 237, 238, 239,
	240, 241, 242, 243, 244, 564, 235, 236, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 256,
	257, 258, 0, 0, 0, 266, 267, 268, 269, 0,
	0, 260, 261, 262, 263, 0, 0, 0, 447, 448,
	449, 471, 0, 433, 495, 613, 0, 0, 0, 0,
	0, 0, 0, 545, 557, 591, 0, 601, 602, 604,
	606, 605, 608, 410, 0, 619, 486, 487, 620, 597,
	375, 0, 501, 534, 523, 607, 489, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 633, 315, 0, 0,
	345, 538, 520, 530, 521, 506, 507, 508, 515, 325,
	509, 510, 511, 481, 512, 482, 513, 514, 0, 537,
	488, 406, 359, 555, 554, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 0, 0,
	288, 210, 483, 603, 485, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 291, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 278, 412, 429,
	289, 402, 442, 294, 409, 284, 374, 398, 0, 0,
	280, 427, 408, 356, 335, 336, 279, 0, 393, 313,
	327, 310, 372, 0, 426, 454, 309, 445, 0, 437,
	282, 0, 436, 371, 423, 428, 357, 351, 281, 425,
	355, 350, 339, 317, 470, 340, 341, 331, 383, 349,
	384, 332, 361, 360, 362, 0, 0, 0, 0, 0,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 596, 0, 0, 600, 0, 439,
	0, 632, 0, 0, 0, 0, 411, 0, 0, 342,
	0, 0, 0, 455, 0, 396, 377, 622, 0, 0,
	394, 347, 424, 385, 430, 413, 438, 390, 386, 273,
	414, 312, 358, 285, 287, 307, 314, 316, 318, 319,
	367, 368, 380, 401, 415, 416, 417, 311, 295, 395,
	296, 329, 297, 274, 303, 301, 304, 403, 305, 276,
	381, 421, 0, 324, 391, 354, 277, 353, 382, 420,
	419, 286, 446, 452, 453, 542, 0, 458, 623, 624,
	625, 467, 472, 473, 474, 476, 477, 478, 479, 543,
	560, 527, 497, 460, 551, 494, 498, 499, 563, 0,
	0, 0, 451, 343, 344, 0, 322, 270, 271, 618,
	308, 373, 565, 598, 599, 490, 0, 552, 491, 500,
	300, 524, 536, 535, 369, 450, 0, 547, 550, 480,
	617, 0, 544, 559, 621, 558, 614, 379, 0, 400,
	556, 503, 0, 548, 522, 0, 549, 518, 553, 0,
	492, 0, 407, 432, 444, 461, 464, 493, 578, 579,
	580, 275, 463, 582, 583, 584, 585, 586, 587, 588,
	581, 435, 525, 502, 528, 443, 505, 504, 0, 0,
	539, 459, 540, 541, 363, 364, 365, 366, 326, 566,
	293, 462, 389, 0, 526, 0, 0, 0, 0, 0,
	0, 0, 0, 531, 532, 529, 626, 0, 589, 590,
	0, 0, 456, 457, 321, 328, 475, 330, 292, 378,
	323, 441, 337, 0, 468, 533, 469, 592, 595, 593,
	594, 370, 333, 334, 404, 338, 348, 392, 440, 376,
	397, 290, 431, 405, 352, 519, 546, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 574, 573, 572, 571, 570, 569, 568,
	567, 0, 0, 516, 418, 302, 264, 298, 299, 306,
	615, 612, 422, 616, 0, 272, 496, 346, 0, 387,
	320, 561, 562, 0, 0, 220, 221, 222, 223, 224,
	225, 226, 227, 265, 228, 229, 230, 231, 232, 233,
	234, 237, 238, 239, 240, 241, 242, 243, 244, 564,
	235, 236, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 256, 257, 258, 0, 0, 0, 266,
	267, 268, 269, 0, 0, 260, 261, 262, 263, 0,
	0, 0, 447, 448, 449, 471, 0, 433, 495, 613,
	0, 0, 0, 0, 0, 0, 0, 545, 557, 591,
	0, 601, 602, 604, 606, 605, 608, 410, 0, 619,
	486, 487, 620, 597, 375, 0, 501, 534, 523, 607,
	489, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 315, 0, 0, 345, 538, 520, 530, 521, 506,
	507, 508, 515, 325, 509, 510, 511, 481, 512, 482,
	513, 514, 0, 537, 488, 406, 359, 555, 554, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 209, 813, 0,
	0, 0, 0, 0, 288, 210, 483, 603, 485, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 291,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 278, 412, 429, 289, 402, 442, 294, 409, 284,
	374, 398, 0, 0, 280, 427, 408, 356, 335, 336,
	279, 0, 393, 313, 327, 310, 372, 0, 426, 454,
	309, 445, 0, 437, 282, 0, 436, 371, 423, 428,
	357, 351, 281, 425, 355, 350, 339, 317, 470, 340,
	341, 331, 383, 349, 384, 332, 361, 360, 362, 0,
	0, 0, 0, 0, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 596, 0,
	0, 600, 0, 439, 0, 0, 0, 0, 0, 0,
	411, 0, 0, 342, 0, 0, 0, 455, 0, 396,
	377, 622, 0, 0, 394, 347, 424, 385, 430, 413,
	438, 390, 386, 273, 414, 312, 358, 285, 287, 307,
	314, 316, 318, 319, 367, 368, 380, 401, 415, 416,
	417, 311, 295, 395, 296, 329, 297, 274, 303, 301,
	304, 403, 305, 276, 381, 421, 0, 324, 391, 354,
	277, 353, 382, 420, 419, 286, 446, 452, 453, 542,
	0, 458, 623, 624, 625, 467, 472, 473, 474, 476,
	477, 478, 479, 543, 560, 527, 497, 460, 551, 494,
	498, 499, 563, 0, 0, 0, 451, 343, 344, 0,
	322, 270, 271, 618, 308, 373, 565, 598, 599, 490,
	0, 552, 491, 500, 300, 524, 536, 535, 369, 450,
	0, 547, 550, 480, 617, 0, 544, 559, 621, 558,
	614, 379, 0, 400, 556, 503, 0, 548, 522, 0,
	549, 518, 553, 0, 492, 0, 407, 432, 444, 461,
	464, 493, 578, 579, 580, 275, 463, 582, 583, 584,
	585, 586, 587, 588, 581, 435, 525, 502, 528, 443,
	505, 504, 0, 0, 539, 459, 540, 541, 363, 364,
	365, 366, 326, 566, 293, 462, 389, 0, 526, 0,
	0, 0, 0, 0, 0, 0, 0, 531, 532, 529,
	626, 0, 589, 590, 0, 0, 456, 457, 321, 328,
	475, 330, 292, 378, 323, 441, 337, 0, 468, 533,
	469, 592, 595, 593, 594, 370, 333, 334, 404, 338,
	348, 392, 440, 376, 397, 290, 431, 405, 352, 519,
	546, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 574, 573, 572,
	571, 570, 569, 568, 567, 0, 0, 516, 418, 302,
	264, 298, 299, 306, 615, 612, 422, 616, 0, 272,
	496, 346, 0, 387, 320, 561, 562, 0, 0, 220,
	221, 222, 223, 224, 225, 226, 227, 265, 228, 229,
	230, 231, 232, 233, 234, 237, 238, 239, 240, 241,
	242, 243, 244, 564, 235, 236, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	0, 0, 0, 266, 267, 268, 269, 0, 0, 260,
	261, 262, 263, 0, 0, 0, 447, 448, 449, 471,
	0, 433, 495, 613, 0, 0, 0, 0, 0, 0,
	0, 545, 557, 591, 0, 601, 602, 604, 606, 605,
	608, 410, 0, 619, 486, 487, 620, 597, 375, 0,
	501, 534, 523, 607, 489, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 315, 0, 0, 345, 538,
	520, 530, 521, 506, 507, 508, 515, 325, 509, 510,
	511, 481, 512, 482, 513, 514, 0, 537, 488, 406,
	359, 555, 554, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3825, 0,
	0, 209, 0, 0, 0, 0, 0, 0, 288, 210,
	483, 603, 485, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 291, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 278, 412, 429, 289, 402,
	442, 294, 409, 284, 374, 398, 0, 0, 280, 427,
	408, 356, 335, 336, 279, 0, 393, 313, 327, 310,
	372, 0, 426, 454, 309, 445, 0, 437, 282, 0,
	436, 371, 423, 428, 357, 351, 281, 425, 355, 350,
	339, 317, 470, 340, 341, 331, 383, 349, 384, 332,
	361, 360, 362, 0, 0, 0, 0, 0, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 596, 0, 0, 600, 0, 439, 0, 0,
	0, 0, 0, 0, 411, 0, 0, 342, 0, 0,
	0, 455, 0, 396, 377, 622, 0, 0, 394, 347,
	424, 385, 430, 413, 438, 390, 386, 273, 414, 312,
	358, 285, 287, 307, 314, 316, 318, 319, 367, 368,
	380, 401, 415, 416, 417, 311, 295, 395, 296, 329,
	297, 274, 303, 301, 304, 403, 305, 276, 381, 421,
	0, 324, 391, 354, 277, 353, 382, 420, 419, 286,
	446, 452, 453, 542, 0, 458, 623, 624, 625, 467,
	472, 473, 474, 476, 477, 478, 479, 543, 560, 527,
	497, 460, 551, 494, 498, 499, 563, 0, 0, 0,
	451, 343, 344, 0, 322, 270, 271, 618, 308, 373,
	565, 598, 599, 490, 0, 552, 491, 500, 300, 524,
	536, 535, 369, 450, 0, 547, 550, 480, 617, 0,
	544, 559, 621, 558, 614, 379, 0, 400, 556, 503,
	0, 548, 522, 0, 549, 518, 553, 0, 492, 0,
	407, 432, 444, 461, 464, 493, 578, 579, 580, 275,
	463, 582, 583, 584, 585, 586, 587, 588, 581, 435,
	525, 502, 528, 443, 505, 504, 0, 0, 539, 459,
	540, 541, 363, 364, 365, 366, 326, 566, 293, 462,
	389, 0, 526, 0, 0, 0, 0, 0, 0, 0,
	0, 531, 532, 529, 626, 0, 589, 590, 0, 0,
	456, 457, 321, 328, 475, 330, 292, 378, 323, 441,
	337, 0, 468, 533, 469, 592, 595, 593, 594, 370,
	333, 334, 404, 338, 348, 392, 440, 376, 397, 290,
	431, 405, 352, 519, 546, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 574, 573, 572, 571, 570, 569, 568, 567, 0,
	0, 516, 418, 302, 264, 298, 299, 306, 615, 612,
	422, 616, 0, 272, 496, 346, 0, 387, 320, 561,
	562, 0, 0, 220, 221, 222, 223, 224, 225, 226,
	227, 265, 228, 229, 230, 231, 232, 233, 234, 237,
	238, 239, 240, 241, 242, 243, 244, 564, 235, 236,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
	255, 256, 257, 258, 0, 0, 0, 266, 267, 268,
	269, 0, 0, 260, 261, 262, 263, 0, 0, 0,
	447, 448, 449, 471, 0, 433, 495, 613, 0, 0,
	0, 0, 0, 0, 0, 545, 557, 591, 0, 601,
	602, 604, 606, 605, 608, 410, 0, 619, 486, 487,
	620, 597, 375, 0, 501, 534, 523, 607, 489, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 315,
	0, 0, 345, 538, 520, 530, 521, 506, 507, 508,
	515, 325, 509, 510, 511, 481, 512, 482, 513, 514,
	0, 537, 488, 406, 359, 555, 554, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 209, 0, 0, 3606, 0,
	0, 0, 288, 210, 483, 603, 485, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 291, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 278,
	412, 429, 289, 402, 442, 294, 409, 284, 374, 398,
	0, 0, 280, 427, 408, 356, 335, 336, 279, 0,
	393, 313, 327, 310, 372, 0, 426, 454, 309, 445,
	0, 437, 282, 0, 436, 371, 423, 428, 357, 351,
	281, 425, 355, 350, 339, 317, 470, 340, 341, 331,
	383, 349, 384, 332, 361, 360, 362, 0, 0, 0,
	0, 0, 465, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 596, 0, 0, 600,
	0, 439, 0, 0, 0, 0, 0, 0, 411, 0,
	0, 342, 0, 0, 0, 455, 0, 396, 377, 622,
	0, 0, 394, 347, 424, 385, 430, 413, 438, 390,
	386, 273, 414, 312, 358, 285, 287, 307, 314, 316,
	318, 319, 367, 368, 380, 401, 415, 416, 417, 311,
	295, 395, 296, 329, 297, 274, 303, 301, 304, 403,
	305, 276, 381, 421, 0, 324, 391, 354, 277, 353,
	382, 420, 419, 286, 446, 452, 453, 542, 0, 458,
	623, 624, 625, 467, 472, 473, 474, 476, 477, 478,
	479, 543, 560, 527, 497, 460, 551, 494, 498, 499,
	563, 0, 0, 0, 451, 343, 344, 0, 322, 270,
	271, 618, 308, 373, 565, 598, 599, 490, 0, 552,
	491, 500, 300, 524, 536, 535, 369, 450, 0, 547,
	550, 480, 617, 0, 544, 559, 621, 558, 614, 379,
	0, 400, 556, 503, 0, 548, 522, 0, 549, 518,
	553, 0, 492, 0, 407, 432, 444, 461, 464, 493,
	578, 579, 580, 275, 463, 582, 583, 584, 585, 586,
	587, 588, 581, 435, 525, 502, 528, 443, 505, 504,
	0, 0, 539, 459, 540, 541, 363, 364, 365, 366,
	326, 566, 293, 462, 389, 0, 526, 0, 0, 0,
	0, 0, 0, 0, 0, 531, 532, 529, 626, 0,
	589, 590, 0, 0, 456, 457, 321, 328, 475, 330,
	292, 378, 323, 441, 337, 0, 468, 533, 469, 592,
	595, 593, 594, 370, 333, 334, 404, 338, 348, 392,
	440, 376, 397, 290, 431, 405, 352, 519, 546, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 574, 573, 572, 571, 570,
	569, 568, 567, 0, 0, 516, 418, 302, 264, 298,
	299, 306, 615, 612, 422, 616, 0, 272, 496, 346,
	0, 387, 320, 561, 562, 0, 0, 220, 221, 222,
	223, 224, 225, 226, 227, 265, 228, 229, 230, 231,
	232, 233, 234, 237, 238, 239, 240, 241, 242, 243,
	244, 564, 235, 236, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 256, 257, 258, 0, 0,
	0, 266, 267, 268, 269, 0, 0, 260, 261, 262,
	263, 0, 0, 0, 447, 448, 449, 471, 0, 433,
	495, 613, 0, 0, 0, 0, 0, 0, 0, 545,
	557, 591, 0, 601, 602, 604, 606, 605, 608, 410,
	0, 619, 486, 487, 620, 597, 375, 0, 501, 534,
	523, 607, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 315, 0, 0, 345, 538, 520, 530,
	521, 506, 507, 508, 515, 325, 509, 510, 511, 481,
	512, 482, 513, 514, 0, 537, 488, 406, 359, 555,
	554, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 209,
	0, 0, 0, 0, 0, 0, 288, 210, 483, 603,
	485, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 291, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 278, 412, 429, 289, 402, 442, 294,
	409, 284, 374, 398, 0, 0, 280, 427, 408, 356,
	335, 336, 279, 0, 393, 313, 327, 310, 372, 0,
	426, 454, 309, 445, 0, 437, 282, 0, 436, 371,
	423, 428, 357, 351, 281, 425, 355, 350, 339, 317,
	470, 340, 341, 331, 383, 349, 384, 332, 361, 360,
	362, 0, 0, 0, 0, 0, 465, 466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	596, 0, 0, 600, 0, 439, 0, 0, 0, 3734,
	0, 0, 411, 0, 0, 342, 0, 0, 0, 455,
	0, 396, 377, 622, 0, 0, 394, 347, 424, 385,
	430, 413, 438, 390, 386, 273, 414, 312, 358, 285,
	287, 307, 314, 316, 318, 319, 367, 368, 380, 401,
	415, 416, 417, 311, 295, 395, 296, 329, 297, 274,
	303, 301, 304, 403, 305, 276, 381, 421, 0, 324,
	391, 354, 277, 353, 382, 420, 419, 286, 446, 452,
	453, 542, 0, 458, 623, 624, 625, 467, 472, 473,
	474, 476, 477, 478, 479, 543, 560, 527, 497, 460,
	551, 494, 498, 499, 563, 0, 0, 0, 451, 343,
	344, 0, 322, 270, 271, 618, 308, 373, 565, 598,
	599, 490, 0, 552, 491, 500, 300, 524, 536, 535,
	369, 450, 0, 547, 550, 480, 617, 0, 544, 559,
	621, 558, 614, 379, 0, 400, 556, 503, 0, 548,
	522, 0, 549, 518, 553, 0, 492, 0, 407, 432,
	444, 461, 464, 493, 578, 579, 580, 275, 463, 582,
	583, 584, 585, 586, 587, 588, 581, 435, 525, 502,
	528, 443, 505, 504, 0, 0, 539, 459, 540, 541,
	363, 364, 365, 366, 326, 566, 293, 462, 389, 0,
	526, 0, 0, 0, 0, 0, 0, 0, 0, 531,
	532, 529, 626, 0, 589, 590, 0, 0, 456, 457,
	321, 328, 475, 330, 292, 378, 323, 441, 337, 0,
	468, 533, 469, 592, 595, 593, 594, 370, 333, 334,
	404, 338, 348, 392, 440, 376, 397, 290, 431, 405,
	352, 519, 546, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 574,
	573, 572, 571, 570, 569, 568, 567, 0, 0, 516,
	418, 302, 264, 298, 299, 306, 615, 612, 422, 616,
	0, 272, 496, 346, 0, 387, 320, 561, 562, 0,
	0, 220, 221, 222, 223, 224, 225, 226, 227, 265,
	228, 229, 230, 231, 232, 233, 234, 237, 238, 239,
	240, 241, 242, 243, 244, 564, 235, 236, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 256,
	257, 258, 0, 0, 0, 266, 267, 268, 269, 0,
	0, 260, 261, 262, 263, 0, 0, 0, 447, 448,
	449, 471, 0, 433, 495, 613, 0, 0, 0, 0,
	0, 0, 0, 545, 557, 591, 0, 601, 602, 604,
	606, 605, 608, 410, 0, 619, 486, 487, 620, 597,
	375, 0, 501, 534, 523, 607, 489, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 315, 0, 0,
	345, 538, 520, 530, 521, 506, 507, 508, 515, 325,
	509, 510, 511, 481, 512, 482, 513, 514, 0, 537,
	488, 406, 359, 555, 554, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3453, 0, 0, 209, 0, 0, 0, 0, 0, 0,
	288, 210, 483, 603, 485, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 291, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 278, 412, 429,
	289, 402, 442, 294, 409, 284, 374, 398, 0, 0,
	280, 427, 408, 356, 335, 336, 279, 0, 393, 313,
	327, 310, 372, 0, 426, 454, 309, 445, 0, 437,
	282, 0, 436, 371, 423, 428, 357, 351, 281, 425,
	355, 350, 339, 317, 470, 340, 341, 331, 383, 349,
	384, 332, 361, 360, 362, 0, 0, 0, 0, 0,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 596, 0, 0, 600, 0, 439,
	0, 0, 0, 0, 0, 0, 411, 0, 0, 342,
	0, 0, 0, 455, 0, 396, 377, 622, 0, 0,
	394, 347, 424, 385, 430, 413, 438, 390, 386, 273,
	414, 312, 358, 285, 287, 307, 314, 316, 318, 319,
	367, 368, 380, 401, 415, 416, 417, 311, 295, 395,
	296, 329, 297, 274, 303, 301, 304, 403, 305, 276,
	381, 421, 0, 324, 391, 354, 277, 353, 382, 420,
	419, 286, 446, 452, 453, 542, 0, 458, 623, 624,
	625, 467, 472, 473, 474, 476, 477, 478, 479, 543,
	560, 527, 497, 460, 551, 494, 498, 499, 563, 0,
	0, 0, 451, 343, 344, 0, 322, 270, 271, 618,
	308, 373, 565, 598, 599, 490, 0, 552, 491, 500,
	300, 524, 536, 535, 369, 450, 0, 547, 550, 480,
	617, 0, 544, 559, 621, 558, 614, 379, 0, 400,
	556, 503, 0, 548, 522, 0, 549, 518, 553, 0,
	492, 0, 407, 432, 444, 461, 464, 493, 578, 579,
	580, 275, 463, 582, 583, 584, 585, 586, 587, 588,
	581, 435, 525, 502, 528, 443, 505, 504, 0, 0,
	539, 459, 540, 541, 363, 364, 365, 366, 326, 566,
	293, 462, 389, 0, 526, 0, 0, 0, 0, 0,
	0, 0, 0, 531, 532, 529, 626, 0, 589, 590,
	0, 0, 456, 457, 321, 328, 475, 330, 292, 378,
	323, 441, 337, 0, 468, 533, 469, 592, 595, 593,
	594, 370, 333, 334, 404, 338, 348, 392, 440, 376,
	397, 290, 431, 405, 352, 519, 546, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 574, 573, 572, 571, 570, 569, 568,
	567, 0, 0, 516, 418, 302, 264, 298, 299, 306,
	615, 612, 422, 616, 0, 272, 496, 346, 0, 387,
	320, 561, 562, 0, 0, 220, 221, 222, 223, 224,
	225, 226, 227, 265, 228, 229, 230, 231, 232, 233,
	234, 237, 238, 239, 240, 241, 242, 243, 244, 564,
	235, 236, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 256, 257, 258, 0, 0, 0, 266,
	267, 268, 269, 0, 0, 260, 261, 262, 263, 0,
	0, 0, 447, 448, 449, 471, 0, 433, 495, 613,
	0, 0, 0, 0, 0, 0, 0, 545, 557, 591,
	0, 601, 602, 604, 606, 605, 608, 410, 0, 619,
	486, 487, 620, 597, 375, 0, 501, 534, 523, 607,
	489, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 315, 0, 0, 345, 538, 520, 530, 521, 506,
	507, 508, 515, 325, 509, 510, 511, 481, 512, 482,
	513, 514, 0, 537, 488, 406, 359, 555, 554, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3621, 0, 209, 0, 0,
	0, 0, 0, 0, 288, 210, 483, 603, 485, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 291,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 278, 412, 429, 289, 402, 442, 294, 409, 284,
	374, 398, 0, 0, 280, 427, 408, 356, 335, 336,
	279, 0, 393, 313, 327, 310, 372, 0, 426, 454,
	309, 445, 0, 437, 282, 0, 436, 371, 423, 428,
	357, 351, 281, 425, 355, 350, 339, 317, 470, 340,
	341, 331, 383, 349, 384, 332, 361, 360, 362, 0,
	0, 0, 0, 0, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 596, 0,
	0, 600, 0, 439, 0, 0, 0, 0, 0, 0,
	411, 0, 0, 342, 0, 0, 0, 455, 0, 396,
	377, 622, 0, 0, 394, 347, 424, 385, 430, 413,
	438, 390, 386, 273, 414, 312, 358, 285, 287, 307,
	314, 316, 318, 319, 367, 368, 380, 401, 415, 416,
	417, 311, 295, 395, 296, 329, 297, 274, 303, 301,
	304, 403, 305, 276, 381, 421, 0, 324, 391, 354,
	277, 353, 382, 420, 419, 286, 446, 452, 453, 542,
	0, 458, 623, 624, 625, 467, 472, 473, 474, 476,
	477, 478, 479, 543, 560, 527, 497, 460, 551, 494,
	498, 499, 563, 0, 0, 0, 451, 343, 344, 0,
	322, 270, 271, 618, 308, 373, 565, 598, 599, 490,
	0, 552, 491, 500, 300, 524, 536, 535, 369, 450,
	0, 547, 550, 480, 617, 0, 544, 559, 621, 558,
	614, 379, 0, 400, 556, 503, 0, 548, 522, 0,
	549, 518, 553, 0, 492, 0, 407, 432, 444, 461,
	464, 493, 578, 579, 580, 275, 463, 582, 583, 584,
	585, 586, 587, 588, 581, 435, 525, 502, 528, 443,
	505, 504, 0, 0, 539, 459, 540, 541, 363, 364,
	365, 366, 326, 566, 293, 462, 389, 0, 526, 0,
	0, 0, 0, 0, 0, 0, 0, 531, 532, 529,
	626, 0, 589, 590, 0, 0, 456, 457, 321, 328,
	475, 330, 292, 378, 323, 441, 337, 0, 468, 533,
	469, 592, 595, 593, 594, 370, 333, 334, 404, 338,
	348, 392, 440, 376, 397, 290, 431, 405, 352, 519,
	546, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 574, 573, 572,
	571, 570, 569, 568, 567, 0, 0, 516, 418, 302,
	264, 298, 299, 306, 615, 612, 422, 616, 0, 272,
	496, 346, 0, 387, 320, 561, 562, 0, 0, 220,
	221, 222, 223, 224, 225, 226, 227, 265, 228, 229,
	230, 231, 232, 233, 234, 237, 238, 239, 240, 241,
	242, 243, 244, 564, 235, 236, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	0, 0, 0, 266, 267, 268, 269, 0, 0, 260,
	261, 262, 263, 0, 0, 0, 447, 448, 449, 471,
	0, 433, 495, 613, 0, 0, 0, 0, 0, 0,
	0, 545, 557, 591, 0, 601, 602, 604, 606, 605,
	608, 410, 0, 619, 486, 487, 620, 597, 375, 0,
	501, 534, 523, 607, 489, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 315, 0, 0, 345, 538,
	520, 530, 521, 506, 507, 508, 515, 325, 509, 510,
	511, 481, 512, 482, 513, 514, 0, 537, 488, 406,
	359, 555, 554, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 209, 0, 0, 0, 0, 0, 0, 288, 210,
	483, 603, 485, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 291, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 278, 412, 429, 289, 402,
	442, 294, 409, 284, 374, 398, 0, 0, 280, 427,
	408, 356, 335, 336, 279, 0, 393, 313, 327, 310,
	372, 0, 426, 454, 309, 445, 0, 437, 282, 0,
	436, 371, 423, 428, 357, 351, 281, 425, 355, 350,
	339, 317, 470, 340, 341, 331, 383, 349, 384, 332,
	361, 360, 362, 0, 0, 0, 0, 0, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 596, 0, 0, 600, 0, 439, 0, 0,
	0, 3541, 0, 0, 411, 0, 0, 342, 0, 0,
	0, 455, 0, 396, 377, 622, 0, 0, 394, 347,
	424, 385, 430, 413, 438, 390, 386, 273, 414, 312,
	358, 285, 287, 307, 314, 316, 318, 319, 367, 368,
	380, 401, 415, 416, 417, 311, 295, 395, 296, 329,
	297, 274, 303, 301, 304, 403, 305, 276, 381, 421,
	0, 324, 391, 354, 277, 353, 382, 420, 419, 286,
	446, 452, 453, 542, 0, 458, 623, 624, 625, 467,
	472, 473, 474, 476, 477, 478, 479, 543, 560, 527,
	497, 460, 551, 494, 498, 499, 563, 0, 0, 0,
	451, 343, 344, 0, 322, 270, 271, 618, 308, 373,
	565, 598, 599, 490, 0, 552, 491, 500, 300, 524,
	536, 535, 369, 450, 0, 547, 550, 480, 617, 0,
	544, 559, 621, 558, 614, 379, 0, 400, 556, 503,
	0, 548, 522, 0, 549, 518, 553, 0, 492, 0,
	407, 432, 444, 461, 464, 493, 578, 579, 580, 275,
	463, 582, 583, 584, 585, 586, 587, 588, 581, 435,
	525, 502, 528, 443, 505, 504, 0, 0, 539, 459,
	540, 541, 363, 364, 365, 366, 326, 566, 293, 462,
	389, 0, 526, 0, 0, 0, 0, 0, 0, 0,
	0, 531, 532, 529, 626, 0, 589, 590, 0, 0,
	456, 457, 321, 328, 475, 330, 292, 378, 323, 441,
	337, 0, 468, 533, 469, 592, 595, 593, 594, 370,
	333, 334, 404, 338, 348, 392, 440, 376, 397, 290,
	431, 405, 352, 519, 546, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 574, 573, 572, 571, 570, 569, 568, 567, 0,
	0, 516, 418, 302, 264, 298, 299, 306, 615, 612,
	422, 616, 0, 272, 496, 346, 0, 387, 320, 561,
	562, 0, 0, 220, 221, 222, 223, 224, 225, 226,
	227, 265, 228, 229, 230, 231, 232, 233, 234, 237,
	238, 239, 240, 241, 242, 243, 244, 564, 235, 236,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
	255, 256, 257, 258, 0, 0, 0, 266, 267, 268,
	269, 0, 0, 260, 261, 262, 263, 0, 0, 0,
	447, 448, 449, 471, 0, 433, 495, 613, 0, 0,
	0, 0, 0, 0, 0, 545, 557, 591, 0, 601,
	602, 604, 606, 605, 608, 410, 0, 619, 486, 487,
	620, 597, 375, 0, 501, 534, 523, 607, 489, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 315,
	0, 0, 345, 538, 520, 530, 521, 506, 507, 508,
	515, 325, 509, 510, 511, 481, 512, 482, 513, 514,
	0, 537, 488, 406, 359, 555, 554, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 209, 0, 0, 3066, 0,
	0, 0, 288, 210, 483, 603, 485, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 291, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 278,
	412, 429, 289, 402, 442, 294, 409, 284, 374, 398,
	0, 0, 280, 427, 408, 356, 335, 336, 279, 0,
	393, 313, 327, 310, 372, 0, 426, 454, 309, 445,
	0, 437, 282, 0, 436, 371, 423, 428, 357, 351,
	281, 425, 355, 350, 339, 317, 470, 340, 341, 331,
	383, 349, 384, 332, 361, 360, 362, 0, 0, 0,
	0, 0, 465, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 596, 0, 0, 600,
	0, 439, 0, 0, 0, 0, 0, 0, 411, 0,
	0, 342, 0, 0, 0, 455, 0, 396, 377, 622,
	0, 0, 394, 347, 424, 385, 430, 413, 438, 390,
	386, 273, 414, 312, 358, 285, 287, 307, 314, 316,
	318, 319, 367, 368, 380, 401, 415, 416, 417, 311,
	295, 395, 296, 329, 297, 274, 303, 301, 304, 403,
	305, 276, 381, 421, 0, 324, 391, 354, 277, 353,
	382, 420, 419, 286, 446, 452, 453, 542, 0, 458,
	623, 624, 625, 467, 472, 473, 474, 476, 477, 478,
	479, 543, 560, 527, 497, 460, 551, 494, 498, 499,
	563, 0, 0, 0, 451, 343, 344, 0, 322, 270,
	271, 618, 308, 373, 565, 598, 599, 490, 0, 552,
	491, 500, 300, 524, 536, 535, 369, 450, 0, 547,
	550, 480, 617, 0, 544, 559, 621, 558, 614, 379,
	0, 400, 556, 503, 0, 548, 522, 0, 549, 518,
	553, 0, 492, 0, 407, 432, 444, 461, 464, 493,
	578, 579, 580, 275, 463, 582, 583, 584, 585, 586,
	587, 588, 581, 435, 525, 502, 528, 443, 505, 504,
	0, 0, 539, 459, 540, 541, 363, 364, 365, 366,
	326, 566, 293, 462, 389, 0, 526, 0, 0, 0,
	0, 0, 0, 0, 0, 531, 532, 529, 626, 0,
	589, 590, 0, 0, 456, 457, 321, 328, 475, 330,
	292, 378, 323, 441, 337, 0, 468, 533, 469, 592,
	595, 593, 594, 370, 333, 334, 404, 338, 348, 392,
	440, 376, 397, 290, 431, 405, 352, 519, 546, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 574, 573, 572, 571, 570,
	569, 568, 567, 0, 0, 516, 418, 302, 264, 298,
	299, 306, 615, 612, 422, 616, 0, 272, 496, 346,
	0, 387, 320, 561, 562, 0, 0, 220, 221, 222,
	223, 224, 225, 226, 227, 265, 228, 229, 230, 231,
	232, 233, 234, 237, 238, 239, 240, 241, 242, 243,
	244, 564, 235, 236, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 256, 257, 258, 0, 0,
	0, 266, 267, 268, 269, 0, 0, 260, 261, 262,
	263, 0, 0, 0, 447, 448, 449, 471, 0, 433,
	495, 613, 0, 0, 0, 0, 0, 0, 0, 545,
	557, 591, 0, 601, 602, 604, 606, 605, 608, 410,
	0, 619, 486, 487, 620, 597, 375, 0, 501, 534,
	523, 607, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 315, 0, 0, 345, 538, 520, 530,
	521, 506, 507, 508, 515, 325, 509, 510, 511, 481,
	512, 482, 513, 514, 0, 537, 488, 406, 359, 555,
	554, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 209,
	0, 0, 0, 0, 0, 0, 288, 210, 483, 603,
	485, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 291, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3084, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 278, 412, 429, 289, 402, 442, 294,
	409, 284, 374, 398, 0, 0, 280, 427, 408, 356,
	335, 336, 279, 0, 393, 313, 327, 310, 372, 0,
	426, 454, 309, 445, 0, 437, 282, 0, 436, 371,
	423, 428, 357, 351, 281, 425, 355, 350, 339, 317,
	470, 340, 341, 331, 383, 349, 384, 332, 361, 360,
	362, 0, 0, 0, 0, 0, 465, 466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	596, 0, 0, 600, 0, 439, 0, 0, 0, 0,
	0, 0, 411, 0, 0, 342, 0, 0, 0, 455,
	0, 396, 377, 622, 0, 0, 394, 347, 424, 385,
	430, 413, 438, 390, 386, 273, 414, 312, 358, 285,
	287, 307, 314, 316, 318, 319, 367, 368, 380, 401,
	415, 416, 417, 311, 295, 395, 296, 329, 297, 274,
	303, 301, 304, 403, 305, 276, 381, 421, 0, 324,
	391, 354, 277, 353, 382, 420, 419, 286, 446, 452,
	453, 542, 0, 458, 623, 624, 625, 467, 472, 473,
	474, 476, 477, 478, 479, 543, 560, 527, 497, 460,
	551, 494, 498, 499, 563, 0, 0, 0, 451, 343,
	344, 0, 322, 270, 271, 618, 308, 373, 565, 598,
	599, 490, 0, 552, 491, 500, 300, 524, 536, 535,
	369, 450, 0, 547, 550, 480, 617, 0, 544, 559,
	621, 558, 614, 379, 0, 400, 556, 503, 0, 548,
	522, 0, 549, 518, 553, 0, 492, 0, 407, 432,
	444, 461, 464, 493, 578, 579, 580, 275, 463, 582,
	583, 584, 585, 586, 587, 588, 581, 435, 525, 502,
	528, 443, 505, 504, 0, 0, 539, 459, 540, 541,
	363, 364, 365, 366, 326, 566, 293, 462, 389, 0,
	526, 0, 0, 0, 0, 0, 0, 0, 0, 531,
	532, 529, 626, 0, 589, 590, 0, 0, 456, 457,
	321, 328, 475, 330, 292, 378, 323, 441, 337, 0,
	468, 533, 469, 592, 595, 593, 594, 370, 333, 334,
	404, 338, 348, 392, 440, 376, 397, 290, 431, 405,
	352, 519, 546, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 574,
	573, 572, 571, 570, 569, 568, 567, 0, 0, 516,
	418, 302, 264, 298, 299, 306, 615, 612, 422, 616,
	0, 272, 496, 346, 0, 387, 320, 561, 562, 0,
	0, 220, 221, 222, 223, 224, 225, 226, 227, 265,
	228, 229, 230, 231, 232, 233, 234, 237, 238, 239,
	240, 241, 242, 243, 244, 564, 235, 236, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 256,
	257, 258, 0, 0, 0, 266, 267, 268, 269, 0,
	0, 260, 261, 262, 263, 0, 0, 0, 447, 448,
	449, 471, 0, 433, 495, 613, 0, 0, 0, 0,
	0, 0, 0, 545, 557, 591, 0, 601, 602, 604,
	606, 605, 608, 410, 0, 619, 486, 487, 620, 597,
	375, 0, 501, 534, 523, 607, 489, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 315, 0, 0,
	345, 538, 520, 530, 521, 506, 507, 508, 515, 325,
	509, 510, 511, 481, 512, 482, 513, 514, 0, 537,
	488, 406, 359, 555, 554, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1957, 0, 0, 209, 0, 0, 0, 0, 0, 0,
	288, 210, 483, 603, 485, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 291, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 278, 412, 429,
	289, 402, 442, 294, 409, 284, 374, 398, 0, 0,
	280, 427, 408, 356, 335, 336, 279, 0, 393, 313,
	327, 310, 372, 0, 426, 454, 309, 445, 0, 437,
	282, 0, 436, 371, 423, 428, 357, 351, 281, 425,
	355, 350, 339, 317, 470, 340, 341, 331, 383, 349,
	384, 332, 361, 360, 362, 0, 0, 0, 0, 0,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 596, 0, 0, 600, 0, 439,
	0, 0, 0, 0, 0, 0, 411, 0, 0, 342,
	0, 0, 0, 455, 0, 396, 377, 622, 0, 0,
	394, 347, 424, 385, 430, 413, 438, 390, 386, 273,
	414, 312, 358, 285, 287, 307, 314, 316, 318, 319,
	367, 368, 380, 401, 415, 416, 417, 311, 295, 395,
	296, 329, 297, 274, 303, 301, 304, 403, 305, 276,
	381, 421, 0, 324, 391, 354, 277, 353, 382, 420,
	419, 286, 446, 452, 453, 542, 0, 458, 623, 624,
	625, 467, 472, 473, 474, 476, 477, 478, 479, 543,
	560, 527, 497, 460, 551, 494, 498, 499, 563, 0,
	0, 0, 451, 343, 344, 0, 322, 270, 271, 618,
	308, 373, 565, 598, 599, 490, 0, 552, 491, 500,
	300, 524, 536, 535, 369, 450, 0, 547, 550, 480,
	617, 0, 544, 559, 621, 558, 614, 379, 0, 400,
	556, 503, 0, 548, 522, 0, 549, 518, 553, 0,
	492, 0, 407, 432, 444, 461, 464, 493, 578, 579,
	580, 275, 463, 582, 583, 584, 585, 586, 587, 588,
	581, 435, 525, 502, 528, 443, 505, 504, 0, 0,
	539, 459, 540, 541, 363, 364, 365, 366, 326, 566,
	293, 462, 389, 0, 526, 0, 0, 0, 0, 0,
	0, 0, 0, 531, 532, 529, 626, 0, 589, 590,
	0, 0, 456, 457, 321, 328, 475, 330, 292, 378,
	323, 441, 337, 0, 468, 533, 469, 592, 595, 593,
	594, 370, 333, 334, 404, 338, 348, 392, 440, 376,
	397, 290, 431, 405, 352, 519, 546, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 574, 573, 572, 571, 570, 569, 568,
	567, 0, 0, 516, 418, 302, 264, 298, 299, 306,
	615, 612, 422, 616, 0, 272, 496, 346, 0, 387,
	320, 561, 562, 0, 0, 220, 221, 222, 223, 224,
	225, 226, 227, 265, 228, 229, 230, 231, 232, 233,
	234, 237, 238, 239, 240, 241, 242, 243, 244, 564,
	235, 236, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 256, 257, 258, 0, 0, 0, 266,
	267, 268, 269, 0, 0, 260, 261, 262, 263, 0,
	0, 0, 447, 448, 449, 471, 0, 433, 495, 613,
	0, 0, 0, 0, 0, 0, 0, 545, 557, 591,
	0, 601, 602, 604, 606, 605, 608, 410, 0, 619,
	486, 487, 620, 597, 375, 0, 501, 534, 523, 607,
	489, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 315, 0, 0, 345, 538, 520, 530, 521, 506,
	507, 508, 515, 325, 509, 510, 511, 481, 512, 482,
	513, 514, 0, 537, 488, 406, 359, 555, 554, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 209, 0, 0,
	0, 0, 0, 0, 288, 210, 483, 603, 485, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 291,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3187, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 278, 412, 429, 289, 402, 442, 294, 409, 284,
	374, 398, 0, 0, 280, 427, 408, 356, 335, 336,
	279, 0, 393, 313, 327, 310, 372, 0, 426, 454,
	309, 445, 0, 437, 282, 0, 436, 371, 423, 428,
	357, 351, 281, 425, 355, 350, 339, 317, 470, 340,
	341, 331, 383, 349, 384, 332, 361, 360, 362, 0,
	0, 0, 0, 0, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 596, 0,
	0, 600, 0, 439, 0, 0, 0, 0, 0, 0,
	411, 0, 0, 342, 0, 0, 0, 455, 0, 396,
	377, 622, 0, 0, 394, 347, 424, 385, 430, 413,
	438, 390, 386, 273, 414, 312, 358, 285, 287, 307,
	314, 316, 318, 319, 367, 368, 380, 401, 415, 416,
	417, 311, 295, 395, 296, 329, 297, 274, 303, 301,
	304, 403, 305, 276, 381, 421, 0, 324, 391, 354,
	277, 353, 382, 420, 419, 286, 446, 452, 453, 542,
	0, 458, 623, 624, 625, 467, 472, 473, 474, 476,
	477, 478, 479, 543, 560, 527, 497, 460, 551, 494,
	498, 499, 563, 0, 0, 0, 451, 343, 344, 0,
	322, 270, 271, 618, 308, 373, 565, 598, 599, 490,
	0, 552, 491, 500, 300, 524, 536, 535, 369, 450,
	0, 547, 550, 480, 617, 0, 544, 559, 621, 558,
	614, 379, 0, 400, 556, 503, 0, 548, 522, 0,
	549, 518, 553, 0, 492, 0, 407, 432, 444, 461,
	464, 493, 578, 579, 580, 275, 463, 582, 583, 584,
	585, 586, 587, 588, 581, 435, 525, 502, 528, 443,
	505, 504, 0, 0, 539, 459, 540, 541, 363, 364,
	365, 366, 326, 566, 293, 462, 389, 0, 526, 0,
	0, 0, 0, 0, 0, 0, 0, 531, 532, 529,
	626, 0, 589, 590, 0, 0, 456, 457, 321, 328,
	475, 330, 292, 378, 323, 441, 337, 0, 468, 533,
	469, 592, 595, 593, 594, 370, 333, 334, 404, 338,
	348, 392, 440, 376, 397, 290, 431, 405, 352, 519,
	546, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 574, 573, 572,
	571, 570, 569, 568, 567, 0, 0, 516, 418, 302,
	264, 298, 299, 306, 615, 612, 422, 616, 0, 272,
	496, 346, 0, 387, 320, 561, 562, 0, 0, 220,
	221, 222, 223, 224, 225, 226, 227, 265, 228, 229,
	230, 231, 232, 233, 234, 237, 238, 239, 240, 241,
	242, 243, 244, 564, 235, 236, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	0, 0, 0, 266, 267, 268, 269, 0, 0, 260,
	261, 262, 263, 0, 0, 0, 447, 448, 449, 471,
	0, 433, 495, 613, 0, 0, 0, 0, 0, 0,
	0, 545, 557, 591, 0, 601, 602, 604, 606, 605,
	608, 410, 0, 619, 486, 487, 620, 597, 375, 0,
	501, 534, 523, 607, 489, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 315, 0, 0, 345, 538,
	520, 530, 521, 506, 507, 508, 515, 325, 509, 510,
	511, 481, 512, 482, 513, 514, 0, 537, 488, 406,
	359, 555, 554, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 209, 0, 0, 0, 0, 0, 0, 288, 210,
	483, 603, 485, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 291, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2931,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 278, 412, 429, 289, 402,
	442, 294, 409, 284, 374, 398, 0, 0, 280, 427,
	408, 356, 335, 336, 279, 0, 393, 313, 327, 310,
	372, 0, 426, 454, 309, 445, 0, 437, 282, 0,
	436, 371, 423, 428, 357, 351, 281, 425, 355, 350,
	339, 317, 470, 340, 341, 331, 383, 349, 384, 332,
	361, 360, 362, 0, 0, 0, 0, 0, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 596, 0, 0, 600, 0, 439, 0, 0,
	0, 0, 0, 0, 411, 0, 0, 342, 0, 0,
	0, 455, 0, 396, 377, 622, 0, 0, 394, 347,
	424, 385, 430, 413, 438, 390, 386, 273, 414, 312,
	358, 285, 287, 307, 314, 316, 318, 319, 367, 368,
	380, 401, 415, 416, 417, 311, 295, 395, 296, 329,
	297, 274, 303, 301, 304, 403, 305, 276, 381, 421,
	0, 324, 391, 354, 277, 353, 382, 420, 419, 286,
	446, 452, 453, 542, 0, 458, 623, 624, 625, 467,
	472, 473, 474, 476, 477, 478, 479, 543, 560, 527,
	497, 460, 551, 494, 498, 499, 563, 0, 0, 0,
	451, 343, 344, 0, 322, 270, 271, 618, 308, 373,
	565, 598, 599, 490, 0, 552, 491, 500, 300, 524,
	536, 535, 369, 450, 0, 547, 550, 480, 617, 0,
	544, 559, 621, 558, 614, 379, 0, 400, 556, 503,
	0, 548, 522, 0, 549, 518, 553, 0, 492, 0,
	407, 432, 444, 461, 464, 493, 578, 579, 580, 275,
	463, 582, 583, 584, 585, 586, 587, 588, 581, 435,
	525, 502, 528, 443, 505, 504, 0, 0, 539, 459,
	540, 541, 363, 364, 365, 366, 326, 566, 293, 462,
	389, 0, 526, 0, 0, 0, 0, 0, 0, 0,
	0, 531, 532, 529, 626, 0, 589, 590, 0, 0,
	456, 457, 321, 328, 475, 330, 292, 378, 323, 441,
	337, 0, 468, 533, 469, 592, 595, 593, 594, 370,
	333, 334, 404, 338, 348, 392, 440, 376, 397, 290,
	431, 405, 352, 519, 546, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 574, 573, 572, 571, 570, 569, 568, 567, 0,
	0, 516, 418, 302, 264, 298, 299, 306, 615, 612,
	422, 616, 0, 272, 496, 346, 0, 387, 320, 561,
	562, 0, 0, 220, 221, 222, 223, 224, 225, 226,
	227, 265, 228, 229, 230, 231, 232, 233, 234, 237,
	238, 239, 240, 241, 242, 243, 244, 564, 235, 236,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
	255, 256, 257, 258, 0, 0, 0, 266, 267, 268,
	269, 0, 0, 260, 261, 262, 263, 0, 0, 0,
	447, 448, 449, 471, 0, 433, 495, 613, 0, 0,
	0, 0, 0, 0, 0, 545, 557, 591, 0, 601,
	602, 604, 606, 605, 608, 410, 0, 619, 486, 487,
	620, 597, 375, 0, 501, 534, 523, 607, 489, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 315,
	0, 0, 345, 538, 520, 530, 521, 506, 507, 508,
	515, 325, 509, 510, 511, 481, 512, 482, 513, 514,
	0, 537, 488, 406, 359, 555, 554, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 209, 0, 0, 1467, 0,
	0, 0, 288, 210, 483, 603, 485, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 291, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 278,
	412, 429, 289, 402, 442, 294, 409, 284, 374, 398,
	0, 0, 280, 427, 408, 356, 335, 336, 279, 0,
	393, 313, 327, 310, 372, 0, 426, 454, 309, 445,
	0, 437, 282, 0, 436, 371, 423, 428, 357, 351,
	281, 425, 355, 350, 339, 317, 470, 340, 341, 331,
	383, 349, 384, 332, 361, 360, 362, 0, 0, 0,
	0, 0, 465, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 596, 0, 0, 600,
	0, 439, 0, 0, 0, 0, 0, 0, 411, 0,
	0, 342, 0, 0, 0, 455, 0, 396, 377, 622,
	0, 0, 394, 347, 424, 385, 430, 413, 438, 390,
	386, 273, 414, 312, 358, 285, 287, 307, 314, 316,
	318, 319, 367, 368, 380, 401, 415, 416, 417, 311,
	295, 395, 296, 329, 297, 274, 303, 301, 304, 403,
	305, 276, 381, 421, 0, 324, 391, 354, 277, 353,
	382, 420, 419, 286, 446, 452, 453, 542, 0, 458,
	623, 624, 625, 467, 472, 473, 474, 476, 477, 478,
	479, 543, 560, 527, 497, 460, 551, 494, 498, 499,
	563, 0, 0, 0, 451, 343, 344, 0, 322, 270,
	271, 618, 308, 373, 565, 598, 599, 490, 0, 552,
	491, 500, 300, 524, 536, 535, 369, 450, 0, 547,
	550, 480, 617, 0, 544, 559, 621, 558, 614, 379,
	0, 400, 556, 503, 0, 548, 522, 0, 549, 518,
	553, 0, 492, 0, 407, 432, 444, 461, 464, 493,
	578, 579, 580, 275, 463, 582, 583, 584, 585, 586,
	587, 588, 581, 435, 525, 502, 528, 443, 505, 504,
	0, 0, 539, 459, 540, 541, 363, 364, 365, 366,
	326, 566, 293, 462, 389, 0, 526, 0, 0, 0,
	0, 0, 0, 0, 0, 531, 532, 529, 626, 0,
	589, 590, 0, 0, 456, 457, 321, 328, 475, 330,
	292, 378, 323, 441, 337, 0, 468, 533, 469, 592,
	595, 593, 594, 370, 333, 334, 404, 338, 348, 392,
	440, 376, 397, 290, 431, 405, 352, 519, 546, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 574, 573, 572, 571, 570,
	569, 568, 567, 0, 0, 516, 418, 302, 264, 298,
	299, 306, 615, 612, 422, 616, 0, 272, 496, 346,
	0, 387, 320, 561, 562, 0, 0, 220, 221, 222,
	223, 224, 225, 226, 227, 265, 228, 229, 230, 231,
	232, 233, 234, 237, 238, 239, 240, 241, 242, 243,
	244, 564, 235, 236, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 256, 257, 258, 0, 0,
	0, 266, 267, 268, 269, 0, 0, 260, 261, 262,
	263, 0, 0, 0, 447, 448, 449, 471, 0, 433,
	495, 613, 0, 0, 0, 0, 0, 0, 0, 545,
	557, 591, 0, 601, 602, 604, 606, 605, 608, 410,
	0, 619, 486, 487, 620, 597, 375, 0, 501, 534,
	523, 607, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 315, 0, 0, 345, 538, 520, 530,
	521, 506, 507, 508, 515, 325, 509, 510, 511, 481,
	512, 482, 513, 514, 0, 537, 488, 406, 359, 555,
	554, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 209,
	0, 0, 2399, 0, 0, 0, 288, 210, 483, 603,
	485, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 291, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 278, 412, 429, 289, 402, 442, 294,
	409, 284, 374, 398, 0, 0, 280, 427, 408, 356,
	335, 336, 279, 0, 393, 313, 327, 310, 372, 0,
	426, 454, 309, 445, 0, 437, 282, 0, 436, 371,
	423, 428, 357, 351, 281, 425, 355, 350, 339, 317,
	470, 340, 341, 331, 383, 349, 384, 332, 361, 360,
	362, 0, 0, 0, 0, 0, 465, 466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	596, 0, 0, 600, 0, 439, 0, 0, 0, 0,
	0, 0, 411, 0, 0, 342, 0, 0, 0, 455,
	0, 396, 377, 622, 0, 0, 394, 347, 424, 385,
	430, 413, 438, 390, 386, 273, 414, 312, 358, 285,
	287, 307, 314, 316, 318, 319, 367, 368, 380, 401,
	415, 416, 417, 311, 295, 395, 296, 329, 297, 274,
	303, 301, 304, 403, 305, 276, 381, 421, 0, 324,
	391, 354, 277, 353, 382, 420, 419, 286, 446, 452,
	453, 542, 0, 458, 623, 624, 625, 467, 472, 473,
	474, 476, 477, 478, 479, 543, 560, 527, 497, 460,
	551, 494, 498, 499, 563, 0, 0, 0, 451, 343,
	344, 0, 322, 270, 271, 618, 308, 373, 565, 598,
	599, 490, 0, 552, 491, 500, 300, 524, 536, 535,
	369, 450, 0, 547, 550, 480, 617, 0, 544, 559,
	621, 558, 614, 379, 0, 400, 556, 503, 0, 548,
	522, 0, 549, 518, 553, 0, 492, 0, 407, 432,
	444, 461, 464, 493, 578, 579, 580, 275, 463, 582,
	583, 584, 585, 586, 587, 588, 581, 435, 525, 502,
	528, 443, 505, 504, 0, 0, 539, 459, 540, 541,
	363, 364, 365, 366, 326, 566, 293, 462, 389, 0,
	526, 0, 0, 0, 0, 0, 0, 0, 0, 531,
	532, 529, 626, 0, 589, 590, 0, 0, 456, 457,
	321, 328, 475, 330, 292, 378, 323, 441, 337, 0,
	468, 533, 469, 592, 595, 593, 594, 370, 333, 334,
	404, 338, 348, 392, 440, 376, 397, 290, 431, 405,
	352, 519, 546, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 574,
	573, 572, 571, 570, 569, 568, 567, 0, 0, 516,
	418, 302, 264, 298, 299, 306, 615, 612, 422, 616,
	0, 272, 496, 346, 0, 387, 320, 561, 562, 0,
	0, 220, 221, 222, 223, 224, 225, 226, 227, 265,
	228, 229, 230, 231, 232, 233, 234, 237, 238, 239,
	240, 241, 242, 243, 244, 564, 235, 236, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 256,
	257, 258, 0, 0, 0, 266, 267, 268, 269, 0,
	0, 260, 261, 262, 263, 0, 0, 0, 447, 448,
	449, 471, 0, 433, 495, 613, 0, 0, 0, 0,
	0, 0, 0, 545, 557, 591, 0, 601, 602, 604,
	606, 605, 608, 410, 0, 619, 486, 487, 620, 597,
	375, 0, 501, 534, 523, 607, 489, 0, 0, 2753,
	0, 0, 0, 0, 0, 0, 0, 315, 0, 0,
	345, 538, 520, 530, 521, 506, 507, 508, 515, 325,
	509, 510, 511, 481, 512, 482, 513, 514, 0, 537,
	488, 406, 359, 555, 554, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 0, 0,
	288, 210, 483, 603, 485, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 291, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 278, 412, 429,
	289, 402, 442, 294, 409, 284, 374, 398, 0, 0,
	280, 427, 408, 356, 335, 336, 279, 0, 393, 313,
	327, 310, 372, 0, 426, 454, 309, 445, 0, 437,
	282, 0, 436, 371, 423, 428, 357, 351, 281, 425,
	355, 350, 339, 317, 470, 340, 341, 331, 383, 349,
	384, 332, 361, 360, 362, 0, 0, 0, 0, 0,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 596, 0, 0, 600, 0, 439,
	0, 0, 0, 0, 0, 0, 411, 0, 0, 342,
	0, 0, 0, 455, 0, 396, 377, 622, 0, 0,
	394, 347, 424, 385, 430, 413, 438, 390, 386, 273,
	414, 312, 358, 285, 287, 307, 314, 316, 318, 319,
	367, 368, 380, 401, 415, 416, 417, 311, 295, 395,
	296, 329, 297, 274, 303, 301, 304, 403, 305, 276,
	381, 421, 0, 324, 391, 354, 277, 353, 382, 420,
	419, 286, 446, 452, 453, 542, 0, 458, 623, 624,
	625, 467, 472, 473, 474, 476, 477, 478, 479, 543,
	560, 527, 497, 460, 551, 494, 498, 499, 563, 0,
	0, 0, 451, 343, 344, 0, 322, 270, 271, 618,
	308, 373, 565, 598, 599, 490, 0, 552, 491, 500,
	300, 524, 536, 535, 369, 450, 0, 547, 550, 480,
	617, 0, 544, 559, 621, 558, 614, 379, 0, 400,
	556, 503, 0, 548, 522, 0, 549, 518, 553, 0,
	492, 0, 407, 432, 444, 461, 464, 493, 578, 579,
	580, 275, 463, 582, 583, 584, 585, 586, 587, 588,
	581, 435, 525, 502, 528, 443, 505, 504, 0, 0,
	539, 459, 540, 541, 363, 364, 365, 366, 326, 566,
	293, 462, 389, 0, 526, 0, 0, 0, 0, 0,
	0, 0, 0, 531, 532, 529, 626, 0, 589, 590,
	0, 0, 456, 457, 321, 328, 475, 330, 292, 378,
	323, 441, 337, 0, 468, 533, 469, 592, 595, 593,
	594, 370, 333, 334, 404, 338, 348, 392, 440, 376,
	397, 290, 431, 405, 352, 519, 546, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 574, 573, 572, 571, 570, 569, 568,
	567, 0, 0, 516, 418, 302, 264, 298, 299, 306,
	615, 612, 422, 616, 0, 272, 496, 346, 0, 387,
	320, 561, 562, 0, 0, 220, 221, 222, 223, 224,
	225, 226, 227, 265, 228, 229, 230, 231, 232, 233,
	234, 237, 238, 239, 240, 241, 242, 243, 244, 564,
	235, 236, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 256, 257, 258, 0, 0, 0, 266,
	267, 268, 269, 0, 0, 260, 261, 262, 263, 0,
	0, 0, 447, 448, 449, 471, 0, 433, 495, 613,
	0, 0, 0, 0, 0, 0, 0, 545, 557, 591,
	0, 601, 602, 604, 606, 605, 608, 410, 0, 619,
	486, 487, 620, 597, 375, 0, 501, 534, 523, 607,
	489, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 315, 0, 0, 345, 538, 520, 530, 521, 506,
	507, 508, 515, 325, 509, 510, 511, 481, 512, 482,
	513, 514, 0, 537, 488, 406, 359, 555, 554, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 209, 0, 0,
	0, 0, 0, 0, 288, 210, 483, 603, 485, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 291,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2096, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 278, 412, 429, 289, 402, 442, 294, 409, 284,
	374, 398, 0, 0, 280, 427, 408, 356, 335, 336,
	279, 0, 393, 313, 327, 310, 372, 0, 426, 454,
	309, 445, 0, 437, 282, 0, 436, 371, 423, 428,
	357, 351, 281, 425, 355, 350, 339, 317, 470, 340,
	341, 331, 383, 349, 384, 332, 361, 360, 362, 0,
	0, 0, 0, 0, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 596, 0,
	0, 600, 0, 439, 0, 0, 0, 0, 0, 0,
	411, 0, 0, 342, 0, 0, 0, 455, 0, 396,
	377, 622, 0, 0, 394, 347, 424, 385, 430, 413,
	438, 390, 386, 273, 414, 312, 358, 285, 287, 307,
	314, 316, 318, 319, 367, 368, 380, 401, 415, 416,
	417, 311, 295, 395, 296, 329, 297, 274, 303, 301,
	304, 403, 305, 276, 381, 421, 0, 324, 391, 354,
	277, 353, 382, 420, 419, 286, 446, 452, 453, 542,
	0, 458, 623, 624, 625, 467, 472, 473, 474, 476,
	477, 478, 479, 543, 560, 527, 497, 460, 551, 494,
	498, 499, 563, 0, 0, 0, 451, 343, 344, 0,
	322, 270, 271, 618, 308, 373, 565, 598, 599, 490,
	0, 552, 491, 500, 300, 524, 536, 535, 369, 450,
	0, 547, 550, 480, 617, 0, 544, 559, 621, 558,
	614, 379, 0, 400, 556, 503, 0, 548, 522, 0,
	549, 518, 553, 0, 492, 0, 407, 432, 444, 461,
	464, 493, 578, 579, 580, 275, 463, 582, 583, 584,
	585, 586, 587, 588, 581, 435, 525, 502, 528, 443,
	505, 504, 0, 0, 539, 459, 540, 541, 363, 364,
	365, 366, 326, 566, 293, 462, 389, 0, 526, 0,
	0, 0, 0, 0, 0, 0, 0, 531, 532, 529,
	626, 0, 589, 590, 0, 0, 456, 457, 321, 328,
	475, 330, 292, 378, 323, 441, 337, 0, 468, 533,
	469, 592, 595, 593, 594, 370, 333, 334, 404, 338,
	348, 392, 440, 376, 397, 290, 431, 405, 352, 519,
	546, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 574, 573, 572,
	571, 570, 569, 568, 567, 0, 0, 516, 418, 302,
	264, 298, 299, 306, 615, 612, 422, 616, 0, 272,
	496, 346, 0, 387, 320, 561, 562, 0, 0, 220,
	221, 222, 223, 224, 225, 226, 227, 265, 228, 229,
	230, 231, 232, 233, 234, 237, 238, 239, 240, 241,
	242, 243, 244, 564, 235, 236, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	0, 0, 0, 266, 267, 268, 269, 0, 0, 260,
	261, 262, 263, 0, 0, 0, 447, 448, 449, 471,
	0, 433, 495, 613, 0, 0, 0, 0, 0, 0,
	0, 545, 557, 591, 0, 601, 602, 604, 606, 605,
	608, 410, 0, 619, 486, 487, 620, 597, 375, 0,
	501, 534, 523, 607, 489, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 315, 0, 0, 345, 538,
	520, 530, 521, 506, 507, 508, 515, 325, 509, 510,
	511, 481, 512, 482, 513, 514, 0, 537, 488, 406,
	359, 555, 554, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 209, 0, 0, 2515, 0, 0, 0, 288, 210,
	483, 603, 485, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 291, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 278, 412, 429, 289, 402,
	442, 294, 409, 284, 374, 398, 0, 0, 280, 427,
	408, 356, 335, 336, 279, 0, 393, 313, 327, 310,
	372, 0, 426, 454, 309, 445, 0, 437, 282, 0,
	436, 371, 423, 428, 357, 351, 281, 425, 355, 350,
	339, 317, 470, 340, 341, 331, 383, 349, 384, 332,
	361, 360, 362, 0, 0, 0, 0, 0, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 596, 0, 0, 600, 0, 439, 0, 0,
	0, 0, 0, 0, 411, 0, 0, 342, 0, 0,
	0, 455, 0, 396, 377, 622, 0, 0, 394, 347,
	424, 385, 430, 413, 438, 390, 386, 273, 414, 312,
	358, 285, 287, 307, 314, 316, 318, 319, 367, 368,
	380, 401, 415, 416, 417, 311, 295, 395, 296, 329,
	297, 274, 303, 301, 304, 403, 305, 276, 381, 421,
	0, 324, 391, 354, 277, 353, 382, 420, 419, 286,
	446, 452, 453, 542, 0, 458, 623, 624, 625, 467,
	472, 473, 474, 476, 477, 478, 479, 543, 560, 527,
	497, 460, 551, 494, 498, 499, 563, 0, 0, 0,
	451, 343, 344, 0, 322, 270, 271, 618, 308, 373,
	565, 598, 599, 490, 0, 552, 491, 500, 300, 524,
	536, 535, 369, 450, 0, 547, 550, 480, 617, 0,
	544, 559, 621, 558, 614, 379, 0, 400, 556, 503,
	0, 548, 522, 0, 549, 518, 553, 0, 492, 0,
	407, 432, 444, 461, 464, 493, 578, 579, 580, 275,
	463, 582, 583, 584, 585, 586, 587, 588, 581, 435,
	525, 502, 528, 443, 505, 504, 0, 0, 539, 459,
	540, 541, 363, 364, 365, 366, 326, 566, 293, 462,
	389, 0, 526, 0, 0, 0, 0, 0, 0, 0,
	0, 531, 532, 529, 626, 0, 589, 590, 0, 0,
	456, 457, 321, 328, 475, 330, 292, 378, 323, 441,
	337, 0, 468, 533, 469, 592, 595, 593, 594, 370,
	333, 334, 404, 338, 348, 392, 440, 376, 397, 290,
	431, 405, 352, 519, 546, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 574, 573, 572, 571, 570, 569, 568, 567, 0,
	0, 516, 418, 302, 264, 298, 299, 306, 615, 612,
	422, 616, 0, 272, 496, 346, 0, 387, 320, 561,
	562, 0, 0, 220, 221, 222, 223, 224, 225, 226,
	227, 265, 228, 229, 230, 231, 232, 233, 234, 237,
	238, 239, 240, 241, 242, 243, 244, 564, 235, 236,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
	255, 256, 257, 258, 0, 0, 0, 266, 267, 268,
	269, 0, 0, 260, 261, 262, 263, 0, 0, 0,
	447, 448, 449, 471, 0, 433, 495, 613, 0, 0,
	0, 0, 0, 0, 0, 545, 557, 591, 0, 601,
	602, 604, 606, 605, 608, 410, 0, 619, 486, 487,
	620, 597, 375, 0, 501, 534, 523, 607, 489, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 315,
	0, 0, 345, 538, 520, 530, 521, 506, 507, 508,
	515, 325, 509, 510, 511, 481, 512, 482, 513, 514,
	0, 537, 488, 406, 359, 555, 554, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 209, 0, 0, 0, 0,
	0, 0, 288, 210, 483, 603, 485, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 291, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 278,
	412, 429, 289, 402, 442, 294, 409, 284, 374, 398,
	0, 0, 280, 427, 408, 356, 335, 336, 279, 0,
	393, 313, 327, 310, 372, 0, 426, 454, 309, 445,
	0, 437, 282, 0, 436, 371, 423, 428, 357, 351,
	281, 425, 355, 350, 339, 317, 470, 340, 341, 331,
	383, 349, 384, 332, 361, 360, 362, 0, 0, 0,
	0, 0, 465, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 596, 0, 0, 600,
	0, 439, 0, 0, 0, 0, 0, 0, 411, 0,
	0, 342, 0, 0, 0, 455, 0, 396, 377, 622,
	0, 0, 394, 347, 424, 385, 430, 413, 438, 390,
	386, 273, 414, 312, 358, 285, 287, 307, 314, 316,
	318, 319, 367, 368, 380, 401, 415, 416, 417, 311,
	295, 395, 296, 329, 297, 274, 303, 301, 304, 403,
	305, 276, 381, 421, 0, 324, 391, 354, 277, 353,
	382, 420, 419, 286, 446, 452, 453, 542, 0, 458,
	623, 624, 625, 467, 472, 473, 474, 476, 477, 478,
	479, 543, 560, 527, 497, 460, 551, 494, 498, 499,
	563, 0, 0, 0, 451, 343, 344, 0, 322, 270,
	271, 618, 308, 373, 565, 598, 599, 490, 0, 552,
	491, 500, 300, 524, 536, 535, 369, 450, 0, 547,
	550, 480, 617, 0, 544, 559, 621, 558, 614, 379,
	0, 400, 556, 503, 0, 548, 522, 0, 549, 518,
	553, 0, 492, 0, 407, 432, 444, 461, 464, 493,
	578, 579, 580, 275, 463, 582, 583, 584, 585, 586,
	587, 588, 581, 435, 525, 502, 528, 443, 505, 504,
	0, 0, 539, 459, 540, 541, 363, 364, 365, 366,
	326, 566, 293, 462, 389, 0, 526, 0, 0, 0,
	0, 0, 0, 0, 0, 531, 532, 529, 626, 0,
	589, 590, 0, 0, 456, 457, 321, 328, 475, 330,
	292, 378, 323, 441, 337, 0, 468, 533, 469, 592,
	595, 593, 594, 370, 333, 334, 404, 338, 348, 392,
	440, 376, 397, 290, 431, 405, 352, 519, 546, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 574, 573, 572, 571, 570,
	569, 568, 567, 0, 0, 516, 418, 302, 264, 298,
	299, 306, 615, 612, 422, 616, 0, 272, 496, 346,
	0, 387, 320, 561, 562, 0, 0, 220, 221, 222,
	223, 224, 225, 226, 227, 265, 228, 229, 230, 231,
	232, 233, 234, 237, 238, 239, 240, 241, 242, 243,
	244, 564, 235, 236, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 256, 257, 258, 0, 0,
	0, 266, 267, 268, 269, 0, 0, 260, 261, 262,
	263, 0, 0, 0, 447, 448, 449, 471, 0, 433,
	495, 613, 0, 0, 0, 0, 0, 0, 0, 545,
	557, 591, 0, 601, 602, 604, 606, 605, 608, 410,
	0, 619, 486, 487, 620, 597, 375, 0, 501, 534,
	523, 607, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 315, 0, 0, 345, 538, 520, 530,
	521, 506, 507, 508, 515, 325, 509, 510, 511, 481,
	512, 482, 513, 514, 0, 537, 488, 406, 359, 555,
	554, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 209,
	0, 0, 2474, 0, 0, 0, 288, 210, 483, 603,
	485, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 291, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 278, 412, 429, 289, 402, 442, 294,
	409, 284, 374, 398, 0, 0, 280, 427, 408, 356,
	335, 336, 279, 0, 393, 313, 327, 310, 372, 0,
	426, 454, 309, 445, 0, 437, 282, 0, 436, 371,
	423, 428, 357, 351, 281, 425, 355, 350, 339, 317,
	470, 340, 341, 331, 383, 349, 384, 332, 361, 360,
	362, 0, 0, 0, 0, 0, 465, 466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	596, 0, 0, 600, 0, 439, 0, 0, 0, 0,
	0, 0, 411, 0, 0, 342, 0, 0, 0, 455,
	0, 396, 377, 622, 0, 0, 394, 347, 424, 385,
	430, 413, 438, 390, 386, 273, 414, 312, 358, 285,
	287, 307, 314, 316, 318, 319, 367, 368, 380, 401,
	415, 416, 417, 311, 295, 395, 296, 329, 297, 274,
	303, 301, 304, 403, 305, 276, 381, 421, 0, 324,
	391, 354, 277, 353, 382, 420, 419, 286, 446, 452,
	453, 542, 0, 458, 623, 624, 625, 467, 472, 473,
	474, 476, 477, 478, 479, 543, 560, 527, 497, 460,
	551, 494, 498, 499, 563, 0, 0, 0, 451, 343,
	344, 0, 322, 270, 271, 618, 308, 373, 565, 598,
	599, 490, 0, 552, 491, 500, 300, 524, 536, 535,
	369, 450, 0, 547, 550, 480, 617, 0, 544, 559,
	621, 558, 614, 379, 0, 400, 556, 503, 0, 548,
	522, 0, 549, 518, 553, 0, 492, 0, 407, 432,
	444, 461, 464, 493, 578, 579, 580, 275, 463, 582,
	583, 584, 585, 586, 587, 588, 581, 435, 525, 502,
	528, 443, 505, 504, 0, 0, 539, 459, 540, 541,
	363, 364, 365, 366, 326, 566, 293, 462, 389, 0,
	526, 0, 0, 0, 0, 0, 0, 0, 0, 531,
	532, 529, 626, 0, 589, 590, 0, 0, 456, 457,
	321, 328, 475, 330, 292, 378, 323, 441, 337, 0,
	468, 533, 469, 592, 595, 593, 594, 370, 333, 334,
	404, 338, 348, 392, 440, 376, 397, 290, 431, 405,
	352, 519, 546, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 574,
	573, 572, 571, 570, 569, 568, 567, 0, 0, 516,
	418, 302, 264, 298, 299, 306, 615, 612, 422, 616,
	0, 272, 496, 346, 0, 387, 320, 561, 562, 0,
	0, 220, 221, 222, 223, 224, 225, 226, 227, 265,
	228, 229, 230, 231, 232, 233, 234, 237, 238, 239,
	240, 241, 242, 243, 244, 564, 235, 236, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 256,
	257, 258, 0, 0, 0, 266, 267, 268, 269, 0,
	0, 260, 261, 262, 263, 0, 0, 0, 447, 448,
	449, 471, 0, 433, 495, 613, 0, 0, 0, 0,
	0, 0, 0, 545, 557, 591, 0, 601, 602, 604,
	606, 605, 608, 410, 2257, 619, 486, 487, 620, 597,
	375, 0, 501, 534, 523, 607, 489, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 315, 0, 0,
	345, 538, 520, 530, 521, 506, 507, 508, 515, 325,
	509, 510, 511, 481, 512, 482, 513, 514, 0, 537,
	488, 406, 359, 555, 554, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 0, 0,
	288, 210, 483, 603, 485, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 291, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 278, 412, 429,
	289, 402, 442, 294, 409, 284, 374, 398, 0, 0,
	280, 427, 408, 356, 335, 336, 279, 0, 393, 313,
	327, 310, 372, 0, 426, 454, 309, 445, 0, 437,
	282, 0, 436, 371, 423, 428, 357, 351, 281, 425,
	355, 350, 339, 317, 470, 340, 341, 331, 383, 349,
	384, 332, 361, 360, 362, 0, 0, 0, 0, 0,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 596, 0, 0, 600, 0, 439,
	0, 0, 0, 0, 0, 0, 411, 0, 0, 342,
	0, 0, 0, 455, 0, 396, 377, 622, 0, 0,
	394, 347, 424, 385, 430, 413, 438, 390, 386, 273,
	414, 312, 358, 285, 287, 307, 314, 316, 318, 319,
	367, 368, 380, 401, 415, 416, 417, 311, 295, 395,
	296, 329, 297, 274, 303, 301, 304, 403, 305, 276,
	381, 421, 0, 324, 391, 354, 277, 353, 382, 420,
	419, 286, 446, 452, 453, 542, 0, 458, 623, 624,
	625, 467, 472, 473, 474, 476, 477, 478, 479, 543,
	560, 527, 497, 460, 551, 494, 498, 499, 563, 0,
	0, 0, 451, 343, 344, 0, 322, 270, 271, 618,
	308, 373, 565, 598, 599, 490, 0, 552, 491, 500,
	300, 524, 536, 535, 369, 450, 0, 547, 550, 480,
	617, 0, 544, 559, 621, 558, 614, 379, 0, 400,
	556, 503, 0, 548, 522, 0, 549, 518, 553, 0,
	492, 0, 407, 432, 444, 461, 464, 493, 578, 579,
	580, 275, 463, 582, 583, 584, 585, 586, 587, 588,
	581, 435, 525, 502, 528, 443, 505, 504, 0, 0,
	539, 459, 540, 541, 363, 364, 365, 366, 326, 566,
	293, 462, 389, 0, 526, 0, 0, 0, 0, 0,
	0, 0, 0, 531, 532, 529, 626, 0, 589, 590,
	0, 0, 456, 457, 321, 328, 475, 330, 292, 378,
	323, 441, 337, 0, 468, 533, 469, 592, 595, 593,
	594, 370, 333, 334, 404, 338, 348, 392, 440, 376,
	397, 290, 431, 405, 352, 519, 546, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 574, 573, 572, 571, 570, 569, 568,
	567, 0, 0, 516, 418, 302, 264, 298, 299, 306,
	615, 612, 422, 616, 0, 272, 496, 346, 0, 387,
	320, 561, 562, 0, 0, 220, 221, 222, 223, 224,
	225, 226, 227, 265, 228, 229, 230, 231, 232, 233,
	234, 237, 238, 239, 240, 241, 242, 243, 244, 564,
	235, 236, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 256, 257, 258, 0, 0, 0, 266,
	267, 268, 269, 0, 0, 260, 261, 262, 263, 0,
	0, 0, 447, 448, 449, 471, 0, 433, 495, 613,
	0, 0, 0, 0, 0, 0, 0, 545, 557, 591,
	0, 601, 602, 604, 606, 605, 608, 410, 0, 619,
	486, 487, 620, 597, 375, 0, 501, 534, 523, 607,
	489, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 315, 0, 0, 345, 538, 520, 530, 521, 506,
	507, 508, 515, 325, 509, 510, 511, 481, 512, 482,
	513, 514, 0, 537, 488, 406, 359, 555, 554, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 209, 0, 0,
	0, 1815, 0, 0, 288, 210, 483, 603, 485, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 291,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 278, 412, 429, 289, 402, 442, 294, 409, 284,
	374, 398, 0, 0, 280, 427, 408, 356, 335, 336,
	279, 0, 393, 313, 327, 310, 372, 0, 426, 454,
	309, 445, 0, 437, 282, 0, 436, 371, 423, 428,
	357, 351, 281, 425, 355, 350, 339, 317, 470, 340,
	341, 331, 383, 349, 384, 332, 361, 360, 362, 0,
	0, 0, 0, 0, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 596, 0,
	0, 600, 0, 439, 0, 0, 0, 0, 0, 0,
	411, 0, 0, 342, 0, 0, 0, 455, 0, 396,
	377, 622, 0, 0, 394, 347, 424, 385, 430, 413,
	438, 390, 386, 273, 414, 312, 358, 285, 287, 307,
	314, 316, 318, 319, 367, 368, 380, 401, 415, 416,
	417, 311, 295, 395, 296, 329, 297, 274, 303, 301,
	304, 403, 305, 276, 381, 421, 0, 324, 391, 354,
	277, 353, 382, 420, 419, 286, 446, 452, 453, 542,
	0, 458, 623, 624, 625, 467, 472, 473, 474, 476,
	477, 478, 479, 543, 560, 527, 497, 460, 551, 494,
	498, 499, 563, 0, 0, 0, 451, 343, 344, 0,
	322, 270, 271, 618, 308, 373, 565, 598, 599, 490,
	0, 552, 491, 500, 300, 524, 536, 535, 369, 450,
	0, 547, 550, 480, 617, 0, 544, 559, 621, 558,
	614, 379, 0, 400, 556, 503, 0, 548, 522, 0,
	549, 518, 553, 0, 492, 0, 407, 432, 444, 461,
	464, 493, 578, 579, 580, 275, 463, 582, 583, 584,
	585, 586, 587, 588, 581, 435, 525, 502, 528, 443,
	505, 504, 0, 0, 539, 459, 540, 541, 363, 364,
	365, 366, 326, 566, 293, 462, 389, 0, 526, 0,
	0, 0, 0, 0, 0, 0, 0, 531, 532, 529,
	626, 0, 589, 590, 0, 0, 456, 457, 321, 328,
	475, 330, 292, 378, 323, 441, 337, 0, 468, 533,
	469, 592, 595, 593, 594, 370, 333, 334, 404, 338,
	348, 392, 440, 376, 397, 290, 431, 405, 352, 519,
	546, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 574, 573, 572,
	571, 570, 569, 568, 567, 0, 0, 516, 418, 302,
	264, 298, 299, 306, 615, 612, 422, 616, 0, 272,
	496, 346, 0, 387, 320, 561, 562, 0, 0, 220,
	221, 222, 223, 224, 225, 226, 227, 265, 228, 229,
	230, 231, 232, 233, 234, 237, 238, 239, 240, 241,
	242, 243, 244, 564, 235, 236, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	0, 0, 0, 266, 267, 268, 269, 0, 0, 260,
	261, 262, 263, 0, 0, 0, 447, 448, 449, 471,
	0, 433, 495, 613, 0, 0, 0, 0, 0, 0,
	0, 545, 557, 591, 0, 601, 602, 604, 606, 605,
	608, 410, 0, 619, 486, 487, 620, 597, 375, 0,
	501, 534, 523, 607, 489, 0, 1943, 0, 0, 0,
	0, 0, 0, 0, 0, 315, 0, 0, 345, 538,
	520, 530, 521, 506, 507, 508, 515, 325, 509, 510,
	511, 481, 512, 482, 513, 514, 0, 537, 488, 406,
	359, 555, 554, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 209, 0, 0, 0, 0, 0, 0, 288, 210,
	483, 603, 485, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 291, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 278, 412, 429, 289, 402,
	442, 294, 409, 284, 374, 398, 0, 0, 280, 427,
	408, 356, 335, 336, 279, 0, 393, 313, 327, 310,
	372, 0, 426, 454, 309, 445, 0, 437, 282, 0,
	436, 371, 423, 428, 357, 351, 281, 425, 355, 350,
	339, 317, 470, 340, 341, 331, 383, 349, 384, 332,
	361, 360, 362, 0, 0, 0, 0, 0, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 596, 0, 0, 600, 0, 439, 0, 0,
	0, 0, 0, 0, 411, 0, 0, 342, 0, 0,
	0, 455, 0, 396, 377, 622, 0, 0, 394, 347,
	424, 385, 430, 413, 438, 390, 386, 273, 414, 312,
	358, 285, 287, 307, 314, 316, 318, 319, 367, 368,
	380, 401, 415, 416, 417, 311, 295, 395, 296, 329,
	297, 274, 303, 301, 304, 403, 305, 276, 381, 421,
	0, 324, 391, 354, 277, 353, 382, 420, 419, 286,
	446, 452, 453, 542, 0, 458, 623, 624, 625, 467,
	472, 473, 474, 476, 477, 478, 479, 543, 560, 527,
	497, 460, 551, 494, 498, 499, 563, 0, 0, 0,
	451, 343, 344, 0, 322, 270, 271, 618, 308, 373,
	565, 598, 599, 490, 0, 552, 491, 500, 300, 524,
	536, 535, 369, 450, 0, 547, 550, 480, 617, 0,
	544, 559, 621, 558, 614, 379, 0, 400, 556, 503,
	0, 548, 522, 0, 549, 518, 553, 0, 492, 0,
	407, 432, 444, 461, 464, 493, 578, 579, 580, 275,
	463, 582, 583, 584, 585, 586, 587, 588, 581, 435,
	525, 502, 528, 443, 505, 504, 0, 0, 539, 459,
	540, 541, 363, 364, 365, 366, 326, 566, 293, 462,
	389, 0, 526, 0, 0, 0, 0, 0, 0, 0,
	0, 531, 532, 529, 626, 0, 589, 590, 0, 0,
	456, 457, 321, 328, 475, 330, 292, 378, 323, 441,
	337, 0, 468, 533, 469, 592, 595, 593, 594, 370,
	333, 334, 404, 338, 348, 392, 440, 376, 397, 290,
	431, 405, 352, 519, 546, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 574, 573, 572, 571, 570, 569, 568, 567, 0,
	0, 516, 418, 302, 264, 298, 299, 306, 615, 612,
	422, 616, 0, 272, 496, 346, 0, 387, 320, 561,
	562, 0, 0, 220, 221, 222, 223, 224, 225, 226,
	227, 265, 228, 229, 230, 231, 232, 233, 234, 237,
	238, 239, 240, 241, 242, 243, 244, 564, 235, 236,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
	255, 256, 257, 258, 0, 0, 0, 266, 267, 268,
	269, 0, 0, 260, 261, 262, 263, 0, 0, 0,
	447, 448, 449, 471, 0, 433, 495, 613, 0, 0,
	0, 0, 0, 0, 0, 545, 557, 591, 0, 601,
	602, 604, 606, 605, 608, 410, 0, 619, 486, 487,
	620, 597, 375, 0, 501, 534, 523, 607, 489, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 315,
	0, 0, 345, 538, 520, 530, 521, 506, 507, 508,
	515, 325, 509, 510, 511, 481, 512, 482, 513, 514,
	0, 537, 488, 406, 359, 555, 554, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 209, 0, 0, 1467, 0,
	0, 0, 288, 210, 483, 603, 485, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 291, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 278,
	412, 429, 289, 402, 442, 294, 409, 284, 374, 398,
	0, 0, 280, 427, 408, 356, 335, 336, 279, 0,
	393, 313, 327, 310, 372, 0, 426, 454, 309, 445,
	0, 437, 282, 0, 436, 371, 423, 428, 357, 351,
	281, 425, 355, 350, 339, 317, 470, 340, 341, 331,
	383, 349, 384, 332, 361, 360, 362, 0, 0, 0,
	0, 0, 465, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 596, 0, 0, 600,
	0, 439, 0, 0, 0, 0, 0, 0, 411, 0,
	0, 342, 0, 0, 0, 455, 0, 396, 377, 622,
	0, 0, 394, 347, 424, 385, 430, 413, 438, 1848,
	386, 273, 414, 312, 358, 285, 287, 307, 314, 316,
	318, 319, 367, 368, 380, 401, 415, 416, 417, 311,
	295, 395, 296, 329, 297, 274, 303, 301, 304, 403,
	305, 276, 381, 421, 0, 324, 391, 354, 277, 353,
	382, 420, 419, 286, 446, 452, 453, 542, 0, 458,
	623, 624, 625, 467, 472, 473, 474, 476, 477, 478,
	479, 543, 560, 527, 497, 460, 551, 494, 498, 499,
	563, 0, 0, 0, 451, 343, 344, 0, 322, 270,
	271, 618, 308, 373, 565, 598, 599, 490, 0, 552,
	491, 500, 300, 524, 536, 535, 369, 450, 0, 547,
	550, 480, 617, 0, 544, 559, 621, 558, 614, 379,
	0, 400, 556, 503, 0, 548, 522, 0, 549, 518,
	553, 0, 492, 0, 407, 432, 444, 461, 464, 493,
	578, 579, 580, 275, 463, 582, 583, 584, 585, 586,
	587, 588, 581, 435, 525, 502, 528, 443, 505, 504,
	0, 0, 539, 459, 540, 541, 363, 364, 365, 366,
	326, 566, 293, 462, 389, 0, 526, 0, 0, 0,
	0, 0, 0, 0, 0, 531, 532, 529, 626, 0,
	589, 590, 0, 0, 456, 457, 321, 328, 475, 330,
	292, 378, 323, 441, 337, 0, 468, 533, 469, 592,
	595, 593, 594, 370, 333, 334, 404, 338, 348, 392,
	440, 376, 397, 290, 431, 405, 352, 519, 546, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 574, 573, 572, 571, 570,
	569, 568, 567, 0, 0, 516, 418, 302, 264, 298,
	299, 306, 615, 612, 422, 616, 0, 272, 496, 346,
	0, 387, 320, 561, 562, 0, 0, 220, 221, 222,
	223, 224, 225, 226, 227, 265, 228, 229, 230, 231,
	232, 233, 234, 237, 238, 239, 240, 241, 242, 243,
	244, 564, 235, 236, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 256, 257, 258, 0, 0,
	0, 266, 267, 268, 269, 0, 0, 260, 261, 262,
	263, 0, 0, 0, 447, 448, 449, 471, 0, 433,
	495, 613, 0, 0, 0, 0, 0, 0, 0, 545,
	557, 591, 0, 601, 602, 604, 606, 605, 608, 410,
	0, 619, 486, 487, 620, 597, 375, 0, 501, 534,
	523, 607, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 315, 0, 0, 345, 538, 520, 530,
	521, 506, 507, 508, 515, 325, 509, 510, 511, 481,
	512, 482, 513, 514, 0, 537, 488, 406, 359, 555,
	554, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 209,
	0, 0, 0, 0, 0, 0, 288, 210, 483, 603,
	485, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 291, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 278, 412, 429, 289, 402, 442, 294,
	409, 284, 374, 398, 0, 0, 280, 427, 408, 356,
	335, 336, 279, 0, 393, 313, 327, 310, 372, 0,
	426, 454, 309, 445, 0, 437, 282, 0, 436, 371,
	423, 428, 357, 351, 281, 425, 355, 350, 339, 317,
	470, 340, 341, 331, 383, 349, 384, 332, 361, 360,
	362, 0, 0, 0, 0, 0, 465, 466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	596, 0, 0, 600, 0, 439, 0, 0, 1497, 0,
	0, 0, 411, 0, 0, 342, 0, 0, 0, 455,
	0, 396, 377, 622, 0, 0, 394, 347, 424, 385,
	430, 413, 438, 390, 386, 273, 414, 312, 358, 285,
	287, 307, 314, 316, 318, 319, 367, 368, 380, 401,
	415, 416, 417, 311, 295, 395, 296, 329, 297, 274,
	303, 301, 304, 403, 305, 276, 381, 421, 0, 324,
	391, 354, 277, 353, 382, 420, 419, 286, 446, 452,
	453, 542, 0, 458, 623, 624, 625, 467, 472, 473,
	474, 476, 477, 478, 479, 543, 560, 527, 497, 460,
	551, 494, 498, 499, 563, 0, 0, 0, 451, 343,
	344, 0, 322, 270, 271, 618, 308, 373, 565, 598,
	599, 490, 0, 552, 491, 500, 300, 524, 536, 535,
	369, 450, 0, 547, 550, 480, 617, 0, 544, 559,
	621, 558, 614, 379, 0, 400, 556, 503, 0, 548,
	522, 0, 549, 518, 553, 0, 492, 0, 407, 432,
	444, 461, 464, 493, 578, 579, 580, 275, 463, 582,
	583, 584, 585, 586, 587, 588, 581, 435, 525, 502,
	528, 443, 505, 504, 0, 0, 539, 459, 540, 541,
	363, 364, 365, 366, 326, 566, 293, 462, 389, 0,
	526, 0, 0, 0, 0, 0, 0, 0, 0, 531,
	532, 529, 626, 0, 589, 590, 0, 0, 456, 457,
	321, 328, 475, 330, 292, 378, 323, 441, 337, 0,
	468, 533, 469, 592, 595, 593, 594, 370, 333, 334,
	404, 338, 348, 392, 440, 376, 397, 290, 431, 405,
	352, 519, 546, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 574,
	573, 572, 571, 570, 569, 568, 567, 0, 0, 516,
	418, 302, 264, 298, 299, 306, 615, 612, 422, 616,
	0, 272, 496, 346, 0, 387, 320, 561, 562, 0,
	0, 220, 221, 222, 223, 224, 225, 226, 227, 265,
	228, 229, 230, 231, 232, 233, 234, 237, 238, 239,
	240, 241, 242, 243, 244, 564, 235, 236, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 256,
	257, 258, 0, 0, 0, 266, 267, 268, 269, 0,
	0, 260, 261, 262, 263, 0, 0, 0, 447, 448,
	449, 471, 0, 433, 495, 613, 0, 0, 0, 0,
	0, 0, 0, 545, 557, 591, 0, 601, 602, 604,
	606, 605, 608, 410, 0, 619, 486, 487, 620, 597,
	375, 0, 501, 534, 523, 607, 489, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 633, 315, 0, 0,
	345, 538, 520, 530, 521, 506, 507, 508, 515, 325,
	509, 510, 511, 481, 512, 482, 513, 514, 0, 537,
	488, 406, 359, 555, 554, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 0, 0,
	288, 210, 483, 603, 485, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 291, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 278, 412, 429,
	289, 402, 442, 294, 409, 284, 374, 398, 0, 0,
	280, 427, 408, 356, 335, 336, 279, 0, 393, 313,
	327, 310, 372, 0, 426, 454, 309, 445, 0, 437,
	282, 0, 436, 371, 423, 428, 357, 351, 281, 425,
	355, 350, 339, 317, 470, 340, 341, 331, 383, 349,
	384, 332, 361, 360, 362, 0, 0, 0, 0, 0,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 596, 0, 0, 600, 0, 439,
	0, 0, 0, 0, 0, 0, 411, 0, 0, 342,
	0, 0, 0, 455, 0, 396, 377, 622, 0, 0,
	394, 347, 424, 385, 430, 413, 438, 390, 386, 273,
	414, 312, 358, 285, 287, 307, 314, 316, 318, 319,
	367, 368, 380, 401, 415, 416, 417, 311, 295, 395,
	296, 329, 297, 274, 303, 301, 304, 403, 305, 276,
	381, 421, 0, 324, 391, 354, 277, 353, 382, 420,
	419, 286, 446, 452, 453, 542, 0, 458, 623, 624,
	625, 467, 472, 473, 474, 476, 477, 478, 479, 543,
	560, 527, 497, 460, 551, 494, 498, 499, 563, 0,
	0, 0, 451, 343, 344, 0, 322, 270, 271, 618,
	308, 373, 565, 598, 599, 490, 0, 552, 491, 500,
	300, 524, 536, 535, 369, 450, 0, 547, 550, 480,
	617, 0, 544, 559, 621, 558, 614, 379, 0, 400,
	556, 503, 0, 548, 522, 0, 549, 518, 553, 0,
	492, 0, 407, 432, 444, 461, 464, 493, 578, 579,
	580, 275, 463, 582, 583, 584, 585, 586, 587, 588,
	581, 435, 525, 502, 528, 443, 505, 504, 0, 0,
	539, 459, 540, 541, 363, 364, 365, 366, 326, 566,
	293, 462, 389, 0, 526, 0, 0, 0, 0, 0,
	0, 0, 0, 531, 532, 529, 626, 0, 589, 590,
	0, 0, 456, 457, 321, 328, 475, 330, 292, 378,
	323, 441, 337, 0, 468, 533, 469, 592, 595, 593,
	594, 370, 333, 334, 404, 338, 348, 392, 440, 376,
	397, 290, 431, 405, 352, 519, 546, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 574, 573, 572, 571, 570, 569, 568,
	567, 0, 0, 516, 418, 302, 264, 298, 299, 306,
	615, 612, 422, 616, 0, 272, 496, 346, 0, 387,
	320, 561, 562, 0, 0, 220, 221, 222, 223, 224,
	225, 226, 227, 265, 228, 229, 230, 231, 232, 233,
	234, 237, 238, 239, 240, 241, 242, 243, 244, 564,
	235, 236, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 256, 257, 258, 0, 0, 0, 266,
	267, 268, 269, 0, 0, 260, 261, 262, 263, 0,
	0, 0, 447, 448, 449, 471, 0, 433, 495, 613,
	0, 0, 0, 0, 0, 0, 0, 545, 557, 591,
	0, 601, 602, 604, 606, 605, 608, 410, 0, 619,
	486, 487, 620, 597, 375, 0, 501, 534, 523, 607,
	489, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 315, 0, 0, 345, 538, 520, 530, 521, 506,
	507, 508, 515, 325, 509, 510, 511, 481, 512, 482,
	513, 514, 0, 537, 488, 406, 359, 555, 554, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 209, 0, 0,
	0, 0, 0, 0, 288, 210, 483, 603, 485, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 291,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 278, 412, 429, 289, 402, 442, 294, 409, 284,
	374, 398, 0, 0, 280, 427, 408, 356, 335, 336,
	279, 0, 393, 313, 327, 310, 372, 0, 426, 454,
	309, 445, 0, 437, 282, 0, 436, 371, 423, 428,
	357, 351, 281, 425, 355, 350, 339, 317, 470, 340,
	341, 331, 383, 349, 384, 332, 361, 360, 362, 0,
	0, 0, 0, 0, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 596, 0,
	643, 600, 0, 439, 0, 0, 0, 0, 0, 0,
	411, 0, 0, 342, 0, 0, 0, 455, 0, 396,
	377, 622, 0, 0, 394, 347, 424, 385, 430, 413,
	438, 390, 386, 273, 414, 312, 358, 285, 287, 307,
	314, 316, 318, 319, 367, 368, 380, 401, 415, 416,
	417, 311, 295, 395, 296, 329, 297, 274, 303, 301,
	304, 403, 305, 276, 381, 421, 0, 324, 391, 354,
	277, 353, 382, 420, 419, 286, 446, 452, 453, 542,
	0, 458, 623, 624, 625, 467, 472, 473, 474, 476,
	477, 478, 479, 543, 560, 527, 497, 460, 551, 494,
	498, 499, 563, 0, 0, 0, 451, 343, 344, 0,
	322, 270, 271, 618, 308, 373, 565, 598, 599, 490,
	0, 552, 491, 500, 300, 524, 536, 535, 369, 450,
	0, 547, 550, 480, 617, 0, 544, 559, 621, 558,
	614, 379, 0, 400, 556, 503, 0, 548, 522, 0,
	549, 518, 553, 0, 492, 0, 407, 432, 444, 461,
	464, 493, 578, 579, 580, 275, 463, 582, 583, 584,
	585, 586, 587, 588, 581, 435, 525, 502, 528, 443,
	505, 504, 0, 0, 539, 459, 540, 541, 363, 364,
	365, 366, 326, 566, 293, 462, 389, 0, 526, 0,
	0, 0, 0, 0, 0, 0, 0, 531, 532, 529,
	626, 0, 589, 590, 0, 0, 456, 457, 321, 328,
	475, 330, 292, 378, 323, 441, 337, 0, 468, 533,
	469, 592, 595, 593, 594, 370, 333, 334, 404, 338,
	348, 392, 440, 376, 397, 290, 431, 405, 352, 519,
	546, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 574, 573, 572,
	571, 570, 569, 568, 567, 0, 0, 516, 418, 302,
	264, 298, 299, 306, 615, 612, 422, 616, 0, 272,
	496, 346, 0, 387, 320, 561, 562, 0, 0, 220,
	221, 222, 223, 224, 225, 226, 227, 265, 228, 229,
	230, 231, 232, 233, 234, 237, 238, 239, 240, 241,
	242, 243, 244, 564, 235, 236, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	0, 0, 0, 266, 267, 268, 269, 0, 0, 260,
	261, 262, 263, 0, 0, 0, 447, 448, 449, 471,
	0, 433, 495, 613, 0, 0, 0, 0, 0, 0,
	0, 545, 557, 591, 0, 601, 602, 604, 606, 605,
	608, 410, 0, 619, 486, 487, 620, 597, 375, 0,
	501, 534, 523, 607, 489, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 315, 0, 0, 345, 538,
	520, 530, 521, 506, 507, 508, 515, 325, 509, 510,
	511, 481, 512, 482, 513, 514, 0, 537, 488, 406,
	359, 555, 554, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 209, 0, 0, 0, 0, 0, 0, 288, 210,
	483, 603, 485, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 291, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 278, 412, 429, 289, 402,
	442, 294, 409, 284, 374, 398, 0, 0, 280, 427,
	408, 356, 335, 336, 279, 0, 393, 313, 327, 310,
	372, 0, 426, 454, 309, 445, 0, 437, 282, 0,
	436, 371, 423, 428, 357, 351, 281, 425, 355, 350,
	339, 317, 470, 340, 341, 331, 383, 349, 384, 332,
	361, 360, 362, 0, 0, 0, 0, 0, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 596, 0, 0, 600, 0, 439, 0, 0,
	0, 0, 0, 0, 411, 0, 0, 342, 0, 0,
	0, 455, 0, 396, 377, 622, 0, 0, 394, 347,
	424, 385, 430, 413, 438, 390, 386, 273, 414, 312,
	358, 285, 287, 307, 314, 316, 318, 319, 367, 368,
	380, 401, 415, 416, 417, 311, 295, 395, 296, 329,
	297, 274, 303, 301, 304, 403, 305, 276, 381, 421,
	0, 324, 391, 354, 277, 353, 382, 420, 419, 286,
	446, 452, 453, 542, 0, 458, 623, 624, 625, 467,
	472, 473, 474, 476, 477, 478, 479, 543, 560, 527,
	497, 460, 551, 494, 498, 499, 563, 0, 0, 0,
	451, 343, 344, 0, 322, 270, 271, 618, 308, 373,
	565, 598, 599, 490, 0, 552, 491, 500, 300, 524,
	536, 535, 369, 450, 0, 547, 550, 480, 617, 0,
	544, 559, 621, 558, 614, 379, 0, 400, 556, 503,
	0, 548, 522, 0, 549, 518, 553, 0, 492, 0,
	407, 432, 444, 461, 464, 493, 578, 579, 580, 275,
	463, 582, 583, 584, 585, 586, 587, 588, 581, 435,
	525, 502, 528, 443, 505, 504, 0, 0, 539, 459,
	540, 541, 363, 364, 365, 366, 326, 566, 293, 462,
	389, 0, 526, 0, 0, 0, 0, 0, 0, 0,
	0, 531, 532, 529, 626, 0, 589, 590, 0, 0,
	456, 457, 321, 328, 475, 330, 292, 378, 323, 441,
	337, 0, 468, 533, 469, 592, 595, 593, 594, 370,
	333, 334, 404, 338, 348, 392, 440, 376, 397, 290,
	431, 405, 352, 519, 546, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 574, 573, 572, 571, 570, 569, 568, 567, 929,
	0, 516, 418, 302, 264, 298, 299, 306, 615, 612,
	422, 616, 0, 272, 496, 346, 0, 387, 320, 561,
	562, 0, 0, 220, 221, 222, 223, 224, 225, 226,
	227, 265, 228, 229, 230, 231, 232, 233, 234, 237,
	238, 239, 240, 241, 242, 243, 244, 564, 235, 236,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
	255, 256, 257, 258, 0, 0, 0, 266, 267, 268,
	269, 0, 0, 260, 261, 262, 263, 0, 0, 0,
	447, 448, 449, 471, 0, 433, 495, 613, 0, 0,
	0, 0, 0, 0, 0, 545, 557, 591, 0, 601,
	602, 604, 606, 605, 608, 410, 0, 619, 486, 487,
	620, 597, 375, 0, 501, 534, 523, 607, 489, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 315,
	0, 0, 345, 538, 520, 530, 521, 506, 507, 508,
	515, 325, 509, 510, 511, 481, 512, 482, 513, 514,
	0, 537, 488, 406, 359, 555, 554, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 209, 0, 0, 0, 0,
	0, 0, 288, 210, 483, 603, 485, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 291, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 278,
	412, 429, 289, 402, 442, 294, 409, 284, 374, 398,
	0, 0, 280, 427, 408, 356, 335, 336, 279, 0,
	393, 313, 327, 310, 372, 0, 426, 454, 309, 445,
	0, 437, 282, 0, 436, 371, 423, 428, 357, 351,
	281, 425, 355, 350, 339, 317, 470, 340, 341, 331,
	383, 349, 384, 332, 361, 360, 362, 0, 0, 0,
	0, 0, 465, 466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 596, 0, 0, 600,
	0, 439, 0, 0, 0, 0, 0, 0, 411, 0,
	0, 342, 0, 0, 0, 455, 0, 396, 377, 622,
	0, 0, 394, 347, 424, 385, 430, 413, 438, 390,
	386, 273, 414, 312, 358, 285, 287, 307, 314, 316,
	318, 319, 367, 368, 380, 401, 415, 416, 417, 311,
	295, 395, 296, 329, 297, 274, 303, 301, 304, 403,
	305, 276, 381, 421, 0, 324, 391, 354, 277, 353,
	382, 420, 419, 286, 446, 452, 453, 542, 0, 458,
	623, 624, 625, 467, 472, 473, 474, 476, 477, 478,
	479, 543, 560, 527, 497, 460, 551, 494, 498, 499,
	563, 0, 0, 0, 451, 343, 344, 0, 322, 270,
	271, 618, 308, 373, 565, 598, 599, 490, 0, 552,
	491, 500, 300, 524, 536, 535, 369, 450, 0, 547,
	550, 480, 617, 0, 544, 559, 621, 558, 614, 379,
	0, 400, 556, 503, 0, 548, 522, 0, 549, 518,
	553, 0, 492, 0, 407, 432, 444, 461, 464, 493,
	578, 579, 580, 275, 463, 582, 583, 584, 585, 586,
	587, 588, 581, 435, 525, 502, 528, 443, 505, 504,
	0, 0, 539, 459, 540, 541, 363, 364, 365, 366,
	326, 566, 293, 462, 389, 0, 526, 0, 0, 0,
	0, 0, 0, 0, 0, 531, 532, 529, 626, 0,
	589, 590, 0, 0, 456, 457, 321, 328, 475, 330,
	292, 378, 323, 441, 337, 0, 468, 533, 469, 592,
	595, 593, 594, 370, 333, 334, 404, 338, 348, 392,
	440, 376, 397, 290, 431, 405, 352, 519, 546, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 574, 573, 572, 571, 570,
	569, 568, 567, 0, 0, 516, 418, 302, 264, 298,
	299, 306, 615, 612, 422, 616, 0, 272, 496, 346,
	0, 387, 320, 561, 562, 0, 0, 220, 221, 222,
	223, 224, 225, 226, 227, 265, 228, 229, 230, 231,
	232, 233, 234, 237, 238, 239, 240, 241, 242, 243,
	244, 564, 235, 236, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 256, 257, 258, 0, 0,
	0, 266, 267, 268, 269, 0, 0, 260, 261, 262,
	263, 0, 0, 0, 447, 448, 449, 471, 0, 433,
	495, 613, 0, 0, 0, 0, 0, 0, 0, 545,
	557, 591, 0, 601, 602, 604, 606, 605, 608, 410,
	0, 619, 486, 487, 620, 597, 375, 0, 501, 534,
	523, 607, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 315, 0, 0, 345, 538, 520, 530,
	521, 506, 507, 508, 515, 325, 509, 510, 511, 481,
	512, 482, 513, 514, 0, 537, 488, 406, 359, 555,
	554, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 209,
	0, 0, 0, 0, 0, 0, 288, 210, 483, 603,
	485, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 291, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 278, 412, 1447, 289, 402, 442, 294,
	409, 284, 374, 398, 0, 0, 280, 427, 408, 356,
	335, 336, 279, 0, 393, 313, 327, 310, 372, 0,
	426, 454, 309, 445, 0, 437, 282, 0, 436, 371,
	423, 428, 357, 351, 281, 425, 355, 350, 339, 317,
	470, 340, 341, 331, 383, 349, 384, 332, 361, 360,
	362, 0, 0, 0, 0, 0, 465, 466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	596, 0, 0, 600, 0, 439, 0, 0, 0, 0,
	0, 0, 411, 0, 0, 342, 0, 0, 0, 455,
	0, 396, 377, 622, 0, 0, 394, 347, 424, 385,
	430, 413, 438, 390, 386, 273, 414, 312, 358, 285,
	287, 307, 314, 316, 318, 319, 367, 368, 380, 401,
	415, 416, 417, 311, 295, 395, 296, 329, 297, 274,
	303, 301, 304, 403, 305, 276, 381, 421, 0, 324,
	391, 354, 277, 353, 382, 420, 419, 286, 446, 452,
	453, 542, 0, 458, 623, 624, 625, 467, 472, 473,
	474, 476, 477, 478, 479, 543, 560, 527, 497, 460,
	551, 494, 498, 499, 563, 0, 0, 0, 451, 343,
	344, 0, 322, 270, 271, 618, 308, 373, 565, 598,
	599, 490, 0, 552, 491, 500, 300, 524, 536, 535,
	369, 450, 0, 547, 550, 480, 617, 0, 544, 559,
	621, 558, 614, 379, 0, 400, 556, 503, 0, 548,
	522, 0, 549, 518, 553, 0, 492, 0, 407, 432,
	444, 461, 464, 493, 578, 579, 580, 275, 463, 582,
	583, 584, 585, 586, 587, 588, 581, 435, 525, 502,
	528, 443, 505, 504, 0, 0, 539, 459, 540, 541,
	363, 364, 365, 366, 326, 566, 293, 462, 389, 0,
	526, 0, 0, 0, 0, 0, 0, 0, 0, 531,
	532, 529, 626, 0, 589, 590, 0, 0, 456, 457,
	321, 328, 475, 330, 292, 378, 323, 441, 337, 0,
	468, 533, 469, 592, 595, 593, 594, 370, 333, 334,
	404, 338, 348, 392, 440, 376, 397, 290, 431, 405,
	352, 519, 546, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 574,
	573, 572, 571, 570, 569, 568, 567, 0, 0, 516,
	418, 302, 264, 298, 299, 306, 615, 612, 422, 616,
	0, 272, 496, 346, 0, 387, 320, 561, 562, 0,
	0, 220, 221, 222, 223, 224, 225, 226, 227, 265,
	228, 229, 230, 231, 232, 233, 234, 237, 238, 239,
	240, 241, 242, 243, 244, 564, 235, 236, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 256,
	257, 258, 0, 0, 0, 266, 267, 268, 269, 0,
	0, 260, 261, 262, 263, 0, 0, 0, 447, 448,
	449, 471, 0, 433, 495, 613, 0, 0, 0, 0,
	0, 0, 0, 545, 557, 591, 0, 601, 602, 604,
	606, 605, 608, 410, 0, 619, 486, 487, 620, 597,
	375, 0, 501, 534, 523, 607, 489, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 315, 0, 0,
	345, 538, 520, 530, 521, 506, 507, 508, 515, 325,
	509, 510, 511, 481, 512, 482, 513, 514, 0, 537,
	488, 406, 359, 555, 554, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 0, 0,
	288, 210, 483, 603, 485, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 291, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 278, 412, 1445,
	289, 402, 442, 294, 409, 284, 374, 398, 0, 0,
	280, 427, 408, 356, 335, 336, 279, 0, 393, 313,
	327, 310, 372, 0, 426, 454, 309, 445, 0, 437,
	282, 0, 436, 371, 423, 428, 357, 351, 281, 425,
	355, 350, 339, 317, 470, 340, 341, 331, 383, 349,
	384, 332, 361, 360, 362, 0, 0, 0, 0, 0,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 596, 0, 0, 600, 0, 439,
	0, 0, 0, 0, 0, 0, 411, 0, 0, 342,
	0, 0, 0, 455, 0, 396, 377, 622, 0, 0,
	394, 347, 424, 385, 430, 413, 438, 390, 386, 273,
	414, 312, 358, 285, 287, 307, 314, 316, 318, 319,
	367, 368, 380, 401, 415, 416, 417, 311, 295, 395,
	296, 329, 297, 274, 303, 301, 304, 403, 305, 276,
	381, 421, 0, 324, 391, 354, 277, 353, 382, 420,
	419, 286, 446, 452, 453, 542, 0, 458, 623, 624,
	625, 467, 472, 473, 474, 476, 477, 478, 479, 543,
	560, 527, 497, 460, 551, 494, 498, 499, 563, 0,
	0, 0, 451, 343, 344, 0, 322, 270, 271, 618,
	308, 373, 565, 598, 599, 490, 0, 552, 491, 500,
	300, 524, 536, 535, 369, 450, 0, 547, 550, 480,
	617, 0, 544, 559, 621, 558, 614, 379, 0, 400,
	556, 503, 0, 548, 522, 0, 549, 518, 553, 0,
	492, 0, 407, 432, 444, 461, 464, 493, 578, 579,
	580, 275, 463, 582, 583, 584, 585, 586, 587, 588,
	581, 435, 525, 502, 528, 443, 505, 504, 0, 0,
	539, 459, 540, 541, 363, 364, 365, 366, 326, 566,
	293, 462, 389, 0, 526, 0, 0, 0, 0, 0,
	0, 0, 0, 531, 532, 529, 626, 0, 589, 590,
	0, 0, 456, 457, 321, 328, 475, 330, 292, 378,
	323, 441, 337, 0, 468, 533, 469, 592, 595, 593,
	594, 370, 333, 334, 404, 338, 348, 392, 440, 376,
	397, 290, 431, 405, 352, 519, 546, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 574, 573, 572, 571, 570, 569, 568,
	567, 0, 0, 516, 418, 302, 264, 298, 299, 306,
	615, 612, 422, 616, 0, 272, 496, 346, 0, 387,
	320, 561, 562, 0, 0, 220, 221, 222, 223, 224,
	225, 226, 227, 265, 228, 229, 230, 231, 232, 233,
	234, 237, 238, 239, 240, 241, 242, 243, 244, 564,
	235, 236, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 256, 257, 258, 0, 0, 0, 266,
	267, 268, 269, 0, 0, 260, 261, 262, 263, 0,
	0, 0, 447, 448, 449, 471, 0, 433, 495, 613,
	0, 0, 0, 0, 0, 0, 0, 545, 557, 591,
	0, 601, 602, 604, 606, 605, 608, 410, 0, 619,
	486, 487, 620, 597, 375, 0, 501, 534, 523, 607,
	489, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 315, 0, 0, 345, 538, 520, 530, 521, 506,
	507, 508, 515, 325, 509, 510, 511, 481, 512, 482,
	513, 514, 0, 537, 488, 406, 359, 555, 554, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 209, 0, 0,
	0, 0, 0, 0, 288, 210, 483, 603, 485, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 291,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 278, 412, 429, 289, 402, 442, 294, 409, 284,
	374, 398, 0, 0, 280, 427, 408, 356, 335, 336,
	279, 0, 393, 313, 327, 310, 372, 0, 426, 454,
	309, 445, 0, 437, 282, 0, 436, 371, 423, 428,
	357, 351, 281, 425, 355, 350, 339, 317, 470, 340,
	341, 331, 383, 349, 384, 332, 361, 360, 362, 0,
	0, 0, 0, 0, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 596, 0,
	0, 600, 0, 439, 0, 0, 0, 0, 0, 0,
	411, 0, 0, 342, 0, 0, 0, 455, 0, 396,
	377, 622, 0, 0, 394, 347, 424, 385, 430, 413,
	438, 390, 386, 273, 414, 312, 358, 285, 287, 710,
	314, 316, 318, 319, 367, 368, 380, 401, 415, 416,
	417, 311, 295, 395, 296, 329, 297, 274, 303, 301,
	304, 403, 305, 276, 381, 421, 0, 324, 391, 354,
	277, 353, 382, 420, 419, 286, 446, 452, 453, 542,
	0, 458, 623, 624, 625, 467, 472, 473, 474, 476,
	477, 478, 479, 543, 560, 527, 497, 460, 551, 494,
	498, 499, 563, 0, 0, 0, 451, 343, 344, 0,
	322, 270, 271, 618, 308, 373, 565, 598, 599, 490,
	0, 552, 491, 500, 300, 524, 536, 535, 369, 450,
	0, 547, 550, 480, 617, 0, 544, 559, 621, 558,
	614, 379, 0, 400, 556, 503, 0, 548, 522, 0,
	549, 518, 553, 0, 492, 0, 407, 432, 444, 461,
	464, 493, 578, 579, 580, 275, 463, 582, 583, 584,
	585, 586, 587, 588, 581, 435, 525, 502, 528, 443,
	505, 504, 0, 0, 539, 459, 540, 541, 363, 364,
	365, 366, 326, 566, 293, 462, 389, 0, 526, 0,
	0, 0, 0, 0, 0, 0, 0, 531, 532, 529,
	626, 0, 589, 590, 0, 0, 456, 457, 321, 328,
	475, 330, 292, 378, 323, 441, 337, 0, 468, 533,
	469, 592, 595, 593, 594, 370, 333, 334, 404, 338,
	348, 392, 440, 376, 397, 290, 431, 405, 352, 519,
	546, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 574, 573, 572,
	571, 570, 569, 568, 567, 0, 0, 516, 418, 302,
	264, 298, 299, 306, 615, 612, 422, 616, 0, 272,
	496, 346, 0, 387, 320, 561, 562, 0, 0, 220,
	221, 222, 223, 224, 225, 226, 227, 265, 228, 229,
	230, 231, 232, 233, 234, 237, 238, 239, 240, 241,
	242, 243, 244, 564, 235, 236, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	0, 0, 0, 266, 267, 268, 269, 0, 0, 260,
	261, 262, 263, 0, 0, 0, 447, 448, 449, 471,
	0, 433, 495, 613, 0, 0, 0, 0, 0, 0,
	0, 545, 557, 591, 0, 601, 602, 604, 606, 605,
	608, 410, 0, 619, 486, 487, 620, 597, 375, 0,
	501, 534, 523, 607, 489, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 315, 0, 0, 345, 538,
	520, 530, 521, 506, 507, 508, 515, 325, 509, 510,
	511, 481, 512, 482, 513, 514, 0, 537, 488, 406,
	359, 555, 554, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 209, 0, 0, 0, 0, 0, 0, 288, 210,
	483, 603, 485, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 291, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 278, 412, 429, 289, 402,
	442, 294, 409, 284, 374, 398, 0, 0, 280, 427,
	408, 356, 335, 336, 279, 0, 393, 313, 327, 310,
	372, 0, 426, 454, 309, 445, 0, 437, 282, 0,
	436, 371, 423, 428, 357, 351, 281, 425, 355, 350,
	339, 317, 470, 340, 341, 331, 383, 349, 384, 332,
	361, 360, 362, 0, 0, 0, 0, 0, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 596, 0, 0, 600, 0, 439, 0, 0,
	0, 0, 0, 0, 411, 0, 0, 342, 0, 0,
	0, 455, 0, 396, 377, 622, 0, 0, 394, 347,
	424, 385, 430, 413, 438, 667, 386, 273, 414, 312,
	358, 285, 287, 307, 314, 316, 318, 319, 367, 368,
	380, 401, 415, 416, 417, 311, 295, 395, 296, 329,
	297, 274, 303, 301, 304, 403, 305, 276, 381, 421,
	0, 324, 391, 354, 277, 353, 382, 420, 419, 286,
	446, 452, 453, 542, 0, 458, 623, 624, 625, 467,
	472, 473, 474, 476, 477, 478, 479, 543, 560, 527,
	497, 460, 551, 494, 498, 499, 563, 0, 0, 0,
	451, 343, 344, 0, 322, 270, 271, 618, 308, 373,
	565, 598, 599, 490, 0, 552, 491, 500, 300, 524,
	536, 535, 369, 450, 0, 547, 550, 480, 617, 0,
	544, 559, 621, 558, 614, 379, 0, 400, 556, 503,
	0, 548, 522, 0, 549, 518, 553, 0, 492, 0,
	407, 432, 444, 461, 464, 493, 578, 579, 580, 275,
	463, 582, 583, 584, 585, 586, 587, 668, 581, 435,
	525, 502, 528, 443, 505, 504, 0, 0, 539, 459,
	540, 541, 363, 364, 365, 366, 326, 566, 293, 462,
	389, 0, 526, 0, 0, 0, 0, 0, 0, 0,
	0, 531, 532, 529, 626, 0, 589, 590, 0, 0,
	456, 457, 321, 328, 475, 330, 292, 378, 323, 441,
	337, 0, 468, 533, 469, 592, 595, 593, 594, 370,
	333, 334, 404, 338, 348, 392, 440, 376, 397, 290,
	431, 405, 352, 519, 546, 0, 0, 0, 0, 0,
	1079, 0, 0, 0, 0, 0, 259, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 574, 573, 572, 571, 570, 569, 568, 567, 0,
	0, 516, 418, 302, 264, 298, 299, 306, 615, 612,
	422, 616, 0, 272, 496, 346, 0, 387, 320, 561,
	562, 0, 0, 220, 221, 222, 223, 224, 225, 226,
	227, 265, 228, 229, 230, 231, 232, 233, 234, 237,
	238, 239, 240, 241, 242, 243, 244, 564, 235, 236,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
	255, 256, 257, 258, 0, 0, 0, 266, 267, 268,
	269, 0, 0, 260, 261, 262, 263, 0, 0, 0,
	447, 448, 449, 471, 0, 433, 495, 613, 0, 0,
	0, 0, 1065, 0, 0, 545, 557, 591, 0, 601,
	602, 604, 606, 605, 608, 410, 0, 619, 486, 487,
	620, 597, 1087, 1091, 1093, 1095, 1097, 1098, 1100, 0,
	1105, 1101, 1102, 1103, 1104, 0, 1082, 1083, 1084, 1085,
	1063, 1064, 1088, 0, 1066, 0, 1067, 1068, 1069, 1070,
	1071, 1072, 1073, 1074, 1075, 1078, 1080, 1076, 1077, 1086,
	689, 688, 695, 685, 0, 0, 0, 1090, 1092, 1094,
	1096, 1099, 692, 693, 1930, 694, 698, 0, 0, 679,
	0, 187, 0, 0, 0, 689, 688, 695, 685, 703,
	1708, 0, 0, 0, 0, 0, 0, 692, 693, 0,
	694, 698, 0, 3462, 679, 1081, 0, 0, 0, 1932,
	0, 0, 0, 0, 703, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 707, 0, 0, 709, 0, 0, 0,
	0, 708, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 181, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1907, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1923,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1930, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1704, 0, 0, 0, 0, 0, 0,
	1701, 0, 0, 0, 1703, 1700, 1702, 1706, 1707, 0,
	0, 0, 1705, 0, 0, 1932, 0, 0, 680, 682,
	681, 0, 0, 0, 0, 0, 0, 0, 687, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	691, 0, 0, 680, 682, 681, 0, 706, 0, 1911,
	0, 0, 0, 687, 684, 0, 0, 3627, 0, 0,
	1917, 0, 0, 0, 0, 691, 0, 1907, 0, 0,
	0, 0, 706, 0, 0, 0, 0, 0, 0, 684,
	1905, 1939, 0, 0, 1906, 1908, 1910, 0, 1912, 1913,
	1914, 1918, 1919, 1920, 1922, 1925, 1926, 1927, 0, 0,
	0, 0, 0, 0, 0, 1915, 1924, 1916, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1089, 0,
	0, 0, 0, 0, 0, 1923, 0, 0, 0, 1931,
	0, 0, 0, 0, 1930, 1689, 1690, 1691, 1692, 1693,
	1694, 1695, 1696, 1697, 1698, 1699, 1711, 1712, 1713, 1714,
	1715, 1716, 1709, 1710, 686, 690, 696, 0, 697, 699,
	0, 0, 700, 701, 702, 0, 0, 704, 705, 1932,
	0, 0, 1930, 0, 1928, 0, 0, 0, 0, 686,
	690, 696, 0, 697, 699, 0, 0, 700, 701, 702,
	0, 1904, 704, 705, 0, 0, 0, 0, 1903, 0,
	0, 0, 0, 0, 0, 1911, 0, 1932, 0, 0,
	0, 0, 0, 0, 0, 0, 1917, 0, 0, 0,
	0, 1907, 1921, 0, 0, 0, 0, 0, 0, 0,
	0, 1909, 0, 0, 0, 0, 1905, 1939, 0, 0,
	1906, 1908, 1910, 0, 1912, 1913, 1914, 1918, 1919, 1920,
	1922, 1925, 1926, 1927, 0, 0, 0, 0, 0, 1907,
	0, 1915, 1924, 1916, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3598, 0, 0, 0, 1923,
	0, 0, 0, 0, 0, 1931, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 683, 0, 0, 0, 1923, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 150,
	1928, 0, 0, 0, 0, 0, 0, 0, 683, 0,
	0, 0, 0, 0, 0, 0, 0, 1904, 0, 0,
	0, 0, 0, 0, 1903, 0, 0, 0, 0, 1911,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1917, 0, 0, 0, 0, 0, 0, 0, 1921, 0,
	0, 0, 0, 0, 0, 0, 0, 1909, 0, 0,
	1905, 1939, 0, 0, 1906, 1908, 1910, 1911, 1912, 1913,
	1914, 1918, 1919, 1920, 1922, 1925, 1926, 1927, 1917, 0,
	0, 0, 0, 0, 0, 1915, 1924, 1916, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1905, 1939,
	0, 0, 1906, 1908, 1910, 0, 1912, 1913, 1914, 1918,
	1919, 1920, 1922, 1925, 1926, 1927, 0, 0, 0, 1931,
	0, 0, 0, 1915, 1924, 1916, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1931, 0, 0,
	0, 0, 0, 0, 1928, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1904, 0, 0, 0, 0, 0, 0, 1903, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1928, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1921, 0, 0, 0, 0, 0, 0, 1904,
	0, 1909, 0, 0, 0, 0, 1903, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1921, 0, 0, 0, 0, 0, 0, 0, 0, 1909,
}

var yyPact = [...]int{
	325, -1000, -1000, -1000, -316, 13693, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 45039, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 387, 45039, -303, 27847, 43197, -1000,
	-1000, 2699, -1000, 43811, 15555, 45039, 460, 457, 45039, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 865, -1000, 47495, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 813, 3943, 46881, 10599, -214, -1000, 1667, -39, 2570,
	505, 1055, 1080, 1281, 1281, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3776, 943,
	44425, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 345, 242, 943, 20475, 113, 111,
	1667, 433, -83, -82, -93, 191, -1000, 1415, 3913, 209,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 10599, 10599, 13693, -352, 13693, 10599, 45039, 45039, -1000,
	-1000, -1000, -1000, -303, 43811, 813, 3943, 10599, 2570, 505,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -82, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -83, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -93,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 111, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 4710,
	-1000, 1654, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2318, 3096, 1650,
	2569, 741, 43197, 45039, -1000, 152, 741, -1000, -1000, -1000,
	1667, 3470, -1000, 45039, 45039, 194, 1916, -1000, 548, 421,
	432, 315, 1649, -1000, -1000, -1000, -1000, -1000, -1000, 612,
	3440, -1000, 45039, 45039, 3120, 45039, -1000, 2278, 666, -1000,
	48157, 3248, 1458, 916, 3128, -1000, -1000, 3092, -1000, 320,
	711, 267, 719, 385, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 305, -1000, 3314, -1000, -1000, 309, -1000, -1000, 295,
	-1000, -1000, -1000, 100, -1000, -1000, -1000, -1000, -1000, -1000,
	3, -1000, -1000, 1110, 2410, 10599, 2365, -1000, 3602, 1679,
	-1000, -1000, -1000, 6274, 12450, 12450, 12450, 12450, 45039, -1000,
	-1000, 2902, 10599, 3091, 3090, 3089, 3087, -1000, -1000, -1000,
	-1000, -1000, -1000, 1642, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2053, -1000, -1000, -1000, 13067, -1000, 3078,
	3076, 3074, 3073, 3071, 3068, 3067, 3066, 3060, 3050, 3047,
	3046, 3039, 3036, 2734, 14931, 3033, 2568, 2567, 3032, 3031,
	3026, 2561, 3021, 3018, 3017, 2734, 2734, 3006, 2999, 2995,
	2994, 2993, 2979, 2978, 2976, 2973, 2970, 2956, 2954, 2951,
	2944, 2941, 2940, 2939, 2938, 2937, 2936, 2935, 2933, 2930,
	2929, 2928, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1510, -1000, 2925, 3451, 2803,
	-1000, 3296, 3293, 3291, 3286, -262, 2924, 2236, -1000, -1000,
	119, 3424, 45039, -283, 45039, -1000, -61, -1000, -1000, 1057,
	-1000, 992, -1000, 804, 804, 45039, 45039, 212, 912, 804,
	804, 804, 804, 804, 853, 804, 3334, 864, 863, 859,
	858, 804, -40, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1912, 1909, 3185, 980, -1000, -1000, -1000, -1000, 1444, 45039,
	-1000, 2853, 1753, 1753, 3408, 3408, 3332, 691, 674, 627,
	1753, 529, -1000, 1816, 1816, 1816, 1816, 1753, 499, 697,
	3338, 3338, 112, 1816, 76, 1753, 1753, 76, 1753, 1753,
	-1000, 1806, 260, -270, -1000, -1000, -1000, -1000, 1816, 1816,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 3309, 3308, 813,
	813, 45039, 813, 207, 45039, 813, 813, 813, 821, 27,
	46267, 45653, 2278, 643, 628, 1459, 1874, -1000, 1711, 45039,
	45039, 1711, 1711, 23549, 22935, -1000, 45039, -1000, 3451, 2803,
	2728, 1652, 2726, 2803, -87, -88, -94, 813, 813, 813,
	813, 813, 262, 813, 813, 813, 813, 813, 45039, 45039,
	42583, 813, 813, 813, 813, 8742, 8742, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 13693, 1936, 2135, 206,
	-8, -291, 263, -1000, -1000, 45039, 3230, 275, -1000, -1000,
	-1000, 2749, -1000, 2836, 2836, 2836, 2836, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2836, 2836, 2852, 2923,
	-1000, -1000, 2835, 2835, 2835, 2749, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2842, 2842, 2843, 2843, 2842, 45039, -121, -1000, -1000,
	10599, 45039, 3242, 394, 2922, 741, -1000, -1000, 45039, 107,
	413, 3451, 3240, 3338, 3400, -1000, -1000, 1639, 2235, 2559,
	-1000, 315, -1000, 535, 315, 1687, -1000, 1109, -1000, -1000,
	-1000, -1000, -1000, 45039, 3, 390, -1000, -1000, 2520, 2921,
	-1000, 625, 1347, 1683, -1000, 278, 48182, 35829, 2278, 35829,
	45039, -1000, -1000, -1000, -1000, -1000, -1000, 99, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 304, -1000, 10599, 10599, 10599, 10599, 10599, -1000,
	975, 11833, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 12450,
	12450, 12450, 12450, 12450, 12450, 12450, 12450, 12450, 12450, 12450,
	12450, 2901, 1863, 12450, 12450, 12450, 12450, 25391, 1652, 3053,
	1447, 302, 1679, 1679, 1679, 1679, 10599, -1000, 1934, 2410,
	10599, 10599, 10599, 10599, 45039, -1000, -1000, 4472, 10599, 10599,
	48010, 10599, 3274, 10599, 10599, 10599, 2725, 5031, 45039, 10599,
	-1000, 2724, 2721, -1000, -1000, 2061, 10599, -1000, -1000, 10599,
	-1000, -1000, 10599, 12450, 10599, -1000, 10599, 10599, 10599, -1000,
	-1000, 1338, 3274, 3274, 3274, 1859, 10599, 10599, 3274, 3274,
	3274, 1849, 3274, 3274, 3274, 3274, 3274, 3274, 3274, 3274,
	3274, 3274, 2718, 2713, 2711, 9982, 3338, -214, -1000, 8125,
	3240, 3338, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -265, 2917, 45039, 2547, 2542, -322, 1062, 443,
	955, 1093, 47, 1064, 1014, 1010, -1000, 45039, 1973, 45039,
	3267, -1000, 2915, 45039, 804, 804, 804, -1000, 40741, 35829,
	45039, 45039, 2278, 45039, 45039, 45039, 804, 804, 804, 804,
	45039, -1000, 3203, 35829, 3189, 821, -1000, 45039, 1444, 3266,
	45039, 3408, 12450, 12450, -1000, -1000, 10599, -1000, 41969, 1816,
	1753, 1753, -1000, -1000, 45039, -1000, -1000, -1000, 1816, 45039,
	1816, 1816, 3408, 1816, -1000, -1000, -1000, 1753, 1753, -1000,
	-1000, 10599, -1000, -1000, 1816, 1816, -1000, -1000, 3408, 45039,
	88, 3408, 3408, 85, -1000, -1000, -1000, 1753, 45039, 45039,
	804, 45039, -1000, 45039, 45039, -1000, -1000, 45039, 45039, 4196,
	45039, 40741, 41355, 3303, -1000, 35829, 45039, 45039, 33987, -1000,
	1399, -1000, 35, -1000, 45, 27, 1711, 27, 1711, -1000,
	604, 597, 21707, 543, 35829, 5648, -1000, -1000, 1711, 1711,
	5648, 5648, 1680, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1429, -1000, 264, 3338, -1000, -1000, -1000, -1000, -1000, 2232,
	2228, 2226, 45039, 40741, 35829, 2278, 45039, 813, 45039, 45039,
	45039, 45039, 45039, -1000, 2914, 1635, -1000, 3247, 45039, 45039,
	45039, 45039, 1508, -1000, -1000, 18625, 1634, 1508, -1000, 1955,
	-1000, 10599, 13693, -236, 10599, 13693, 13693, 10599, 13693, -1000,
	10599, 272, -1000, -1000, -1000, -1000, 2223, -1000, 2197, -1000,
	-1000, -1000, -1000, -1000, 2533, 2533, -1000, 2196, -1000, -1000,
	-1000, -1000, 2193, -1000, -1000, 2192, -1000, -1000, -1000, -1000,
	-156, 2710, 1110, -1000, 2532, 3127, -215, -1000, 19861, 45039,
	45039, 394, -325, -1000, 1902, 1900, 1899, -1000, -215, -1000,
	19243, 45039, 3338, -1000, -220, 3240, 10599, 45039, -1000, 3331,
	-1000, -1000, 315, -1000, 408, 420, -1000, -1000, -1000, -1000,
	-1000, -1000, 1633, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 384, 1426, -1000, 45039, -1000, -1000, 278,
	35829, 37671, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 254,
	-1000, -1000, 184, -1000, 850, 224, 1685, -1000, -1000, 215,
	216, 195, 972, 2410, -1000, 1977, 1977, 1981, -1000, 873,
	-1000, -1000, -1000, -1000, 2902, -1000, -1000, -1000, 1921, 1784,
	-1000, 1935, 1935, 1602, 1602, 1602, 1602, 1602, 1818, 1818,
	-1000, -1000, -1000, 6274, 2901, 12450, 12450, 12450, 12450, 892,
	892, 2442, 3306, -1000, -1000, -1000, -1000, 10599, 189, 1954,
	-1000, 10599, 2591, 1646, 2502, 1428, 1608, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2709, 2708, 2277,
	3421, 2703, 10599, -1000, -1000, 1684, 1678, 1677, -1000, 2191,
	9365, -1000, -1000, -1000, 2701, 1597, 2697, -1000, -1000, -1000,
	2692, 1666, 1337, 2691, 2214, 2690, 2688, 2686, 2682, 1422,
	10599, 10599, 10599, 10599, 2680, 1664, 1660, 10599, 10599, 10599,
	10599, 2679, 10599, 10599, 10599, 10599, 10599, 10599, 10599, 10599,
	10599, 10599, 131, 131, 131, 1416, 1406, -1000, -1000, 1659,
	-1000, 2410, -1000, -1000, 3240, -1000, 2899, 2188, 1401, -1000,
	-1000, -299, 2477, 45039, 1060, 45039, 1897, -285, 45039, -1000,
	-1000, 1034, 987, 1054, 3326, 3246, 843, 45039, 1224, 2892,
	45039, 45039, 45039, 261, -1000, -1000, 1339, -1000, 224, 237,
	466, 1147, 3116, 3420, -123, 45039, 45039, 45039, 45039, 3265,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 40127, -1000,
	2891, 1644, -1000, -1000, 1679, 1679, 2410, 3107, 45039, 45039,
	3408, 3408, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1816,
	3408, 3408, 1436, 1753, 1816, -1000, -1000, 1816, -329, -1000,
	1816, -1000, -329, 1574, -329, 45039, -1000, -1000, -1000, 3256,
	2853, 1400, -1000, -1000, -1000, 3386, 1637, 792, 792, 1087,
	747, 3385, 17397, -1000, 1744, 1304, 849, 3211, 318, -1000,
	1744, -153, 754, 1744, 1744, 1744, 1744, 1744, 1744, 1744,
	601, 598, 1744, 1744, 1744, 1744, 1744, 1744, 1744, 1744,
	1744, 1744, 1744, 1079, 1744, 1744, 1744, 1744, 1744, -1000,
	1744, 2890, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 629,
	540, 259, 3299, 347, -1000, 349, 1339, 3290, 376, 3024,
	1377, -1000, -1000, -1000, -1000, 26005, 26005, 21093, 26005, -1000,
	204, 27, 38, -1000, -1000, 1399, 5648, 1399, 5648, -1000,
	-1000, 848, -1000, -1000, 1147, -1000, 45039, 45039, -1000, -1000,
	2886, 1893, -1000, -1000, 14931, -1000, 5648, 5648, -1000, -1000,
	27233, 45039, -1000, -9, -1000, 14, 3240, -1000, -1000, -1000,
	1365, -1000, -1000, 1396, 1147, 3126, 45039, 1365, 1365, 1365,
	-1000, -1000, 16783, 45039, 45039, -1000, -1000, -1000, -1000, 3408,
	8742, -1000, 33987, -1000, -1000, 39513, -1000, 38899, 3408, 1922,
	-1000, 13693, 2087, 199, -1000, 257, -307, 193, 2001, 192,
	2410, -1000, -1000, 2678, 2670, 1640, -1000, 1631, 2664, 1609,
	1606, 2183, -1000, 72, -1000, 3223, 1148, -1000, 2884, -1000,
	1599, 3172, -1000, 1358, -1000, 1892, 1595, -1000, -1000, -1000,
	10599, 38285, 10599, 1148, 1585, 3171, 1358, 3240, 2530, -1000,
	1355, -1000, 2392, 1573, 187, -1000, -1000, -1000, 45039, 813,
	2520, 1582, 37671, 1203, -1000, 842, 1564, 1552, -1000, 35829,
	311, 35829, -1000, 35829, -1000, -1000, 391, -1000, 45039, 3239,
	-1000, -1000, -1000, 2477, 1887, -328, 45039, -1000, -1000, -1000,
	-1000, -1000, 1570, -1000, 892, 892, 2442, 2903, -1000, 12450,
	-1000, 12450, 3034, -1000, 1865, -1000, 10599, 2076, 4601, 10599,
	4601, 1128, 24777, 45039, -1000, -1000, 10599, 10599, -1000, 3028,
	-1000, -1000, -1000, -1000, 10599, 10599, 2234, -1000, 45039, -1000,
	-1000, -1000, -1000, 24777, -1000, 12450, -1000, -1000, -1000, -1000,
	10599, 1269, 1269, 3013, 1565, 131, 131, 131, 2974, 2918,
	2882, 1560, 131, 2878, 2867, 2847, 2816, 2810, 2801, 2797,
	2785, 2777, 2764, -1000, 2881, -1000, -1000, 2040, 11216, 8125,
	-1000, -1000, 291, 1340, 2181, 2516, 128, -1000, 1885, -1000,
	45039, 1084, 10599, 952, 3419, -1000, -1000, -1000, 977, 434,
	-1000, 2081, 158, 271, 2660, 1320, -1000, -1000, 45039, -1000,
	-1000, -1000, 16783, 2853, 2874, 2853, 120, 1744, 631, 35829,
	622, -1000, 45039, 45039, 2158, 1880, 3125, 898, 3229, 45039,
	2873, 380, 2862, 2858, 3253, 452, 47959, 45039, 1445, -1000,
	1545, 3913, -1000, 45039, -1000, 2278, -1000, 1753, -1000, -1000,
	3408, -1000, -1000, 10599, 10599, 3408, 1753, 1753, -1000, 1030,
	1816, -1000, 45039, -1000, -1000, 452, 47959, 3252, 4325, 574,
	2700, -1000, 45039, -1000, -1000, -1000, 1002, -1000, 976, 804,
	45039, 2008, 976, 2006, 2857, -1000, -1000, 45039, 45039, 45039,
	45039, -1000, -1000, 45039, -1000, 45039, 45039, 45039, 45039, 45039,
	37057, -1000, 45039, 45039, -1000, 45039, 1996, 45039, 1995, 3212,
	-1000, 1744, 1744, 919, -1000, -1000, 589, -1000, 37057, 2179,
	2177, 2172, 2166, 2514, 2513, 2511, 1744, 1744, 2162, 2507,
	36443, 2505, 1283, 2160, 2154, 2143, 2216, 2504, 1150, -1000,
	2488, 2182, 2175, 2174, 45039, 2855, 2409, -1000, -1000, 2081,
	120, 1744, 343, 45039, 1869, 1861, 631, 462, -22, 22321,
	45039, 33987, 33987, 33987, 33987, -1000, 3161, 3153, 3146, -1000,
	3149, 3145, 3155, 45039, 33987, 2853, -1000, 36443, -1000, -1000,
	-1000, 1652, 1559, 3124, 995, 10599, -1000, -1000, 21, 26,
	-1000, -1000, -1000, 35829, 2487, 543, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 3325, 45039, 45039, 783, 2659, 1317, -1000,
	-1000, -1000, 47959, 2836, 2836, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2836, 2836, 2852, -1000, -1000, 2835,
	2835, 2835, 2749, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2842, 2842, 2843, 2843, 2842, -1000, -1000,
	3405, -1000, 1300, -1000, -1000, 1543, -1000, 3405, 1968, -318,
	13693, 1924, 1794, -1000, 10599, 13693, 10599, -248, 328, -250,
	-1000, -1000, -1000, 2486, -1000, -1000, -1000, 2142, -1000, 2133,
	-1000, 164, 163, 1991, -215, 8125, 414, 45039, -215, 45039,
	8125, -1000, 45039, 185, -346, -347, 165, 404, -215, 3325,
	72, 10599, 3204, -1000, -1000, 45039, 2132, -1000, -1000, -1000,
	3418, 35829, 2278, 1686, 35215, -1000, 308, -1000, 253, 591,
	2481, -1000, 857, 127, 2480, 2477, -1000, -1000, -1000, -1000,
	12450, 1679, -1000, -1000, -1000, 2410, 10599, 2658, -1000, 1027,
	1027, 2123, 2655, 2654, -1000, 2836, 2836, -1000, 2749, 2835,
	2749, 1027, 1027, 2651, -1000, 2155, 2759, -1000, 2677, 2644,
	10599, -1000, 2649, 3712, 1575, -49, -184, 131, 131, -1000,
	-1000, -1000, -1000, 131, 131, 131, 131, -1000, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 744, -96,
	-276, -97, -277, -1000, 2646, 1297, -1000, -1000, -1000, -1000,
	-1000, 48010, 1277, 477, 477, 2477, 2471, 835, 1026, 45039,
	2410, 1857, -294, -1000, -1000, -1000, 45039, 2469, -1000, 538,
	45039, 45039, 2466, 2464, 1224, 47959, 2638, 3251, 16169, 3250,
	2245, -1000, -1000, -1000, 26619, 568, -1000, -1000, -1000, 684,
	310, 2129, 552, -1000, 45039, 376, 376, 3195, 1847, 2463,
	45039, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3229, -1000,
	962, 425, 32759, 14317, -1000, 400, 45039, -1000, 16169, 16169,
	400, 437, 1797, -1000, 741, 1182, 150, 33987, 45039, -1000,
	33373, 2637, -1000, 1147, 3408, -1000, 2410, 2410, -329, 3408,
	3408, 1843, 1753, -1000, 437, -1000, 400, -1000, 1792, 18011,
	495, 491, 486, -1000, 644, -1000, -1000, 735, 3219, 47959,
	-1000, 45039, -1000, 45039, -1000, 45039, 45039, 804, 10599, 3219,
	45039, 834, -1000, -1000, 1104, 423, 410, 753, 753, 1252,
	-1000, 3235, -1000, -1000, 1231, -1000, -1000, -1000, -1000, 45039,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 24777, 24777, 3284,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2462, 2459, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 45039, 1537, -1000, 1830, 2458, 2245,
	26619, 1829, 1711, 2449, 2445, 568, 2158, 1828, 2243, 45039,
	-1000, 1164, 45039, 45039, -1000, 1397, -1000, 1827, 3106, 3123,
	3106, -1000, -1000, -1000, -1000, -1000, 3143, -1000, 3142, -1000,
	-1000, 1397, -1000, -1000, -1000, -1000, -1000, 995, -1000, 3318,
	976, 976, 976, 2635, -1000, -1000, -1000, 1203, 2634, -1000,
	-1000, -1000, 3446, -1000, -1000, -1000, -1000, -1000, -1000, 16783,
	3228, 3403, 3384, 34601, 3403, -1000, -318, 1819, -1000, 2054,
	190, 1862, 45039, -1000, -1000, -1000, 2632, 2616, -222, 180,
	3382, 3381, 1053, -1000, 2610, 1188, -215, -1000, -1000, 1148,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -215, -1000, 1148,
	-1000, 164, -1000, -1000, 3222, -1000, -1000, 2278, -1000, 252,
	-1000, -1000, -1000, -1000, -1000, -1000, 213, -1000, 45039, -1000,
	1186, 123, -1000, 2410, -1000, -1000, -1000, -1000, -1000, 4601,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 10599, -1000, -1000, -1000, 2613, -1000, -1000, 10599, 2609,
	2444, 2607, 2429, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3451,
	-1000, 3380, 1525, 2604, 2602, 1524, 2601, 2598, -1000, 10599,
	2595, 48010, 950, 2428, 950, -1000, -1000, 374, 45039, 3410,
	10599, 948, -1000, -1000, 2081, 534, 593, -1000, -1000, -1000,
	-1000, 868, 400, 2594, 1169, -1000, -1000, -1000, -1000, 400,
	-1000, 2426, 223, -1000, -1000, -1000, -1000, 2422, 2418, 2127,
	-1000, -1000, 2163, 1566, 235, -1000, -1000, -1000, -1000, -1000,
	-1000, 2243, 2243, 2060, 1820, -331, -1000, 2834, -1000, 1744,
	1744, 1744, 45039, 1498, -1000, 1744, 1744, 2585, -1000, -1000,
	2584, 2583, -125, 757, 1805, 1804, -1000, 2126, 26005, 33987,
	33373, 1315, -1000, 1512, -1000, -1000, -1000, -1000, -1000, -1000,
	2413, 3408, 757, -1000, 488, 2120, 12450, 2833, 12450, 2823,
	522, 2822, 1490, -1000, 45039, -1000, -1000, 45039, 3883, 2821,
	-1000, 2819, 3100, 476, 2818, 2812, 45039, 2597, -1000, 3219,
	45039, 729, 3218, -1000, -1000, -1000, 381, -1000, -1000, 544,
	-1000, 45039, -1000, 45039, -1000, 1668, -1000, 24777, -1000, -1000,
	1481, -1000, 2409, 2398, -1000, -1000, 223, 2394, 5648, -1000,
	-1000, -1000, 3195, 2391, -1000, 2389, -1000, 45039, 1164, 1164,
	3451, 45039, 8125, -1000, -1000, 10599, 2809, -1000, 10599, -1000,
	-1000, -1000, -1000, -1000, 2804, 3209, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2032, -1000, 10599, 10599, -1000, -1000, 800,
	13693, -253, 316, -1000, -1000, -1000, -224, 2387, -1000, -1000,
	3379, 2384, 2290, 45039, -1000, -1000, 1148, 1148, -222, -1000,
	-1000, 1147, -1000, -1000, 1009, 608, -1000, 2582, 2563, -1000,
	2540, 131, -1000, 131, -1000, 231, 10599, -1000, 2382, -1000,
	-1000, -1000, 2381, -1000, -1000, 2430, -1000, 2579, -1000, 2379,
	-1000, -1000, 45039, 831, 1021, 2410, 1811, 2378, 2081, 2081,
	45039, 47959, -127, -125, 16169, -127, -1000, -1000, 377, -1000,
	-1000, 364, -1000, -1000, 2131, 624, -1000, -1000, -1000, -1000,
	1810, 2024, 2316, 30917, 24777, 25391, 2358, -1000, -1000, 32759,
	2032, 2032, 48178, 304, 48546, -1000, 2796, 1085, 1801, -1000,
	2118, -1000, 2113, -1000, 3408, 1315, 135, -1000, -1000, 1675,
	-349, -1000, 1085, 2700, 3377, -1000, 3560, 45039, 3270, 45039,
	2791, 1791, 12450, -1000, 735, 3170, -1000, -1000, 3883, -1000,
	-1000, 2022, 12450, -1000, -1000, 2349, 25391, 852, 1785, 1769,
	902, 2758, -1000, 560, 3444, -1000, -1000, -1000, 915, 2754,
	-1000, 1989, 1988, -1000, 45039, -1000, 30917, 30917, 791, 791,
	30917, 30917, 2752, 753, -1000, -1000, 12450, -1000, -1000, 1744,
	-1000, -1000, -1000, 1744, 1579, -1000, -1000, -1000, -1000, -1000,
	-1000, 2060, -1000, -1000, -1000, 3338, -1000, -1000, 2410, 45039,
	2410, 32145, -1000, 3375, 3372, -1000, 2410, 1110, -1000, -318,
	45039, 45039, -226, 2110, -1000, 2346, 169, -1000, -1000, 1118,
	-224, -228, 85, 24777, 1764, -1000, -1000, -1000, -1000, -1000,
	2525, -1000, 965, -1000, -1000, -1000, 1110, 2447, 2435, -1000,
	-1000, -1000, -1000, 373, 45039, 10599, -1000, 2335, 2334, 533,
	-112, -1000, -1000, 440, -1000, -1000, -1000, 611, 2252, -1000,
	-1000, 358, -1000, -1000, 2332, -1000, -1000, 116, -1000, 1754,
	1478, -1000, 2749, 10599, -1000, -1000, -1000, -1000, -1000, -1000,
	728, -1000, 400, 48508, -1000, 1304, -1000, 1009, 728, 29689,
	599, 297, -1000, 2106, -1000, -1000, 3451, -1000, -1000, 594,
	-1000, 516, -1000, 1460, -1000, 1430, 31531, 2098, 2926, -1000,
	48344, 851, -1000, -1000, 2442, -1000, -1000, -1000, -1000, -1000,
	-1000, 2329, 2322, -1000, -1000, -1000, -1000, -1000, 2093, 2748,
	-26, 3281, 2321, -1000, -1000, 2745, 1427, 1419, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1389, 1380, 30917,
	-1000, -1000, 2442, 2083, 24777, 1744, -1000, -1000, 1379, 1376,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2743, -1000, -1000,
	3351, -226, -230, 2320, 156, 174, -1000, 2317, -1000, -1000,
	920, -216, 126, 124, 89, -1000, -1000, -1000, 10599, -1000,
	-1000, 45039, 824, 2410, -1000, -1000, 2081, 45039, 551, -1000,
	-1000, -1000, -1000, 211, -1000, -1000, -1000, -1000, -1000, 2316,
	2314, -1000, 30917, 3235, 2416, 482, 3348, -1000, 48546, -1000,
	1744, -1000, 482, 1374, -1000, 1744, 1744, -1000, 450, -1000,
	1752, -1000, 2078, -1000, 3338, -1000, 445, -1000, 484, -1000,
	-1000, -1000, 1361, -1000, -1000, -1000, 48344, 493, -1000, 634,
	2735, -1000, -1000, 2282, 10599, 2734, 1744, 2201, -99, 30917,
	3055, 3030, 2920, 2905, 1329, -1000, -1000, 24777, -1000, -1000,
	30303, 45039, 2290, -1000, -1000, 2313, -1000, 816, 160, 174,
	-1000, 3347, 168, 3346, 3345, 1108, 1978, -1000, 144, 142,
	138, -1000, -1000, -1000, -1000, -1000, 372, 2311, 556, -1000,
	292, -1000, -1000, -1000, 307, -1000, -1000, 3235, -1000, 3343,
	574, -1000, 24777, -1000, -1000, 29689, 2032, 2032, -1000, -1000,
	2064, -1000, -1000, -1000, -1000, 2057, -1000, -1000, -1000, 1321,
	-1000, 45039, 904, 7508, -1000, 2186, -1000, 45039, -1000, 3027,
	-1000, 249, 1309, 307, 791, 307, 791, 307, 791, 307,
	791, 306, -1000, -1000, -1000, 1278, -1000, -1000, -1000, 2731,
	2051, 180, 140, 3342, -1000, 2290, 3341, 2290, 2290, -1000,
	139, 920, -1000, -1000, -1000, 45039, -1000, 2308, -1000, -1000,
	-1000, -1000, 1744, 1744, 2307, 2304, 418, -1000, -1000, -1000,
	29075, 495, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 493,
	48546, -1000, 7508, 1273, -1000, 2410, -1000, 753, -1000, -1000,
	2977, 2885, 3415, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 45039, 3272, 24163, 153, -1000, -1000, -1000,
	2303, -1000, 2290, -1000, -1000, 1739, -1000, -1000, -274, 2050,
	2049, -1000, -1000, 45039, -1000, 45039, 488, -1000, 48546, 1257,
	-1000, 7508, -1000, -1000, 3443, -1000, 3416, 968, 968, 307,
	307, 307, 307, -1000, -1000, 45039, -1000, 1232, -1000, -1000,
	-1000, 1507, -1000, -1000, -1000, -1000, 2284, -1000, -1000, 2279,
	-1000, -1000, -1000, 1178, 2700, -1000, -1000, -1000, -1000, -1000,
	2079, 547, -1000, 1095, -1000, 1723, -1000, 28461, 45039, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 45039, 6891, -1000, 1497,
	-1000, -1000, 2410, 45039, -1000,
}

var yyPgo = [...]int{
	0, 175, 3463, 253, 210, 4052, 120, 257, 258, 229,
	255, 4051, 4050, 4049, 4048, 3242, 3237, 4047, 4045, 4044,
	4043, 4041, 4040, 4039, 4038, 4036, 4034, 4033, 4031, 4030,
	4028, 4027, 4024, 4023, 4022, 4020, 4019, 4018, 4017, 4015,
	4013, 4011, 4010, 4009, 4008, 4007, 4006, 254, 4005, 4004,
	4003, 4002, 4001, 4000, 3999, 3997, 3995, 3994, 3991, 3990,
	3988, 3986, 3984, 3983, 3982, 3981, 3980, 3979, 3978, 3977,
	3973, 3970, 3967, 3966, 3965, 3964, 3962, 3961, 3960, 251,
	3954, 3953, 224, 3952, 3234, 3950, 3949, 3948, 3946, 3945,
	3942, 3941, 252, 3940, 3939, 3938, 3937, 3935, 3934, 3933,
	3932, 3931, 3930, 3925, 260, 3923, 3908, 3907, 3901, 242,
	3900, 239, 3898, 184, 138, 3897, 3896, 3893, 3892, 3891,
	3890, 3886, 237, 194, 73, 3884, 53, 3883, 3880, 223,
	3877, 164, 3876, 160, 3875, 3874, 3873, 3872, 3869, 3868,
	3867, 3866, 3865, 3864, 3863, 3862, 3845, 3844, 3843, 3842,
	3841, 3839, 3835, 3833, 3831, 3830, 3829, 100, 3827, 269,
	3825, 81, 3823, 182, 137, 3822, 60, 136, 282, 1989,
	264, 266, 189, 174, 102, 3819, 343, 3818, 180, 233,
	162, 32, 3817, 150, 3816, 270, 48, 46, 263, 152,
	63, 165, 128, 3815, 222, 119, 113, 3805, 3802, 153,
	3798, 256, 187, 3795, 107, 3793, 3790, 3789, 3787, 3786,
	203, 191, 3785, 3784, 141, 3783, 3782, 89, 135, 3781,
	77, 144, 172, 143, 3780, 1121, 130, 140, 123, 104,
	3779, 83, 3778, 3777, 3775, 3774, 188, 3773, 3770, 134,
	71, 3767, 3766, 3765, 68, 3762, 82, 3760, 30, 3754,
	70, 3752, 3738, 3734, 3730, 3729, 3727, 3726, 3724, 3721,
	3716, 3715, 3714, 55, 3713, 3711, 9, 11, 16, 3710,
	26, 3697, 176, 3695, 3691, 3690, 3689, 3688, 96, 92,
	3687, 93, 170, 3685, 7, 29, 79, 3684, 3683, 227,
	525, 103, 156, 3682, 281, 3681, 3680, 3679, 163, 3677,
	2620, 3675, 3674, 3672, 3671, 3670, 3669, 23, 3667, 1,
	213, 47, 3665, 139, 146, 3664, 41, 50, 133, 202,
	142, 101, 3662, 3660, 3659, 535, 219, 99, 38, 0,
	3658, 226, 161, 3650, 3647, 3646, 265, 3645, 234, 240,
	177, 207, 261, 259, 3642, 3641, 75, 131, 3639, 169,
	35, 62, 145, 72, 20, 283, 3638, 14, 8, 181,
	3637, 212, 3636, 317, 17, 111, 157, 3633, 3632, 37,
	267, 3630, 3629, 3628, 132, 3627, 3625, 122, 80, 3624,
	3623, 3621, 3620, 36, 3619, 42, 13, 3618, 112, 3615,
	247, 3614, 249, 148, 190, 179, 159, 228, 235, 88,
	85, 3613, 1853, 158, 105, 22, 3612, 231, 3611, 198,
	121, 3610, 90, 3609, 245, 268, 205, 3608, 186, 12,
	51, 40, 31, 49, 10, 250, 196, 3605, 3604, 24,
	52, 3603, 57, 3600, 19, 3598, 3594, 45, 3592, 74,
	5, 3591, 3590, 18, 21, 3589, 39, 201, 173, 127,
	97, 78, 3588, 3587, 54, 183, 3586, 147, 167, 166,
	3585, 84, 3584, 3582, 3580, 3579, 887, 3577, 272, 3576,
	3575, 3571, 3570, 3569, 3568, 3567, 3564, 214, 3563, 108,
	44, 3562, 3561, 3559, 3558, 86, 155, 3557, 3556, 3554,
	3552, 34, 149, 3550, 15, 3549, 27, 25, 33, 3545,
	106, 3544, 3, 193, 3543, 3542, 4, 3541, 3540, 2,
	3539, 3538, 129, 3537, 95, 28, 171, 109, 3536, 3534,
	98, 220, 154, 3533, 3532, 118, 248, 200, 3529, 61,
	246, 262, 3528, 218, 3527, 3526, 3522, 3519, 3517, 3515,
	1145, 3514, 3513, 244, 76, 94, 3512, 230, 116, 3511,
	3509, 91, 168, 126, 117, 67, 87, 3504, 115, 197,
	3503, 199, 3501, 3500, 3497, 110, 3496, 3495, 3494, 3493,
	192, 3492, 3491, 195, 232, 3490, 3489, 275, 3488, 3486,
	3485, 3484, 3483, 3482, 3480, 3473, 3469, 3467, 238, 332,
	3466,
}

//line mysql_sql.y:12271
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) atTimeStampUnion() *tree.AtTimeStamp {
	v, _ := st.union.(*tree.AtTimeStamp)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() tree.GroupBy {
	v, _ := st.union.(tree.GroupBy)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) snapshotObjectUnion() tree.ObjectInfo {
	v, _ := st.union.(tree.ObjectInfo)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) upgrade_targetUnion() *tree.Target {
	v, _ := st.union.(*tree.Target)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 583, 586, 586, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 119, 119, 320, 320,
	321, 321, 149, 562, 562, 151, 151, 151, 151, 151,
	437, 120, 120, 120, 120, 120, 120, 120, 155, 155,
	155, 118, 568, 568, 568, 569, 569, 115, 138, 137,
	140, 140, 139, 139, 136, 136, 132, 135, 135, 134,
	134, 133, 128, 130, 130, 129, 131, 131, 116, 104,
	117, 511, 511, 510, 510, 509, 509, 462, 462, 463,
	463, 309, 309, 309, 508, 508, 508, 507, 507, 506,
	506, 505, 505, 503, 503, 504, 502, 501, 501, 501,
	499, 499, 499, 495, 495, 497, 496, 496, 498, 490,
	490, 493, 493, 491, 491, 491, 491, 494, 489, 489,
	489, 488, 488, 103, 103, 103, 404, 404, 102, 102,
	418, 418, 418, 418, 418, 416, 416, 416, 416, 416,
	416, 415, 415, 414, 414, 419, 419, 417, 417, 417,
	417, 417, 417, 417, 417, 417, 417, 417, 417, 417,
	417, 417, 417, 417, 417, 417, 417, 417, 417, 417,
	417, 417, 417, 417, 417, 417, 417, 417, 417, 417,
	417, 417, 417, 417, 417, 417, 417, 417, 417, 417,
	417, 417, 417, 417, 417, 417, 417, 417, 93, 93,
	93, 93, 93, 98, 98, 98, 574, 574, 573, 573,
	575, 575, 575, 575, 576, 576, 96, 96, 96, 97,
	413, 413, 413, 94, 95, 95, 403, 403, 408, 408,
	407, 407, 407, 407, 407, 407, 407, 407, 407, 407,
	407, 407, 407, 412, 412, 412, 410, 410, 409, 409,
	411, 411, 87, 87, 87, 90, 89, 402, 402, 402,
	402, 402, 402, 402, 402, 402, 88, 88, 88, 88,
	88, 88, 83, 83, 83, 83, 83, 82, 82, 84,
	84, 400, 400, 399, 99, 99, 100, 571, 571, 570,
	572, 572, 572, 572, 101, 107, 107, 107, 107, 107,
	107, 107, 107, 106, 106, 109, 109, 108, 110, 92,
	92, 92, 92, 92, 92, 91, 91, 91, 91, 91,
	91, 91, 91, 91, 91, 91, 91, 91, 536, 536,
	536, 538, 538, 334, 335, 587, 337, 333, 333, 333,
	532, 532, 533, 534, 535, 535, 535, 105, 14, 200,
	200, 436, 436, 11, 11, 11, 11, 11, 11, 11,
	11, 11, 13, 81, 86, 86, 271, 271, 276, 276,
	154, 277, 277, 277, 282, 282, 283, 283, 272, 272,
	272, 272, 272, 272, 272, 272, 272, 272, 272, 272,
	272, 272, 272, 272, 272, 272, 272, 272, 272, 272,
	258, 258, 258, 253, 253, 253, 253, 254, 254, 255,
	255, 256, 256, 256, 256, 257, 257, 326, 326, 278,
	278, 278, 280, 280, 279, 275, 273, 273, 273, 273,
	273, 273, 273, 274, 274, 274, 274, 281, 281, 79,
	85, 85, 85, 85, 550, 550, 80, 561, 561, 466,
	466, 349, 349, 348, 348, 348, 348, 348, 348, 348,
	348, 348, 348, 348, 348, 348, 348, 348, 348, 471,
	472, 344, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 54, 57, 58, 153, 53,
	53, 53, 389, 389, 52, 588, 588, 319, 319, 67,
	66, 56, 68, 69, 70, 71, 72, 73, 51, 65,
	65, 65, 65, 65, 65, 65, 65, 76, 484, 484,
	590, 590, 590, 74, 75, 465, 465, 465, 64, 63,
	62, 61, 60, 60, 50, 50, 49, 49, 55, 144,
	59, 145, 145, 341, 341, 341, 343, 343, 339, 347,
	347, 589, 589, 432, 432, 342, 342, 48, 48, 48,
	48, 77, 340, 340, 318, 338, 338, 338, 12, 12,
	10, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 26, 27, 29,
	397, 397, 394, 28, 20, 19, 19, 23, 22, 18,
	18, 21, 24, 25, 25, 9, 9, 9, 9, 15,
	15, 16, 173, 173, 226, 226, 544, 544, 540, 540,
	541, 541, 541, 542, 542, 543, 543, 111, 478, 478,
	478, 478, 478, 478, 8, 8, 195, 195, 477, 477,
	477, 477, 477, 477, 401, 401, 401, 521, 521, 521,
	522, 194, 194, 189, 189, 479, 479, 366, 523, 523,
	487, 487, 486, 486, 485, 485, 192, 192, 193, 193,
	176, 176, 123, 123, 492, 492, 492, 492, 500, 500,
	461, 461, 263, 263, 311, 311, 312, 312, 166, 166,
	167, 167, 167, 167, 167, 167, 577, 577, 578, 579,
	580, 580, 581, 581, 581, 582, 582, 582, 582, 582,
	529, 529, 531, 531, 530, 191, 191, 187, 187, 188,
	188, 188, 186, 186, 185, 184, 184, 183, 181, 181,
	181, 182, 182, 182, 199, 199, 169, 169, 169, 168,
	168, 168, 168, 168, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 170, 170, 537, 537,
	537, 467, 467, 467, 474, 474, 291, 291, 292, 292,
	290, 290, 171, 171, 172, 172, 172, 172, 289, 289,
	288, 174, 174, 180, 179, 179, 175, 175, 175, 175,
	299, 299, 298, 298, 298, 298, 114, 121, 121, 122,
	198, 198, 297, 296, 296, 296, 296, 197, 197, 196,
	196, 190, 190, 178, 178, 178, 178, 295, 177, 293,
	567, 567, 566, 566, 565, 563, 563, 563, 564, 564,
	564, 564, 513, 513, 513, 513, 513, 327, 327, 327,
	332, 332, 330, 330, 330, 330, 330, 336, 7, 7,
	7, 7, 7, 7, 7, 7, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 39,
	209, 210, 40, 211, 211, 212, 212, 213, 213, 214,
	215, 216, 216, 216, 216, 38, 201, 201, 202, 202,
	203, 203, 204, 205, 205, 205, 208, 206, 207, 207,
	585, 585, 584, 37, 37, 30, 158, 158, 159, 159,
	159, 161, 161, 259, 259, 259, 160, 160, 162, 162,
	162, 545, 547, 547, 549, 548, 548, 548, 551, 551,
	551, 551, 551, 552, 552, 552, 552, 553, 553, 31,
	141, 141, 146, 556, 556, 556, 555, 555, 557, 557,
	558, 558, 315, 315, 316, 316, 156, 157, 157, 148,
	143, 164, 164, 164, 164, 164, 165, 165, 142, 147,
	150, 152, 546, 554, 554, 554, 398, 398, 395, 396,
	396, 393, 392, 392, 392, 560, 560, 559, 559, 559,
	328, 328, 32, 388, 388, 390, 391, 391, 391, 382,
	382, 382, 382, 36, 386, 386, 387, 387, 387, 387,
	387, 387, 387, 383, 383, 385, 385, 381, 381, 381,
	381, 381, 381, 381, 35, 163, 163, 380, 380, 377,
	377, 375, 375, 376, 376, 374, 374, 374, 378, 378,
	43, 78, 44, 45, 46, 42, 379, 379, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 125, 124,
	124, 124, 124, 124, 127, 127, 314, 314, 313, 313,
	126, 260, 260, 41, 238, 238, 453, 453, 448, 448,
	448, 448, 448, 469, 469, 469, 449, 449, 449, 450,
	450, 450, 452, 452, 452, 451, 451, 451, 451, 451,
	468, 468, 470, 470, 470, 420, 420, 421, 421, 421,
	424, 424, 440, 440, 441, 441, 439, 439, 446, 446,
	445, 445, 444, 444, 443, 443, 442, 442, 442, 442,
	435, 435, 434, 434, 422, 422, 422, 422, 422, 423,
	423, 423, 433, 433, 438, 438, 287, 287, 286, 286,
	246, 246, 247, 247, 285, 285, 244, 244, 245, 245,
	245, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 519, 519, 520, 249,
	249, 261, 261, 261, 261, 261, 261, 248, 248, 250,
	250, 227, 227, 225, 225, 217, 217, 217, 217, 217,
	217, 218, 218, 219, 219, 220, 220, 220, 224, 224,
	223, 223, 223, 223, 221, 221, 222, 222, 222, 222,
	222, 222, 406, 406, 516, 516, 517, 517, 512, 512,
	512, 515, 515, 515, 515, 515, 515, 515, 518, 518,
	518, 514, 514, 228, 308, 308, 308, 329, 329, 329,
	329, 331, 307, 307, 307, 243, 243, 242, 242, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 405, 405, 345, 345, 346, 346, 270, 269, 269,
	269, 269, 269, 267, 268, 266, 266, 266, 266, 266,
	265, 265, 264, 264, 264, 384, 384, 262, 262, 252,
	252, 252, 251, 251, 251, 447, 353, 353, 353, 353,
	353, 353, 353, 353, 353, 353, 353, 353, 353, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 305, 305, 305, 306, 306,
	306, 306, 306, 306, 306, 306, 356, 356, 362, 362,
	528, 528, 527, 229, 229, 229, 230, 230, 230, 230,
	230, 230, 230, 230, 230, 239, 239, 239, 429, 429,
	429, 429, 430, 430, 430, 430, 431, 431, 431, 427,
	427, 428, 428, 367, 368, 368, 475, 475, 476, 476,
	425, 425, 426, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 483, 483, 483, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 539, 539, 539, 524, 524, 524,
	525, 525, 525, 525, 525, 525, 525, 525, 525, 525,
	525, 525, 526, 526, 526, 526, 526, 526, 526, 526,
	526, 526, 526, 526, 526, 526, 526, 526, 526, 303,
	303, 303, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	369, 369, 370, 370, 480, 480, 480, 480, 480, 480,
	481, 481, 482, 482, 482, 482, 473, 473, 473, 473,
	473, 473, 473, 473, 473, 473, 473, 473, 473, 473,
	473, 473, 473, 473, 473, 473, 473, 473, 473, 473,
	473, 473, 473, 473, 473, 354, 300, 300, 300, 371,
	363, 363, 364, 364, 365, 365, 357, 357, 357, 357,
	357, 357, 358, 358, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 352, 352, 352, 352, 352,
	352, 352, 352, 352, 352, 352, 359, 359, 361, 361,
	373, 373, 373, 372, 372, 372, 372, 372, 372, 372,
	241, 241, 241, 241, 351, 351, 351, 350, 350, 350,
	350, 350, 350, 350, 350, 350, 350, 350, 350, 231,
	231, 231, 231, 235, 235, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 236,
	236, 236, 236, 236, 234, 234, 234, 234, 234, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 112, 113, 113,
	233, 310, 310, 454, 454, 457, 457, 455, 455, 456,
	458, 458, 458, 459, 459, 459, 460, 460, 460, 464,
	464, 317, 317, 317, 325, 325, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 8, 8, 0, 2,
	0, 2, 6, 1, 2, 7, 9, 10, 10, 12,
	1, 5, 6, 8, 10, 9, 11, 13, 6, 8,
	10, 4, 0, 1, 1, 0, 1, 5, 2, 2,
	6, 9, 6, 9, 4, 7, 8, 0, 1, 1,
	2, 4, 6, 1, 2, 4, 0, 2, 10, 11,
	2, 0, 2, 1, 3, 3, 3, 0, 2, 0,
	2, 1, 3, 5, 0, 2, 3, 1, 3, 1,
	1, 1, 3, 1, 1, 1, 1, 0, 3, 3,
	0, 3, 3, 0, 1, 3, 0, 1, 3, 0,
	2, 1, 2, 3, 4, 3, 3, 1, 0, 1,
	1, 0, 1, 8, 5, 7, 0, 3, 8, 5,
	1, 3, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 4, 1, 3, 1, 2, 2,
	2, 2, 2, 2, 2, 1, 2, 2, 2, 2,
	1, 1, 2, 2, 1, 1, 1, 1, 1, 2,
	2, 2, 1, 2, 1, 2, 2, 1, 2, 1,
	1, 2, 2, 1, 1, 1, 3, 2, 2, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 4, 4, 1, 3, 3, 1,
	2, 2, 2, 1, 2, 2, 3, 4, 4, 6,
	1, 1, 1, 2, 4, 6, 1, 4, 1, 3,
	3, 4, 4, 4, 4, 3, 3, 2, 4, 4,
	2, 2, 2, 1, 1, 1, 1, 1, 1, 3,
	1, 3, 1, 1, 1, 2, 2, 0, 1, 4,
	2, 4, 1, 5, 3, 2, 1, 2, 2, 4,
	4, 5, 2, 1, 3, 4, 4, 1, 2, 9,
	7, 1, 3, 3, 1, 1, 3, 1, 3, 2,
	1, 2, 1, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 4, 2, 4, 3, 3, 1,
	1, 1, 1, 1, 1, 2, 3, 4, 7, 2,
	3, 3, 4, 5, 3, 4, 4, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 2, 1, 1, 1, 1, 6, 4, 1,
	1, 0, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 10, 7, 4, 4, 1, 3, 1, 6,
	7, 3, 3, 3, 1, 1, 1, 3, 2, 4,
	5, 5, 6, 5, 5, 3, 2, 2, 1, 3,
	4, 3, 7, 5, 8, 2, 2, 1, 3, 2,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 0,
	1, 2, 1, 3, 2, 1, 2, 2, 1, 2,
	3, 2, 2, 3, 6, 3, 3, 1, 1, 7,
	7, 7, 8, 8, 0, 4, 7, 0, 3, 0,
	2, 0, 1, 1, 1, 1, 4, 2, 2, 3,
	3, 4, 5, 3, 4, 4, 2, 2, 2, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 3, 3, 3, 2,
	5, 5, 0, 2, 7, 0, 1, 0, 1, 5,
	5, 3, 3, 2, 4, 4, 4, 4, 4, 1,
	1, 1, 3, 3, 1, 1, 1, 6, 0, 1,
	1, 1, 1, 5, 5, 0, 1, 1, 3, 3,
	3, 4, 7, 7, 5, 4, 7, 8, 3, 3,
	2, 3, 4, 0, 2, 2, 0, 2, 2, 0,
	5, 1, 1, 1, 1, 0, 1, 5, 5, 5,
	4, 3, 1, 3, 1, 1, 3, 5, 2, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 4, 4,
	1, 3, 1, 4, 6, 6, 4, 4, 4, 4,
	4, 3, 6, 3, 5, 1, 1, 2, 2, 11,
	8, 9, 1, 3, 2, 4, 0, 2, 0, 1,
	1, 1, 1, 0, 1, 0, 1, 4, 2, 1,
	5, 4, 4, 2, 5, 5, 1, 3, 2, 1,
	5, 4, 4, 2, 0, 5, 4, 0, 1, 3,
	3, 1, 3, 1, 3, 1, 3, 4, 0, 1,
	0, 1, 1, 3, 1, 1, 0, 4, 1, 3,
	2, 1, 0, 8, 0, 4, 7, 4, 0, 2,
	0, 2, 0, 2, 0, 4, 1, 3, 1, 1,
	6, 4, 5, 7, 4, 5, 0, 1, 3, 8,
	0, 6, 0, 4, 6, 1, 1, 1, 1, 1,
	2, 3, 1, 3, 6, 0, 3, 0, 1, 2,
	4, 4, 0, 1, 3, 1, 3, 3, 0, 1,
	1, 0, 2, 2, 0, 2, 3, 3, 3, 1,
	3, 3, 3, 3, 1, 2, 2, 1, 2, 2,
	1, 2, 2, 1, 2, 2, 7, 7, 1, 1,
	1, 0, 1, 1, 1, 1, 0, 2, 0, 3,
	0, 2, 1, 3, 1, 2, 3, 5, 0, 1,
	2, 1, 3, 1, 1, 1, 4, 4, 4, 3,
	2, 2, 2, 3, 2, 3, 4, 1, 3, 4,
	0, 2, 1, 1, 2, 2, 2, 0, 1, 2,
	4, 1, 3, 1, 3, 2, 3, 1, 4, 3,
	0, 1, 1, 2, 5, 2, 2, 2, 0, 2,
	3, 3, 0, 1, 3, 1, 3, 0, 1, 2,
	1, 1, 0, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 7,
	1, 1, 7, 1, 3, 0, 1, 1, 3, 1,
	3, 0, 1, 1, 1, 14, 1, 3, 0, 1,
	1, 3, 1, 1, 2, 4, 1, 1, 1, 1,
	0, 1, 2, 9, 9, 7, 1, 2, 3, 3,
	3, 0, 4, 1, 1, 1, 1, 1, 0, 1,
	1, 1, 1, 1, 4, 1, 1, 1, 3, 3,
	4, 3, 3, 0, 1, 1, 1, 0, 2, 7,
	8, 8, 8, 0, 3, 3, 0, 3, 0, 3,
	0, 5, 1, 3, 0, 3, 3, 0, 2, 9,
	7, 0, 2, 2, 3, 3, 0, 2, 4, 4,
	4, 4, 1, 0, 2, 2, 1, 3, 2, 1,
	3, 2, 1, 3, 2, 0, 1, 3, 4, 3,
	1, 1, 4, 1, 3, 1, 1, 1, 1, 0,
	1, 1, 1, 11, 0, 2, 3, 3, 2, 2,
	3, 1, 1, 1, 3, 3, 4, 0, 2, 2,
	2, 2, 2, 2, 6, 0, 4, 1, 1, 0,
	3, 0, 1, 1, 2, 4, 4, 4, 0, 1,
	8, 2, 4, 4, 4, 9, 0, 2, 11, 9,
	11, 8, 6, 9, 7, 10, 7, 6, 2, 2,
	9, 4, 5, 3, 0, 4, 1, 3, 0, 3,
	6, 0, 2, 10, 0, 2, 0, 2, 0, 3,
	2, 4, 3, 0, 2, 1, 0, 2, 3, 0,
	2, 3, 0, 2, 1, 0, 3, 2, 4, 3,
	0, 1, 0, 1, 1, 0, 6, 0, 3, 5,
	0, 4, 0, 3, 1, 3, 4, 5, 0, 3,
	1, 3, 2, 3, 1, 2, 0, 4, 6, 5,
	0, 2, 0, 2, 4, 5, 4, 5, 1, 5,
	6, 5, 0, 3, 0, 1, 1, 3, 3, 3,
	0, 4, 1, 3, 3, 3, 0, 1, 1, 3,
	2, 3, 3, 3, 4, 4, 3, 3, 3, 3,
	4, 4, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 1, 5, 4, 1, 3, 3, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 2, 4, 0, 2, 5, 5, 5,
	5, 0, 1, 1, 3, 1, 1, 1, 1, 1,
	7, 9, 7, 9, 2, 1, 7, 9, 7, 9,
	8, 5, 0, 1, 0, 1, 1, 1, 1, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 3, 1, 3, 5, 1, 1, 1,
	1, 1, 1, 3, 5, 0, 1, 1, 2, 1,
	2, 2, 1, 1, 2, 2, 2, 3, 3, 2,
	2, 1, 5, 6, 4, 1, 1, 1, 5, 4,
	1, 1, 2, 0, 1, 1, 2, 5, 0, 1,
	1, 2, 2, 3, 3, 1, 1, 2, 2, 2,
	0, 1, 2, 2, 2, 0, 3, 0, 3, 1,
	1, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 1, 1,
	1, 1, 3, 5, 2, 2, 2, 2, 4, 1,
	1, 2, 5, 6, 8, 6, 6, 6, 1, 1,
	1, 1, 1, 1, 3, 4, 4, 4, 7, 9,
	7, 7, 7, 9, 7, 7, 0, 2, 0, 1,
	1, 2, 4, 1, 2, 2, 1, 2, 2, 1,
	2, 2, 2, 2, 2, 0, 1, 1, 1, 2,
	2, 2, 2, 2, 2, 2, 1, 1, 1, 2,
	5, 0, 1, 3, 0, 1, 0, 2, 0, 2,
	0, 1, 6, 8, 8, 6, 6, 5, 5, 5,
	6, 6, 6, 6, 5, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 1, 1, 1, 4, 4,
	6, 8, 6, 4, 5, 4, 4, 4, 3, 4,
	6, 6, 7, 4, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 8, 4, 2, 3, 2, 4, 2, 2, 4,
	6, 2, 2, 4, 6, 4, 2, 4, 4, 4,
	0, 1, 2, 3, 1, 1, 1, 1, 1, 1,
	0, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 1, 1, 3,
	0, 1, 1, 3, 1, 3, 3, 3, 3, 3,
	2, 1, 1, 1, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 1, 3, 4, 4, 5, 4,
	5, 3, 4, 5, 6, 1, 0, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 1, 1, 2, 3,
	1, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 2, 2, 2, 2, 2,
	2, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 4, 4, 1, 2, 3, 5,
	1, 1, 3, 0, 1, 0, 3, 0, 3, 3,
	0, 3, 5, 0, 3, 5, 0, 1, 1, 0,
	1, 1, 2, 2, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1,
}

var yyChk = [...]int{
	-1000, -583, -586, -2, -5, 623, -1, -4, -113, -87,
	-7, -14, -115, -116, -8, -111, -9, -10, -12, -91,
	-106, -108, -110, -109, -47, -11, -105, -82, -83, -93,
	-99, -102, -103, -104, -117, -112, -114, -166, -118, -119,
	-120, -155, 613, -88, -89, -90, -33, -32, -31, -30,
	-141, -146, -149, -151, 546, 619, 449, 14, 498, -15,
	-16, -529, -17, 260, -333, -334, -335, -337, -587, -48,
	-49, -50, -60, -61, -62, -63, -64, -74, -75, -76,
	-51, -52, -53, -56, -54, -67, -66, -68, -69, -70,
	-71, -72, -73, -55, -59, -144, -145, -77, -57, -78,
	-58, -153, -80, -79, -85, -81, -86, -143, -148, -13,
	-154, 235, -84, 76, -94, -95, -96, -97, -98, -100,
	-101, 373, 379, 436, 612, 61, -167, -169, 631, 632,
	635, 160, 161, 163, 164, -34, -35, -36, -37, -38,
	-39, -41, -40, -42, -43, -44, -45, -46, 231, 16,
	541, -18, -21, -19, -22, -20, -28, -29, -27, -24,
	-26, -142, -25, -147, -23, -150, -152, 255, 254, 38,
	321, 322, 323, 377, 253, 232, 15, 31, 42, 352,
	-168, 83, 533, 534, 536, 233, -170, 13, 637, -6,
	-3, -2, -128, -132, -136, -139, -140, -137, -138, -4,
	-113, 118, 245, 614, -329, 369, 615, 617, 616, 86,
	94, -322, -324, 449, 260, 373, 379, 612, 632, 635,
	548, 549, 550, 551, 552, 553, 554, 555, 557, 558,
	559, 560, 561, 562, 563, 573, 574, 564, 565, 566,
	567, 568, 569, 570, 571, 575, 576, 577, 578, 579,
	580, 581, 582, 583, 584, 585, 586, 587, 588, 501,
	598, 599, 600, 601, 529, 556, 592, 593, 594, 595,
	350, 351, 538, 272, 296, 404, 302, 309, 160, 179,
	173, 201, 193, 534, 168, 276, 314, 277, 93, 163,
	484, 108, 461, 433, 166, 291, 293, 295, 530, 531,
	363, 298, 528, 297, 299, 301, 532, 278, 353, 189,
	184, 290, 274, 182, 279, 40, 280, 206, 281, 282,
	543, 457, 349, 463, 306, 52, 431, 183, 458, 294,
	460, 210, 214, 475, 476, 177, 178, 465, 478, 205,
	208, 209, 252, 346, 347, 43, 540, 264, 479, 212,
	204, 200, 487, 310, 308, 203, 176, 199, 275, 65,
	216, 215, 217, 427, 428, 429, 430, 283, 284, 367,
	474, 196, 185, 354, 169, 23, 482, 259, 462, 380,
	285, 303, 311, 211, 213, 266, 271, 542, 533, 435,
	270, 307, 480, 181, 263, 292, 258, 483, 170, 536,
	382, 286, 164, 300, 477, 486, 64, 395, 175, 167,
	630, 249, 161, 268, 273, 287, 288, 289, 527, 313,
	312, 304, 535, 197, 265, 202, 187, 174, 198, 162,
	267, 485, 396, 610, 352, 414, 195, 192, 269, 242,
	481, 464, 165, 418, 397, 190, 315, 605, 606, 607,
	368, 345, 316, 317, 188, 256, 455, 456, 320, 424,
	336, 398, 434, 405, 399, 223, 224, 324, 467, 469,
	207, 608, 325, 326, 327, 459, 328, 329, 330, 331,
	372, 56, 58, 95, 98, 97, 633, 634, 63, 29,
	358, 361, 393, 400, 338, 611, 539, 335, 339, 340,
	362, 25, 416, 384, 420, 419, 48, 49, 50, 53,
	54, 55, 57, 59, 60, 51, 526, 377, 390, 488,
	45, 47, 387, 27, 364, 415, 437, 334, 417, 448,
	46, 446, 447, 468, 26, 366, 365, 62, 44, 423,
	425, 426, 318, 332, 375, 620, 489, 370, 386, 389,
	371, 337, 360, 391, 67, 66, 383, 621, 378, 376,
	333, 544, 545, 341, 572, 355, 432, 523, 522, 521,
	520, 519, 518, 517, 516, 321, 322, 323, 401, 402,
	403, 413, 406, 407, 408, 409, 410, 411, 412, 451,
	452, 622, 470, 472, 473, 471, 237, 636, 356, 357,
	240, 624, 625, 96, 626, 628, 627, 28, 629, -411,
	-409, -329, 534, 612, 379, 533, 536, 373, 352, 632,
	635, 377, 260, 321, 322, 323, 449, 350, -211, -329,
	636, -176, 244, 39, -225, -329, -176, -84, -16, -15,
	-168, -169, -225, 239, -338, 24, 431, -92, 432, 235,
	83, 77, -329, -9, -104, -8, -111, -82, -166, 436,
	-336, -329, 321, 321, -336, 239, -331, 270, 412, -329,
	-466, 245, -415, -388, 271, -414, -390, -417, -391, 32,
	231, 233, 232, 546, 267, 16, 377, 241, 14, 13,
	378, 253, 25, 26, 28, 15, 379, 381, 29, 382,
	385, 386, 387, 42, 390, 391, 260, 86, 94, 89,
	278, -210, -329, -365, -357, 115, -360, -352, -353, -355,
	-309, -503, -350, 83, 142, 143, 150, 116, 638, -354,
	-447, 36, 118, 552, 556, 592, 499, -301, -302, -303,
	-304, -305, -306, -329, -504, -502, 89, 99, 101, 105,
	106, 104, 102, 154, 186, 103, 90, 155, -169, 86,
	-524, 562, -323, 585, 598, 599, 600, 601, 584, 61,
	-473, -482, 238, -480, 153, 191, 256, 187, 14, 148,
	424, 188, 593, 594, 595, 559, 581, 501, 563, 573,
	588, 554, 555, 557, 549, 550, 551, 553, 564, 566,
	580, -483, 576, 586, 587, 572, 596, 597, 589, 590,
	591, 628, 88, 87, 579, 578, 565, 560, 561, 567,
	548, 558, 568, 569, 577, 582, 583, 361, 108, 362,
	363, 491, 353, 364, 245, 431, 70, 365, 366, 367,
	368, 369, 498, 370, 71, 371, 360, 260, 414, 372,
	190, 207, 503, 502, 504, 495, 492, 490, 493, 494,
	496, 497, 570, 571, 575, -121, -122, 603, -577, -294,
	-578, 6, 7, 8, 9, -579, 155, -568, 433, 542,
	89, 314, 350, 17, 491, 165, 162, -402, 165, 114,
	170, 169, -402, 167, 630, 324, 266, -379, -158, 350,
	414, 328, 95, 270, -382, -380, 530, -468, 318, 314,
	290, 240, 111, -159, 250, 249, 109, 491, 238, 388,
	309, 56, 58, -540, -541, 228, 229, 230, -531, 524,
	-530, -329, 363, 97, 98, 630, 27, 239, 374, 266,
	469, 467, 468, 470, 471, 472, 473, -65, -484, -465,
	464, 463, -342, 456, 462, 454, 466, 457, 351, 330,
	546, 329, 231, 624, 531, 525, -317, 398, 434, 488,
	489, 375, 435, 475, 477, 458, 108, 194, 191, 240,
	242, 239, 630, 350, 491, 414, 95, 328, -540, 162,
	475, 477, 270, 412, 41, -408, 424, -407, -409, 476,
	487, 87, 88, 474, -317, 108, 455, 455, -577, -294,
	-167, -169, -114, -529, 532, 532, 532, 240, 350, 414,
	270, 241, 239, 527, 530, 242, 491, 238, 321, 374,
	266, 328, 95, 167, 630, -467, -537, 32, -474, 225,
	226, 227, 33, 34, -1, 122, 637, -357, -357, -6,
	640, -6, -357, -329, -329, 157, -231, -235, -232, -234,
	-233, -237, -236, 191, 192, 153, 195, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 208, 209, 206, 31,
	207, 256, 187, 188, 189, 190, 210, 173, 193, 539,
	218, 174, 219, 175, 220, 176, 221, 177, 178, 222,
	179, 182, 183, 184, 185, 181, 156, -200, 89, 32,
	83, 156, 89, -192, 262, -176, -225, -217, 156, 638,
	-192, -577, -185, -186, 11, -225, -307, -329, 433, 125,
	-92, 77, -92, 432, 77, -532, -533, -534, -536, 235,
	432, 431, -109, 156, 278, 17, -336, -336, 81, -225,
	-390, 270, -415, -388, 36, 80, 157, 243, 157, 80,
	83, 375, 350, 414, 376, 491, 239, 388, 242, 270,
	389, 350, 414, 239, 242, 491, 270, 350, 239, 242,
	414, 270, 389, 350, 454, 455, 242, 27, 380, 383,
	384, 455, -488, 487, 157, 114, 111, 112, 113, -357,
	132, -372, 125, 126, 127, 128, 129, 130, 131, 139,
	138, 149, 142, 143, 144, 145, 146, 147, 148, 140,
	141, 135, 115, 133, 137, 134, 117, 152, -169, -357,
	-365, 61, -355, -355, -355, -355, -329, -447, -362, -357,
	83, 83, 83, 83, 156, 102, 89, -357, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	-481, 83, 83, -369, -370, 83, 83, -350, -307, 83,
	89, 89, 83, 83, 83, 89, 83, 83, 83, -370,
	-370, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, -186, 157, -185, 83,
	-185, -186, -170, -169, 32, 33, 32, 33, 32, 33,
	32, 33, -580, 621, 83, 99, 633, 223, 17, -329,
	630, -329, 480, 541, 168, 169, 170, -377, 245, -377,
	-209, -329, -211, 374, 242, 527, 242, -159, -377, -377,
	-377, -377, -377, 241, -377, 24, 239, 239, 239, 239,
	-377, 498, 125, 125, 59, -542, 172, 157, -531, -191,
	83, -341, 133, 137, -341, -290, 18, -290, 24, 268,
	268, 268, -341, 308, -588, -589, 17, 135, -339, -589,
	-339, -339, -341, -590, 241, 465, 43, 269, 268, -187,
	-188, 22, -187, 459, 455, -432, 460, 461, -343, -589,
	-342, -341, -341, -342, -341, -341, -341, 32, 239, 242,
	491, 328, 625, -588, -588, 31, 31, -466, -466, -225,
	-466, -466, 525, -318, -329, -466, -466, -466, -543, 244,
	-574, -573, 478, -576, 480, 162, -409, 162, -409, -390,
	270, 270, 157, 125, 24, -410, 125, 136, -409, -409,
	-410, -410, -248, 41, -328, 153, -329, 89, -248, 41,
	-571, -570, -225, -186, -170, -169, 84, 84, 84, 535,
	535, 535, -466, -466, -466, -466, -466, -468, -466, -466,
	-466, -466, -466, -336, -201, -329, -211, 245, -466, -466,
	-466, -466, -171, -172, 144, -357, -329, -171, -3, -130,
	-129, 119, 120, 122, 615, 369, 614, 618, 612, -409,
	41, -460, 396, 395, -454, -456, 83, -455, 83, -455,
	-455, -455, -455, -455, 83, 83, -457, 83, -457, -457,
	-454, -458, 83, -458, -459, 83, -459, -458, -329, -436,
	541, -363, -365, -329, 39, -477, 61, -166, 83, 31,
	83, -192, -329, 639, 188, 167, 629, -478, 61, -166,
	83, 31, -186, -123, 39, -188, 21, 156, 99, 89,
	-109, -92, 77, -109, 84, 157, -535, 105, 106, -538,
	205, 197, -329, -107, 89, -7, -8, -9, -10, -47,
	-82, -79, -166, 232, -505, -503, 83, 32, 423, 80,
	17, -416, 239, 491, 374, 266, 242, 350, -414, -397,
	-394, -392, -328, -390, -393, -392, -419, -307, 455, -124,
	438, 437, 320, -357, -357, -357, -357, -357, 104, 115,
	345, 105, 106, -352, -373, 32, 316, 317, -353, -353,
	-353, -353, -353, -353, -353, -353, -353, -353, -353, -353,
	-361, -371, -447, 83, 135, 133, 137, 134, 117, -355,
	-355, -353, -353, -250, -328, 153, 84, 157, -357, -528,
	-527, 119, -357, -357, -357, -357, -329, -525, -526, 505,
	506, 507, 508, 509, 510, 511, 512, 513, 514, 515,
	365, 360, 366, 364, 353, 372, 367, 368, 190, 522,
	523, 516, 517, 518, 519, 520, 521, -363, -363, -357,
	-525, -363, -300, 33, 32, -365, -365, -365, 84, -357,
	-539, 343, 342, 344, -189, -329, -363, 84, 84, 84,
	99, -365, -365, -363, -353, -363, -363, -363, -363, -526,
	-300, -300, -300, -300, 144, -365, -365, -300, -300, -300,
	-300, 144, -300, -300, -300, -300, -300, -300, -300, -300,
	-300, -300, 84, 84, 84, 144, -365, -187, -122, -486,
	-485, -357, 41, -123, -188, -581, 622, 83, -307, -569,
	89, 89, 638, 167, 17, 491, 188, 17, 239, 481,
	482, 166, 169, 168, -329, 115, -329, 35, 83, -201,
	-377, -377, -377, -547, -329, 90, -398, -395, -392, -329,
	-329, -388, -329, -318, -225, -377, -377, -377, -377, -225,
	-259, 53, 54, 55, -392, -160, 56, 57, -543, -530,
	35, -190, -329, -290, -355, -355, -357, -392, 270, -588,
	-341, -341, -319, -318, -343, -338, -343, -343, -290, -339,
	-341, -341, -357, -343, -339, -290, -329, 455, -290, -290,
	-432, -341, -340, -329, -340, -377, -318, -319, -319, -225,
	-225, -271, -276, -272, -277, 262, 236, 358, 359, 234,
	232, 11, 233, -284, 309, -378, 499, -254, -255, 77,
	42, -257, 260, 400, 393, 272, 276, 93, 277, 433,
	278, 241, 280, 281, 282, 297, 299, 252, 283, 284,
	285, 424, 286, 161, 298, 287, 288, 289, 376, -249,
	6, 331, 41, 51, 52, 447, 446, 544, 541, 273,
	-329, -547, -545, 31, -329, 31, -398, -329, -329, -179,
	-174, -178, -175, -180, -293, -295, -177, 83, -225, -169,
	-329, 157, 479, 481, 482, -574, -410, -574, -410, 32,
	423, -413, 423, 32, -388, -407, 475, 477, -403, 89,
	424, -393, -412, 80, 153, -485, -410, -410, -412, -412,
	152, 157, -572, 480, 481, 228, -187, 99, 99, 99,
	-227, -225, -547, -397, -388, -329, -466, -227, -227, -227,
	-331, -331, 83, 156, 36, -329, -329, -329, -329, -289,
	157, -288, 17, -330, -329, 35, 89, 156, -289, -131,
	-129, 121, -357, -6, 614, -357, -6, -6, -357, -6,
	-357, -464, 397, 99, 99, -310, 89, -310, 99, 99,
	99, 547, 84, 89, -401, 80, -479, -366, -523, 603,
	-194, 84, -189, -521, -522, -189, -193, -329, -477, -217,
	125, 125, 125, -479, -194, 84, -521, -187, 604, -123,
	-184, -183, -357, -329, 24, -109, -92, -533, 156, 350,
	157, -190, -416, -396, -393, -418, 144, -329, -404, 157,
	541, 641, 87, 243, -560, -559, 415, 84, 157, -489,
	244, 498, 89, 638, 431, 223, 224, 104, 345, 105,
	106, -447, -365, -361, -355, -355, -353, -353, -359, 257,
	-359, 114, -357, 639, -356, -527, 121, -357, 35, 157,
	35, 157, 81, 156, 84, 84, 17, 17, 84, -357,
	84, 84, 84, 84, 17, 17, -357, 84, 156, 84,
	84, 84, 84, 81, 84, 157, 84, 84, 84, 84,
	157, -365, -365, -357, -365, 84, 84, 84, -357, -357,
	-357, -365, 84, -357, -357, -357, -357, -357, -357, -357,
	-357, -357, -357, -426, 450, -426, -426, 157, 157, 157,
	84, -123, 83, 99, 157, 634, -314, -313, 89, -329,
	167, -329, 125, 630, -329, 167, 170, 170, 169, 24,
	36, 307, 24, -210, -212, -213, -214, -215, -216, 135,
	158, 159, 83, -225, -225, -225, -549, 401, -561, 157,
	41, -559, 491, 239, -156, 320, -381, 81, -163, 17,
	541, -225, -225, -225, -225, -238, 35, 17, -173, -226,
	-329, 83, 84, 157, -389, 81, -329, -319, -290, -290,
	-343, -290, -290, 157, 23, -341, -343, -343, -347, 638,
	-339, -347, 156, -347, -318, -453, 35, -191, 157, 21,
	262, -224, -326, -221, -223, 247, -346, -222, 250, -517,
	248, 246, 109, 251, 305, 110, 241, -326, -326, 247,
	-258, 243, 35, -326, -274, 241, 348, 305, 248, 21,
	262, -273, 241, 110, -329, 247, 251, 248, 246, -325,
	125, -317, 152, 243, 43, 376, -325, 545, 262, -325,
	-325, -325, -325, -325, -325, -325, 279, 279, -325, -325,
	-325, -325, -325, -325, -325, -325, -325, -325, -325, 162,
	-325, -325, -325, -325, -325, -325, 83, 274, 275, 307,
	-550, 401, 31, 356, 356, 357, -561, 31, -164, 350,
	31, -296, -297, -298, -299, 68, 72, 74, 78, 69,
	70, 71, 75, 31, 157, -327, -332, 35, -329, 89,
	-327, -169, -174, -179, -327, 83, -573, -575, 483, 480,
	486, -412, -412, 243, 83, 125, -412, -412, 41, -328,
	-570, 487, 481, -123, 157, 80, -227, -202, -203, -204,
	-205, -231, -307, 192, 195, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 208, 209, 206, 207, 256, 187,
	188, 189, 190, 210, 173, 193, 539, 174, 175, 176,
	177, 178, 179, 182, 183, 184, 185, 181, -329, -211,
	-290, -172, -174, -329, 89, -329, 144, -290, 122, -6,
	120, -135, -134, -133, 123, 612, 618, 122, 122, 122,
	84, 84, 84, 157, 84, 84, 84, 157, 84, 157,
	99, -492, 460, 40, 157, 83, 84, 157, 61, 157,
	125, 84, 157, -357, -329, 89, -357, 84, 61, -123,
	89, 157, -181, 37, 38, 156, 433, -329, -503, 84,
	-418, 157, 243, 156, 156, -394, 379, -328, -396, 21,
	541, -307, 39, -314, 125, 638, -329, 84, -359, -359,
	114, -355, -352, 84, 122, -357, 120, -229, -231, 395,
	396, -357, -229, -230, -236, 153, 191, 256, 190, 189,
	187, 395, 396, -248, -329, -357, -357, 84, -357, -357,
	17, -329, -248, -353, -357, -186, -186, 84, 84, -425,
	-426, -425, -425, 84, 84, 84, 84, -425, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 83, 99,
	101, 99, 101, -485, -582, 63, 620, 62, 423, 104,
	310, 157, 99, 89, 639, 157, 125, -329, 17, 239,
	-357, 188, 17, 170, -562, 314, 350, -437, 99, 314,
	350, 491, 387, 84, 157, -307, -202, -191, 83, -191,
	-552, 462, 403, 413, -325, -349, -348, 352, 42, -471,
	424, 409, 410, -395, 270, -329, -329, -558, 96, 125,
	80, 335, 339, 340, 336, 337, 338, -375, -376, -374,
	-378, -545, 83, 83, -166, 35, 133, -163, 83, 83,
	35, -448, 325, -231, -225, -173, -329, 17, 157, -544,
	156, -1, -329, -388, -341, -290, -357, -357, -290, -341,
	-341, 167, -343, -329, -448, -231, 35, -272, 236, 233,
	-422, 307, 308, -423, -438, 310, -440, 83, -228, -307,
	-222, -516, -517, -377, -329, 110, -516, 110, 83, -228,
	-307, -307, -275, -340, -307, -329, -329, -329, -329, -280,
	-279, -307, -282, 32, -283, -329, -329, -329, -329, 110,
	-329, 110, -253, 41, 48, 49, 50, -325, -325, 194,
	-256, 41, 423, 425, 426, -282, 99, 99, 99, 99,
	89, 89, 89, -325, -325, 99, 89, -332, 89, -518,
	169, 45, 46, 99, 99, 99, 99, 41, 89, -261,
	41, 290, 294, 291, 292, 293, 89, 99, 41, 99,
	41, 99, 41, -329, 83, -519, -520, 89, -437, -552,
	-325, 356, -409, 125, 125, -349, -557, 320, -165, 491,
	32, -195, 236, 233, -545, -400, -399, -307, -178, -178,
	-178, -178, 68, 68, 68, 68, 73, 68, 73, 68,
	-298, -400, -180, -191, -332, 84, -567, -566, -565, -563,
	76, 244, 77, -363, 480, 484, 485, -396, -344, 89,
	-403, -199, 24, -225, -225, -470, 300, 301, 84, 157,
	-231, -292, 19, 156, -292, 118, -6, -131, -133, -357,
	-6, -357, 614, 369, 615, 89, 99, 99, -500, 444,
	439, 441, 110, -366, -487, -486, 61, -166, -189, -479,
	-522, -485, -329, 639, 639, 639, 639, 61, -166, -479,
	-199, -492, -183, -182, 44, -329, 99, 17, -393, -388,
	144, 144, -329, 380, -404, 89, 402, 89, 239, 639,
	89, -314, -352, -357, 84, -239, 178, 177, -239, 35,
	84, 84, -455, -455, -454, -457, -454, -239, -239, 84,
	84, 24, 84, 84, 84, -357, 84, 84, 157, -475,
	500, -476, 574, -425, -425, -425, -425, -425, -425, -425,
	-425, -425, -425, -425, -425, -425, -425, -425, -425, -368,
	-367, 262, 445, 627, 627, 445, 627, 627, 84, 157,
	-525, 157, -320, 315, -320, -313, 89, 243, 167, -329,
	125, 630, -329, 89, 307, -329, -329, 89, 89, -214,
	-231, 84, 35, -218, -219, -220, -228, -221, -223, 35,
	-553, 93, -548, 89, -329, 90, -554, 93, 404, 155,
	354, 41, 405, 406, 421, 349, 99, 99, 411, -546,
	-329, -164, -164, -556, 52, 125, 89, -225, -374, -317,
	152, 281, 328, -287, -286, -329, 89, -218, -166, -225,
	-218, -218, -166, -449, 327, 21, 99, 143, -192, 81,
	156, -174, -226, -329, 144, 84, -290, -347, -290, -290,
	125, -341, -449, -166, -434, 311, 83, -432, 83, -432,
	110, 336, -441, -439, 262, -278, 45, 47, -231, -514,
	-329, -512, -514, -329, -512, -512, -377, -357, -278, -228,
	243, 31, 233, -281, 333, 334, 339, -405, 306, 115,
	-405, 157, -181, 157, -329, -248, -248, 31, 89, 89,
	-227, 84, 157, 125, 89, -553, -548, 125, -410, 89,
	89, -554, -558, 125, -157, 93, -318, 157, -195, -195,
	-290, 157, 125, -197, -196, 80, 81, -198, 80, -196,
	68, 68, -290, -565, -564, 24, -517, -517, -517, 84,
	84, 15, -204, 41, -291, 20, 21, 144, -291, 122,
	120, 122, 122, -329, 84, 84, -461, 605, -496, -498,
	439, 21, 21, 15, 244, 84, -479, -479, -500, 45,
	46, -388, -404, 424, -225, 157, 639, -229, -357, 84,
	-357, 84, 89, 84, 89, -186, 21, 84, 157, 84,
	84, 84, 157, 84, 84, -357, 84, -525, -321, 188,
	89, -321, 350, -329, 17, -357, 188, -437, 307, 307,
	239, 237, -166, 84, 157, -166, 89, -551, 415, 89,
	89, 99, 41, 99, 155, 407, -472, -157, -157, -555,
	93, 125, 638, 83, -325, -325, -325, -329, 84, 157,
	-325, -325, 84, 84, 84, -246, 541, -450, 261, 99,
	143, 99, 143, 99, -327, -174, -329, -290, -544, 156,
	89, -290, -450, -424, 312, 99, -353, 83, -353, 83,
	-433, 309, 83, 84, 157, -329, -307, -243, -242, -240,
	104, 115, 41, 393, -241, 93, 152, 295, 298, 297,
	273, 296, -270, -345, 80, 399, 333, 334, -378, 605,
	529, 246, 109, 110, 381, -346, 83, 83, 81, 315,
	83, 83, -514, 84, -278, -307, 41, -281, 41, 346,
	306, -279, -329, 152, -248, 84, -520, 89, -551, 89,
	-412, -556, 89, 89, -545, -186, -399, -485, -357, 83,
	-357, 83, 68, 11, 19, -350, -357, -365, 245, -6,
	615, 369, -263, 606, 89, 21, 89, -494, 89, -400,
	-461, -126, -260, -317, 278, 84, 84, 84, -425, -425,
	-428, -427, -431, 445, 307, 453, -365, 89, 89, 84,
	84, 89, -329, 243, 167, 125, 89, -437, -437, -329,
	-206, -231, -161, 541, -246, -220, -161, 21, 541, 353,
	41, 99, 41, 408, 125, 105, 106, -315, -316, 89,
	-383, -385, -307, 83, -248, -250, 89, -286, -350, -350,
	-244, -166, 35, -245, -284, -378, -125, -124, -244, 83,
	-451, 161, 99, 143, 99, 99, -290, -290, 639, -451,
	-440, 21, 84, -419, 84, -419, 83, 125, -353, -439,
	-442, 61, -240, 104, -353, 89, -250, -251, 41, 294,
	290, 125, 125, -252, 41, 274, 275, -262, 83, 305,
	15, 194, 83, 110, 110, -225, -383, -383, -515, 335,
	336, 337, 341, 339, 340, 338, -515, -383, -383, 83,
	-406, -405, -353, -325, -325, 152, -555, -187, -190, -513,
	-329, 246, 21, 21, -329, -329, -311, 607, 99, 89,
	441, -263, -462, 608, -490, -432, -248, 125, 84, -430,
	117, 407, 411, -351, -354, 99, 101, 186, 155, 84,
	84, 350, -329, -357, 89, 89, 307, 540, -162, 60,
	487, 89, 90, 402, 89, 90, 353, 89, 639, 157,
	125, 84, 157, -454, -357, -420, 262, -166, 157, -284,
	-317, -126, -420, -247, -285, -329, 89, -469, 169, 326,
	541, 99, 143, 99, -186, -452, 169, 326, -423, 84,
	84, 84, -419, 99, 84, -446, -443, 83, -284, 264,
	135, 89, 89, 99, 83, -480, 31, 89, -384, 83,
	84, 84, 84, 84, -383, 99, -248, -325, 84, 84,
	157, 83, 21, -311, -463, 609, 89, -499, 444, -493,
	-491, 439, 440, 441, 442, 89, -429, -430, 411, -351,
	-354, 603, 451, 451, 451, -329, 243, -437, -208, -329,
	305, 424, -316, 89, -386, -385, -181, 84, -421, 314,
	21, -284, -325, -421, 84, 157, -325, -325, 326, 99,
	143, 99, -187, 326, -435, 313, 84, -446, -284, -445,
	-444, 312, 265, 83, 84, -357, -369, -325, 84, -265,
	-264, 537, -383, -386, 81, -386, 81, -386, 81, -386,
	81, 84, -248, -329, 246, -312, -329, -494, 89, -501,
	244, -497, -498, 443, -491, 21, 441, 21, 21, -127,
	157, 114, 452, 452, 452, 350, 89, -207, 35, 446,
	380, -387, 252, 346, 347, 93, 541, 333, 334, -181,
	21, -422, -248, -285, -350, -350, 99, 99, 84, 157,
	-329, 261, 83, -364, -358, -357, 261, 84, -329, -269,
	-267, -268, 80, 458, 303, 304, 84, -515, -515, -515,
	-515, -270, 84, 157, -508, 83, 99, -496, -495, -497,
	21, -494, 21, -494, -494, 448, -429, -329, 89, -325,
	-325, 89, 89, 332, -307, 83, -434, -444, -443, -364,
	84, 157, -405, -268, 80, -267, 80, 16, 15, -386,
	-386, -386, -386, -329, -511, 31, 84, -507, -506, -308,
	-502, -329, 444, 445, 89, -494, 125, -585, -584, 626,
	99, 99, -329, -419, -424, 84, -358, -266, 300, 301,
	31, 169, -266, -510, -509, -309, 84, 157, 156, 89,
	89, 84, -440, 104, 41, 302, 157, 125, -506, -329,
	-509, 41, -357, 156, -329,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 0, 292, 293, 294, 908, 909, 910, 911,
	912, 913, 914, 915, 0, 0, 0, 0, 0, 665,
	666, 0, 630, 0, 0, 0, 0, 0, 0, 512,
	513, 514, 515, 516, 517, 518, 519, 520, 521, 522,
	523, 524, 525, 526, 527, 528, 529, 530, 531, 532,
	533, 534, 535, 536, 537, 538, 539, 540, 541, 542,
	543, 544, 393, 394, 395, 396, 397, 398, 399, 400,
	401, 0, 317, 313, 238, 239, 240, 241, 242, 324,
	325, 489, 0, 0, 0, 0, 748, -2, 82, 0,
	0, 306, 0, 297, 297, 916, 917, 918, 919, 920,
	921, 922, 923, 924, 925, 926, 927, 928, -2, 678,
	0, 631, 632, 633, 634, 635, 636, 637, 638, 639,
	640, 641, 642, 643, 644, 645, 646, 377, 378, 379,
	373, 374, 376, 375, -2, 0, 678, 0, 0, 0,
	756, 0, 0, 0, 0, 0, 799, 821, 23, 0,
	7, 9, 10, 11, 12, 13, 14, 15, 16, 17,
	18, 0, 0, 19, 0, 19, 0, 0, 0, 1327,
	1328, 1329, 1330, 2111, 2081, -2, 1852, 1829, 2005, 2006,
	2142, 2143, 2144, 2145, 2146, 2147, 2148, 2149, 2150, 2151,
	2152, 2153, 2154, 2155, 2156, 2157, 2158, 2159, 2160, 2161,
	2162, 2163, 2164, 2165, 2166, 2167, 2168, 2169, 2170, 2171,
	2172, 2173, 2174, 2175, 2176, 2177, 2178, 2179, 2180, 2181,
	2182, 2183, 2184, 2185, 2186, 2187, 2188, 2189, 2190, 2191,
	1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795,
	1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805,
	1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815,
	1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825,
	1826, 1827, 1828, 1830, 1831, 1832, 1833, 1834, 1835, 1836,
	1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846,
	1847, 1848, 1849, 1850, 1851, 1853, 1854, 1855, 1856, 1857,
	1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867,
	1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877,
	1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887,
	1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897,
	1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907,
	1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917,
	1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928,
	1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938,
	1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948,
	1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958,
	1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968,
	1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978,
	1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988,
	1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
	1999, 2000, 2001, 2002, 2003, 2004, 2007, 2008, 2009, 2010,
	2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020,
	2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030,
	2031, 2032, 2033, 2034, 2035, 2036, 2037, -2, 2039, 2040,
	2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050,
	2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060,
	2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070,
	2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080,
	2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091,
	2092, 2093, 2094, 2095, 2096, -2, -2, -2, 2100, 2101,
	2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110, 2112,
	2113, 2114, 2115, 2116, 2117, 2118, 2119, 2120, 2121, 2122,
	2123, 2124, 2125, 2126, 2127, 2128, 2129, 2130, 2131, 0,
	290, 288, 1799, 1829, 1852, 1906, 1917, 1918, 1953, 2005,
	2006, 2038, 2081, 2097, 2098, 2099, 2111, 0, 0, 933,
	0, 726, 0, 0, 731, 1275, 726, 318, 667, 668,
	756, 782, 628, 0, 355, 0, 1843, 359, 2088, 0,
	0, 0, 625, 349, 350, 351, 352, 353, 354, 0,
	0, 907, 0, 0, 345, 0, 312, 1908, 2110, 1331,
	0, 0, 0, 0, 0, 181, 1053, 183, 1055, 187,
	195, 0, 0, 0, 200, 201, 204, 205, 206, 207,
	208, 0, 212, 0, 214, 217, 0, 219, 220, 0,
	223, 224, 225, 0, 235, 236, 237, 1056, 1057, 1058,
	-2, 110, 931, 1757, 1644, 0, 1651, 1664, 1675, 1408,
	1409, 1410, 1411, 0, 0, 0, 0, 0, 0, 1419,
	1420, 0, 1448, 2146, 2187, 2188, 0, 1428, 1429, 1430,
	1431, 1432, 1433, 121, 133, 134, 1697, 1698, 1699, 1700,
	1701, 1702, 1703, 0, 1705, 1706, 1707, 1615, 1395, 1327,
	0, 2155, 0, 2177, 2182, 2183, 2184, 2185, 2176, 0,
	0, 1600, 0, 1590, 0, 0, -2, -2, 0, 0,
	1978, -2, 2189, 2190, 2191, 2152, 2173, 2181, 2156, 2157,
	2180, 2148, 2149, 2150, 2143, 2144, 2145, 2147, 2159, 2161,
	2172, 0, 2168, 2178, 2179, 2086, 0, 0, 0, 0,
	0, 2128, 135, 136, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 1611, -2, -2, 1614, -2, 1617, -2, -2, -2,
	-2, 1622, 1623, -2, 1625, -2, -2, -2, -2, -2,
	-2, -2, 1602, 1603, 1604, 1605, 1594, 1595, 1596, 1597,
	1598, 1599, -2, -2, -2, 782, 857, 0, 782, 0,
	757, 804, 807, 810, 813, 760, 0, 0, 83, 84,
	0, 0, 0, 0, 0, 307, 308, 296, 298, 0,
	302, 0, 295, 1089, 1089, 0, 0, 0, 0, 1089,
	1089, 1089, 1089, 1089, 0, 1089, 0, 0, 0, 0,
	0, 1089, 0, 966, 1060, 1061, 1062, 1087, 1088, 1161,
	0, 0, 0, 683, 679, 680, 681, 682, 770, 0,
	772, 775, 603, 603, 830, 830, 549, 0, 0, 0,
	603, 0, 563, 555, 0, 0, 0, 603, 0, 0,
	777, 777, 0, 606, 615, 603, 603, -2, 603, 603,
	600, 603, 0, 0, 1101, 569, 570, 571, 555, 555,
	574, 575, 576, 586, 587, 616, 1781, 0, 0, 489,
	489, 0, 489, 489, 0, 489, 489, 489, 685, 1948,
	1850, 1923, 1908, 2110, 0, 263, 1978, 268, 0, 1851,
	1870, 0, 0, 1888, 0, -2, 0, 334, 782, 0,
	0, 756, 0, 0, 0, 0, 0, 489, 489, 489,
	489, 489, 1160, 489, 489, 489, 489, 489, 0, 0,
	0, 489, 489, 489, 489, 0, 0, 822, 823, 818,
	819, 820, 824, 825, 5, 6, 19, 0, 0, 0,
	0, 0, 0, 89, 88, 0, 1758, 1776, 1710, 1711,
	1712, 1763, 1714, 1767, 1767, 1767, 1767, 1743, 1744, 1745,
	1746, 1747, 1748, 1749, 1750, 1751, 1767, 1767, 0, 0,
	1756, 1734, 1765, 1765, 1765, 1763, 1760, 1715, 1716, 1717,
	1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727,
	1728, 1770, 1770, 1773, 1773, 1770, 0, 391, 389, 390,
	1640, 0, 0, 0, 0, 726, 730, 1273, 0, 0,
	0, 782, -2, 0, 0, 629, 356, 1332, 0, 0,
	360, 0, 361, 0, 0, 0, 380, 0, 383, 368,
	369, 370, 364, 0, 161, 0, 347, 348, 0, 0,
	314, 0, 0, 0, 490, 0, 0, 0, 0, 0,
	0, 192, 188, 196, 199, 209, 216, 0, 228, 230,
	233, 189, 197, 202, 203, 210, 231, 190, 193, 194,
	198, 232, 234, 191, 211, 215, 229, 213, 218, 221,
	222, 227, 0, 162, 0, 0, 0, 0, 0, 1650,
	0, 0, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, -2, 1644,
	0, 0, 1414, 1415, 1416, 1417, 0, 1421, 0, 1449,
	0, 0, 0, 0, 0, 1704, 1708, 0, 1640, 1640,
	0, 1640, 1636, 0, 0, 0, 0, 0, 0, 1640,
	1573, 0, 0, 1575, 1591, 0, 0, 1577, 1578, 0,
	1581, 1582, 1640, 0, 1640, 1586, 1640, 1640, 1640, 1569,
	1570, 0, 1636, 1636, 1636, 1636, 0, 0, 1636, 1636,
	1636, 1636, 1636, 1636, 1636, 1636, 1636, 1636, 1636, 1636,
	1636, 1636, 0, 0, 0, 0, 777, 0, 783, 0,
	-2, 0, 801, 803, 805, 806, 808, 809, 811, 812,
	814, 815, 762, 0, 0, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 300, 0, 305, 0, 0, 0,
	0, 930, 0, 0, 1089, 1089, 1089, 967, 0, 0,
	0, 0, 0, 0, 0, 0, 1089, 1089, 1089, 1089,
	0, 1107, 0, 0, 0, 685, 684, 0, 771, 0,
	0, 830, 0, 0, 546, 547, 0, 548, 0, 555,
	603, 603, 561, 562, 557, 556, 611, 612, 606, 0,
	606, 606, 830, 0, 580, 581, 582, 603, 603, 588,
	778, 0, 589, 590, 606, 0, 613, 614, 830, 0,
	0, 830, 830, 0, 598, 599, 601, 603, 0, 0,
	1089, 0, 621, 557, 557, 1782, 1783, 0, 0, 1098,
	0, 0, 0, 0, 624, 0, 0, 0, 0, 686,
	243, 246, 0, 249, 0, 1948, 0, 1948, 0, 256,
	0, 0, 0, 0, 0, 0, 286, 287, 0, 0,
	0, 0, 277, 280, 1267, 1268, 1050, 1051, 281, 282,
	326, 327, 0, 777, 800, 802, 796, 797, 798, 0,
	0, 0, 0, 0, 0, 0, 0, 489, 0, 0,
	0, 0, 0, 661, 0, 946, 663, 0, 0, 0,
	0, 0, 838, 832, 834, 902, 121, 838, 8, 106,
	103, 0, 19, 0, 0, 19, 19, 0, 19, 291,
	0, 1779, 1777, 1778, 1713, 1764, 0, 1739, 0, 1740,
	1741, 1742, 1752, 1753, 0, 0, 1735, 0, 1736, 1737,
	1738, 1729, 0, 1730, 1731, 0, 1732, 1733, 289, 388,
	0, 0, 1641, 934, 0, 704, 718, 699, 0, 707,
	0, 0, 1275, 1276, 0, 0, 0, 687, 718, 689,
	0, 707, 777, 754, 0, 732, 0, 0, 357, 0,
	365, 362, 0, 366, 0, 0, 382, 384, 385, 386,
	371, 372, 626, 343, 344, 335, 336, 337, 338, 339,
	340, 341, 342, 0, 346, 131, 0, 315, 316, 0,
	0, 0, 175, 176, 177, 178, 179, 180, 182, 166,
	650, 652, 1042, 1054, 0, 1045, 0, 185, 226, 158,
	0, 0, 0, 1645, 1646, 1647, 1648, 1649, 1654, 0,
	1656, 1658, 1660, 1662, 0, 1680, -2, -2, 1396, 1397,
	1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407,
	1665, 1678, 1679, 0, 0, 0, 0, 0, 0, 1676,
	1676, 1671, 0, 1434, 1269, 1270, 1412, 0, 0, 1446,
	1450, 0, 0, 0, 0, 0, 122, 1635, 1540, 1541,
	1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551,
	1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561,
	1562, 1563, 1564, 1565, 1566, 1567, 1568, 0, 0, 1644,
	0, 0, 0, 1637, 1638, 0, 0, 0, 1528, 0,
	0, 1534, 1535, 1536, 0, 713, 0, 1601, 1574, 1592,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 856, 858, 0,
	722, 724, 725, 751, 732, 758, 0, 0, 0, 81,
	86, 0, 1128, 0, 0, 0, 0, 0, 0, 309,
	310, 0, 0, 304, 0, 0, 0, 0, -2, 0,
	0, 0, 0, 0, 982, 983, 487, 1036, 0, 0,
	0, 1052, 1077, 1085, 0, 0, 0, 0, 0, 1134,
	968, 973, 974, 975, 969, 970, 976, 977, 0, 773,
	0, 0, 871, 545, 604, 605, 831, 552, 1908, 557,
	830, 830, 564, 558, 565, 608, 566, 567, 568, 606,
	830, 830, 779, 603, 606, 591, 607, 606, 609, 595,
	0, 602, 609, 622, 609, 0, 620, 572, 573, 1136,
	775, 404, 405, 406, 408, 0, 457, 457, 457, 440,
	457, 0, 0, 428, 1784, 0, 0, 0, 0, 437,
	1784, 0, 0, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
	0, 0, 1784, 1784, 1784, 1784, 1784, 1784, 1784, 1784,
	1784, 1784, 1784, 0, 1784, 1784, 1784, 1784, 1784, 1253,
	1784, 0, 1099, 447, 448, 449, 450, 455, 456, 0,
	0, 484, 0, 0, 981, 0, 487, 0, 1021, 843,
	0, 844, 845, 841, 873, 897, 897, 0, 897, 877,
	1275, 0, 0, 254, 255, 244, 0, 245, 0, 257,
	258, 0, 260, 261, 262, 269, 1850, 1923, 264, 266,
	0, 0, 270, 283, 284, 285, 0, 0, 275, 276,
	0, 0, 329, 330, 332, 0, 732, 1102, 1103, 1104,
	647, 1271, 648, 649, 653, 0, 0, 656, 657, 658,
	659, 660, 948, 0, 0, 1028, 1029, 1030, 1031, 830,
	0, 839, 0, 835, 903, 0, 905, 0, 830, 0,
	104, 19, 0, 97, 94, 0, 0, 0, 0, 0,
	1759, 1709, 1780, 0, 0, 0, 1761, 0, 0, 0,
	0, 0, 87, 734, 694, 0, 698, 715, 0, 719,
	0, 0, 711, 703, 708, 0, 0, 728, 695, 1274,
	0, 0, 0, 688, 0, 0, 693, 732, 0, 755,
	784, 785, 788, 1333, 0, 367, 363, 381, 0, 489,
	0, 0, 0, 169, 1039, 0, 170, 174, 164, 0,
	0, 0, 1044, 0, 1041, 1046, 0, 184, 0, 0,
	159, 160, 1119, 1128, 0, 0, 0, 1655, 1657, 1659,
	1661, 1663, 0, 1666, 1676, 1676, 1672, 0, 1667, 0,
	1669, 0, 1645, 1418, 0, 1451, 0, 0, 0, 0,
	0, 0, 0, 0, 1518, 1519, 0, 0, 1523, 0,
	1525, 1526, 1527, 1529, 0, 0, 0, 1533, 0, 1572,
	1593, 1576, 1579, 0, 1583, 0, 1585, 1587, 1588, 1589,
	0, 782, 782, 0, 0, 1490, 1490, 1490, 0, 0,
	0, 0, 1490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1435, 0, 1436, 1437, 0, 0, 0,
	859, 752, 0, 0, 0, 0, 0, 1126, 0, 71,
	0, 0, 0, 0, 0, 311, 299, 301, 0, 0,
	1090, 0, 0, 0, 0, 936, 937, 939, 0, 942,
	943, 944, 948, 775, 0, 775, 993, 1784, 491, 0,
	0, 1038, 0, 0, 1010, 0, 0, 0, -2, 0,
	0, 1085, 0, 0, 0, 1138, 0, 0, 0, 672,
	676, 23, 776, 0, 550, 0, 551, 603, 559, 560,
	830, 583, 584, 0, 0, 830, 603, 603, 594, 0,
	606, 617, 0, 618, 619, 1138, 0, 0, 1098, 1204,
	1172, 418, 0, 1288, 1289, 458, 0, 1295, 1304, 1089,
	1365, 0, 1304, 0, 0, 1306, 1307, 0, 0, 0,
	0, 441, 442, 0, 427, 0, 0, 0, 0, 0,
	0, 426, 0, 0, 468, 0, 0, 0, 0, 0,
	1785, 1784, 1784, 0, 435, 436, 0, 439, 0, 0,
	0, 0, 0, 0, 0, 0, 1784, 1784, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1244,
	0, 0, 0, 0, 0, 0, 0, 1259, 1260, 0,
	993, 1784, 0, 0, 0, 0, 491, 1008, 1026, 0,
	0, 0, 0, 0, 0, 863, 0, 0, 0, 862,
	0, 0, 0, 0, 0, 775, 898, 0, 900, 901,
	875, -2, 0, 843, 880, 1640, 247, 248, 0, 0,
	253, 271, 273, 0, 0, 0, 272, 274, 278, 279,
	328, 331, 333, 794, 0, 0, 1162, 0, 949, 950,
	952, 953, 0, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 1834, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 947, 664,
	828, 833, 840, 904, 906, 122, 836, 828, 0, 107,
	19, 106, 98, 99, 0, 19, 0, 0, 0, 0,
	1769, 1768, 1754, 0, 1755, 1766, 1771, 0, 1774, 0,
	392, 738, 0, 0, 718, 720, 0, 0, 718, 0,
	0, 727, 0, 0, 0, 0, 0, 0, 718, 794,
	734, 0, 791, 789, 790, 0, 0, 627, 132, 387,
	0, 0, 0, 0, 0, 651, 0, 1043, 166, 0,
	0, 186, 0, 0, 0, 1128, 1123, 1639, 1668, 1670,
	0, 1677, 1673, 1413, 1422, 1447, 0, 0, 1453, 1465,
	1465, 0, 0, 0, 1456, 1767, 1767, 1459, 1763, 1765,
	1763, 1465, 1465, 0, 123, 0, 0, 1524, 0, 0,
	0, 714, 0, 0, 0, 1486, 1488, 1490, 1490, 1497,
	1491, 1498, 1499, 1490, 1490, 1490, 1490, 1504, 1490, 1490,
	1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1484, 0,
	0, 1698, 1699, 723, 0, 0, 765, 766, 767, 768,
	769, 0, 0, 58, 58, 1128, 0, 72, 0, 0,
	78, 0, 0, 303, 62, 63, 0, 0, 70, 0,
	0, 0, 0, 0, 941, 0, 0, 0, 1281, 0,
	997, 994, 995, 996, 0, 1033, 492, 493, 494, 495,
	0, 0, 0, 1037, 0, 1021, 1021, 1003, 0, 0,
	0, 1078, 1079, 1080, 1081, 1082, 1083, 1084, -2, 1093,
	0, 0, 0, 1281, 1112, 0, 0, 1117, 1281, 1281,
	0, 1146, 0, 1135, 726, 0, -2, 0, 0, 674,
	0, 0, 872, 553, 830, 577, 780, 781, 609, 830,
	830, 0, 603, 623, 1146, 1137, 0, 407, 457, 0,
	1192, 0, 0, 1198, 0, 1205, 411, 0, 459, 0,
	1294, 1321, 1305, 1321, 1366, 1321, 1321, 1089, 0, 459,
	0, 0, 429, 465, 0, 0, 0, 0, 0, 425,
	462, 788, 412, 414, 415, 416, 466, 467, 469, 0,
	471, 472, 431, 443, 444, 445, 446, 0, 0, 0,
	438, 451, 452, 453, 454, 413, 1221, 1222, 1223, 1226,
	1227, 1228, 1229, 0, 0, 1232, 1233, 1234, 1235, 1236,
	1318, 1319, 1320, 1237, 1238, 1239, 1240, 1241, 1242, 1243,
	1261, 1262, 1263, 1264, 1265, 1266, 1245, 1246, 1247, 1248,
	1249, 1250, 1251, 1252, 0, 0, 1256, 0, 0, 997,
	0, 0, 0, 0, 0, 1033, 1010, 0, 1017, 0,
	1022, 1023, 0, 0, 696, 830, 321, 0, 867, 860,
	0, 849, 864, 865, 866, 852, 0, 854, 0, 850,
	851, 830, 842, 874, 899, 876, 879, 881, 882, 888,
	0, 0, 0, 0, 250, 251, 252, 259, 0, 511,
	265, 750, 0, 1272, 654, 655, 1163, 1164, 662, 0,
	954, 826, 0, 0, 826, 102, 105, 0, 100, 0,
	0, 0, 0, 92, 90, 1762, 0, 0, 740, 146,
	0, 0, 0, 716, 0, 721, 718, 702, 712, 701,
	709, 710, 729, 1277, 1278, 1279, 1280, 718, 692, 691,
	753, 738, 786, 787, 0, 1334, 358, 0, 1040, 166,
	171, 172, 173, 167, 165, 1047, 0, 1049, 0, 1121,
	0, 0, 1674, 1452, 1423, 1454, 1466, 1467, 1455, 0,
	1425, 1426, 1457, 1458, 1460, 1461, 1462, 1463, 1464, 1427,
	1520, 0, 1522, 1530, 1531, 0, 1580, 1584, 0, 0,
	0, 0, 0, 1495, 1496, 1500, 1501, 1502, 1503, 1505,
	1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 782,
	1485, 0, 0, 0, 0, 0, 0, 0, 763, 0,
	0, 0, 60, 0, 60, 1127, 1129, 0, 0, 0,
	0, 0, 64, 65, 0, 0, 0, 929, 932, 938,
	940, 0, 0, 0, 1282, 1283, 1285, 1286, 1287, 0,
	965, 0, 0, 985, 986, 987, 999, 0, 0, 0,
	497, 498, 0, 0, 0, 510, 506, 507, 508, 488,
	1032, 1017, 1017, 1006, 0, 0, 1016, 0, 1094, 1784,
	1784, 1784, 0, 0, 1206, 1784, 1784, 0, 1114, 1116,
	0, 0, 1210, 1149, 0, 0, 1140, 0, 897, 0,
	0, 830, 673, 676, 677, 774, 554, 592, 596, 593,
	0, 830, 1149, 403, 1170, 0, 0, 0, 0, 0,
	1202, 0, 0, 1174, 0, 430, 460, 0, -2, 0,
	1322, 0, 1308, 1322, 0, 0, 1321, 0, 419, 459,
	0, 0, 0, 473, 477, 478, 0, 475, 1361, 0,
	476, 0, 464, 0, 470, 1224, 1225, 0, 1230, 1231,
	0, 1255, 0, 0, 410, 479, 0, 0, 0, 480,
	481, 486, 1003, 0, 1020, 0, 1027, 0, 1024, 1025,
	782, 0, 0, 846, 868, 0, 0, 847, 0, 848,
	853, 855, 320, 883, 0, 0, 885, 886, 887, 878,
	267, 795, 951, 0, 816, 0, 0, 837, 817, 0,
	19, 0, 0, 95, 1772, 1775, 742, 0, 739, 147,
	0, 0, 0, 0, 706, 717, 700, 690, 740, 792,
	793, 168, 163, 1048, 1131, 0, 1122, 0, 0, 1532,
	0, 1490, 1487, 1490, 1489, 1481, 0, 1438, 0, 1440,
	1441, 1442, 0, 1444, 1445, 0, 761, 0, 56, 0,
	59, 57, 0, 73, 0, 79, 0, 0, 0, 0,
	0, 0, 971, 1210, 0, 971, 998, 984, 0, 1034,
	1035, 0, 499, 500, 0, 503, 509, 1000, 1001, 1002,
	0, 0, 1014, 0, 0, 0, 0, 1086, 1100, 0,
	0, 0, -2, 0, -2, 1111, 0, 1155, 0, 1147,
	0, 1139, 0, 1142, 830, 830, -2, 670, 675, 0,
	0, 597, 1155, 1172, 0, 1193, 0, 0, 0, 0,
	0, 0, 0, 1173, 0, 1186, 461, 1323, -2, 1337,
	1339, 0, 1099, 1342, 1343, 0, 0, 0, 0, 0,
	0, 1387, 1351, 0, 0, 1355, 1356, 1357, 0, 0,
	1360, 0, 1692, 1693, 0, 1364, 0, 0, 0, 0,
	0, 0, 0, 1302, 420, 421, 0, 423, 424, 1784,
	1362, 463, 417, 1784, 433, 1254, 1257, 1258, 485, 482,
	483, 1006, 1009, 1018, 697, 777, 322, 323, 869, 0,
	861, 892, 889, 0, 0, 955, 827, 829, 96, 101,
	0, 0, 744, 0, 741, 0, 735, 737, 157, 705,
	742, 117, 149, 0, 0, 1424, 1521, 1571, 1493, 1494,
	0, 1482, 0, 1476, 1477, 1478, 1483, 0, 0, 764,
	759, 61, 75, 0, 0, 0, 66, 0, 0, 0,
	0, 957, 964, 978, 1105, 1284, 963, 0, 0, 496,
	501, 0, 504, 505, 0, 1004, 1005, 0, 1012, 0,
	0, 1073, 1763, 0, 1095, 1096, 1097, 1207, 1208, 1209,
	1165, 1113, 0, -2, 1218, 0, 1109, 1131, 1165, 0,
	1143, 0, 1150, 0, 1148, 1141, 782, 671, 610, 1152,
	409, 1204, 1194, 0, 1196, 0, 0, 0, 0, 1175,
	-2, 0, 1338, 1340, 1341, 1344, 1345, 1346, 1392, 1393,
	1394, 0, 0, 1349, 1389, 1390, 1391, 1350, 0, 0,
	0, 0, 0, 1690, 1691, 1385, 0, 0, 1309, 1311,
	1312, 1313, 1314, 1315, 1316, 1317, 1310, 0, 0, 0,
	1301, 1303, 422, 0, 0, 1784, 1019, 319, 0, 0,
	893, 895, 890, 891, 91, 93, 108, 0, 743, 148,
	0, 744, 119, 0, 140, 0, 1132, 0, 1492, 1479,
	0, 0, 0, 0, 0, 1694, 1695, 1696, 0, 1439,
	1443, 0, 74, 80, 67, 68, 0, 0, 0, 979,
	980, 988, 989, 0, 991, 992, 502, 1007, 1011, 1014,
	0, 1064, 0, 788, 0, 1167, 0, 1115, 1098, 1220,
	1784, 1118, 1167, 0, 1212, 1784, 1784, 1133, 0, 1145,
	0, 1157, 0, 1151, 777, 402, 0, 1154, 1190, 1195,
	1197, 1199, 0, 1203, 1201, 1176, -2, 0, 1184, 0,
	0, 1347, 1348, 0, 0, 1590, 1784, 0, 1380, 0,
	1064, 1064, 1064, 1064, 0, 474, 432, 0, 870, 884,
	0, 0, 0, 733, 109, 0, 118, 137, 0, 150,
	151, 0, 0, 0, 0, 1124, 0, 1468, 0, 0,
	0, 1472, 1473, 1474, 1475, 76, 0, 0, 0, 956,
	0, 990, 1013, 1015, 1063, 1074, 1075, 788, 1108, 0,
	1204, 1219, 0, 1110, 1211, 0, 0, 0, 1144, 1156,
	0, 1159, 669, 1153, 1171, 0, 1200, 1177, 1185, 0,
	1180, 0, 0, 0, 1388, 0, 1354, 0, 1359, 1368,
	1381, 0, 0, 1290, 0, 1292, 0, 1296, 0, 1298,
	0, 0, 434, 894, 896, 0, 746, 736, 120, 124,
	0, 146, 143, 0, 152, 0, 0, 0, 0, 1120,
	0, 0, 1469, 1470, 1471, 0, 69, 0, 958, 959,
	972, 1065, 1784, 1784, 0, 0, 0, 1071, 1072, 1076,
	0, 1192, 1224, 1213, 1214, 1215, 1158, 1191, 1179, 0,
	-2, 1187, 0, 0, 1642, 1652, 1653, 1352, 1358, 1367,
	1369, 1370, 0, 1382, 1383, 1384, 1386, 1064, 1064, 1064,
	1064, 1300, 745, 0, 111, 0, 0, 141, 142, 144,
	0, 153, 0, 155, 156, 0, 1480, 77, 960, 0,
	0, 1068, 1069, 0, 1168, 0, 1170, 1181, -2, 0,
	1189, 0, 1353, 1371, 0, 1372, 0, 0, 0, 1291,
	1293, 1297, 1299, 747, 1130, 0, 125, 0, 127, 129,
	130, 1324, 138, 139, 145, 154, 0, 945, 961, 0,
	1066, 1067, 1070, 0, 1172, 1188, 1643, 1373, 1375, 1376,
	0, 0, 1374, 112, 113, 0, 126, 0, 0, 1125,
	962, 1169, 1166, 1377, 1379, 1378, 0, 0, 128, 1325,
	114, 115, 116, 0, 1326,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 116, 3, 3, 3, 147, 139, 3,
	83, 84, 144, 142, 157, 143, 156, 145, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 640, 637,
	126, 125, 127, 3, 641, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 149, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 638, 138, 639, 150,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 85, 86, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 117, 118, 119, 120, 121, 122, 123, 124,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	140, 141, 146, 148, 151, 152, 153, 154, 155, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 57956, 631, 57957, 632, 57958, 633, 57959, 634,
	57960, 635, 57961, 636, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:818
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:825
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:831
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:839
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:845
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:849
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:864
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:868
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:874
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:879
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:883
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:916
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 56:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:927
		{
			var timestamp = yyDollar[2].str
			var isS3 = false
			var dir = yyDollar[4].str
			var parallelism = yyDollar[6].str
			var option []string
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 57:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:938
		{
			var timestamp = yyDollar[2].str
			var isS3 = true
			var dir string
			var parallelism string
			var option = yyDollar[5].strsUnion()
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 58:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:950
		{
			yyVAL.str = ""
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:954
		{
			yyVAL.str = yyDollar[2].str
		}
	case 60:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:959
		{
			yyVAL.str = ""
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:963
		{
			yyVAL.str = yyDollar[2].str
		}
	case 62:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:971
		{
			yyLOCAL = &tree.CreateSnapShot{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Object:      yyDollar[6].snapshotObjectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:981
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELCLUSTER,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:991
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 65:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1003
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				PitrValue:   yyDollar[6].int64ValUnion(),
				PitrUnit:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1013
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELCLUSTER,
				PitrValue:   yyDollar[8].int64ValUnion(),
				PitrUnit:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1023
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				AccountName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:   yyDollar[9].int64ValUnion(),
				PitrUnit:    yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1034
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:    yyDollar[9].int64ValUnion(),
				PitrUnit:     yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-12 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1045
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[9].cstrUnion().Compare()),
				PitrValue:    yyDollar[11].int64ValUnion(),
				PitrUnit:     yyDollar[12].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1059
		{
			yyLOCAL = yyDollar[1].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1067
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELCLUSTER,
				SnapShotName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}

		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1075
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELACCOUNT,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[6].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1083
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELDATABASE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1092
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELTABLE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[10].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1102
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELACCOUNT,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[9].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1111
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELDATABASE,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName:  tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[11].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-13 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1121
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELTABLE,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName:  tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:     tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[10].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[13].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1134
		{
			yyLOCAL = &tree.RestorePitr{
				Level:         tree.RESTORELEVELACCOUNT,
				TimeStampExpr: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1141
		{
			yyLOCAL = &tree.RestorePitr{
				Level:         tree.RESTORELEVELDATABASE,
				DatabaseName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				TimeStampExpr: yyDollar[8].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1149
		{
			yyLOCAL = &tree.RestorePitr{
				Level:         tree.RESTORELEVELTABLE,
				DatabaseName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				TableName:     tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TimeStampExpr: yyDollar[10].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1160
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1180
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1186
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1193
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1201
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1207
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1216
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1226
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1234
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1242
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1250
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1260
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1268
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1278
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1285
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1294
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1304
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1308
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1314
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1318
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1324
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1333
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1343
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1347
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1353
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1362
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1366
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1372
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1393
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
			yyLOCAL.(*tree.Load).Param.Strict = yyDollar[11].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1407
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1414
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1418
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1424
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1428
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1434
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1441
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1449
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1453
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error strict flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1465
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1469
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1483
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1487
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1492
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1499
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1503
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1507
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1513
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1522
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1533
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1537
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1543
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1547
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1553
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1557
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1563
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1587
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            goto ret1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1606
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1610
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1614
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1619
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1623
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1632
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1642
		{
			yyVAL.str = ""
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1649
		{
			yyVAL.str = yyDollar[3].str
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1654
		{
			yyVAL.str = "\n"
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1661
		{
			yyVAL.str = yyDollar[3].str
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1666
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1670
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1698
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1702
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1708
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1716
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1736
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1755
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1780
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1784
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1788
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1793
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1797
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 163:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1803
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 164:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1816
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 165:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1827
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1840
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1844
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1854
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1867
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1880
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1886
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1892
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1900
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  dbName,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1910
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1920
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1924
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1928
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1932
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1936
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1940
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1947
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1951
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1957
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1964
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1973
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1977
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1983
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1987
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1991
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1995
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1999
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPGRADE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2003
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2007
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2011
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2015
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2019
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2023
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2027
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2031
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2035
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2039
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2043
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2047
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2051
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2055
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2059
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2063
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2067
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2071
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2075
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2079
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2083
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2087
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2091
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2095
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2099
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2103
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2107
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2111
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2115
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2119
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2123
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2127
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2131
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2135
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2139
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2143
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2147
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2151
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2155
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2159
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2163
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2167
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2171
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2175
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2179
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2183
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2196
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2203
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2210
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2220
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2224
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2230
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2237
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2245
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2249
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2253
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2257
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2263
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2267
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2273
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2280
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2287
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 259:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2296
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2326
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2330
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2334
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2340
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2346
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 265:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2350
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2357
		{
			yyVAL.str = yyDollar[3].str
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2363
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2367
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2373
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2381
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2390
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2399
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2407
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2415
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2438
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2461
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2468
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2475
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2483
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2490
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2497
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2506
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2510
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2514
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2520
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2524
		{
			yyVAL.str = yyDollar[1].str
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2530
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2534
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2540
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2544
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2555
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2561
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2566
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2570
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2574
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2578
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2582
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2586
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2590
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2594
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2598
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2604
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2608
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2612
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 309:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2616
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 310:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2621
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 311:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2626
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2632
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2645
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2658
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2671
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2684
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2700
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 319:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2707
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 320:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2718
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].joinTableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2729
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2733
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2739
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2749
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2755
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2759
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:2765
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2771
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2775
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2779
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2783
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2789
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2802
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 343:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2808
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 344:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2812
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2818
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2822
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2828
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2834
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2845
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2851
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2855
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 357:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2859
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 358:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2863
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2867
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2871
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2879
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 362:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2887
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 363:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2897
		{
			if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2909
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 365:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2913
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 366:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2921
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 367:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2929
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:2968
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:2972
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:2978
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2984
		{
			yyVAL.str = yyDollar[1].str
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2989
		{
			yyVAL.str = "true"
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2990
		{
			yyVAL.str = "false"
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2991
		{
			yyVAL.str = yyDollar[1].str
		}
	case 387:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2996
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 388:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3002
		{
			yyLOCAL = &tree.UpgradeStatement{
				Target: yyDollar[3].upgrade_targetUnion(),
				Retry:  yyDollar[4].int64ValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3011
		{
			yyLOCAL = &tree.Target{
				AccountName:  yyDollar[1].str,
				IsALLAccount: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3018
		{
			yyLOCAL = &tree.Target{
				AccountName:  "",
				IsALLAccount: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 391:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3026
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3030
		{
			res := yyDollar[3].item.(int64)
			if res <= 0 {
				yylex.Error("retry value can not less than 0")
				yyLOCAL = -1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 402:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3054
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3077
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 404:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3087
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 405:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3094
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3103
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3107
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3113
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 409:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3117
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()

			partitionDef := tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)

			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 410:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3141
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var pitrValue = yyDollar[6].int64ValUnion()
			var pitrUnit = yyDollar[7].str
			yyLOCAL = tree.NewAlterPitr(ifExists, name, pitrValue, pitrUnit)
		}
		yyVAL.union = yyLOCAL
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3151
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3161
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3177
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3195
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3199
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3205
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3209
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 418:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3215
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 419:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3221
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 420:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3229
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 421:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3239
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 422:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3247
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 423:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3257
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 424:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3267
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3277
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3284
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3288
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3292
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3296
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 430:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3300
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3307
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 432:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3313
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 433:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3317
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 434:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3321
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3325
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3329
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3333
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3337
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3341
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3346
		{
			yyVAL.str = ""
		}
	case 457:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3377
		{
			yyVAL.str = ""
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3381
		{
			yyVAL.str = string("COLUMN")
		}
	case 459:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3386
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3392
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3398
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3406
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3410
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3416
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3424
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterOptionTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3431
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3437
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3443
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3449
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3455
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3462
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3469
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3477
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 474:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3483
		{
			val := int64(yyDollar[6].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = val
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3495
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3501
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3509
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3513
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 479:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3520
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 480:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3538
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 481:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3553
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.UNIQUE_CHECK_ON_AUTOINCR,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 482:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3568
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 483:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3583
		{
			assignments := []*tree.VarAssignmentExpr{
				&tree.VarAssignmentExpr{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 484:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3596
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 485:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3602
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].exprUnion(),
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 486:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3613
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 487:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3626
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 488:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3630
		{
			var UserName = yyDollar[3].str
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 489:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3638
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3642
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 491:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3647
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3651
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3667
		{
			yyLOCAL = tree.NewUserMiscOptionAccountUnlock()
		}
		yyVAL.union = yyLOCAL
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3671
		{
			yyLOCAL = tree.NewUserMiscOptionAccountLock()
		}
		yyVAL.union = yyLOCAL
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3675
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNone()
		}
		yyVAL.union = yyLOCAL
	case 496:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3679
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireInterval(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3686
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNever()
		}
		yyVAL.union = yyLOCAL
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3690
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireDefault()
		}
		yyVAL.union = yyLOCAL
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3694
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryDefault()
		}
		yyVAL.union = yyLOCAL
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3698
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 501:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3705
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalDefault()
		}
		yyVAL.union = yyLOCAL
	case 502:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3709
		{
			var Value = yyDollar[4].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3716
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentNone()
		}
		yyVAL.union = yyLOCAL
	case 504:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3720
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentDefault()
		}
		yyVAL.union = yyLOCAL
	case 505:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3724
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentOptional()
		}
		yyVAL.union = yyLOCAL
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3728
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionFailedLoginAttempts(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3735
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3742
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeUnbounded()
		}
		yyVAL.union = yyLOCAL
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:3748
		{
			yyVAL.item = nil
		}
	case 510:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3753
		{
			yyVAL.item = nil
		}
	case 545:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3797
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3806
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3814
		{
			yyLOCAL = &tree.ShowSnapShots{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3822
		{
			yyLOCAL = &tree.ShowPitr{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3830
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 550:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3834
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 551:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3838
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{
				&tree.Role{UserName: yyDollar[5].cstrUnion().Compare()},
			}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 552:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3849
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3853
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 554:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3859
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 555:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3864
		{
		}
	case 557:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3868
		{
		}
	case 559:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3873
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 560:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3883
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3893
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3901
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3907
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 564:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3913
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 565:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3919
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 566:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3925
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 567:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3931
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 568:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3937
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3946
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3950
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3954
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3958
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3962
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3966
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3970
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3974
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 577:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3980
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 578:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3989
		{
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3991
		{
		}
	case 583:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4000
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 584:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4010
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 585:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4019
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4023
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4027
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4033
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4039
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 590:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4045
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 591:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4051
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 592:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4060
		{
			yyLOCAL = &tree.ShowTables{
				Open:         false,
				Full:         yyDollar[2].fullOptUnion(),
				DBName:       yyDollar[4].str,
				Like:         yyDollar[5].comparisionExprUnion(),
				Where:        yyDollar[6].whereUnion(),
				SnapshotName: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 593:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4071
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 594:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4083
		{
			yyLOCAL = &tree.ShowDatabases{
				Like:         yyDollar[3].comparisionExprUnion(),
				Where:        yyDollar[4].whereUnion(),
				SnapshotName: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 595:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4091
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 596:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4097
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 597:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4109
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4123
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4129
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4135
		{
			yyLOCAL = &tree.ShowAccountUpgrade{}
		}
		yyVAL.union = yyLOCAL
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4142
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 602:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4146
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 603:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4151
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 604:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4155
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4159
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4164
		{
			yyVAL.str = ""
		}
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4168
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4174
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4179
		{
			yyVAL.str = ""
		}
	case 610:
		yyDollar = yyS[yypt-5 : yypt+1]
//line mysql_sql.y:4183
		{
			yyVAL.str = yyDollar[4].str
		}
	case 615:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4198
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4202
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4208
		{
			yyLOCAL = &tree.ShowCreateTable{
				Name:         yyDollar[4].unresolvedObjectNameUnion(),
				SnapshotName: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4216
		{
			yyLOCAL = &tree.ShowCreateView{
				Name:         yyDollar[4].unresolvedObjectNameUnion(),
				SnapshotName: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4223
		{
			yyLOCAL = &tree.ShowCreateDatabase{IfNotExists: yyDollar[4].ifNotExistsUnion(), Name: yyDollar[5].str}
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4227
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4233
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4239
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4244
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4252
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4258
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4263
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4269
		{
			yyLOCAL = tree.NewUnresolvedObjectName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4275
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 629:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4279
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4306
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4314
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4322
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4330
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 651:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4334
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:4340
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption *tree.AccountIdentified
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4353
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 654:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4361
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 655:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4370
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 656:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4376
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 657:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4384
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 658:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4392
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 659:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4400
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 660:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4406
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 661:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4414
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 662:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4420
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 663:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4428
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 664:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4434
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 667:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4444
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 668:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4449
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 669:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4456
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 670:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4472
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 671:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4485
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4496
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 673:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4500
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4506
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 675:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4512
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 676:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4521
		{
		}
	case 677:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4523
		{
		}
	case 678:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4526
		{
		}
	case 683:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4535
		{
		}
	case 685:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4539
		{
		}
	case 687:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4544
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 688:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4553
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4560
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 690:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4566
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 691:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4574
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 692:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4581
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 693:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4588
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 694:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4608
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 695:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4616
		{
			ins := yyDollar[5].insertUnion()
			ins.Table = yyDollar[3].tableExprUnion()
			ins.PartitionNames = yyDollar[4].identifierListUnion()
			ins.OnDuplicateUpdate = []*tree.UpdateExpr{nil}
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4626
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 697:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4630
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 698:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4636
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4643
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 700:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4649
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 701:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4657
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 702:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4664
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 703:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4671
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 704:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4690
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 705:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4694
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 706:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4698
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4703
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4707
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 709:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4711
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:4717
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4726
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4730
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4736
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 714:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4740
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4746
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4750
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4756
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4761
		{
		}
	case 720:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4765
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4772
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4776
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4783
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4788
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4792
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4798
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4802
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4808
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4812
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4817
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4821
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4834
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4845
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4856
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 737:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4878
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:4901
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:4909
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4918
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 741:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4922
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4935
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4939
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4944
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4948
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4955
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4960
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4967
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4973
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4977
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4981
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4985
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4989
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4993
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4998
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5002
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5008
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:5018
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5033
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5037
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5051
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5055
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5061
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5070
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5074
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5078
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5082
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5086
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5092
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5099
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5108
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5112
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:5118
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5126
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 776:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5130
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5135
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5139
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5145
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5149
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5153
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5158
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5162
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5168
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5174
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5178
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:5184
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5189
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5193
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5197
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5202
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5206
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5210
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5215
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5219
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5227
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5231
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5235
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5249
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5253
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5263
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5273
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5283
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5295
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5303
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5311
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5320
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5328
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5336
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5344
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5352
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5360
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5368
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5376
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5384
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5394
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5405
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5419
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5423
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5427
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 821:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5432
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5436
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5440
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5449
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5453
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5458
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5462
		{
			yyLOCAL = tree.GroupBy(yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5467
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5471
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5477
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5481
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5487
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5491
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5495
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 837:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5499
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion(), yyDollar[3].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5504
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix, nil)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5512
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5518
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5526
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5534
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].joinTableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5544
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5550
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5559
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5568
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5577
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5587
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 851:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5591
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 852:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5601
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 853:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5605
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 854:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5609
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 855:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5613
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 856:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5619
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5629
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5633
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5639
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5645
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5649
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5655
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5661
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 864:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5665
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 865:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5669
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 866:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5673
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS_L2
		}
	case 867:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5679
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5683
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 869:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5689
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 870:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5693
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5699
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 872:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5703
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5709
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 874:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5713
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 875:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5723
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 876:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5736
		{
			yyLOCAL = yyDollar[2].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:5742
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 878:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5748
		{
			name := tree.NewUnresolvedName(yyDollar[1].cstrUnion())
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:     tree.FuncName2ResolvableFunctionReference(name),
					FuncName: yyDollar[1].cstrUnion(),
					Exprs:    yyDollar[3].exprsUnion(),
					Type:     tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 879:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:5762
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 880:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5773
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5780
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 883:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5784
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 884:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:5790
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 885:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5800
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 886:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5804
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 887:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5808
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 888:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5813
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 889:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5817
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 890:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5821
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 891:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5825
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 892:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5830
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5834
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 894:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5838
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5842
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 896:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5846
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 897:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5851
		{
			yyVAL.str = ""
		}
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5855
		{
			yyVAL.str = yyDollar[1].str
		}
	case 899:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5859
		{
			yyVAL.str = yyDollar[2].str
		}
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5865
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5869
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].str)
		}
	case 902:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5874
		{
			yyLOCAL = tree.NewCStr("", 1)
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5878
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 904:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5882
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5886
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5890
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5896
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 929:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5937
		{
			var Language = yyDollar[3].str
			var Name = tree.Identifier(yyDollar[5].str)
			var Filename = tree.Identifier(yyDollar[7].str)
			yyLOCAL = tree.NewCreateExtension(
				Language,
				Name,
				Filename,
			)
		}
		yyVAL.union = yyLOCAL
	case 930:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5950
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 931:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5956
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 932:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5962
		{
			var Name = yyDollar[3].procNameUnion()
			var Args = yyDollar[5].procArgsUnion()
			var Body = yyDollar[7].str
			yyLOCAL = tree.NewCreateProcedure(
				Name,
				Args,
				Body,
			)
		}
		yyVAL.union = yyLOCAL
	case 933:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:5975
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 934:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:5980
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 935:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5987
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 937:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5994
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 938:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5998
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:6004
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 940:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:6010
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 941:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6015
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 942:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6019
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 943:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6023
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6027
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 945:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6034
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				goto ret1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				goto ret1
			}

			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[4].functionNameUnion()
			var Args = yyDollar[6].funcArgsUnion()
			var ReturnType = yyDollar[9].funcReturnUnion()
			var Language = yyDollar[11].str
			var Import = yyDollar[12].boolValUnion()
			var Body = yyDollar[13].str
			var Handler = yyDollar[14].str

			yyLOCAL = tree.NewCreateFunction(
				Replace,
				Name,
				Args,
				ReturnType,
				Language,
				Import,
				Body,
				Handler,
			)
		}
		yyVAL.union = yyLOCAL
	case 946:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6067
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 947:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6072
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 948:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6079
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 950:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6086
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 951:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6090
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 952:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:6096
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 953:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6102
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 954:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6106
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 955:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6110
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 956:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6116
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 957:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:6122
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6128
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 959:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6132
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 960:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6138
		{
			yyVAL.str = ""
		}
	case 962:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6145
		{
			yyVAL.str = yyDollar[2].str
		}
	case 963:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6151
		{
			var Replace bool
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6166
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 965:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6183
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = yyDollar[4].exprUnion()
			var AuthOption = yyDollar[5].accountAuthOptionUnion()
			var StatusOption = yyDollar[6].accountStatusUnion()
			var Comment = yyDollar[7].accountCommentUnion()
			yyLOCAL = tree.NewCreateAccount(
				IfNotExists,
				Name,
				AuthOption,
				StatusOption,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 966:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6200
		{
			yyVAL.str = yyDollar[1].str
		}
	case 967:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6204
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 968:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6210
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 969:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6214
		{
			yyVAL.str = "DEFINER = "
		}
	case 970:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6218
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 971:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6223
		{
			yyVAL.str = ""
		}
	case 972:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:6227
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 978:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6241
		{
			yyVAL.str = ""
		}
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6249
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6255
		{
			var Str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6260
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 984:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:6266
		{
			var Equal = yyDollar[2].str
			var AdminName = yyDollar[3].exprUnion()
			var IdentifiedType = yyDollar[4].accountIdentifiedUnion()
			yyLOCAL = *tree.NewAccountAuthOption(
				Equal,
				AdminName,
				IdentifiedType,
			)
		}
		yyVAL.union = yyLOCAL
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6279
		{
			var Str = yyDollar[1].str
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 986:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6284
		{
			var Str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 987:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6289
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 988:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6295
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 989:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6302
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 990:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6309
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByRandomPassword,
				nil,
			)
		}
		yyVAL.union = yyLOCAL
	case 991:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6316
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 992:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6323
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 993:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6331
		{
			as := tree.NewAccountStatus()
			as.Exist = false
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 994:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6337
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusOpen
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 995:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6344
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusSuspend
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 996:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6351
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusRestricted
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 997:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6359
		{
			ac := tree.NewAccountComment()
			ac.Exist = false
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 998:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6365
		{
			ac := tree.NewAccountComment()
			ac.Exist = true
			ac.Comment = yyDollar[2].str
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 999:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6374
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Users = yyDollar[4].usersUnion()
			var Role = yyDollar[5].accountRoleUnion()
			var MiscOpt = yyDollar[6].userMiscOptionUnion()
			var CommentOrAttribute = yyDollar[7].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewCreateUser(
				IfNotExists,
				Users,
				Role,
				MiscOpt,
				CommentOrAttribute,
			)
		}
		yyVAL.union = yyLOCAL
	case 1000:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6391
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].cstrUnion().Compare())
			var Table = tree.Identifier("")
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				Table,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1001:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6408
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier("")
			var Table = tree.Identifier(yyDollar[6].cstrUnion().Compare())
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				Table,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1002:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6427
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Url = yyDollar[5].str
			var Credentials = yyDollar[6].stageCredentialsUnion()
			var Status = yyDollar[7].stageStatusUnion()
			var Comment = yyDollar[8].stageCommentUnion()
			yyLOCAL = tree.NewCreateStage(
				IfNotExists,
				Name,
				Url,
				Credentials,
				Status,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1003:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6445
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1004:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6451
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1005:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6458
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6466
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1007:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6472
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6480
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6486
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6494
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6500
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6509
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6513
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6518
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6522
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6529
		{
			yyVAL.str = yyDollar[3].str
		}
	case 1017:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6534
		{
			yyVAL.str = ""
		}
	case 1018:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6538
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1019:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6544
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6557
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var dbName = yyDollar[6].str
			var comment = yyDollar[7].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, dbName, comment)
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6567
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6571
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6577
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6583
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6589
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6596
		{
			yyVAL.str = ""
		}
	case 1027:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6600
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1028:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6606
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6614
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6622
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropSnapShot(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6630
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPitr(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6638
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1033:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6643
		{
			var Exist = false
			var IsComment bool
			var Str string
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)

		}
		yyVAL.union = yyLOCAL
	case 1034:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6655
		{
			var Exist = true
			var IsComment = true
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6666
		{
			var Exist = true
			var IsComment = false
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6775
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6779
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6785
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6798
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6802
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1041:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6808
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6821
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6825
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 1044:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6829
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1045:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6834
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1046:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6838
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 1047:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6844
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1048:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6851
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 1049:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6857
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1050:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6866
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1052:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6873
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewCreateRole(
				IfNotExists,
				Roles,
			)
		}
		yyVAL.union = yyLOCAL
	case 1053:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:6884
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1054:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:6888
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 1055:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:6894
		{
			var UserName = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 1056:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6903
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6907
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6911
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6916
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6920
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6924
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6928
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6934
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = tree.NewIndexOption()
				io.IType = yyDollar[5].indexTypeUnion()
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = tree.NewIndexOption()
				io.IType = tree.INDEX_TYPE_INVALID
			}
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Table = yyDollar[7].tableNameUnion()
			var ifNotExists = false
			var IndexCat = yyDollar[2].indexCategoryUnion()
			var KeyParts = yyDollar[9].keyPartsUnion()
			var IndexOption = io
			var MiscOption []tree.MiscOption
			yyLOCAL = tree.NewCreateIndex(
				Name,
				Table,
				ifNotExists,
				IndexCat,
				KeyParts,
				IndexOption,
				MiscOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6965
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6969
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6995
		{
			io := tree.NewIndexOption()
			io.KeyBlockSize = uint64(yyDollar[3].item.(int64))
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7001
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}

			io := tree.NewIndexOption()
			io.AlgoParamList = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7013
		{
			io := tree.NewIndexOption()
			io.AlgoParamVectorOpType = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7019
		{
			io := tree.NewIndexOption()
			io.Comment = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7025
		{
			io := tree.NewIndexOption()
			io.ParserName = yyDollar[3].cstrUnion().Compare()
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7031
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_VISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7037
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_INVISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7045
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7049
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7055
		{
			// Order is parsed but just ignored as MySQL dtree.
			var ColName = yyDollar[1].unresolvedNameUnion()
			var Length = int(yyDollar[2].lengthOptUnion())
			var Direction = yyDollar[3].directionUnion()
			var Expr tree.Expr
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7069
		{
			var ColName *tree.UnresolvedName
			var Length int
			var Expr = yyDollar[2].exprUnion()
			var Direction = yyDollar[4].directionUnion()
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7083
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7087
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7091
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7095
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7099
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7103
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7107
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7113
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].str)
			var SubscriptionOption = yyDollar[5].subscriptionOptionUnion()
			var CreateOptions = yyDollar[6].createOptionsUnion()
			yyLOCAL = tree.NewCreateDatabase(
				IfNotExists,
				Name,
				SubscriptionOption,
				CreateOptions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7128
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7132
		{
			var From = tree.Identifier(yyDollar[2].str)
			var Publication = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewSubscriptionOption(From, Publication)
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7143
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7147
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7152
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7156
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7162
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7166
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7172
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Charset = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCharset(
				IsDefault,
				Charset,
			)
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7181
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Collate = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCollate(
				IsDefault,
				Collate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1097:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7190
		{
			var Encrypt = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionEncryption(Encrypt)
		}
		yyVAL.union = yyLOCAL
	case 1098:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7196
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7200
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7206
		{
			var TableName = yyDollar[4].tableNameUnion()
			var Options = yyDollar[7].connectorOptionsUnion()
			yyLOCAL = tree.NewCreateConnector(
				TableName,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1101:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7217
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1102:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7223
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1103:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7241
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7259
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1105:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7277
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			var SourceName = yyDollar[5].tableNameUnion()
			var Defs = yyDollar[7].tableDefsUnion()
			var Options = yyDollar[9].tableOptionsUnion()
			yyLOCAL = tree.NewCreateSource(
				Replace,
				IfNotExists,
				SourceName,
				Defs,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7293
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7297
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7306
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7318
		{
			t := tree.NewCreateTable()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Param = yyDollar[9].loadParamUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7327
		{
			t := tree.NewCreateTable()
			t.IsClusterTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7339
		{
			t := tree.NewCreateTable()
			t.IsDynamicTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			t.DTOptions = yyDollar[8].tableOptionsUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7349
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[6].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1113:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7359
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[9].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1114:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7370
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1115:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7380
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[10].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1116:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7391
		{
			t := tree.NewCreateTable()
			t.IsAsLike = true
			t.Table = *yyDollar[5].tableNameUnion()
			t.LikeTableName = *yyDollar[7].tableNameUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7399
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.SubscriptionOption = yyDollar[6].subscriptionOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7410
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7417
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7427
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1121:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7440
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7448
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7457
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7466
		{
			yyVAL.str = ""
		}
	case 1125:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:7470
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1126:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7476
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7480
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7485
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7489
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:7496
		{
			yyLOCAL = &tree.TailParameter{
				Charset:      yyDollar[1].str,
				Fields:       yyDollar[2].fieldsUnion(),
				Lines:        yyDollar[3].linesUnion(),
				IgnoredLines: uint64(yyDollar[4].int64ValUnion()),
				ColumnList:   yyDollar[5].loadColumnsUnion(),
				Assignments:  yyDollar[6].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7508
		{
			yyVAL.str = ""
		}
	case 1132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7512
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1133:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7518
		{
			var Name = yyDollar[4].tableNameUnion()
			var Type = yyDollar[5].columnTypeUnion()
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var IncrementBy = yyDollar[6].incrementByOptionUnion()
			var MinValue = yyDollar[7].minValueOptionUnion()
			var MaxValue = yyDollar[8].maxValueOptionUnion()
			var StartWith = yyDollar[9].startWithOptionUnion()
			var Cycle = yyDollar[10].boolValUnion()
			yyLOCAL = tree.NewCreateSequence(
				Name,
				Type,
				IfNotExists,
				IncrementBy,
				MinValue,
				MaxValue,
				StartWith,
				Cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7539
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7553
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7557
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7561
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7567
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1139:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7571
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1140:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7578
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7585
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7592
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7599
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7603
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7607
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7611
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7615
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7622
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7629
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1150:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7633
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7640
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7647
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7651
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7657
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1155:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7663
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1156:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7667
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7674
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7681
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1159:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7688
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7695
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7699
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1162:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7704
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7708
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7712
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1165:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7717
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7721
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()
			yyLOCAL = tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7734
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7738
		{
			var ColumnList = []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)

		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7746
		{
			var ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7754
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7758
		{
			var IsSubPartition = true
			var PType = yyDollar[3].partitionByUnion()
			var Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = tree.NewPartitionBy2(
				IsSubPartition,
				PType,
				Num,
			)
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7770
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7774
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7780
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1175:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7784
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7790
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options []tree.TableOption
			var Subs = yyDollar[4].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7803
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options = yyDollar[4].tableOptionsUnion()
			var Subs = yyDollar[5].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7817
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7821
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7827
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1181:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7831
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:7837
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options []tree.TableOption
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:7846
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options = yyDollar[3].tableOptionsUnion()
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1184:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7857
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7861
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7866
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7870
		{
			expr := tree.NewMaxValue()
			var valueList = tree.Exprs{expr}
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7876
		{
			var valueList = yyDollar[5].exprsUnion()
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7881
		{
			var valueList = yyDollar[4].exprsUnion()
			yyLOCAL = tree.NewValuesIn(
				valueList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7889
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7893
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7903
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7907
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1194:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7918
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7926
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7934
		{
			listTyp := tree.NewListType()
			listTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7942
		{
			listTyp := tree.NewListType()
			listTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7953
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1200:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7962
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			keyTyp.ColumnList = yyDollar[5].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1201:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7972
		{
			Linear := yyDollar[1].boolValUnion()
			Expr := yyDollar[4].exprUnion()
			hashTyp := tree.NewHashType(Linear, Expr)
			yyLOCAL = tree.NewPartitionBy(
				hashTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7982
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7986
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1204:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7991
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1205:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7995
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8001
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1207:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8005
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1208:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8011
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8020
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1210:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8030
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1211:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8034
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1212:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8040
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1213:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8044
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1214:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8050
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1215:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8059
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8069
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8073
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8079
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8083
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1220:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8087
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1221:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8093
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1222:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8097
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1223:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8101
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1224:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8105
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1225:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8109
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8113
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1227:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8117
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1228:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8122
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1229:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8126
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1230:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8130
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1231:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8134
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1232:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8138
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1233:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8142
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1234:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8146
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1235:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8150
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1236:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8154
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1237:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8158
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1238:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8162
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1239:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8166
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1240:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8170
		{
			t := tree.NewTableOptionPackKeys()
			t.Value = yyDollar[3].item.(int64)
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1241:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8176
		{
			t := tree.NewTableOptionPackKeys()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1242:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8182
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1243:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8186
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1244:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8190
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1245:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8194
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1246:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8198
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1247:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8204
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1248:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8210
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1249:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8216
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1250:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8222
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1251:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8228
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1252:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8234
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1253:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8238
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1254:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8242
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1255:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8246
		{
			var Preperties = yyDollar[3].propertiesUnion()
			yyLOCAL = tree.NewTableOptionProperties(Preperties)
		}
		yyVAL.union = yyLOCAL
	case 1256:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8253
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1257:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8257
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1258:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:8263
		{
			var Key = yyDollar[1].str
			var Value = yyDollar[3].str
			yyLOCAL = *tree.NewProperty(
				Key,
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 1259:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8274
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1260:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8278
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1261:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8284
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1262:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8288
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1263:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8292
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1264:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8296
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1265:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8300
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1266:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8304
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8318
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8322
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8331
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[2].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8337
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[4].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1275:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8345
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8349
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8353
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPTIME,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1278:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8360
		{
			var Str = yyDollar[4].cstrUnion().Compare()
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPSNAPSHOT,
				Expr: tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1279:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8368
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPSNAPSHOT,
				Expr: tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1280:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8375
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATMOTIMESTAMP,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1281:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8383
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1283:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8390
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1284:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8394
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1285:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8400
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1286:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8404
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1287:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8408
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1288:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8414
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1289:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8418
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1290:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8424
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1291:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8437
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1292:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8450
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid the type of index")
					goto ret1
				}
			}

			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1293:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8489
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid type of index")
					goto ret1
				}
			}
			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1294:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8529
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1295:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8543
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1296:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8549
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1297:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8562
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1298:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8575
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1299:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8588
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1300:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8601
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var KeyParts = yyDollar[6].keyPartsUnion()
			var Name = yyDollar[4].str
			var Refer = yyDollar[8].attributeReferenceUnion()
			var Empty = true
			yyLOCAL = tree.NewForeignKey(
				IfNotExists,
				KeyParts,
				Name,
				Refer,
				Empty,
			)
		}
		yyVAL.union = yyLOCAL
	case 1301:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8616
		{
			var Expr = yyDollar[3].exprUnion()
			var Enforced = yyDollar[5].boolValUnion()
			yyLOCAL = tree.NewCheckIndex(
				Expr,
				Enforced,
			)
		}
		yyVAL.union = yyLOCAL
	case 1302:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8626
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1304:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8632
		{
			yyVAL.str = ""
		}
	case 1305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8636
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1308:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8646
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1309:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8652
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1310:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8658
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1321:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8679
		{
			yyVAL.str = ""
		}
	case 1322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8683
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1323:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:8689
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1324:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8695
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1325:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8699
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1326:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8704
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1327:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8712
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1328:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8716
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1329:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8720
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1330:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8724
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1331:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8730
		{
			yyLOCAL = yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
		}
		yyVAL.union = yyLOCAL
	case 1332:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8736
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1333:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8740
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1334:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8745
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1335:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8752
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1336:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8756
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1337:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8762
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1338:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8766
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1339:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8772
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1340:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8776
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1341:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8780
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1342:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8784
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1343:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8788
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1344:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8792
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1345:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8797
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1346:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8801
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1347:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8805
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1348:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8809
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1349:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8813
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1350:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8817
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1351:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8821
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1352:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8825
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1353:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8829
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1354:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8833
		{
			name := tree.NewUnresolvedColName(yyDollar[3].str)
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[3].str, 1),
				Exprs:    es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1355:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8847
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1356:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8851
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1357:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8855
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1358:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8859
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1359:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8863
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1360:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8867
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1361:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8873
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1362:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8877
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1363:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8882
		{
			yyVAL.str = ""
		}
	case 1364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8886
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8892
		{
			yyVAL.str = ""
		}
	case 1366:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8896
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1367:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:8902
		{
			var TableName = yyDollar[2].tableNameUnion()
			var KeyParts = yyDollar[3].keyPartsUnion()
			var Match = yyDollar[4].matchTypeUnion()
			var OnDelete = yyDollar[5].referenceOnRecordUnion().OnDelete
			var OnUpdate = yyDollar[5].referenceOnRecordUnion().OnUpdate
			yyLOCAL = tree.NewAttributeReference(
				TableName,
				KeyParts,
				Match,
				OnDelete,
				OnUpdate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1368:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8919
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1369:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8926
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1370:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8933
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1371:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8940
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1372:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8947
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1373:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8956
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1374:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8962
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1375:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8968
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1376:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8972
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1377:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8976
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1378:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8980
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1379:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8984
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1380:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8989
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1382:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8996
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1383:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9000
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1384:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9004
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1385:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9009
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1386:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9013
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1387:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9018
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1388:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9022
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1395:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:9038
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1396:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9044
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1397:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9048
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1398:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9052
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1399:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9056
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1400:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9060
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1401:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9064
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1402:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9068
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1403:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9072
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1404:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9076
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1405:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9080
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1406:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9084
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1407:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9088
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1408:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9092
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1409:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9098
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1410:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9102
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1411:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9106
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1412:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9110
		{
			yyLOCAL = tree.NewParentExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1413:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9114
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1414:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9118
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1415:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9122
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1416:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9126
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1417:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9130
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1418:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9134
		{
			hint := strings.ToLower(yyDollar[2].cstrUnion().Compare())
			switch hint {
			case "d":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "DATETIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "t":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimeFamily,
						FamilyString: "TIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "ts":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "TIMESTAMP",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			default:
				yylex.Error("Invalid type")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1419:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9176
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1420:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9180
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1421:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9184
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1422:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9189
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1423:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9197
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1424:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9201
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1425:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9205
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1426:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9209
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1427:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9213
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1428:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9223
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1429:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9227
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1430:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9231
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1431:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9235
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1432:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9239
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1433:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9243
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1434:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9247
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1435:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9253
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1436:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9262
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1437:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9271
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1438:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9282
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1439:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9292
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1440:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9302
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1441:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9311
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1442:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9321
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1443:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9331
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1444:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9341
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1445:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9350
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1446:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9360
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1447:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9364
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1448:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9369
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1449:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9373
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1450:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9379
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1451:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9383
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1452:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:9389
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9398
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1454:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9410
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1455:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9427
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1457:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9444
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1458:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9457
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1459:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9470
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1460:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9482
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1461:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9496
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1462:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9511
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1463:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9526
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1464:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9543
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1465:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9558
		{
		}
	case 1469:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9565
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1470:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9569
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1471:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9573
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1472:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9579
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1473:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9583
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1474:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9587
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1475:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9591
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1476:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9597
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1477:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9601
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1478:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9605
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1479:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9611
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1480:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9619
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1481:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9629
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1482:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9633
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1483:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9640
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1484:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9645
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1485:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9649
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1486:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9654
		{
			yyVAL.str = ","
		}
	case 1487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9658
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1488:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9663
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9667
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1490:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9672
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1492:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9679
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1493:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9705
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1494:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9717
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1495:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9729
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1496:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9740
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1497:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9751
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1498:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9762
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1499:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9772
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1500:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9782
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1501:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9793
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1502:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9804
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1503:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9815
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1504:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9826
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1505:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9837
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1506:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9848
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1507:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9859
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1508:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9870
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1509:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9881
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1510:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9892
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1511:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9903
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1512:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9914
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1513:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9925
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1514:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9936
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1518:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9954
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1519:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9963
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1520:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9972
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1521:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9981
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1522:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9990
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1523:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10001
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1524:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10010
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[4].exprUnion()},
				Type:     yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1525:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10020
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1526:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10029
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1527:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10038
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1528:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10047
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1529:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10056
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumValWithType(constant.MakeInt64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1530:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10068
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumValWithType(constant.MakeInt64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1531:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10079
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumValWithType(constant.MakeInt64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1532:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10092
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumValWithType(constant.MakeInt64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1533:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10104
		{
			column := tree.NewUnresolvedColName(yyDollar[3].str)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10127
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1569:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10163
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1570:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10176
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1571:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10189
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1572:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10201
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1573:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10210
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1574:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10218
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1575:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10226
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1576:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10239
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1577:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10248
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1578:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10259
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1579:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10270
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1580:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10279
		{
			cn := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1581:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10291
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1582:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10301
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1583:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10311
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1584:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10320
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1585:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10331
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1586:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10340
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1587:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10350
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1588:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10359
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1589:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10368
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1590:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10378
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1591:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10382
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1592:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10388
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1593:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10392
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(ival), str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1600:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10411
		{
		}
	case 1601:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10413
		{
		}
	case 1635:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10454
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1636:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10466
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1637:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10470
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1638:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10474
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1639:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:10480
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1640:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10485
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1641:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10489
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1642:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10495
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1643:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10499
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1644:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10505
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1645:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10509
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1646:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10516
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1647:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10520
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1648:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10524
		{
			name := tree.NewUnresolvedColName("concat")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr("concat", 1),
				Exprs:    tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1649:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10533
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1650:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10537
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1651:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10541
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1652:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10546
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1653:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10550
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1654:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10556
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1655:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10560
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1656:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10564
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1657:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10568
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1658:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10572
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1659:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10576
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1660:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10580
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1661:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10584
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1662:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10588
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1663:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10592
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1665:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10600
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1666:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10604
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1667:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10608
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1668:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10612
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1669:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10616
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1670:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10620
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1671:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10624
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1672:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10628
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1673:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10632
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1674:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10636
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1676:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10642
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1677:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10646
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1678:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10652
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1679:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10656
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1680:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10663
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1681:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10667
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1682:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10671
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1683:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10677
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1684:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10681
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1685:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10685
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1686:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10689
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1687:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10693
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1688:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10697
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1689:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10701
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1690:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10707
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1691:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10711
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1692:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10715
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1693:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10719
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1694:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10725
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1695:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10738
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1696:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10743
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1697:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10749
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1698:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10753
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1699:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10766
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1700:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10771
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1701:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10775
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1702:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10779
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1703:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10783
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1704:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10787
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1705:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10794
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1706:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10798
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1707:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10802
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1708:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10806
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1709:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10813
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1713:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10824
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1714:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10829
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1715:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10835
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1716:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10847
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1717:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10859
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1718:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10871
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1719:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10884
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1720:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10897
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1721:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10910
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1722:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10923
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1723:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10936
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1724:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10949
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1725:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10962
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1726:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10975
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1727:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10988
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1728:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11001
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1729:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11016
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1730:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11043
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1731:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11085
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1732:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11121
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1733:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11157
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1734:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11174
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1735:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11186
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1736:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11206
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1737:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11226
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1738:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11246
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1739:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11262
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1740:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11275
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1741:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11288
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1742:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11301
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1743:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11314
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1744:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11326
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1745:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11338
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1746:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11350
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1747:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11362
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1748:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11374
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1749:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11386
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1750:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11398
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1751:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11410
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1752:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11422
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1753:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11435
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1754:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11448
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1755:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11461
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1756:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11474
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1757:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11489
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1758:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11497
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1759:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11506
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1760:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11516
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1761:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11539
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1762:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11544
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1763:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11550
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1765:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11557
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1766:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11561
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1767:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11566
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1768:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11570
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1769:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11576
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1770:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11582
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1771:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11589
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1772:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11596
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1773:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11605
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1774:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11612
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1775:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11619
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1776:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11628
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1777:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11632
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1778:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11636
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1779:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11642
		{
		}
	case 1780:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11644
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1784:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11654
		{
			yyVAL.str = ""
		}
	case 1785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:11658
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
