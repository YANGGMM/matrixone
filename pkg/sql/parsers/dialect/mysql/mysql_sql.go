// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const CONNECT = 57367
const MANAGE = 57368
const GRANTS = 57369
const OWNERSHIP = 57370
const REFERENCE = 57371
const LOWER_THAN_SET = 57372
const SET = 57373
const ALL = 57374
const DISTINCT = 57375
const DISTINCTROW = 57376
const AS = 57377
const EXISTS = 57378
const ASC = 57379
const DESC = 57380
const INTO = 57381
const DUPLICATE = 57382
const DEFAULT = 57383
const LOCK = 57384
const KEYS = 57385
const NULLS = 57386
const FIRST = 57387
const LAST = 57388
const AFTER = 57389
const INSTANT = 57390
const INPLACE = 57391
const COPY = 57392
const DISABLE = 57393
const ENABLE = 57394
const UNDEFINED = 57395
const MERGE = 57396
const TEMPTABLE = 57397
const DEFINER = 57398
const INVOKER = 57399
const SQL = 57400
const SECURITY = 57401
const CASCADED = 57402
const VALUES = 57403
const NEXT = 57404
const VALUE = 57405
const SHARE = 57406
const MODE = 57407
const SQL_NO_CACHE = 57408
const SQL_CACHE = 57409
const JOIN = 57410
const STRAIGHT_JOIN = 57411
const LEFT = 57412
const RIGHT = 57413
const INNER = 57414
const OUTER = 57415
const CROSS = 57416
const NATURAL = 57417
const USE = 57418
const FORCE = 57419
const CROSS_L2 = 57420
const APPLY = 57421
const DEDUP = 57422
const LOWER_THAN_ON = 57423
const ON = 57424
const USING = 57425
const SUBQUERY_AS_EXPR = 57426
const LOWER_THAN_STRING = 57427
const ID = 57428
const AT_ID = 57429
const AT_AT_ID = 57430
const STRING = 57431
const VALUE_ARG = 57432
const LIST_ARG = 57433
const COMMENT = 57434
const COMMENT_KEYWORD = 57435
const QUOTE_ID = 57436
const STAGE = 57437
const CREDENTIALS = 57438
const STAGES = 57439
const SNAPSHOTS = 57440
const INTEGRAL = 57441
const HEX = 57442
const FLOAT = 57443
const HEXNUM = 57444
const BIT_LITERAL = 57445
const NULL = 57446
const TRUE = 57447
const FALSE = 57448
const LOWER_THAN_CHARSET = 57449
const CHARSET = 57450
const UNIQUE = 57451
const KEY = 57452
const OR = 57453
const PIPE_CONCAT = 57454
const XOR = 57455
const AND = 57456
const NOT = 57457
const BETWEEN = 57458
const CASE = 57459
const WHEN = 57460
const THEN = 57461
const ELSE = 57462
const END = 57463
const ELSEIF = 57464
const LOWER_THAN_EQ = 57465
const LE = 57466
const GE = 57467
const NE = 57468
const NULL_SAFE_EQUAL = 57469
const IS = 57470
const LIKE = 57471
const REGEXP = 57472
const IN = 57473
const ASSIGNMENT = 57474
const ILIKE = 57475
const SHIFT_LEFT = 57476
const SHIFT_RIGHT = 57477
const DIV = 57478
const MOD = 57479
const UNARY = 57480
const COLLATE = 57481
const BINARY = 57482
const UNDERSCORE_BINARY = 57483
const INTERVAL = 57484
const OUT = 57485
const INOUT = 57486
const BEGIN = 57487
const START = 57488
const TRANSACTION = 57489
const COMMIT = 57490
const ROLLBACK = 57491
const WORK = 57492
const CONSISTENT = 57493
const SNAPSHOT = 57494
const SAVEPOINT = 57495
const CHAIN = 57496
const NO = 57497
const RELEASE = 57498
const PRIORITY = 57499
const QUICK = 57500
const BIT = 57501
const TINYINT = 57502
const SMALLINT = 57503
const MEDIUMINT = 57504
const INT = 57505
const INTEGER = 57506
const BIGINT = 57507
const INTNUM = 57508
const REAL = 57509
const DOUBLE = 57510
const FLOAT_TYPE = 57511
const DECIMAL = 57512
const NUMERIC = 57513
const DECIMAL_VALUE = 57514
const TIME = 57515
const TIMESTAMP = 57516
const DATETIME = 57517
const YEAR = 57518
const CHAR = 57519
const VARCHAR = 57520
const BOOL = 57521
const CHARACTER = 57522
const VARBINARY = 57523
const NCHAR = 57524
const TEXT = 57525
const TINYTEXT = 57526
const MEDIUMTEXT = 57527
const LONGTEXT = 57528
const DATALINK = 57529
const BLOB = 57530
const TINYBLOB = 57531
const MEDIUMBLOB = 57532
const LONGBLOB = 57533
const JSON = 57534
const ENUM = 57535
const UUID = 57536
const VECF32 = 57537
const VECF64 = 57538
const GEOMETRY = 57539
const POINT = 57540
const LINESTRING = 57541
const POLYGON = 57542
const GEOMETRYCOLLECTION = 57543
const MULTIPOINT = 57544
const MULTILINESTRING = 57545
const MULTIPOLYGON = 57546
const INT1 = 57547
const INT2 = 57548
const INT3 = 57549
const INT4 = 57550
const INT8 = 57551
const S3OPTION = 57552
const STAGEOPTION = 57553
const SQL_SMALL_RESULT = 57554
const SQL_BIG_RESULT = 57555
const SQL_BUFFER_RESULT = 57556
const SQL_CALC_FOUND_ROWS = 57557
const LOW_PRIORITY = 57558
const HIGH_PRIORITY = 57559
const DELAYED = 57560
const CREATE = 57561
const ALTER = 57562
const DROP = 57563
const RENAME = 57564
const ANALYZE = 57565
const PHYPLAN = 57566
const ADD = 57567
const RETURNS = 57568
const SCHEMA = 57569
const TABLE = 57570
const SEQUENCE = 57571
const INDEX = 57572
const VIEW = 57573
const TO = 57574
const IGNORE = 57575
const IF = 57576
const PRIMARY = 57577
const COLUMN = 57578
const CONSTRAINT = 57579
const SPATIAL = 57580
const FULLTEXT = 57581
const FOREIGN = 57582
const KEY_BLOCK_SIZE = 57583
const SHOW = 57584
const DESCRIBE = 57585
const EXPLAIN = 57586
const DATE = 57587
const ESCAPE = 57588
const REPAIR = 57589
const OPTIMIZE = 57590
const TRUNCATE = 57591
const MAXVALUE = 57592
const PARTITION = 57593
const REORGANIZE = 57594
const LESS = 57595
const THAN = 57596
const PROCEDURE = 57597
const TRIGGER = 57598
const STATUS = 57599
const VARIABLES = 57600
const ROLE = 57601
const PROXY = 57602
const AVG_ROW_LENGTH = 57603
const STORAGE = 57604
const DISK = 57605
const MEMORY = 57606
const CHECKSUM = 57607
const COMPRESSION = 57608
const DATA = 57609
const DIRECTORY = 57610
const DELAY_KEY_WRITE = 57611
const ENCRYPTION = 57612
const ENGINE = 57613
const MAX_ROWS = 57614
const MIN_ROWS = 57615
const PACK_KEYS = 57616
const ROW_FORMAT = 57617
const STATS_AUTO_RECALC = 57618
const STATS_PERSISTENT = 57619
const STATS_SAMPLE_PAGES = 57620
const DYNAMIC = 57621
const COMPRESSED = 57622
const REDUNDANT = 57623
const COMPACT = 57624
const FIXED = 57625
const COLUMN_FORMAT = 57626
const AUTO_RANDOM = 57627
const ENGINE_ATTRIBUTE = 57628
const SECONDARY_ENGINE_ATTRIBUTE = 57629
const INSERT_METHOD = 57630
const RESTRICT = 57631
const CASCADE = 57632
const ACTION = 57633
const PARTIAL = 57634
const SIMPLE = 57635
const CHECK = 57636
const ENFORCED = 57637
const RANGE = 57638
const LIST = 57639
const ALGORITHM = 57640
const LINEAR = 57641
const PARTITIONS = 57642
const SUBPARTITION = 57643
const SUBPARTITIONS = 57644
const CLUSTER = 57645
const TYPE = 57646
const ANY = 57647
const SOME = 57648
const EXTERNAL = 57649
const LOCALFILE = 57650
const URL = 57651
const PREPARE = 57652
const DEALLOCATE = 57653
const RESET = 57654
const EXTENSION = 57655
const RETENTION = 57656
const PERIOD = 57657
const INCREMENT = 57658
const CYCLE = 57659
const MINVALUE = 57660
const PUBLICATION = 57661
const SUBSCRIPTIONS = 57662
const PUBLICATIONS = 57663
const PROPERTIES = 57664
const PARSER = 57665
const VISIBLE = 57666
const INVISIBLE = 57667
const BTREE = 57668
const HASH = 57669
const RTREE = 57670
const BSI = 57671
const IVFFLAT = 57672
const MASTER = 57673
const ZONEMAP = 57674
const LEADING = 57675
const BOTH = 57676
const TRAILING = 57677
const UNKNOWN = 57678
const LISTS = 57679
const OP_TYPE = 57680
const REINDEX = 57681
const EXPIRE = 57682
const ACCOUNT = 57683
const ACCOUNTS = 57684
const UNLOCK = 57685
const DAY = 57686
const NEVER = 57687
const PUMP = 57688
const MYSQL_COMPATIBILITY_MODE = 57689
const UNIQUE_CHECK_ON_AUTOINCR = 57690
const MODIFY = 57691
const CHANGE = 57692
const SECOND = 57693
const ASCII = 57694
const COALESCE = 57695
const COLLATION = 57696
const HOUR = 57697
const MICROSECOND = 57698
const MINUTE = 57699
const MONTH = 57700
const QUARTER = 57701
const REPEAT = 57702
const REVERSE = 57703
const ROW_COUNT = 57704
const WEEK = 57705
const REVOKE = 57706
const FUNCTION = 57707
const PRIVILEGES = 57708
const TABLESPACE = 57709
const EXECUTE = 57710
const SUPER = 57711
const GRANT = 57712
const OPTION = 57713
const REFERENCES = 57714
const REPLICATION = 57715
const SLAVE = 57716
const CLIENT = 57717
const USAGE = 57718
const RELOAD = 57719
const FILE = 57720
const TEMPORARY = 57721
const ROUTINE = 57722
const EVENT = 57723
const SHUTDOWN = 57724
const NULLX = 57725
const AUTO_INCREMENT = 57726
const APPROXNUM = 57727
const SIGNED = 57728
const UNSIGNED = 57729
const ZEROFILL = 57730
const ENGINES = 57731
const LOW_CARDINALITY = 57732
const AUTOEXTEND_SIZE = 57733
const ADMIN_NAME = 57734
const RANDOM = 57735
const SUSPEND = 57736
const ATTRIBUTE = 57737
const HISTORY = 57738
const REUSE = 57739
const CURRENT = 57740
const OPTIONAL = 57741
const FAILED_LOGIN_ATTEMPTS = 57742
const PASSWORD_LOCK_TIME = 57743
const UNBOUNDED = 57744
const SECONDARY = 57745
const RESTRICTED = 57746
const USER = 57747
const IDENTIFIED = 57748
const CIPHER = 57749
const ISSUER = 57750
const X509 = 57751
const SUBJECT = 57752
const SAN = 57753
const REQUIRE = 57754
const SSL = 57755
const NONE = 57756
const PASSWORD = 57757
const SHARED = 57758
const EXCLUSIVE = 57759
const MAX_QUERIES_PER_HOUR = 57760
const MAX_UPDATES_PER_HOUR = 57761
const MAX_CONNECTIONS_PER_HOUR = 57762
const MAX_USER_CONNECTIONS = 57763
const FORMAT = 57764
const VERBOSE = 57765
const CONNECTION = 57766
const TRIGGERS = 57767
const PROFILES = 57768
const LOAD = 57769
const INLINE = 57770
const INFILE = 57771
const TERMINATED = 57772
const OPTIONALLY = 57773
const ENCLOSED = 57774
const ESCAPED = 57775
const STARTING = 57776
const LINES = 57777
const ROWS = 57778
const IMPORT = 57779
const DISCARD = 57780
const JSONTYPE = 57781
const MODUMP = 57782
const OVER = 57783
const PRECEDING = 57784
const FOLLOWING = 57785
const GROUPS = 57786
const DATABASES = 57787
const TABLES = 57788
const SEQUENCES = 57789
const EXTENDED = 57790
const FULL = 57791
const PROCESSLIST = 57792
const FIELDS = 57793
const COLUMNS = 57794
const OPEN = 57795
const ERRORS = 57796
const WARNINGS = 57797
const INDEXES = 57798
const SCHEMAS = 57799
const NODE = 57800
const LOCKS = 57801
const ROLES = 57802
const TABLE_NUMBER = 57803
const COLUMN_NUMBER = 57804
const TABLE_VALUES = 57805
const TABLE_SIZE = 57806
const NAMES = 57807
const GLOBAL = 57808
const PERSIST = 57809
const SESSION = 57810
const ISOLATION = 57811
const LEVEL = 57812
const READ = 57813
const WRITE = 57814
const ONLY = 57815
const REPEATABLE = 57816
const COMMITTED = 57817
const UNCOMMITTED = 57818
const SERIALIZABLE = 57819
const LOCAL = 57820
const EVENTS = 57821
const PLUGINS = 57822
const CURRENT_TIMESTAMP = 57823
const DATABASE = 57824
const CURRENT_TIME = 57825
const LOCALTIME = 57826
const LOCALTIMESTAMP = 57827
const UTC_DATE = 57828
const UTC_TIME = 57829
const UTC_TIMESTAMP = 57830
const REPLACE = 57831
const CONVERT = 57832
const SEPARATOR = 57833
const TIMESTAMPDIFF = 57834
const CURRENT_DATE = 57835
const CURRENT_USER = 57836
const CURRENT_ROLE = 57837
const SECOND_MICROSECOND = 57838
const MINUTE_MICROSECOND = 57839
const MINUTE_SECOND = 57840
const HOUR_MICROSECOND = 57841
const HOUR_SECOND = 57842
const HOUR_MINUTE = 57843
const DAY_MICROSECOND = 57844
const DAY_SECOND = 57845
const DAY_MINUTE = 57846
const DAY_HOUR = 57847
const YEAR_MONTH = 57848
const SQL_TSI_HOUR = 57849
const SQL_TSI_DAY = 57850
const SQL_TSI_WEEK = 57851
const SQL_TSI_MONTH = 57852
const SQL_TSI_QUARTER = 57853
const SQL_TSI_YEAR = 57854
const SQL_TSI_SECOND = 57855
const SQL_TSI_MINUTE = 57856
const RECURSIVE = 57857
const CONFIG = 57858
const DRAINER = 57859
const SOURCE = 57860
const STREAM = 57861
const HEADERS = 57862
const CONNECTOR = 57863
const CONNECTORS = 57864
const DAEMON = 57865
const PAUSE = 57866
const CANCEL = 57867
const TASK = 57868
const RESUME = 57869
const MATCH = 57870
const AGAINST = 57871
const BOOLEAN = 57872
const LANGUAGE = 57873
const WITH = 57874
const QUERY = 57875
const EXPANSION = 57876
const WITHOUT = 57877
const VALIDATION = 57878
const UPGRADE = 57879
const RETRY = 57880
const ADDDATE = 57881
const BIT_AND = 57882
const BIT_OR = 57883
const BIT_XOR = 57884
const CAST = 57885
const COUNT = 57886
const APPROX_COUNT = 57887
const APPROX_COUNT_DISTINCT = 57888
const SERIAL_EXTRACT = 57889
const APPROX_PERCENTILE = 57890
const CURDATE = 57891
const CURTIME = 57892
const DATE_ADD = 57893
const DATE_SUB = 57894
const EXTRACT = 57895
const GROUP_CONCAT = 57896
const MAX = 57897
const MID = 57898
const MIN = 57899
const NOW = 57900
const POSITION = 57901
const SESSION_USER = 57902
const STD = 57903
const STDDEV = 57904
const MEDIAN = 57905
const CLUSTER_CENTERS = 57906
const KMEANS = 57907
const STDDEV_POP = 57908
const STDDEV_SAMP = 57909
const SUBDATE = 57910
const SUBSTR = 57911
const SUBSTRING = 57912
const SUM = 57913
const SYSDATE = 57914
const SYSTEM_USER = 57915
const TRANSLATE = 57916
const TRIM = 57917
const VARIANCE = 57918
const VAR_POP = 57919
const VAR_SAMP = 57920
const AVG = 57921
const RANK = 57922
const ROW_NUMBER = 57923
const DENSE_RANK = 57924
const BIT_CAST = 57925
const BITMAP_BIT_POSITION = 57926
const BITMAP_BUCKET_NUMBER = 57927
const BITMAP_COUNT = 57928
const BITMAP_CONSTRUCT_AGG = 57929
const BITMAP_OR_AGG = 57930
const NEXTVAL = 57931
const SETVAL = 57932
const CURRVAL = 57933
const LASTVAL = 57934
const ARROW = 57935
const ROW = 57936
const OUTFILE = 57937
const HEADER = 57938
const MAX_FILE_SIZE = 57939
const FORCE_QUOTE = 57940
const PARALLEL = 57941
const STRICT = 57942
const UNUSED = 57943
const BINDINGS = 57944
const DO = 57945
const DECLARE = 57946
const LOOP = 57947
const WHILE = 57948
const LEAVE = 57949
const ITERATE = 57950
const UNTIL = 57951
const CALL = 57952
const PREV = 57953
const SLIDING = 57954
const FILL = 57955
const SPBEGIN = 57956
const BACKEND = 57957
const SERVERS = 57958
const HANDLER = 57959
const PERCENT = 57960
const SAMPLE = 57961
const MO_TS = 57962
const PITR = 57963
const RECOVERY_WINDOW = 57964
const CDC = 57965
const GROUPING = 57966
const SETS = 57967
const CUBE = 57968
const ROLLUP = 57969
const LOGSERVICE = 57970
const REPLICAS = 57971
const STORES = 57972
const SETTINGS = 57973
const KILL = 57974
const BACKUP = 57975
const FILESYSTEM = 57976
const PARALLELISM = 57977
const RESTORE = 57978
const QUERY_RESULT = 57979

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"CROSS_L2",
	"APPLY",
	"DEDUP",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"SNAPSHOTS",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"SAVEPOINT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"DATALINK",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"SQL_CALC_FOUND_ROWS",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"PHYPLAN",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"RETENTION",
	"PERIOD",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"UNIQUE_CHECK_ON_AUTOINCR",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UPGRADE",
	"RETRY",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"BITMAP_BIT_POSITION",
	"BITMAP_BUCKET_NUMBER",
	"BITMAP_COUNT",
	"BITMAP_CONSTRUCT_AGG",
	"BITMAP_OR_AGG",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"STRICT",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"MO_TS",
	"PITR",
	"RECOVERY_WINDOW",
	"CDC",
	"GROUPING",
	"SETS",
	"CUBE",
	"ROLLUP",
	"LOGSERVICE",
	"REPLICAS",
	"STORES",
	"SETTINGS",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"RESTORE",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:12811

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 142,
	11, 805,
	22, 805,
	-2, 798,
	-1, 167,
	245, 1232,
	247, 1131,
	-2, 1178,
	-1, 194,
	43, 628,
	247, 628,
	274, 635,
	275, 635,
	473, 628,
	-2, 663,
	-1, 234,
	658, 2003,
	-2, 527,
	-1, 543,
	658, 2127,
	-2, 407,
	-1, 601,
	658, 2186,
	-2, 405,
	-1, 602,
	658, 2187,
	-2, 406,
	-1, 603,
	658, 2188,
	-2, 408,
	-1, 743,
	326, 176,
	445, 176,
	446, 176,
	-2, 1905,
	-1, 810,
	85, 1690,
	-2, 2063,
	-1, 811,
	85, 1709,
	-2, 2034,
	-1, 815,
	85, 1710,
	-2, 2062,
	-1, 849,
	85, 1617,
	-2, 2266,
	-1, 850,
	85, 1618,
	-2, 2265,
	-1, 851,
	85, 1619,
	-2, 2255,
	-1, 852,
	85, 2227,
	-2, 2248,
	-1, 853,
	85, 2228,
	-2, 2249,
	-1, 854,
	85, 2229,
	-2, 2257,
	-1, 855,
	85, 2230,
	-2, 2237,
	-1, 856,
	85, 2231,
	-2, 2246,
	-1, 857,
	85, 2232,
	-2, 2258,
	-1, 858,
	85, 2233,
	-2, 2259,
	-1, 859,
	85, 2234,
	-2, 2264,
	-1, 860,
	85, 2235,
	-2, 2269,
	-1, 861,
	85, 2236,
	-2, 2270,
	-1, 862,
	85, 1686,
	-2, 2101,
	-1, 863,
	85, 1687,
	-2, 1889,
	-1, 864,
	85, 1688,
	-2, 2110,
	-1, 865,
	85, 1689,
	-2, 1898,
	-1, 867,
	85, 1692,
	-2, 1906,
	-1, 869,
	85, 1694,
	-2, 2134,
	-1, 871,
	85, 1697,
	-2, 1925,
	-1, 873,
	85, 1699,
	-2, 2146,
	-1, 874,
	85, 1700,
	-2, 2145,
	-1, 875,
	85, 1701,
	-2, 1970,
	-1, 876,
	85, 1702,
	-2, 2058,
	-1, 879,
	85, 1705,
	-2, 2157,
	-1, 881,
	85, 1707,
	-2, 2160,
	-1, 882,
	85, 1708,
	-2, 2162,
	-1, 883,
	85, 1711,
	-2, 2170,
	-1, 884,
	85, 1712,
	-2, 2043,
	-1, 885,
	85, 1713,
	-2, 2088,
	-1, 886,
	85, 1714,
	-2, 2053,
	-1, 887,
	85, 1715,
	-2, 2078,
	-1, 898,
	85, 1595,
	-2, 2260,
	-1, 899,
	85, 1596,
	-2, 2261,
	-1, 900,
	85, 1597,
	-2, 2262,
	-1, 1005,
	468, 663,
	469, 663,
	-2, 629,
	-1, 1056,
	127, 1889,
	138, 1889,
	158, 1889,
	-2, 1863,
	-1, 1177,
	22, 832,
	-2, 781,
	-1, 1287,
	11, 805,
	22, 805,
	-2, 1472,
	-1, 1371,
	22, 832,
	-2, 781,
	-1, 1729,
	85, 1762,
	-2, 2060,
	-1, 1730,
	85, 1763,
	-2, 2061,
	-1, 1905,
	86, 1003,
	-2, 1009,
	-1, 2359,
	110, 1170,
	154, 1170,
	194, 1170,
	197, 1170,
	287, 1170,
	-2, 1163,
	-1, 2523,
	11, 805,
	22, 805,
	-2, 944,
	-1, 2557,
	86, 1849,
	159, 1849,
	-2, 2045,
	-1, 2558,
	86, 1849,
	159, 1849,
	-2, 2044,
	-1, 2559,
	86, 1825,
	159, 1825,
	-2, 2031,
	-1, 2560,
	86, 1826,
	159, 1826,
	-2, 2036,
	-1, 2561,
	86, 1827,
	159, 1827,
	-2, 1958,
	-1, 2562,
	86, 1828,
	159, 1828,
	-2, 1952,
	-1, 2563,
	86, 1829,
	159, 1829,
	-2, 1879,
	-1, 2564,
	86, 1830,
	159, 1830,
	-2, 2033,
	-1, 2565,
	86, 1831,
	159, 1831,
	-2, 1956,
	-1, 2566,
	86, 1832,
	159, 1832,
	-2, 1951,
	-1, 2567,
	86, 1833,
	159, 1833,
	-2, 1939,
	-1, 2568,
	86, 1849,
	159, 1849,
	-2, 1940,
	-1, 2569,
	86, 1849,
	159, 1849,
	-2, 1941,
	-1, 2571,
	86, 1838,
	159, 1838,
	-2, 2078,
	-1, 2572,
	86, 1815,
	159, 1815,
	-2, 2063,
	-1, 2573,
	86, 1847,
	159, 1847,
	-2, 2034,
	-1, 2574,
	86, 1847,
	159, 1847,
	-2, 2062,
	-1, 2575,
	86, 1847,
	159, 1847,
	-2, 1907,
	-1, 2576,
	86, 1845,
	159, 1845,
	-2, 2053,
	-1, 2577,
	86, 1842,
	159, 1842,
	-2, 1930,
	-1, 2578,
	85, 1796,
	86, 1796,
	159, 1796,
	403, 1796,
	404, 1796,
	405, 1796,
	-2, 1878,
	-1, 2579,
	85, 1797,
	86, 1797,
	159, 1797,
	403, 1797,
	404, 1797,
	405, 1797,
	-2, 1880,
	-1, 2580,
	85, 1798,
	86, 1798,
	159, 1798,
	403, 1798,
	404, 1798,
	405, 1798,
	-2, 2106,
	-1, 2581,
	85, 1800,
	86, 1800,
	159, 1800,
	403, 1800,
	404, 1800,
	405, 1800,
	-2, 2035,
	-1, 2582,
	85, 1802,
	86, 1802,
	159, 1802,
	403, 1802,
	404, 1802,
	405, 1802,
	-2, 2013,
	-1, 2583,
	85, 1804,
	86, 1804,
	159, 1804,
	403, 1804,
	404, 1804,
	405, 1804,
	-2, 1957,
	-1, 2584,
	85, 1806,
	86, 1806,
	159, 1806,
	403, 1806,
	404, 1806,
	405, 1806,
	-2, 1935,
	-1, 2585,
	85, 1807,
	86, 1807,
	159, 1807,
	403, 1807,
	404, 1807,
	405, 1807,
	-2, 1936,
	-1, 2586,
	85, 1809,
	86, 1809,
	159, 1809,
	403, 1809,
	404, 1809,
	405, 1809,
	-2, 1877,
	-1, 2587,
	86, 1852,
	159, 1852,
	403, 1852,
	404, 1852,
	405, 1852,
	-2, 1912,
	-1, 2588,
	86, 1852,
	159, 1852,
	403, 1852,
	404, 1852,
	405, 1852,
	-2, 1926,
	-1, 2589,
	86, 1855,
	159, 1855,
	403, 1855,
	404, 1855,
	405, 1855,
	-2, 1908,
	-1, 2590,
	86, 1855,
	159, 1855,
	403, 1855,
	404, 1855,
	405, 1855,
	-2, 1973,
	-1, 2591,
	86, 1852,
	159, 1852,
	403, 1852,
	404, 1852,
	405, 1852,
	-2, 1995,
	-1, 2807,
	110, 1170,
	154, 1170,
	194, 1170,
	197, 1170,
	287, 1170,
	-2, 1164,
	-1, 2825,
	83, 725,
	159, 725,
	-2, 1348,
	-1, 3249,
	197, 1170,
	311, 1435,
	-2, 1407,
	-1, 3430,
	110, 1170,
	154, 1170,
	194, 1170,
	197, 1170,
	-2, 1288,
	-1, 3432,
	110, 1170,
	154, 1170,
	194, 1170,
	197, 1170,
	-2, 1288,
	-1, 3444,
	83, 725,
	159, 725,
	-2, 1348,
	-1, 3465,
	197, 1170,
	311, 1435,
	-2, 1408,
	-1, 3617,
	110, 1170,
	154, 1170,
	194, 1170,
	197, 1170,
	-2, 1289,
	-1, 3645,
	86, 1250,
	159, 1250,
	-2, 1170,
	-1, 3789,
	86, 1250,
	159, 1250,
	-2, 1170,
	-1, 3953,
	86, 1254,
	159, 1254,
	-2, 1170,
	-1, 4004,
	86, 1255,
	159, 1255,
	-2, 1170,
}

const yyPrivate = 57344

const yyLast = 54633

var yyAct = [...]int{
	777, 753, 4054, 779, 4026, 2856, 223, 4046, 3957, 1709,
	3450, 3963, 1632, 3956, 1993, 3549, 3855, 3964, 3268, 3235,
	3836, 3789, 762, 3913, 3479, 3342, 3673, 3737, 2850, 3767,
	3878, 755, 3827, 1323, 3343, 3788, 3856, 3605, 3706, 1705,
	1476, 807, 1544, 2853, 3553, 1055, 643, 3837, 1178, 3758,
	3839, 1769, 3412, 2767, 37, 1482, 3544, 1938, 3417, 1756,
	3619, 2409, 3466, 661, 3626, 667, 667, 1172, 3244, 3614,
	2828, 667, 685, 694, 1712, 3206, 694, 3433, 3192, 68,
	3168, 2555, 2969, 3587, 2091, 2968, 3195, 2945, 1774, 3404,
	2104, 2879, 2967, 3340, 3264, 3246, 3253, 3435, 2517, 2964,
	2127, 3384, 706, 1771, 751, 2088, 2200, 3036, 2159, 2996,
	2680, 2053, 2553, 3308, 2796, 2412, 1953, 3175, 2370, 3173,
	3171, 3170, 3252, 3215, 2956, 1537, 691, 702, 1168, 3166,
	2338, 2645, 1610, 750, 208, 2808, 2314, 2196, 3169, 745,
	3143, 3083, 2313, 2184, 1451, 2624, 2168, 3010, 141, 2167,
	2160, 1617, 2132, 935, 1867, 1621, 2606, 1622, 2084, 2195,
	1625, 2518, 1441, 2501, 2881, 2057, 2785, 2780, 2496, 2861,
	976, 2410, 6, 1983, 219, 8, 2359, 1485, 2820, 218,
	7, 1914, 2369, 2551, 1116, 2054, 1703, 2197, 1584, 1770,
	1408, 1653, 754, 1553, 1522, 36, 1516, 2350, 2230, 643,
	1763, 1708, 660, 1952, 744, 2717, 1447, 763, 2442, 1633,
	1743, 2353, 27, 1694, 2166, 1049, 1194, 2163, 1636, 2148,
	699, 1591, 1521, 223, 1910, 223, 1702, 1107, 1108, 2525,
	1913, 676, 1465, 1048, 667, 975, 902, 1775, 1518, 24,
	1014, 2497, 709, 1461, 23, 708, 25, 1575, 17, 1087,
	205, 1477, 209, 973, 10, 952, 958, 752, 693, 2062,
	2405, 642, 1393, 1324, 1369, 16, 201, 1000, 3846, 705,
	3755, 2716, 904, 2204, 663, 2753, 905, 2753, 1255, 1256,
	1257, 1254, 1064, 1486, 690, 1104, 14, 966, 2753, 967,
	206, 64, 197, 168, 1255, 1256, 1257, 1254, 3447, 2527,
	3222, 15, 1255, 1256, 1257, 1254, 3053, 3052, 198, 1082,
	2214, 33, 1173, 3580, 3420, 189, 3335, 1174, 2668, 199,
	2612, 2609, 2610, 1880, 666, 666, 2607, 1598, 947, 1594,
	674, 1099, 1100, 207, 697, 672, 662, 686, 140, 2312,
	668, 679, 961, 3814, 957, 1520, 1388, 1034, 924, 746,
	1100, 1061, 1362, 126, 922, 2318, 1100, 1103, 688, 1105,
	1881, 3153, 202, 1444, 1445, 1446, 1645, 2322, 1391, 3138,
	3136, 3133, 1173, 689, 3135, 4038, 1499, 1874, 1384, 1596,
	1098, 1083, 8, 687, 3542, 2745, 2743, 7, 1644, 1255,
	1256, 1257, 1254, 1255, 1256, 1257, 1254, 3032, 1063, 3030,
	938, 2137, 3822, 3713, 3707, 3545, 3341, 2181, 3841, 2162,
	1318, 903, 3112, 2154, 2450, 4060, 3835, 3774, 4035, 3721,
	206, 1253, 1217, 914, 3939, 206, 3992, 206, 206, 2747,
	3559, 2360, 3592, 2654, 206, 3588, 3434, 2662, 1640, 148,
	149, 1399, 150, 151, 2361, 2201, 746, 152, 923, 2814,
	153, 1631, 1651, 206, 921, 3833, 1077, 1072, 1067, 1071,
	1075, 3775, 3742, 206, 924, 2698, 3889, 1394, 1637, 206,
	64, 197, 168, 3055, 1059, 963, 140, 956, 1060, 1561,
	1398, 1397, 1648, 1396, 1080, 3719, 960, 959, 1070, 922,
	206, 1065, 1639, 674, 704, 1029, 1027, 202, 1028, 2812,
	202, 3044, 1400, 941, 1416, 3110, 1650, 948, 2212, 1433,
	2962, 140, 2354, 167, 195, 204, 196, 124, 1495, 1883,
	1946, 1496, 919, 1695, 2545, 202, 1699, 955, 206, 64,
	197, 168, 915, 2769, 1252, 202, 194, 188, 187, 1078,
	2546, 202, 3744, 70, 3004, 3005, 965, 1676, 1081, 2815,
	1698, 954, 3137, 3134, 3003, 953, 206, 64, 197, 168,
	2532, 940, 202, 2531, 2068, 2069, 2533, 946, 1892, 1893,
	1068, 2770, 2101, 2067, 2625, 206, 64, 197, 168, 1023,
	206, 64, 197, 168, 1473, 1245, 1035, 3936, 1967, 944,
	1225, 1711, 1662, 1227, 1079, 1250, 206, 64, 197, 168,
	202, 1523, 3239, 1525, 190, 191, 192, 3237, 1031, 1498,
	893, 3569, 892, 894, 895, 1058, 896, 897, 1483, 1484,
	1186, 1228, 2782, 1057, 1597, 1595, 1232, 964, 202, 1233,
	3967, 3968, 2783, 1944, 1069, 3844, 1700, 200, 1415, 2748,
	3932, 3991, 3844, 3927, 1189, 1481, 3843, 202, 2301, 1480,
	1483, 1484, 202, 945, 3842, 1197, 1200, 1235, 136, 3915,
	1697, 3825, 193, 3344, 137, 667, 667, 1809, 202, 3344,
	3941, 3942, 1033, 3915, 3843, 3926, 667, 1182, 3037, 3842,
	3925, 2781, 2649, 3937, 3938, 4030, 4031, 3828, 3829, 3830,
	3831, 3918, 167, 195, 204, 196, 694, 694, 3038, 667,
	3039, 3710, 1183, 1221, 2216, 2085, 2075, 1197, 1200, 3073,
	2900, 1076, 2771, 3852, 3357, 194, 1690, 3405, 2208, 2491,
	3188, 138, 3186, 1110, 1237, 2079, 3410, 1238, 2957, 1223,
	962, 3597, 2145, 2485, 63, 691, 691, 691, 964, 1230,
	2349, 1226, 1229, 2788, 3746, 3747, 2772, 1073, 1715, 1032,
	1074, 3568, 1604, 1603, 2746, 1240, 3491, 1248, 1249, 3570,
	3934, 3071, 1295, 1064, 2213, 1247, 3845, 1222, 3754, 951,
	1387, 2659, 1497, 3360, 1945, 3077, 1509, 1696, 3183, 3184,
	1181, 740, 2208, 65, 742, 193, 2752, 3966, 1471, 741,
	2448, 1417, 1220, 2951, 3185, 3543, 1174, 1175, 1174, 1243,
	1244, 3031, 1192, 1231, 3182, 2487, 1212, 2488, 2489, 1182,
	1174, 3700, 2202, 3751, 3594, 3193, 3388, 2494, 146, 203,
	2765, 147, 3054, 2202, 2319, 917, 169, 2099, 2100, 1882,
	2548, 61, 1061, 1242, 1646, 2202, 1064, 1236, 3051, 659,
	1327, 3506, 3560, 2203, 1224, 3267, 2235, 1100, 3265, 3266,
	1084, 1100, 1066, 1100, 1199, 1198, 1100, 3503, 2766, 3241,
	1100, 3999, 1100, 918, 3204, 3773, 3216, 1714, 1713, 939,
	1174, 937, 3779, 3871, 3771, 2215, 1241, 2821, 3940, 1063,
	1234, 1721, 1724, 1725, 2219, 2221, 2222, 3866, 1030, 2947,
	2480, 696, 1722, 690, 690, 690, 2608, 139, 45, 695,
	1599, 1239, 2960, 2356, 62, 1061, 1199, 1198, 5, 3701,
	2428, 3496, 1328, 3144, 3857, 3873, 2408, 2431, 3451, 1390,
	3180, 1392, 3879, 3236, 666, 1171, 143, 144, 3194, 1201,
	145, 2855, 3458, 1404, 1460, 1180, 903, 1407, 1177, 1170,
	3397, 1413, 661, 1209, 2334, 1176, 686, 686, 686, 1060,
	1367, 2744, 1063, 1372, 1205, 1206, 169, 3720, 1208, 692,
	3593, 169, 3741, 169, 169, 2663, 1289, 688, 688, 688,
	169, 2415, 1296, 1211, 2430, 976, 3507, 3745, 1395, 3729,
	3270, 3730, 689, 689, 689, 1483, 1484, 692, 3395, 169,
	1483, 1484, 687, 687, 687, 3157, 2483, 1685, 203, 169,
	1686, 1884, 1191, 703, 920, 169, 692, 1188, 3396, 2851,
	2852, 692, 2855, 2548, 1472, 1291, 1292, 1293, 1294, 2429,
	3851, 65, 1185, 1187, 1190, 3664, 169, 692, 3074, 3194,
	667, 4049, 4066, 1511, 3780, 3732, 3772, 667, 3189, 3653,
	1479, 643, 643, 2460, 2459, 2958, 2086, 2794, 3556, 65,
	1203, 643, 643, 2481, 2482, 1548, 1548, 1533, 667, 3933,
	1532, 2787, 1210, 3748, 169, 1475, 1474, 3731, 65, 3659,
	1458, 1457, 1456, 65, 3880, 3793, 966, 3759, 967, 694,
	1576, 661, 3245, 1339, 1340, 1169, 1587, 3955, 3132, 65,
	2451, 3242, 169, 3436, 1546, 1546, 1286, 2408, 1550, 3540,
	2901, 223, 2902, 2903, 2929, 2076, 3598, 1409, 1555, 3347,
	643, 169, 2414, 704, 3912, 1691, 169, 2416, 2791, 2792,
	1519, 2998, 3000, 3261, 2078, 3181, 3148, 1453, 1723, 1410,
	1411, 2220, 169, 2790, 2425, 1420, 1421, 1422, 1423, 1424,
	2655, 1426, 1217, 2537, 1414, 2446, 2205, 1432, 2074, 1510,
	3729, 2051, 3730, 1406, 1425, 3299, 1373, 3265, 3266, 2758,
	3015, 3016, 1629, 1886, 3076, 3398, 1431, 1634, 3724, 1371,
	1430, 2417, 4050, 1429, 1643, 3269, 1428, 2418, 1542, 1543,
	3674, 3675, 3676, 3680, 3678, 3679, 3677, 1450, 2800, 2803,
	2804, 2805, 2801, 2802, 1036, 1459, 698, 2415, 2418, 3385,
	1419, 1024, 1469, 1674, 968, 2231, 3732, 3262, 3792, 3666,
	1488, 1489, 2898, 1491, 1492, 1438, 1493, 1548, 1895, 1548,
	1182, 2217, 2218, 1638, 2762, 1652, 1467, 1468, 1440, 2326,
	1649, 1403, 1216, 2333, 970, 971, 972, 1896, 3731, 936,
	1443, 3085, 3084, 691, 3578, 2445, 691, 691, 1064, 3150,
	1608, 2325, 1611, 1612, 925, 1064, 1527, 1529, 3627, 1684,
	1500, 1501, 2328, 2327, 1613, 1614, 1540, 1541, 1418, 3954,
	1487, 1605, 1894, 1490, 2472, 1462, 1466, 1466, 1466, 1401,
	1402, 1024, 926, 1577, 1179, 1026, 1531, 1548, 1025, 1506,
	1619, 1620, 4068, 3725, 3655, 2999, 1517, 3838, 3654, 1642,
	1462, 1462, 3922, 1253, 1182, 1773, 4047, 4048, 3660, 3661,
	2826, 1556, 2419, 929, 2515, 1624, 3305, 1554, 1628, 1822,
	1627, 1804, 1805, 1710, 1808, 1600, 1757, 2269, 1568, 1562,
	2268, 672, 1823, 2419, 3221, 965, 1588, 1574, 2414, 2408,
	2413, 2548, 2411, 2416, 3348, 1830, 4062, 1832, 2424, 1833,
	1834, 1835, 2422, 1589, 2403, 2352, 1707, 2920, 2921, 2930,
	2932, 2933, 2934, 2931, 933, 1026, 4056, 3301, 1025, 931,
	930, 1452, 4044, 1731, 1732, 1733, 1734, 1735, 1736, 1737,
	1738, 1739, 1740, 1741, 1742, 1024, 1182, 2759, 1217, 1754,
	1755, 1887, 1885, 4006, 1726, 2627, 1888, 2417, 1890, 1807,
	1688, 690, 1037, 1253, 690, 690, 1897, 1899, 1865, 1900,
	2827, 1902, 1903, 3978, 3263, 1692, 1576, 1683, 1704, 2210,
	929, 1911, 1548, 1916, 1917, 3975, 1919, 1511, 667, 3202,
	1655, 1660, 1253, 667, 1663, 3401, 1548, 1452, 1831, 4057,
	976, 1214, 2516, 1939, 1682, 4007, 932, 3359, 2306, 1669,
	1670, 1678, 2827, 1681, 686, 1868, 1548, 686, 686, 1677,
	1706, 1701, 1511, 4075, 3725, 1821, 4007, 685, 3726, 1026,
	1680, 928, 1025, 2351, 2654, 688, 931, 930, 688, 688,
	1255, 1256, 1257, 1254, 2919, 3274, 3979, 1966, 1745, 1876,
	689, 1679, 1215, 689, 689, 3272, 1973, 1973, 3976, 1511,
	687, 1511, 1511, 687, 687, 667, 667, 3142, 2040, 1911,
	2044, 3969, 2516, 1548, 2048, 2049, 3140, 2244, 1215, 2064,
	2388, 643, 3951, 1812, 1813, 1814, 3108, 1918, 3906, 2341,
	1661, 2516, 3018, 1664, 1665, 643, 1828, 1548, 2126, 1829,
	1752, 1753, 1673, 1920, 1693, 2774, 1970, 1255, 1256, 1257,
	1254, 1672, 2342, 2343, 2749, 2644, 1842, 1843, 1255, 1256,
	1257, 1254, 3203, 1871, 667, 1911, 1548, 1995, 2109, 2632,
	667, 667, 667, 702, 702, 2201, 1864, 3905, 3305, 1836,
	2119, 2120, 2121, 2122, 2245, 747, 2066, 2128, 907, 908,
	909, 910, 1940, 2243, 223, 3952, 2102, 223, 223, 3899,
	223, 1253, 2042, 2401, 2241, 1866, 3874, 1907, 1908, 1909,
	1255, 1256, 1257, 1254, 1958, 1976, 3862, 2415, 2418, 1922,
	1923, 1924, 1925, 1915, 1872, 2311, 907, 908, 909, 910,
	1965, 2305, 2304, 1968, 1969, 3812, 2080, 1931, 2276, 3811,
	1822, 1822, 2170, 1954, 3806, 1956, 1957, 3805, 2094, 2095,
	1253, 1822, 1822, 2071, 3804, 2073, 2387, 1947, 2186, 1963,
	2111, 2112, 2113, 1906, 1950, 1951, 2092, 2093, 1559, 2108,
	2192, 3803, 2245, 3783, 2087, 1936, 1935, 3782, 2097, 2210,
	2124, 1960, 1961, 3757, 1179, 2050, 1217, 1921, 1975, 3863,
	1939, 1439, 1926, 2180, 1548, 2199, 3512, 1638, 1955, 1760,
	1949, 1971, 3460, 1959, 1977, 1978, 1941, 1942, 3813, 1534,
	4058, 2172, 2374, 3447, 2047, 1964, 3409, 2245, 3426, 1064,
	2245, 691, 1064, 3377, 3022, 3373, 3690, 2245, 2136, 3282,
	1064, 2139, 2140, 2041, 2142, 2993, 2065, 1972, 1974, 912,
	1462, 2688, 2735, 2046, 2245, 2723, 2210, 2193, 2052, 2070,
	2210, 2072, 2715, 2419, 1466, 2670, 2245, 2176, 2414, 2408,
	2413, 2652, 2411, 2416, 1979, 1980, 1466, 1704, 2081, 2548,
	1160, 1156, 1157, 1158, 1159, 3461, 2693, 912, 2692, 2691,
	2689, 2640, 1095, 1096, 1097, 2634, 2165, 2829, 1061, 2106,
	2629, 3427, 2107, 2114, 2115, 3510, 3378, 2165, 3374, 1061,
	2621, 2619, 3283, 2617, 2615, 2373, 1101, 1102, 2516, 2657,
	2656, 1106, 2133, 2307, 2283, 2374, 1094, 2417, 1253, 1091,
	2282, 2267, 2648, 2105, 2258, 1253, 1064, 2257, 1253, 2105,
	2105, 2105, 1368, 927, 2374, 1063, 2150, 2395, 2256, 2246,
	2209, 1666, 2264, 2249, 2191, 2131, 1063, 2182, 2690, 2117,
	1657, 1304, 1202, 1270, 2630, 2228, 2229, 1286, 2635, 1166,
	1939, 2171, 2096, 2630, 1161, 2607, 2179, 3226, 2177, 1811,
	1810, 3867, 3628, 2622, 2620, 3439, 2616, 2616, 2374, 690,
	3333, 2134, 2316, 2317, 2190, 2320, 2306, 1253, 2323, 3437,
	3068, 4069, 1448, 1253, 1253, 1061, 1449, 1253, 3023, 2329,
	1253, 1811, 1810, 4034, 2443, 745, 2194, 2188, 667, 667,
	667, 1253, 2245, 2210, 1667, 3868, 3629, 2299, 3847, 3440,
	2207, 1751, 3756, 667, 667, 667, 667, 2247, 3717, 3217,
	1536, 3657, 686, 3438, 3656, 2223, 2371, 1748, 1750, 1747,
	3787, 1749, 1063, 1538, 3642, 2375, 2376, 2377, 3601, 2380,
	1511, 1494, 2232, 688, 1539, 1745, 2224, 3419, 2225, 3306,
	3297, 3289, 1463, 2237, 1255, 1256, 1257, 1254, 689, 1273,
	1274, 1275, 1276, 1277, 1270, 3336, 1511, 3284, 687, 1088,
	1089, 1090, 1093, 1848, 1092, 934, 3197, 2954, 2953, 2694,
	2695, 2798, 2754, 2437, 1269, 1268, 1278, 1279, 1271, 1272,
	1273, 1274, 1275, 1276, 1277, 1270, 2226, 2227, 2189, 3218,
	1837, 1838, 1839, 1840, 2667, 1841, 1844, 1845, 1846, 1847,
	1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858,
	1859, 1504, 1505, 1535, 1507, 1508, 2392, 1512, 1513, 1514,
	2394, 2444, 2396, 2633, 2539, 2175, 1764, 2277, 2278, 2174,
	2280, 667, 1973, 3219, 1448, 2173, 1435, 2287, 1449, 1434,
	2520, 2520, 2064, 2520, 2308, 1184, 2300, 2302, 2303, 3924,
	2677, 1563, 1564, 1565, 1566, 1567, 2601, 1569, 1570, 1571,
	1572, 1573, 1464, 643, 643, 1579, 1580, 1581, 1582, 1257,
	1254, 1182, 2397, 1901, 1254, 2382, 2383, 1548, 667, 1255,
	1256, 1257, 1254, 3669, 3668, 2385, 2386, 2407, 2406, 2335,
	2611, 667, 1255, 1256, 1257, 1254, 3040, 1182, 2592, 661,
	3648, 3334, 1327, 2890, 1764, 1587, 2238, 2064, 2888, 1592,
	2597, 2134, 2599, 2867, 2865, 223, 2543, 2384, 3602, 3603,
	4065, 1064, 2390, 2400, 1306, 2391, 1255, 1256, 1257, 1254,
	2797, 1826, 2737, 2381, 2738, 2679, 4040, 1305, 4039, 2522,
	3982, 2526, 1255, 1256, 1257, 1254, 1827, 2345, 2346, 2347,
	2389, 2603, 3595, 2524, 3950, 2637, 3949, 2534, 3869, 2535,
	3407, 2941, 2362, 2363, 2364, 2365, 2768, 1255, 1256, 1257,
	1254, 2528, 2650, 2939, 1328, 2199, 1593, 3808, 2540, 2541,
	2937, 2550, 1548, 2393, 1548, 4064, 1548, 3796, 3786, 2449,
	1061, 1182, 2452, 2453, 2454, 2455, 2456, 2457, 2458, 2669,
	2556, 2461, 2462, 2463, 2464, 2465, 2466, 2467, 2468, 2469,
	2470, 2471, 3596, 2473, 2474, 2475, 2476, 2477, 2596, 2478,
	3408, 2940, 3776, 2660, 2490, 1548, 1182, 2495, 2420, 2421,
	2701, 2426, 3708, 2938, 1466, 2926, 3631, 1063, 3630, 3452,
	2936, 2529, 3441, 3406, 3285, 2708, 780, 790, 2594, 2602,
	1548, 2646, 2647, 3187, 3064, 3035, 781, 3034, 782, 786,
	789, 785, 783, 784, 1546, 2924, 2923, 2696, 2922, 2914,
	2908, 2544, 2907, 2906, 2547, 2905, 2707, 2750, 1527, 1529,
	1271, 1272, 1273, 1274, 1275, 1276, 1277, 1270, 2623, 1546,
	1517, 2536, 2709, 2595, 2664, 2925, 2310, 2153, 3101, 2756,
	2757, 2593, 2681, 2760, 2681, 2152, 2712, 2713, 2151, 2147,
	2146, 787, 2103, 1891, 1258, 1255, 1256, 1257, 1254, 1889,
	1658, 1182, 1288, 1592, 1386, 1182, 3413, 1255, 1256, 1257,
	1254, 1298, 1548, 2685, 3418, 1511, 3174, 1554, 2666, 4061,
	740, 2044, 4059, 742, 788, 2661, 3550, 2675, 741, 2825,
	2105, 2260, 2642, 3749, 3750, 2831, 2710, 1307, 2832, 2699,
	3100, 4032, 2653, 3998, 1164, 2651, 3997, 3994, 2658, 3930,
	3929, 2741, 1255, 1256, 1257, 1254, 2842, 1255, 1256, 1257,
	1254, 3738, 3910, 1704, 3854, 3606, 1182, 1255, 1256, 1257,
	1254, 3832, 3823, 3800, 2864, 3795, 3794, 2813, 1530, 3753,
	2809, 1182, 1182, 1182, 1973, 2671, 2672, 1182, 2687, 2874,
	2875, 2876, 2877, 1182, 2884, 2697, 2885, 2886, 3740, 2887,
	2259, 2889, 1064, 1163, 2775, 3960, 3739, 3709, 2556, 2822,
	4067, 3650, 2884, 2810, 1261, 1262, 1263, 1264, 1265, 1266,
	1267, 1259, 1995, 3574, 2520, 2843, 3610, 1255, 1256, 1257,
	1254, 2795, 1255, 1256, 1257, 1254, 3599, 3581, 2942, 3579,
	3576, 2845, 2833, 3573, 3562, 3572, 3548, 3546, 643, 2674,
	1255, 1256, 1257, 1254, 3520, 2044, 3517, 3514, 2946, 1182,
	2064, 2064, 2064, 2064, 2064, 2064, 3403, 3393, 2777, 2859,
	2779, 1255, 1256, 1257, 1254, 3386, 1182, 2064, 3370, 3368,
	2520, 3363, 3295, 3294, 2859, 2870, 2871, 2862, 2776, 2835,
	2873, 2862, 3292, 2793, 2838, 3291, 2880, 2948, 1548, 2816,
	3001, 3286, 3280, 3279, 2858, 2830, 3198, 8, 3161, 667,
	667, 2824, 7, 1915, 2718, 2719, 3160, 3156, 2784, 2869,
	2724, 1278, 1279, 1271, 1272, 1273, 1274, 1275, 1276, 1277,
	1270, 2841, 2110, 792, 142, 2847, 3154, 2844, 3561, 142,
	3152, 2860, 3149, 3500, 3147, 2866, 2315, 3078, 2834, 3075,
	3033, 3008, 2872, 3365, 3087, 2935, 2927, 2839, 2840, 2917,
	2915, 2989, 2970, 2863, 223, 1255, 1256, 1257, 1254, 223,
	1255, 1256, 1257, 1254, 2911, 2910, 2904, 2909, 2252, 2970,
	1255, 1256, 1257, 1254, 2763, 2916, 2755, 2751, 2823, 848,
	847, 1822, 3104, 1822, 3002, 2643, 3050, 3103, 3019, 2330,
	2324, 2321, 673, 2242, 2156, 142, 2149, 1879, 1878, 3063,
	2240, 1659, 2949, 2896, 2897, 1548, 1335, 2955, 3070, 1255,
	1256, 1257, 1254, 1331, 1255, 1256, 1257, 1254, 2912, 2913,
	1330, 1586, 1255, 1256, 1257, 1254, 2986, 3102, 1167, 916,
	2991, 2992, 2990, 4020, 3045, 2971, 2972, 2973, 2974, 2975,
	2976, 1612, 3886, 3882, 2950, 3056, 3734, 3006, 3009, 3733,
	3722, 1613, 1614, 2952, 1255, 1256, 1257, 1254, 206, 1064,
	197, 168, 3718, 1868, 1255, 1256, 1257, 1254, 3049, 3575,
	1064, 1255, 1256, 1257, 1254, 2734, 1619, 1620, 1255, 1256,
	1257, 1254, 3557, 3432, 3431, 3430, 2733, 3400, 3024, 3382,
	3047, 3380, 3379, 3028, 3376, 3375, 1624, 3369, 3367, 1628,
	3057, 1627, 1255, 1256, 1257, 1254, 3349, 3025, 3067, 3339,
	3151, 3338, 3026, 1255, 1256, 1257, 1254, 3155, 3072, 3325,
	3324, 3158, 3159, 3227, 2732, 3164, 1062, 3046, 3041, 1182,
	202, 142, 3048, 3043, 3139, 3177, 3106, 3097, 3060, 3059,
	3058, 3089, 3066, 3088, 3082, 3191, 142, 3017, 142, 2773,
	667, 1255, 1256, 1257, 1254, 2618, 2614, 3080, 3012, 3013,
	2613, 3079, 3207, 1182, 2288, 2281, 667, 2275, 1182, 1182,
	2274, 3090, 3091, 2273, 2731, 3086, 2272, 2064, 2371, 2270,
	3225, 2730, 3099, 2266, 2265, 2263, 3095, 3096, 3141, 1716,
	1717, 1718, 1719, 1720, 3093, 2254, 2251, 3092, 2729, 3094,
	2437, 1255, 1256, 1257, 1254, 3201, 2250, 3163, 1255, 1256,
	1257, 1254, 3251, 2155, 3254, 1862, 3254, 3254, 2809, 3210,
	1861, 1182, 1860, 1825, 3214, 1255, 1256, 1257, 1254, 1824,
	1815, 1761, 2859, 206, 2728, 1765, 1766, 1767, 1768, 3275,
	3146, 1560, 1064, 3145, 1064, 1806, 3271, 1548, 1548, 1064,
	2727, 3234, 1558, 1816, 2726, 3162, 3229, 3238, 3240, 2857,
	3179, 1255, 1256, 1257, 1254, 4019, 2859, 3981, 3904, 1325,
	3881, 2859, 2859, 3818, 3815, 3802, 1064, 1255, 1256, 1257,
	1254, 1255, 1256, 1257, 1254, 3797, 1546, 1546, 3223, 3276,
	3277, 3249, 3209, 3200, 667, 3703, 3224, 3212, 3213, 3702,
	3684, 3177, 3220, 2725, 3667, 202, 1869, 3663, 3250, 3641,
	3625, 1061, 3530, 1511, 3528, 3259, 2044, 2044, 3233, 2407,
	2406, 3498, 3497, 3494, 2859, 3493, 3459, 3456, 3454, 3228,
	1255, 1256, 1257, 1254, 3230, 3231, 3113, 3114, 3255, 3256,
	3421, 3098, 3115, 3116, 3117, 3118, 1607, 3119, 3120, 3121,
	3122, 3123, 3124, 3125, 3126, 3127, 3128, 3129, 1063, 3260,
	1618, 1609, 3273, 2722, 1623, 1626, 4012, 2721, 1615, 1182,
	1442, 3898, 2720, 2701, 2943, 2988, 2714, 2868, 2818, 2817,
	2811, 3337, 3896, 2704, 3281, 4010, 2778, 2736, 1943, 2628,
	1255, 1256, 1257, 1254, 1255, 1256, 1257, 1254, 3232, 1255,
	1256, 1257, 1254, 1255, 1256, 1257, 1254, 2538, 3257, 3199,
	1255, 1256, 1257, 1254, 1962, 3302, 3303, 2479, 3288, 3287,
	2372, 2344, 2309, 1746, 3296, 3211, 202, 667, 3290, 3300,
	3293, 3639, 2116, 1905, 1875, 1689, 1641, 3313, 1616, 3314,
	1269, 1268, 1278, 1279, 1271, 1272, 1273, 1274, 1275, 1276,
	1277, 1270, 1385, 1370, 1366, 3318, 1365, 1364, 1363, 2271,
	1362, 1361, 1360, 3304, 3321, 3322, 3323, 1359, 1358, 1357,
	1356, 1355, 2556, 1869, 1354, 1353, 1352, 1351, 1869, 1869,
	2700, 3327, 1350, 1349, 3317, 1269, 1268, 1278, 1279, 1271,
	1272, 1273, 1274, 1275, 1276, 1277, 1270, 1348, 1347, 1346,
	2128, 3390, 1345, 3350, 3392, 1344, 1343, 1255, 1256, 1257,
	1254, 2676, 1342, 1341, 3351, 1338, 1337, 3352, 3355, 2681,
	1336, 3965, 1759, 1334, 3356, 1333, 1332, 1329, 2135, 3371,
	1322, 2138, 1321, 1319, 2141, 1318, 1317, 2143, 1255, 1256,
	1257, 1254, 1316, 1315, 667, 2044, 1314, 1313, 3361, 1255,
	1256, 1257, 1254, 2105, 1312, 3425, 1311, 1310, 1309, 1308,
	1303, 3394, 1302, 1301, 1300, 1299, 1219, 1165, 3309, 3310,
	3399, 2520, 2064, 3444, 3894, 3892, 3495, 3402, 2379, 2358,
	1207, 3383, 3312, 2799, 2549, 2158, 1218, 3316, 2983, 2981,
	2979, 3315, 2185, 2984, 2982, 1064, 3462, 3387, 2498, 1182,
	3389, 2978, 1064, 125, 142, 142, 142, 1062, 3251, 67,
	66, 2987, 1182, 2980, 2505, 2509, 2510, 2511, 2506, 2514,
	2507, 2512, 2977, 1182, 2508, 3509, 2513, 3923, 2985, 1548,
	2510, 2511, 3646, 3834, 3414, 2505, 2509, 2510, 2511, 2506,
	2514, 2507, 2512, 2641, 3416, 2508, 3446, 2513, 2631, 1436,
	667, 3196, 2044, 3247, 3532, 3248, 1182, 1933, 1934, 3062,
	3485, 3492, 3533, 1928, 1929, 1930, 2892, 2447, 1546, 3442,
	3505, 3511, 669, 2893, 2894, 2895, 3353, 3354, 670, 671,
	1287, 3449, 3328, 3443, 2626, 223, 3358, 2033, 1601, 2646,
	2647, 2331, 3453, 2665, 3455, 1654, 2234, 1635, 1182, 2118,
	2239, 3521, 3463, 3524, 3499, 1213, 3501, 3504, 2248, 3172,
	3534, 3531, 3165, 2846, 3508, 3502, 2819, 2399, 3445, 2367,
	1937, 3513, 1904, 4023, 3515, 3799, 2880, 3448, 3516, 1811,
	1810, 1381, 1382, 3519, 1379, 1380, 1377, 1378, 3525, 3577,
	3522, 3526, 1375, 1376, 3523, 2255, 3518, 3278, 3584, 2492,
	2486, 2045, 1182, 2262, 3555, 1503, 1502, 1246, 3320, 2970,
	3422, 3423, 3424, 3011, 2332, 2187, 3428, 3429, 1455, 1454,
	1427, 1478, 1182, 1548, 1548, 2279, 3988, 3986, 3207, 3943,
	2284, 2285, 2286, 3551, 3920, 2289, 2290, 2291, 2292, 2293,
	2294, 2295, 2296, 2297, 2298, 3618, 3552, 3618, 1795, 3582,
	3583, 2970, 3919, 2105, 3917, 1182, 3635, 1182, 3858, 3819,
	3612, 3613, 1546, 1757, 3638, 3608, 3640, 3698, 3697, 3541,
	3636, 3547, 3372, 3607, 1548, 3346, 3345, 3331, 3589, 1374,
	3586, 2432, 3590, 3609, 2402, 3615, 3591, 1656, 3330, 3021,
	1452, 3391, 667, 3600, 1182, 1182, 4014, 4013, 1182, 1182,
	3065, 2761, 3623, 3611, 2360, 2859, 3622, 2253, 1389, 1204,
	1064, 4013, 2172, 1757, 3634, 3446, 4014, 3665, 3326, 3686,
	1179, 210, 3, 3681, 1470, 75, 3485, 3492, 3647, 1939,
	3644, 3695, 2, 3651, 907, 908, 909, 910, 4036, 1179,
	4037, 3536, 1, 3704, 3705, 3671, 3672, 2742, 1873, 3682,
	3683, 1383, 911, 906, 1524, 2530, 1548, 2098, 1710, 2105,
	1710, 1552, 1877, 913, 3643, 3692, 2994, 2995, 3319, 2997,
	2764, 2206, 2959, 2484, 3649, 2348, 3190, 1437, 3691, 3735,
	969, 1817, 3571, 1671, 1196, 1668, 3693, 3632, 3633, 1195,
	3728, 1193, 1762, 794, 2161, 1546, 2944, 2918, 3716, 3694,
	4022, 4053, 3980, 4025, 1687, 778, 3911, 3824, 3687, 3711,
	3715, 3984, 3826, 3714, 2211, 3723, 1791, 1251, 3727, 3042,
	996, 976, 835, 1788, 805, 1320, 3768, 1790, 1787, 1789,
	1793, 1794, 3762, 1647, 1557, 1792, 3111, 3109, 673, 3563,
	804, 3564, 1182, 3411, 2789, 3699, 3014, 3770, 997, 2144,
	3821, 3785, 3712, 3752, 1602, 1606, 2398, 1869, 3778, 1869,
	3791, 3877, 3645, 3243, 2854, 3763, 1630, 3764, 3555, 3872,
	3457, 3760, 3567, 3765, 142, 3565, 3566, 710, 1869, 1869,
	3781, 3777, 2077, 641, 1046, 1182, 3685, 2157, 711, 2378,
	1548, 3935, 3801, 949, 2357, 950, 1064, 942, 2807, 2806,
	1727, 1260, 1744, 3130, 3131, 1297, 749, 3798, 2236, 2786,
	1586, 3480, 3007, 74, 73, 3688, 72, 71, 231, 3689,
	796, 230, 3736, 3604, 3907, 4027, 775, 774, 773, 1546,
	772, 771, 3809, 770, 2503, 2504, 3807, 2502, 2500, 2499,
	2059, 2058, 142, 3850, 3020, 1710, 3329, 3840, 2123, 142,
	3820, 3670, 2125, 3205, 2883, 2878, 1984, 1982, 1515, 2636,
	2427, 2639, 142, 2434, 1981, 142, 142, 3962, 3362, 3558,
	3887, 3888, 3662, 2928, 3554, 1927, 3859, 2423, 142, 1798,
	1799, 1800, 1801, 1802, 1803, 1796, 1797, 2001, 2899, 1998,
	1997, 2891, 3658, 3853, 3652, 3848, 2029, 3766, 3617, 3464,
	3465, 3471, 3861, 1182, 3876, 2366, 1115, 1111, 1113, 1114,
	1112, 1548, 2686, 3298, 3901, 2404, 3167, 2340, 3870, 3908,
	3891, 3893, 3895, 3897, 2678, 3875, 2339, 2684, 2337, 2336,
	1412, 3849, 3884, 3931, 3585, 3909, 2554, 2552, 2702, 2703,
	1162, 3311, 3307, 2169, 2183, 3061, 2705, 2706, 2060, 2056,
	1546, 2055, 1086, 3900, 3890, 1085, 1583, 2961, 2493, 3916,
	3914, 1548, 2711, 3743, 3768, 1932, 943, 2355, 109, 41,
	122, 108, 185, 59, 3928, 184, 58, 120, 182, 57,
	3953, 103, 102, 119, 180, 56, 3961, 3944, 215, 214,
	217, 1716, 1869, 3946, 3637, 216, 3947, 3948, 213, 3810,
	1546, 2604, 2605, 3945, 212, 1590, 211, 3921, 3621, 3903,
	901, 44, 3816, 3817, 43, 186, 42, 3977, 110, 3970,
	60, 3971, 40, 3972, 3974, 3973, 39, 38, 34, 13,
	12, 35, 22, 3987, 21, 3989, 3990, 1675, 3985, 3983,
	20, 26, 32, 31, 1182, 3993, 135, 3840, 1269, 1268,
	1278, 1279, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1270,
	134, 30, 133, 132, 4002, 131, 130, 129, 3791, 4005,
	128, 127, 3860, 2836, 2837, 4004, 4011, 3864, 3865, 4008,
	4021, 4009, 4029, 4003, 29, 4028, 19, 4015, 4016, 4017,
	4018, 51, 50, 49, 48, 47, 46, 9, 123, 118,
	4041, 116, 1182, 28, 4033, 117, 114, 115, 3885, 113,
	112, 4042, 111, 4043, 106, 104, 4045, 86, 85, 3876,
	84, 99, 4051, 3107, 98, 4055, 206, 64, 197, 168,
	97, 96, 4052, 95, 94, 92, 984, 93, 995, 83,
	82, 81, 80, 79, 198, 101, 107, 4000, 105, 4063,
	90, 189, 100, 3469, 91, 199, 89, 88, 4029, 4071,
	87, 4028, 4070, 78, 77, 76, 166, 165, 164, 163,
	4055, 4072, 162, 160, 140, 161, 4076, 1269, 1268, 1278,
	1279, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1270, 126,
	159, 158, 2063, 157, 3481, 156, 155, 154, 202, 52,
	53, 54, 55, 176, 175, 1710, 177, 3472, 980, 981,
	179, 181, 178, 183, 1869, 173, 171, 174, 3467, 1024,
	172, 170, 69, 3489, 3490, 11, 121, 18, 4, 3468,
	0, 0, 0, 0, 0, 722, 721, 728, 718, 0,
	0, 0, 0, 0, 0, 3995, 3996, 725, 726, 0,
	727, 731, 0, 0, 712, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 736, 0, 3473, 142, 0, 0,
	142, 142, 0, 142, 0, 148, 149, 0, 150, 151,
	0, 0, 0, 152, 0, 0, 153, 0, 0, 0,
	0, 0, 0, 3027, 0, 3029, 0, 0, 0, 0,
	0, 0, 0, 1026, 0, 0, 1025, 0, 0, 0,
	0, 0, 0, 1062, 1869, 0, 142, 0, 0, 1869,
	0, 0, 0, 0, 1062, 0, 0, 0, 0, 0,
	2185, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	142, 0, 0, 0, 0, 1010, 0, 0, 0, 167,
	195, 204, 196, 124, 985, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3488, 3081, 2413, 0, 0, 0,
	0, 0, 194, 188, 187, 0, 1281, 0, 1285, 70,
	0, 987, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3477, 0, 3105, 1282, 1284, 1280, 2673, 1283, 1269,
	1268, 1278, 1279, 1271, 1272, 1273, 1274, 1275, 1276, 1277,
	1270, 0, 0, 3474, 3478, 3476, 3475, 0, 0, 0,
	1287, 1269, 1268, 1278, 1279, 1271, 1272, 1273, 1274, 1275,
	1276, 1277, 1270, 0, 0, 0, 0, 0, 0, 0,
	190, 191, 192, 0, 0, 0, 1009, 1007, 0, 0,
	0, 0, 0, 3483, 3484, 0, 0, 0, 713, 715,
	714, 0, 0, 0, 0, 0, 0, 0, 1006, 720,
	0, 0, 0, 200, 0, 0, 0, 0, 0, 0,
	979, 724, 0, 0, 0, 0, 0, 0, 739, 0,
	0, 986, 1019, 0, 136, 717, 2233, 0, 193, 0,
	137, 3491, 1268, 1278, 1279, 1271, 1272, 1273, 1274, 1275,
	1276, 1277, 1270, 3470, 0, 1015, 0, 0, 0, 3482,
	1269, 1268, 1278, 1279, 1271, 1272, 1273, 1274, 1275, 1276,
	1277, 1270, 0, 0, 0, 0, 1134, 1269, 1268, 1278,
	1279, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1270, 0,
	0, 1016, 1020, 0, 3258, 0, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	63, 1003, 0, 1001, 1005, 1023, 0, 0, 0, 1002,
	999, 998, 0, 1004, 989, 990, 988, 991, 992, 993,
	994, 0, 1021, 0, 1022, 0, 0, 0, 0, 2030,
	0, 0, 0, 0, 1991, 1017, 1018, 719, 723, 729,
	0, 730, 732, 0, 0, 733, 734, 735, 0, 65,
	737, 738, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2033, 2000, 0, 0, 0, 0,
	0, 0, 1013, 0, 2034, 2035, 0, 0, 1012, 3487,
	0, 0, 0, 0, 146, 203, 0, 147, 0, 0,
	1119, 0, 169, 1008, 1109, 0, 0, 61, 0, 0,
	1999, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1142, 1146, 1148, 1150, 1152, 1153, 1155, 2007, 1160,
	1156, 1157, 1158, 1159, 0, 1137, 1138, 1139, 1140, 1117,
	1118, 1143, 0, 1120, 0, 1122, 1123, 1124, 1125, 1121,
	1126, 1127, 1128, 1129, 1130, 1133, 1135, 1131, 1132, 1141,
	0, 0, 0, 0, 0, 3486, 0, 1145, 1147, 1149,
	1151, 1154, 0, 139, 45, 2523, 0, 0, 0, 0,
	62, 1011, 0, 0, 0, 0, 0, 982, 983, 977,
	0, 0, 0, 0, 978, 0, 2023, 0, 0, 0,
	0, 0, 143, 144, 0, 0, 145, 1136, 0, 0,
	0, 0, 0, 0, 0, 0, 716, 2030, 0, 0,
	0, 0, 1991, 0, 0, 0, 0, 3364, 0, 0,
	0, 0, 0, 0, 3366, 0, 0, 0, 0, 0,
	2063, 0, 0, 0, 0, 0, 0, 0, 142, 0,
	0, 0, 2033, 2000, 0, 0, 0, 0, 0, 0,
	0, 0, 2034, 2035, 0, 0, 3381, 0, 0, 0,
	1990, 1992, 1989, 0, 0, 1986, 0, 0, 0, 0,
	2011, 0, 0, 0, 0, 0, 0, 0, 1999, 0,
	0, 2017, 0, 0, 0, 0, 0, 0, 0, 2002,
	0, 1985, 0, 0, 0, 0, 2007, 0, 0, 0,
	0, 2005, 2039, 0, 0, 2006, 2008, 2010, 0, 2012,
	2013, 2014, 2018, 2019, 2020, 2022, 2025, 2026, 2027, 0,
	0, 0, 0, 0, 0, 0, 2015, 2024, 2016, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1994, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2031, 0, 2023, 0, 722, 721, 728, 718,
	0, 0, 0, 0, 0, 0, 0, 0, 725, 726,
	0, 727, 731, 0, 0, 712, 0, 0, 0, 1987,
	1988, 0, 0, 0, 0, 736, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1869, 2028, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1869, 0, 2004, 3527, 0, 0, 3529, 0,
	0, 2003, 0, 0, 0, 0, 0, 0, 1990, 2849,
	1989, 740, 0, 2848, 742, 0, 3535, 0, 2011, 741,
	0, 0, 0, 0, 0, 2021, 0, 0, 0, 2017,
	0, 0, 0, 0, 2009, 0, 142, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 142, 2037, 2036, 2005,
	2039, 0, 1144, 2006, 2008, 2010, 0, 2012, 2013, 2014,
	2018, 2019, 2020, 2022, 2025, 2026, 2027, 0, 0, 0,
	0, 0, 0, 0, 2015, 2024, 2016, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1994, 0, 0, 0,
	0, 0, 0, 1134, 0, 0, 0, 0, 0, 0,
	1996, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2031, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1987, 1988, 0,
	0, 0, 2032, 0, 0, 2038, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2028, 0, 0, 0, 713,
	715, 714, 0, 0, 0, 0, 0, 0, 0, 0,
	720, 0, 2004, 2063, 2063, 2063, 2063, 2063, 2063, 2003,
	1134, 0, 724, 0, 0, 0, 0, 0, 0, 739,
	2063, 0, 0, 0, 0, 0, 717, 0, 0, 0,
	707, 0, 0, 2021, 0, 0, 0, 0, 0, 0,
	0, 0, 2009, 0, 0, 0, 0, 1119, 0, 0,
	0, 0, 0, 0, 0, 2037, 2036, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1142, 1146,
	1148, 1150, 1152, 1153, 1155, 0, 1160, 1156, 1157, 1158,
	1159, 0, 1137, 1138, 1139, 1140, 1117, 1118, 1143, 0,
	1120, 0, 1122, 1123, 1124, 1125, 1121, 1126, 1127, 1128,
	1129, 1130, 1133, 1135, 1131, 1132, 1141, 142, 1996, 0,
	0, 0, 142, 0, 1145, 1147, 1149, 1151, 1154, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 142, 1119, 0, 0, 0, 719, 723,
	729, 0, 730, 732, 142, 0, 733, 734, 735, 0,
	2032, 737, 738, 2038, 1136, 1142, 1146, 1148, 1150, 1152,
	1153, 1155, 0, 1160, 1156, 1157, 1158, 1159, 0, 1137,
	1138, 1139, 1140, 1117, 1118, 1143, 0, 1120, 0, 1122,
	1123, 1124, 1125, 1121, 1126, 1127, 1128, 1129, 1130, 1133,
	1135, 1131, 1132, 1141, 722, 721, 728, 718, 0, 0,
	0, 1145, 1147, 1149, 1151, 1154, 725, 726, 2030, 727,
	731, 0, 0, 712, 0, 206, 0, 0, 0, 0,
	0, 0, 0, 736, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3616, 0, 0,
	0, 1136, 0, 2033, 0, 0, 0, 0, 1307, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 740,
	0, 0, 742, 0, 0, 0, 0, 741, 0, 0,
	0, 0, 0, 1255, 1256, 1257, 1254, 202, 0, 0,
	0, 0, 0, 0, 0, 2682, 2683, 2007, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 716, 0, 0,
	0, 0, 0, 3883, 0, 0, 1062, 0, 142, 0,
	0, 0, 0, 142, 0, 0, 0, 0, 0, 0,
	2063, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2030, 0, 0, 0, 0, 0, 0, 0, 0,
	142, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1795, 0, 2023, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2033, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3958, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 713, 715, 714,
	3790, 0, 0, 0, 0, 0, 0, 0, 720, 0,
	2007, 0, 0, 0, 0, 0, 0, 0, 0, 1144,
	724, 0, 0, 0, 0, 0, 0, 739, 0, 2011,
	0, 0, 0, 0, 717, 0, 0, 0, 0, 0,
	2017, 0, 0, 0, 0, 0, 0, 1795, 0, 0,
	0, 3958, 0, 0, 0, 0, 0, 0, 0, 0,
	2005, 2039, 0, 0, 2006, 2008, 2010, 0, 2012, 2013,
	2014, 2018, 2019, 2020, 2022, 2025, 2026, 2027, 2023, 0,
	0, 0, 0, 0, 0, 2015, 2024, 2016, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3958, 0, 0, 1144, 0, 0, 0,
	0, 1791, 0, 0, 0, 0, 0, 0, 1788, 0,
	0, 2031, 1790, 1787, 1789, 1793, 1794, 0, 0, 0,
	1792, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 719, 723, 729, 0,
	730, 732, 0, 0, 733, 734, 735, 0, 0, 737,
	738, 0, 2011, 0, 0, 4074, 2028, 0, 0, 0,
	0, 0, 0, 2017, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2004, 0, 0, 0, 0, 0, 0,
	2003, 0, 0, 2005, 2039, 0, 0, 2006, 2008, 2010,
	0, 2012, 2013, 2014, 2018, 2019, 2020, 2022, 2025, 2026,
	2027, 0, 0, 0, 2021, 1791, 0, 0, 2015, 2024,
	2016, 0, 1788, 2009, 0, 0, 1790, 1787, 1789, 1793,
	1794, 0, 0, 0, 1792, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 142,
	0, 0, 0, 0, 2031, 0, 142, 0, 0, 0,
	0, 0, 0, 1776, 1777, 1778, 1779, 1780, 1781, 1782,
	1783, 1784, 1785, 1786, 1798, 1799, 1800, 1801, 1802, 1803,
	1796, 1797, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2028,
	0, 0, 0, 0, 0, 2063, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 716, 2004, 0, 0, 0,
	0, 0, 0, 2003, 0, 0, 0, 0, 0, 0,
	0, 3620, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2021, 0, 0,
	0, 0, 0, 0, 0, 0, 2009, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1776, 1777, 1778,
	1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1798, 1799,
	1800, 1801, 1802, 1803, 1796, 1797, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 142, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 812, 0, 0, 0,
	0, 0, 0, 0, 0, 397, 0, 527, 560, 549,
	633, 515, 0, 0, 3624, 0, 0, 0, 764, 0,
	0, 0, 336, 0, 0, 366, 564, 546, 556, 547,
	532, 533, 534, 541, 346, 535, 536, 537, 507, 538,
	508, 539, 540, 803, 563, 514, 429, 381, 581, 580,
	0, 0, 872, 880, 0, 0, 0, 0, 0, 0,
	0, 0, 868, 0, 142, 0, 0, 756, 0, 0,
	793, 848, 847, 780, 790, 0, 0, 309, 229, 509,
	629, 511, 510, 781, 0, 782, 786, 789, 785, 783,
	784, 0, 863, 0, 0, 0, 0, 0, 0, 748,
	760, 0, 765, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 757, 758, 0, 0,
	0, 0, 813, 0, 759, 0, 0, 808, 787, 791,
	0, 0, 0, 0, 299, 436, 455, 310, 424, 468,
	315, 432, 447, 305, 396, 421, 0, 0, 301, 453,
	431, 378, 356, 357, 300, 0, 415, 334, 348, 331,
	394, 788, 811, 815, 330, 886, 809, 463, 303, 0,
	462, 393, 449, 454, 379, 373, 0, 302, 451, 377,
	372, 360, 338, 887, 361, 362, 352, 405, 370, 406,
	353, 383, 382, 384, 0, 0, 0, 0, 0, 491,
	492, 0, 0, 640, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 622, 806, 0, 626, 0,
	465, 0, 0, 870, 0, 0, 0, 435, 0, 0,
	363, 0, 0, 0, 810, 0, 418, 399, 883, 0,
	142, 416, 368, 450, 407, 456, 437, 464, 412, 408,
	294, 438, 333, 380, 306, 308, 328, 335, 337, 339,
	340, 389, 390, 402, 423, 440, 441, 442, 332, 316,
	417, 317, 350, 318, 295, 324, 322, 325, 425, 326,
	297, 403, 446, 0, 345, 413, 376, 298, 375, 404,
	445, 444, 307, 472, 478, 479, 568, 0, 484, 655,
	656, 657, 493, 0, 409, 498, 499, 500, 502, 503,
	504, 505, 569, 586, 553, 523, 486, 577, 520, 524,
	525, 589, 1819, 1818, 1820, 477, 364, 365, 0, 343,
	291, 292, 650, 867, 395, 591, 624, 625, 516, 0,
	882, 862, 864, 865, 869, 873, 874, 875, 876, 877,
	879, 881, 885, 649, 0, 570, 585, 653, 584, 646,
	401, 0, 422, 582, 529, 0, 574, 548, 0, 575,
	544, 579, 0, 518, 0, 430, 458, 470, 487, 490,
	519, 604, 605, 606, 296, 489, 608, 609, 610, 611,
	612, 613, 614, 607, 884, 551, 528, 554, 469, 531,
	530, 0, 0, 565, 814, 566, 567, 385, 386, 387,
	388, 871, 592, 314, 488, 411, 0, 552, 0, 0,
	0, 0, 0, 0, 0, 0, 557, 558, 555, 658,
	0, 615, 616, 0, 0, 482, 483, 342, 349, 501,
	351, 313, 400, 344, 467, 358, 0, 494, 559, 495,
	618, 621, 619, 620, 392, 354, 355, 426, 359, 369,
	414, 466, 398, 419, 311, 457, 428, 374, 545, 572,
	893, 866, 892, 894, 895, 891, 896, 897, 878, 769,
	0, 821, 889, 888, 890, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 600, 599, 598, 597,
	596, 595, 594, 593, 0, 0, 542, 443, 323, 285,
	319, 320, 327, 647, 644, 448, 648, 776, 293, 522,
	367, 0, 410, 341, 587, 588, 0, 639, 855, 828,
	829, 830, 766, 831, 825, 826, 767, 827, 856, 819,
	852, 853, 795, 822, 832, 851, 833, 854, 857, 858,
	898, 899, 839, 823, 257, 900, 836, 859, 850, 849,
	834, 820, 860, 861, 802, 797, 837, 838, 824, 843,
	844, 845, 768, 816, 817, 818, 840, 841, 798, 799,
	800, 801, 0, 0, 0, 473, 474, 475, 497, 0,
	459, 521, 645, 0, 0, 0, 0, 0, 0, 0,
	571, 583, 617, 0, 627, 628, 630, 632, 846, 634,
	433, 434, 0, 842, 637, 638, 635, 371, 420, 439,
	427, 812, 651, 512, 513, 652, 623, 0, 761, 0,
	397, 0, 527, 560, 549, 633, 515, 0, 0, 0,
	0, 0, 0, 764, 0, 0, 0, 336, 1870, 0,
	366, 564, 546, 556, 547, 532, 533, 534, 541, 346,
	535, 536, 537, 507, 538, 508, 539, 540, 803, 563,
	514, 429, 381, 581, 580, 0, 0, 872, 880, 0,
	0, 0, 0, 0, 0, 0, 0, 868, 0, 2089,
	0, 0, 756, 0, 0, 793, 848, 847, 780, 790,
	0, 0, 309, 229, 509, 629, 511, 510, 781, 0,
	782, 786, 789, 785, 783, 784, 0, 863, 0, 0,
	0, 0, 0, 0, 748, 760, 0, 765, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 757, 758, 0, 0, 0, 0, 813, 0, 759,
	0, 0, 2090, 787, 791, 0, 0, 0, 0, 299,
	436, 455, 310, 424, 468, 315, 432, 447, 305, 396,
	421, 0, 0, 301, 453, 431, 378, 356, 357, 300,
	0, 415, 334, 348, 331, 394, 788, 811, 815, 330,
	886, 809, 463, 303, 0, 462, 393, 449, 454, 379,
	373, 0, 302, 451, 377, 372, 360, 338, 887, 361,
	362, 352, 405, 370, 406, 353, 383, 382, 384, 0,
	0, 0, 0, 0, 491, 492, 0, 0, 640, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	622, 806, 0, 626, 0, 465, 0, 0, 870, 0,
	0, 0, 435, 0, 0, 363, 0, 0, 0, 810,
	0, 418, 399, 883, 0, 0, 416, 368, 450, 407,
	456, 437, 464, 412, 408, 294, 438, 333, 380, 306,
	308, 328, 335, 337, 339, 340, 389, 390, 402, 423,
	440, 441, 442, 332, 316, 417, 317, 350, 318, 295,
	324, 322, 325, 425, 326, 297, 403, 446, 0, 345,
	413, 376, 298, 375, 404, 445, 444, 307, 472, 478,
	479, 568, 0, 484, 655, 656, 657, 493, 0, 409,
	498, 499, 500, 502, 503, 504, 505, 569, 586, 553,
	523, 486, 577, 520, 524, 525, 589, 0, 0, 0,
	477, 364, 365, 0, 343, 291, 292, 650, 867, 395,
	591, 624, 625, 516, 0, 882, 862, 864, 865, 869,
	873, 874, 875, 876, 877, 879, 881, 885, 649, 0,
	570, 585, 653, 584, 646, 401, 0, 422, 582, 529,
	0, 574, 548, 0, 575, 544, 579, 0, 518, 0,
	430, 458, 470, 487, 490, 519, 604, 605, 606, 296,
	489, 608, 609, 610, 611, 612, 613, 614, 607, 884,
	551, 528, 554, 469, 531, 530, 0, 0, 565, 814,
	566, 567, 385, 386, 387, 388, 871, 592, 314, 488,
	411, 0, 552, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 558, 555, 658, 0, 615, 616, 0, 0,
	482, 483, 342, 349, 501, 351, 313, 400, 344, 467,
	358, 0, 494, 559, 495, 618, 621, 619, 620, 392,
	354, 355, 426, 359, 369, 414, 466, 398, 419, 311,
	457, 428, 374, 545, 572, 893, 866, 892, 894, 895,
	891, 896, 897, 878, 769, 0, 821, 889, 888, 890,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 600, 599, 598, 597, 596, 595, 594, 593, 0,
	0, 542, 443, 323, 285, 319, 320, 327, 647, 644,
	448, 648, 776, 293, 522, 367, 0, 410, 341, 587,
	588, 0, 639, 855, 828, 829, 830, 766, 831, 825,
	826, 767, 827, 856, 819, 852, 853, 795, 822, 832,
	851, 833, 854, 857, 858, 898, 899, 839, 823, 257,
	900, 836, 859, 850, 849, 834, 820, 860, 861, 802,
	797, 837, 838, 824, 843, 844, 845, 768, 816, 817,
	818, 840, 841, 798, 799, 800, 801, 0, 0, 0,
	473, 474, 475, 497, 0, 459, 521, 645, 0, 0,
	0, 0, 0, 0, 0, 571, 583, 617, 0, 627,
	628, 630, 632, 846, 634, 433, 434, 0, 842, 637,
	638, 635, 371, 420, 439, 427, 0, 651, 512, 513,
	652, 623, 0, 761, 206, 812, 0, 0, 0, 0,
	0, 0, 0, 0, 397, 0, 527, 560, 549, 633,
	515, 0, 0, 0, 0, 0, 0, 764, 0, 0,
	0, 336, 0, 0, 366, 564, 546, 556, 547, 532,
	533, 534, 541, 346, 535, 536, 537, 507, 538, 508,
	539, 540, 1290, 563, 514, 429, 381, 581, 580, 0,
	0, 872, 880, 0, 0, 0, 0, 0, 0, 0,
	0, 868, 0, 0, 0, 0, 756, 0, 0, 793,
	848, 847, 780, 790, 0, 0, 309, 229, 509, 629,
	511, 510, 781, 0, 782, 786, 789, 785, 783, 784,
	0, 863, 0, 0, 0, 0, 0, 0, 748, 760,
	0, 765, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 757, 758, 0, 0, 0,
	0, 813, 0, 759, 0, 0, 808, 787, 791, 0,
	0, 0, 0, 299, 436, 455, 310, 424, 468, 315,
	432, 447, 305, 396, 421, 0, 0, 301, 453, 431,
	378, 356, 357, 300, 0, 415, 334, 348, 331, 394,
	788, 811, 815, 330, 886, 809, 463, 303, 0, 462,
	393, 449, 454, 379, 373, 0, 302, 451, 377, 372,
	360, 338, 887, 361, 362, 352, 405, 370, 406, 353,
	383, 382, 384, 0, 0, 0, 0, 0, 491, 492,
	0, 0, 640, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 622, 806, 0, 626, 0, 465,
	0, 0, 870, 0, 0, 0, 435, 0, 0, 363,
	0, 0, 0, 810, 0, 418, 399, 883, 0, 0,
	416, 368, 450, 407, 456, 437, 464, 412, 408, 294,
	438, 333, 380, 306, 308, 328, 335, 337, 339, 340,
	389, 390, 402, 423, 440, 441, 442, 332, 316, 417,
	317, 350, 318, 295, 324, 322, 325, 425, 326, 297,
	403, 446, 0, 345, 413, 376, 298, 375, 404, 445,
	444, 307, 472, 478, 479, 568, 0, 484, 655, 656,
	657, 493, 0, 409, 498, 499, 500, 502, 503, 504,
	505, 569, 586, 553, 523, 486, 577, 520, 524, 525,
	589, 0, 0, 0, 477, 364, 365, 0, 343, 291,
	292, 650, 867, 395, 591, 624, 625, 516, 0, 882,
	862, 864, 865, 869, 873, 874, 875, 876, 877, 879,
	881, 885, 649, 0, 570, 585, 653, 584, 646, 401,
	0, 422, 582, 529, 0, 574, 548, 0, 575, 544,
	579, 0, 518, 0, 430, 458, 470, 487, 490, 519,
	604, 605, 606, 296, 489, 608, 609, 610, 611, 612,
	613, 614, 607, 884, 551, 528, 554, 469, 531, 530,
	0, 0, 565, 814, 566, 567, 385, 386, 387, 388,
	871, 592, 314, 488, 411, 0, 552, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 558, 555, 658, 0,
	615, 616, 0, 0, 482, 483, 342, 349, 501, 351,
	313, 400, 344, 467, 358, 0, 494, 559, 495, 618,
	621, 619, 620, 392, 354, 355, 426, 359, 369, 414,
	466, 398, 419, 311, 457, 428, 374, 545, 572, 893,
	866, 892, 894, 895, 891, 896, 897, 878, 769, 0,
	821, 889, 888, 890, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 600, 599, 598, 597, 596,
	595, 594, 593, 0, 0, 542, 443, 323, 285, 319,
	320, 327, 647, 644, 448, 648, 776, 293, 522, 367,
	169, 410, 341, 587, 588, 0, 639, 855, 828, 829,
	830, 766, 831, 825, 826, 767, 827, 856, 819, 852,
	853, 795, 822, 832, 851, 833, 854, 857, 858, 898,
	899, 839, 823, 257, 900, 836, 859, 850, 849, 834,
	820, 860, 861, 802, 797, 837, 838, 824, 843, 844,
	845, 768, 816, 817, 818, 840, 841, 798, 799, 800,
	801, 0, 0, 0, 473, 474, 475, 497, 0, 459,
	521, 645, 0, 0, 0, 0, 0, 0, 0, 571,
	583, 617, 0, 627, 628, 630, 632, 846, 634, 433,
	434, 0, 842, 637, 638, 635, 371, 420, 439, 427,
	812, 651, 512, 513, 652, 623, 0, 761, 0, 397,
	0, 527, 560, 549, 633, 515, 0, 0, 0, 0,
	0, 0, 764, 0, 0, 0, 336, 4073, 0, 366,
	564, 546, 556, 547, 532, 533, 534, 541, 346, 535,
	536, 537, 507, 538, 508, 539, 540, 803, 563, 514,
	429, 381, 581, 580, 0, 0, 872, 880, 0, 0,
	0, 0, 0, 0, 0, 0, 868, 0, 0, 0,
	0, 756, 0, 0, 793, 848, 847, 780, 790, 0,
	0, 309, 229, 509, 629, 511, 510, 781, 0, 782,
	786, 789, 785, 783, 784, 0, 863, 0, 0, 0,
	0, 0, 0, 748, 760, 0, 765, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	757, 758, 0, 0, 0, 0, 813, 0, 759, 0,
	0, 808, 787, 791, 0, 0, 0, 0, 299, 436,
	455, 310, 424, 468, 315, 432, 447, 305, 396, 421,
	0, 0, 301, 453, 431, 378, 356, 357, 300, 0,
	415, 334, 348, 331, 394, 788, 811, 815, 330, 886,
	809, 463, 303, 0, 462, 393, 449, 454, 379, 373,
	0, 302, 451, 377, 372, 360, 338, 887, 361, 362,
	352, 405, 370, 406, 353, 383, 382, 384, 0, 0,
	0, 0, 0, 491, 492, 0, 0, 640, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 622,
	806, 0, 626, 0, 465, 0, 0, 870, 0, 0,
	0, 435, 0, 0, 363, 0, 0, 0, 810, 0,
	418, 399, 883, 0, 0, 416, 368, 450, 407, 456,
	437, 464, 412, 408, 294, 438, 333, 380, 306, 308,
	328, 335, 337, 339, 340, 389, 390, 402, 423, 440,
	441, 442, 332, 316, 417, 317, 350, 318, 295, 324,
	322, 325, 425, 326, 297, 403, 446, 0, 345, 413,
	376, 298, 375, 404, 445, 444, 307, 472, 478, 479,
	568, 0, 484, 655, 656, 657, 493, 0, 409, 498,
	499, 500, 502, 503, 504, 505, 569, 586, 553, 523,
	486, 577, 520, 524, 525, 589, 0, 0, 0, 477,
	364, 365, 0, 343, 291, 292, 650, 867, 395, 591,
	624, 625, 516, 0, 882, 862, 864, 865, 869, 873,
	874, 875, 876, 877, 879, 881, 885, 649, 0, 570,
	585, 653, 584, 646, 401, 0, 422, 582, 529, 0,
	574, 548, 0, 575, 544, 579, 0, 518, 0, 430,
	458, 470, 487, 490, 519, 604, 605, 606, 296, 489,
	608, 609, 610, 611, 612, 613, 614, 607, 884, 551,
	528, 554, 469, 531, 530, 0, 0, 565, 814, 566,
	567, 385, 386, 387, 388, 871, 592, 314, 488, 411,
	0, 552, 0, 0, 0, 0, 0, 0, 0, 0,
	557, 558, 555, 658, 0, 615, 616, 0, 0, 482,
	483, 342, 349, 501, 351, 313, 400, 344, 467, 358,
	0, 494, 559, 495, 618, 621, 619, 620, 392, 354,
	355, 426, 359, 369, 414, 466, 398, 419, 311, 457,
	428, 374, 545, 572, 893, 866, 892, 894, 895, 891,
	896, 897, 878, 769, 0, 821, 889, 888, 890, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	600, 599, 598, 597, 596, 595, 594, 593, 0, 0,
	542, 443, 323, 285, 319, 320, 327, 647, 644, 448,
	648, 776, 293, 522, 367, 0, 410, 341, 587, 588,
	0, 639, 855, 828, 829, 830, 766, 831, 825, 826,
	767, 827, 856, 819, 852, 853, 795, 822, 832, 851,
	833, 854, 857, 858, 898, 899, 839, 823, 257, 900,
	836, 859, 850, 849, 834, 820, 860, 861, 802, 797,
	837, 838, 824, 843, 844, 845, 768, 816, 817, 818,
	840, 841, 798, 799, 800, 801, 0, 0, 0, 473,
	474, 475, 497, 0, 459, 521, 645, 0, 0, 0,
	0, 0, 0, 0, 571, 583, 617, 0, 627, 628,
	630, 632, 846, 634, 433, 434, 0, 842, 637, 638,
	635, 371, 420, 439, 427, 812, 651, 512, 513, 652,
	623, 0, 761, 0, 397, 0, 527, 560, 549, 633,
	515, 0, 0, 0, 0, 0, 0, 764, 0, 0,
	0, 336, 0, 0, 366, 564, 546, 556, 547, 532,
	533, 534, 541, 346, 535, 536, 537, 507, 538, 508,
	539, 540, 803, 563, 514, 429, 381, 581, 580, 0,
	0, 872, 880, 0, 0, 0, 0, 0, 0, 0,
	0, 868, 0, 0, 0, 0, 756, 0, 0, 793,
	848, 847, 780, 790, 0, 0, 309, 229, 509, 629,
	511, 510, 781, 0, 782, 786, 789, 785, 783, 784,
	0, 863, 0, 0, 0, 0, 0, 0, 748, 760,
	0, 765, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 757, 758, 0, 0, 0,
	0, 813, 0, 759, 0, 0, 808, 787, 791, 0,
	0, 0, 0, 299, 436, 455, 310, 424, 468, 315,
	432, 447, 305, 396, 421, 0, 0, 301, 453, 431,
	378, 356, 357, 300, 0, 415, 334, 348, 331, 394,
	788, 811, 815, 330, 886, 809, 463, 303, 0, 462,
	393, 449, 454, 379, 373, 0, 302, 451, 377, 372,
	360, 338, 887, 361, 362, 352, 405, 370, 406, 353,
	383, 382, 384, 0, 0, 0, 0, 0, 491, 492,
	0, 0, 640, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 622, 806, 0, 626, 0, 465,
	0, 0, 870, 0, 0, 0, 435, 0, 0, 363,
	0, 0, 0, 810, 0, 418, 399, 883, 3959, 0,
	416, 368, 450, 407, 456, 437, 464, 412, 408, 294,
	438, 333, 380, 306, 308, 328, 335, 337, 339, 340,
	389, 390, 402, 423, 440, 441, 442, 332, 316, 417,
	317, 350, 318, 295, 324, 322, 325, 425, 326, 297,
	403, 446, 0, 345, 413, 376, 298, 375, 404, 445,
	444, 307, 472, 478, 479, 568, 0, 484, 655, 656,
	657, 493, 0, 409, 498, 499, 500, 502, 503, 504,
	505, 569, 586, 553, 523, 486, 577, 520, 524, 525,
	589, 0, 0, 0, 477, 364, 365, 0, 343, 291,
	292, 650, 867, 395, 591, 624, 625, 516, 0, 882,
	862, 864, 865, 869, 873, 874, 875, 876, 877, 879,
	881, 885, 649, 0, 570, 585, 653, 584, 646, 401,
	0, 422, 582, 529, 0, 574, 548, 0, 575, 544,
	579, 0, 518, 0, 430, 458, 470, 487, 490, 519,
	604, 605, 606, 296, 489, 608, 609, 610, 611, 612,
	613, 614, 607, 884, 551, 528, 554, 469, 531, 530,
	0, 0, 565, 814, 566, 567, 385, 386, 387, 388,
	871, 592, 314, 488, 411, 0, 552, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 558, 555, 658, 0,
	615, 616, 0, 0, 482, 483, 342, 349, 501, 351,
	313, 400, 344, 467, 358, 0, 494, 559, 495, 618,
	621, 619, 620, 392, 354, 355, 426, 359, 369, 414,
	466, 398, 419, 311, 457, 428, 374, 545, 572, 893,
	866, 892, 894, 895, 891, 896, 897, 878, 769, 0,
	821, 889, 888, 890, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 600, 599, 598, 597, 596,
	595, 594, 593, 0, 0, 542, 443, 323, 285, 319,
	320, 327, 647, 644, 448, 648, 776, 293, 522, 367,
	0, 410, 341, 587, 588, 0, 639, 855, 828, 829,
	830, 766, 831, 825, 826, 767, 827, 856, 819, 852,
	853, 795, 822, 832, 851, 833, 854, 857, 858, 898,
	899, 839, 823, 257, 900, 836, 859, 850, 849, 834,
	820, 860, 861, 802, 797, 837, 838, 824, 843, 844,
	845, 768, 816, 817, 818, 840, 841, 798, 799, 800,
	801, 0, 0, 0, 473, 474, 475, 497, 0, 459,
	521, 645, 0, 0, 0, 0, 0, 0, 0, 571,
	583, 617, 0, 627, 628, 630, 632, 846, 634, 433,
	434, 0, 842, 637, 638, 635, 371, 420, 439, 427,
	812, 651, 512, 513, 652, 623, 0, 761, 0, 397,
	0, 527, 560, 549, 633, 515, 0, 0, 0, 0,
	0, 0, 764, 0, 0, 0, 336, 1870, 0, 366,
	564, 546, 556, 547, 532, 533, 534, 541, 346, 535,
	536, 537, 507, 538, 508, 539, 540, 803, 563, 514,
	429, 381, 581, 580, 0, 0, 872, 880, 0, 0,
	0, 0, 0, 0, 0, 0, 868, 0, 0, 0,
	0, 756, 0, 0, 793, 848, 847, 780, 790, 0,
	0, 309, 229, 509, 629, 511, 510, 781, 0, 782,
	786, 789, 785, 783, 784, 0, 863, 0, 0, 0,
	0, 0, 0, 748, 760, 0, 765, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	757, 758, 0, 0, 0, 0, 813, 0, 759, 0,
	0, 808, 787, 791, 0, 0, 0, 0, 299, 436,
	455, 310, 424, 468, 315, 432, 447, 305, 396, 421,
	0, 0, 301, 453, 431, 378, 356, 357, 300, 0,
	415, 334, 348, 331, 394, 788, 811, 815, 330, 886,
	809, 463, 303, 0, 462, 393, 449, 454, 379, 373,
	0, 302, 451, 377, 372, 360, 338, 887, 361, 362,
	352, 405, 370, 406, 353, 383, 382, 384, 0, 0,
	0, 0, 0, 491, 492, 0, 0, 640, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 622,
	806, 0, 626, 0, 465, 0, 0, 870, 0, 0,
	0, 435, 0, 0, 363, 0, 0, 0, 810, 0,
	418, 399, 883, 0, 0, 416, 368, 450, 407, 456,
	437, 464, 412, 408, 294, 438, 333, 380, 306, 308,
	328, 335, 337, 339, 340, 389, 390, 402, 423, 440,
	441, 442, 332, 316, 417, 317, 350, 318, 295, 324,
	322, 325, 425, 326, 297, 403, 446, 0, 345, 413,
	376, 298, 375, 404, 445, 444, 307, 472, 478, 479,
	568, 0, 484, 655, 656, 657, 493, 0, 409, 498,
	499, 500, 502, 503, 504, 505, 569, 586, 553, 523,
	486, 577, 520, 524, 525, 589, 0, 0, 0, 477,
	364, 365, 0, 343, 291, 292, 650, 867, 395, 591,
	624, 625, 516, 0, 882, 862, 864, 865, 869, 873,
	874, 875, 876, 877, 879, 881, 885, 649, 0, 570,
	585, 653, 584, 646, 401, 0, 422, 582, 529, 0,
	574, 548, 0, 575, 544, 579, 0, 518, 0, 430,
	458, 470, 487, 490, 519, 604, 605, 606, 296, 489,
	608, 609, 610, 611, 612, 613, 614, 607, 884, 551,
	528, 554, 469, 531, 530, 0, 0, 565, 814, 566,
	567, 385, 386, 387, 388, 871, 592, 314, 488, 411,
	0, 552, 0, 0, 0, 0, 0, 0, 0, 0,
	557, 558, 555, 658, 0, 615, 616, 0, 0, 482,
	483, 342, 349, 501, 351, 313, 400, 344, 467, 358,
	0, 494, 559, 495, 618, 621, 619, 620, 392, 354,
	355, 426, 359, 369, 414, 466, 398, 419, 311, 457,
	428, 374, 545, 572, 893, 866, 892, 894, 895, 891,
	896, 897, 878, 769, 0, 821, 889, 888, 890, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	600, 599, 598, 597, 596, 595, 594, 593, 0, 0,
	542, 443, 323, 285, 319, 320, 327, 647, 644, 448,
	648, 776, 293, 522, 367, 0, 410, 341, 587, 588,
	0, 639, 855, 828, 829, 830, 766, 831, 825, 826,
	767, 827, 856, 819, 852, 853, 795, 822, 832, 851,
	833, 854, 857, 858, 898, 899, 839, 823, 257, 900,
	836, 859, 850, 849, 834, 820, 860, 861, 802, 797,
	837, 838, 824, 843, 844, 845, 768, 816, 817, 818,
	840, 841, 798, 799, 800, 801, 0, 0, 0, 473,
	474, 475, 497, 0, 459, 521, 645, 0, 0, 0,
	0, 0, 0, 0, 571, 583, 617, 0, 627, 628,
	630, 632, 846, 634, 433, 434, 0, 842, 637, 638,
	635, 371, 420, 439, 427, 812, 651, 512, 513, 652,
	623, 0, 761, 0, 397, 0, 527, 560, 549, 633,
	515, 0, 0, 0, 0, 0, 0, 764, 0, 0,
	0, 336, 0, 0, 366, 564, 546, 556, 547, 532,
	533, 534, 541, 346, 535, 536, 537, 507, 538, 508,
	539, 540, 803, 563, 514, 429, 381, 581, 580, 0,
	0, 872, 880, 0, 0, 0, 0, 0, 0, 0,
	0, 868, 0, 0, 0, 0, 756, 0, 0, 793,
	848, 847, 780, 790, 0, 0, 309, 229, 509, 629,
	511, 510, 781, 0, 782, 786, 789, 785, 783, 784,
	0, 863, 0, 0, 0, 0, 0, 0, 748, 760,
	0, 765, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 757, 758, 1585, 0, 0,
	0, 813, 0, 759, 0, 0, 808, 787, 791, 0,
	0, 0, 0, 299, 436, 455, 310, 424, 468, 315,
	432, 447, 305, 396, 421, 0, 0, 301, 453, 431,
	378, 356, 357, 300, 0, 415, 334, 348, 331, 394,
	788, 811, 815, 330, 886, 809, 463, 303, 0, 462,
	393, 449, 454, 379, 373, 0, 302, 451, 377, 372,
	360, 338, 887, 361, 362, 352, 405, 370, 406, 353,
	383, 382, 384, 0, 0, 0, 0, 0, 491, 492,
	0, 0, 640, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 622, 806, 0, 626, 0, 465,
	0, 0, 870, 0, 0, 0, 435, 0, 0, 363,
	0, 0, 0, 810, 0, 418, 399, 883, 0, 0,
	416, 368, 450, 407, 456, 437, 464, 412, 408, 294,
	438, 333, 380, 306, 308, 328, 335, 337, 339, 340,
	389, 390, 402, 423, 440, 441, 442, 332, 316, 417,
	317, 350, 318, 295, 324, 322, 325, 425, 326, 297,
	403, 446, 0, 345, 413, 376, 298, 375, 404, 445,
	444, 307, 472, 478, 479, 568, 0, 484, 655, 656,
	657, 493, 0, 409, 498, 499, 500, 502, 503, 504,
	505, 569, 586, 553, 523, 486, 577, 520, 524, 525,
	589, 0, 0, 0, 477, 364, 365, 0, 343, 291,
	292, 650, 867, 395, 591, 624, 625, 516, 0, 882,
	862, 864, 865, 869, 873, 874, 875, 876, 877, 879,
	881, 885, 649, 0, 570, 585, 653, 584, 646, 401,
	0, 422, 582, 529, 0, 574, 548, 0, 575, 544,
	579, 0, 518, 0, 430, 458, 470, 487, 490, 519,
	604, 605, 606, 296, 489, 608, 609, 610, 611, 612,
	613, 614, 607, 884, 551, 528, 554, 469, 531, 530,
	0, 0, 565, 814, 566, 567, 385, 386, 387, 388,
	871, 592, 314, 488, 411, 0, 552, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 558, 555, 658, 0,
	615, 616, 0, 0, 482, 483, 342, 349, 501, 351,
	313, 400, 344, 467, 358, 0, 494, 559, 495, 618,
	621, 619, 620, 392, 354, 355, 426, 359, 369, 414,
	466, 398, 419, 311, 457, 428, 374, 545, 572, 893,
	866, 892, 894, 895, 891, 896, 897, 878, 769, 0,
	821, 889, 888, 890, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 600, 599, 598, 597, 596,
	595, 594, 593, 0, 0, 542, 443, 323, 285, 319,
	320, 327, 647, 644, 448, 648, 776, 293, 522, 367,
	0, 410, 341, 587, 588, 0, 639, 855, 828, 829,
	830, 766, 831, 825, 826, 767, 827, 856, 819, 852,
	853, 795, 822, 832, 851, 833, 854, 857, 858, 898,
	899, 839, 823, 257, 900, 836, 859, 850, 849, 834,
	820, 860, 861, 802, 797, 837, 838, 824, 843, 844,
	845, 768, 816, 817, 818, 840, 841, 798, 799, 800,
	801, 0, 0, 0, 473, 474, 475, 497, 0, 459,
	521, 645, 0, 0, 0, 0, 0, 0, 0, 571,
	583, 617, 0, 627, 628, 630, 632, 846, 634, 433,
	434, 0, 842, 637, 638, 635, 371, 420, 439, 427,
	0, 651, 512, 513, 652, 623, 812, 761, 0, 2261,
	0, 0, 0, 0, 0, 397, 0, 527, 560, 549,
	633, 515, 0, 0, 0, 0, 0, 0, 764, 0,
	0, 0, 336, 0, 0, 366, 564, 546, 556, 547,
	532, 533, 534, 541, 346, 535, 536, 537, 507, 538,
	508, 539, 540, 803, 563, 514, 429, 381, 581, 580,
	0, 0, 872, 880, 0, 0, 0, 0, 0, 0,
	0, 0, 868, 0, 0, 0, 0, 756, 0, 0,
	793, 848, 847, 780, 790, 0, 0, 309, 229, 509,
	629, 511, 510, 781, 0, 782, 786, 789, 785, 783,
	784, 0, 863, 0, 0, 0, 0, 0, 0, 748,
	760, 0, 765, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 757, 758, 0, 0,
	0, 0, 813, 0, 759, 0, 0, 808, 787, 791,
	0, 0, 0, 0, 299, 436, 455, 310, 424, 468,
	315, 432, 447, 305, 396, 421, 0, 0, 301, 453,
	431, 378, 356, 357, 300, 0, 415, 334, 348, 331,
	394, 788, 811, 815, 330, 886, 809, 463, 303, 0,
	462, 393, 449, 454, 379, 373, 0, 302, 451, 377,
	372, 360, 338, 887, 361, 362, 352, 405, 370, 406,
	353, 383, 382, 384, 0, 0, 0, 0, 0, 491,
	492, 0, 0, 640, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 622, 806, 0, 626, 0,
	465, 0, 0, 870, 0, 0, 0, 435, 0, 0,
	363, 0, 0, 0, 810, 0, 418, 399, 883, 0,
	0, 416, 368, 450, 407, 456, 437, 464, 412, 408,
	294, 438, 333, 380, 306, 308, 328, 335, 337, 339,
	340, 389, 390, 402, 423, 440, 441, 442, 332, 316,
	417, 317, 350, 318, 295, 324, 322, 325, 425, 326,
	297, 403, 446, 0, 345, 413, 376, 298, 375, 404,
	445, 444, 307, 472, 478, 479, 568, 0, 484, 655,
	656, 657, 493, 0, 409, 498, 499, 500, 502, 503,
	504, 505, 569, 586, 553, 523, 486, 577, 520, 524,
	525, 589, 0, 0, 0, 477, 364, 365, 0, 343,
	291, 292, 650, 867, 395, 591, 624, 625, 516, 0,
	882, 862, 864, 865, 869, 873, 874, 875, 876, 877,
	879, 881, 885, 649, 0, 570, 585, 653, 584, 646,
	401, 0, 422, 582, 529, 0, 574, 548, 0, 575,
	544, 579, 0, 518, 0, 430, 458, 470, 487, 490,
	519, 604, 605, 606, 296, 489, 608, 609, 610, 611,
	612, 613, 614, 607, 884, 551, 528, 554, 469, 531,
	530, 0, 0, 565, 814, 566, 567, 385, 386, 387,
	388, 871, 592, 314, 488, 411, 0, 552, 0, 0,
	0, 0, 0, 0, 0, 0, 557, 558, 555, 658,
	0, 615, 616, 0, 0, 482, 483, 342, 349, 501,
	351, 313, 400, 344, 467, 358, 0, 494, 559, 495,
	618, 621, 619, 620, 392, 354, 355, 426, 359, 369,
	414, 466, 398, 419, 311, 457, 428, 374, 545, 572,
	893, 866, 892, 894, 895, 891, 896, 897, 878, 769,
	0, 821, 889, 888, 890, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 600, 599, 598, 597,
	596, 595, 594, 593, 0, 0, 542, 443, 323, 285,
	319, 320, 327, 647, 644, 448, 648, 776, 293, 522,
	367, 0, 410, 341, 587, 588, 0, 639, 855, 828,
	829, 830, 766, 831, 825, 826, 767, 827, 856, 819,
	852, 853, 795, 822, 832, 851, 833, 854, 857, 858,
	898, 899, 839, 823, 257, 900, 836, 859, 850, 849,
	834, 820, 860, 861, 802, 797, 837, 838, 824, 843,
	844, 845, 768, 816, 817, 818, 840, 841, 798, 799,
	800, 801, 0, 0, 0, 473, 474, 475, 497, 0,
	459, 521, 645, 0, 0, 0, 0, 0, 0, 0,
	571, 583, 617, 0, 627, 628, 630, 632, 846, 634,
	433, 434, 0, 842, 637, 638, 635, 371, 420, 439,
	427, 812, 651, 512, 513, 652, 623, 0, 761, 0,
	397, 0, 527, 560, 549, 633, 515, 0, 0, 0,
	0, 0, 0, 764, 0, 0, 0, 336, 0, 0,
	366, 564, 546, 556, 547, 532, 533, 534, 541, 346,
	535, 536, 537, 507, 538, 508, 539, 540, 803, 563,
	514, 429, 381, 581, 580, 0, 0, 872, 880, 0,
	0, 0, 0, 0, 0, 0, 0, 868, 0, 0,
	0, 0, 756, 0, 0, 793, 848, 847, 780, 790,
	0, 0, 309, 229, 509, 629, 511, 510, 781, 0,
	782, 786, 789, 785, 783, 784, 0, 863, 0, 0,
	0, 0, 0, 0, 748, 760, 0, 765, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 757, 758, 1863, 0, 0, 0, 813, 0, 759,
	0, 0, 808, 787, 791, 0, 0, 0, 0, 299,
	436, 455, 310, 424, 468, 315, 432, 447, 305, 396,
	421, 0, 0, 301, 453, 431, 378, 356, 357, 300,
	0, 415, 334, 348, 331, 394, 788, 811, 815, 330,
	886, 809, 463, 303, 0, 462, 393, 449, 454, 379,
	373, 0, 302, 451, 377, 372, 360, 338, 887, 361,
	362, 352, 405, 370, 406, 353, 383, 382, 384, 0,
	0, 0, 0, 0, 491, 492, 0, 0, 640, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	622, 806, 0, 626, 0, 465, 0, 0, 870, 0,
	0, 0, 435, 0, 0, 363, 0, 0, 0, 810,
	0, 418, 399, 883, 0, 0, 416, 368, 450, 407,
	456, 437, 464, 412, 408, 294, 438, 333, 380, 306,
	308, 328, 335, 337, 339, 340, 389, 390, 402, 423,
	440, 441, 442, 332, 316, 417, 317, 350, 318, 295,
	324, 322, 325, 425, 326, 297, 403, 446, 0, 345,
	413, 376, 298, 375, 404, 445, 444, 307, 472, 478,
	479, 568, 0, 484, 655, 656, 657, 493, 0, 409,
	498, 499, 500, 502, 503, 504, 505, 569, 586, 553,
	523, 486, 577, 520, 524, 525, 589, 0, 0, 0,
	477, 364, 365, 0, 343, 291, 292, 650, 867, 395,
	591, 624, 625, 516, 0, 882, 862, 864, 865, 869,
	873, 874, 875, 876, 877, 879, 881, 885, 649, 0,
	570, 585, 653, 584, 646, 401, 0, 422, 582, 529,
	0, 574, 548, 0, 575, 544, 579, 0, 518, 0,
	430, 458, 470, 487, 490, 519, 604, 605, 606, 296,
	489, 608, 609, 610, 611, 612, 613, 614, 607, 884,
	551, 528, 554, 469, 531, 530, 0, 0, 565, 814,
	566, 567, 385, 386, 387, 388, 871, 592, 314, 488,
	411, 0, 552, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 558, 555, 658, 0, 615, 616, 0, 0,
	482, 483, 342, 349, 501, 351, 313, 400, 344, 467,
	358, 0, 494, 559, 495, 618, 621, 619, 620, 392,
	354, 355, 426, 359, 369, 414, 466, 398, 419, 311,
	457, 428, 374, 545, 572, 893, 866, 892, 894, 895,
	891, 896, 897, 878, 769, 0, 821, 889, 888, 890,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 600, 599, 598, 597, 596, 595, 594, 593, 0,
	0, 542, 443, 323, 285, 319, 320, 327, 647, 644,
	448, 648, 776, 293, 522, 367, 0, 410, 341, 587,
	588, 0, 639, 855, 828, 829, 830, 766, 831, 825,
	826, 767, 827, 856, 819, 852, 853, 795, 822, 832,
	851, 833, 854, 857, 858, 898, 899, 839, 823, 257,
	900, 836, 859, 850, 849, 834, 820, 860, 861, 802,
	797, 837, 838, 824, 843, 844, 845, 768, 816, 817,
	818, 840, 841, 798, 799, 800, 801, 0, 0, 0,
	473, 474, 475, 497, 0, 459, 521, 645, 0, 0,
	0, 0, 0, 0, 0, 571, 583, 617, 0, 627,
	628, 630, 632, 846, 634, 433, 434, 0, 842, 637,
	638, 635, 371, 420, 439, 427, 812, 651, 512, 513,
	652, 623, 0, 761, 0, 397, 0, 527, 560, 549,
	633, 515, 0, 0, 0, 0, 0, 0, 764, 0,
	0, 0, 336, 0, 0, 366, 564, 546, 556, 547,
	532, 533, 534, 541, 346, 535, 536, 537, 507, 538,
	508, 539, 540, 803, 563, 514, 429, 381, 581, 580,
	0, 0, 872, 880, 0, 0, 0, 0, 0, 0,
	0, 0, 868, 0, 0, 0, 0, 756, 0, 0,
	793, 848, 847, 780, 790, 0, 0, 309, 229, 509,
	629, 511, 510, 781, 0, 782, 786, 789, 785, 783,
	784, 0, 863, 0, 0, 0, 0, 0, 0, 748,
	760, 0, 765, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 757, 758, 0, 0,
	0, 0, 813, 0, 759, 0, 0, 808, 787, 791,
	0, 0, 0, 0, 299, 436, 455, 310, 424, 468,
	315, 432, 447, 305, 396, 421, 0, 0, 301, 453,
	431, 378, 356, 357, 300, 0, 415, 334, 348, 331,
	394, 788, 811, 815, 330, 886, 809, 463, 303, 0,
	462, 393, 449, 454, 379, 373, 0, 302, 451, 377,
	372, 360, 338, 887, 361, 362, 352, 405, 370, 406,
	353, 383, 382, 384, 0, 0, 0, 0, 0, 491,
	492, 0, 0, 640, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 622, 806, 0, 626, 0,
	465, 0, 0, 870, 0, 0, 0, 435, 0, 0,
	363, 0, 0, 0, 810, 0, 418, 399, 883, 0,
	0, 416, 368, 450, 407, 456, 437, 464, 412, 408,
	294, 438, 333, 380, 306, 308, 328, 335, 337, 339,
	340, 389, 390, 402, 423, 440, 441, 442, 332, 316,
	417, 317, 350, 318, 295, 324, 322, 325, 425, 326,
	297, 403, 446, 0, 345, 413, 376, 298, 375, 404,
	445, 444, 307, 472, 478, 479, 568, 0, 484, 655,
	656, 657, 493, 0, 409, 498, 499, 500, 502, 503,
	504, 505, 569, 586, 553, 523, 486, 577, 520, 524,
	525, 589, 0, 0, 0, 477, 364, 365, 0, 343,
	291, 292, 650, 867, 395, 591, 624, 625, 516, 0,
	882, 862, 864, 865, 869, 873, 874, 875, 876, 877,
	879, 881, 885, 649, 0, 570, 585, 653, 584, 646,
	401, 0, 422, 582, 529, 0, 574, 548, 0, 575,
	544, 579, 0, 518, 0, 430, 458, 470, 487, 490,
	519, 604, 605, 606, 296, 489, 608, 609, 610, 611,
	612, 613, 614, 607, 884, 551, 528, 554, 469, 531,
	530, 0, 0, 565, 814, 566, 567, 385, 386, 387,
	388, 871, 592, 314, 488, 411, 0, 552, 0, 0,
	0, 0, 0, 0, 0, 0, 557, 558, 555, 658,
	0, 615, 616, 0, 0, 482, 483, 342, 349, 501,
	351, 313, 400, 344, 467, 358, 0, 494, 559, 495,
	618, 621, 619, 620, 392, 354, 355, 426, 359, 369,
	414, 466, 398, 419, 311, 457, 428, 374, 545, 572,
	893, 866, 892, 894, 895, 891, 896, 897, 878, 769,
	0, 821, 889, 888, 890, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 600, 599, 598, 597,
	596, 595, 594, 593, 0, 0, 542, 443, 323, 285,
	319, 320, 327, 647, 644, 448, 648, 776, 293, 522,
	367, 0, 410, 341, 587, 588, 0, 639, 855, 828,
	829, 830, 766, 831, 825, 826, 767, 827, 856, 819,
	852, 853, 795, 822, 832, 851, 833, 854, 857, 858,
	898, 899, 839, 823, 257, 900, 836, 859, 850, 849,
	834, 820, 860, 861, 802, 797, 837, 838, 824, 843,
	844, 845, 768, 816, 817, 818, 840, 841, 798, 799,
	800, 801, 0, 0, 0, 473, 474, 475, 497, 0,
	459, 521, 645, 0, 0, 0, 0, 0, 0, 0,
	571, 583, 617, 0, 627, 628, 630, 632, 846, 634,
	433, 434, 0, 842, 637, 638, 635, 371, 420, 439,
	427, 812, 651, 512, 513, 652, 623, 0, 761, 0,
	397, 0, 527, 560, 549, 633, 515, 0, 0, 0,
	0, 0, 0, 764, 0, 0, 0, 336, 0, 0,
	366, 564, 546, 556, 547, 532, 533, 534, 541, 346,
	535, 536, 537, 507, 538, 508, 539, 540, 803, 563,
	514, 429, 381, 581, 580, 0, 0, 872, 880, 0,
	0, 0, 0, 0, 0, 0, 0, 868, 0, 0,
	0, 0, 756, 0, 0, 793, 848, 847, 780, 790,
	0, 0, 309, 229, 509, 629, 511, 510, 781, 0,
	782, 786, 789, 785, 783, 784, 0, 863, 0, 0,
	0, 0, 0, 0, 748, 760, 0, 765, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 757, 758, 0, 0, 0, 0, 813, 0, 759,
	0, 0, 808, 787, 791, 0, 0, 0, 0, 299,
	436, 455, 310, 424, 468, 315, 432, 447, 305, 396,
	421, 0, 0, 301, 453, 431, 378, 356, 357, 300,
	0, 415, 334, 348, 331, 394, 788, 811, 815, 330,
	886, 809, 463, 303, 0, 462, 393, 449, 454, 379,
	373, 0, 302, 451, 377, 372, 360, 338, 887, 361,
	362, 352, 405, 370, 406, 353, 383, 382, 384, 0,
	0, 0, 0, 0, 491, 492, 0, 0, 640, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	622, 806, 0, 626, 0, 465, 0, 0, 870, 0,
	0, 0, 435, 0, 0, 363, 0, 0, 0, 810,
	0, 418, 399, 883, 0, 0, 416, 368, 450, 407,
	456, 437, 464, 412, 408, 294, 438, 333, 380, 306,
	308, 328, 335, 337, 339, 340, 389, 390, 402, 423,
	440, 441, 442, 332, 316, 417, 317, 350, 318, 295,
	324, 322, 325, 425, 326, 297, 403, 446, 0, 345,
	413, 376, 298, 375, 404, 445, 444, 307, 472, 478,
	479, 568, 0, 484, 655, 656, 657, 493, 0, 409,
	498, 499, 500, 502, 503, 504, 505, 569, 586, 553,
	523, 486, 577, 520, 524, 525, 589, 0, 0, 0,
	477, 364, 365, 0, 343, 291, 292, 650, 867, 395,
	591, 624, 625, 516, 0, 882, 862, 864, 865, 869,
	873, 874, 875, 876, 877, 879, 881, 885, 649, 0,
	570, 585, 653, 584, 646, 401, 0, 422, 582, 529,
	0, 574, 548, 0, 575, 544, 579, 0, 518, 0,
	430, 458, 470, 487, 490, 519, 604, 605, 606, 296,
	489, 608, 609, 610, 611, 612, 613, 614, 607, 884,
	551, 528, 554, 469, 531, 530, 0, 0, 565, 814,
	566, 567, 385, 386, 387, 388, 871, 592, 314, 488,
	411, 0, 552, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 558, 555, 658, 0, 615, 616, 0, 0,
	482, 483, 342, 349, 501, 351, 313, 400, 344, 467,
	358, 0, 494, 559, 495, 618, 621, 619, 620, 392,
	354, 355, 426, 359, 369, 414, 466, 398, 419, 311,
	457, 428, 374, 545, 572, 893, 866, 892, 894, 895,
	891, 896, 897, 878, 769, 0, 821, 889, 888, 890,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 600, 599, 598, 597, 596, 595, 594, 593, 0,
	0, 542, 443, 323, 285, 319, 320, 327, 647, 644,
	448, 648, 776, 293, 522, 367, 0, 410, 341, 587,
	588, 0, 639, 855, 828, 829, 830, 766, 831, 825,
	826, 767, 827, 856, 819, 852, 853, 795, 822, 832,
	851, 833, 854, 857, 858, 898, 899, 839, 823, 257,
	900, 836, 859, 850, 849, 834, 820, 860, 861, 802,
	797, 837, 838, 824, 843, 844, 845, 768, 816, 817,
	818, 840, 841, 798, 799, 800, 801, 0, 0, 0,
	473, 474, 475, 497, 0, 459, 521, 645, 0, 0,
	0, 0, 0, 0, 0, 571, 583, 617, 0, 627,
	628, 630, 632, 846, 634, 433, 434, 0, 3537, 637,
	3538, 3539, 371, 420, 439, 427, 812, 651, 512, 513,
	652, 623, 0, 761, 0, 397, 0, 527, 560, 549,
	633, 515, 0, 0, 0, 0, 0, 0, 764, 0,
	0, 0, 336, 0, 0, 366, 564, 546, 556, 547,
	532, 533, 534, 541, 346, 535, 536, 537, 507, 538,
	508, 539, 540, 803, 563, 514, 429, 381, 581, 580,
	0, 0, 872, 880, 0, 0, 0, 0, 0, 0,
	0, 0, 868, 0, 0, 0, 0, 756, 0, 0,
	793, 848, 847, 780, 790, 0, 0, 309, 229, 509,
	629, 511, 510, 2739, 0, 2740, 786, 789, 785, 783,
	784, 0, 863, 0, 0, 0, 0, 0, 0, 748,
	760, 0, 765, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 757, 758, 0, 0,
	0, 0, 813, 0, 759, 0, 0, 808, 787, 791,
	0, 0, 0, 0, 299, 436, 455, 310, 424, 468,
	315, 432, 447, 305, 396, 421, 0, 0, 301, 453,
	431, 378, 356, 357, 300, 0, 415, 334, 348, 331,
	394, 788, 811, 815, 330, 886, 809, 463, 303, 0,
	462, 393, 449, 454, 379, 373, 0, 302, 451, 377,
	372, 360, 338, 887, 361, 362, 352, 405, 370, 406,
	353, 383, 382, 384, 0, 0, 0, 0, 0, 491,
	492, 0, 0, 640, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 622, 806, 0, 626, 0,
	465, 0, 0, 870, 0, 0, 0, 435, 0, 0,
	363, 0, 0, 0, 810, 0, 418, 399, 883, 0,
	0, 416, 368, 450, 407, 456, 437, 464, 412, 408,
	294, 438, 333, 380, 306, 308, 328, 335, 337, 339,
	340, 389, 390, 402, 423, 440, 441, 442, 332, 316,
	417, 317, 350, 318, 295, 324, 322, 325, 425, 326,
	297, 403, 446, 0, 345, 413, 376, 298, 375, 404,
	445, 444, 307, 472, 478, 479, 568, 0, 484, 655,
	656, 657, 493, 0, 409, 498, 499, 500, 502, 503,
	504, 505, 569, 586, 553, 523, 486, 577, 520, 524,
	525, 589, 0, 0, 0, 477, 364, 365, 0, 343,
	291, 292, 650, 867, 395, 591, 624, 625, 516, 0,
	882, 862, 864, 865, 869, 873, 874, 875, 876, 877,
	879, 881, 885, 649, 0, 570, 585, 653, 584, 646,
	401, 0, 422, 582, 529, 0, 574, 548, 0, 575,
	544, 579, 0, 518, 0, 430, 458, 470, 487, 490,
	519, 604, 605, 606, 296, 489, 608, 609, 610, 611,
	612, 613, 614, 607, 884, 551, 528, 554, 469, 531,
	530, 0, 0, 565, 814, 566, 567, 385, 386, 387,
	388, 871, 592, 314, 488, 411, 0, 552, 0, 0,
	0, 0, 0, 0, 0, 0, 557, 558, 555, 658,
	0, 615, 616, 0, 0, 482, 483, 342, 349, 501,
	351, 313, 400, 344, 467, 358, 0, 494, 559, 495,
	618, 621, 619, 620, 392, 354, 355, 426, 359, 369,
	414, 466, 398, 419, 311, 457, 428, 374, 545, 572,
	893, 866, 892, 894, 895, 891, 896, 897, 878, 769,
	0, 821, 889, 888, 890, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 600, 599, 598, 597,
	596, 595, 594, 593, 0, 0, 542, 443, 323, 285,
	319, 320, 327, 647, 644, 448, 648, 776, 293, 522,
	367, 0, 410, 341, 587, 588, 0, 639, 855, 828,
	829, 830, 766, 831, 825, 826, 767, 827, 856, 819,
	852, 853, 795, 822, 832, 851, 833, 854, 857, 858,
	898, 899, 839, 823, 257, 900, 836, 859, 850, 849,
	834, 820, 860, 861, 802, 797, 837, 838, 824, 843,
	844, 845, 768, 816, 817, 818, 840, 841, 798, 799,
	800, 801, 0, 0, 0, 473, 474, 475, 497, 0,
	459, 521, 645, 0, 0, 0, 0, 0, 0, 0,
	571, 583, 617, 0, 627, 628, 630, 632, 846, 634,
	433, 434, 0, 842, 637, 638, 635, 371, 420, 439,
	427, 812, 651, 512, 513, 652, 623, 0, 761, 0,
	397, 0, 527, 560, 549, 633, 515, 0, 0, 1728,
	0, 0, 0, 764, 0, 0, 0, 336, 0, 0,
	366, 564, 546, 556, 547, 532, 533, 534, 541, 346,
	535, 536, 537, 507, 538, 508, 539, 540, 803, 563,
	514, 429, 381, 581, 580, 0, 0, 872, 880, 0,
	0, 0, 0, 0, 0, 0, 0, 868, 0, 0,
	0, 0, 756, 0, 0, 793, 848, 847, 780, 790,
	0, 0, 309, 229, 509, 629, 511, 510, 781, 0,
	782, 786, 789, 785, 783, 784, 0, 863, 0, 0,
	0, 0, 0, 0, 0, 760, 0, 765, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 757, 758, 0, 0, 0, 0, 813, 0, 759,
	0, 0, 808, 787, 791, 0, 0, 0, 0, 299,
	436, 455, 310, 424, 468, 315, 432, 447, 305, 396,
	421, 0, 0, 301, 453, 431, 378, 356, 357, 300,
	0, 415, 334, 348, 331, 394, 788, 811, 815, 330,
	886, 809, 463, 303, 0, 462, 393, 449, 454, 379,
	373, 0, 302, 451, 377, 372, 360, 338, 887, 361,
	362, 352, 405, 370, 406, 353, 383, 382, 384, 0,
	0, 0, 0, 0, 491, 492, 0, 0, 640, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	622, 806, 0, 626, 0, 465, 0, 0, 870, 0,
	0, 0, 435, 0, 0, 363, 0, 0, 0, 810,
	0, 418, 399, 883, 0, 0, 416, 368, 450, 407,
	456, 437, 464, 412, 408, 294, 438, 333, 380, 306,
	308, 328, 335, 337, 339, 340, 389, 390, 402, 423,
	440, 441, 442, 332, 316, 417, 317, 350, 318, 295,
	324, 322, 325, 425, 326, 297, 403, 446, 0, 345,
	413, 376, 298, 375, 404, 445, 444, 307, 472, 1729,
	1730, 568, 0, 484, 655, 656, 657, 493, 0, 409,
	498, 499, 500, 502, 503, 504, 505, 569, 586, 553,
	523, 486, 577, 520, 524, 525, 589, 0, 0, 0,
	477, 364, 365, 0, 343, 291, 292, 650, 867, 395,
	591, 624, 625, 516, 0, 882, 862, 864, 865, 869,
	873, 874, 875, 876, 877, 879, 881, 885, 649, 0,
	570, 585, 653, 584, 646, 401, 0, 422, 582, 529,
	0, 574, 548, 0, 575, 544, 579, 0, 518, 0,
	430, 458, 470, 487, 490, 519, 604, 605, 606, 296,
	489, 608, 609, 610, 611, 612, 613, 614, 607, 884,
	551, 528, 554, 469, 531, 530, 0, 0, 565, 814,
	566, 567, 385, 386, 387, 388, 871, 592, 314, 488,
	411, 0, 552, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 558, 555, 658, 0, 615, 616, 0, 0,
	482, 483, 342, 349, 501, 351, 313, 400, 344, 467,
	358, 0, 494, 559, 495, 618, 621, 619, 620, 392,
	354, 355, 426, 359, 369, 414, 466, 398, 419, 311,
	457, 428, 374, 545, 572, 893, 866, 892, 894, 895,
	891, 896, 897, 878, 769, 0, 821, 889, 888, 890,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 600, 599, 598, 597, 596, 595, 594, 593, 0,
	0, 542, 443, 323, 285, 319, 320, 327, 647, 644,
	448, 648, 776, 293, 522, 367, 0, 410, 341, 587,
	588, 0, 639, 855, 828, 829, 830, 766, 831, 825,
	826, 767, 827, 856, 819, 852, 853, 795, 822, 832,
	851, 833, 854, 857, 858, 898, 899, 839, 823, 257,
	900, 836, 859, 850, 849, 834, 820, 860, 861, 802,
	797, 837, 838, 824, 843, 844, 845, 768, 816, 817,
	818, 840, 841, 798, 799, 800, 801, 0, 0, 0,
	473, 474, 475, 497, 0, 459, 521, 645, 0, 0,
	0, 0, 0, 0, 0, 571, 583, 617, 0, 627,
	628, 630, 632, 846, 634, 433, 434, 0, 842, 637,
	638, 635, 371, 420, 439, 427, 812, 651, 512, 513,
	652, 623, 0, 761, 0, 397, 0, 527, 560, 549,
	633, 515, 0, 0, 0, 0, 0, 0, 764, 0,
	0, 0, 336, 0, 0, 366, 564, 546, 556, 547,
	532, 533, 534, 541, 346, 535, 536, 537, 507, 538,
	508, 539, 540, 803, 563, 514, 429, 381, 581, 580,
	0, 0, 872, 880, 0, 0, 0, 0, 0, 0,
	0, 0, 868, 0, 0, 0, 0, 756, 0, 0,
	793, 848, 847, 780, 790, 0, 0, 309, 229, 509,
	629, 511, 510, 781, 0, 782, 786, 789, 785, 783,
	784, 0, 863, 0, 0, 0, 0, 0, 0, 0,
	760, 0, 765, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 757, 758, 0, 0,
	0, 0, 813, 0, 759, 0, 0, 808, 787, 791,
	0, 0, 0, 0, 299, 436, 455, 310, 424, 468,
	315, 432, 447, 305, 396, 421, 0, 0, 301, 453,
	431, 378, 356, 357, 300, 0, 415, 334, 348, 331,
	394, 788, 811, 815, 330, 886, 809, 463, 303, 0,
	462, 393, 449, 454, 379, 373, 0, 302, 451, 377,
	372, 360, 338, 887, 361, 362, 352, 405, 370, 406,
	353, 383, 382, 384, 0, 0, 0, 0, 0, 491,
	492, 0, 0, 640, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 622, 806, 0, 626, 0,
	465, 0, 0, 870, 0, 0, 0, 435, 0, 0,
	363, 0, 0, 0, 810, 0, 418, 399, 883, 0,
	0, 416, 368, 450, 407, 456, 437, 464, 412, 408,
	294, 438, 333, 380, 306, 308, 328, 335, 337, 339,
	340, 389, 390, 402, 423, 440, 441, 442, 332, 316,
	417, 317, 350, 318, 295, 324, 322, 325, 425, 326,
	297, 403, 446, 0, 345, 413, 376, 298, 375, 404,
	445, 444, 307, 472, 478, 479, 568, 0, 484, 655,
	656, 657, 493, 0, 409, 498, 499, 500, 502, 503,
	504, 505, 569, 586, 553, 523, 486, 577, 520, 524,
	525, 589, 0, 0, 0, 477, 364, 365, 0, 343,
	291, 292, 650, 867, 395, 591, 624, 625, 516, 0,
	882, 862, 864, 865, 869, 873, 874, 875, 876, 877,
	879, 881, 885, 649, 0, 570, 585, 653, 584, 646,
	401, 0, 422, 582, 529, 0, 574, 548, 0, 575,
	544, 579, 0, 518, 0, 430, 458, 470, 487, 490,
	519, 604, 605, 606, 296, 489, 608, 609, 610, 611,
	612, 613, 614, 607, 884, 551, 528, 554, 469, 531,
	530, 0, 0, 565, 814, 566, 567, 385, 386, 387,
	388, 871, 592, 314, 488, 411, 0, 552, 0, 0,
	0, 0, 0, 0, 0, 0, 557, 558, 555, 658,
	0, 615, 616, 0, 0, 482, 483, 342, 349, 501,
	351, 313, 400, 344, 467, 358, 0, 494, 559, 495,
	618, 621, 619, 620, 392, 354, 355, 426, 359, 369,
	414, 466, 398, 419, 311, 457, 428, 374, 545, 572,
	893, 866, 892, 894, 895, 891, 896, 897, 878, 769,
	0, 821, 889, 888, 890, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 600, 599, 598, 597,
	596, 595, 594, 593, 0, 0, 542, 443, 323, 285,
	319, 320, 327, 647, 644, 448, 648, 776, 293, 522,
	367, 0, 410, 341, 587, 588, 0, 639, 855, 828,
	829, 830, 766, 831, 825, 826, 767, 827, 856, 819,
	852, 853, 795, 822, 832, 851, 833, 854, 857, 858,
	898, 899, 839, 823, 257, 900, 836, 859, 850, 849,
	834, 820, 860, 861, 802, 797, 837, 838, 824, 843,
	844, 845, 768, 816, 817, 818, 840, 841, 798, 799,
	800, 801, 0, 0, 0, 473, 474, 475, 497, 0,
	459, 521, 645, 0, 0, 0, 0, 0, 0, 0,
	571, 583, 617, 0, 627, 628, 630, 632, 846, 634,
	433, 434, 0, 842, 637, 638, 635, 371, 420, 439,
	427, 812, 651, 512, 513, 652, 623, 0, 761, 0,
	397, 0, 527, 560, 549, 633, 515, 0, 0, 0,
	0, 0, 0, 764, 0, 0, 0, 336, 0, 0,
	366, 564, 546, 556, 547, 532, 533, 534, 541, 346,
	535, 536, 537, 507, 538, 508, 539, 540, 803, 563,
	514, 429, 381, 581, 580, 0, 0, 872, 880, 0,
	0, 0, 0, 0, 0, 0, 0, 868, 0, 0,
	0, 0, 0, 0, 0, 793, 848, 847, 780, 790,
	0, 0, 309, 229, 509, 629, 511, 510, 781, 0,
	782, 786, 789, 785, 783, 784, 0, 863, 0, 0,
	0, 0, 0, 0, 748, 760, 0, 765, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 757, 758, 0, 0, 0, 0, 813, 0, 759,
	0, 0, 808, 787, 791, 0, 0, 0, 0, 299,
	436, 455, 310, 424, 468, 315, 432, 447, 305, 396,
	421, 0, 0, 301, 453, 431, 378, 356, 357, 300,
	0, 415, 334, 348, 331, 394, 788, 811, 815, 330,
	886, 809, 463, 303, 0, 462, 393, 449, 454, 379,
	373, 0, 302, 451, 377, 372, 360, 338, 887, 361,
	362, 352, 405, 370, 406, 353, 383, 382, 384, 0,
	0, 0, 0, 0, 491, 492, 0, 0, 640, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	622, 806, 0, 626, 0, 465, 0, 0, 870, 0,
	0, 0, 435, 0, 0, 363, 0, 0, 0, 810,
	0, 418, 399, 883, 0, 0, 416, 368, 450, 407,
	456, 437, 464, 412, 408, 294, 438, 333, 380, 306,
	308, 328, 335, 337, 339, 340, 389, 390, 402, 423,
	440, 441, 442, 332, 316, 417, 317, 350, 318, 295,
	324, 322, 325, 425, 326, 297, 403, 446, 0, 345,
	413, 376, 298, 375, 404, 445, 444, 307, 472, 478,
	479, 568, 0, 484, 655, 656, 657, 493, 0, 409,
	498, 499, 500, 502, 503, 504, 505, 569, 586, 553,
	523, 486, 577, 520, 524, 525, 589, 0, 0, 0,
	477, 364, 365, 0, 343, 291, 292, 650, 867, 395,
	591, 624, 625, 516, 0, 882, 862, 864, 865, 869,
	873, 874, 875, 876, 877, 879, 881, 885, 649, 0,
	570, 585, 653, 584, 646, 401, 0, 422, 582, 529,
	0, 574, 548, 0, 575, 544, 579, 0, 518, 0,
	430, 458, 470, 487, 490, 519, 604, 605, 606, 296,
	489, 608, 609, 610, 611, 612, 613, 614, 607, 884,
	551, 528, 554, 469, 531, 530, 0, 0, 565, 814,
	566, 567, 385, 386, 387, 388, 871, 592, 314, 488,
	411, 0, 552, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 558, 555, 658, 0, 615, 616, 0, 0,
	482, 483, 342, 349, 501, 351, 313, 400, 344, 467,
	358, 0, 494, 559, 495, 618, 621, 619, 620, 392,
	354, 355, 426, 359, 369, 414, 466, 398, 419, 311,
	457, 428, 374, 545, 572, 893, 866, 892, 894, 895,
	891, 896, 897, 878, 769, 0, 821, 889, 888, 890,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 600, 599, 598, 597, 596, 595, 594, 593, 0,
	0, 542, 443, 323, 285, 319, 320, 327, 647, 644,
	448, 648, 776, 293, 522, 367, 0, 410, 341, 587,
	588, 0, 639, 855, 828, 829, 830, 766, 831, 825,
	826, 767, 827, 856, 819, 852, 853, 795, 822, 832,
	851, 833, 854, 857, 858, 898, 899, 839, 823, 257,
	900, 836, 859, 850, 849, 834, 820, 860, 861, 802,
	797, 837, 838, 824, 843, 844, 845, 768, 816, 817,
	818, 840, 841, 798, 799, 800, 801, 0, 0, 0,
	473, 474, 475, 497, 0, 459, 521, 645, 0, 0,
	0, 0, 0, 0, 0, 571, 583, 617, 0, 627,
	628, 630, 632, 846, 634, 433, 434, 0, 842, 637,
	638, 635, 371, 420, 439, 427, 0, 651, 512, 513,
	652, 623, 0, 761, 206, 64, 197, 168, 0, 0,
	0, 0, 0, 0, 397, 0, 527, 560, 549, 633,
	515, 0, 198, 0, 0, 0, 0, 0, 0, 189,
	0, 336, 0, 199, 366, 564, 546, 556, 547, 532,
	533, 534, 541, 346, 535, 536, 537, 507, 538, 508,
	539, 540, 140, 563, 514, 429, 381, 581, 580, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 0, 0,
	0, 0, 0, 0, 0, 0, 202, 0, 0, 228,
	0, 0, 0, 0, 0, 0, 309, 229, 509, 629,
	511, 510, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 436, 455, 310, 424, 468, 315,
	432, 447, 305, 396, 421, 0, 0, 301, 453, 431,
	378, 356, 357, 300, 0, 415, 334, 348, 331, 394,
	0, 452, 480, 330, 471, 0, 463, 303, 0, 462,
	393, 449, 454, 379, 373, 0, 302, 451, 377, 372,
	360, 338, 496, 361, 362, 352, 405, 370, 406, 353,
	383, 382, 384, 0, 0, 0, 0, 0, 491, 492,
	0, 0, 640, 0, 0, 0, 0, 167, 195, 204,
	196, 124, 0, 0, 622, 0, 0, 626, 0, 465,
	0, 0, 221, 0, 0, 0, 435, 0, 0, 363,
	194, 188, 187, 481, 0, 418, 399, 233, 0, 0,
	416, 368, 450, 407, 456, 437, 464, 412, 408, 294,
	438, 333, 380, 306, 308, 328, 335, 337, 339, 340,
	389, 390, 402, 423, 440, 441, 442, 332, 316, 417,
	317, 350, 318, 295, 324, 322, 325, 425, 326, 297,
	403, 446, 0, 345, 413, 376, 298, 375, 404, 445,
	444, 307, 472, 478, 479, 568, 0, 484, 601, 602,
	603, 493, 0, 409, 498, 499, 500, 502, 503, 504,
	505, 569, 586, 553, 523, 486, 577, 520, 524, 525,
	589, 0, 0, 0, 477, 364, 365, 0, 343, 291,
	292, 460, 329, 395, 591, 624, 625, 516, 0, 578,
	517, 526, 321, 550, 562, 561, 391, 476, 224, 573,
	576, 506, 234, 0, 570, 585, 543, 584, 235, 401,
	0, 422, 582, 529, 0, 574, 548, 0, 575, 544,
	579, 0, 518, 0, 430, 458, 470, 487, 490, 519,
	604, 605, 606, 296, 489, 608, 609, 610, 611, 612,
	613, 614, 607, 461, 551, 528, 554, 469, 531, 530,
	0, 0, 565, 485, 566, 567, 385, 386, 387, 388,
	347, 592, 314, 488, 411, 138, 552, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 558, 555, 232, 0,
	615, 616, 0, 0, 482, 483, 342, 349, 501, 351,
	313, 400, 344, 467, 358, 0, 494, 559, 495, 618,
	621, 619, 620, 392, 354, 355, 426, 359, 369, 414,
	466, 398, 419, 311, 457, 428, 374, 545, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 65, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 600, 599, 598, 597, 596,
	595, 594, 593, 0, 0, 542, 443, 323, 285, 319,
	320, 327, 239, 304, 448, 240, 0, 293, 522, 367,
	169, 410, 341, 587, 588, 61, 639, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 590, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 473, 474, 475, 497, 0, 459,
	521, 236, 45, 222, 225, 227, 226, 0, 62, 571,
	583, 617, 5, 627, 628, 630, 632, 631, 634, 433,
	434, 0, 636, 637, 638, 635, 371, 420, 439, 427,
	143, 237, 512, 513, 238, 623, 206, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 397, 0, 527, 560,
	549, 633, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 366, 564, 546, 556,
	547, 532, 533, 534, 541, 346, 535, 536, 537, 507,
	538, 508, 539, 540, 140, 563, 514, 429, 381, 581,
	580, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 202, 0,
	0, 228, 0, 0, 0, 0, 0, 0, 309, 229,
	509, 629, 511, 510, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 2415, 2418, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 436, 455, 310, 424,
	468, 315, 432, 447, 305, 396, 421, 0, 0, 301,
	453, 431, 378, 356, 357, 300, 0, 415, 334, 348,
	331, 394, 0, 452, 480, 330, 471, 0, 463, 303,
	0, 462, 393, 449, 454, 379, 373, 0, 302, 451,
	377, 372, 360, 338, 496, 361, 362, 352, 405, 370,
	406, 353, 383, 382, 384, 0, 0, 0, 0, 0,
	491, 492, 0, 0, 640, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 622, 0, 0, 626,
	2419, 465, 0, 0, 0, 2414, 0, 2413, 435, 2411,
	2416, 363, 0, 0, 0, 481, 0, 418, 399, 654,
	0, 0, 416, 368, 450, 407, 456, 437, 464, 412,
	408, 294, 438, 333, 380, 306, 308, 328, 335, 337,
	339, 340, 389, 390, 402, 423, 440, 441, 442, 332,
	316, 417, 317, 350, 318, 295, 324, 322, 325, 425,
	326, 297, 403, 446, 2417, 345, 413, 376, 298, 375,
	404, 445, 444, 307, 472, 478, 479, 568, 0, 484,
	655, 656, 657, 493, 0, 409, 498, 499, 500, 502,
	503, 504, 505, 569, 586, 553, 523, 486, 577, 520,
	524, 525, 589, 0, 0, 0, 477, 364, 365, 0,
	343, 291, 292, 650, 329, 395, 591, 624, 625, 516,
	0, 578, 517, 526, 321, 550, 562, 561, 391, 476,
	0, 573, 576, 506, 649, 0, 570, 585, 653, 584,
	646, 401, 0, 422, 582, 529, 0, 574, 548, 0,
	575, 544, 579, 0, 518, 0, 430, 458, 470, 487,
	490, 519, 604, 605, 606, 296, 489, 608, 609, 610,
	611, 612, 613, 614, 607, 461, 551, 528, 554, 469,
	531, 530, 0, 0, 565, 485, 566, 567, 385, 386,
	387, 388, 347, 592, 314, 488, 411, 0, 552, 0,
	0, 0, 0, 0, 0, 0, 0, 557, 558, 555,
	658, 0, 615, 616, 0, 0, 482, 483, 342, 349,
	501, 351, 313, 400, 344, 467, 358, 0, 494, 559,
	495, 618, 621, 619, 620, 392, 354, 355, 426, 359,
	369, 414, 466, 398, 419, 311, 457, 428, 374, 545,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 600, 599, 598,
	597, 596, 595, 594, 593, 0, 0, 542, 443, 323,
	285, 319, 320, 327, 647, 644, 448, 648, 0, 293,
	522, 367, 169, 410, 341, 587, 588, 0, 639, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 590, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 473, 474, 475, 497,
	0, 459, 521, 645, 0, 0, 0, 0, 0, 0,
	0, 571, 583, 617, 0, 627, 628, 630, 632, 631,
	634, 433, 434, 0, 636, 637, 638, 635, 371, 420,
	439, 427, 0, 651, 512, 513, 652, 623, 397, 0,
	527, 560, 549, 633, 515, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 366, 564,
	546, 556, 547, 532, 533, 534, 541, 346, 535, 536,
	537, 507, 538, 508, 539, 540, 0, 563, 514, 429,
	381, 581, 580, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1326, 0, 0, 228, 0, 0, 780, 790, 0, 0,
	309, 229, 509, 629, 511, 510, 781, 0, 782, 786,
	789, 785, 783, 784, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 787, 0, 0, 0, 0, 0, 299, 436, 455,
	310, 424, 468, 315, 432, 447, 305, 396, 421, 0,
	0, 301, 453, 431, 378, 356, 357, 300, 0, 415,
	334, 348, 331, 394, 788, 452, 480, 330, 471, 0,
	463, 303, 0, 462, 393, 449, 454, 379, 373, 0,
	302, 451, 377, 372, 360, 338, 496, 361, 362, 352,
	405, 370, 406, 353, 383, 382, 384, 0, 0, 0,
	0, 0, 491, 492, 0, 0, 640, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 622, 0,
	0, 626, 0, 465, 0, 0, 0, 0, 0, 0,
	435, 0, 0, 363, 0, 0, 0, 481, 0, 418,
	399, 654, 0, 0, 416, 368, 450, 407, 456, 437,
	464, 412, 408, 294, 438, 333, 380, 306, 308, 328,
	335, 337, 339, 340, 389, 390, 402, 423, 440, 441,
	442, 332, 316, 417, 317, 350, 318, 295, 324, 322,
	325, 425, 326, 297, 403, 446, 0, 345, 413, 376,
	298, 375, 404, 445, 444, 307, 472, 478, 479, 568,
	0, 484, 655, 656, 657, 493, 0, 409, 498, 499,
	500, 502, 503, 504, 505, 569, 586, 553, 523, 486,
	577, 520, 524, 525, 589, 0, 0, 0, 477, 364,
	365, 0, 343, 291, 292, 650, 329, 395, 591, 624,
	625, 516, 0, 578, 517, 526, 321, 550, 562, 561,
	391, 476, 0, 573, 576, 506, 649, 0, 570, 585,
	653, 584, 646, 401, 0, 422, 582, 529, 0, 574,
	548, 0, 575, 544, 579, 0, 518, 0, 430, 458,
	470, 487, 490, 519, 604, 605, 606, 296, 489, 608,
	609, 610, 611, 612, 613, 614, 607, 461, 551, 528,
	554, 469, 531, 530, 0, 0, 565, 485, 566, 567,
	385, 386, 387, 388, 347, 592, 314, 488, 411, 0,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 557,
	558, 555, 658, 0, 615, 616, 0, 0, 482, 483,
	342, 349, 501, 351, 313, 400, 344, 467, 358, 0,
	494, 559, 495, 618, 621, 619, 620, 392, 354, 355,
	426, 359, 369, 414, 466, 398, 419, 311, 457, 428,
	374, 545, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 600,
	599, 598, 597, 596, 595, 594, 593, 0, 0, 542,
	443, 323, 285, 319, 320, 327, 647, 644, 448, 648,
	0, 293, 522, 367, 0, 410, 341, 587, 588, 0,
	639, 241, 242, 243, 244, 245, 246, 247, 248, 286,
	249, 250, 251, 252, 253, 254, 255, 258, 259, 260,
	261, 262, 263, 264, 265, 590, 256, 257, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 0, 0, 0, 287, 288, 289, 290, 0,
	0, 281, 282, 283, 284, 0, 0, 0, 473, 474,
	475, 497, 0, 459, 521, 645, 0, 0, 0, 0,
	0, 0, 0, 571, 583, 617, 0, 627, 628, 630,
	632, 631, 634, 433, 434, 0, 636, 637, 638, 635,
	371, 420, 439, 427, 0, 651, 512, 513, 652, 623,
	206, 64, 197, 168, 0, 0, 0, 0, 0, 0,
	397, 677, 527, 560, 549, 633, 515, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 0, 0,
	366, 564, 546, 556, 547, 532, 533, 534, 541, 346,
	535, 536, 537, 507, 538, 508, 539, 540, 0, 563,
	514, 429, 381, 581, 580, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 684, 0, 0, 0, 0, 0,
	0, 0, 683, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 309, 229, 509, 629, 511, 510, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	436, 455, 310, 424, 468, 315, 432, 447, 305, 396,
	421, 0, 0, 301, 453, 431, 378, 356, 357, 300,
	0, 415, 334, 348, 331, 394, 0, 452, 480, 330,
	471, 0, 463, 303, 0, 462, 393, 449, 454, 379,
	373, 0, 302, 451, 377, 372, 360, 338, 496, 361,
	362, 352, 405, 370, 406, 353, 383, 382, 384, 0,
	0, 0, 0, 0, 491, 492, 0, 0, 640, 0,
	0, 0, 0, 0, 0, 0, 0, 681, 682, 0,
	622, 0, 0, 626, 0, 465, 0, 0, 0, 0,
	0, 0, 435, 0, 0, 363, 0, 0, 0, 481,
	0, 418, 399, 654, 0, 0, 416, 368, 450, 407,
	456, 437, 464, 412, 408, 294, 438, 333, 380, 306,
	308, 328, 335, 337, 339, 340, 389, 390, 402, 423,
	440, 441, 442, 332, 316, 417, 317, 350, 318, 295,
	324, 322, 325, 425, 326, 297, 403, 446, 0, 345,
	413, 376, 298, 375, 404, 445, 444, 307, 472, 478,
	479, 568, 0, 484, 655, 656, 657, 493, 0, 409,
	498, 499, 500, 502, 503, 504, 505, 569, 586, 553,
	523, 486, 577, 520, 524, 525, 589, 0, 0, 0,
	477, 364, 365, 0, 343, 291, 292, 650, 329, 395,
	591, 624, 625, 516, 0, 578, 517, 526, 321, 550,
	562, 561, 391, 476, 0, 573, 576, 506, 649, 0,
	570, 585, 653, 584, 646, 401, 0, 422, 582, 529,
	0, 574, 548, 0, 575, 544, 579, 0, 518, 0,
	430, 458, 470, 487, 490, 519, 604, 605, 606, 296,
	489, 608, 609, 610, 611, 612, 613, 614, 607, 461,
	551, 528, 554, 469, 531, 530, 0, 0, 565, 485,
	566, 567, 385, 386, 387, 388, 678, 680, 314, 488,
	411, 692, 552, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 558, 555, 658, 0, 615, 616, 0, 0,
	482, 483, 342, 349, 501, 351, 313, 400, 344, 467,
	358, 0, 494, 559, 495, 618, 621, 619, 620, 392,
	354, 355, 426, 359, 369, 414, 466, 398, 419, 311,
	457, 428, 374, 545, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 65, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 600, 599, 598, 597, 596, 595, 594, 593, 0,
	0, 542, 443, 323, 285, 319, 320, 327, 647, 644,
	448, 648, 0, 293, 522, 367, 169, 410, 341, 587,
	588, 0, 639, 241, 242, 243, 244, 245, 246, 247,
	248, 286, 249, 250, 251, 252, 253, 254, 255, 258,
	259, 260, 261, 262, 263, 264, 265, 590, 256, 257,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 0, 0, 0, 287, 288, 289,
	290, 0, 0, 281, 282, 283, 284, 0, 0, 0,
	473, 474, 475, 497, 0, 459, 521, 645, 0, 0,
	0, 0, 0, 0, 0, 571, 583, 617, 0, 627,
	628, 630, 632, 631, 634, 433, 434, 0, 636, 637,
	638, 635, 371, 420, 439, 427, 0, 651, 512, 513,
	652, 623, 397, 0, 527, 560, 549, 633, 515, 0,
	1134, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 366, 564, 546, 556, 547, 532, 533, 534,
	541, 346, 535, 536, 537, 507, 538, 508, 539, 540,
	0, 563, 514, 429, 381, 581, 580, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	0, 0, 0, 0, 309, 229, 509, 629, 511, 510,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1119, 0, 0, 0, 0, 0,
	0, 299, 436, 455, 310, 424, 468, 315, 432, 447,
	305, 396, 421, 0, 0, 2578, 2581, 2582, 2583, 2584,
	2585, 2586, 0, 2591, 2587, 2588, 2589, 2590, 0, 2573,
	2574, 2575, 2576, 1117, 2557, 2579, 0, 2558, 393, 2559,
	2560, 2561, 2562, 1121, 2563, 2564, 2565, 2566, 2567, 2570,
	2571, 2568, 2569, 2577, 405, 370, 406, 353, 383, 382,
	384, 1145, 1147, 1149, 1151, 1154, 491, 492, 0, 0,
	640, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 622, 0, 0, 626, 0, 465, 0, 0,
	0, 0, 0, 0, 435, 0, 0, 363, 0, 0,
	0, 2572, 0, 418, 399, 654, 0, 0, 416, 368,
	450, 407, 456, 437, 464, 412, 408, 294, 438, 333,
	380, 306, 308, 328, 335, 337, 339, 340, 389, 390,
	402, 423, 440, 441, 442, 332, 316, 417, 317, 350,
	318, 295, 324, 322, 325, 425, 326, 297, 403, 446,
	0, 345, 413, 376, 298, 375, 404, 445, 444, 307,
	472, 478, 479, 568, 0, 484, 655, 656, 657, 493,
	0, 409, 498, 499, 500, 502, 503, 504, 505, 569,
	586, 553, 523, 486, 577, 520, 524, 525, 589, 0,
	0, 0, 477, 364, 365, 0, 343, 291, 292, 650,
	329, 395, 591, 624, 625, 516, 0, 578, 517, 526,
	321, 550, 562, 561, 391, 476, 0, 573, 576, 506,
	649, 0, 570, 585, 653, 584, 646, 401, 0, 422,
	582, 529, 0, 574, 548, 0, 575, 544, 579, 0,
	518, 0, 430, 458, 470, 487, 490, 519, 604, 605,
	606, 296, 489, 608, 609, 610, 611, 612, 613, 614,
	607, 461, 551, 528, 554, 469, 531, 530, 0, 0,
	565, 485, 566, 567, 385, 386, 387, 388, 347, 592,
	314, 488, 411, 0, 552, 0, 0, 0, 0, 0,
	0, 0, 0, 557, 558, 555, 658, 0, 615, 616,
	0, 0, 482, 483, 342, 349, 501, 351, 313, 400,
	344, 467, 358, 0, 494, 559, 495, 618, 621, 619,
	620, 392, 354, 355, 426, 359, 369, 414, 466, 398,
	419, 311, 457, 428, 374, 545, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 600, 599, 598, 597, 596, 595, 594,
	593, 0, 0, 542, 443, 323, 285, 319, 320, 327,
	647, 644, 448, 648, 0, 293, 2580, 367, 0, 410,
	341, 587, 588, 0, 639, 241, 242, 243, 244, 245,
	246, 247, 248, 286, 249, 250, 251, 252, 253, 254,
	255, 258, 259, 260, 261, 262, 263, 264, 265, 590,
	256, 257, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 0, 0, 0, 287,
	288, 289, 290, 0, 0, 281, 282, 283, 284, 0,
	0, 0, 473, 474, 475, 497, 0, 459, 521, 645,
	0, 0, 0, 0, 0, 0, 0, 571, 583, 617,
	0, 627, 628, 630, 632, 631, 634, 433, 434, 0,
	636, 637, 638, 635, 371, 420, 439, 427, 0, 651,
	512, 513, 652, 623, 397, 0, 527, 560, 549, 633,
	515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 366, 564, 546, 556, 547, 532,
	533, 534, 541, 346, 535, 536, 537, 507, 538, 508,
	539, 540, 0, 563, 514, 429, 381, 581, 580, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	0, 0, 0, 0, 0, 0, 309, 229, 509, 629,
	511, 510, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 2415, 2418, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 436, 455, 310, 424, 468, 315,
	432, 447, 305, 396, 421, 0, 0, 301, 453, 431,
	378, 356, 357, 300, 0, 415, 334, 348, 331, 394,
	0, 452, 480, 330, 471, 0, 463, 303, 0, 462,
	393, 449, 454, 379, 373, 0, 302, 451, 377, 372,
	360, 338, 496, 361, 362, 352, 405, 370, 406, 353,
	383, 382, 384, 0, 0, 0, 0, 0, 491, 492,
	0, 0, 640, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 622, 0, 0, 626, 2419, 465,
	0, 0, 0, 2414, 0, 2413, 435, 2411, 2416, 363,
	0, 0, 0, 481, 0, 418, 399, 654, 0, 0,
	416, 368, 450, 407, 456, 437, 464, 412, 408, 294,
	438, 333, 380, 306, 308, 328, 335, 337, 339, 340,
	389, 390, 402, 423, 440, 441, 442, 332, 316, 417,
	317, 350, 318, 295, 324, 322, 325, 425, 326, 297,
	403, 446, 2417, 345, 413, 376, 298, 375, 404, 445,
	444, 307, 472, 478, 479, 568, 0, 484, 655, 656,
	657, 493, 0, 409, 498, 499, 500, 502, 503, 504,
	505, 569, 586, 553, 523, 486, 577, 520, 524, 525,
	589, 0, 0, 0, 477, 364, 365, 0, 343, 291,
	292, 650, 329, 395, 591, 624, 625, 516, 0, 578,
	517, 526, 321, 550, 562, 561, 391, 476, 0, 573,
	576, 506, 649, 0, 570, 585, 653, 584, 646, 401,
	0, 422, 582, 529, 0, 574, 548, 0, 575, 544,
	579, 0, 518, 0, 430, 458, 470, 487, 490, 519,
	604, 605, 606, 296, 489, 608, 609, 610, 611, 612,
	613, 614, 607, 461, 551, 528, 554, 469, 531, 530,
	0, 0, 565, 485, 566, 567, 385, 386, 387, 388,
	347, 592, 314, 488, 411, 0, 552, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 558, 555, 658, 0,
	615, 616, 0, 0, 482, 483, 342, 349, 501, 351,
	313, 400, 344, 467, 358, 0, 494, 559, 495, 618,
	621, 619, 620, 392, 354, 355, 426, 359, 369, 414,
	466, 398, 419, 311, 457, 428, 374, 545, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 600, 599, 598, 597, 596,
	595, 594, 593, 0, 0, 542, 443, 323, 285, 319,
	320, 327, 647, 644, 448, 648, 0, 293, 522, 367,
	0, 410, 341, 587, 588, 0, 639, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 590, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 473, 474, 475, 497, 0, 459,
	521, 645, 0, 0, 0, 0, 0, 0, 0, 571,
	583, 617, 0, 627, 628, 630, 632, 631, 634, 433,
	434, 0, 636, 637, 638, 635, 371, 420, 439, 427,
	0, 651, 512, 513, 652, 623, 397, 0, 527, 560,
	549, 633, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 366, 564, 546, 556,
	547, 532, 533, 534, 541, 346, 535, 536, 537, 507,
	538, 508, 539, 540, 0, 563, 514, 429, 381, 581,
	580, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 0, 0, 0, 0, 0, 0, 309, 229,
	509, 629, 511, 510, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 2436, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 436, 455, 310, 424,
	468, 315, 432, 447, 305, 396, 421, 0, 0, 301,
	453, 431, 378, 356, 357, 300, 0, 415, 334, 348,
	331, 394, 0, 452, 480, 330, 471, 0, 463, 303,
	0, 462, 393, 449, 454, 379, 373, 0, 302, 451,
	377, 372, 360, 338, 496, 361, 362, 352, 405, 370,
	406, 353, 383, 382, 384, 0, 0, 0, 0, 0,
	491, 492, 0, 0, 640, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 622, 0, 0, 626,
	2435, 465, 0, 0, 0, 2441, 2438, 2440, 435, 0,
	2439, 363, 0, 0, 0, 481, 0, 418, 399, 654,
	0, 2433, 416, 368, 450, 407, 456, 437, 464, 412,
	408, 294, 438, 333, 380, 306, 308, 328, 335, 337,
	339, 340, 389, 390, 402, 423, 440, 441, 442, 332,
	316, 417, 317, 350, 318, 295, 324, 322, 325, 425,
	326, 297, 403, 446, 0, 345, 413, 376, 298, 375,
	404, 445, 444, 307, 472, 478, 479, 568, 0, 484,
	655, 656, 657, 493, 0, 409, 498, 499, 500, 502,
	503, 504, 505, 569, 586, 553, 523, 486, 577, 520,
	524, 525, 589, 0, 0, 0, 477, 364, 365, 0,
	343, 291, 292, 650, 329, 395, 591, 624, 625, 516,
	0, 578, 517, 526, 321, 550, 562, 561, 391, 476,
	0, 573, 576, 506, 649, 0, 570, 585, 653, 584,
	646, 401, 0, 422, 582, 529, 0, 574, 548, 0,
	575, 544, 579, 0, 518, 0, 430, 458, 470, 487,
	490, 519, 604, 605, 606, 296, 489, 608, 609, 610,
	611, 612, 613, 614, 607, 461, 551, 528, 554, 469,
	531, 530, 0, 0, 565, 485, 566, 567, 385, 386,
	387, 388, 347, 592, 314, 488, 411, 0, 552, 0,
	0, 0, 0, 0, 0, 0, 0, 557, 558, 555,
	658, 0, 615, 616, 0, 0, 482, 483, 342, 349,
	501, 351, 313, 400, 344, 467, 358, 0, 494, 559,
	495, 618, 621, 619, 620, 392, 354, 355, 426, 359,
	369, 414, 466, 398, 419, 311, 457, 428, 374, 545,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 600, 599, 598,
	597, 596, 595, 594, 593, 0, 0, 542, 443, 323,
	285, 319, 320, 327, 647, 644, 448, 648, 0, 293,
	522, 367, 0, 410, 341, 587, 588, 0, 639, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 590, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 473, 474, 475, 497,
	0, 459, 521, 645, 0, 0, 0, 0, 0, 0,
	0, 571, 583, 617, 0, 627, 628, 630, 632, 631,
	634, 433, 434, 0, 636, 637, 638, 635, 371, 420,
	439, 427, 0, 651, 512, 513, 652, 623, 397, 0,
	527, 560, 549, 633, 515, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 366, 564,
	546, 556, 547, 532, 533, 534, 541, 346, 535, 536,
	537, 507, 538, 508, 539, 540, 0, 563, 514, 429,
	381, 581, 580, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 509, 629, 511, 510, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 2436, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 436, 455,
	310, 424, 468, 315, 432, 447, 305, 396, 421, 0,
	0, 301, 453, 431, 378, 356, 357, 300, 0, 415,
	334, 348, 331, 394, 0, 452, 480, 330, 471, 0,
	463, 303, 0, 462, 393, 449, 454, 379, 373, 0,
	302, 451, 377, 372, 360, 338, 496, 361, 362, 352,
	405, 370, 406, 353, 383, 382, 384, 0, 0, 0,
	0, 0, 491, 492, 0, 0, 640, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 622, 0,
	0, 626, 2435, 465, 0, 0, 0, 2441, 2438, 2440,
	435, 0, 2439, 363, 0, 0, 0, 481, 0, 418,
	399, 654, 0, 0, 416, 368, 450, 407, 456, 437,
	464, 412, 408, 294, 438, 333, 380, 306, 308, 328,
	335, 337, 339, 340, 389, 390, 402, 423, 440, 441,
	442, 332, 316, 417, 317, 350, 318, 295, 324, 322,
	325, 425, 326, 297, 403, 446, 0, 345, 413, 376,
	298, 375, 404, 445, 444, 307, 472, 478, 479, 568,
	0, 484, 655, 656, 657, 493, 0, 409, 498, 499,
	500, 502, 503, 504, 505, 569, 586, 553, 523, 486,
	577, 520, 524, 525, 589, 0, 0, 0, 477, 364,
	365, 0, 343, 291, 292, 650, 329, 395, 591, 624,
	625, 516, 0, 578, 517, 526, 321, 550, 562, 561,
	391, 476, 0, 573, 576, 506, 649, 0, 570, 585,
	653, 584, 646, 401, 0, 422, 582, 529, 0, 574,
	548, 0, 575, 544, 579, 0, 518, 0, 430, 458,
	470, 487, 490, 519, 604, 605, 606, 296, 489, 608,
	609, 610, 611, 612, 613, 614, 607, 461, 551, 528,
	554, 469, 531, 530, 0, 0, 565, 485, 566, 567,
	385, 386, 387, 388, 347, 592, 314, 488, 411, 0,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 557,
	558, 555, 658, 0, 615, 616, 0, 0, 482, 483,
	342, 349, 501, 351, 313, 400, 344, 467, 358, 0,
	494, 559, 495, 618, 621, 619, 620, 392, 354, 355,
	426, 359, 369, 414, 466, 398, 419, 311, 457, 428,
	374, 545, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 600,
	599, 598, 597, 596, 595, 594, 593, 0, 0, 542,
	443, 323, 285, 319, 320, 327, 647, 644, 448, 648,
	0, 293, 522, 367, 0, 410, 341, 587, 588, 0,
	639, 241, 242, 243, 244, 245, 246, 247, 248, 286,
	249, 250, 251, 252, 253, 254, 255, 258, 259, 260,
	261, 262, 263, 264, 265, 590, 256, 257, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 0, 0, 0, 287, 288, 289, 290, 0,
	0, 281, 282, 283, 284, 0, 0, 0, 473, 474,
	475, 497, 0, 459, 521, 645, 0, 0, 0, 0,
	0, 0, 0, 571, 583, 617, 0, 627, 628, 630,
	632, 631, 634, 433, 434, 0, 636, 637, 638, 635,
	371, 420, 439, 427, 0, 651, 512, 513, 652, 623,
	397, 0, 527, 560, 549, 633, 515, 0, 0, 0,
	0, 0, 2129, 0, 0, 0, 0, 336, 0, 0,
	366, 564, 546, 556, 547, 532, 533, 534, 541, 346,
	535, 536, 537, 507, 538, 508, 539, 540, 0, 563,
	514, 429, 381, 581, 580, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 2130, 0,
	0, 0, 309, 229, 509, 629, 511, 510, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	1255, 1256, 1257, 1254, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	436, 455, 310, 424, 468, 315, 432, 447, 305, 396,
	421, 0, 0, 301, 453, 431, 378, 356, 357, 300,
	0, 415, 334, 348, 331, 394, 0, 452, 480, 330,
	471, 0, 463, 303, 0, 462, 393, 449, 454, 379,
	373, 0, 302, 451, 377, 372, 360, 338, 496, 361,
	362, 352, 405, 370, 406, 353, 383, 382, 384, 0,
	0, 0, 0, 0, 491, 492, 0, 0, 640, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	622, 0, 0, 626, 0, 465, 0, 0, 0, 0,
	0, 0, 435, 0, 0, 363, 0, 0, 0, 481,
	0, 418, 399, 654, 0, 0, 416, 368, 450, 407,
	456, 437, 464, 412, 408, 294, 438, 333, 380, 306,
	308, 328, 335, 337, 339, 340, 389, 390, 402, 423,
	440, 441, 442, 332, 316, 417, 317, 350, 318, 295,
	324, 322, 325, 425, 326, 297, 403, 446, 0, 345,
	413, 376, 298, 375, 404, 445, 444, 307, 472, 478,
	479, 568, 0, 484, 655, 656, 657, 493, 0, 409,
	498, 499, 500, 502, 503, 504, 505, 569, 586, 553,
	523, 486, 577, 520, 524, 525, 589, 0, 0, 0,
	477, 364, 365, 0, 343, 291, 292, 650, 329, 395,
	591, 624, 625, 516, 0, 578, 517, 526, 321, 550,
	562, 561, 391, 476, 0, 573, 576, 506, 649, 0,
	570, 585, 653, 584, 646, 401, 0, 422, 582, 529,
	0, 574, 548, 0, 575, 544, 579, 0, 518, 0,
	430, 458, 470, 487, 490, 519, 604, 605, 606, 296,
	489, 608, 609, 610, 611, 612, 613, 614, 607, 461,
	551, 528, 554, 469, 531, 530, 0, 0, 565, 485,
	566, 567, 385, 386, 387, 388, 347, 592, 314, 488,
	411, 0, 552, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 558, 555, 658, 0, 615, 616, 0, 0,
	482, 483, 342, 349, 501, 351, 313, 400, 344, 467,
	358, 0, 494, 559, 495, 618, 621, 619, 620, 392,
	354, 355, 426, 359, 369, 414, 466, 398, 419, 311,
	457, 428, 374, 545, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 600, 599, 598, 597, 596, 595, 594, 593, 0,
	0, 542, 443, 323, 285, 319, 320, 327, 647, 644,
	448, 648, 0, 293, 522, 367, 0, 410, 341, 587,
	588, 0, 639, 241, 242, 243, 244, 245, 246, 247,
	248, 286, 249, 250, 251, 252, 253, 254, 255, 258,
	259, 260, 261, 262, 263, 264, 265, 590, 256, 257,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 0, 0, 0, 287, 288, 289,
	290, 0, 0, 281, 282, 283, 284, 0, 0, 0,
	473, 474, 475, 497, 0, 459, 521, 645, 0, 0,
	0, 0, 0, 0, 0, 571, 583, 617, 0, 627,
	628, 630, 632, 631, 634, 433, 434, 0, 636, 637,
	638, 635, 371, 420, 439, 427, 206, 651, 512, 513,
	652, 623, 0, 0, 0, 0, 397, 0, 527, 560,
	549, 633, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 366, 564, 546, 556,
	547, 532, 533, 534, 541, 346, 535, 536, 537, 507,
	538, 508, 539, 540, 140, 563, 514, 429, 381, 581,
	580, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 202, 2178,
	0, 228, 0, 0, 0, 0, 0, 0, 309, 229,
	509, 629, 511, 510, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 436, 455, 310, 424,
	468, 315, 432, 447, 305, 396, 421, 0, 0, 301,
	453, 431, 378, 356, 357, 300, 0, 415, 334, 348,
	331, 394, 0, 452, 480, 330, 471, 0, 463, 303,
	0, 462, 393, 449, 454, 379, 373, 0, 302, 451,
	377, 372, 360, 338, 496, 361, 362, 352, 405, 370,
	406, 353, 383, 382, 384, 0, 0, 0, 0, 0,
	491, 492, 0, 0, 640, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 622, 0, 0, 626,
	0, 465, 0, 0, 0, 0, 0, 0, 435, 0,
	0, 363, 0, 0, 0, 481, 0, 418, 399, 654,
	0, 0, 416, 368, 450, 407, 456, 437, 464, 412,
	408, 294, 438, 333, 380, 306, 308, 328, 335, 337,
	339, 340, 389, 390, 402, 423, 440, 441, 442, 332,
	316, 417, 317, 350, 318, 295, 324, 322, 325, 425,
	326, 297, 403, 446, 0, 345, 413, 376, 298, 375,
	404, 445, 444, 307, 472, 478, 479, 568, 0, 484,
	655, 656, 657, 493, 0, 409, 498, 499, 500, 502,
	503, 504, 505, 569, 586, 553, 523, 486, 577, 520,
	524, 525, 589, 0, 0, 0, 477, 364, 365, 0,
	343, 291, 292, 650, 329, 395, 591, 624, 625, 516,
	0, 578, 517, 526, 321, 550, 562, 561, 391, 476,
	0, 573, 576, 506, 649, 0, 570, 585, 653, 584,
	646, 401, 0, 422, 582, 529, 0, 574, 548, 0,
	575, 544, 579, 0, 518, 0, 430, 458, 470, 487,
	490, 519, 604, 605, 606, 296, 489, 608, 609, 610,
	611, 612, 613, 614, 607, 461, 551, 528, 554, 469,
	531, 530, 0, 0, 565, 485, 566, 567, 385, 386,
	387, 388, 347, 592, 314, 488, 411, 0, 552, 0,
	0, 0, 0, 0, 0, 0, 0, 557, 558, 555,
	658, 0, 615, 616, 0, 0, 482, 483, 342, 349,
	501, 351, 313, 400, 344, 467, 358, 0, 494, 559,
	495, 618, 621, 619, 620, 392, 354, 355, 426, 359,
	369, 414, 466, 398, 419, 311, 457, 428, 374, 545,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 600, 599, 598,
	597, 596, 595, 594, 593, 0, 0, 542, 443, 323,
	285, 319, 320, 327, 647, 644, 448, 648, 0, 293,
	522, 367, 169, 410, 341, 587, 588, 0, 639, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 590, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 473, 474, 475, 497,
	0, 459, 521, 645, 0, 0, 0, 0, 0, 0,
	0, 571, 583, 617, 0, 627, 628, 630, 632, 631,
	634, 433, 434, 0, 636, 637, 638, 635, 371, 420,
	439, 427, 206, 651, 512, 513, 652, 623, 0, 0,
	0, 0, 397, 0, 527, 560, 549, 633, 515, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 366, 564, 546, 556, 547, 532, 533, 534,
	541, 346, 535, 536, 537, 507, 538, 508, 539, 540,
	140, 563, 514, 429, 381, 581, 580, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 202, 2164, 0, 228, 0, 0,
	0, 0, 0, 0, 309, 229, 509, 629, 511, 510,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 436, 455, 310, 424, 468, 315, 432, 447,
	305, 396, 421, 0, 0, 301, 453, 431, 378, 356,
	357, 300, 0, 415, 334, 348, 331, 394, 0, 452,
	480, 330, 471, 0, 463, 303, 0, 462, 393, 449,
	454, 379, 373, 0, 302, 451, 377, 372, 360, 338,
	496, 361, 362, 352, 405, 370, 406, 353, 383, 382,
	384, 0, 0, 0, 0, 0, 491, 492, 0, 0,
	640, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 622, 0, 0, 626, 0, 465, 0, 0,
	0, 0, 0, 0, 435, 0, 0, 363, 0, 0,
	0, 481, 0, 418, 399, 654, 0, 0, 416, 368,
	450, 407, 456, 437, 464, 412, 408, 294, 438, 333,
	380, 306, 308, 328, 335, 337, 339, 340, 389, 390,
	402, 423, 440, 441, 442, 332, 316, 417, 317, 350,
	318, 295, 324, 322, 325, 425, 326, 297, 403, 446,
	0, 345, 413, 376, 298, 375, 404, 445, 444, 307,
	472, 478, 479, 568, 0, 484, 655, 656, 657, 493,
	0, 409, 498, 499, 500, 502, 503, 504, 505, 569,
	586, 553, 523, 486, 577, 520, 524, 525, 589, 0,
	0, 0, 477, 364, 365, 0, 343, 291, 292, 650,
	329, 395, 591, 624, 625, 516, 0, 578, 517, 526,
	321, 550, 562, 561, 391, 476, 0, 573, 576, 506,
	649, 0, 570, 585, 653, 584, 646, 401, 0, 422,
	582, 529, 0, 574, 548, 0, 575, 544, 579, 0,
	518, 0, 430, 458, 470, 487, 490, 519, 604, 605,
	606, 296, 489, 608, 609, 610, 611, 612, 613, 614,
	607, 461, 551, 528, 554, 469, 531, 530, 0, 0,
	565, 485, 566, 567, 385, 386, 387, 388, 347, 592,
	314, 488, 411, 0, 552, 0, 0, 0, 0, 0,
	0, 0, 0, 557, 558, 555, 658, 0, 615, 616,
	0, 0, 482, 483, 342, 349, 501, 351, 313, 400,
	344, 467, 358, 0, 494, 559, 495, 618, 621, 619,
	620, 392, 354, 355, 426, 359, 369, 414, 466, 398,
	419, 311, 457, 428, 374, 545, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 600, 599, 598, 597, 596, 595, 594,
	593, 0, 0, 542, 443, 323, 285, 319, 320, 327,
	647, 644, 448, 648, 0, 293, 522, 367, 169, 410,
	341, 587, 588, 0, 639, 241, 242, 243, 244, 245,
	246, 247, 248, 286, 249, 250, 251, 252, 253, 254,
	255, 258, 259, 260, 261, 262, 263, 264, 265, 590,
	256, 257, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 0, 0, 0, 287,
	288, 289, 290, 0, 0, 281, 282, 283, 284, 0,
	0, 0, 473, 474, 475, 497, 0, 459, 521, 645,
	0, 0, 0, 0, 0, 0, 0, 571, 583, 617,
	0, 627, 628, 630, 632, 631, 634, 433, 434, 0,
	636, 637, 638, 635, 371, 420, 439, 427, 0, 651,
	512, 513, 652, 623, 397, 0, 527, 560, 549, 633,
	515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 1045, 0, 366, 564, 546, 556, 547, 532,
	533, 534, 541, 346, 535, 536, 537, 507, 538, 508,
	539, 540, 0, 563, 514, 429, 381, 581, 580, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	1052, 1053, 0, 0, 0, 0, 309, 229, 509, 629,
	511, 510, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1056, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 436, 1039, 310, 424, 468, 315,
	432, 447, 305, 396, 421, 0, 0, 301, 453, 431,
	378, 356, 357, 300, 0, 415, 334, 348, 331, 394,
	0, 452, 480, 330, 471, 1026, 463, 303, 1025, 462,
	393, 449, 454, 379, 373, 0, 302, 451, 377, 372,
	360, 338, 496, 361, 362, 352, 405, 370, 406, 353,
	383, 382, 384, 0, 0, 0, 0, 0, 491, 492,
	0, 0, 640, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 622, 0, 0, 626, 0, 465,
	0, 0, 0, 0, 0, 0, 435, 0, 0, 363,
	0, 0, 0, 481, 0, 418, 399, 654, 0, 0,
	416, 368, 450, 407, 456, 437, 464, 1043, 408, 294,
	438, 333, 380, 306, 308, 328, 335, 337, 339, 340,
	389, 390, 402, 423, 440, 441, 442, 332, 316, 417,
	317, 350, 318, 295, 324, 322, 325, 425, 326, 297,
	403, 446, 0, 345, 413, 376, 298, 375, 404, 445,
	444, 307, 472, 478, 479, 568, 0, 484, 655, 656,
	657, 493, 0, 409, 498, 499, 500, 502, 503, 504,
	505, 569, 586, 553, 523, 486, 577, 520, 524, 525,
	589, 0, 0, 0, 477, 364, 365, 0, 343, 291,
	292, 650, 329, 395, 591, 624, 625, 516, 0, 578,
	517, 526, 321, 550, 562, 561, 391, 476, 0, 573,
	576, 506, 649, 0, 570, 585, 653, 584, 646, 401,
	0, 422, 582, 529, 0, 574, 548, 0, 575, 544,
	579, 0, 518, 0, 430, 458, 470, 487, 490, 519,
	604, 605, 606, 296, 489, 608, 609, 610, 611, 612,
	613, 1044, 607, 461, 551, 528, 554, 469, 531, 530,
	0, 0, 565, 1047, 566, 567, 385, 386, 387, 388,
	347, 592, 1042, 488, 411, 0, 552, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 558, 555, 658, 0,
	615, 616, 0, 0, 482, 483, 342, 349, 501, 351,
	313, 400, 344, 467, 358, 0, 494, 559, 495, 618,
	621, 619, 620, 1054, 1040, 1050, 1041, 359, 369, 414,
	466, 398, 419, 311, 457, 428, 1051, 545, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 600, 599, 598, 597, 596,
	595, 594, 593, 0, 0, 542, 443, 323, 285, 319,
	320, 327, 647, 644, 448, 648, 0, 293, 522, 367,
	0, 410, 341, 587, 588, 0, 639, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 590, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 473, 474, 475, 497, 0, 459,
	521, 645, 0, 0, 0, 0, 0, 0, 0, 571,
	583, 617, 0, 627, 628, 630, 632, 631, 634, 433,
	434, 0, 636, 637, 638, 635, 1038, 420, 439, 427,
	206, 651, 512, 513, 652, 623, 0, 0, 0, 0,
	397, 0, 527, 560, 549, 633, 515, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 0, 0,
	366, 564, 546, 556, 547, 532, 533, 534, 541, 346,
	535, 536, 537, 507, 538, 508, 539, 540, 140, 563,
	514, 429, 381, 581, 580, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2061, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 309, 229, 509, 629, 511, 510, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	436, 455, 310, 424, 468, 315, 432, 447, 305, 396,
	421, 0, 0, 301, 453, 431, 378, 356, 357, 300,
	0, 415, 334, 348, 331, 394, 0, 452, 480, 330,
	471, 0, 463, 303, 0, 462, 393, 449, 454, 379,
	373, 0, 302, 451, 377, 372, 360, 338, 496, 361,
	362, 352, 405, 370, 406, 353, 383, 382, 384, 0,
	0, 0, 0, 0, 491, 492, 0, 0, 640, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	622, 0, 0, 626, 0, 465, 0, 0, 0, 0,
	0, 0, 435, 0, 0, 363, 0, 0, 0, 481,
	0, 418, 399, 654, 0, 0, 416, 368, 450, 407,
	456, 437, 464, 412, 408, 294, 438, 333, 380, 306,
	308, 328, 335, 337, 339, 340, 389, 390, 402, 423,
	440, 441, 442, 332, 316, 417, 317, 350, 318, 295,
	324, 322, 325, 425, 326, 297, 403, 446, 0, 345,
	413, 376, 298, 375, 404, 445, 444, 307, 472, 478,
	479, 568, 0, 484, 655, 656, 657, 493, 0, 409,
	498, 499, 500, 502, 503, 504, 505, 569, 586, 553,
	523, 486, 577, 520, 524, 525, 589, 0, 0, 0,
	477, 364, 365, 0, 343, 291, 292, 650, 329, 395,
	591, 624, 625, 516, 0, 578, 517, 526, 321, 550,
	562, 561, 391, 476, 0, 573, 576, 506, 649, 0,
	570, 585, 653, 584, 646, 401, 0, 422, 582, 529,
	0, 574, 548, 0, 575, 544, 579, 0, 518, 0,
	430, 458, 470, 487, 490, 519, 604, 605, 606, 296,
	489, 608, 609, 610, 611, 612, 613, 614, 607, 461,
	551, 528, 554, 469, 531, 530, 0, 0, 565, 485,
	566, 567, 385, 386, 387, 388, 347, 592, 314, 488,
	411, 0, 552, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 558, 555, 658, 0, 615, 616, 0, 0,
	482, 483, 342, 349, 501, 351, 313, 400, 344, 467,
	358, 0, 494, 559, 495, 618, 621, 619, 620, 392,
	354, 355, 426, 359, 369, 414, 466, 398, 419, 311,
	457, 428, 374, 545, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 600, 599, 598, 597, 596, 595, 594, 593, 0,
	0, 542, 443, 323, 285, 319, 320, 327, 647, 644,
	448, 648, 0, 293, 522, 367, 169, 410, 341, 587,
	588, 0, 639, 241, 242, 243, 244, 245, 246, 247,
	248, 286, 249, 250, 251, 252, 253, 254, 255, 258,
	259, 260, 261, 262, 263, 264, 265, 590, 256, 257,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 0, 0, 0, 287, 288, 289,
	290, 0, 0, 281, 282, 283, 284, 0, 0, 0,
	473, 474, 475, 497, 0, 459, 521, 645, 0, 0,
	0, 0, 0, 0, 0, 571, 583, 617, 0, 627,
	628, 630, 632, 631, 634, 433, 434, 0, 636, 637,
	638, 635, 371, 420, 439, 427, 0, 651, 512, 513,
	652, 623, 397, 0, 527, 560, 549, 633, 515, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 366, 564, 546, 556, 547, 532, 533, 534,
	541, 346, 535, 536, 537, 507, 538, 508, 539, 540,
	0, 563, 514, 429, 381, 581, 580, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 1052, 1053,
	0, 0, 0, 0, 309, 229, 509, 629, 511, 510,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1056,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 436, 455, 310, 424, 468, 315, 432, 447,
	305, 396, 421, 0, 0, 301, 453, 431, 378, 356,
	357, 300, 0, 415, 334, 348, 331, 394, 0, 452,
	480, 330, 471, 1026, 463, 303, 1025, 462, 393, 449,
	454, 379, 373, 0, 302, 451, 377, 372, 360, 338,
	496, 361, 362, 352, 405, 370, 406, 353, 383, 382,
	384, 0, 0, 0, 0, 0, 491, 492, 0, 0,
	640, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 622, 0, 0, 626, 0, 465, 0, 0,
	0, 0, 0, 0, 435, 0, 0, 363, 0, 0,
	0, 481, 0, 418, 399, 654, 0, 0, 416, 368,
	450, 407, 456, 437, 464, 412, 408, 294, 438, 333,
	380, 306, 308, 328, 335, 337, 339, 340, 389, 390,
	402, 423, 440, 441, 442, 332, 316, 417, 317, 350,
	318, 295, 324, 322, 325, 425, 326, 297, 403, 446,
	0, 345, 413, 376, 298, 375, 404, 445, 444, 307,
	472, 478, 479, 568, 0, 484, 655, 656, 657, 493,
	0, 409, 498, 499, 500, 502, 503, 504, 505, 569,
	586, 553, 523, 486, 577, 520, 524, 525, 589, 0,
	0, 0, 477, 364, 365, 0, 343, 291, 292, 650,
	329, 395, 591, 624, 625, 516, 0, 578, 517, 526,
	321, 550, 562, 561, 391, 476, 0, 573, 576, 506,
	649, 0, 570, 585, 653, 584, 646, 401, 0, 422,
	582, 529, 0, 574, 548, 0, 575, 544, 579, 0,
	518, 0, 430, 458, 470, 487, 490, 519, 604, 605,
	606, 296, 489, 608, 609, 610, 611, 612, 613, 614,
	607, 461, 551, 528, 554, 469, 531, 530, 0, 0,
	565, 485, 566, 567, 385, 386, 387, 388, 347, 592,
	314, 488, 411, 0, 552, 0, 0, 0, 0, 0,
	0, 0, 0, 557, 558, 555, 658, 0, 615, 616,
	0, 0, 482, 483, 342, 349, 501, 351, 313, 400,
	344, 467, 358, 0, 494, 559, 495, 618, 621, 619,
	620, 1054, 2082, 1050, 2083, 359, 369, 414, 466, 398,
	419, 311, 457, 428, 1051, 545, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 600, 599, 598, 597, 596, 595, 594,
	593, 0, 0, 542, 443, 323, 285, 319, 320, 327,
	647, 644, 448, 648, 0, 293, 522, 367, 0, 410,
	341, 587, 588, 0, 639, 241, 242, 243, 244, 245,
	246, 247, 248, 286, 249, 250, 251, 252, 253, 254,
	255, 258, 259, 260, 261, 262, 263, 264, 265, 590,
	256, 257, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 0, 0, 0, 287,
	288, 289, 290, 0, 0, 281, 282, 283, 284, 0,
	0, 0, 473, 474, 475, 497, 0, 459, 521, 645,
	0, 0, 0, 0, 0, 0, 0, 571, 583, 617,
	0, 627, 628, 630, 632, 631, 634, 433, 434, 0,
	636, 637, 638, 635, 371, 420, 439, 427, 0, 651,
	512, 513, 652, 623, 397, 0, 527, 560, 549, 633,
	515, 0, 0, 2963, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 366, 564, 546, 556, 547, 532,
	533, 534, 541, 346, 535, 536, 537, 507, 538, 508,
	539, 540, 0, 563, 514, 429, 381, 581, 580, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	0, 0, 0, 0, 0, 0, 309, 229, 509, 629,
	511, 510, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 436, 455, 310, 424, 468, 315,
	432, 447, 305, 396, 421, 0, 0, 301, 453, 431,
	378, 356, 357, 300, 0, 415, 334, 348, 331, 394,
	0, 452, 480, 330, 471, 0, 463, 303, 0, 462,
	393, 449, 454, 379, 373, 0, 302, 451, 377, 372,
	360, 338, 496, 361, 362, 352, 405, 370, 406, 353,
	383, 382, 384, 0, 0, 0, 0, 0, 491, 492,
	0, 0, 640, 0, 0, 0, 0, 0, 0, 2966,
	0, 0, 0, 2965, 622, 0, 0, 626, 0, 465,
	0, 0, 0, 0, 0, 0, 435, 0, 0, 363,
	0, 0, 0, 481, 0, 418, 399, 654, 0, 0,
	416, 368, 450, 407, 456, 437, 464, 412, 408, 294,
	438, 333, 380, 306, 308, 328, 335, 337, 339, 340,
	389, 390, 402, 423, 440, 441, 442, 332, 316, 417,
	317, 350, 318, 295, 324, 322, 325, 425, 326, 297,
	403, 446, 0, 345, 413, 376, 298, 375, 404, 445,
	444, 307, 472, 478, 479, 568, 0, 484, 655, 656,
	657, 493, 0, 409, 498, 499, 500, 502, 503, 504,
	505, 569, 586, 553, 523, 486, 577, 520, 524, 525,
	589, 0, 0, 0, 477, 364, 365, 0, 343, 291,
	292, 650, 329, 395, 591, 624, 625, 516, 0, 578,
	517, 526, 321, 550, 562, 561, 391, 476, 0, 573,
	576, 506, 649, 0, 570, 585, 653, 584, 646, 401,
	0, 422, 582, 529, 0, 574, 548, 0, 575, 544,
	579, 0, 518, 0, 430, 458, 470, 487, 490, 519,
	604, 605, 606, 296, 489, 608, 609, 610, 611, 612,
	613, 614, 607, 461, 551, 528, 554, 469, 531, 530,
	0, 0, 565, 485, 566, 567, 385, 386, 387, 388,
	347, 592, 314, 488, 411, 0, 552, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 558, 555, 658, 0,
	615, 616, 0, 0, 482, 483, 342, 349, 501, 351,
	313, 400, 344, 467, 358, 0, 494, 559, 495, 618,
	621, 619, 620, 392, 354, 355, 426, 359, 369, 414,
	466, 398, 419, 311, 457, 428, 374, 545, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 600, 599, 598, 597, 596,
	595, 594, 593, 0, 0, 542, 443, 323, 285, 319,
	320, 327, 647, 644, 448, 648, 0, 293, 522, 367,
	0, 410, 341, 587, 588, 0, 639, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 590, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 473, 474, 475, 497, 0, 459,
	521, 645, 0, 0, 0, 0, 0, 0, 0, 571,
	583, 617, 0, 627, 628, 630, 632, 631, 634, 433,
	434, 0, 636, 637, 638, 635, 371, 420, 439, 427,
	0, 651, 512, 513, 652, 623, 397, 0, 527, 560,
	549, 633, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 1551, 0, 366, 564, 546, 556,
	547, 532, 533, 534, 541, 346, 535, 536, 537, 507,
	538, 508, 539, 540, 0, 563, 514, 429, 381, 581,
	580, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 0, 0, 1549, 0, 0, 0, 309, 229,
	509, 629, 511, 510, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1547, 0,
	0, 0, 0, 0, 0, 299, 436, 455, 310, 424,
	468, 315, 432, 447, 305, 396, 421, 0, 0, 301,
	453, 431, 378, 356, 357, 300, 0, 415, 334, 348,
	331, 394, 0, 452, 480, 330, 471, 0, 463, 303,
	0, 462, 393, 449, 454, 379, 373, 0, 302, 451,
	377, 372, 360, 338, 496, 361, 362, 352, 405, 370,
	406, 353, 383, 382, 384, 0, 0, 0, 0, 0,
	491, 492, 0, 0, 640, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 622, 0, 0, 626,
	0, 465, 0, 0, 0, 0, 0, 0, 435, 0,
	0, 363, 0, 0, 0, 481, 0, 418, 399, 654,
	0, 0, 416, 368, 450, 407, 456, 437, 464, 412,
	408, 294, 438, 333, 380, 306, 308, 328, 335, 337,
	339, 340, 389, 390, 402, 423, 440, 441, 442, 332,
	316, 417, 317, 350, 318, 295, 324, 322, 325, 425,
	326, 297, 403, 446, 0, 345, 413, 376, 298, 375,
	404, 445, 444, 307, 472, 478, 479, 568, 0, 484,
	655, 656, 657, 493, 0, 409, 498, 499, 500, 502,
	503, 504, 505, 569, 586, 553, 523, 486, 577, 520,
	524, 525, 589, 0, 0, 0, 477, 364, 365, 0,
	343, 291, 292, 650, 329, 395, 591, 624, 625, 516,
	0, 578, 517, 526, 321, 550, 562, 561, 391, 476,
	0, 573, 576, 506, 649, 0, 570, 585, 653, 584,
	646, 401, 0, 422, 582, 529, 0, 574, 548, 0,
	575, 544, 579, 0, 518, 0, 430, 458, 470, 487,
	490, 519, 604, 605, 606, 296, 489, 608, 609, 610,
	611, 612, 613, 614, 607, 461, 551, 528, 554, 469,
	531, 530, 0, 0, 565, 485, 566, 567, 385, 386,
	387, 388, 347, 592, 314, 488, 411, 0, 552, 0,
	0, 0, 0, 0, 0, 0, 0, 557, 558, 555,
	658, 0, 615, 616, 0, 0, 482, 483, 342, 349,
	501, 351, 313, 400, 344, 467, 358, 0, 494, 559,
	495, 618, 621, 619, 620, 392, 354, 355, 426, 359,
	369, 414, 466, 398, 419, 311, 457, 428, 374, 545,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 600, 599, 598,
	597, 596, 595, 594, 593, 0, 0, 542, 443, 323,
	285, 319, 320, 327, 647, 644, 448, 648, 0, 293,
	522, 367, 0, 410, 341, 587, 588, 0, 639, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 590, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 473, 474, 475, 497,
	0, 459, 521, 645, 0, 0, 0, 0, 0, 0,
	0, 571, 583, 617, 0, 627, 628, 630, 632, 631,
	634, 433, 434, 0, 636, 637, 638, 635, 371, 420,
	439, 427, 0, 651, 512, 513, 652, 623, 397, 0,
	527, 560, 549, 633, 515, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 1545, 0, 366, 564,
	546, 556, 547, 532, 533, 534, 541, 346, 535, 536,
	537, 507, 538, 508, 539, 540, 0, 563, 514, 429,
	381, 581, 580, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 1549, 0, 0, 0,
	309, 229, 509, 629, 511, 510, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1547, 0, 0, 0, 0, 0, 0, 299, 436, 455,
	310, 424, 468, 315, 432, 447, 305, 396, 421, 0,
	0, 301, 453, 431, 378, 356, 357, 300, 0, 415,
	334, 348, 331, 394, 0, 452, 480, 330, 471, 0,
	463, 303, 0, 462, 393, 449, 454, 379, 373, 0,
	302, 451, 377, 372, 360, 338, 496, 361, 362, 352,
	405, 370, 406, 353, 383, 382, 384, 0, 0, 0,
	0, 0, 491, 492, 0, 0, 640, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 622, 0,
	0, 626, 0, 465, 0, 0, 0, 0, 0, 0,
	435, 0, 0, 363, 0, 0, 0, 481, 0, 418,
	399, 654, 0, 0, 416, 368, 450, 407, 456, 437,
	464, 412, 408, 294, 438, 333, 380, 306, 308, 328,
	335, 337, 339, 340, 389, 390, 402, 423, 440, 441,
	442, 332, 316, 417, 317, 350, 318, 295, 324, 322,
	325, 425, 326, 297, 403, 446, 0, 345, 413, 376,
	298, 375, 404, 445, 444, 307, 472, 478, 479, 568,
	0, 484, 655, 656, 657, 493, 0, 409, 498, 499,
	500, 502, 503, 504, 505, 569, 586, 553, 523, 486,
	577, 520, 524, 525, 589, 0, 0, 0, 477, 364,
	365, 0, 343, 291, 292, 650, 329, 395, 591, 624,
	625, 516, 0, 578, 517, 526, 321, 550, 562, 561,
	391, 476, 0, 573, 576, 506, 649, 0, 570, 585,
	653, 584, 646, 401, 0, 422, 582, 529, 0, 574,
	548, 0, 575, 544, 579, 0, 518, 0, 430, 458,
	470, 487, 490, 519, 604, 605, 606, 296, 489, 608,
	609, 610, 611, 612, 613, 614, 607, 461, 551, 528,
	554, 469, 531, 530, 0, 0, 565, 485, 566, 567,
	385, 386, 387, 388, 347, 592, 314, 488, 411, 0,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 557,
	558, 555, 658, 0, 615, 616, 0, 0, 482, 483,
	342, 349, 501, 351, 313, 400, 344, 467, 358, 0,
	494, 559, 495, 618, 621, 619, 620, 392, 354, 355,
	426, 359, 369, 414, 466, 398, 419, 311, 457, 428,
	374, 545, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 600,
	599, 598, 597, 596, 595, 594, 593, 0, 0, 542,
	443, 323, 285, 319, 320, 327, 647, 644, 448, 648,
	0, 293, 522, 367, 0, 410, 341, 587, 588, 0,
	639, 241, 242, 243, 244, 245, 246, 247, 248, 286,
	249, 250, 251, 252, 253, 254, 255, 258, 259, 260,
	261, 262, 263, 264, 265, 590, 256, 257, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 0, 0, 0, 287, 288, 289, 290, 0,
	0, 281, 282, 283, 284, 0, 0, 0, 473, 474,
	475, 497, 0, 459, 521, 645, 0, 0, 0, 0,
	0, 0, 0, 571, 583, 617, 0, 627, 628, 630,
	632, 631, 634, 433, 434, 0, 636, 637, 638, 635,
	371, 420, 439, 427, 0, 651, 512, 513, 652, 623,
	397, 0, 527, 560, 549, 633, 515, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 0, 0,
	366, 564, 546, 556, 547, 532, 533, 534, 541, 346,
	535, 536, 537, 507, 538, 508, 539, 540, 0, 563,
	514, 429, 381, 581, 580, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 4024, 0, 228, 848, 0, 0, 0,
	0, 0, 309, 229, 509, 629, 511, 510, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	436, 455, 310, 424, 468, 315, 432, 447, 305, 396,
	421, 0, 0, 301, 453, 431, 378, 356, 357, 300,
	0, 415, 334, 348, 331, 394, 0, 452, 480, 330,
	471, 0, 463, 303, 0, 462, 393, 449, 454, 379,
	373, 0, 302, 451, 377, 372, 360, 338, 496, 361,
	362, 352, 405, 370, 406, 353, 383, 382, 384, 0,
	0, 0, 0, 0, 491, 492, 0, 0, 640, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	622, 0, 0, 626, 0, 465, 0, 0, 0, 0,
	0, 0, 435, 0, 0, 363, 0, 0, 0, 481,
	0, 418, 399, 654, 0, 0, 416, 368, 450, 407,
	456, 437, 464, 412, 408, 294, 438, 333, 380, 306,
	308, 328, 335, 337, 339, 340, 389, 390, 402, 423,
	440, 441, 442, 332, 316, 417, 317, 350, 318, 295,
	324, 322, 325, 425, 326, 297, 403, 446, 0, 345,
	413, 376, 298, 375, 404, 445, 444, 307, 472, 478,
	479, 568, 0, 484, 655, 656, 657, 493, 0, 409,
	498, 499, 500, 502, 503, 504, 505, 569, 586, 553,
	523, 486, 577, 520, 524, 525, 589, 0, 0, 0,
	477, 364, 365, 0, 343, 291, 292, 650, 329, 395,
	591, 624, 625, 516, 0, 578, 517, 526, 321, 550,
	562, 561, 391, 476, 0, 573, 576, 506, 649, 0,
	570, 585, 653, 584, 646, 401, 0, 422, 582, 529,
	0, 574, 548, 0, 575, 544, 579, 0, 518, 0,
	430, 458, 470, 487, 490, 519, 604, 605, 606, 296,
	489, 608, 609, 610, 611, 612, 613, 614, 607, 461,
	551, 528, 554, 469, 531, 530, 0, 0, 565, 485,
	566, 567, 385, 386, 387, 388, 347, 592, 314, 488,
	411, 0, 552, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 558, 555, 658, 0, 615, 616, 0, 0,
	482, 483, 342, 349, 501, 351, 313, 400, 344, 467,
	358, 0, 494, 559, 495, 618, 621, 619, 620, 392,
	354, 355, 426, 359, 369, 414, 466, 398, 419, 311,
	457, 428, 374, 545, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 600, 599, 598, 597, 596, 595, 594, 593, 0,
	0, 542, 443, 323, 285, 319, 320, 327, 647, 644,
	448, 648, 0, 293, 522, 367, 0, 410, 341, 587,
	588, 0, 639, 241, 242, 243, 244, 245, 246, 247,
	248, 286, 249, 250, 251, 252, 253, 254, 255, 258,
	259, 260, 261, 262, 263, 264, 265, 590, 256, 257,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 0, 0, 0, 287, 288, 289,
	290, 0, 0, 281, 282, 283, 284, 0, 0, 0,
	473, 474, 475, 497, 0, 459, 521, 645, 0, 0,
	0, 0, 0, 0, 0, 571, 583, 617, 0, 627,
	628, 630, 632, 631, 634, 433, 434, 0, 636, 637,
	638, 635, 371, 420, 439, 427, 0, 651, 512, 513,
	652, 623, 397, 0, 527, 560, 549, 633, 515, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 366, 564, 546, 556, 547, 532, 533, 534,
	541, 346, 535, 536, 537, 507, 538, 508, 539, 540,
	0, 563, 514, 429, 381, 581, 580, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	1549, 0, 0, 0, 309, 229, 509, 629, 511, 510,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1547, 0, 0, 0, 0, 0,
	0, 299, 436, 455, 310, 424, 468, 315, 432, 447,
	305, 396, 421, 0, 0, 301, 453, 431, 378, 356,
	357, 300, 0, 415, 334, 348, 331, 394, 0, 452,
	480, 330, 471, 0, 463, 303, 0, 462, 393, 449,
	454, 379, 373, 0, 302, 451, 377, 372, 360, 338,
	496, 361, 362, 352, 405, 370, 406, 353, 383, 382,
	384, 0, 0, 0, 0, 0, 491, 492, 0, 0,
	640, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 622, 0, 0, 626, 0, 465, 0, 0,
	0, 0, 0, 0, 435, 0, 0, 363, 0, 0,
	0, 481, 0, 418, 399, 654, 0, 0, 416, 368,
	450, 407, 456, 437, 464, 412, 408, 294, 438, 333,
	380, 306, 308, 328, 335, 337, 339, 340, 389, 390,
	402, 423, 440, 441, 442, 332, 316, 417, 317, 350,
	318, 295, 324, 322, 325, 425, 326, 297, 403, 446,
	0, 345, 413, 376, 298, 375, 404, 445, 444, 307,
	472, 478, 479, 568, 0, 484, 655, 656, 657, 493,
	0, 409, 498, 499, 500, 502, 503, 504, 505, 569,
	586, 553, 523, 486, 577, 520, 524, 525, 589, 0,
	0, 0, 477, 364, 365, 0, 343, 291, 292, 650,
	329, 395, 591, 624, 625, 516, 0, 578, 517, 526,
	321, 550, 562, 561, 391, 476, 0, 573, 576, 506,
	649, 0, 570, 585, 653, 584, 646, 401, 0, 422,
	582, 529, 0, 574, 548, 0, 575, 544, 579, 0,
	518, 0, 430, 458, 470, 487, 490, 519, 604, 605,
	606, 296, 489, 608, 609, 610, 611, 612, 613, 614,
	607, 461, 551, 528, 554, 469, 531, 530, 0, 0,
	565, 485, 566, 567, 385, 386, 387, 388, 347, 592,
	314, 488, 411, 0, 552, 0, 0, 0, 0, 0,
	0, 0, 0, 557, 558, 555, 658, 0, 615, 616,
	0, 0, 482, 483, 342, 349, 501, 351, 313, 400,
	344, 467, 358, 0, 494, 559, 495, 618, 621, 619,
	620, 392, 354, 355, 426, 359, 369, 414, 466, 398,
	419, 311, 457, 428, 374, 545, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 600, 599, 598, 597, 596, 595, 594,
	593, 0, 0, 542, 443, 323, 285, 319, 320, 327,
	647, 644, 448, 648, 0, 293, 522, 367, 0, 410,
	341, 587, 588, 0, 639, 241, 242, 243, 244, 245,
	246, 247, 248, 286, 249, 250, 251, 252, 253, 254,
	255, 258, 259, 260, 261, 262, 263, 264, 265, 590,
	256, 257, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 0, 0, 0, 287,
	288, 289, 290, 0, 0, 281, 282, 283, 284, 0,
	0, 0, 473, 474, 475, 497, 0, 459, 521, 645,
	0, 0, 0, 0, 0, 0, 0, 571, 583, 617,
	0, 627, 628, 630, 632, 631, 634, 433, 434, 0,
	636, 637, 638, 635, 371, 420, 439, 427, 0, 651,
	512, 513, 652, 623, 397, 0, 527, 560, 549, 633,
	515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 366, 564, 546, 556, 547, 532,
	533, 534, 541, 346, 535, 536, 537, 507, 538, 508,
	539, 540, 0, 563, 514, 429, 381, 581, 580, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	0, 0, 0, 0, 0, 0, 309, 229, 509, 629,
	511, 510, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 436, 455, 310, 424, 468, 315,
	432, 447, 305, 396, 421, 0, 0, 301, 453, 431,
	378, 356, 357, 300, 0, 415, 334, 348, 331, 394,
	0, 452, 480, 330, 471, 0, 463, 303, 0, 462,
	393, 449, 454, 379, 373, 0, 302, 451, 377, 372,
	360, 338, 496, 361, 362, 352, 405, 370, 406, 353,
	383, 382, 384, 0, 0, 0, 0, 0, 491, 492,
	0, 0, 640, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 622, 0, 0, 626, 0, 465,
	0, 0, 0, 0, 0, 0, 435, 0, 0, 363,
	0, 0, 0, 481, 0, 418, 399, 654, 0, 0,
	416, 368, 450, 407, 456, 437, 464, 412, 408, 294,
	438, 333, 380, 306, 308, 328, 335, 337, 339, 340,
	389, 390, 402, 423, 440, 441, 442, 332, 316, 417,
	317, 350, 318, 295, 324, 322, 325, 425, 326, 297,
	403, 446, 0, 345, 413, 376, 298, 375, 404, 445,
	444, 307, 472, 478, 479, 568, 0, 484, 655, 656,
	657, 493, 2480, 409, 498, 499, 500, 502, 503, 504,
	505, 569, 586, 553, 523, 486, 577, 520, 524, 525,
	589, 0, 0, 0, 477, 364, 365, 0, 343, 291,
	292, 650, 329, 395, 591, 624, 625, 516, 0, 578,
	517, 526, 321, 550, 562, 561, 391, 476, 0, 573,
	576, 506, 649, 0, 570, 585, 653, 584, 646, 401,
	0, 422, 582, 529, 0, 574, 548, 0, 575, 544,
	579, 0, 518, 0, 430, 458, 470, 487, 490, 519,
	604, 605, 606, 296, 489, 608, 609, 610, 611, 612,
	613, 614, 607, 461, 551, 528, 554, 469, 531, 530,
	0, 0, 565, 485, 566, 567, 385, 386, 387, 388,
	347, 592, 314, 488, 411, 0, 552, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 558, 555, 658, 0,
	615, 616, 0, 0, 482, 483, 342, 349, 501, 351,
	313, 400, 344, 467, 358, 0, 494, 559, 495, 618,
	621, 619, 620, 392, 354, 355, 426, 359, 369, 414,
	466, 398, 419, 311, 457, 428, 374, 545, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 600, 599, 598, 597, 596,
	595, 594, 593, 974, 0, 542, 443, 323, 285, 319,
	320, 327, 647, 644, 448, 648, 0, 293, 522, 367,
	0, 410, 341, 587, 588, 0, 639, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 590, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 473, 474, 475, 497, 0, 459,
	521, 645, 0, 0, 0, 0, 0, 0, 0, 571,
	583, 617, 0, 627, 628, 630, 632, 631, 634, 433,
	434, 0, 636, 637, 638, 635, 371, 420, 439, 427,
	0, 651, 512, 513, 652, 623, 397, 0, 527, 560,
	549, 633, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 366, 564, 546, 556,
	547, 532, 533, 534, 541, 346, 535, 536, 537, 507,
	538, 508, 539, 540, 0, 563, 514, 429, 381, 581,
	580, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 0, 0, 1549, 0, 0, 0, 309, 229,
	509, 629, 511, 510, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1758, 0,
	0, 0, 0, 0, 0, 299, 436, 455, 310, 424,
	468, 315, 432, 447, 305, 396, 421, 0, 0, 301,
	453, 431, 378, 356, 357, 300, 0, 415, 334, 348,
	331, 394, 0, 452, 480, 330, 471, 0, 463, 303,
	0, 462, 393, 449, 454, 379, 373, 0, 302, 451,
	377, 372, 360, 338, 496, 361, 362, 352, 405, 370,
	406, 353, 383, 382, 384, 0, 0, 0, 0, 0,
	491, 492, 0, 0, 640, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 622, 0, 0, 626,
	0, 465, 0, 0, 0, 0, 0, 0, 435, 0,
	0, 363, 0, 0, 0, 481, 0, 418, 399, 654,
	0, 0, 416, 368, 450, 407, 456, 437, 464, 412,
	408, 294, 438, 333, 380, 306, 308, 328, 335, 337,
	339, 340, 389, 390, 402, 423, 440, 441, 442, 332,
	316, 417, 317, 350, 318, 295, 324, 322, 325, 425,
	326, 297, 403, 446, 0, 345, 413, 376, 298, 375,
	404, 445, 444, 307, 472, 478, 479, 568, 0, 484,
	655, 656, 657, 493, 0, 409, 498, 499, 500, 502,
	503, 504, 505, 569, 586, 553, 523, 486, 577, 520,
	524, 525, 589, 0, 0, 0, 477, 364, 365, 0,
	343, 291, 292, 650, 329, 395, 591, 624, 625, 516,
	0, 578, 517, 526, 321, 550, 562, 561, 391, 476,
	0, 573, 576, 506, 649, 0, 570, 585, 653, 584,
	646, 401, 0, 422, 582, 529, 0, 574, 548, 0,
	575, 544, 579, 0, 518, 0, 430, 458, 470, 487,
	490, 519, 604, 605, 606, 296, 489, 608, 609, 610,
	611, 612, 613, 614, 607, 461, 551, 528, 554, 469,
	531, 530, 0, 0, 565, 485, 566, 567, 385, 386,
	387, 388, 347, 592, 314, 488, 411, 0, 552, 0,
	0, 0, 0, 0, 0, 0, 0, 557, 558, 555,
	658, 0, 615, 616, 0, 0, 482, 483, 342, 349,
	501, 351, 313, 400, 344, 467, 358, 0, 494, 559,
	495, 618, 621, 619, 620, 392, 354, 355, 426, 359,
	369, 414, 466, 398, 419, 311, 457, 428, 374, 545,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 600, 599, 598,
	597, 596, 595, 594, 593, 0, 0, 542, 443, 323,
	285, 319, 320, 327, 647, 644, 448, 648, 0, 293,
	522, 367, 0, 410, 341, 587, 588, 0, 639, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 590, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 473, 474, 475, 497,
	0, 459, 521, 645, 0, 0, 0, 0, 0, 0,
	0, 571, 583, 617, 0, 627, 628, 630, 632, 631,
	634, 433, 434, 0, 636, 637, 638, 635, 371, 420,
	439, 427, 0, 651, 512, 513, 652, 623, 397, 0,
	527, 560, 549, 633, 515, 0, 0, 0, 0, 0,
	2519, 0, 0, 0, 0, 336, 0, 0, 366, 564,
	546, 556, 547, 532, 533, 534, 541, 346, 535, 536,
	537, 507, 538, 508, 539, 540, 0, 563, 514, 429,
	381, 581, 580, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 2521, 0, 0, 0,
	309, 229, 509, 629, 511, 510, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 436, 455,
	310, 424, 468, 315, 432, 447, 305, 396, 421, 0,
	0, 301, 453, 431, 378, 356, 357, 300, 0, 415,
	334, 348, 331, 394, 0, 452, 480, 330, 471, 0,
	463, 303, 0, 462, 393, 449, 454, 379, 373, 0,
	302, 451, 377, 372, 360, 338, 496, 361, 362, 352,
	405, 370, 406, 353, 383, 382, 384, 0, 0, 0,
	0, 0, 491, 492, 0, 0, 640, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 622, 0,
	0, 626, 0, 465, 0, 0, 0, 0, 0, 0,
	435, 0, 0, 363, 0, 0, 0, 481, 0, 418,
	399, 654, 0, 0, 416, 368, 450, 407, 456, 437,
	464, 412, 408, 294, 438, 333, 380, 306, 308, 328,
	335, 337, 339, 340, 389, 390, 402, 423, 440, 441,
	442, 332, 316, 417, 317, 350, 318, 295, 324, 322,
	325, 425, 326, 297, 403, 446, 0, 345, 413, 376,
	298, 375, 404, 445, 444, 307, 472, 478, 479, 568,
	0, 484, 655, 656, 657, 493, 0, 409, 498, 499,
	500, 502, 503, 504, 505, 569, 586, 553, 523, 486,
	577, 520, 524, 525, 589, 0, 0, 0, 477, 364,
	365, 0, 343, 291, 292, 650, 329, 395, 591, 624,
	625, 516, 0, 578, 517, 526, 321, 550, 562, 561,
	391, 476, 0, 573, 576, 506, 649, 0, 570, 585,
	653, 584, 646, 401, 0, 422, 582, 529, 0, 574,
	548, 0, 575, 544, 579, 0, 518, 0, 430, 458,
	470, 487, 490, 519, 604, 605, 606, 296, 489, 608,
	609, 610, 611, 612, 613, 614, 607, 461, 551, 528,
	554, 469, 531, 530, 0, 0, 565, 485, 566, 567,
	385, 386, 387, 388, 347, 592, 314, 488, 411, 0,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 557,
	558, 555, 658, 0, 615, 616, 0, 0, 482, 483,
	342, 349, 501, 351, 313, 400, 344, 467, 358, 0,
	494, 559, 495, 618, 621, 619, 620, 392, 354, 355,
	426, 359, 369, 414, 466, 398, 419, 311, 457, 428,
	374, 545, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 600,
	599, 598, 597, 596, 595, 594, 593, 0, 0, 542,
	443, 323, 285, 319, 320, 327, 647, 644, 448, 648,
	0, 293, 522, 367, 0, 410, 341, 587, 588, 0,
	639, 241, 242, 243, 244, 245, 246, 247, 248, 286,
	249, 250, 251, 252, 253, 254, 255, 258, 259, 260,
	261, 262, 263, 264, 265, 590, 256, 257, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 0, 0, 0, 287, 288, 289, 290, 0,
	0, 281, 282, 283, 284, 0, 0, 0, 473, 474,
	475, 497, 0, 459, 521, 645, 0, 0, 0, 0,
	0, 0, 0, 571, 583, 617, 0, 627, 628, 630,
	632, 631, 634, 433, 434, 0, 636, 637, 638, 635,
	371, 420, 439, 427, 0, 651, 512, 513, 652, 623,
	397, 0, 527, 560, 549, 633, 515, 0, 0, 0,
	0, 0, 2129, 0, 0, 0, 0, 336, 0, 0,
	366, 564, 546, 556, 547, 532, 533, 534, 541, 346,
	535, 536, 537, 507, 538, 508, 539, 540, 0, 563,
	514, 429, 381, 581, 580, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 2130, 0,
	0, 0, 309, 229, 509, 629, 511, 510, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	436, 455, 310, 424, 468, 315, 432, 447, 305, 396,
	421, 0, 0, 301, 453, 431, 378, 356, 357, 300,
	0, 415, 334, 348, 331, 394, 0, 452, 480, 330,
	471, 0, 463, 303, 0, 462, 393, 449, 454, 379,
	373, 0, 302, 451, 377, 372, 360, 338, 496, 361,
	362, 352, 405, 370, 406, 353, 383, 382, 384, 0,
	0, 0, 0, 0, 491, 492, 0, 0, 640, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	622, 0, 0, 626, 0, 465, 0, 0, 0, 0,
	0, 0, 435, 0, 0, 363, 0, 0, 0, 481,
	0, 418, 399, 654, 0, 0, 416, 368, 450, 407,
	456, 437, 464, 412, 408, 294, 438, 333, 380, 306,
	308, 328, 335, 337, 339, 340, 389, 390, 402, 423,
	440, 441, 442, 332, 316, 417, 317, 350, 318, 295,
	324, 322, 325, 425, 326, 297, 403, 446, 0, 345,
	413, 376, 298, 375, 404, 445, 444, 307, 472, 478,
	479, 568, 0, 484, 655, 656, 657, 493, 0, 409,
	498, 499, 500, 502, 503, 504, 505, 569, 586, 553,
	523, 486, 577, 520, 524, 525, 589, 0, 0, 0,
	477, 364, 365, 0, 343, 291, 292, 650, 329, 395,
	591, 624, 625, 516, 0, 578, 517, 526, 321, 550,
	562, 561, 391, 476, 0, 573, 576, 506, 649, 0,
	570, 585, 653, 584, 646, 401, 0, 422, 582, 529,
	0, 574, 548, 0, 575, 544, 579, 0, 518, 0,
	430, 458, 470, 487, 490, 519, 604, 605, 606, 296,
	489, 608, 609, 610, 611, 612, 613, 614, 607, 461,
	551, 528, 554, 469, 531, 530, 0, 0, 565, 485,
	566, 567, 385, 386, 387, 388, 347, 592, 314, 488,
	411, 0, 552, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 558, 555, 658, 0, 615, 616, 0, 0,
	482, 483, 342, 349, 501, 351, 313, 400, 344, 467,
	358, 0, 494, 559, 495, 618, 621, 619, 620, 392,
	354, 355, 426, 359, 369, 414, 466, 398, 419, 311,
	457, 428, 374, 545, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 600, 599, 598, 597, 596, 595, 594, 593, 0,
	0, 542, 443, 323, 285, 319, 320, 327, 647, 644,
	448, 648, 0, 293, 522, 367, 0, 410, 341, 587,
	588, 0, 639, 241, 242, 243, 244, 245, 246, 247,
	248, 286, 249, 250, 251, 252, 253, 254, 255, 258,
	259, 260, 261, 262, 263, 264, 265, 590, 256, 257,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 0, 0, 0, 287, 288, 289,
	290, 0, 0, 281, 282, 283, 284, 0, 0, 0,
	473, 474, 475, 497, 0, 459, 521, 645, 0, 0,
	0, 0, 0, 0, 0, 571, 583, 617, 0, 627,
	628, 630, 632, 631, 634, 433, 434, 0, 636, 637,
	638, 635, 371, 420, 439, 427, 0, 651, 512, 513,
	652, 623, 397, 0, 527, 560, 549, 633, 515, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 366, 564, 546, 556, 547, 532, 533, 534,
	541, 346, 535, 536, 537, 507, 538, 508, 539, 540,
	0, 563, 514, 429, 381, 581, 580, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	3176, 3178, 0, 0, 309, 229, 509, 629, 511, 510,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 436, 455, 310, 424, 468, 315, 432, 447,
	305, 396, 421, 0, 0, 301, 453, 431, 378, 356,
	357, 300, 0, 415, 334, 348, 331, 394, 0, 452,
	480, 330, 471, 0, 463, 303, 0, 462, 393, 449,
	454, 379, 373, 0, 302, 451, 377, 372, 360, 338,
	496, 361, 362, 352, 405, 370, 406, 353, 383, 382,
	384, 0, 0, 0, 0, 0, 491, 492, 0, 0,
	640, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 622, 0, 0, 626, 0, 465, 0, 0,
	0, 0, 0, 0, 435, 0, 0, 363, 0, 0,
	0, 481, 0, 418, 399, 654, 0, 0, 416, 368,
	450, 407, 456, 437, 464, 412, 408, 294, 438, 333,
	380, 306, 308, 328, 335, 337, 339, 340, 389, 390,
	402, 423, 440, 441, 442, 332, 316, 417, 317, 350,
	318, 295, 324, 322, 325, 425, 326, 297, 403, 446,
	0, 345, 413, 376, 298, 375, 404, 445, 444, 307,
	472, 478, 479, 568, 0, 484, 655, 656, 657, 493,
	0, 409, 498, 499, 500, 502, 503, 504, 505, 569,
	586, 553, 523, 486, 577, 520, 524, 525, 589, 0,
	0, 0, 477, 364, 365, 0, 343, 291, 292, 650,
	329, 395, 591, 624, 625, 516, 0, 578, 517, 526,
	321, 550, 562, 561, 391, 476, 0, 573, 576, 506,
	649, 0, 570, 585, 653, 584, 646, 401, 0, 422,
	582, 529, 0, 574, 548, 0, 575, 544, 579, 0,
	518, 0, 430, 458, 470, 487, 490, 519, 604, 605,
	606, 296, 489, 608, 609, 610, 611, 612, 613, 614,
	607, 461, 551, 528, 554, 469, 531, 530, 0, 0,
	565, 485, 566, 567, 385, 386, 387, 388, 347, 592,
	314, 488, 411, 0, 552, 0, 0, 0, 0, 0,
	0, 0, 0, 557, 558, 555, 658, 0, 615, 616,
	0, 0, 482, 483, 342, 349, 501, 351, 313, 400,
	344, 467, 358, 0, 494, 559, 495, 618, 621, 619,
	620, 392, 354, 355, 426, 359, 369, 414, 466, 398,
	419, 311, 457, 428, 374, 545, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 600, 599, 598, 597, 596, 595, 594,
	593, 0, 0, 542, 443, 323, 285, 319, 320, 327,
	647, 644, 448, 648, 0, 293, 522, 367, 0, 410,
	341, 587, 588, 0, 639, 241, 242, 243, 244, 245,
	246, 247, 248, 286, 249, 250, 251, 252, 253, 254,
	255, 258, 259, 260, 261, 262, 263, 264, 265, 590,
	256, 257, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 0, 0, 0, 287,
	288, 289, 290, 0, 0, 281, 282, 283, 284, 0,
	0, 0, 473, 474, 475, 497, 0, 459, 521, 645,
	0, 0, 0, 0, 0, 0, 0, 571, 583, 617,
	0, 627, 628, 630, 632, 631, 634, 433, 434, 0,
	636, 637, 638, 635, 371, 420, 439, 427, 0, 651,
	512, 513, 652, 623, 397, 0, 527, 560, 549, 633,
	515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 2542, 0, 366, 564, 546, 556, 547, 532,
	533, 534, 541, 346, 535, 536, 537, 507, 538, 508,
	539, 540, 0, 563, 514, 429, 381, 581, 580, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	0, 0, 1549, 0, 0, 0, 309, 229, 509, 629,
	511, 510, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 436, 455, 310, 424, 468, 315,
	432, 447, 305, 396, 421, 0, 0, 301, 453, 431,
	378, 356, 357, 300, 0, 415, 334, 348, 331, 394,
	0, 452, 480, 330, 471, 0, 463, 303, 0, 462,
	393, 449, 454, 379, 373, 0, 302, 451, 377, 372,
	360, 338, 496, 361, 362, 352, 405, 370, 406, 353,
	383, 382, 384, 0, 0, 0, 0, 0, 491, 492,
	0, 0, 640, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 622, 0, 0, 626, 0, 465,
	0, 0, 0, 0, 0, 0, 435, 0, 0, 363,
	0, 0, 0, 481, 0, 418, 399, 654, 0, 0,
	416, 368, 450, 407, 456, 437, 464, 412, 408, 294,
	438, 333, 380, 306, 308, 328, 335, 337, 339, 340,
	389, 390, 402, 423, 440, 441, 442, 332, 316, 417,
	317, 350, 318, 295, 324, 322, 325, 425, 326, 297,
	403, 446, 0, 345, 413, 376, 298, 375, 404, 445,
	444, 307, 472, 478, 479, 568, 0, 484, 655, 656,
	657, 493, 0, 409, 498, 499, 500, 502, 503, 504,
	505, 569, 586, 553, 523, 486, 577, 520, 524, 525,
	589, 0, 0, 0, 477, 364, 365, 0, 343, 291,
	292, 650, 329, 395, 591, 624, 625, 516, 0, 578,
	517, 526, 321, 550, 562, 561, 391, 476, 0, 573,
	576, 506, 649, 0, 570, 585, 653, 584, 646, 401,
	0, 422, 582, 529, 0, 574, 548, 0, 575, 544,
	579, 0, 518, 0, 430, 458, 470, 487, 490, 519,
	604, 605, 606, 296, 489, 608, 609, 610, 611, 612,
	613, 614, 607, 461, 551, 528, 554, 469, 531, 530,
	0, 0, 565, 485, 566, 567, 385, 386, 387, 388,
	347, 592, 314, 488, 411, 0, 552, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 558, 555, 658, 0,
	615, 616, 0, 0, 482, 483, 342, 349, 501, 351,
	313, 400, 344, 467, 358, 0, 494, 559, 495, 618,
	621, 619, 620, 392, 354, 355, 426, 359, 369, 414,
	466, 398, 419, 311, 457, 428, 374, 545, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 600, 599, 598, 597, 596,
	595, 594, 593, 0, 0, 542, 443, 323, 285, 319,
	320, 327, 647, 644, 448, 648, 0, 293, 522, 367,
	0, 410, 341, 587, 588, 0, 639, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 590, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 473, 474, 475, 497, 0, 459,
	521, 645, 0, 0, 0, 0, 0, 0, 0, 571,
	583, 617, 0, 627, 628, 630, 632, 631, 634, 433,
	434, 0, 636, 637, 638, 635, 371, 420, 439, 427,
	0, 651, 512, 513, 652, 623, 397, 0, 527, 560,
	549, 633, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 665, 336, 0, 0, 366, 564, 546, 556,
	547, 532, 533, 534, 541, 346, 535, 536, 537, 507,
	538, 508, 539, 540, 0, 563, 514, 429, 381, 581,
	580, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 0, 0, 0, 0, 0, 0, 309, 229,
	509, 629, 511, 510, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 436, 455, 310, 424,
	468, 315, 432, 447, 305, 396, 421, 0, 0, 301,
	453, 431, 378, 356, 357, 300, 0, 415, 334, 348,
	331, 394, 0, 452, 480, 330, 471, 0, 463, 303,
	0, 462, 393, 449, 454, 379, 373, 0, 302, 451,
	377, 372, 360, 338, 496, 361, 362, 352, 405, 370,
	406, 353, 383, 382, 384, 0, 0, 0, 0, 0,
	491, 492, 0, 0, 640, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 622, 0, 0, 626,
	0, 465, 0, 664, 0, 0, 0, 0, 435, 0,
	0, 363, 0, 0, 0, 481, 0, 418, 399, 654,
	0, 0, 416, 368, 450, 407, 456, 437, 464, 412,
	408, 294, 438, 333, 380, 306, 308, 328, 335, 337,
	339, 340, 389, 390, 402, 423, 440, 441, 442, 332,
	316, 417, 317, 350, 318, 295, 324, 322, 325, 425,
	326, 297, 403, 446, 0, 345, 413, 376, 298, 375,
	404, 445, 444, 307, 472, 478, 479, 568, 0, 484,
	655, 656, 657, 493, 0, 409, 498, 499, 500, 502,
	503, 504, 505, 569, 586, 553, 523, 486, 577, 520,
	524, 525, 589, 0, 0, 0, 477, 364, 365, 0,
	343, 291, 292, 650, 329, 395, 591, 624, 625, 516,
	0, 578, 517, 526, 321, 550, 562, 561, 391, 476,
	0, 573, 576, 506, 649, 0, 570, 585, 653, 584,
	646, 401, 0, 422, 582, 529, 0, 574, 548, 0,
	575, 544, 579, 0, 518, 0, 430, 458, 470, 487,
	490, 519, 604, 605, 606, 296, 489, 608, 609, 610,
	611, 612, 613, 614, 607, 461, 551, 528, 554, 469,
	531, 530, 0, 0, 565, 485, 566, 567, 385, 386,
	387, 388, 347, 592, 314, 488, 411, 0, 552, 0,
	0, 0, 0, 0, 0, 0, 0, 557, 558, 555,
	658, 0, 615, 616, 0, 0, 482, 483, 342, 349,
	501, 351, 313, 400, 344, 467, 358, 0, 494, 559,
	495, 618, 621, 619, 620, 392, 354, 355, 426, 359,
	369, 414, 466, 398, 419, 311, 457, 428, 374, 545,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 600, 599, 598,
	597, 596, 595, 594, 593, 0, 0, 542, 443, 323,
	285, 319, 320, 327, 647, 644, 448, 648, 0, 293,
	522, 367, 0, 410, 341, 587, 588, 0, 639, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 590, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 473, 474, 475, 497,
	0, 459, 521, 645, 0, 0, 0, 0, 0, 0,
	0, 571, 583, 617, 0, 627, 628, 630, 632, 631,
	634, 433, 434, 0, 636, 637, 638, 635, 371, 420,
	439, 427, 0, 651, 512, 513, 652, 623, 397, 0,
	527, 560, 549, 633, 515, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 366, 564,
	546, 556, 547, 532, 533, 534, 541, 346, 535, 536,
	537, 507, 538, 508, 539, 540, 0, 563, 514, 429,
	381, 581, 580, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 848, 0, 0, 0, 0, 0,
	309, 229, 509, 629, 511, 510, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 436, 455,
	310, 424, 468, 315, 432, 447, 305, 396, 421, 0,
	0, 301, 453, 431, 378, 356, 357, 300, 0, 415,
	334, 348, 331, 394, 0, 452, 480, 330, 471, 0,
	463, 303, 0, 462, 393, 449, 454, 379, 373, 0,
	302, 451, 377, 372, 360, 338, 496, 361, 362, 352,
	405, 370, 406, 353, 383, 382, 384, 0, 0, 0,
	0, 0, 491, 492, 0, 0, 640, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 622, 0,
	0, 626, 0, 465, 0, 0, 0, 0, 0, 0,
	435, 0, 0, 363, 0, 0, 0, 481, 0, 418,
	399, 654, 0, 0, 416, 368, 450, 407, 456, 437,
	464, 412, 408, 294, 438, 333, 380, 306, 308, 328,
	335, 337, 339, 340, 389, 390, 402, 423, 440, 441,
	442, 332, 316, 417, 317, 350, 318, 295, 324, 322,
	325, 425, 326, 297, 403, 446, 0, 345, 413, 376,
	298, 375, 404, 445, 444, 307, 472, 478, 479, 568,
	0, 484, 655, 656, 657, 493, 0, 409, 498, 499,
	500, 502, 503, 504, 505, 569, 586, 553, 523, 486,
	577, 520, 524, 525, 589, 0, 0, 0, 477, 364,
	365, 0, 343, 291, 292, 650, 329, 395, 591, 624,
	625, 516, 0, 578, 517, 526, 321, 550, 562, 561,
	391, 476, 0, 573, 576, 506, 649, 0, 570, 585,
	653, 584, 646, 401, 0, 422, 582, 529, 0, 574,
	548, 0, 575, 544, 579, 0, 518, 0, 430, 458,
	470, 487, 490, 519, 604, 605, 606, 296, 489, 608,
	609, 610, 611, 612, 613, 614, 607, 461, 551, 528,
	554, 469, 531, 530, 0, 0, 565, 485, 566, 567,
	385, 386, 387, 388, 347, 592, 314, 488, 411, 0,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 557,
	558, 555, 658, 0, 615, 616, 0, 0, 482, 483,
	342, 349, 501, 351, 313, 400, 344, 467, 358, 0,
	494, 559, 495, 618, 621, 619, 620, 392, 354, 355,
	426, 359, 369, 414, 466, 398, 419, 311, 457, 428,
	374, 545, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 600,
	599, 598, 597, 596, 595, 594, 593, 0, 0, 542,
	443, 323, 285, 319, 320, 327, 647, 644, 448, 648,
	0, 293, 522, 367, 0, 410, 341, 587, 588, 0,
	639, 241, 242, 243, 244, 245, 246, 247, 248, 286,
	249, 250, 251, 252, 253, 254, 255, 258, 259, 260,
	261, 262, 263, 264, 265, 590, 256, 257, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 0, 0, 0, 287, 288, 289, 290, 0,
	0, 281, 282, 283, 284, 0, 0, 0, 473, 474,
	475, 497, 0, 459, 521, 645, 0, 0, 0, 0,
	0, 0, 0, 571, 583, 617, 0, 627, 628, 630,
	632, 631, 634, 433, 434, 0, 636, 637, 638, 635,
	371, 420, 439, 427, 0, 651, 512, 513, 652, 623,
	397, 0, 527, 560, 549, 633, 515, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 0, 0,
	366, 564, 546, 556, 547, 532, 533, 534, 541, 346,
	535, 536, 537, 507, 538, 508, 539, 540, 0, 563,
	514, 429, 381, 581, 580, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 4001, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 309, 229, 509, 629, 511, 510, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	436, 455, 310, 424, 468, 315, 432, 447, 305, 396,
	421, 0, 0, 301, 453, 431, 378, 356, 357, 300,
	0, 415, 334, 348, 331, 394, 0, 452, 480, 330,
	471, 0, 463, 303, 0, 462, 393, 449, 454, 379,
	373, 0, 302, 451, 377, 372, 360, 338, 496, 361,
	362, 352, 405, 370, 406, 353, 383, 382, 384, 0,
	0, 0, 0, 0, 491, 492, 0, 0, 640, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	622, 0, 0, 626, 0, 465, 0, 0, 0, 0,
	0, 0, 435, 0, 0, 363, 0, 0, 0, 481,
	0, 418, 399, 654, 0, 0, 416, 368, 450, 407,
	456, 437, 464, 412, 408, 294, 438, 333, 380, 306,
	308, 328, 335, 337, 339, 340, 389, 390, 402, 423,
	440, 441, 442, 332, 316, 417, 317, 350, 318, 295,
	324, 322, 325, 425, 326, 297, 403, 446, 0, 345,
	413, 376, 298, 375, 404, 445, 444, 307, 472, 478,
	479, 568, 0, 484, 655, 656, 657, 493, 0, 409,
	498, 499, 500, 502, 503, 504, 505, 569, 586, 553,
	523, 486, 577, 520, 524, 525, 589, 0, 0, 0,
	477, 364, 365, 0, 343, 291, 292, 650, 329, 395,
	591, 624, 625, 516, 0, 578, 517, 526, 321, 550,
	562, 561, 391, 476, 0, 573, 576, 506, 649, 0,
	570, 585, 653, 584, 646, 401, 0, 422, 582, 529,
	0, 574, 548, 0, 575, 544, 579, 0, 518, 0,
	430, 458, 470, 487, 490, 519, 604, 605, 606, 296,
	489, 608, 609, 610, 611, 612, 613, 614, 607, 461,
	551, 528, 554, 469, 531, 530, 0, 0, 565, 485,
	566, 567, 385, 386, 387, 388, 347, 592, 314, 488,
	411, 0, 552, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 558, 555, 658, 0, 615, 616, 0, 0,
	482, 483, 342, 349, 501, 351, 313, 400, 344, 467,
	358, 0, 494, 559, 495, 618, 621, 619, 620, 392,
	354, 355, 426, 359, 369, 414, 466, 398, 419, 311,
	457, 428, 374, 545, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 600, 599, 598, 597, 596, 595, 594, 593, 0,
	0, 542, 443, 323, 285, 319, 320, 327, 647, 644,
	448, 648, 0, 293, 522, 367, 0, 410, 341, 587,
	588, 0, 639, 241, 242, 243, 244, 245, 246, 247,
	248, 286, 249, 250, 251, 252, 253, 254, 255, 258,
	259, 260, 261, 262, 263, 264, 265, 590, 256, 257,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 0, 0, 0, 287, 288, 289,
	290, 0, 0, 281, 282, 283, 284, 0, 0, 0,
	473, 474, 475, 497, 0, 459, 521, 645, 0, 0,
	0, 0, 0, 0, 0, 571, 583, 617, 0, 627,
	628, 630, 632, 631, 634, 433, 434, 0, 636, 637,
	638, 635, 371, 420, 439, 427, 0, 651, 512, 513,
	652, 623, 397, 0, 527, 560, 549, 633, 515, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 366, 564, 546, 556, 547, 532, 533, 534,
	541, 346, 535, 536, 537, 507, 538, 508, 539, 540,
	0, 563, 514, 429, 381, 581, 580, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	3769, 0, 0, 0, 309, 229, 509, 629, 511, 510,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 436, 455, 310, 424, 468, 315, 432, 447,
	305, 396, 421, 0, 0, 301, 453, 431, 378, 356,
	357, 300, 0, 415, 334, 348, 331, 394, 0, 452,
	480, 330, 471, 0, 463, 303, 0, 462, 393, 449,
	454, 379, 373, 0, 302, 451, 377, 372, 360, 338,
	496, 361, 362, 352, 405, 370, 406, 353, 383, 382,
	384, 0, 0, 0, 0, 0, 491, 492, 0, 0,
	640, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 622, 0, 0, 626, 0, 465, 0, 0,
	0, 0, 0, 0, 435, 0, 0, 363, 0, 0,
	0, 481, 0, 418, 399, 654, 0, 0, 416, 368,
	450, 407, 456, 437, 464, 412, 408, 294, 438, 333,
	380, 306, 308, 328, 335, 337, 339, 340, 389, 390,
	402, 423, 440, 441, 442, 332, 316, 417, 317, 350,
	318, 295, 324, 322, 325, 425, 326, 297, 403, 446,
	0, 345, 413, 376, 298, 375, 404, 445, 444, 307,
	472, 478, 479, 568, 0, 484, 655, 656, 657, 493,
	0, 409, 498, 499, 500, 502, 503, 504, 505, 569,
	586, 553, 523, 486, 577, 520, 524, 525, 589, 0,
	0, 0, 477, 364, 365, 0, 343, 291, 292, 650,
	329, 395, 591, 624, 625, 516, 0, 578, 517, 526,
	321, 550, 562, 561, 391, 476, 0, 573, 576, 506,
	649, 0, 570, 585, 653, 584, 646, 401, 0, 422,
	582, 529, 0, 574, 548, 0, 575, 544, 579, 0,
	518, 0, 430, 458, 470, 487, 490, 519, 604, 605,
	606, 296, 489, 608, 609, 610, 611, 612, 613, 614,
	607, 461, 551, 528, 554, 469, 531, 530, 0, 0,
	565, 485, 566, 567, 385, 386, 387, 388, 347, 592,
	314, 488, 411, 0, 552, 0, 0, 0, 0, 0,
	0, 0, 0, 557, 558, 555, 658, 0, 615, 616,
	0, 0, 482, 483, 342, 349, 501, 351, 313, 400,
	344, 467, 358, 0, 494, 559, 495, 618, 621, 619,
	620, 392, 354, 355, 426, 359, 369, 414, 466, 398,
	419, 311, 457, 428, 374, 545, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 600, 599, 598, 597, 596, 595, 594,
	593, 0, 0, 542, 443, 323, 285, 319, 320, 327,
	647, 644, 448, 648, 0, 293, 522, 367, 0, 410,
	341, 587, 588, 0, 639, 241, 242, 243, 244, 245,
	246, 247, 248, 286, 249, 250, 251, 252, 253, 254,
	255, 258, 259, 260, 261, 262, 263, 264, 265, 590,
	256, 257, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 0, 0, 0, 287,
	288, 289, 290, 0, 0, 281, 282, 283, 284, 0,
	0, 0, 473, 474, 475, 497, 0, 459, 521, 645,
	0, 0, 0, 0, 0, 0, 0, 571, 583, 617,
	0, 627, 628, 630, 632, 631, 634, 433, 434, 0,
	636, 637, 638, 635, 371, 420, 439, 427, 0, 651,
	512, 513, 652, 623, 397, 0, 527, 560, 549, 633,
	515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 366, 564, 546, 556, 547, 532,
	533, 534, 541, 346, 535, 536, 537, 507, 538, 508,
	539, 540, 0, 563, 514, 429, 381, 581, 580, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	0, 0, 0, 0, 0, 0, 309, 229, 509, 629,
	511, 510, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 436, 455, 310, 424, 468, 315,
	432, 447, 305, 396, 421, 0, 0, 301, 453, 431,
	378, 356, 357, 300, 0, 415, 334, 348, 331, 394,
	0, 452, 480, 330, 471, 0, 463, 303, 0, 462,
	393, 449, 454, 379, 373, 0, 302, 451, 377, 372,
	360, 338, 496, 361, 362, 352, 405, 370, 406, 353,
	383, 382, 384, 0, 0, 0, 0, 0, 491, 492,
	0, 0, 640, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 622, 0, 0, 626, 0, 465,
	0, 0, 0, 3902, 0, 0, 435, 0, 0, 363,
	0, 0, 0, 481, 0, 418, 399, 654, 0, 0,
	416, 368, 450, 407, 456, 437, 464, 412, 408, 294,
	438, 333, 380, 306, 308, 328, 335, 337, 339, 340,
	389, 390, 402, 423, 440, 441, 442, 332, 316, 417,
	317, 350, 318, 295, 324, 322, 325, 425, 326, 297,
	403, 446, 0, 345, 413, 376, 298, 375, 404, 445,
	444, 307, 472, 478, 479, 568, 0, 484, 655, 656,
	657, 493, 0, 409, 498, 499, 500, 502, 503, 504,
	505, 569, 586, 553, 523, 486, 577, 520, 524, 525,
	589, 0, 0, 0, 477, 364, 365, 0, 343, 291,
	292, 650, 329, 395, 591, 624, 625, 516, 0, 578,
	517, 526, 321, 550, 562, 561, 391, 476, 0, 573,
	576, 506, 649, 0, 570, 585, 653, 584, 646, 401,
	0, 422, 582, 529, 0, 574, 548, 0, 575, 544,
	579, 0, 518, 0, 430, 458, 470, 487, 490, 519,
	604, 605, 606, 296, 489, 608, 609, 610, 611, 612,
	613, 614, 607, 461, 551, 528, 554, 469, 531, 530,
	0, 0, 565, 485, 566, 567, 385, 386, 387, 388,
	347, 592, 314, 488, 411, 0, 552, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 558, 555, 658, 0,
	615, 616, 0, 0, 482, 483, 342, 349, 501, 351,
	313, 400, 344, 467, 358, 0, 494, 559, 495, 618,
	621, 619, 620, 392, 354, 355, 426, 359, 369, 414,
	466, 398, 419, 311, 457, 428, 374, 545, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 600, 599, 598, 597, 596,
	595, 594, 593, 0, 0, 542, 443, 323, 285, 319,
	320, 327, 647, 644, 448, 648, 0, 293, 522, 367,
	0, 410, 341, 587, 588, 0, 639, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 590, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 473, 474, 475, 497, 0, 459,
	521, 645, 0, 0, 0, 0, 0, 0, 0, 571,
	583, 617, 0, 627, 628, 630, 632, 631, 634, 433,
	434, 0, 636, 637, 638, 635, 371, 420, 439, 427,
	0, 651, 512, 513, 652, 623, 397, 0, 527, 560,
	549, 633, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 366, 564, 546, 556,
	547, 532, 533, 534, 541, 346, 535, 536, 537, 507,
	538, 508, 539, 540, 0, 563, 514, 429, 381, 581,
	580, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1772, 0,
	0, 228, 0, 0, 0, 0, 0, 0, 309, 229,
	509, 629, 511, 510, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 436, 455, 310, 424,
	468, 315, 432, 447, 305, 396, 421, 0, 0, 301,
	453, 431, 378, 356, 357, 300, 0, 415, 334, 348,
	331, 394, 0, 452, 480, 330, 471, 0, 463, 303,
	0, 462, 393, 449, 454, 379, 373, 0, 302, 451,
	377, 372, 360, 338, 496, 361, 362, 352, 405, 370,
	406, 353, 383, 382, 384, 0, 0, 0, 0, 0,
	491, 492, 0, 0, 640, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 622, 0, 0, 626,
	0, 465, 0, 0, 0, 0, 0, 0, 435, 0,
	0, 363, 0, 0, 0, 481, 0, 418, 399, 654,
	0, 0, 416, 368, 450, 407, 456, 437, 464, 412,
	408, 294, 438, 333, 380, 306, 308, 328, 335, 337,
	339, 340, 389, 390, 402, 423, 440, 441, 442, 332,
	316, 417, 317, 350, 318, 295, 324, 322, 325, 425,
	326, 297, 403, 446, 0, 345, 413, 376, 298, 375,
	404, 445, 444, 307, 472, 478, 479, 568, 0, 484,
	655, 656, 657, 493, 0, 409, 498, 499, 500, 502,
	503, 504, 505, 569, 586, 553, 523, 486, 577, 520,
	524, 525, 589, 0, 0, 0, 477, 364, 365, 0,
	343, 291, 292, 650, 329, 395, 591, 624, 625, 516,
	0, 578, 517, 526, 321, 550, 562, 561, 391, 476,
	0, 573, 576, 506, 649, 0, 570, 585, 653, 584,
	646, 401, 0, 422, 582, 529, 0, 574, 548, 0,
	575, 544, 579, 0, 518, 0, 430, 458, 470, 487,
	490, 519, 604, 605, 606, 296, 489, 608, 609, 610,
	611, 612, 613, 614, 607, 461, 551, 528, 554, 469,
	531, 530, 0, 0, 565, 485, 566, 567, 385, 386,
	387, 388, 347, 592, 314, 488, 411, 0, 552, 0,
	0, 0, 0, 0, 0, 0, 0, 557, 558, 555,
	658, 0, 615, 616, 0, 0, 482, 483, 342, 349,
	501, 351, 313, 400, 344, 467, 358, 0, 494, 559,
	495, 618, 621, 619, 620, 392, 354, 355, 426, 359,
	369, 414, 466, 398, 419, 311, 457, 428, 374, 545,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 600, 599, 598,
	597, 596, 595, 594, 593, 0, 0, 542, 443, 323,
	285, 319, 320, 327, 647, 644, 448, 648, 0, 293,
	522, 367, 0, 410, 341, 587, 588, 0, 639, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 590, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 473, 474, 475, 497,
	0, 459, 521, 645, 0, 0, 0, 0, 0, 0,
	0, 571, 583, 617, 0, 627, 628, 630, 632, 631,
	634, 433, 434, 0, 636, 637, 638, 635, 371, 420,
	439, 427, 0, 651, 512, 513, 652, 623, 397, 0,
	527, 560, 549, 633, 515, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 366, 564,
	546, 556, 547, 532, 533, 534, 541, 346, 535, 536,
	537, 507, 538, 508, 539, 540, 0, 563, 514, 429,
	381, 581, 580, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3784, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 509, 629, 511, 510, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 436, 455,
	310, 424, 468, 315, 432, 447, 305, 396, 421, 0,
	0, 301, 453, 431, 378, 356, 357, 300, 0, 415,
	334, 348, 331, 394, 0, 452, 480, 330, 471, 0,
	463, 303, 0, 462, 393, 449, 454, 379, 373, 0,
	302, 451, 377, 372, 360, 338, 496, 361, 362, 352,
	405, 370, 406, 353, 383, 382, 384, 0, 0, 0,
	0, 0, 491, 492, 0, 0, 640, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 622, 0,
	0, 626, 0, 465, 0, 0, 0, 0, 0, 0,
	435, 0, 0, 363, 0, 0, 0, 481, 0, 418,
	399, 654, 0, 0, 416, 368, 450, 407, 456, 437,
	464, 412, 408, 294, 438, 333, 380, 306, 308, 328,
	335, 337, 339, 340, 389, 390, 402, 423, 440, 441,
	442, 332, 316, 417, 317, 350, 318, 295, 324, 322,
	325, 425, 326, 297, 403, 446, 0, 345, 413, 376,
	298, 375, 404, 445, 444, 307, 472, 478, 479, 568,
	0, 484, 655, 656, 657, 493, 0, 409, 498, 499,
	500, 502, 503, 504, 505, 569, 586, 553, 523, 486,
	577, 520, 524, 525, 589, 0, 0, 0, 477, 364,
	365, 0, 343, 291, 292, 650, 329, 395, 591, 624,
	625, 516, 0, 578, 517, 526, 321, 550, 562, 561,
	391, 476, 0, 573, 576, 506, 649, 0, 570, 585,
	653, 584, 646, 401, 0, 422, 582, 529, 0, 574,
	548, 0, 575, 544, 579, 0, 518, 0, 430, 458,
	470, 487, 490, 519, 604, 605, 606, 296, 489, 608,
	609, 610, 611, 612, 613, 614, 607, 461, 551, 528,
	554, 469, 531, 530, 0, 0, 565, 485, 566, 567,
	385, 386, 387, 388, 347, 592, 314, 488, 411, 0,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 557,
	558, 555, 658, 0, 615, 616, 0, 0, 482, 483,
	342, 349, 501, 351, 313, 400, 344, 467, 358, 0,
	494, 559, 495, 618, 621, 619, 620, 392, 354, 355,
	426, 359, 369, 414, 466, 398, 419, 311, 457, 428,
	374, 545, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 600,
	599, 598, 597, 596, 595, 594, 593, 0, 0, 542,
	443, 323, 285, 319, 320, 327, 647, 644, 448, 648,
	0, 293, 522, 367, 0, 410, 341, 587, 588, 0,
	639, 241, 242, 243, 244, 245, 246, 247, 248, 286,
	249, 250, 251, 252, 253, 254, 255, 258, 259, 260,
	261, 262, 263, 264, 265, 590, 256, 257, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 0, 0, 0, 287, 288, 289, 290, 0,
	0, 281, 282, 283, 284, 0, 0, 0, 473, 474,
	475, 497, 0, 459, 521, 645, 0, 0, 0, 0,
	0, 0, 0, 571, 583, 617, 0, 627, 628, 630,
	632, 631, 634, 433, 434, 0, 636, 637, 638, 635,
	371, 420, 439, 427, 0, 651, 512, 513, 652, 623,
	397, 0, 527, 560, 549, 633, 515, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 0, 0,
	366, 564, 546, 556, 547, 532, 533, 534, 541, 346,
	535, 536, 537, 507, 538, 508, 539, 540, 0, 563,
	514, 429, 381, 581, 580, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 309, 229, 509, 629, 511, 510, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	436, 455, 310, 424, 468, 315, 432, 447, 305, 396,
	421, 0, 0, 301, 453, 431, 378, 356, 357, 300,
	0, 415, 334, 348, 331, 394, 0, 452, 480, 330,
	471, 0, 463, 303, 0, 462, 393, 449, 454, 379,
	373, 0, 302, 451, 377, 372, 360, 338, 496, 361,
	362, 352, 405, 370, 406, 353, 383, 382, 384, 0,
	0, 0, 0, 0, 491, 492, 0, 0, 640, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	622, 0, 0, 626, 0, 465, 0, 0, 0, 3696,
	0, 0, 435, 0, 0, 363, 0, 0, 0, 481,
	0, 418, 399, 654, 0, 0, 416, 368, 450, 407,
	456, 437, 464, 412, 408, 294, 438, 333, 380, 306,
	308, 328, 335, 337, 339, 340, 389, 390, 402, 423,
	440, 441, 442, 332, 316, 417, 317, 350, 318, 295,
	324, 322, 325, 425, 326, 297, 403, 446, 0, 345,
	413, 376, 298, 375, 404, 445, 444, 307, 472, 478,
	479, 568, 0, 484, 655, 656, 657, 493, 0, 409,
	498, 499, 500, 502, 503, 504, 505, 569, 586, 553,
	523, 486, 577, 520, 524, 525, 589, 0, 0, 0,
	477, 364, 365, 0, 343, 291, 292, 650, 329, 395,
	591, 624, 625, 516, 0, 578, 517, 526, 321, 550,
	562, 561, 391, 476, 0, 573, 576, 506, 649, 0,
	570, 585, 653, 584, 646, 401, 0, 422, 582, 529,
	0, 574, 548, 0, 575, 544, 579, 0, 518, 0,
	430, 458, 470, 487, 490, 519, 604, 605, 606, 296,
	489, 608, 609, 610, 611, 612, 613, 614, 607, 461,
	551, 528, 554, 469, 531, 530, 0, 0, 565, 485,
	566, 567, 385, 386, 387, 388, 347, 592, 314, 488,
	411, 0, 552, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 558, 555, 658, 0, 615, 616, 0, 0,
	482, 483, 342, 349, 501, 351, 313, 400, 344, 467,
	358, 0, 494, 559, 495, 618, 621, 619, 620, 392,
	354, 355, 426, 359, 369, 414, 466, 398, 419, 311,
	457, 428, 374, 545, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 600, 599, 598, 597, 596, 595, 594, 593, 0,
	0, 542, 443, 323, 285, 319, 320, 327, 647, 644,
	448, 648, 0, 293, 522, 367, 0, 410, 341, 587,
	588, 0, 639, 241, 242, 243, 244, 245, 246, 247,
	248, 286, 249, 250, 251, 252, 253, 254, 255, 258,
	259, 260, 261, 262, 263, 264, 265, 590, 256, 257,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 0, 0, 0, 287, 288, 289,
	290, 0, 0, 281, 282, 283, 284, 0, 0, 0,
	473, 474, 475, 497, 0, 459, 521, 645, 0, 0,
	0, 0, 0, 0, 0, 571, 583, 617, 0, 627,
	628, 630, 632, 631, 634, 433, 434, 0, 636, 637,
	638, 635, 371, 420, 439, 427, 0, 651, 512, 513,
	652, 623, 397, 0, 527, 560, 549, 633, 515, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 366, 564, 546, 556, 547, 532, 533, 534,
	541, 346, 535, 536, 537, 507, 538, 508, 539, 540,
	0, 563, 514, 429, 381, 581, 580, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	3208, 0, 0, 0, 309, 229, 509, 629, 511, 510,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 436, 455, 310, 424, 468, 315, 432, 447,
	305, 396, 421, 0, 0, 301, 453, 431, 378, 356,
	357, 300, 0, 415, 334, 348, 331, 394, 0, 452,
	480, 330, 471, 0, 463, 303, 0, 462, 393, 449,
	454, 379, 373, 0, 302, 451, 377, 372, 360, 338,
	496, 361, 362, 352, 405, 370, 406, 353, 383, 382,
	384, 0, 0, 0, 0, 0, 491, 492, 0, 0,
	640, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 622, 0, 0, 626, 0, 465, 0, 0,
	0, 0, 0, 0, 435, 0, 0, 363, 0, 0,
	0, 481, 0, 418, 399, 654, 0, 0, 416, 368,
	450, 407, 456, 437, 464, 412, 408, 294, 438, 333,
	380, 306, 308, 328, 335, 337, 339, 340, 389, 390,
	402, 423, 440, 441, 442, 332, 316, 417, 317, 350,
	318, 295, 324, 322, 325, 425, 326, 297, 403, 446,
	0, 345, 413, 376, 298, 375, 404, 445, 444, 307,
	472, 478, 479, 568, 0, 484, 655, 656, 657, 493,
	0, 409, 498, 499, 500, 502, 503, 504, 505, 569,
	586, 553, 523, 486, 577, 520, 524, 525, 589, 0,
	0, 0, 477, 364, 365, 0, 343, 291, 292, 650,
	329, 395, 591, 624, 625, 516, 0, 578, 517, 526,
	321, 550, 562, 561, 391, 476, 0, 573, 576, 506,
	649, 0, 570, 585, 653, 584, 646, 401, 0, 422,
	582, 529, 0, 574, 548, 0, 575, 544, 579, 0,
	518, 0, 430, 458, 470, 487, 490, 519, 604, 605,
	606, 296, 489, 608, 609, 610, 611, 612, 613, 614,
	607, 461, 551, 528, 554, 469, 531, 530, 0, 0,
	565, 485, 566, 567, 385, 386, 387, 388, 347, 592,
	314, 488, 411, 0, 552, 0, 0, 0, 0, 0,
	0, 0, 0, 557, 558, 555, 658, 0, 615, 616,
	0, 0, 482, 483, 342, 349, 501, 351, 313, 400,
	344, 467, 358, 0, 494, 559, 495, 618, 621, 619,
	620, 392, 354, 355, 426, 359, 369, 414, 466, 398,
	419, 311, 457, 428, 374, 545, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 600, 599, 598, 597, 596, 595, 594,
	593, 0, 0, 542, 443, 323, 285, 319, 320, 327,
	647, 644, 448, 648, 0, 293, 522, 367, 0, 410,
	341, 587, 588, 0, 639, 241, 242, 243, 244, 245,
	246, 247, 248, 286, 249, 250, 251, 252, 253, 254,
	255, 258, 259, 260, 261, 262, 263, 264, 265, 590,
	256, 257, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 0, 0, 0, 287,
	288, 289, 290, 0, 0, 281, 282, 283, 284, 0,
	0, 0, 473, 474, 475, 497, 0, 459, 521, 645,
	0, 0, 0, 0, 0, 0, 0, 571, 583, 617,
	0, 627, 628, 630, 632, 631, 634, 433, 434, 0,
	636, 637, 638, 635, 371, 420, 439, 427, 0, 651,
	512, 513, 652, 623, 397, 0, 527, 560, 549, 633,
	515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 366, 564, 546, 556, 547, 532,
	533, 534, 541, 346, 535, 536, 537, 507, 538, 508,
	539, 540, 0, 563, 514, 429, 381, 581, 580, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	0, 0, 0, 0, 0, 0, 309, 229, 509, 629,
	511, 510, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3226, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 436, 455, 310, 424, 468, 315,
	432, 447, 305, 396, 421, 0, 0, 301, 453, 431,
	378, 356, 357, 300, 0, 415, 334, 348, 331, 394,
	0, 452, 480, 330, 471, 0, 463, 303, 0, 462,
	393, 449, 454, 379, 373, 0, 302, 451, 377, 372,
	360, 338, 496, 361, 362, 352, 405, 370, 406, 353,
	383, 382, 384, 0, 0, 0, 0, 0, 491, 492,
	0, 0, 640, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 622, 0, 0, 626, 0, 465,
	0, 0, 0, 0, 0, 0, 435, 0, 0, 363,
	0, 0, 0, 481, 0, 418, 399, 654, 0, 0,
	416, 368, 450, 407, 456, 437, 464, 412, 408, 294,
	438, 333, 380, 306, 308, 328, 335, 337, 339, 340,
	389, 390, 402, 423, 440, 441, 442, 332, 316, 417,
	317, 350, 318, 295, 324, 322, 325, 425, 326, 297,
	403, 446, 0, 345, 413, 376, 298, 375, 404, 445,
	444, 307, 472, 478, 479, 568, 0, 484, 655, 656,
	657, 493, 0, 409, 498, 499, 500, 502, 503, 504,
	505, 569, 586, 553, 523, 486, 577, 520, 524, 525,
	589, 0, 0, 0, 477, 364, 365, 0, 343, 291,
	292, 650, 329, 395, 591, 624, 625, 516, 0, 578,
	517, 526, 321, 550, 562, 561, 391, 476, 0, 573,
	576, 506, 649, 0, 570, 585, 653, 584, 646, 401,
	0, 422, 582, 529, 0, 574, 548, 0, 575, 544,
	579, 0, 518, 0, 430, 458, 470, 487, 490, 519,
	604, 605, 606, 296, 489, 608, 609, 610, 611, 612,
	613, 614, 607, 461, 551, 528, 554, 469, 531, 530,
	0, 0, 565, 485, 566, 567, 385, 386, 387, 388,
	347, 592, 314, 488, 411, 0, 552, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 558, 555, 658, 0,
	615, 616, 0, 0, 482, 483, 342, 349, 501, 351,
	313, 400, 344, 467, 358, 0, 494, 559, 495, 618,
	621, 619, 620, 392, 354, 355, 426, 359, 369, 414,
	466, 398, 419, 311, 457, 428, 374, 545, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 600, 599, 598, 597, 596,
	595, 594, 593, 0, 0, 542, 443, 323, 285, 319,
	320, 327, 647, 644, 448, 648, 0, 293, 522, 367,
	0, 410, 341, 587, 588, 0, 639, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 590, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 473, 474, 475, 497, 0, 459,
	521, 645, 0, 0, 0, 0, 0, 0, 0, 571,
	583, 617, 0, 627, 628, 630, 632, 631, 634, 433,
	434, 0, 636, 637, 638, 635, 371, 420, 439, 427,
	0, 651, 512, 513, 652, 623, 397, 0, 527, 560,
	549, 633, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 366, 564, 546, 556,
	547, 532, 533, 534, 541, 346, 535, 536, 537, 507,
	538, 508, 539, 540, 0, 563, 514, 429, 381, 581,
	580, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2061, 0,
	0, 228, 0, 0, 0, 0, 0, 0, 309, 229,
	509, 629, 511, 510, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 436, 455, 310, 424,
	468, 315, 432, 447, 305, 396, 421, 0, 0, 301,
	453, 431, 378, 356, 357, 300, 0, 415, 334, 348,
	331, 394, 0, 452, 480, 330, 471, 0, 463, 303,
	0, 462, 393, 449, 454, 379, 373, 0, 302, 451,
	377, 372, 360, 338, 496, 361, 362, 352, 405, 370,
	406, 353, 383, 382, 384, 0, 0, 0, 0, 0,
	491, 492, 0, 0, 640, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 622, 0, 0, 626,
	0, 465, 0, 0, 0, 0, 0, 0, 435, 0,
	0, 363, 0, 0, 0, 481, 0, 418, 399, 654,
	0, 0, 416, 368, 450, 407, 456, 437, 464, 412,
	408, 294, 438, 333, 380, 306, 308, 328, 335, 337,
	339, 340, 389, 390, 402, 423, 440, 441, 442, 332,
	316, 417, 317, 350, 318, 295, 324, 322, 325, 425,
	326, 297, 403, 446, 0, 345, 413, 376, 298, 375,
	404, 445, 444, 307, 472, 478, 479, 568, 0, 484,
	655, 656, 657, 493, 0, 409, 498, 499, 500, 502,
	503, 504, 505, 569, 586, 553, 523, 486, 577, 520,
	524, 525, 589, 0, 0, 0, 477, 364, 365, 0,
	343, 291, 292, 650, 329, 395, 591, 624, 625, 516,
	0, 578, 517, 526, 321, 550, 562, 561, 391, 476,
	0, 573, 576, 506, 649, 0, 570, 585, 653, 584,
	646, 401, 0, 422, 582, 529, 0, 574, 548, 0,
	575, 544, 579, 0, 518, 0, 430, 458, 470, 487,
	490, 519, 604, 605, 606, 296, 489, 608, 609, 610,
	611, 612, 613, 614, 607, 461, 551, 528, 554, 469,
	531, 530, 0, 0, 565, 485, 566, 567, 385, 386,
	387, 388, 347, 592, 314, 488, 411, 0, 552, 0,
	0, 0, 0, 0, 0, 0, 0, 557, 558, 555,
	658, 0, 615, 616, 0, 0, 482, 483, 342, 349,
	501, 351, 313, 400, 344, 467, 358, 0, 494, 559,
	495, 618, 621, 619, 620, 392, 354, 355, 426, 359,
	369, 414, 466, 398, 419, 311, 457, 428, 374, 545,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 600, 599, 598,
	597, 596, 595, 594, 593, 0, 0, 542, 443, 323,
	285, 319, 320, 327, 647, 644, 448, 648, 0, 293,
	522, 367, 0, 410, 341, 587, 588, 0, 639, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 590, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 473, 474, 475, 497,
	0, 459, 521, 645, 0, 0, 0, 0, 0, 0,
	0, 571, 583, 617, 0, 627, 628, 630, 632, 631,
	634, 433, 434, 0, 636, 637, 638, 635, 371, 420,
	439, 427, 0, 651, 512, 513, 652, 623, 397, 0,
	527, 560, 549, 633, 515, 0, 0, 3415, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 366, 564,
	546, 556, 547, 532, 533, 534, 541, 346, 535, 536,
	537, 507, 538, 508, 539, 540, 0, 563, 514, 429,
	381, 581, 580, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 509, 629, 511, 510, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 436, 455,
	310, 424, 468, 315, 432, 447, 305, 396, 421, 0,
	0, 301, 453, 431, 378, 356, 357, 300, 0, 415,
	334, 348, 331, 394, 0, 452, 480, 330, 471, 0,
	463, 303, 0, 462, 393, 449, 454, 379, 373, 0,
	302, 451, 377, 372, 360, 338, 496, 361, 362, 352,
	405, 370, 406, 353, 383, 382, 384, 0, 0, 0,
	0, 0, 491, 492, 0, 0, 640, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 622, 0,
	0, 626, 0, 465, 0, 0, 0, 0, 0, 0,
	435, 0, 0, 363, 0, 0, 0, 481, 0, 418,
	399, 654, 0, 0, 416, 368, 450, 407, 456, 437,
	464, 412, 408, 294, 438, 333, 380, 306, 308, 328,
	335, 337, 339, 340, 389, 390, 402, 423, 440, 441,
	442, 332, 316, 417, 317, 350, 318, 295, 324, 322,
	325, 425, 326, 297, 403, 446, 0, 345, 413, 376,
	298, 375, 404, 445, 444, 307, 472, 478, 479, 568,
	0, 484, 655, 656, 657, 493, 0, 409, 498, 499,
	500, 502, 503, 504, 505, 569, 586, 553, 523, 486,
	577, 520, 524, 525, 589, 0, 0, 0, 477, 364,
	365, 0, 343, 291, 292, 650, 329, 395, 591, 624,
	625, 516, 0, 578, 517, 526, 321, 550, 562, 561,
	391, 476, 0, 573, 576, 506, 649, 0, 570, 585,
	653, 584, 646, 401, 0, 422, 582, 529, 0, 574,
	548, 0, 575, 544, 579, 0, 518, 0, 430, 458,
	470, 487, 490, 519, 604, 605, 606, 296, 489, 608,
	609, 610, 611, 612, 613, 614, 607, 461, 551, 528,
	554, 469, 531, 530, 0, 0, 565, 485, 566, 567,
	385, 386, 387, 388, 347, 592, 314, 488, 411, 0,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 557,
	558, 555, 658, 0, 615, 616, 0, 0, 482, 483,
	342, 349, 501, 351, 313, 400, 344, 467, 358, 0,
	494, 559, 495, 618, 621, 619, 620, 392, 354, 355,
	426, 359, 369, 414, 466, 398, 419, 311, 457, 428,
	374, 545, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 600,
	599, 598, 597, 596, 595, 594, 593, 0, 0, 542,
	443, 323, 285, 319, 320, 327, 647, 644, 448, 648,
	0, 293, 522, 367, 0, 410, 341, 587, 588, 0,
	639, 241, 242, 243, 244, 245, 246, 247, 248, 286,
	249, 250, 251, 252, 253, 254, 255, 258, 259, 260,
	261, 262, 263, 264, 265, 590, 256, 257, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 0, 0, 0, 287, 288, 289, 290, 0,
	0, 281, 282, 283, 284, 0, 0, 0, 473, 474,
	475, 497, 0, 459, 521, 645, 0, 0, 0, 0,
	0, 0, 0, 571, 583, 617, 0, 627, 628, 630,
	632, 631, 634, 433, 434, 0, 636, 637, 638, 635,
	371, 420, 439, 427, 0, 651, 512, 513, 652, 623,
	397, 0, 527, 560, 549, 633, 515, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 0, 0,
	366, 564, 546, 556, 547, 532, 533, 534, 541, 346,
	535, 536, 537, 507, 538, 508, 539, 540, 0, 563,
	514, 429, 381, 581, 580, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 309, 229, 509, 629, 511, 510, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3332, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	436, 455, 310, 424, 468, 315, 432, 447, 305, 396,
	421, 0, 0, 301, 453, 431, 378, 356, 357, 300,
	0, 415, 334, 348, 331, 394, 0, 452, 480, 330,
	471, 0, 463, 303, 0, 462, 393, 449, 454, 379,
	373, 0, 302, 451, 377, 372, 360, 338, 496, 361,
	362, 352, 405, 370, 406, 353, 383, 382, 384, 0,
	0, 0, 0, 0, 491, 492, 0, 0, 640, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	622, 0, 0, 626, 0, 465, 0, 0, 0, 0,
	0, 0, 435, 0, 0, 363, 0, 0, 0, 481,
	0, 418, 399, 654, 0, 0, 416, 368, 450, 407,
	456, 437, 464, 412, 408, 294, 438, 333, 380, 306,
	308, 328, 335, 337, 339, 340, 389, 390, 402, 423,
	440, 441, 442, 332, 316, 417, 317, 350, 318, 295,
	324, 322, 325, 425, 326, 297, 403, 446, 0, 345,
	413, 376, 298, 375, 404, 445, 444, 307, 472, 478,
	479, 568, 0, 484, 655, 656, 657, 493, 0, 409,
	498, 499, 500, 502, 503, 504, 505, 569, 586, 553,
	523, 486, 577, 520, 524, 525, 589, 0, 0, 0,
	477, 364, 365, 0, 343, 291, 292, 650, 329, 395,
	591, 624, 625, 516, 0, 578, 517, 526, 321, 550,
	562, 561, 391, 476, 0, 573, 576, 506, 649, 0,
	570, 585, 653, 584, 646, 401, 0, 422, 582, 529,
	0, 574, 548, 0, 575, 544, 579, 0, 518, 0,
	430, 458, 470, 487, 490, 519, 604, 605, 606, 296,
	489, 608, 609, 610, 611, 612, 613, 614, 607, 461,
	551, 528, 554, 469, 531, 530, 0, 0, 565, 485,
	566, 567, 385, 386, 387, 388, 347, 592, 314, 488,
	411, 0, 552, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 558, 555, 658, 0, 615, 616, 0, 0,
	482, 483, 342, 349, 501, 351, 313, 400, 344, 467,
	358, 0, 494, 559, 495, 618, 621, 619, 620, 392,
	354, 355, 426, 359, 369, 414, 466, 398, 419, 311,
	457, 428, 374, 545, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 600, 599, 598, 597, 596, 595, 594, 593, 0,
	0, 542, 443, 323, 285, 319, 320, 327, 647, 644,
	448, 648, 0, 293, 522, 367, 0, 410, 341, 587,
	588, 0, 639, 241, 242, 243, 244, 245, 246, 247,
	248, 286, 249, 250, 251, 252, 253, 254, 255, 258,
	259, 260, 261, 262, 263, 264, 265, 590, 256, 257,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 0, 0, 0, 287, 288, 289,
	290, 0, 0, 281, 282, 283, 284, 0, 0, 0,
	473, 474, 475, 497, 0, 459, 521, 645, 0, 0,
	0, 0, 0, 0, 0, 571, 583, 617, 0, 627,
	628, 630, 632, 631, 634, 433, 434, 0, 636, 637,
	638, 635, 371, 420, 439, 427, 0, 651, 512, 513,
	652, 623, 397, 0, 527, 560, 549, 633, 515, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 366, 564, 546, 556, 547, 532, 533, 534,
	541, 346, 535, 536, 537, 507, 538, 508, 539, 540,
	0, 563, 514, 429, 381, 581, 580, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	0, 0, 0, 0, 309, 229, 509, 629, 511, 510,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3069, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 436, 455, 310, 424, 468, 315, 432, 447,
	305, 396, 421, 0, 0, 301, 453, 431, 378, 356,
	357, 300, 0, 415, 334, 348, 331, 394, 0, 452,
	480, 330, 471, 0, 463, 303, 0, 462, 393, 449,
	454, 379, 373, 0, 302, 451, 377, 372, 360, 338,
	496, 361, 362, 352, 405, 370, 406, 353, 383, 382,
	384, 0, 0, 0, 0, 0, 491, 492, 0, 0,
	640, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 622, 0, 0, 626, 0, 465, 0, 0,
	0, 0, 0, 0, 435, 0, 0, 363, 0, 0,
	0, 481, 0, 418, 399, 654, 0, 0, 416, 368,
	450, 407, 456, 437, 464, 412, 408, 294, 438, 333,
	380, 306, 308, 328, 335, 337, 339, 340, 389, 390,
	402, 423, 440, 441, 442, 332, 316, 417, 317, 350,
	318, 295, 324, 322, 325, 425, 326, 297, 403, 446,
	0, 345, 413, 376, 298, 375, 404, 445, 444, 307,
	472, 478, 479, 568, 0, 484, 655, 656, 657, 493,
	0, 409, 498, 499, 500, 502, 503, 504, 505, 569,
	586, 553, 523, 486, 577, 520, 524, 525, 589, 0,
	0, 0, 477, 364, 365, 0, 343, 291, 292, 650,
	329, 395, 591, 624, 625, 516, 0, 578, 517, 526,
	321, 550, 562, 561, 391, 476, 0, 573, 576, 506,
	649, 0, 570, 585, 653, 584, 646, 401, 0, 422,
	582, 529, 0, 574, 548, 0, 575, 544, 579, 0,
	518, 0, 430, 458, 470, 487, 490, 519, 604, 605,
	606, 296, 489, 608, 609, 610, 611, 612, 613, 614,
	607, 461, 551, 528, 554, 469, 531, 530, 0, 0,
	565, 485, 566, 567, 385, 386, 387, 388, 347, 592,
	314, 488, 411, 0, 552, 0, 0, 0, 0, 0,
	0, 0, 0, 557, 558, 555, 658, 0, 615, 616,
	0, 0, 482, 483, 342, 349, 501, 351, 313, 400,
	344, 467, 358, 0, 494, 559, 495, 618, 621, 619,
	620, 392, 354, 355, 426, 359, 369, 414, 466, 398,
	419, 311, 457, 428, 374, 545, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 600, 599, 598, 597, 596, 595, 594,
	593, 0, 0, 542, 443, 323, 285, 319, 320, 327,
	647, 644, 448, 648, 0, 293, 522, 367, 0, 410,
	341, 587, 588, 0, 639, 241, 242, 243, 244, 245,
	246, 247, 248, 286, 249, 250, 251, 252, 253, 254,
	255, 258, 259, 260, 261, 262, 263, 264, 265, 590,
	256, 257, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 0, 0, 0, 287,
	288, 289, 290, 0, 0, 281, 282, 283, 284, 0,
	0, 0, 473, 474, 475, 497, 0, 459, 521, 645,
	0, 0, 0, 0, 0, 0, 0, 571, 583, 617,
	0, 627, 628, 630, 632, 631, 634, 433, 434, 0,
	636, 637, 638, 635, 371, 420, 439, 427, 0, 651,
	512, 513, 652, 623, 397, 0, 527, 560, 549, 633,
	515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 366, 564, 546, 556, 547, 532,
	533, 534, 541, 346, 535, 536, 537, 507, 538, 508,
	539, 540, 0, 563, 514, 429, 381, 581, 580, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	0, 0, 1549, 0, 0, 0, 309, 229, 509, 629,
	511, 510, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 436, 455, 310, 424, 468, 315,
	432, 447, 305, 396, 421, 0, 0, 301, 453, 431,
	378, 356, 357, 300, 0, 415, 334, 348, 331, 394,
	0, 452, 480, 330, 471, 0, 463, 303, 0, 462,
	393, 449, 454, 379, 373, 0, 302, 451, 377, 372,
	360, 338, 496, 361, 362, 352, 405, 370, 406, 353,
	383, 382, 384, 0, 0, 0, 0, 0, 491, 492,
	0, 0, 640, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 622, 0, 0, 626, 0, 465,
	0, 0, 0, 0, 0, 0, 435, 0, 0, 363,
	0, 0, 0, 481, 0, 418, 399, 654, 0, 0,
	416, 368, 450, 407, 456, 437, 464, 412, 408, 294,
	438, 333, 380, 306, 308, 328, 335, 337, 339, 340,
	389, 390, 402, 423, 440, 441, 442, 332, 316, 417,
	317, 350, 318, 295, 324, 322, 325, 425, 326, 297,
	403, 446, 0, 345, 413, 376, 298, 375, 404, 445,
	444, 307, 472, 478, 479, 568, 0, 484, 655, 656,
	657, 493, 0, 409, 498, 499, 500, 502, 503, 504,
	505, 569, 586, 553, 523, 486, 577, 520, 524, 525,
	589, 0, 0, 0, 477, 364, 365, 0, 343, 291,
	292, 650, 329, 395, 591, 624, 625, 516, 0, 578,
	517, 526, 321, 550, 562, 561, 391, 476, 0, 573,
	576, 506, 649, 0, 570, 585, 653, 584, 646, 401,
	0, 422, 582, 529, 0, 574, 548, 0, 575, 544,
	579, 0, 518, 0, 430, 458, 470, 487, 490, 519,
	604, 605, 606, 296, 489, 608, 609, 610, 611, 612,
	613, 614, 607, 461, 551, 528, 554, 469, 531, 530,
	0, 0, 565, 485, 566, 567, 385, 386, 387, 388,
	347, 592, 314, 488, 411, 0, 552, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 558, 555, 658, 0,
	615, 616, 0, 0, 482, 483, 342, 349, 501, 351,
	313, 400, 344, 467, 358, 0, 494, 559, 495, 618,
	621, 619, 620, 392, 354, 355, 426, 359, 369, 414,
	466, 398, 419, 311, 457, 428, 374, 545, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 600, 599, 598, 597, 596,
	595, 594, 593, 0, 0, 542, 443, 323, 285, 319,
	320, 327, 647, 644, 448, 648, 0, 293, 522, 367,
	0, 410, 341, 587, 588, 0, 639, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 590, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 473, 474, 475, 497, 0, 459,
	521, 645, 0, 0, 0, 0, 0, 0, 0, 571,
	583, 617, 0, 627, 628, 630, 632, 631, 634, 433,
	434, 0, 636, 637, 638, 635, 371, 420, 439, 427,
	0, 651, 512, 513, 652, 623, 397, 0, 527, 560,
	549, 633, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 366, 564, 546, 556,
	547, 532, 533, 534, 541, 346, 535, 536, 537, 507,
	538, 508, 539, 540, 0, 563, 514, 429, 381, 581,
	580, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 0, 0, 2521, 0, 0, 0, 309, 229,
	509, 629, 511, 510, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 436, 455, 310, 424,
	468, 315, 432, 447, 305, 396, 421, 0, 0, 301,
	453, 431, 378, 356, 357, 300, 0, 415, 334, 348,
	331, 394, 0, 452, 480, 330, 471, 0, 463, 303,
	0, 462, 393, 449, 454, 379, 373, 0, 302, 451,
	377, 372, 360, 338, 496, 361, 362, 352, 405, 370,
	406, 353, 383, 382, 384, 0, 0, 0, 0, 0,
	491, 492, 0, 0, 640, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 622, 0, 0, 626,
	0, 465, 0, 0, 0, 0, 0, 0, 435, 0,
	0, 363, 0, 0, 0, 481, 0, 418, 399, 654,
	0, 0, 416, 368, 450, 407, 456, 437, 464, 412,
	408, 294, 438, 333, 380, 306, 308, 328, 335, 337,
	339, 340, 389, 390, 402, 423, 440, 441, 442, 332,
	316, 417, 317, 350, 318, 295, 324, 322, 325, 425,
	326, 297, 403, 446, 0, 345, 413, 376, 298, 375,
	404, 445, 444, 307, 472, 478, 479, 568, 0, 484,
	655, 656, 657, 493, 0, 409, 498, 499, 500, 502,
	503, 504, 505, 569, 586, 553, 523, 486, 577, 520,
	524, 525, 589, 0, 0, 0, 477, 364, 365, 0,
	343, 291, 292, 650, 329, 395, 591, 624, 625, 516,
	0, 578, 517, 526, 321, 550, 562, 561, 391, 476,
	0, 573, 576, 506, 649, 0, 570, 585, 653, 584,
	646, 401, 0, 422, 582, 529, 0, 574, 548, 0,
	575, 544, 579, 0, 518, 0, 430, 458, 470, 487,
	490, 519, 604, 605, 606, 296, 489, 608, 609, 610,
	611, 612, 613, 614, 607, 461, 551, 528, 554, 469,
	531, 530, 0, 0, 565, 485, 566, 567, 385, 386,
	387, 388, 347, 592, 314, 488, 411, 0, 552, 0,
	0, 0, 0, 0, 0, 0, 0, 557, 558, 555,
	658, 0, 615, 616, 0, 0, 482, 483, 342, 349,
	501, 351, 313, 400, 344, 467, 358, 0, 494, 559,
	495, 618, 621, 619, 620, 392, 354, 355, 426, 359,
	369, 414, 466, 398, 419, 311, 457, 428, 374, 545,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 600, 599, 598,
	597, 596, 595, 594, 593, 0, 0, 542, 443, 323,
	285, 319, 320, 327, 647, 644, 448, 648, 0, 293,
	522, 367, 0, 410, 341, 587, 588, 0, 639, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 590, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 473, 474, 475, 497,
	0, 459, 521, 645, 0, 0, 0, 0, 0, 0,
	0, 571, 583, 617, 0, 627, 628, 630, 632, 631,
	634, 433, 434, 0, 636, 637, 638, 635, 371, 420,
	439, 427, 0, 651, 512, 513, 652, 623, 397, 0,
	527, 560, 549, 633, 515, 0, 0, 2882, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 366, 564,
	546, 556, 547, 532, 533, 534, 541, 346, 535, 536,
	537, 507, 538, 508, 539, 540, 0, 563, 514, 429,
	381, 581, 580, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 509, 629, 511, 510, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 436, 455,
	310, 424, 468, 315, 432, 447, 305, 396, 421, 0,
	0, 301, 453, 431, 378, 356, 357, 300, 0, 415,
	334, 348, 331, 394, 0, 452, 480, 330, 471, 0,
	463, 303, 0, 462, 393, 449, 454, 379, 373, 0,
	302, 451, 377, 372, 360, 338, 496, 361, 362, 352,
	405, 370, 406, 353, 383, 382, 384, 0, 0, 0,
	0, 0, 491, 492, 0, 0, 640, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 622, 0,
	0, 626, 0, 465, 0, 0, 0, 0, 0, 0,
	435, 0, 0, 363, 0, 0, 0, 481, 0, 418,
	399, 654, 0, 0, 416, 368, 450, 407, 456, 437,
	464, 412, 408, 294, 438, 333, 380, 306, 308, 328,
	335, 337, 339, 340, 389, 390, 402, 423, 440, 441,
	442, 332, 316, 417, 317, 350, 318, 295, 324, 322,
	325, 425, 326, 297, 403, 446, 0, 345, 413, 376,
	298, 375, 404, 445, 444, 307, 472, 478, 479, 568,
	0, 484, 655, 656, 657, 493, 0, 409, 498, 499,
	500, 502, 503, 504, 505, 569, 586, 553, 523, 486,
	577, 520, 524, 525, 589, 0, 0, 0, 477, 364,
	365, 0, 343, 291, 292, 650, 329, 395, 591, 624,
	625, 516, 0, 578, 517, 526, 321, 550, 562, 561,
	391, 476, 0, 573, 576, 506, 649, 0, 570, 585,
	653, 584, 646, 401, 0, 422, 582, 529, 0, 574,
	548, 0, 575, 544, 579, 0, 518, 0, 430, 458,
	470, 487, 490, 519, 604, 605, 606, 296, 489, 608,
	609, 610, 611, 612, 613, 614, 607, 461, 551, 528,
	554, 469, 531, 530, 0, 0, 565, 485, 566, 567,
	385, 386, 387, 388, 347, 592, 314, 488, 411, 0,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 557,
	558, 555, 658, 0, 615, 616, 0, 0, 482, 483,
	342, 349, 501, 351, 313, 400, 344, 467, 358, 0,
	494, 559, 495, 618, 621, 619, 620, 392, 354, 355,
	426, 359, 369, 414, 466, 398, 419, 311, 457, 428,
	374, 545, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 600,
	599, 598, 597, 596, 595, 594, 593, 0, 0, 542,
	443, 323, 285, 319, 320, 327, 647, 644, 448, 648,
	0, 293, 522, 367, 0, 410, 341, 587, 588, 0,
	639, 241, 242, 243, 244, 245, 246, 247, 248, 286,
	249, 250, 251, 252, 253, 254, 255, 258, 259, 260,
	261, 262, 263, 264, 265, 590, 256, 257, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 0, 0, 0, 287, 288, 289, 290, 0,
	0, 281, 282, 283, 284, 0, 0, 0, 473, 474,
	475, 497, 0, 459, 521, 645, 0, 0, 0, 0,
	0, 0, 0, 571, 583, 617, 0, 627, 628, 630,
	632, 631, 634, 433, 434, 0, 636, 637, 638, 635,
	371, 420, 439, 427, 0, 651, 512, 513, 652, 623,
	397, 0, 527, 560, 549, 633, 515, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 0, 0,
	366, 564, 546, 556, 547, 532, 533, 534, 541, 346,
	535, 536, 537, 507, 538, 508, 539, 540, 0, 563,
	514, 429, 381, 581, 580, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 309, 229, 509, 629, 511, 510, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2198, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	436, 455, 310, 424, 468, 315, 432, 447, 305, 396,
	421, 0, 0, 301, 453, 431, 378, 356, 357, 300,
	0, 415, 334, 348, 331, 394, 0, 452, 480, 330,
	471, 0, 463, 303, 0, 462, 393, 449, 454, 379,
	373, 0, 302, 451, 377, 372, 360, 338, 496, 361,
	362, 352, 405, 370, 406, 353, 383, 382, 384, 0,
	0, 0, 0, 0, 491, 492, 0, 0, 640, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	622, 0, 0, 626, 0, 465, 0, 0, 0, 0,
	0, 0, 435, 0, 0, 363, 0, 0, 0, 481,
	0, 418, 399, 654, 0, 0, 416, 368, 450, 407,
	456, 437, 464, 412, 408, 294, 438, 333, 380, 306,
	308, 328, 335, 337, 339, 340, 389, 390, 402, 423,
	440, 441, 442, 332, 316, 417, 317, 350, 318, 295,
	324, 322, 325, 425, 326, 297, 403, 446, 0, 345,
	413, 376, 298, 375, 404, 445, 444, 307, 472, 478,
	479, 568, 0, 484, 655, 656, 657, 493, 0, 409,
	498, 499, 500, 502, 503, 504, 505, 569, 586, 553,
	523, 486, 577, 520, 524, 525, 589, 0, 0, 0,
	477, 364, 365, 0, 343, 291, 292, 650, 329, 395,
	591, 624, 625, 516, 0, 578, 517, 526, 321, 550,
	562, 561, 391, 476, 0, 573, 576, 506, 649, 0,
	570, 585, 653, 584, 646, 401, 0, 422, 582, 529,
	0, 574, 548, 0, 575, 544, 579, 0, 518, 0,
	430, 458, 470, 487, 490, 519, 604, 605, 606, 296,
	489, 608, 609, 610, 611, 612, 613, 614, 607, 461,
	551, 528, 554, 469, 531, 530, 0, 0, 565, 485,
	566, 567, 385, 386, 387, 388, 347, 592, 314, 488,
	411, 0, 552, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 558, 555, 658, 0, 615, 616, 0, 0,
	482, 483, 342, 349, 501, 351, 313, 400, 344, 467,
	358, 0, 494, 559, 495, 618, 621, 619, 620, 392,
	354, 355, 426, 359, 369, 414, 466, 398, 419, 311,
	457, 428, 374, 545, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 600, 599, 598, 597, 596, 595, 594, 593, 0,
	0, 542, 443, 323, 285, 319, 320, 327, 647, 644,
	448, 648, 0, 293, 522, 367, 0, 410, 341, 587,
	588, 0, 639, 241, 242, 243, 244, 245, 246, 247,
	248, 286, 249, 250, 251, 252, 253, 254, 255, 258,
	259, 260, 261, 262, 263, 264, 265, 590, 256, 257,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 0, 0, 0, 287, 288, 289,
	290, 0, 0, 281, 282, 283, 284, 0, 0, 0,
	473, 474, 475, 497, 0, 459, 521, 645, 0, 0,
	0, 0, 0, 0, 0, 571, 583, 617, 0, 627,
	628, 630, 632, 631, 634, 433, 434, 0, 636, 637,
	638, 635, 371, 420, 439, 427, 0, 651, 512, 513,
	652, 623, 397, 0, 527, 560, 549, 633, 515, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 366, 564, 546, 556, 547, 532, 533, 534,
	541, 346, 535, 536, 537, 507, 538, 508, 539, 540,
	0, 563, 514, 429, 381, 581, 580, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	2638, 0, 0, 0, 309, 229, 509, 629, 511, 510,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 436, 455, 310, 424, 468, 315, 432, 447,
	305, 396, 421, 0, 0, 301, 453, 431, 378, 356,
	357, 300, 0, 415, 334, 348, 331, 394, 0, 452,
	480, 330, 471, 0, 463, 303, 0, 462, 393, 449,
	454, 379, 373, 0, 302, 451, 377, 372, 360, 338,
	496, 361, 362, 352, 405, 370, 406, 353, 383, 382,
	384, 0, 0, 0, 0, 0, 491, 492, 0, 0,
	640, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 622, 0, 0, 626, 0, 465, 0, 0,
	0, 0, 0, 0, 435, 0, 0, 363, 0, 0,
	0, 481, 0, 418, 399, 654, 0, 0, 416, 368,
	450, 407, 456, 437, 464, 412, 408, 294, 438, 333,
	380, 306, 308, 328, 335, 337, 339, 340, 389, 390,
	402, 423, 440, 441, 442, 332, 316, 417, 317, 350,
	318, 295, 324, 322, 325, 425, 326, 297, 403, 446,
	0, 345, 413, 376, 298, 375, 404, 445, 444, 307,
	472, 478, 479, 568, 0, 484, 655, 656, 657, 493,
	0, 409, 498, 499, 500, 502, 503, 504, 505, 569,
	586, 553, 523, 486, 577, 520, 524, 525, 589, 0,
	0, 0, 477, 364, 365, 0, 343, 291, 292, 650,
	329, 395, 591, 624, 625, 516, 0, 578, 517, 526,
	321, 550, 562, 561, 391, 476, 0, 573, 576, 506,
	649, 0, 570, 585, 653, 584, 646, 401, 0, 422,
	582, 529, 0, 574, 548, 0, 575, 544, 579, 0,
	518, 0, 430, 458, 470, 487, 490, 519, 604, 605,
	606, 296, 489, 608, 609, 610, 611, 612, 613, 614,
	607, 461, 551, 528, 554, 469, 531, 530, 0, 0,
	565, 485, 566, 567, 385, 386, 387, 388, 347, 592,
	314, 488, 411, 0, 552, 0, 0, 0, 0, 0,
	0, 0, 0, 557, 558, 555, 658, 0, 615, 616,
	0, 0, 482, 483, 342, 349, 501, 351, 313, 400,
	344, 467, 358, 0, 494, 559, 495, 618, 621, 619,
	620, 392, 354, 355, 426, 359, 369, 414, 466, 398,
	419, 311, 457, 428, 374, 545, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 600, 599, 598, 597, 596, 595, 594,
	593, 0, 0, 542, 443, 323, 285, 319, 320, 327,
	647, 644, 448, 648, 0, 293, 522, 367, 0, 410,
	341, 587, 588, 0, 639, 241, 242, 243, 244, 245,
	246, 247, 248, 286, 249, 250, 251, 252, 253, 254,
	255, 258, 259, 260, 261, 262, 263, 264, 265, 590,
	256, 257, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 0, 0, 0, 287,
	288, 289, 290, 0, 0, 281, 282, 283, 284, 0,
	0, 0, 473, 474, 475, 497, 0, 459, 521, 645,
	0, 0, 0, 0, 0, 0, 0, 571, 583, 617,
	0, 627, 628, 630, 632, 631, 634, 433, 434, 0,
	636, 637, 638, 635, 371, 420, 439, 427, 0, 651,
	512, 513, 652, 623, 397, 0, 527, 560, 549, 633,
	515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 366, 564, 546, 556, 547, 532,
	533, 534, 541, 346, 535, 536, 537, 507, 538, 508,
	539, 540, 0, 563, 514, 429, 381, 581, 580, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	0, 0, 0, 0, 0, 0, 309, 229, 509, 629,
	511, 510, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2600, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 436, 455, 310, 424, 468, 315,
	432, 447, 305, 396, 421, 0, 0, 301, 453, 431,
	378, 356, 357, 300, 0, 415, 334, 348, 331, 394,
	0, 452, 480, 330, 471, 0, 463, 303, 0, 462,
	393, 449, 454, 379, 373, 0, 302, 451, 377, 372,
	360, 338, 496, 361, 362, 352, 405, 370, 406, 353,
	383, 382, 384, 0, 0, 0, 0, 0, 491, 492,
	0, 0, 640, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 622, 0, 0, 626, 0, 465,
	0, 0, 0, 0, 0, 0, 435, 0, 0, 363,
	0, 0, 0, 481, 0, 418, 399, 654, 0, 0,
	416, 368, 450, 407, 456, 437, 464, 412, 408, 294,
	438, 333, 380, 306, 308, 328, 335, 337, 339, 340,
	389, 390, 402, 423, 440, 441, 442, 332, 316, 417,
	317, 350, 318, 295, 324, 322, 325, 425, 326, 297,
	403, 446, 0, 345, 413, 376, 298, 375, 404, 445,
	444, 307, 472, 478, 479, 568, 0, 484, 655, 656,
	657, 493, 0, 409, 498, 499, 500, 502, 503, 504,
	505, 569, 586, 553, 523, 486, 577, 520, 524, 525,
	589, 0, 0, 0, 477, 364, 365, 0, 343, 291,
	292, 650, 329, 395, 591, 624, 625, 516, 0, 578,
	517, 526, 321, 550, 562, 561, 391, 476, 0, 573,
	576, 506, 649, 0, 570, 585, 653, 584, 646, 401,
	0, 422, 582, 529, 0, 574, 548, 0, 575, 544,
	579, 0, 518, 0, 430, 458, 470, 487, 490, 519,
	604, 605, 606, 296, 489, 608, 609, 610, 611, 612,
	613, 614, 607, 461, 551, 528, 554, 469, 531, 530,
	0, 0, 565, 485, 566, 567, 385, 386, 387, 388,
	347, 592, 314, 488, 411, 0, 552, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 558, 555, 658, 0,
	615, 616, 0, 0, 482, 483, 342, 349, 501, 351,
	313, 400, 344, 467, 358, 0, 494, 559, 495, 618,
	621, 619, 620, 392, 354, 355, 426, 359, 369, 414,
	466, 398, 419, 311, 457, 428, 374, 545, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 600, 599, 598, 597, 596,
	595, 594, 593, 0, 0, 542, 443, 323, 285, 319,
	320, 327, 647, 644, 448, 648, 0, 293, 522, 367,
	0, 410, 341, 587, 588, 0, 639, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 590, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 473, 474, 475, 497, 0, 459,
	521, 645, 0, 0, 0, 0, 0, 0, 0, 571,
	583, 617, 0, 627, 628, 630, 632, 631, 634, 433,
	434, 0, 636, 637, 638, 635, 371, 420, 439, 427,
	0, 651, 512, 513, 652, 623, 397, 0, 527, 560,
	549, 633, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 366, 564, 546, 556,
	547, 532, 533, 534, 541, 346, 535, 536, 537, 507,
	538, 508, 539, 540, 0, 563, 514, 429, 381, 581,
	580, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 0, 0, 2598, 0, 0, 0, 309, 229,
	509, 629, 511, 510, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 436, 455, 310, 424,
	468, 315, 432, 447, 305, 396, 421, 0, 0, 301,
	453, 431, 378, 356, 357, 300, 0, 415, 334, 348,
	331, 394, 0, 452, 480, 330, 471, 0, 463, 303,
	0, 462, 393, 449, 454, 379, 373, 0, 302, 451,
	377, 372, 360, 338, 496, 361, 362, 352, 405, 370,
	406, 353, 383, 382, 384, 0, 0, 0, 0, 0,
	491, 492, 0, 0, 640, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 622, 0, 0, 626,
	0, 465, 0, 0, 0, 0, 0, 0, 435, 0,
	0, 363, 0, 0, 0, 481, 0, 418, 399, 654,
	0, 0, 416, 368, 450, 407, 456, 437, 464, 412,
	408, 294, 438, 333, 380, 306, 308, 328, 335, 337,
	339, 340, 389, 390, 402, 423, 440, 441, 442, 332,
	316, 417, 317, 350, 318, 295, 324, 322, 325, 425,
	326, 297, 403, 446, 0, 345, 413, 376, 298, 375,
	404, 445, 444, 307, 472, 478, 479, 568, 0, 484,
	655, 656, 657, 493, 0, 409, 498, 499, 500, 502,
	503, 504, 505, 569, 586, 553, 523, 486, 577, 520,
	524, 525, 589, 0, 0, 0, 477, 364, 365, 0,
	343, 291, 292, 650, 329, 395, 591, 624, 625, 516,
	0, 578, 517, 526, 321, 550, 562, 561, 391, 476,
	0, 573, 576, 506, 649, 0, 570, 585, 653, 584,
	646, 401, 0, 422, 582, 529, 0, 574, 548, 0,
	575, 544, 579, 0, 518, 0, 430, 458, 470, 487,
	490, 519, 604, 605, 606, 296, 489, 608, 609, 610,
	611, 612, 613, 614, 607, 461, 551, 528, 554, 469,
	531, 530, 0, 0, 565, 485, 566, 567, 385, 386,
	387, 388, 347, 592, 314, 488, 411, 0, 552, 0,
	0, 0, 0, 0, 0, 0, 0, 557, 558, 555,
	658, 0, 615, 616, 0, 0, 482, 483, 342, 349,
	501, 351, 313, 400, 344, 467, 358, 0, 494, 559,
	495, 618, 621, 619, 620, 392, 354, 355, 426, 359,
	369, 414, 466, 398, 419, 311, 457, 428, 374, 545,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 600, 599, 598,
	597, 596, 595, 594, 593, 0, 0, 542, 443, 323,
	285, 319, 320, 327, 647, 644, 448, 648, 0, 293,
	522, 367, 0, 410, 341, 587, 588, 0, 639, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 590, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 473, 474, 475, 497,
	0, 459, 521, 645, 0, 0, 0, 0, 0, 0,
	0, 571, 583, 617, 0, 627, 628, 630, 632, 631,
	634, 433, 434, 0, 636, 637, 638, 635, 371, 420,
	439, 427, 2368, 651, 512, 513, 652, 623, 397, 0,
	527, 560, 549, 633, 515, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 366, 564,
	546, 556, 547, 532, 533, 534, 541, 346, 535, 536,
	537, 507, 538, 508, 539, 540, 0, 563, 514, 429,
	381, 581, 580, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 509, 629, 511, 510, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 436, 455,
	310, 424, 468, 315, 432, 447, 305, 396, 421, 0,
	0, 301, 453, 431, 378, 356, 357, 300, 0, 415,
	334, 348, 331, 394, 0, 452, 480, 330, 471, 0,
	463, 303, 0, 462, 393, 449, 454, 379, 373, 0,
	302, 451, 377, 372, 360, 338, 496, 361, 362, 352,
	405, 370, 406, 353, 383, 382, 384, 0, 0, 0,
	0, 0, 491, 492, 0, 0, 640, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 622, 0,
	0, 626, 0, 465, 0, 0, 0, 0, 0, 0,
	435, 0, 0, 363, 0, 0, 0, 481, 0, 418,
	399, 654, 0, 0, 416, 368, 450, 407, 456, 437,
	464, 412, 408, 294, 438, 333, 380, 306, 308, 328,
	335, 337, 339, 340, 389, 390, 402, 423, 440, 441,
	442, 332, 316, 417, 317, 350, 318, 295, 324, 322,
	325, 425, 326, 297, 403, 446, 0, 345, 413, 376,
	298, 375, 404, 445, 444, 307, 472, 478, 479, 568,
	0, 484, 655, 656, 657, 493, 0, 409, 498, 499,
	500, 502, 503, 504, 505, 569, 586, 553, 523, 486,
	577, 520, 524, 525, 589, 0, 0, 0, 477, 364,
	365, 0, 343, 291, 292, 650, 329, 395, 591, 624,
	625, 516, 0, 578, 517, 526, 321, 550, 562, 561,
	391, 476, 0, 573, 576, 506, 649, 0, 570, 585,
	653, 584, 646, 401, 0, 422, 582, 529, 0, 574,
	548, 0, 575, 544, 579, 0, 518, 0, 430, 458,
	470, 487, 490, 519, 604, 605, 606, 296, 489, 608,
	609, 610, 611, 612, 613, 614, 607, 461, 551, 528,
	554, 469, 531, 530, 0, 0, 565, 485, 566, 567,
	385, 386, 387, 388, 347, 592, 314, 488, 411, 0,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 557,
	558, 555, 658, 0, 615, 616, 0, 0, 482, 483,
	342, 349, 501, 351, 313, 400, 344, 467, 358, 0,
	494, 559, 495, 618, 621, 619, 620, 392, 354, 355,
	426, 359, 369, 414, 466, 398, 419, 311, 457, 428,
	374, 545, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 600,
	599, 598, 597, 596, 595, 594, 593, 0, 0, 542,
	443, 323, 285, 319, 320, 327, 647, 644, 448, 648,
	0, 293, 522, 367, 0, 410, 341, 587, 588, 0,
	639, 241, 242, 243, 244, 245, 246, 247, 248, 286,
	249, 250, 251, 252, 253, 254, 255, 258, 259, 260,
	261, 262, 263, 264, 265, 590, 256, 257, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 0, 0, 0, 287, 288, 289, 290, 0,
	0, 281, 282, 283, 284, 0, 0, 0, 473, 474,
	475, 497, 0, 459, 521, 645, 0, 0, 0, 0,
	0, 0, 0, 571, 583, 617, 0, 627, 628, 630,
	632, 631, 634, 433, 434, 0, 636, 637, 638, 635,
	371, 420, 439, 427, 0, 651, 512, 513, 652, 623,
	397, 0, 527, 560, 549, 633, 515, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 0, 0,
	366, 564, 546, 556, 547, 532, 533, 534, 541, 346,
	535, 536, 537, 507, 538, 508, 539, 540, 0, 563,
	514, 429, 381, 581, 580, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 1912,
	0, 0, 309, 229, 509, 629, 511, 510, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	436, 455, 310, 424, 468, 315, 432, 447, 305, 396,
	421, 0, 0, 301, 453, 431, 378, 356, 357, 300,
	0, 415, 334, 348, 331, 394, 0, 452, 480, 330,
	471, 0, 463, 303, 0, 462, 393, 449, 454, 379,
	373, 0, 302, 451, 377, 372, 360, 338, 496, 361,
	362, 352, 405, 370, 406, 353, 383, 382, 384, 0,
	0, 0, 0, 0, 491, 492, 0, 0, 640, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	622, 0, 0, 626, 0, 465, 0, 0, 0, 0,
	0, 0, 435, 0, 0, 363, 0, 0, 0, 481,
	0, 418, 399, 654, 0, 0, 416, 368, 450, 407,
	456, 437, 464, 412, 408, 294, 438, 333, 380, 306,
	308, 328, 335, 337, 339, 340, 389, 390, 402, 423,
	440, 441, 442, 332, 316, 417, 317, 350, 318, 295,
	324, 322, 325, 425, 326, 297, 403, 446, 0, 345,
	413, 376, 298, 375, 404, 445, 444, 307, 472, 478,
	479, 568, 0, 484, 655, 656, 657, 493, 0, 409,
	498, 499, 500, 502, 503, 504, 505, 569, 586, 553,
	523, 486, 577, 520, 524, 525, 589, 0, 0, 0,
	477, 364, 365, 0, 343, 291, 292, 650, 329, 395,
	591, 624, 625, 516, 0, 578, 517, 526, 321, 550,
	562, 561, 391, 476, 0, 573, 576, 506, 649, 0,
	570, 585, 653, 584, 646, 401, 0, 422, 582, 529,
	0, 574, 548, 0, 575, 544, 579, 0, 518, 0,
	430, 458, 470, 487, 490, 519, 604, 605, 606, 296,
	489, 608, 609, 610, 611, 612, 613, 614, 607, 461,
	551, 528, 554, 469, 531, 530, 0, 0, 565, 485,
	566, 567, 385, 386, 387, 388, 347, 592, 314, 488,
	411, 0, 552, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 558, 555, 658, 0, 615, 616, 0, 0,
	482, 483, 342, 349, 501, 351, 313, 400, 344, 467,
	358, 0, 494, 559, 495, 618, 621, 619, 620, 392,
	354, 355, 426, 359, 369, 414, 466, 398, 419, 311,
	457, 428, 374, 545, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 600, 599, 598, 597, 596, 595, 594, 593, 0,
	0, 542, 443, 323, 285, 319, 320, 327, 647, 644,
	448, 648, 0, 293, 522, 367, 0, 410, 341, 587,
	588, 0, 639, 241, 242, 243, 244, 245, 246, 247,
	248, 286, 249, 250, 251, 252, 253, 254, 255, 258,
	259, 260, 261, 262, 263, 264, 265, 590, 256, 257,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 0, 0, 0, 287, 288, 289,
	290, 0, 0, 281, 282, 283, 284, 0, 0, 0,
	473, 474, 475, 497, 0, 459, 521, 645, 0, 0,
	0, 0, 0, 0, 0, 571, 583, 617, 0, 627,
	628, 630, 632, 631, 634, 433, 434, 0, 636, 637,
	638, 635, 371, 420, 439, 427, 0, 651, 512, 513,
	652, 623, 397, 0, 527, 560, 549, 633, 515, 0,
	2043, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 366, 564, 546, 556, 547, 532, 533, 534,
	541, 346, 535, 536, 537, 507, 538, 508, 539, 540,
	0, 563, 514, 429, 381, 581, 580, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	0, 0, 0, 0, 309, 229, 509, 629, 511, 510,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 436, 455, 310, 424, 468, 315, 432, 447,
	305, 396, 421, 0, 0, 301, 453, 431, 378, 356,
	357, 300, 0, 415, 334, 348, 331, 394, 0, 452,
	480, 330, 471, 0, 463, 303, 0, 462, 393, 449,
	454, 379, 373, 0, 302, 451, 377, 372, 360, 338,
	496, 361, 362, 352, 405, 370, 406, 353, 383, 382,
	384, 0, 0, 0, 0, 0, 491, 492, 0, 0,
	640, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 622, 0, 0, 626, 0, 465, 0, 0,
	0, 0, 0, 0, 435, 0, 0, 363, 0, 0,
	0, 481, 0, 418, 399, 654, 0, 0, 416, 368,
	450, 407, 456, 437, 464, 412, 408, 294, 438, 333,
	380, 306, 308, 328, 335, 337, 339, 340, 389, 390,
	402, 423, 440, 441, 442, 332, 316, 417, 317, 350,
	318, 295, 324, 322, 325, 425, 326, 297, 403, 446,
	0, 345, 413, 376, 298, 375, 404, 445, 444, 307,
	472, 478, 479, 568, 0, 484, 655, 656, 657, 493,
	0, 409, 498, 499, 500, 502, 503, 504, 505, 569,
	586, 553, 523, 486, 577, 520, 524, 525, 589, 0,
	0, 0, 477, 364, 365, 0, 343, 291, 292, 650,
	329, 395, 591, 624, 625, 516, 0, 578, 517, 526,
	321, 550, 562, 561, 391, 476, 0, 573, 576, 506,
	649, 0, 570, 585, 653, 584, 646, 401, 0, 422,
	582, 529, 0, 574, 548, 0, 575, 544, 579, 0,
	518, 0, 430, 458, 470, 487, 490, 519, 604, 605,
	606, 296, 489, 608, 609, 610, 611, 612, 613, 614,
	607, 461, 551, 528, 554, 469, 531, 530, 0, 0,
	565, 485, 566, 567, 385, 386, 387, 388, 347, 592,
	314, 488, 411, 0, 552, 0, 0, 0, 0, 0,
	0, 0, 0, 557, 558, 555, 658, 0, 615, 616,
	0, 0, 482, 483, 342, 349, 501, 351, 313, 400,
	344, 467, 358, 0, 494, 559, 495, 618, 621, 619,
	620, 392, 354, 355, 426, 359, 369, 414, 466, 398,
	419, 311, 457, 428, 374, 545, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 600, 599, 598, 597, 596, 595, 594,
	593, 0, 0, 542, 443, 323, 285, 319, 320, 327,
	647, 644, 448, 648, 0, 293, 522, 367, 0, 410,
	341, 587, 588, 0, 639, 241, 242, 243, 244, 245,
	246, 247, 248, 286, 249, 250, 251, 252, 253, 254,
	255, 258, 259, 260, 261, 262, 263, 264, 265, 590,
	256, 257, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 0, 0, 0, 287,
	288, 289, 290, 0, 0, 281, 282, 283, 284, 0,
	0, 0, 473, 474, 475, 497, 0, 459, 521, 645,
	0, 0, 0, 0, 0, 0, 0, 571, 583, 617,
	0, 627, 628, 630, 632, 631, 634, 433, 434, 0,
	636, 637, 638, 635, 371, 420, 439, 427, 0, 651,
	512, 513, 652, 623, 397, 0, 527, 560, 549, 633,
	515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 366, 564, 546, 556, 547, 532,
	533, 534, 541, 346, 535, 536, 537, 507, 538, 508,
	539, 540, 0, 563, 514, 429, 381, 581, 580, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	0, 0, 1549, 0, 0, 0, 309, 229, 509, 629,
	511, 510, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 436, 455, 310, 424, 468, 315,
	432, 447, 305, 396, 421, 0, 0, 301, 453, 431,
	378, 356, 357, 300, 0, 415, 334, 348, 331, 394,
	0, 452, 480, 330, 471, 0, 463, 303, 0, 462,
	393, 449, 454, 379, 373, 0, 302, 451, 377, 372,
	360, 338, 496, 361, 362, 352, 405, 370, 406, 353,
	383, 382, 384, 0, 0, 0, 0, 0, 491, 492,
	0, 0, 640, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 622, 0, 0, 626, 0, 465,
	0, 0, 0, 0, 0, 0, 435, 0, 0, 363,
	0, 0, 0, 481, 0, 418, 399, 654, 0, 0,
	416, 368, 450, 407, 456, 437, 464, 1948, 408, 294,
	438, 333, 380, 306, 308, 328, 335, 337, 339, 340,
	389, 390, 402, 423, 440, 441, 442, 332, 316, 417,
	317, 350, 318, 295, 324, 322, 325, 425, 326, 297,
	403, 446, 0, 345, 413, 376, 298, 375, 404, 445,
	444, 307, 472, 478, 479, 568, 0, 484, 655, 656,
	657, 493, 0, 409, 498, 499, 500, 502, 503, 504,
	505, 569, 586, 553, 523, 486, 577, 520, 524, 525,
	589, 0, 0, 0, 477, 364, 365, 0, 343, 291,
	292, 650, 329, 395, 591, 624, 625, 516, 0, 578,
	517, 526, 321, 550, 562, 561, 391, 476, 0, 573,
	576, 506, 649, 0, 570, 585, 653, 584, 646, 401,
	0, 422, 582, 529, 0, 574, 548, 0, 575, 544,
	579, 0, 518, 0, 430, 458, 470, 487, 490, 519,
	604, 605, 606, 296, 489, 608, 609, 610, 611, 612,
	613, 614, 607, 461, 551, 528, 554, 469, 531, 530,
	0, 0, 565, 485, 566, 567, 385, 386, 387, 388,
	347, 592, 314, 488, 411, 0, 552, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 558, 555, 658, 0,
	615, 616, 0, 0, 482, 483, 342, 349, 501, 351,
	313, 400, 344, 467, 358, 0, 494, 559, 495, 618,
	621, 619, 620, 392, 354, 355, 426, 359, 369, 414,
	466, 398, 419, 311, 457, 428, 374, 545, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 600, 599, 598, 597, 596,
	595, 594, 593, 0, 0, 542, 443, 323, 285, 319,
	320, 327, 647, 644, 448, 648, 0, 293, 522, 367,
	0, 410, 341, 587, 588, 0, 639, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 590, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 473, 474, 475, 497, 0, 459,
	521, 645, 0, 0, 0, 0, 0, 0, 0, 571,
	583, 617, 0, 627, 628, 630, 632, 631, 634, 433,
	434, 0, 636, 637, 638, 635, 371, 420, 439, 427,
	0, 651, 512, 513, 652, 623, 397, 0, 527, 560,
	549, 633, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 366, 564, 546, 556,
	547, 532, 533, 534, 541, 346, 535, 536, 537, 507,
	538, 508, 539, 540, 0, 563, 514, 429, 381, 581,
	580, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 0, 0, 0, 0, 0, 0, 309, 229,
	509, 629, 511, 510, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 436, 455, 310, 424,
	468, 315, 432, 447, 305, 396, 421, 0, 0, 301,
	453, 431, 378, 356, 357, 300, 0, 415, 334, 348,
	331, 394, 0, 452, 480, 330, 471, 0, 463, 303,
	0, 462, 393, 449, 454, 379, 373, 0, 302, 451,
	377, 372, 360, 338, 496, 361, 362, 352, 405, 370,
	406, 353, 383, 382, 384, 0, 0, 0, 0, 0,
	491, 492, 0, 0, 640, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 622, 0, 0, 626,
	0, 465, 0, 0, 1578, 0, 0, 0, 435, 0,
	0, 363, 0, 0, 0, 481, 0, 418, 399, 654,
	0, 0, 416, 368, 450, 407, 456, 437, 464, 412,
	408, 294, 438, 333, 380, 306, 308, 328, 335, 337,
	339, 340, 389, 390, 402, 423, 440, 441, 442, 332,
	316, 417, 317, 350, 318, 295, 324, 322, 325, 425,
	326, 297, 403, 446, 0, 345, 413, 376, 298, 375,
	404, 445, 444, 307, 472, 478, 479, 568, 0, 484,
	655, 656, 657, 493, 0, 409, 498, 499, 500, 502,
	503, 504, 505, 569, 586, 553, 523, 486, 577, 520,
	524, 525, 589, 0, 0, 0, 477, 364, 365, 0,
	343, 291, 292, 650, 329, 395, 591, 624, 625, 516,
	0, 578, 517, 526, 321, 550, 562, 561, 391, 476,
	0, 573, 576, 506, 649, 0, 570, 585, 653, 584,
	646, 401, 0, 422, 582, 529, 0, 574, 548, 0,
	575, 544, 579, 0, 518, 0, 430, 458, 470, 487,
	490, 519, 604, 605, 606, 296, 489, 608, 609, 610,
	611, 612, 613, 614, 607, 461, 551, 528, 554, 469,
	531, 530, 0, 0, 565, 485, 566, 567, 385, 386,
	387, 388, 347, 592, 314, 488, 411, 0, 552, 0,
	0, 0, 0, 0, 0, 0, 0, 557, 558, 555,
	658, 0, 615, 616, 0, 0, 482, 483, 342, 349,
	501, 351, 313, 400, 344, 467, 358, 0, 494, 559,
	495, 618, 621, 619, 620, 392, 354, 355, 426, 359,
	369, 414, 466, 398, 419, 311, 457, 428, 374, 545,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 600, 599, 598,
	597, 596, 595, 594, 593, 0, 0, 542, 443, 323,
	285, 319, 320, 327, 647, 644, 448, 648, 0, 293,
	522, 367, 0, 410, 341, 587, 588, 0, 639, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 590, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 473, 474, 475, 497,
	0, 459, 521, 645, 0, 0, 0, 0, 0, 0,
	0, 571, 583, 617, 0, 627, 628, 630, 632, 631,
	634, 433, 434, 0, 636, 637, 638, 635, 371, 420,
	439, 427, 0, 651, 512, 513, 652, 623, 397, 0,
	527, 560, 549, 633, 515, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 665, 336, 0, 0, 366, 564,
	546, 556, 547, 532, 533, 534, 541, 346, 535, 536,
	537, 507, 538, 508, 539, 540, 0, 563, 514, 429,
	381, 581, 580, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 509, 629, 511, 510, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 436, 455,
	310, 424, 468, 315, 432, 447, 305, 396, 421, 0,
	0, 301, 453, 431, 378, 356, 357, 300, 0, 415,
	334, 348, 331, 394, 0, 452, 480, 330, 471, 0,
	463, 303, 0, 462, 393, 449, 454, 379, 373, 0,
	302, 451, 377, 372, 360, 338, 496, 361, 362, 352,
	405, 370, 406, 353, 383, 382, 384, 0, 0, 0,
	0, 0, 491, 492, 0, 0, 640, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 622, 0,
	0, 626, 0, 465, 0, 0, 0, 0, 0, 0,
	435, 0, 0, 363, 0, 0, 0, 481, 0, 418,
	399, 654, 0, 0, 416, 368, 450, 407, 456, 437,
	464, 412, 408, 294, 438, 333, 380, 306, 308, 328,
	335, 337, 339, 340, 389, 390, 402, 423, 440, 441,
	442, 332, 316, 417, 317, 350, 318, 295, 324, 322,
	325, 425, 326, 297, 403, 446, 0, 345, 413, 376,
	298, 375, 404, 445, 444, 307, 472, 478, 479, 568,
	0, 484, 655, 656, 657, 493, 0, 409, 498, 499,
	500, 502, 503, 504, 505, 569, 586, 553, 523, 486,
	577, 520, 524, 525, 589, 0, 0, 0, 477, 364,
	365, 0, 343, 291, 292, 650, 329, 395, 591, 624,
	625, 516, 0, 578, 517, 526, 321, 550, 562, 561,
	391, 476, 0, 573, 576, 506, 649, 0, 570, 585,
	653, 584, 646, 401, 0, 422, 582, 529, 0, 574,
	548, 0, 575, 544, 579, 0, 518, 0, 430, 458,
	470, 487, 490, 519, 604, 605, 606, 296, 489, 608,
	609, 610, 611, 612, 613, 614, 607, 461, 551, 528,
	554, 469, 531, 530, 0, 0, 565, 485, 566, 567,
	385, 386, 387, 388, 347, 592, 314, 488, 411, 0,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 557,
	558, 555, 658, 0, 615, 616, 0, 0, 482, 483,
	342, 349, 501, 351, 313, 400, 344, 467, 358, 0,
	494, 559, 495, 618, 621, 619, 620, 392, 354, 355,
	426, 359, 369, 414, 466, 398, 419, 311, 457, 428,
	374, 545, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 600,
	599, 598, 597, 596, 595, 594, 593, 0, 0, 542,
	443, 323, 285, 319, 320, 327, 647, 644, 448, 648,
	0, 293, 522, 367, 0, 410, 341, 587, 588, 0,
	639, 241, 242, 243, 244, 245, 246, 247, 248, 286,
	249, 250, 251, 252, 253, 254, 255, 258, 259, 260,
	261, 262, 263, 264, 265, 590, 256, 257, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 0, 0, 0, 287, 288, 289, 290, 0,
	0, 281, 282, 283, 284, 0, 0, 0, 473, 474,
	475, 497, 0, 459, 521, 645, 0, 0, 0, 0,
	0, 0, 0, 571, 583, 617, 0, 627, 628, 630,
	632, 631, 634, 433, 434, 0, 636, 637, 638, 635,
	371, 420, 439, 427, 0, 651, 512, 513, 652, 623,
	397, 0, 527, 560, 549, 633, 515, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 0, 0,
	366, 564, 546, 556, 547, 532, 533, 534, 541, 346,
	535, 536, 537, 507, 538, 508, 539, 540, 0, 563,
	514, 429, 381, 581, 580, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 309, 229, 509, 629, 511, 510, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	436, 455, 310, 424, 468, 315, 432, 447, 305, 396,
	421, 0, 0, 301, 453, 431, 378, 356, 357, 300,
	0, 415, 334, 348, 331, 394, 0, 452, 480, 330,
	471, 0, 463, 303, 0, 462, 393, 449, 454, 379,
	373, 0, 302, 451, 377, 372, 360, 338, 496, 361,
	362, 352, 405, 370, 406, 353, 383, 382, 384, 0,
	0, 0, 0, 0, 491, 492, 0, 0, 640, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	622, 0, 675, 626, 0, 465, 0, 0, 0, 0,
	0, 0, 435, 0, 0, 363, 0, 0, 0, 481,
	0, 418, 399, 654, 0, 0, 416, 368, 450, 407,
	456, 437, 464, 412, 408, 294, 438, 333, 380, 306,
	308, 328, 335, 337, 339, 340, 389, 390, 402, 423,
	440, 441, 442, 332, 316, 417, 317, 350, 318, 295,
	324, 322, 325, 425, 326, 297, 403, 446, 0, 345,
	413, 376, 298, 375, 404, 445, 444, 307, 472, 478,
	479, 568, 0, 484, 655, 656, 657, 493, 0, 409,
	498, 499, 500, 502, 503, 504, 505, 569, 586, 553,
	523, 486, 577, 520, 524, 525, 589, 0, 0, 0,
	477, 364, 365, 0, 343, 291, 292, 650, 329, 395,
	591, 624, 625, 516, 0, 578, 517, 526, 321, 550,
	562, 561, 391, 476, 0, 573, 576, 506, 649, 0,
	570, 585, 653, 584, 646, 401, 0, 422, 582, 529,
	0, 574, 548, 0, 575, 544, 579, 0, 518, 0,
	430, 458, 470, 487, 490, 519, 604, 605, 606, 296,
	489, 608, 609, 610, 611, 612, 613, 614, 607, 461,
	551, 528, 554, 469, 531, 530, 0, 0, 565, 485,
	566, 567, 385, 386, 387, 388, 347, 592, 314, 488,
	411, 0, 552, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 558, 555, 658, 0, 615, 616, 0, 0,
	482, 483, 342, 349, 501, 351, 313, 400, 344, 467,
	358, 0, 494, 559, 495, 618, 621, 619, 620, 392,
	354, 355, 426, 359, 369, 414, 466, 398, 419, 311,
	457, 428, 374, 545, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 600, 599, 598, 597, 596, 595, 594, 593, 0,
	0, 542, 443, 323, 285, 319, 320, 327, 647, 644,
	448, 648, 0, 293, 522, 367, 0, 410, 341, 587,
	588, 0, 639, 241, 242, 243, 244, 245, 246, 247,
	248, 286, 249, 250, 251, 252, 253, 254, 255, 258,
	259, 260, 261, 262, 263, 264, 265, 590, 256, 257,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 0, 0, 0, 287, 288, 289,
	290, 0, 0, 281, 282, 283, 284, 0, 0, 0,
	473, 474, 475, 497, 0, 459, 521, 645, 0, 0,
	0, 0, 0, 0, 0, 571, 583, 617, 0, 627,
	628, 630, 632, 631, 634, 433, 434, 0, 636, 637,
	638, 635, 371, 420, 439, 427, 0, 651, 512, 513,
	652, 623, 397, 0, 527, 560, 549, 633, 515, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 366, 564, 546, 556, 547, 532, 533, 534,
	541, 346, 535, 536, 537, 507, 538, 508, 539, 540,
	0, 563, 514, 429, 381, 581, 580, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	0, 0, 0, 0, 309, 229, 509, 629, 511, 510,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 436, 455, 310, 424, 468, 315, 432, 447,
	305, 396, 421, 0, 0, 301, 453, 431, 378, 356,
	357, 300, 0, 415, 334, 348, 331, 394, 0, 452,
	480, 330, 471, 0, 463, 303, 0, 462, 393, 449,
	454, 379, 373, 0, 302, 451, 377, 372, 360, 338,
	496, 361, 362, 352, 405, 370, 406, 353, 383, 382,
	384, 0, 0, 0, 0, 0, 491, 492, 0, 0,
	640, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 622, 0, 0, 626, 0, 465, 0, 0,
	0, 0, 0, 0, 435, 0, 0, 363, 0, 0,
	0, 481, 0, 418, 399, 654, 0, 0, 416, 368,
	450, 407, 456, 437, 464, 412, 408, 294, 438, 333,
	380, 306, 308, 328, 335, 337, 339, 340, 389, 390,
	402, 423, 440, 441, 442, 332, 316, 417, 317, 350,
	318, 295, 324, 322, 325, 425, 326, 297, 403, 446,
	0, 345, 413, 376, 298, 375, 404, 445, 444, 307,
	472, 478, 479, 568, 0, 484, 655, 656, 657, 493,
	0, 409, 498, 499, 500, 502, 503, 504, 505, 569,
	586, 553, 523, 486, 577, 520, 524, 525, 589, 0,
	0, 0, 477, 364, 365, 0, 343, 291, 292, 650,
	329, 395, 591, 624, 625, 516, 0, 578, 517, 526,
	321, 550, 562, 561, 391, 476, 0, 573, 576, 506,
	649, 0, 570, 585, 653, 584, 646, 401, 0, 422,
	582, 529, 0, 574, 548, 0, 575, 544, 579, 0,
	518, 0, 430, 458, 470, 487, 490, 519, 604, 605,
	606, 296, 489, 608, 609, 610, 611, 612, 613, 614,
	607, 461, 551, 528, 554, 469, 531, 530, 0, 0,
	565, 485, 566, 567, 385, 386, 387, 388, 347, 592,
	314, 488, 411, 0, 552, 0, 0, 0, 0, 0,
	0, 0, 0, 557, 558, 555, 658, 0, 615, 616,
	0, 0, 482, 483, 342, 349, 501, 351, 313, 400,
	344, 467, 358, 0, 494, 559, 495, 618, 621, 619,
	620, 392, 354, 355, 426, 359, 369, 414, 466, 398,
	419, 311, 457, 428, 374, 545, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 600, 599, 598, 597, 596, 595, 594,
	593, 974, 0, 542, 443, 323, 285, 319, 320, 327,
	647, 644, 448, 648, 0, 293, 522, 367, 0, 410,
	341, 587, 588, 0, 639, 241, 242, 243, 244, 245,
	246, 247, 248, 286, 249, 250, 251, 252, 253, 254,
	255, 258, 259, 260, 261, 262, 263, 264, 265, 590,
	256, 257, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 0, 0, 0, 287,
	288, 289, 290, 0, 0, 281, 282, 283, 284, 0,
	0, 0, 473, 474, 475, 497, 0, 459, 521, 645,
	0, 0, 0, 0, 0, 0, 0, 571, 583, 617,
	0, 627, 628, 630, 632, 631, 634, 433, 434, 0,
	636, 637, 638, 635, 371, 420, 439, 427, 0, 651,
	512, 513, 652, 623, 397, 0, 527, 560, 549, 633,
	515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 366, 564, 546, 556, 547, 532,
	533, 534, 541, 346, 535, 536, 537, 507, 538, 508,
	539, 540, 0, 563, 514, 429, 381, 581, 580, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	0, 0, 0, 0, 0, 0, 309, 229, 509, 629,
	511, 510, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 436, 455, 310, 424, 468, 315,
	432, 447, 305, 396, 421, 0, 0, 301, 453, 431,
	378, 356, 357, 300, 0, 415, 334, 348, 331, 394,
	0, 452, 480, 330, 471, 0, 463, 303, 0, 462,
	393, 449, 454, 379, 373, 0, 302, 451, 377, 372,
	360, 338, 496, 361, 362, 352, 405, 370, 406, 353,
	383, 382, 384, 0, 0, 0, 0, 0, 491, 492,
	0, 0, 640, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 622, 0, 0, 626, 0, 465,
	0, 0, 0, 0, 0, 0, 435, 0, 0, 363,
	0, 0, 0, 481, 0, 418, 399, 654, 0, 0,
	416, 368, 450, 407, 456, 437, 464, 412, 408, 294,
	438, 333, 380, 306, 308, 328, 335, 337, 339, 340,
	389, 390, 402, 423, 440, 441, 442, 332, 316, 417,
	317, 350, 318, 295, 324, 322, 325, 425, 326, 297,
	403, 446, 0, 345, 413, 376, 298, 375, 404, 445,
	444, 307, 472, 478, 479, 568, 0, 484, 655, 656,
	657, 493, 0, 409, 498, 499, 500, 502, 503, 504,
	505, 569, 586, 553, 523, 486, 577, 520, 524, 525,
	589, 0, 0, 0, 477, 364, 365, 0, 343, 291,
	292, 650, 329, 395, 591, 624, 625, 516, 0, 578,
	517, 526, 321, 550, 562, 561, 391, 476, 0, 573,
	576, 506, 649, 0, 570, 585, 653, 584, 646, 401,
	0, 422, 582, 529, 0, 574, 548, 0, 575, 544,
	579, 0, 518, 0, 430, 458, 470, 487, 490, 519,
	604, 605, 606, 296, 489, 608, 609, 610, 611, 612,
	613, 614, 607, 461, 551, 528, 554, 469, 531, 530,
	0, 0, 565, 485, 566, 567, 385, 386, 387, 388,
	347, 592, 314, 488, 411, 0, 552, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 558, 555, 658, 0,
	615, 616, 0, 0, 482, 483, 342, 349, 501, 351,
	313, 400, 344, 467, 358, 0, 494, 559, 495, 618,
	621, 619, 620, 392, 354, 355, 426, 359, 369, 414,
	466, 398, 419, 311, 457, 428, 374, 545, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 600, 599, 598, 597, 596,
	595, 594, 593, 0, 0, 542, 443, 323, 285, 319,
	320, 327, 647, 644, 448, 648, 0, 293, 522, 367,
	0, 410, 341, 587, 588, 0, 639, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 590, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 473, 474, 475, 497, 0, 459,
	521, 645, 0, 0, 0, 0, 0, 0, 0, 571,
	583, 617, 0, 627, 628, 630, 632, 631, 634, 433,
	434, 0, 636, 637, 638, 635, 371, 420, 439, 427,
	0, 651, 512, 513, 652, 623, 397, 0, 527, 560,
	549, 633, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 366, 564, 546, 556,
	547, 532, 533, 534, 541, 346, 535, 536, 537, 507,
	538, 508, 539, 540, 0, 563, 514, 429, 381, 581,
	580, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 0, 0, 0, 0, 0, 0, 309, 229,
	509, 629, 511, 510, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 436, 455, 310, 424,
	468, 315, 432, 1898, 305, 396, 421, 0, 0, 301,
	453, 431, 378, 356, 357, 300, 0, 415, 334, 348,
	331, 394, 0, 452, 480, 330, 471, 0, 463, 303,
	0, 462, 393, 449, 454, 379, 373, 0, 302, 451,
	377, 372, 360, 338, 496, 361, 362, 352, 405, 370,
	406, 353, 383, 382, 384, 0, 0, 0, 0, 0,
	491, 492, 0, 0, 640, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 622, 0, 0, 626,
	0, 465, 0, 0, 0, 0, 0, 0, 435, 0,
	0, 363, 0, 0, 0, 481, 0, 418, 399, 654,
	0, 0, 416, 368, 450, 407, 456, 437, 464, 412,
	408, 294, 438, 333, 380, 306, 308, 328, 335, 337,
	339, 340, 389, 390, 402, 423, 440, 441, 442, 332,
	316, 417, 317, 350, 318, 295, 324, 322, 325, 425,
	326, 297, 403, 446, 0, 345, 413, 376, 298, 375,
	404, 445, 444, 307, 472, 478, 479, 568, 0, 484,
	655, 656, 657, 493, 0, 409, 498, 499, 500, 502,
	503, 504, 505, 569, 586, 553, 523, 486, 577, 520,
	524, 525, 589, 0, 0, 0, 477, 364, 365, 0,
	343, 291, 292, 650, 329, 395, 591, 624, 625, 516,
	0, 578, 517, 526, 321, 550, 562, 561, 391, 476,
	0, 573, 576, 506, 649, 0, 570, 585, 653, 584,
	646, 401, 0, 422, 582, 529, 0, 574, 548, 0,
	575, 544, 579, 0, 518, 0, 430, 458, 470, 487,
	490, 519, 604, 605, 606, 296, 489, 608, 609, 610,
	611, 612, 613, 614, 607, 461, 551, 528, 554, 469,
	531, 530, 0, 0, 565, 485, 566, 567, 385, 386,
	387, 388, 347, 592, 314, 488, 411, 0, 552, 0,
	0, 0, 0, 0, 0, 0, 0, 557, 558, 555,
	658, 0, 615, 616, 0, 0, 482, 483, 342, 349,
	501, 351, 313, 400, 344, 467, 358, 0, 494, 559,
	495, 618, 621, 619, 620, 392, 354, 355, 426, 359,
	369, 414, 466, 398, 419, 311, 457, 428, 374, 545,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 600, 599, 598,
	597, 596, 595, 594, 593, 0, 0, 542, 443, 323,
	285, 319, 320, 327, 647, 644, 448, 648, 0, 293,
	522, 367, 0, 410, 341, 587, 588, 0, 639, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 590, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 473, 474, 475, 497,
	0, 459, 521, 645, 0, 0, 0, 0, 0, 0,
	0, 571, 583, 617, 0, 627, 628, 630, 632, 631,
	634, 433, 434, 0, 636, 637, 638, 635, 371, 420,
	439, 427, 0, 651, 512, 513, 652, 623, 397, 0,
	527, 560, 549, 633, 515, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 366, 564,
	546, 556, 547, 532, 533, 534, 541, 346, 535, 536,
	537, 507, 538, 508, 539, 540, 0, 563, 514, 429,
	381, 581, 580, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 509, 629, 511, 510, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 436, 1528,
	310, 424, 468, 315, 432, 447, 305, 396, 421, 0,
	0, 301, 453, 431, 378, 356, 357, 300, 0, 415,
	334, 348, 331, 394, 0, 452, 480, 330, 471, 0,
	463, 303, 0, 462, 393, 449, 454, 379, 373, 0,
	302, 451, 377, 372, 360, 338, 496, 361, 362, 352,
	405, 370, 406, 353, 383, 382, 384, 0, 0, 0,
	0, 0, 491, 492, 0, 0, 640, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 622, 0,
	0, 626, 0, 465, 0, 0, 0, 0, 0, 0,
	435, 0, 0, 363, 0, 0, 0, 481, 0, 418,
	399, 654, 0, 0, 416, 368, 450, 407, 456, 437,
	464, 412, 408, 294, 438, 333, 380, 306, 308, 328,
	335, 337, 339, 340, 389, 390, 402, 423, 440, 441,
	442, 332, 316, 417, 317, 350, 318, 295, 324, 322,
	325, 425, 326, 297, 403, 446, 0, 345, 413, 376,
	298, 375, 404, 445, 444, 307, 472, 478, 479, 568,
	0, 484, 655, 656, 657, 493, 0, 409, 498, 499,
	500, 502, 503, 504, 505, 569, 586, 553, 523, 486,
	577, 520, 524, 525, 589, 0, 0, 0, 477, 364,
	365, 0, 343, 291, 292, 650, 329, 395, 591, 624,
	625, 516, 0, 578, 517, 526, 321, 550, 562, 561,
	391, 476, 0, 573, 576, 506, 649, 0, 570, 585,
	653, 584, 646, 401, 0, 422, 582, 529, 0, 574,
	548, 0, 575, 544, 579, 0, 518, 0, 430, 458,
	470, 487, 490, 519, 604, 605, 606, 296, 489, 608,
	609, 610, 611, 612, 613, 614, 607, 461, 551, 528,
	554, 469, 531, 530, 0, 0, 565, 485, 566, 567,
	385, 386, 387, 388, 347, 592, 314, 488, 411, 0,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 557,
	558, 555, 658, 0, 615, 616, 0, 0, 482, 483,
	342, 349, 501, 351, 313, 400, 344, 467, 358, 0,
	494, 559, 495, 618, 621, 619, 620, 392, 354, 355,
	426, 359, 369, 414, 466, 398, 419, 311, 457, 428,
	374, 545, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 600,
	599, 598, 597, 596, 595, 594, 593, 0, 0, 542,
	443, 323, 285, 319, 320, 327, 647, 644, 448, 648,
	0, 293, 522, 367, 0, 410, 341, 587, 588, 0,
	639, 241, 242, 243, 244, 245, 246, 247, 248, 286,
	249, 250, 251, 252, 253, 254, 255, 258, 259, 260,
	261, 262, 263, 264, 265, 590, 256, 257, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 0, 0, 0, 287, 288, 289, 290, 0,
	0, 281, 282, 283, 284, 0, 0, 0, 473, 474,
	475, 497, 0, 459, 521, 645, 0, 0, 0, 0,
	0, 0, 0, 571, 583, 617, 0, 627, 628, 630,
	632, 631, 634, 433, 434, 0, 636, 637, 638, 635,
	371, 420, 439, 427, 0, 651, 512, 513, 652, 623,
	397, 0, 527, 560, 549, 633, 515, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 0, 0,
	366, 564, 546, 556, 547, 532, 533, 534, 541, 346,
	535, 536, 537, 507, 538, 508, 539, 540, 0, 563,
	514, 429, 381, 581, 580, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 309, 229, 509, 629, 511, 510, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	436, 1526, 310, 424, 468, 315, 432, 447, 305, 396,
	421, 0, 0, 301, 453, 431, 378, 356, 357, 300,
	0, 415, 334, 348, 331, 394, 0, 452, 480, 330,
	471, 0, 463, 303, 0, 462, 393, 449, 454, 379,
	373, 0, 302, 451, 377, 372, 360, 338, 496, 361,
	362, 352, 405, 370, 406, 353, 383, 382, 384, 0,
	0, 0, 0, 0, 491, 492, 0, 0, 640, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	622, 0, 0, 626, 0, 465, 0, 0, 0, 0,
	0, 0, 435, 0, 0, 363, 0, 0, 0, 481,
	0, 418, 399, 654, 0, 0, 416, 368, 450, 407,
	456, 437, 464, 412, 408, 294, 438, 333, 380, 306,
	308, 328, 335, 337, 339, 340, 389, 390, 402, 423,
	440, 441, 442, 332, 316, 417, 317, 350, 318, 295,
	324, 322, 325, 425, 326, 297, 403, 446, 0, 345,
	413, 376, 298, 375, 404, 445, 444, 307, 472, 478,
	479, 568, 0, 484, 655, 656, 657, 493, 0, 409,
	498, 499, 500, 502, 503, 504, 505, 569, 586, 553,
	523, 486, 577, 520, 524, 525, 589, 0, 0, 0,
	477, 364, 365, 0, 343, 291, 292, 650, 329, 395,
	591, 624, 625, 516, 0, 578, 517, 526, 321, 550,
	562, 561, 391, 476, 0, 573, 576, 506, 649, 0,
	570, 585, 653, 584, 646, 401, 0, 422, 582, 529,
	0, 574, 548, 0, 575, 544, 579, 0, 518, 0,
	430, 458, 470, 487, 490, 519, 604, 605, 606, 296,
	489, 608, 609, 610, 611, 612, 613, 614, 607, 461,
	551, 528, 554, 469, 531, 530, 0, 0, 565, 485,
	566, 567, 385, 386, 387, 388, 347, 592, 314, 488,
	411, 0, 552, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 558, 555, 658, 0, 615, 616, 0, 0,
	482, 483, 342, 349, 501, 351, 313, 400, 344, 467,
	358, 0, 494, 559, 495, 618, 621, 619, 620, 392,
	354, 355, 426, 359, 369, 414, 466, 398, 419, 311,
	457, 428, 374, 545, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 600, 599, 598, 597, 596, 595, 594, 593, 0,
	0, 542, 443, 323, 285, 319, 320, 327, 647, 644,
	448, 648, 0, 293, 522, 367, 0, 410, 341, 587,
	588, 0, 639, 241, 242, 243, 244, 245, 246, 247,
	248, 286, 249, 250, 251, 252, 253, 254, 255, 258,
	259, 260, 261, 262, 263, 264, 265, 590, 256, 257,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 0, 0, 0, 287, 288, 289,
	290, 0, 0, 281, 282, 283, 284, 0, 0, 0,
	473, 474, 475, 497, 0, 459, 521, 645, 0, 0,
	0, 0, 0, 0, 0, 571, 583, 617, 0, 627,
	628, 630, 632, 631, 634, 433, 434, 0, 636, 637,
	638, 635, 371, 420, 439, 427, 0, 651, 512, 513,
	652, 623, 397, 0, 527, 560, 549, 633, 515, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 366, 564, 546, 556, 547, 532, 533, 534,
	541, 346, 535, 536, 537, 507, 538, 508, 539, 540,
	0, 563, 514, 429, 381, 581, 580, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	0, 0, 0, 0, 309, 229, 509, 629, 511, 510,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 436, 455, 310, 424, 468, 315, 432, 1405,
	305, 396, 421, 0, 0, 301, 453, 431, 378, 356,
	357, 300, 0, 415, 334, 348, 331, 394, 0, 452,
	480, 330, 471, 0, 463, 303, 0, 462, 393, 449,
	454, 379, 373, 0, 302, 451, 377, 372, 360, 338,
	496, 361, 362, 352, 405, 370, 406, 353, 383, 382,
	384, 0, 0, 0, 0, 0, 491, 492, 0, 0,
	640, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 622, 0, 0, 626, 0, 465, 0, 0,
	0, 0, 0, 0, 435, 0, 0, 363, 0, 0,
	0, 481, 0, 418, 399, 654, 0, 0, 416, 368,
	450, 407, 456, 437, 464, 412, 408, 294, 438, 333,
	380, 306, 308, 328, 335, 337, 339, 340, 389, 390,
	402, 423, 440, 441, 442, 332, 316, 417, 317, 350,
	318, 295, 324, 322, 325, 425, 326, 297, 403, 446,
	0, 345, 413, 376, 298, 375, 404, 445, 444, 307,
	472, 478, 479, 568, 0, 484, 655, 656, 657, 493,
	0, 409, 498, 499, 500, 502, 503, 504, 505, 569,
	586, 553, 523, 486, 577, 520, 524, 525, 589, 0,
	0, 0, 477, 364, 365, 0, 343, 291, 292, 650,
	329, 395, 591, 624, 625, 516, 0, 578, 517, 526,
	321, 550, 562, 561, 391, 476, 0, 573, 576, 506,
	649, 0, 570, 585, 653, 584, 646, 401, 0, 422,
	582, 529, 0, 574, 548, 0, 575, 544, 579, 0,
	518, 0, 430, 458, 470, 487, 490, 519, 604, 605,
	606, 296, 489, 608, 609, 610, 611, 612, 613, 614,
	607, 461, 551, 528, 554, 469, 531, 530, 0, 0,
	565, 485, 566, 567, 385, 386, 387, 388, 347, 592,
	314, 488, 411, 0, 552, 0, 0, 0, 0, 0,
	0, 0, 0, 557, 558, 555, 658, 0, 615, 616,
	0, 0, 482, 483, 342, 349, 501, 351, 313, 400,
	344, 467, 358, 0, 494, 559, 495, 618, 621, 619,
	620, 392, 354, 355, 426, 359, 369, 414, 466, 398,
	419, 311, 457, 428, 374, 545, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 600, 599, 598, 597, 596, 595, 594,
	593, 0, 0, 542, 443, 323, 285, 319, 320, 327,
	647, 644, 448, 648, 0, 293, 522, 367, 0, 410,
	341, 587, 588, 0, 639, 241, 242, 243, 244, 245,
	246, 247, 248, 286, 249, 250, 251, 252, 253, 254,
	255, 258, 259, 260, 261, 262, 263, 264, 265, 590,
	256, 257, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 0, 0, 0, 287,
	288, 289, 290, 0, 0, 281, 282, 283, 284, 0,
	0, 0, 473, 474, 475, 497, 0, 459, 521, 645,
	0, 0, 0, 0, 0, 0, 0, 571, 583, 617,
	0, 627, 628, 630, 632, 631, 634, 433, 434, 0,
	636, 637, 638, 635, 371, 420, 439, 427, 0, 651,
	512, 513, 652, 623, 397, 0, 527, 560, 549, 633,
	515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 366, 564, 546, 556, 547, 532,
	533, 534, 541, 346, 535, 536, 537, 507, 538, 508,
	539, 540, 0, 563, 514, 429, 381, 581, 580, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	0, 0, 0, 0, 0, 0, 309, 229, 509, 629,
	511, 510, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 436, 455, 310, 424, 468, 315,
	432, 447, 305, 396, 421, 0, 0, 301, 453, 431,
	378, 356, 357, 300, 0, 415, 334, 348, 331, 394,
	0, 452, 480, 330, 471, 0, 463, 303, 0, 462,
	393, 449, 454, 379, 373, 0, 302, 451, 377, 372,
	360, 338, 496, 361, 362, 352, 405, 370, 406, 353,
	383, 382, 384, 0, 0, 0, 0, 0, 491, 492,
	0, 0, 640, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 622, 0, 0, 626, 0, 465,
	0, 0, 0, 0, 0, 0, 435, 0, 0, 363,
	0, 0, 0, 481, 0, 418, 399, 654, 0, 0,
	416, 368, 450, 407, 456, 437, 464, 412, 408, 294,
	438, 333, 380, 306, 308, 743, 335, 337, 339, 340,
	389, 390, 402, 423, 440, 441, 442, 332, 316, 417,
	317, 350, 318, 295, 324, 322, 325, 425, 326, 297,
	403, 446, 0, 345, 413, 376, 298, 375, 404, 445,
	444, 307, 472, 478, 479, 568, 0, 484, 655, 656,
	657, 493, 0, 409, 498, 499, 500, 502, 503, 504,
	505, 569, 586, 553, 523, 486, 577, 520, 524, 525,
	589, 0, 0, 0, 477, 364, 365, 0, 343, 291,
	292, 650, 329, 395, 591, 624, 625, 516, 0, 578,
	517, 526, 321, 550, 562, 561, 391, 476, 0, 573,
	576, 506, 649, 0, 570, 585, 653, 584, 646, 401,
	0, 422, 582, 529, 0, 574, 548, 0, 575, 544,
	579, 0, 518, 0, 430, 458, 470, 487, 490, 519,
	604, 605, 606, 296, 489, 608, 609, 610, 611, 612,
	613, 614, 607, 461, 551, 528, 554, 469, 531, 530,
	0, 0, 565, 485, 566, 567, 385, 386, 387, 388,
	347, 592, 314, 488, 411, 0, 552, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 558, 555, 658, 0,
	615, 616, 0, 0, 482, 483, 342, 349, 501, 351,
	313, 400, 344, 467, 358, 0, 494, 559, 495, 618,
	621, 619, 620, 392, 354, 355, 426, 359, 369, 414,
	466, 398, 419, 311, 457, 428, 374, 545, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 600, 599, 598, 597, 596,
	595, 594, 593, 0, 0, 542, 443, 323, 285, 319,
	320, 327, 647, 644, 448, 648, 0, 293, 522, 367,
	0, 410, 341, 587, 588, 0, 639, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 590, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 473, 474, 475, 497, 0, 459,
	521, 645, 0, 0, 0, 0, 0, 0, 0, 571,
	583, 617, 0, 627, 628, 630, 632, 631, 634, 433,
	434, 0, 636, 637, 638, 635, 371, 420, 439, 427,
	0, 651, 512, 513, 652, 623, 397, 0, 527, 560,
	549, 633, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 366, 564, 546, 556,
	547, 532, 533, 534, 541, 346, 535, 536, 537, 507,
	538, 508, 539, 540, 0, 563, 514, 429, 381, 581,
	580, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 0, 0, 0, 0, 0, 0, 309, 229,
	509, 629, 511, 510, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 436, 455, 310, 424,
	468, 315, 432, 447, 305, 396, 421, 0, 0, 301,
	453, 431, 378, 356, 357, 300, 0, 415, 334, 348,
	331, 394, 0, 452, 480, 330, 471, 0, 463, 303,
	0, 462, 393, 449, 454, 379, 373, 0, 302, 451,
	377, 372, 360, 338, 496, 361, 362, 352, 405, 370,
	406, 353, 383, 382, 384, 0, 0, 0, 0, 0,
	491, 492, 0, 0, 640, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 622, 0, 0, 626,
	0, 465, 0, 0, 0, 0, 0, 0, 435, 0,
	0, 363, 0, 0, 0, 481, 0, 418, 399, 654,
	0, 0, 416, 368, 450, 407, 456, 437, 464, 700,
	408, 294, 438, 333, 380, 306, 308, 328, 335, 337,
	339, 340, 389, 390, 402, 423, 440, 441, 442, 332,
	316, 417, 317, 350, 318, 295, 324, 322, 325, 425,
	326, 297, 403, 446, 0, 345, 413, 376, 298, 375,
	404, 445, 444, 307, 472, 478, 479, 568, 0, 484,
	655, 656, 657, 493, 0, 409, 498, 499, 500, 502,
	503, 504, 505, 569, 586, 553, 523, 486, 577, 520,
	524, 525, 589, 0, 0, 0, 477, 364, 365, 0,
	343, 291, 292, 650, 329, 395, 591, 624, 625, 516,
	0, 578, 517, 526, 321, 550, 562, 561, 391, 476,
	0, 573, 576, 506, 649, 0, 570, 585, 653, 584,
	646, 401, 0, 422, 582, 529, 0, 574, 548, 0,
	575, 544, 579, 0, 518, 0, 430, 458, 470, 487,
	490, 519, 604, 605, 606, 296, 489, 608, 609, 610,
	611, 612, 613, 701, 607, 461, 551, 528, 554, 469,
	531, 530, 0, 0, 565, 485, 566, 567, 385, 386,
	387, 388, 347, 592, 314, 488, 411, 0, 552, 0,
	0, 0, 0, 0, 0, 0, 0, 557, 558, 555,
	658, 0, 615, 616, 0, 0, 482, 483, 342, 349,
	501, 351, 313, 400, 344, 467, 358, 0, 494, 559,
	495, 618, 621, 619, 620, 392, 354, 355, 426, 359,
	369, 414, 466, 398, 419, 311, 457, 428, 374, 545,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 2030, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 600, 599, 598,
	597, 596, 595, 594, 593, 0, 0, 542, 443, 323,
	285, 319, 320, 327, 647, 644, 448, 648, 2033, 293,
	522, 367, 0, 410, 341, 587, 588, 0, 639, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 590, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 2007, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 473, 474, 475, 497,
	0, 459, 521, 645, 0, 0, 0, 0, 0, 0,
	0, 571, 583, 617, 0, 627, 628, 630, 632, 631,
	634, 433, 434, 0, 636, 637, 638, 635, 371, 420,
	439, 427, 0, 651, 512, 513, 652, 623, 0, 0,
	0, 0, 0, 0, 0, 0, 3761, 0, 0, 2030,
	2023, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2033, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2011, 0, 0, 0, 2007, 0,
	0, 0, 0, 0, 0, 2017, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2005, 2039, 0, 0, 2006,
	2008, 2010, 0, 2012, 2013, 2014, 2018, 2019, 2020, 2022,
	2025, 2026, 2027, 0, 0, 0, 0, 0, 0, 0,
	2015, 2024, 2016, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2023, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2031, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2028, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2004, 0,
	2011, 0, 0, 0, 0, 2003, 0, 0, 0, 0,
	0, 2017, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2021,
	0, 2005, 2039, 0, 0, 2006, 2008, 2010, 2009, 2012,
	2013, 2014, 2018, 2019, 2020, 2022, 2025, 2026, 2027, 0,
	0, 0, 0, 0, 0, 0, 2015, 2024, 2016, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2031, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2028, 0, 0,
	0, 0, 0, 0, 0, 0, 3624, 0, 0, 0,
	0, 0, 0, 0, 2004, 0, 0, 0, 0, 0,
	0, 2003, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2021, 0, 0, 0, 0,
	0, 0, 0, 0, 2009, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3624,
}

var yyPact = [...]int{
	277, -1000, -1000, -1000, -322, 15471, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 49631, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 481, 49631, -318, 31303, 47735, -1000, -1000, 2695, -1000,
	48367, 17387, 49631, 572, 564, 49631, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 951, -1000, 53423, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 862, 4823, 52791, 11652,
	-200, -1000, 1620, -18, 2588, 505, -186, -192, 1087, 1118,
	1304, 1197, 49631, 1069, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 231, 1001, 48999,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 4009, 250, 949, 1001, 22451, 160,
	152, 1620, 450, -49, 212, -1000, 1750, 4013, 207, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	11652, 11652, 15471, -373, 15471, 11652, 49631, 49631, -1000, -1000,
	-1000, -1000, -318, 48367, 862, 4823, 11652, 2588, 505, -186,
	-192, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -49, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	152, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 4405, -1000, 1706, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2352,
	3132, 1701, 2587, 817, 47735, 49631, -1000, 154, 817, -1000,
	-1000, -1000, 1620, 3528, -1000, 49631, 49631, 261, 1938, -1000,
	543, 567, 562, 415, 400, 1694, -1000, -1000, -1000, -1000,
	-1000, -1000, 766, 3492, -1000, 49631, 49631, 3147, 49631, -1000,
	2272, 786, -1000, 5251, 3319, 1359, 983, 3154, -1000, -1000,
	3131, -1000, 409, 345, 381, 479, 475, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 337, -1000, 3380, -1000, -1000, 377,
	-1000, -1000, 366, -1000, -1000, -1000, 132, -1000, -1000, -1000,
	-1000, -1000, -1000, 39, -1000, -1000, 1144, 2284, 11652, 2327,
	-1000, 4159, 1703, -1000, -1000, -1000, 7201, 14192, 14192, 14192,
	14192, 49631, -1000, -1000, 2991, 11652, 3130, 3129, 3128, 3127,
	-1000, -1000, -1000, -1000, -1000, -1000, 3125, 1693, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2053, -1000, -1000,
	-1000, 14827, -1000, 3124, 3123, 3122, 3121, 3119, 3112, 3111,
	3108, 3107, 3101, 3100, 3098, 3097, 3095, 2834, 16745, 3092,
	2579, 2572, 3091, 3090, 3088, 2565, 3085, 3081, 3080, 2834,
	2834, 3078, 3077, 3071, 3070, 3067, 3064, 3063, 3062, 3048,
	3047, 3042, 3041, 3040, 3039, 3036, 3035, 3034, 3033, 3032,
	3027, 3026, 3025, 3023, 3022, 3021, 3019, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1673, -1000, 3018, 3509, 2870, -1000, 3360, 3354, 3352,
	3349, -251, 3017, 2243, -1000, -1000, 119, 3491, 49631, -270,
	49631, 435, -60, -62, -63, -1000, -47, -1000, -1000, 1108,
	-1000, 1058, 52159, 904, -1000, -1000, 49631, 856, 856, 856,
	49631, 49631, 256, 1020, 856, 856, 856, 856, 856, 907,
	856, 3396, 931, 928, 925, 921, 856, 3, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1932, 1929, 3240, 1040, -1000,
	-1000, -1000, -1000, 1532, 49631, -1000, 2935, 435, -283, 1757,
	1757, 3472, 3472, 3395, 3394, 798, 797, 796, 1757, 620,
	-1000, 1945, 1945, 1945, 1945, 1757, 541, 791, 3399, 3399,
	182, 1945, 113, 1757, 1757, 113, 1757, 1757, -1000, 1919,
	273, -257, -1000, -1000, -1000, -1000, 1945, 1945, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 3375, 3374, 862, 862, 49631,
	862, 243, 49631, 862, 862, 862, 49631, 870, -303, 115,
	51527, 50895, 2330, 2272, 784, 781, 1550, 1906, -1000, 1816,
	49631, 49631, 1816, 1816, 25615, 24983, -1000, 49631, -1000, 3509,
	2870, 2816, 1582, 2805, 2870, -64, 435, 862, 862, 862,
	862, 862, 342, 862, 862, 862, 862, 862, 49631, 49631,
	47103, 862, 862, 862, 862, 9741, 1750, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	15471, 2222, 2074, 205, 2, -299, 280, -1000, -1000, 49631,
	3297, 349, -1000, -1000, -1000, 2911, -1000, 2926, 2926, 2926,
	2926, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2926, 2926, 2933, 3003, -1000, -1000, 2925, 2925, 2925,
	2911, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2929, 2929, 2930, 2930,
	2929, 49631, -98, -1000, -1000, 11652, 49631, 3308, 407, 3001,
	817, -1000, -1000, 49631, 197, 421, 3509, 3306, 3399, 3466,
	-1000, -1000, 1692, 2239, 2560, -1000, 400, -1000, 515, 400,
	-1000, 583, 583, 1755, -1000, 1342, -1000, -1000, -1000, -1000,
	-1000, -1000, 49631, 39, 456, -1000, -1000, 2540, 3000, -1000,
	684, 1333, 1527, -1000, 278, 4122, 40151, 2272, 40151, 49631,
	-1000, -1000, -1000, -1000, -1000, -1000, 128, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 422, -1000, 11652, 11652, 11652, 11652, 11652, -1000, 775,
	13557, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 14192, 14192,
	14192, 14192, 14192, 14192, 14192, 14192, 14192, 14192, 14192, 14192,
	2988, 1802, 14192, 14192, 14192, 14192, 28143, 1582, 3086, 1540,
	325, 1703, 1703, 1703, 1703, 11652, -1000, 1925, 2284, 11652,
	11652, 11652, 11652, 34463, 49631, -1000, -1000, 5240, 11652, 11652,
	5344, 11652, 3347, 11652, 11652, 11652, 2794, 5922, 49631, 11652,
	-1000, 2793, 2787, -1000, -1000, 2065, 11652, -1000, -1000, 11652,
	-1000, -1000, 11652, 14192, 11652, -1000, 11652, 11652, 11652, -1000,
	-1000, 3255, 3347, 3347, 3347, 1869, 11652, 11652, 3347, 3347,
	3347, 1837, 3347, 3347, 3347, 3347, 3347, 3347, 3347, 3347,
	3347, 3347, 3347, 2786, 2784, 2779, 11017, 3399, -200, -1000,
	9106, 3306, 3399, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -253, 2999, 49631, 2557, 2556, -333, 191,
	502, 49631, 1146, -1000, -1000, 49631, 2238, 49631, 2232, 79,
	1104, 1046, 1066, -1000, -1000, 49631, 50263, -1000, 49631, 1976,
	49631, 49631, 3337, -1000, 2998, 49631, 856, 856, 856, -1000,
	45207, 40151, 49631, 49631, 2272, 49631, 49631, 49631, 856, 856,
	856, 856, 49631, -1000, 3260, 40151, 3251, 870, -1000, 49631,
	1532, 3335, 49631, -1000, -1000, -1000, -1000, 3472, 14192, 14192,
	-1000, -1000, 11652, -1000, 275, 46471, 1945, 1757, 1757, -1000,
	-1000, 49631, -1000, -1000, -1000, 1945, 49631, 1945, 1945, 3472,
	1945, -1000, -1000, -1000, 1757, 1757, -1000, -1000, 11652, -1000,
	-1000, 1945, 1945, -1000, -1000, 3472, 49631, 125, 3472, 3472,
	150, -1000, -1000, -1000, 1757, 49631, 49631, 856, 49631, -1000,
	49631, 49631, -1000, -1000, 49631, 49631, 4493, 49631, 45207, 45839,
	3370, -1000, 40151, 49631, 49631, 1526, -1000, 902, 37623, -1000,
	49631, 1427, -1000, 86, -1000, 75, 115, 1816, 115, 1816,
	899, -1000, 674, 693, 23719, 614, 40151, 6557, -1000, -1000,
	1816, 1816, 6557, 6557, 1708, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1519, -1000, 339, 3399, -1000, -1000, -1000, -1000,
	-1000, 2231, -1000, 49631, 45207, 40151, 2272, 49631, 862, 49631,
	49631, 49631, 49631, 49631, -1000, 2997, 1691, -1000, 3313, 49631,
	49631, 49631, 49631, 1521, -1000, -1000, 20547, 1687, -1000, -1000,
	2008, -1000, 11652, 15471, -221, 11652, 15471, 15471, 11652, 15471,
	-1000, 11652, 327, -1000, -1000, -1000, -1000, 2229, -1000, 2228,
	-1000, -1000, -1000, -1000, -1000, 2555, 2555, -1000, 2227, -1000,
	-1000, -1000, -1000, 2224, -1000, -1000, 2216, -1000, -1000, -1000,
	-1000, -142, 2777, 1144, -1000, 2553, 3153, -202, -1000, 21819,
	49631, 49631, 407, -339, 1928, 1922, 1918, -1000, -202, -1000,
	21183, 49631, 3399, -1000, -205, 3306, 11652, 49631, -1000, 3391,
	-1000, -1000, 400, -1000, -1000, -1000, 583, 467, -1000, -1000,
	-1000, -1000, -1000, -1000, 1686, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -51, -76, 1511, -1000, 49631,
	-1000, -1000, 278, 40151, 42047, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 286, -1000, -1000, 184, -1000, 897, 295, 1754,
	-1000, -1000, 258, 219, 265, 994, 2284, -1000, 1974, 1974,
	1978, -1000, 778, -1000, -1000, -1000, -1000, 2991, -1000, -1000,
	-1000, 2419, 4261, -1000, 1823, 1823, 1702, 1702, 1702, 1702,
	1702, 2156, 2156, -1000, -1000, -1000, 7201, 2988, 14192, 14192,
	14192, 14192, 942, 942, 4297, 4280, -1000, -1000, -1000, -1000,
	11652, 189, 2003, -1000, 11652, 2615, 1445, 2608, 1434, 1753,
	-1000, 2911, 11652, 1685, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2770, 2760, 2601, 3490, 2759, 11652,
	-1000, -1000, 1752, 1741, 1738, -1000, 2354, 10382, -1000, -1000,
	-1000, 2749, 1684, 2748, -1000, -1000, -1000, 2747, 1735, 1244,
	2743, 2950, 2740, 2737, 2734, 2731, 1479, 11652, 11652, 11652,
	11652, 2729, 1734, 1728, 11652, 11652, 11652, 11652, 2728, 11652,
	11652, 11652, 11652, 11652, 11652, 11652, 11652, 11652, 11652, 49631,
	190, 190, 190, 1473, 1472, -1000, -1000, 1727, -1000, 2284,
	-1000, -1000, 3306, -1000, 2987, 2215, 1466, -1000, -1000, -313,
	2495, 49631, 49631, 186, 49631, 2550, -271, 49631, -1000, -1000,
	2549, -1000, -1000, -1000, 1082, 1056, 1090, -1000, 49631, -1000,
	2548, 3305, 3390, 920, 49631, 1392, 2986, 49631, 49631, 49631,
	331, -1000, -1000, 1314, -1000, 295, 13, 577, 1229, 3146,
	3487, -105, 49631, 49631, 49631, 49631, 3334, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 44575, -1000, 2985, 1719, -1000,
	-1000, 1703, 1703, 2284, 49631, 49631, 49631, 3145, 49631, 49631,
	3472, 3472, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1945,
	3472, 3472, 1497, 1757, 1945, -1000, -1000, 1945, -339, -1000,
	1945, -1000, -339, 1679, -339, 49631, -1000, -1000, -1000, 3332,
	2935, 1444, -1000, -1000, -1000, 3463, 1086, 844, 844, 1099,
	663, 3460, 19283, -1000, 1777, 1091, 896, 3274, 406, -1000,
	1777, -139, 822, 1777, 1777, 1777, 1777, 1777, 1777, 1777,
	759, 758, 1777, 1777, 1777, 1777, 1777, 1777, 1777, 1777,
	1777, 1777, 1777, 1110, 1777, 1777, 1777, 1777, 1777, -1000,
	1777, 2982, 559, -1000, -1000, -1000, -1000, -1000, -1000, 773,
	683, 324, 3369, 441, -1000, 443, 1314, 359, 3368, 459,
	49631, 49631, 3217, 1283, -1000, -1000, -1000, -1000, -1000, 28775,
	28775, 23087, 28775, -1000, 214, 1816, 115, 72, -1000, -1000,
	1427, 6557, 1427, 6557, 2210, -1000, -1000, 894, -1000, -1000,
	1229, -1000, 49631, 49631, -1000, -1000, 2972, 1917, -1000, -1000,
	16745, -1000, 6557, 6557, -1000, -1000, 30671, 49631, -1000, 29,
	-1000, 51, 3306, -1000, 1182, -1000, -1000, 1416, 1229, 3152,
	49631, 1182, 1182, 1182, -1000, -1000, 18019, 49631, 49631, -1000,
	-1000, -1000, -1000, 3472, 9741, -1000, 37623, -1000, -1000, 43943,
	-1000, 43311, 1952, -1000, 15471, 2049, 201, -1000, 276, -305,
	198, 1986, 196, 2284, -1000, -1000, 2724, 2720, 1718, -1000,
	1717, 2719, 1715, 1714, 2207, -1000, 106, -1000, 3294, 1236,
	-1000, 2954, -1000, 1704, 3237, -1000, 1410, -1000, 1916, 1699,
	-1000, -1000, -1000, 11652, 42679, 11652, 1236, 1695, 3232, 1410,
	3306, 2544, -1000, 1396, -1000, 2234, 1664, 241, -1000, -1000,
	-1000, 49631, 2540, 1675, 42047, 1315, -1000, 891, 1652, 1651,
	-1000, 40151, 384, 40151, -1000, 40151, -1000, -1000, 416, -1000,
	49631, 3304, -1000, -1000, -1000, 2495, 1887, -338, 49631, -1000,
	-1000, -1000, -1000, -1000, 1669, -1000, 942, 942, 4297, 4181,
	-1000, 14192, -1000, 14192, 3075, -1000, 1946, -1000, 11652, 2033,
	4962, 11652, 4962, 1586, 26879, 34463, -81, 3302, 3044, 49631,
	-1000, -1000, 11652, 11652, -1000, 2947, -1000, -1000, -1000, -1000,
	11652, 11652, 2279, -1000, 49631, -1000, -1000, -1000, -1000, 26879,
	-1000, 14192, -1000, -1000, -1000, -1000, 11652, 1273, 1273, 2940,
	1666, 190, 190, 190, 2936, 2931, 2927, 1659, 190, 2867,
	2818, 2814, 2798, 2762, 2745, 2738, 2688, 2650, 2639, 1656,
	-1000, 2952, -1000, -1000, 2051, 12922, 9106, -1000, -1000, 323,
	1395, 2196, 2536, 129, -1000, 1865, -1000, 2535, 49631, 49631,
	1142, -1000, 49631, 3484, -1000, -1000, -1000, -1000, 1051, -1000,
	2533, -1000, 500, 2085, 213, 351, 2713, 1386, -1000, -1000,
	49631, -1000, -1000, -1000, 18019, 2935, 2951, 2935, 211, 1777,
	701, 40151, 771, -1000, 49631, 2052, 1864, 3151, 845, 3296,
	49631, 2945, 414, 2944, 2943, 3331, 544, 5049, 49631, 1293,
	-1000, 1629, 4013, -1000, 49631, -1000, -1000, 49631, -1000, 2272,
	-1000, 1757, -1000, -1000, 3472, -1000, -1000, 11652, 11652, 3472,
	1757, 1757, -1000, 1945, -1000, 49631, -1000, -339, 544, 5049,
	3328, 4671, 696, 2824, -1000, 49631, -1000, -1000, -1000, 860,
	-1000, 1065, 856, 49631, 2022, 1065, 2021, 2942, -1000, -1000,
	49631, 49631, 49631, 49631, -1000, -1000, 49631, -1000, 49631, 49631,
	49631, 49631, 49631, 41415, -1000, 49631, 49631, -1000, 49631, 2016,
	49631, 2011, 3275, -1000, 1777, 1777, 1015, -1000, -1000, 669,
	-1000, 41415, 2194, 2192, 2191, 2189, 2526, 2524, 2523, 1777,
	1777, 2188, 2509, 40783, 2508, 1312, 2187, 2185, 2184, 2214,
	2505, 1063, -1000, 2504, 2159, 2152, 2140, 49631, 2939, 2407,
	557, -1000, -1000, 2085, 211, 1777, 429, 49631, 1861, 1860,
	701, 633, 576, 11, 24351, -1000, -1000, -1000, 49631, 37623,
	37623, 37623, 37623, 37623, 37623, -1000, 3204, 3172, 3195, -1000,
	3171, 3170, 3210, 3193, 2946, 49631, 37623, 2935, -1000, 40783,
	-1000, -1000, -1000, 1582, 1649, 3196, 1045, 11652, 6557, -1000,
	-1000, 66, 52, -1000, -1000, -1000, -1000, 40151, 2500, 614,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 3389, 49631, 49631,
	854, 2711, 1373, -1000, -1000, -1000, 5049, 2926, 2926, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2926, 2926,
	2933, -1000, -1000, 2925, 2925, 2925, 2911, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2929, 2929, 2930,
	2930, 2929, -1000, -1000, 3470, -1000, 1372, -1000, -1000, 1566,
	-1000, 1778, -323, 15471, 1758, 1740, -1000, 11652, 15471, 11652,
	-223, 424, -226, -1000, -1000, -1000, 2499, -1000, -1000, -1000,
	2176, -1000, 2174, -1000, 226, 251, 2004, -202, 9106, 440,
	49631, -202, 49631, 9106, -1000, 49631, 181, -350, -351, 165,
	412, -202, 3389, 106, 11652, 3265, -1000, -1000, 49631, 2173,
	-1000, -1000, -1000, 3483, 40151, 2272, 1744, 39519, -1000, 373,
	-1000, 274, 618, 2498, -1000, 919, 118, 2496, 2495, -1000,
	-1000, -1000, -1000, 14192, 1703, -1000, -1000, -1000, 2284, 11652,
	2708, -1000, 1061, 1061, 2559, 2707, 2705, -1000, 2926, 2926,
	-1000, 2911, 2925, 2911, 1061, 1061, 2701, -1000, 2906, -1000,
	3302, -1000, 2294, 2591, -1000, 2551, 2546, 11652, -1000, 2700,
	3937, 1367, -3, -170, 190, 190, -1000, -1000, -1000, -1000,
	190, 190, 190, 190, -1000, 190, 190, 190, 190, 190,
	190, 190, 190, 190, 190, 190, 820, -82, -261, -83,
	-266, -1000, 2698, 1357, -1000, -1000, -1000, -1000, -1000, 5344,
	1348, 592, 592, 2495, 2493, -1000, 877, 2491, 1080, 49631,
	2489, -277, -1000, 2485, -1000, -1000, 49631, 2466, -1000, 682,
	49631, 49631, 2465, 2457, 1392, 5049, 2689, 3327, 18651, 3324,
	2261, -1000, -1000, -1000, 30039, 633, -1000, -1000, -1000, 763,
	365, 2172, 619, -1000, 49631, 570, 3249, 1859, 2455, 49631,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 3296, -1000, 1275,
	528, 36359, 16113, -1000, 477, 49631, -1000, 18651, 18651, 477,
	531, 1908, -1000, 817, 1251, 142, 37623, 49631, -1000, 36991,
	2687, -1000, -1000, 1229, 3472, -1000, 2284, 2284, -339, 3472,
	3472, 1757, -1000, -1000, 531, -1000, 477, -1000, 1506, 19915,
	606, 522, 517, -1000, 747, -1000, -1000, 814, 3258, 5049,
	-1000, 49631, -1000, 49631, -1000, 49631, 49631, 856, 11652, 3258,
	49631, 874, -1000, 1176, 507, 498, 863, 863, 1336, -1000,
	3302, -1000, -1000, 1326, -1000, -1000, -1000, -1000, 49631, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 26879, 26879, 3366, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2452, 2451, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 49631, 1643, -1000, 1850, 2163, 2450, 2261,
	30039, 1834, 1816, 2444, 2441, 633, -1000, 2432, 2431, 2052,
	1833, 910, 49631, -1000, 1208, 49631, 49631, -1000, 1419, -1000,
	1832, 3136, 3150, 3136, -1000, 3136, -1000, -1000, -1000, -1000,
	-1000, -1000, 3173, -1000, 3169, -1000, -1000, -1000, -1000, 1419,
	-1000, -1000, -1000, -1000, -1000, 1045, -1000, 3384, 1065, 1065,
	1065, 2684, -1000, -1000, -1000, -1000, 1315, 2683, -1000, -1000,
	-1000, 3503, -1000, -1000, -1000, -1000, -1000, -1000, 18019, 3291,
	3468, 3456, 38887, -1000, -323, 1756, -1000, 1999, 192, 1851,
	49631, -1000, -1000, -1000, 2675, 2673, -207, 216, 3455, 3454,
	1094, -1000, 2670, 1289, -202, -1000, -1000, 1236, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -202, -1000, 1236, -1000, 226,
	-1000, -1000, 3281, -1000, -1000, 2272, -1000, 263, -1000, -1000,
	-1000, -1000, -1000, -1000, 282, -1000, 49631, -1000, 1288, 116,
	-1000, 2284, -1000, -1000, -1000, -1000, -1000, 4962, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2430, -1000,
	-1000, 11652, -1000, -1000, -1000, 2507, -1000, -1000, 11652, 2662,
	2428, 2661, 2427, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	3509, -1000, 3451, 1639, 2659, 2658, 1637, 2656, 2655, -1000,
	11652, 2653, 5344, 1008, 2424, 1008, -1000, -1000, 458, 29407,
	49631, 3474, -1000, 49631, 2416, -1000, -1000, 2085, 675, 695,
	-1000, -1000, -1000, -1000, 922, 477, 2651, 1276, -1000, -1000,
	-1000, -1000, 477, -1000, 2415, 294, -1000, -1000, -1000, -1000,
	2162, -1000, -1000, 2139, 1559, 311, -1000, -1000, -1000, -1000,
	-1000, -1000, 2251, 49631, 38255, 2259, 1830, -342, -1000, 2905,
	-1000, 1777, 1777, 1777, 49631, 1632, -1000, 1777, 1777, 2649,
	-1000, -1000, 2648, 2647, -113, 826, 1788, 1774, -1000, 2161,
	28775, 37623, 36991, 1353, -1000, 1555, -1000, -1000, -1000, -1000,
	-1000, -1000, 3472, 826, -1000, 600, 2158, 14192, 2893, 14192,
	2892, 617, 2891, 1616, -1000, 49631, -1000, -1000, 49631, 4012,
	2890, -1000, 2888, 3143, 590, 2887, 2886, 49631, 2497, -1000,
	3258, 49631, 816, 3279, -1000, -1000, -1000, 487, -1000, -1000,
	664, -1000, 49631, -1000, 49631, -1000, 1641, -1000, 26879, -1000,
	-1000, 1610, -1000, 2407, 2406, 5344, -1000, -1000, 294, 2405,
	6557, -1000, -1000, -1000, -1000, -1000, 3249, 2403, 2251, 49631,
	-1000, 49631, 1208, 1208, 3509, 49631, 9106, -1000, -1000, 11652,
	2879, -1000, 11652, -1000, -1000, -1000, -1000, -1000, -1000, 2877,
	3293, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2175, -1000,
	11652, 12287, -1000, 848, 15471, -239, 418, -1000, -1000, -1000,
	-209, 2396, -1000, -1000, 3450, 2395, 2275, 49631, -1000, -1000,
	1236, 1236, -207, -1000, -1000, 1229, -1000, -1000, 1171, 764,
	-1000, 2646, 293, -1000, 2492, -1000, 2398, 190, -1000, 190,
	-1000, 298, 11652, -1000, 2394, -1000, -1000, -1000, 2392, -1000,
	-1000, 2377, -1000, 2633, -1000, 2389, -1000, -1000, 49631, -1000,
	-1000, 1075, 2388, -343, 2386, 2085, 2085, 49631, 5049, -114,
	-113, 18651, -114, -1000, -1000, 411, 453, -1000, -1000, 2131,
	690, -1000, -1000, 2385, 671, -1000, 1208, -1000, 1821, 2031,
	2314, 34463, 26879, 28143, 2375, -1000, -1000, 36359, 2175, 2175,
	5272, 422, 54083, -1000, 2875, 1095, 1771, -1000, 2157, -1000,
	2155, -1000, 3472, 1353, 140, -1000, -1000, 1721, -1000, 1095,
	2824, 3449, -1000, 3808, 49631, 2995, 49631, 2874, 1817, 14192,
	-1000, 814, 3221, -1000, -1000, 4012, -1000, -1000, 2014, 14192,
	-1000, -1000, 2360, 28143, 998, 1807, 1804, 1028, 2872, -1000,
	714, 3502, -1000, -1000, -1000, 1012, 2869, -1000, 1992, 1991,
	-1000, 49631, -1000, 34463, 34463, 837, 837, 34463, 34463, 2865,
	863, -1000, -1000, 14192, -1000, -1000, 1777, -1000, -1000, -1000,
	1777, 1572, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2259,
	-1000, -1000, 1182, -1000, 3399, -1000, -1000, 2284, 49631, 2284,
	35727, -1000, 3447, 3446, -1000, 2284, 262, 267, 2864, 2860,
	-1000, -323, 49631, 49631, -211, 2151, -1000, 2356, 252, -1000,
	-1000, 1157, -209, -213, 150, 26879, 1801, -1000, 2626, 410,
	-131, -1000, -1000, -1000, -1000, 2614, -1000, 1049, -1000, -1000,
	-1000, 1144, 2613, 2610, -1000, -1000, -1000, -1000, 49631, -1000,
	2310, -1000, 2355, 2347, 649, -86, -1000, -1000, 482, -1000,
	-1000, -1000, 653, 2282, -1000, -1000, 452, -1000, -1000, -1000,
	2251, 2328, -1000, -1000, 111, -1000, 1795, 1597, -1000, -1000,
	-1000, -1000, -1000, -1000, 809, -1000, 477, 53927, -1000, 1091,
	27511, -1000, 1171, 809, 559, 33199, 702, 316, -1000, 2141,
	-1000, -1000, 3509, -1000, 700, -1000, 615, -1000, 1591, -1000,
	1587, 35095, 2107, 1854, -1000, 5405, 938, -1000, -1000, 4297,
	-1000, -1000, -1000, -1000, -1000, -1000, 2325, 2324, -1000, -1000,
	-1000, -1000, -1000, 2106, 2850, 112, 3344, 2322, -1000, -1000,
	2840, 1585, 1568, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1561, 1558, 34463, -1000, -1000, 4297, 2096, 26879,
	1777, -1000, -1000, 1553, 1549, -1000, -1000, -1000, -1000, -1000,
	-301, 2839, 11652, 11652, -1000, -1000, -1000, 2838, -1000, -1000,
	3438, -211, -215, 2321, 209, 240, -1000, 2320, -1000, -93,
	3218, -135, -1000, -1000, 878, -203, 195, 187, 176, -1000,
	-1000, -1000, 11652, -1000, -1000, -1000, 109, -1000, 1791, -1000,
	-1000, 2085, 49631, 709, -1000, -1000, -1000, -1000, 281, -1000,
	-1000, -1000, -1000, -1000, -1000, 2314, 2313, -1000, 594, 3437,
	-1000, 54083, -1000, 1777, -1000, 594, 1530, -1000, 1777, 1777,
	-1000, 553, -1000, 1770, -1000, 2077, -1000, 3399, -1000, 539,
	-1000, 596, -1000, -1000, -1000, 1520, -1000, -1000, -1000, 5405,
	604, -1000, 803, 2835, -1000, -1000, 2607, 11652, 2834, 1777,
	2606, -79, 34463, 3142, 3141, 2949, 2938, 1513, -1000, -1000,
	26879, -1000, -1000, 33831, -1000, 2833, 1491, 1442, 49631, 2275,
	-1000, -1000, 2311, -1000, 864, 222, 240, -1000, 3433, 242,
	3431, 3413, 1143, 3212, -1000, -1000, 1953, -1000, 220, 215,
	183, -1000, -1000, -1000, -1000, -1000, 2310, 2299, 2298, 605,
	-1000, 372, -1000, -1000, -1000, 329, -1000, 3408, 696, -1000,
	26879, -1000, -1000, 33199, 2175, 2175, -1000, -1000, 2075, -1000,
	-1000, -1000, -1000, 2073, -1000, -1000, -1000, 1436, -1000, 49631,
	1002, 8471, -1000, 2359, -1000, 49631, -1000, 3089, -1000, 321,
	1425, 329, 837, 329, 837, 329, 837, 329, 837, 367,
	-1000, -1000, -1000, 1339, 11652, -1000, -1000, 1327, -1000, -1000,
	-1000, 2832, 2059, 216, 208, 3406, -1000, 2275, 3405, 2275,
	2275, -1000, 185, -123, 878, -1000, -1000, -1000, -1000, -1000,
	-1000, 2296, -1000, -1000, -1000, -1000, 1777, 1777, 2295, 2292,
	521, -1000, -1000, 32567, 606, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 604, 54083, -1000, 8471, 1307, -1000, 2284, -1000,
	863, -1000, -1000, 2953, 2934, 3481, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2830, 2597, -1000, 49631,
	3342, 26247, 233, -1000, -1000, -1000, 2290, -1000, 2275, -1000,
	-1000, 1776, -132, -1000, -259, 2057, 2055, -1000, -1000, 49631,
	-1000, 49631, 600, -1000, 54083, 1286, -1000, 8471, -1000, -1000,
	3501, -1000, 3495, 1000, 1000, 329, 329, 329, 329, 11652,
	-1000, -1000, -1000, 49631, -1000, 1280, -1000, -1000, -1000, 1552,
	-1000, -1000, -1000, -1000, 2271, -136, -1000, -1000, 2268, -1000,
	-1000, -1000, 1260, 2824, -1000, -1000, -1000, -1000, -1000, 2099,
	724, -1000, 2364, 1133, -1000, 1764, -1000, 31935, 49631, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 49631, 7836,
	-1000, 1305, -1000, -1000, 2284, 49631, -1000,
}

var yyPgo = [...]int{
	0, 172, 3521, 252, 179, 4128, 134, 254, 286, 265,
	248, 246, 4127, 4126, 4125, 3260, 3259, 4122, 4121, 4120,
	4117, 4116, 4115, 4113, 4112, 4111, 4110, 4106, 4104, 4103,
	4102, 4101, 4100, 4099, 4097, 4096, 4095, 4093, 4091, 4090,
	4075, 4073, 4072, 4069, 4068, 4067, 4066, 239, 4065, 4064,
	4063, 4060, 4057, 4056, 4054, 4052, 4050, 4048, 4046, 4045,
	4043, 4042, 4041, 4040, 4039, 4038, 4037, 4035, 4034, 4033,
	4031, 4030, 4024, 4021, 4020, 4018, 4017, 4015, 4014, 4012,
	4010, 4009, 4007, 4006, 4005, 212, 4003, 3253, 4001, 3999,
	3998, 3997, 3996, 3995, 3994, 3993, 3992, 3991, 3986, 341,
	3984, 3971, 3970, 3967, 3966, 3965, 3963, 3962, 3961, 3960,
	3946, 3943, 3942, 311, 3941, 3940, 3937, 3934, 244, 3932,
	301, 3931, 174, 195, 3930, 3929, 3928, 3927, 3926, 3922,
	3920, 3918, 3916, 3915, 3914, 3911, 3910, 3909, 236, 191,
	74, 3908, 44, 3907, 3906, 221, 3905, 152, 3904, 156,
	3902, 3901, 3898, 3895, 3890, 3889, 3888, 3885, 3884, 3883,
	3882, 3881, 3879, 3878, 3877, 3876, 3875, 3873, 3872, 3871,
	3870, 3869, 3868, 3867, 52, 3866, 256, 3865, 83, 3863,
	176, 3858, 78, 3857, 54, 148, 266, 2573, 250, 3856,
	188, 3855, 3852, 249, 182, 3851, 3849, 274, 3848, 185,
	229, 165, 111, 131, 3845, 143, 3844, 264, 48, 40,
	251, 146, 57, 162, 128, 3843, 217, 99, 113, 3842,
	3841, 147, 3840, 247, 183, 3837, 112, 3836, 3834, 3833,
	3831, 3830, 204, 202, 3829, 3828, 130, 3826, 3817, 67,
	129, 3816, 80, 121, 171, 120, 3815, 259, 118, 90,
	3813, 138, 110, 3812, 81, 3810, 3809, 3808, 3807, 184,
	3806, 3805, 141, 62, 3801, 3800, 3799, 69, 3798, 77,
	3797, 42, 3796, 59, 3794, 3792, 3791, 3790, 3789, 3788,
	3787, 3777, 3775, 3774, 3773, 3772, 56, 3771, 3770, 3769,
	3768, 7, 11, 17, 3767, 24, 3764, 173, 3763, 3760,
	168, 3758, 196, 3757, 3756, 95, 91, 3755, 94, 164,
	3754, 14, 29, 75, 3753, 3752, 3748, 144, 3746, 3744,
	3741, 276, 3740, 3739, 3738, 163, 3737, 3735, 3734, 667,
	3733, 3731, 3730, 3728, 3727, 3726, 103, 3725, 1, 219,
	38, 3724, 136, 142, 3723, 37, 27, 3722, 45, 116,
	203, 140, 101, 3721, 3720, 3718, 208, 260, 98, 39,
	0, 100, 220, 161, 3717, 3716, 3714, 258, 3713, 231,
	232, 241, 206, 267, 177, 3712, 3711, 61, 3709, 166,
	31, 50, 133, 104, 22, 257, 3708, 1585, 8, 198,
	3706, 210, 3705, 12, 13, 209, 150, 3704, 3703, 33,
	263, 3702, 3701, 3700, 135, 3699, 3698, 190, 60, 3697,
	3695, 3694, 3693, 51, 3692, 189, 16, 3691, 102, 3689,
	242, 3688, 201, 137, 186, 181, 159, 226, 230, 82,
	85, 3687, 1833, 158, 106, 18, 3686, 233, 3684, 215,
	125, 3683, 105, 3682, 245, 269, 213, 3677, 187, 9,
	49, 36, 28, 43, 10, 271, 205, 3676, 3675, 20,
	47, 3672, 55, 3670, 19, 3669, 3666, 53, 3664, 68,
	5, 3663, 3662, 21, 30, 3661, 35, 207, 178, 123,
	97, 64, 3658, 3656, 155, 132, 3655, 151, 157, 160,
	3654, 93, 3652, 3650, 3649, 3648, 1003, 255, 3647, 3646,
	3645, 3644, 3643, 3640, 3637, 3636, 218, 3633, 108, 41,
	3625, 3624, 3622, 3620, 84, 154, 3619, 3617, 3614, 3613,
	32, 145, 3612, 15, 3611, 25, 23, 34, 3607, 107,
	3606, 3, 192, 3605, 3604, 4, 3603, 3602, 2, 3601,
	3600, 122, 3599, 96, 26, 169, 115, 3597, 3596, 87,
	214, 149, 3594, 3593, 88, 237, 200, 3592, 79, 235,
	253, 3591, 216, 3589, 3585, 3584, 3583, 3581, 1204, 3580,
	3577, 238, 70, 92, 3576, 224, 117, 3575, 3573, 89,
	167, 119, 124, 58, 86, 3572, 114, 211, 3571, 197,
	3570, 262, 3569, 3568, 109, 3567, 3566, 3563, 3562, 193,
	3561, 3557, 194, 222, 3555, 3554, 272, 3553, 3552, 3551,
	3548, 3547, 3542, 3540, 3538, 3532, 3525, 243, 283, 3524,
}

//line mysql_sql.y:12811
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) allCDCOptionUnion() *tree.AllOrNotCDC {
	v, _ := st.union.(*tree.AllOrNotCDC)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) applyTableExprUnion() *tree.ApplyTableExpr {
	v, _ := st.union.(*tree.ApplyTableExpr)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) atTimeStampUnion() *tree.AtTimeStamp {
	v, _ := st.union.(*tree.AtTimeStamp)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) fullTextSearchTypeUnion() tree.FullTextSearchType {
	v, _ := st.union.(tree.FullTextSearchType)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() *tree.GroupByClause {
	v, _ := st.union.(*tree.GroupByClause)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) renameTableOptionUnion() *tree.AlterTable {
	v, _ := st.union.(*tree.AlterTable)
	return v
}

func (st *yySymType) renameTableOptionsUnion() []*tree.AlterTable {
	v, _ := st.union.([]*tree.AlterTable)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) retentionOptionUnion() *tree.RetentionOption {
	v, _ := st.union.(*tree.RetentionOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectOptionUnion() uint64 {
	v, _ := st.union.(uint64)
	return v
}

func (st *yySymType) selectOptionsUnion() uint64 {
	v, _ := st.union.(uint64)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) snapshotObjectUnion() tree.ObjectInfo {
	v, _ := st.union.(tree.ObjectInfo)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) upgrade_targetUnion() *tree.Target {
	v, _ := st.union.(*tree.Target)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 612, 615, 615, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 128,
	128, 351, 351, 352, 352, 130, 347, 347, 346, 346,
	131, 132, 133, 591, 591, 134, 135, 165, 590, 590,
	167, 167, 167, 167, 167, 467, 129, 129, 129, 129,
	129, 171, 171, 171, 171, 171, 127, 597, 597, 597,
	598, 598, 124, 154, 153, 156, 156, 155, 155, 152,
	152, 148, 151, 151, 150, 150, 149, 144, 146, 146,
	145, 147, 147, 125, 113, 126, 540, 540, 539, 539,
	538, 538, 492, 492, 493, 493, 338, 338, 338, 537,
	537, 537, 536, 536, 535, 535, 534, 534, 532, 532,
	533, 531, 530, 530, 530, 528, 528, 528, 524, 524,
	526, 525, 525, 527, 519, 519, 522, 522, 520, 520,
	520, 520, 523, 518, 518, 518, 517, 517, 112, 112,
	112, 434, 434, 111, 111, 448, 448, 448, 448, 448,
	446, 446, 446, 446, 446, 446, 445, 445, 444, 444,
	449, 449, 447, 447, 447, 447, 447, 447, 447, 447,
	447, 447, 447, 447, 447, 447, 447, 447, 447, 447,
	447, 447, 447, 447, 447, 447, 447, 447, 447, 447,
	447, 447, 447, 447, 447, 447, 447, 447, 447, 447,
	447, 447, 447, 447, 447, 447, 447, 447, 447, 447,
	447, 447, 447, 100, 100, 100, 100, 100, 100, 100,
	107, 105, 105, 105, 106, 603, 603, 602, 602, 604,
	604, 604, 604, 605, 605, 103, 103, 103, 104, 443,
	443, 443, 101, 102, 102, 433, 433, 438, 438, 437,
	437, 437, 437, 437, 437, 437, 437, 437, 437, 437,
	437, 437, 442, 442, 442, 440, 440, 439, 439, 441,
	441, 91, 91, 91, 91, 91, 91, 95, 96, 97,
	97, 97, 97, 94, 93, 432, 432, 432, 432, 432,
	432, 432, 432, 432, 92, 92, 92, 92, 92, 92,
	86, 86, 86, 86, 86, 85, 85, 87, 87, 430,
	430, 429, 108, 108, 109, 600, 600, 599, 601, 601,
	601, 601, 110, 116, 116, 116, 116, 116, 116, 116,
	116, 115, 115, 118, 118, 117, 119, 99, 99, 99,
	99, 99, 99, 98, 98, 98, 98, 98, 98, 98,
	98, 98, 98, 98, 98, 98, 98, 98, 98, 565,
	565, 565, 565, 566, 566, 365, 366, 616, 368, 364,
	364, 364, 561, 561, 562, 563, 564, 564, 564, 114,
	14, 222, 222, 466, 466, 11, 11, 11, 11, 11,
	11, 11, 11, 11, 11, 13, 84, 89, 89, 90,
	301, 301, 302, 296, 296, 303, 303, 170, 304, 304,
	304, 309, 309, 310, 310, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 281, 281, 281,
	276, 276, 276, 276, 277, 277, 278, 278, 279, 279,
	279, 279, 280, 280, 357, 357, 305, 305, 305, 307,
	307, 306, 300, 298, 298, 298, 298, 298, 298, 298,
	299, 299, 299, 299, 308, 308, 82, 88, 88, 88,
	88, 578, 578, 83, 83, 589, 589, 496, 496, 379,
	379, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 501, 502, 375,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 79, 80,
	81, 54, 57, 58, 169, 172, 172, 172, 172, 53,
	53, 53, 419, 419, 52, 617, 617, 350, 350, 67,
	66, 56, 68, 69, 70, 71, 72, 73, 51, 65,
	65, 65, 65, 65, 65, 65, 65, 76, 513, 513,
	619, 619, 619, 74, 75, 495, 495, 495, 64, 63,
	62, 61, 60, 60, 50, 50, 49, 49, 55, 160,
	59, 161, 161, 372, 372, 372, 374, 374, 370, 618,
	618, 462, 462, 373, 373, 48, 48, 48, 48, 77,
	371, 371, 349, 369, 369, 369, 12, 12, 10, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 26, 27, 29, 427,
	427, 424, 28, 20, 19, 19, 23, 22, 18, 18,
	21, 24, 25, 25, 9, 9, 9, 9, 15, 15,
	16, 194, 194, 248, 248, 572, 572, 568, 568, 569,
	569, 569, 570, 570, 571, 571, 120, 507, 507, 507,
	507, 507, 507, 8, 8, 217, 217, 506, 506, 506,
	506, 506, 506, 431, 431, 431, 550, 550, 550, 551,
	216, 216, 211, 211, 508, 508, 396, 552, 552, 516,
	516, 515, 515, 514, 514, 214, 214, 215, 215, 197,
	197, 139, 139, 521, 521, 521, 521, 529, 529, 491,
	491, 286, 286, 340, 340, 341, 341, 184, 184, 185,
	185, 185, 185, 185, 185, 606, 606, 607, 608, 609,
	609, 610, 610, 610, 611, 611, 611, 611, 611, 558,
	558, 560, 560, 559, 213, 213, 209, 209, 210, 210,
	210, 208, 208, 207, 206, 206, 205, 203, 203, 203,
	204, 204, 204, 221, 221, 187, 187, 187, 186, 186,
	186, 186, 186, 321, 321, 321, 321, 321, 321, 321,
	321, 321, 321, 321, 321, 188, 191, 191, 192, 192,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	318, 318, 319, 319, 319, 319, 319, 137, 137, 500,
	500, 317, 317, 189, 189, 190, 190, 190, 190, 316,
	316, 315, 202, 202, 201, 200, 200, 200, 195, 195,
	195, 195, 195, 196, 327, 327, 326, 326, 325, 325,
	325, 325, 328, 123, 136, 136, 138, 220, 220, 324,
	323, 323, 323, 323, 219, 219, 218, 218, 212, 212,
	199, 199, 199, 199, 322, 198, 320, 596, 596, 595,
	595, 594, 592, 592, 592, 593, 593, 593, 593, 542,
	542, 542, 542, 542, 358, 358, 358, 363, 363, 361,
	361, 361, 361, 361, 367, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 39, 231, 232,
	40, 233, 233, 234, 234, 235, 235, 236, 237, 238,
	238, 238, 238, 38, 223, 223, 224, 224, 225, 225,
	226, 227, 227, 227, 230, 228, 229, 229, 614, 614,
	613, 37, 37, 30, 175, 175, 176, 176, 176, 178,
	178, 282, 282, 282, 177, 177, 179, 179, 179, 573,
	575, 575, 577, 576, 576, 576, 579, 579, 579, 579,
	579, 580, 580, 580, 580, 581, 581, 31, 157, 157,
	182, 182, 162, 584, 584, 584, 583, 583, 585, 585,
	586, 586, 344, 344, 345, 345, 173, 174, 174, 164,
	159, 181, 181, 181, 181, 181, 183, 183, 250, 250,
	158, 163, 166, 168, 574, 582, 582, 582, 428, 428,
	425, 426, 426, 423, 422, 422, 422, 588, 588, 587,
	587, 587, 359, 359, 32, 418, 418, 420, 421, 421,
	421, 412, 412, 412, 412, 36, 416, 416, 417, 417,
	417, 417, 417, 417, 417, 413, 413, 415, 415, 411,
	411, 411, 411, 411, 411, 411, 35, 180, 180, 410,
	410, 407, 407, 405, 405, 406, 406, 404, 404, 404,
	408, 408, 43, 78, 44, 45, 46, 42, 409, 409,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	141, 140, 140, 140, 140, 140, 143, 143, 343, 343,
	342, 342, 142, 283, 283, 41, 261, 261, 483, 483,
	478, 478, 478, 478, 478, 498, 498, 498, 479, 479,
	479, 480, 480, 480, 482, 482, 482, 481, 481, 481,
	481, 481, 497, 497, 499, 499, 499, 450, 450, 451,
	451, 451, 454, 454, 470, 470, 471, 471, 469, 469,
	476, 476, 475, 475, 474, 474, 473, 473, 472, 472,
	472, 472, 465, 465, 464, 464, 452, 452, 452, 452,
	452, 453, 453, 453, 463, 463, 468, 468, 314, 314,
	313, 313, 269, 269, 270, 270, 312, 312, 267, 267,
	268, 268, 268, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 548,
	548, 549, 272, 272, 284, 284, 284, 284, 284, 284,
	271, 271, 273, 273, 249, 249, 247, 247, 239, 239,
	239, 239, 239, 240, 240, 241, 241, 242, 242, 242,
	246, 246, 245, 245, 245, 245, 243, 243, 244, 244,
	244, 244, 244, 244, 436, 436, 545, 545, 546, 546,
	541, 541, 541, 544, 544, 544, 544, 544, 544, 544,
	547, 547, 547, 543, 543, 251, 337, 337, 337, 360,
	360, 360, 360, 362, 336, 336, 336, 266, 266, 265,
	265, 263, 263, 263, 263, 263, 263, 263, 263, 263,
	263, 263, 263, 263, 263, 263, 263, 263, 263, 263,
	263, 263, 263, 435, 435, 376, 376, 377, 377, 295,
	294, 294, 294, 294, 294, 292, 293, 291, 291, 291,
	291, 291, 288, 288, 287, 287, 287, 289, 289, 289,
	289, 289, 414, 414, 285, 285, 275, 275, 275, 274,
	274, 274, 477, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 290, 334, 334, 334, 335, 335, 335,
	335, 335, 335, 335, 335, 386, 386, 392, 392, 557,
	557, 556, 252, 252, 252, 253, 253, 253, 253, 253,
	253, 253, 253, 253, 262, 262, 262, 459, 459, 459,
	459, 460, 460, 460, 460, 461, 461, 461, 457, 457,
	458, 458, 397, 398, 398, 504, 504, 505, 505, 455,
	455, 456, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 512, 512, 512, 330, 330,
	330, 330, 330, 330, 330, 330, 330, 330, 330, 330,
	330, 330, 330, 330, 567, 567, 567, 553, 553, 553,
	554, 554, 554, 554, 554, 554, 554, 554, 554, 554,
	554, 554, 555, 555, 555, 555, 555, 555, 555, 555,
	555, 555, 555, 555, 555, 555, 555, 555, 555, 332,
	332, 332, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	399, 399, 400, 400, 509, 509, 509, 509, 509, 509,
	510, 510, 511, 511, 511, 511, 503, 503, 503, 503,
	503, 503, 503, 503, 503, 503, 503, 503, 503, 503,
	503, 503, 503, 503, 503, 503, 503, 503, 503, 503,
	503, 503, 503, 503, 503, 503, 384, 329, 329, 329,
	401, 393, 393, 394, 394, 395, 395, 387, 387, 387,
	387, 387, 387, 388, 388, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 382, 382, 382, 382,
	382, 382, 382, 382, 382, 382, 382, 389, 389, 391,
	391, 403, 403, 403, 402, 402, 402, 402, 402, 402,
	402, 264, 264, 264, 264, 381, 381, 381, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	254, 254, 254, 254, 258, 258, 260, 260, 260, 260,
	260, 260, 260, 260, 260, 260, 260, 260, 260, 260,
	259, 259, 259, 259, 259, 257, 257, 257, 257, 257,
	255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
	255, 255, 255, 255, 255, 255, 255, 255, 255, 121,
	122, 122, 256, 339, 339, 484, 484, 487, 487, 485,
	485, 486, 488, 488, 488, 489, 489, 489, 490, 490,
	490, 494, 494, 348, 348, 348, 356, 356, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 353, 353, 353,
	353, 353, 353, 353, 353, 353, 353, 353, 353, 353,
	353, 353, 353, 353, 353, 353, 353, 353, 353, 353,
	353, 353, 353, 353, 353, 353, 353, 353, 353, 353,
	353, 353, 353, 353, 353, 353, 353, 353, 353, 353,
	353, 353, 353, 353, 353, 353, 353,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 8,
	8, 0, 2, 0, 2, 11, 1, 3, 0, 3,
	3, 3, 3, 1, 2, 4, 5, 6, 1, 2,
	7, 9, 10, 10, 12, 1, 5, 6, 8, 10,
	9, 5, 7, 9, 8, 6, 4, 0, 1, 1,
	0, 1, 5, 2, 2, 6, 9, 6, 9, 4,
	7, 8, 0, 1, 1, 2, 4, 6, 1, 2,
	4, 0, 2, 10, 11, 2, 0, 2, 1, 3,
	3, 3, 0, 2, 0, 2, 1, 3, 5, 0,
	2, 3, 1, 3, 1, 1, 1, 3, 1, 1,
	1, 1, 0, 3, 3, 0, 3, 3, 0, 1,
	3, 0, 1, 3, 0, 2, 1, 2, 3, 4,
	3, 3, 1, 0, 1, 1, 0, 1, 8, 5,
	7, 0, 3, 8, 5, 1, 3, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 4,
	1, 3, 1, 2, 2, 2, 2, 2, 2, 2,
	1, 2, 2, 2, 2, 1, 1, 2, 2, 1,
	1, 1, 1, 1, 2, 2, 2, 1, 2, 1,
	2, 2, 1, 2, 1, 1, 2, 2, 1, 1,
	1, 3, 2, 2, 2, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	6, 3, 4, 4, 5, 1, 3, 3, 1, 2,
	2, 2, 1, 2, 2, 3, 4, 4, 6, 1,
	1, 1, 2, 4, 6, 1, 4, 1, 3, 3,
	4, 4, 4, 4, 3, 3, 2, 4, 4, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 3, 1,
	3, 1, 1, 1, 1, 1, 1, 2, 3, 3,
	4, 5, 4, 2, 2, 0, 1, 4, 2, 4,
	1, 5, 3, 2, 1, 2, 2, 4, 4, 5,
	2, 1, 3, 4, 4, 1, 2, 9, 7, 1,
	3, 3, 1, 1, 3, 1, 3, 2, 1, 2,
	1, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 4, 2, 4, 3, 3, 1, 1, 1,
	1, 1, 1, 2, 3, 4, 7, 2, 3, 3,
	4, 3, 4, 4, 5, 3, 4, 4, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 2, 1, 1, 1, 1, 6,
	4, 1, 1, 0, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 10, 7, 4, 4, 3,
	1, 3, 3, 1, 3, 1, 6, 7, 3, 3,
	3, 1, 1, 1, 3, 2, 4, 5, 5, 6,
	5, 5, 3, 2, 2, 1, 3, 4, 3, 7,
	5, 8, 2, 2, 1, 3, 2, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 0, 1, 2, 1,
	3, 2, 1, 2, 2, 1, 2, 3, 2, 2,
	3, 6, 3, 3, 1, 1, 7, 7, 7, 8,
	8, 0, 4, 7, 6, 0, 3, 0, 2, 0,
	1, 1, 1, 1, 4, 2, 2, 3, 3, 4,
	5, 3, 4, 4, 2, 2, 2, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 4, 3, 3, 3, 4, 5, 6, 5, 2,
	5, 5, 0, 2, 7, 0, 1, 0, 1, 5,
	5, 3, 3, 2, 4, 4, 4, 4, 4, 1,
	1, 1, 3, 3, 1, 1, 1, 6, 0, 1,
	1, 1, 1, 5, 5, 0, 1, 1, 3, 3,
	3, 4, 7, 7, 5, 4, 7, 8, 3, 3,
	2, 3, 4, 0, 2, 2, 0, 2, 2, 1,
	1, 1, 1, 0, 1, 5, 5, 6, 4, 3,
	1, 3, 1, 1, 3, 5, 2, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 4, 4, 1,
	3, 1, 4, 6, 6, 4, 4, 4, 4, 4,
	3, 6, 3, 5, 1, 1, 2, 2, 11, 8,
	9, 1, 3, 2, 4, 0, 2, 0, 1, 1,
	1, 1, 0, 1, 0, 1, 4, 2, 1, 5,
	4, 4, 2, 5, 5, 1, 3, 2, 1, 5,
	4, 4, 2, 0, 5, 4, 0, 1, 3, 3,
	1, 3, 1, 3, 1, 3, 4, 0, 1, 0,
	1, 1, 3, 1, 1, 0, 4, 1, 3, 2,
	1, 0, 8, 0, 4, 7, 4, 0, 2, 0,
	2, 0, 2, 0, 4, 1, 3, 1, 1, 6,
	4, 5, 7, 4, 5, 0, 1, 3, 8, 0,
	6, 0, 4, 6, 1, 1, 1, 1, 1, 2,
	3, 1, 3, 6, 0, 3, 0, 1, 2, 4,
	4, 0, 1, 3, 1, 3, 3, 0, 1, 1,
	0, 2, 2, 0, 2, 3, 3, 3, 1, 3,
	3, 3, 3, 1, 2, 2, 1, 2, 2, 1,
	2, 2, 1, 2, 2, 7, 0, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 2, 0, 4, 7, 6, 6, 3, 5, 0,
	2, 0, 2, 1, 3, 1, 2, 3, 5, 0,
	1, 2, 1, 3, 1, 1, 1, 1, 4, 4,
	4, 3, 4, 3, 2, 2, 2, 2, 2, 3,
	2, 3, 2, 4, 1, 3, 4, 0, 2, 1,
	1, 2, 2, 2, 0, 1, 2, 4, 1, 3,
	1, 3, 2, 3, 1, 4, 3, 0, 1, 1,
	2, 5, 2, 2, 2, 0, 2, 3, 3, 0,
	1, 3, 1, 3, 0, 1, 2, 1, 1, 0,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 7, 1, 1,
	7, 1, 3, 0, 1, 1, 3, 1, 3, 0,
	1, 1, 1, 14, 1, 3, 0, 1, 1, 3,
	1, 1, 2, 4, 1, 1, 1, 1, 0, 1,
	2, 9, 9, 7, 1, 2, 3, 3, 3, 0,
	4, 1, 1, 1, 1, 1, 0, 1, 1, 1,
	1, 1, 4, 1, 1, 1, 3, 3, 4, 3,
	3, 0, 1, 1, 1, 0, 2, 7, 8, 10,
	2, 2, 8, 0, 3, 3, 0, 3, 0, 3,
	0, 5, 1, 3, 0, 3, 3, 0, 2, 9,
	8, 0, 2, 2, 3, 3, 0, 2, 0, 2,
	4, 4, 4, 4, 1, 0, 2, 2, 1, 3,
	2, 1, 3, 2, 1, 3, 2, 0, 1, 3,
	4, 3, 1, 1, 4, 1, 3, 1, 1, 1,
	1, 0, 1, 1, 1, 11, 0, 2, 3, 3,
	2, 2, 3, 1, 1, 1, 3, 3, 4, 0,
	2, 2, 2, 2, 2, 2, 6, 0, 4, 1,
	1, 0, 3, 0, 1, 1, 2, 4, 4, 4,
	0, 1, 8, 2, 4, 4, 4, 9, 0, 2,
	11, 9, 11, 8, 6, 9, 7, 10, 7, 6,
	2, 2, 9, 4, 5, 3, 0, 4, 1, 3,
	0, 3, 6, 0, 2, 10, 0, 2, 0, 2,
	0, 3, 2, 4, 3, 0, 2, 1, 0, 2,
	3, 0, 2, 3, 0, 2, 1, 0, 3, 2,
	4, 3, 0, 1, 0, 1, 1, 0, 6, 0,
	3, 5, 0, 4, 0, 3, 1, 3, 4, 5,
	0, 3, 1, 3, 2, 3, 1, 2, 0, 4,
	6, 5, 0, 2, 0, 2, 4, 5, 4, 5,
	1, 5, 6, 5, 0, 3, 0, 1, 1, 3,
	3, 3, 0, 4, 1, 3, 3, 3, 0, 1,
	1, 3, 2, 3, 3, 3, 4, 4, 3, 3,
	3, 3, 4, 4, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 1, 5, 4, 5, 1,
	3, 3, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 2, 4, 0, 5,
	5, 5, 5, 0, 1, 1, 3, 1, 1, 1,
	1, 1, 7, 9, 7, 9, 2, 1, 7, 9,
	7, 9, 8, 5, 0, 1, 0, 1, 1, 1,
	1, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 3, 1, 3, 5, 1,
	1, 1, 1, 1, 1, 3, 5, 0, 1, 1,
	2, 1, 2, 2, 1, 1, 2, 2, 2, 3,
	3, 2, 2, 1, 5, 6, 4, 1, 1, 1,
	5, 4, 1, 1, 2, 0, 1, 1, 2, 5,
	0, 1, 1, 2, 2, 3, 3, 1, 1, 2,
	2, 2, 0, 1, 2, 2, 2, 0, 4, 7,
	3, 3, 0, 3, 0, 3, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 1, 1, 1, 1, 3,
	5, 2, 2, 2, 2, 4, 1, 1, 2, 5,
	6, 8, 6, 6, 6, 1, 1, 1, 1, 1,
	1, 3, 9, 1, 4, 4, 4, 7, 9, 7,
	7, 7, 9, 7, 7, 0, 2, 0, 1, 1,
	2, 4, 1, 2, 2, 1, 2, 2, 1, 2,
	2, 2, 2, 2, 0, 1, 1, 1, 2, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 2, 5,
	0, 1, 3, 0, 1, 0, 2, 0, 2, 0,
	1, 6, 8, 8, 6, 6, 5, 5, 5, 6,
	6, 6, 6, 5, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 1, 1, 1, 4, 4,
	6, 8, 6, 4, 5, 4, 4, 4, 3, 4,
	6, 6, 7, 4, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 8, 4, 2, 3, 2, 4, 2, 2, 4,
	6, 2, 2, 4, 6, 4, 2, 4, 4, 4,
	0, 1, 2, 3, 1, 1, 1, 1, 1, 1,
	0, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 1, 1,
	3, 0, 1, 1, 3, 1, 3, 3, 3, 3,
	3, 2, 1, 1, 1, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 1, 3, 4, 4, 5,
	4, 5, 3, 4, 5, 6, 1, 0, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 1, 1, 2,
	3, 1, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 2, 2, 2, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 4, 4, 1, 2,
	3, 5, 1, 1, 3, 0, 1, 0, 3, 0,
	3, 3, 0, 3, 5, 0, 3, 5, 0, 1,
	1, 0, 1, 1, 2, 2, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -612, -615, -2, -5, 631, -1, -4, -122, -91,
	-7, -14, -124, -125, -8, -120, -9, -10, -12, -98,
	-115, -117, -119, -118, -47, -11, -114, -85, -86, -100,
	-108, -111, -112, -113, -126, -121, -123, -184, -127, -128,
	-129, -171, -132, -134, -135, 621, -92, -93, -94, -95,
	-96, -97, -33, -32, -31, -30, -157, -162, -165, -167,
	-130, 554, 627, 457, 14, 506, -15, -16, -558, -17,
	266, -364, -365, -366, -368, -616, -48, -49, -50, -60,
	-61, -62, -63, -64, -74, -75, -76, -51, -52, -53,
	-56, -54, -67, -66, -68, -69, -70, -71, -72, -73,
	-55, -59, -160, -161, -77, -57, -78, -58, -169, -172,
	-131, -79, -80, -81, -83, -82, -88, -84, -89, -159,
	-164, -13, -170, -90, 240, -87, 76, -101, -102, -103,
	-104, -105, -106, -107, -109, -110, 381, 387, 444, 620,
	61, -185, -187, 649, 650, 653, 541, 544, 162, 163,
	165, 166, 170, 173, -34, -35, -36, -37, -38, -39,
	-41, -40, -42, -43, -44, -45, -46, 236, 16, 549,
	-18, -21, -19, -22, -20, -28, -29, -27, -24, -26,
	-158, -25, -163, -23, -166, -168, -133, 261, 260, 38,
	327, 328, 329, 385, 259, 237, 239, 15, 31, 42,
	360, -186, 85, 542, 238, -188, 13, 655, -6, -3,
	-2, -144, -148, -152, -155, -156, -153, -154, -4, -122,
	120, 251, 622, -360, 377, 623, 625, 624, 88, 96,
	-353, -355, 457, 266, 381, 387, 620, 650, 653, 541,
	544, 556, 557, 558, 559, 560, 561, 562, 563, 565,
	566, 567, 568, 569, 570, 571, 581, 582, 572, 573,
	574, 575, 576, 577, 578, 579, 583, 584, 585, 586,
	587, 588, 589, 590, 591, 592, 593, 594, 595, 596,
	509, 606, 607, 608, 609, 537, 564, 600, 601, 602,
	603, 358, 359, 546, 278, 302, 412, 308, 315, 162,
	182, 176, 205, 196, 542, 171, 282, 320, 283, 95,
	165, 492, 110, 469, 441, 168, 297, 299, 301, 538,
	539, 371, 304, 536, 303, 305, 307, 540, 284, 361,
	192, 187, 296, 280, 185, 285, 40, 286, 210, 287,
	288, 551, 465, 357, 471, 312, 52, 439, 186, 466,
	300, 468, 214, 218, 483, 484, 180, 181, 473, 486,
	209, 212, 213, 258, 354, 355, 43, 548, 270, 487,
	216, 645, 208, 203, 495, 316, 314, 207, 179, 202,
	281, 65, 220, 219, 221, 435, 436, 437, 438, 289,
	290, 375, 482, 199, 188, 362, 172, 23, 490, 265,
	470, 388, 291, 309, 317, 215, 217, 272, 277, 332,
	550, 443, 276, 313, 488, 184, 269, 298, 264, 491,
	646, 173, 390, 292, 166, 306, 485, 648, 494, 64,
	403, 178, 169, 638, 639, 255, 163, 274, 279, 647,
	293, 294, 295, 535, 319, 318, 310, 170, 543, 200,
	271, 206, 190, 177, 201, 164, 273, 493, 404, 618,
	360, 422, 198, 195, 275, 248, 489, 472, 167, 426,
	405, 193, 321, 613, 614, 615, 376, 353, 322, 323,
	191, 262, 463, 464, 326, 432, 344, 406, 442, 413,
	407, 227, 228, 330, 475, 477, 211, 616, 333, 334,
	335, 467, 336, 337, 338, 339, 380, 56, 58, 97,
	100, 99, 651, 652, 63, 29, 366, 369, 401, 408,
	346, 619, 547, 343, 347, 348, 370, 25, 424, 392,
	428, 427, 48, 49, 50, 53, 54, 55, 57, 59,
	60, 51, 534, 385, 398, 496, 45, 47, 395, 27,
	372, 423, 445, 342, 425, 456, 46, 454, 455, 476,
	26, 374, 373, 62, 44, 431, 433, 434, 324, 340,
	383, 628, 497, 378, 394, 397, 379, 345, 368, 399,
	67, 66, 391, 629, 386, 384, 341, 552, 553, 349,
	580, 363, 440, 531, 530, 529, 528, 527, 526, 525,
	524, 327, 328, 329, 409, 410, 411, 421, 414, 415,
	416, 417, 418, 419, 420, 459, 460, 630, 478, 480,
	481, 479, 243, 654, 364, 365, 246, 632, 633, 98,
	634, 636, 635, 28, 637, 644, 641, 642, 643, 555,
	231, -441, -439, -360, 542, 620, 387, 541, 544, 381,
	360, 650, 653, 385, 266, 327, 328, 329, 457, 358,
	-233, -360, 654, -197, 250, 39, -247, -360, -197, -87,
	-16, -15, -186, -187, -247, 245, -369, 24, 439, -99,
	440, 240, 241, 85, 77, -360, -9, -113, -8, -120,
	-85, -184, 444, -367, -360, 327, 327, -367, 245, -362,
	276, 420, -360, -496, 251, -445, -418, 277, -444, -420,
	-447, -421, 32, 236, 238, 237, 554, 273, 16, 385,
	247, 14, 13, 386, 259, 25, 26, 28, 15, 387,
	389, 29, 390, 393, 394, 395, 42, 398, 399, 266,
	88, 96, 91, 284, -232, -360, -395, -387, 117, -390,
	-382, -383, -385, -338, -532, -380, 85, 144, 145, 152,
	118, 656, -384, -477, 36, 120, 560, 564, 600, 507,
	-330, -331, -332, -333, -334, -335, 545, -360, -533, -531,
	91, 101, 103, 107, 108, 106, 104, 156, 189, 105,
	92, 157, -187, 88, -553, 570, -354, 593, 606, 607,
	608, 609, 592, 61, -503, -511, 244, -509, 155, 194,
	262, 190, 14, 150, 432, 191, 601, 602, 603, 567,
	589, 509, 571, 581, 596, 562, 563, 565, 557, 558,
	559, 561, 572, 574, 588, -512, 584, 594, 595, 580,
	604, 605, 641, 597, 598, 599, 636, 90, 89, 587,
	586, 573, 568, 569, 575, 556, 566, 576, 577, 585,
	590, 591, 369, 110, 370, 371, 499, 361, 80, 372,
	251, 439, 70, 373, 374, 375, 376, 377, 506, 378,
	71, 379, 368, 266, 422, 380, 193, 211, 511, 510,
	512, 503, 500, 498, 501, 502, 504, 505, 578, 579,
	583, -136, -138, 611, -606, -321, -607, 6, 7, 8,
	9, -608, 157, -597, 441, 550, 91, 320, 358, 17,
	499, 640, 540, 640, 540, 167, 164, -432, 167, 116,
	173, 172, 249, 167, -432, -360, 170, 640, 169, 638,
	330, 272, -409, -175, 358, 422, 336, 97, 276, -412,
	-410, 538, -497, 324, 320, 296, 246, 113, -176, 256,
	255, 111, 499, 244, 396, 315, 56, 58, -568, -569,
	233, 234, 235, -560, 532, -559, -360, 640, 645, 371,
	99, 100, 638, 639, 27, 245, 382, 272, 477, 475,
	476, 478, 479, 480, 481, -65, -513, -495, 472, 471,
	-373, 464, 470, 462, 474, 465, 359, 338, 554, 337,
	236, 632, 539, 533, -348, 406, 442, 496, 497, 383,
	443, 483, 485, 466, 110, 197, 194, 246, 248, 245,
	638, 358, 499, 422, 97, 336, 245, -568, 645, 164,
	483, 485, 441, 276, 420, 41, -438, 432, -437, -439,
	484, 495, 89, 90, 482, -348, 110, 463, 463, -606,
	-321, -185, -187, -123, -558, 540, 640, 246, 358, 422,
	276, 247, 245, 535, 538, 248, 499, 244, 327, 382,
	272, 336, 97, 169, 638, -191, -192, -193, 229, 230,
	231, 69, 234, 232, 66, 32, 33, 34, -1, 124,
	655, -387, -387, -6, 658, -6, -387, -360, -360, 159,
	-254, -258, -255, -257, -256, -260, -259, 194, 195, 155,
	198, 204, 200, 201, 202, 203, 205, 206, 207, 208,
	209, 212, 213, 210, 31, 211, 262, 190, 191, 192,
	193, 214, 176, 196, 547, 222, 177, 223, 178, 224,
	179, 225, 180, 181, 226, 182, 185, 186, 187, 188,
	184, 158, -222, 91, 32, 85, 158, 91, -214, 268,
	-197, -247, -239, 158, 656, -214, -606, -207, -208, 11,
	-247, -336, -360, 441, 127, -99, 77, -99, 440, 77,
	-99, 440, 240, -561, -562, -563, -565, 240, 440, 439,
	241, -118, 158, 284, 17, -367, -367, 83, -247, -420,
	276, -445, -418, 36, 82, 159, 249, 159, 82, 85,
	383, 358, 422, 384, 499, 245, 396, 248, 276, 397,
	358, 422, 245, 248, 499, 276, 358, 245, 248, 422,
	276, 397, 358, 462, 463, 248, 27, 388, 391, 392,
	463, -517, 495, 159, 116, 113, 114, 115, -387, 134,
	-402, 127, 128, 129, 130, 131, 132, 133, 141, 140,
	151, 144, 145, 146, 147, 148, 149, 150, 142, 143,
	137, 117, 135, 139, 136, 119, 154, -187, -387, -395,
	61, -385, -385, -385, -385, -360, -477, -392, -387, 85,
	85, 85, 85, 85, 158, 104, 91, -387, 85, 85,
	85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
	-510, 85, 85, -399, -400, 85, 85, -380, -336, 85,
	91, 91, 85, 85, 85, 91, 85, 85, 85, -400,
	-400, 85, 85, 85, 85, 85, 85, 85, 85, 85,
	85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
	85, 85, 85, 85, 85, 85, 85, -208, 159, -207,
	85, -207, -208, -188, -187, 32, 33, 32, 33, 32,
	33, 32, 33, -609, 629, 85, 101, 651, 227, 17,
	-360, 638, -360, -591, 32, 543, 543, 543, 543, 488,
	549, 171, 172, 173, -360, 170, 249, -360, -407, 251,
	-407, -407, -231, -360, -233, 382, 248, 535, 248, -176,
	-407, -407, -407, -407, -407, 247, -407, 24, 245, 245,
	245, 245, -407, 506, 127, 127, 59, -570, 175, 159,
	-560, -213, 85, -591, 646, 647, 648, -372, 135, 139,
	-372, -317, 18, -317, 24, 24, 274, 274, 274, -372,
	314, -617, -618, 17, 137, -370, -618, -370, -370, -372,
	-619, 247, 473, 43, 275, 274, -209, -210, 22, -209,
	467, 463, -462, 468, 469, -374, -618, -373, -372, -372,
	-373, -372, -372, -372, 32, 245, 248, 499, 336, 633,
	-617, -617, 31, 31, -496, -496, -247, -496, -496, 533,
	-349, -360, -496, -496, -496, -301, -302, -247, -571, 250,
	648, -603, -602, 486, -605, 488, 164, -439, 164, -439,
	88, -420, 276, 276, 159, 127, 24, -440, 127, 138,
	-439, -439, -440, -440, -271, 41, -359, 155, -360, 91,
	-271, 41, -600, -599, -247, -208, -188, -187, 86, 86,
	86, 543, -591, -496, -496, -496, -496, -496, -497, -496,
	-496, -496, -496, -496, -367, -223, -360, -233, 251, -496,
	-496, -496, -496, -189, -190, 146, -387, -360, -193, -3,
	-146, -145, 121, 122, 124, 623, 377, 622, 626, 620,
	-439, 41, -490, 404, 403, -484, -486, 85, -485, 85,
	-485, -485, -485, -485, -485, 85, 85, -487, 85, -487,
	-487, -484, -488, 85, -488, -489, 85, -489, -488, -360,
	-466, 549, -393, -395, -360, 39, -506, 61, -184, 85,
	31, 85, -214, -360, 191, 169, 637, -507, 61, -184,
	85, 31, -208, -139, 39, -210, 21, 158, 101, 91,
	-118, -99, 77, -118, -99, -99, 86, 159, -564, 107,
	108, -566, 209, 200, -360, -116, 91, -7, -11, -8,
	-9, -10, -47, -85, -184, 541, 544, -534, -532, 85,
	32, 431, 82, 17, -446, 245, 499, 382, 272, 248,
	358, -444, -427, -424, -422, -359, -420, -423, -422, -449,
	-336, 463, -140, 446, 445, 326, -387, -387, -387, -387,
	-387, 106, 117, 353, 107, 108, -382, -403, 32, 322,
	323, -383, -383, -383, -383, -383, -383, -383, -383, -383,
	-383, -383, -383, -391, -401, -477, 85, 137, 135, 139,
	136, 119, -385, -385, -383, -383, -273, -359, 155, 86,
	159, -387, -557, -556, 121, -387, -387, -387, -387, -413,
	-415, -336, 85, -360, -554, -555, 513, 514, 515, 516,
	517, 518, 519, 520, 521, 522, 523, 373, 368, 374,
	372, 361, 380, 375, 376, 193, 530, 531, 524, 525,
	526, 527, 528, 529, -393, -393, -387, -554, -393, -329,
	33, 32, -395, -395, -395, 86, -387, -567, 351, 350,
	352, -211, -360, -393, 86, 86, 86, 101, -395, -395,
	-393, -383, -393, -393, -393, -393, -555, -329, -329, -329,
	-329, 146, -395, -395, -329, -329, -329, -329, 146, -329,
	-329, -329, -329, -329, -329, -329, -329, -329, -329, -329,
	86, 86, 86, 146, -395, -209, -138, -515, -514, -387,
	41, -139, -210, -610, 630, 85, -336, -598, 91, 91,
	656, 169, 638, 17, 499, -360, 17, 245, -360, 101,
	-360, 101, 489, 490, 168, 172, 171, -360, 170, -360,
	-360, 117, -360, -360, 35, 85, -223, -407, -407, -407,
	-575, -360, 92, -428, -425, -422, -360, -360, -418, -360,
	-349, -247, -407, -407, -407, -407, -247, -282, 53, 54,
	55, -422, -177, 56, 57, -571, -559, 35, -212, -360,
	-317, -385, -385, -387, 358, 499, 245, -422, 276, -617,
	-372, -372, -350, -349, -374, -369, -374, -374, -317, -370,
	-372, -372, -387, -374, -370, -317, -360, 463, -317, -317,
	-462, -372, -371, -360, -371, -407, -349, -350, -350, -247,
	-247, -296, -303, -297, -304, 268, 242, 366, 367, 239,
	237, 11, 238, -311, 315, -408, 507, -277, -278, 77,
	42, -280, 266, 408, 401, 278, 282, 95, 283, 441,
	284, 247, 286, 287, 288, 303, 305, 258, 289, 290,
	291, 432, 292, 163, 304, 293, 294, 295, 384, -272,
	6, 339, 549, 41, 51, 52, 455, 454, 552, 279,
	-360, -575, -573, 31, -360, 31, -428, -422, -360, -360,
	159, 249, -200, -202, -199, -195, -196, -201, -320, -322,
	-198, 85, -247, -187, -360, -439, 159, 487, 489, 490,
	-603, -440, -603, -440, 249, 32, 431, -443, 431, 32,
	-418, -437, 483, 485, -433, 91, 432, -423, -442, 82,
	155, -514, -440, -440, -442, -442, 154, 159, -601, 488,
	489, 233, -209, 101, -249, -247, -575, -427, -418, -360,
	-496, -249, -249, -249, -362, -362, 85, 158, 36, -360,
	-360, -360, -360, -316, 159, -315, 17, -361, -360, 35,
	91, 158, -147, -145, 123, -387, -6, 622, -387, -6,
	-6, -387, -6, -387, -494, 405, 101, 101, -339, 91,
	-339, 101, 101, 101, 555, 86, 91, -431, 82, -508,
	-396, -552, 611, -216, 86, -211, -550, -551, -211, -215,
	-360, -506, -239, 127, 127, 127, -508, -216, 86, -550,
	-209, 612, -139, -206, -205, -387, -360, 24, -118, -99,
	-562, 158, 159, -212, -446, -426, -423, -448, 146, -360,
	-434, 159, 549, 659, 89, 249, -588, -587, 423, 86,
	159, -518, 250, 506, 91, 656, 439, 227, 228, 106,
	353, 107, 108, -477, -395, -391, -385, -385, -383, -383,
	-389, 263, -389, 116, -387, 657, -386, -556, 123, -387,
	35, 159, 35, 159, 83, 159, 86, -484, -387, 158,
	86, 86, 17, 17, 86, -387, 86, 86, 86, 86,
	17, 17, -387, 86, 158, 86, 86, 86, 86, 83,
	86, 159, 86, 86, 86, 86, 159, -395, -395, -387,
	-395, 86, 86, 86, -387, -387, -387, -395, 86, -387,
	-387, -387, -387, -387, -387, -387, -387, -387, -387, -212,
	-456, 458, -456, -456, 159, 159, 159, 86, -139, 85,
	101, 159, 652, -343, -342, 91, -360, -360, 169, 638,
	-360, 91, 638, -360, 91, 169, 173, 173, 172, -360,
	91, 36, 24, 313, 24, -232, -234, -235, -236, -237,
	-238, 137, 160, 161, 85, -247, -247, -247, -577, 409,
	-589, 159, 41, -587, 499, -173, 326, -411, 83, -180,
	17, 549, -247, -247, -247, -247, -261, 35, 17, -194,
	-248, -360, 85, 86, 159, -360, -360, -360, -419, 83,
	-360, -350, -317, -317, -374, -317, -317, 159, 23, -372,
	-374, -374, -239, -370, -239, 158, -239, -349, -483, 35,
	-213, 159, 21, 268, -246, -357, -243, -245, 253, -377,
	-244, 256, -546, 254, 252, 111, 257, 311, 112, 247,
	-357, -357, 253, -281, 249, 35, -357, -299, 247, 356,
	311, 254, 21, 268, -298, 247, 112, -360, 253, 257,
	254, 252, -356, 127, -348, 154, 249, 43, 384, -356,
	553, 268, -356, -356, -356, -356, -356, -356, -356, 285,
	285, -356, -356, -356, -356, -356, -356, -356, -356, -356,
	-356, -356, 164, -356, -356, -356, -356, -356, -356, 85,
	331, 280, 281, 313, -578, 409, 31, 364, 364, 365,
	-589, 360, 31, -181, 358, -302, -300, -371, 31, -323,
	-324, -325, -326, -328, -327, 68, 72, 74, 78, 69,
	70, 71, 75, 80, 73, 31, 159, -358, -363, 35,
	-360, 91, -358, -187, -202, -200, -358, 85, -440, -602,
	-604, 491, 488, 494, -442, -442, 101, 249, 85, 127,
	-442, -442, 41, -359, -599, 495, 489, -139, 159, 82,
	-249, -224, -225, -226, -227, -254, -336, 195, 198, 200,
	201, 202, 203, 205, 206, 207, 208, 209, 212, 213,
	210, 211, 262, 190, 191, 192, 193, 214, 176, 196,
	547, 177, 178, 179, 180, 181, 182, 185, 186, 187,
	188, 184, -360, -233, -317, -190, -202, -360, 91, -360,
	146, 124, -6, 122, -151, -150, -149, 125, 620, 626,
	124, 124, 124, 86, 86, 86, 159, 86, 86, 86,
	159, 86, 159, 101, -521, 468, 40, 159, 85, 86,
	159, 61, 159, 127, 86, 159, -387, -360, 91, -387,
	86, 61, -139, 91, 159, -203, 37, 38, 158, 441,
	-360, -532, 86, -448, 159, 249, 158, 158, -424, 387,
	-359, -426, 21, 549, -336, 39, -343, 127, 656, -360,
	86, -389, -389, 116, -385, -382, 86, 124, -387, 122,
	-252, -254, 403, 404, -387, -252, -253, -259, 155, 194,
	262, 193, 192, 190, 403, 404, -271, -415, 546, -203,
	86, -360, -387, -387, 86, -387, -387, 17, -360, -271,
	-383, -387, -208, -208, 86, 86, -455, -456, -455, -455,
	86, 86, 86, 86, -455, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 86, 86, 85, 101, 103, 101,
	103, -514, -611, 63, 628, 62, 431, 106, 316, 159,
	101, 91, 657, 159, 127, 91, -360, -360, 17, 245,
	-360, 17, 173, 91, -590, 320, 358, -467, 101, 320,
	358, 499, 395, 86, 159, -336, -224, -213, 85, -213,
	-580, 470, 411, 421, -356, -379, -378, 360, 42, -501,
	432, 417, 418, -425, 276, -349, -586, 98, 127, 82,
	343, 347, 348, 344, 345, 346, -405, -406, -404, -408,
	-573, 85, 85, -184, 35, 135, -180, 85, 85, 35,
	-478, 333, -254, -247, -194, -360, 17, 159, -572, 158,
	-1, -360, -360, -418, -372, -317, -387, -387, -317, -372,
	-372, -374, -360, -239, -478, -254, 35, -297, 242, 238,
	-452, 313, 314, -453, -468, 316, -470, 85, -251, -336,
	-244, -545, -546, -407, -360, 112, -545, 112, 85, -251,
	-336, -336, -300, -336, -360, -360, -360, -360, -307, -306,
	-336, -309, 32, -310, -360, -360, -360, -360, 112, -360,
	112, -276, 41, 48, 49, 50, -356, -356, 197, -279,
	41, 431, 433, 434, -309, 101, 101, 101, 101, 91,
	91, 91, -356, -356, 101, 91, -363, 91, -547, 172,
	45, 46, 101, 101, 101, 101, 41, 91, -284, 41,
	296, 300, 297, 298, 299, 91, 101, 41, 101, 41,
	101, 41, -360, 85, -548, -549, 91, 332, -467, -580,
	-356, 364, -439, 127, 127, -379, -582, 95, 412, -585,
	326, -183, 499, 32, -217, 242, 238, -573, -430, -429,
	-336, -199, -199, -199, -199, -199, -199, 68, 79, 68,
	68, 68, 73, 68, 73, 68, -325, 68, 79, -430,
	-201, -213, -363, 86, -596, -595, -594, -592, 76, 250,
	77, -393, -442, 488, 492, 493, -426, -375, 91, -433,
	-221, 24, -247, -247, -499, 306, 307, 86, 159, -254,
	-319, 19, 158, 120, -6, -147, -149, -387, -6, -387,
	622, 377, 623, 91, 101, 101, -529, 452, 447, 449,
	112, -396, -516, -515, 61, -184, -211, -508, -551, -514,
	-360, 657, 657, 657, 657, 61, -184, -508, -221, -521,
	-205, -204, 44, -360, 101, 17, -423, -418, 146, 146,
	-360, 388, -434, 91, 410, 91, 245, 657, 91, -343,
	-382, -387, 86, -262, 181, 180, -262, 35, 86, 86,
	-485, -485, -484, -487, -484, -262, -262, 86, 85, -203,
	86, 24, 86, 86, 86, -387, 86, 86, 159, -504,
	508, -505, 582, -455, -455, -455, -455, -455, -455, -455,
	-455, -455, -455, -455, -455, -455, -455, -455, -455, -455,
	-398, -397, 268, 453, 635, 635, 453, 635, 635, 86,
	159, -554, 159, -351, 321, -351, -342, 91, 249, 91,
	169, -360, 91, 638, 91, -360, 91, 313, -360, -360,
	91, 91, -236, -254, 86, 35, -240, -241, -242, -251,
	-243, -245, 35, -581, 95, -576, 91, -360, 92, -582,
	157, 362, 41, 413, 414, 429, 357, 101, 101, 419,
	-574, -360, -182, 245, 358, -584, 52, 127, 91, -247,
	-404, -348, 154, 287, 336, -314, -313, -360, 91, -240,
	-184, -247, -240, -240, -184, -479, 335, 21, 101, 145,
	-214, 83, 158, -202, -248, -360, 146, 86, -317, -239,
	-317, -317, -372, -479, -184, -464, 317, 85, -462, 85,
	-462, 112, 344, -471, -469, 268, -305, 45, 47, -254,
	-543, -360, -541, -543, -360, -541, -541, -407, -387, -305,
	-251, 249, 31, 238, -308, 341, 342, 347, -435, 312,
	117, -435, 159, -203, 159, -360, -271, -271, 31, 91,
	91, -249, 86, 159, 127, 101, 91, -581, -576, 127,
	-440, 91, 91, -582, 91, 91, -586, 127, -250, 245,
	-349, 159, -217, -217, -317, 159, 127, -219, -218, 82,
	83, -220, 82, -218, -218, 68, 68, -317, -594, -593,
	24, -546, -546, -546, 86, 86, 15, -226, 41, -318,
	20, 21, 146, 124, 122, 124, 124, -360, 86, 86,
	-491, 613, -525, -527, 447, 21, 21, 15, 250, 86,
	-508, -508, -529, 45, 46, -418, -434, 432, -247, 159,
	657, -252, -290, 91, -387, 86, -387, 86, 91, 86,
	91, -208, 21, 86, 159, 86, 86, 86, 159, 86,
	86, -387, 86, -554, -352, 191, 91, -352, 358, -361,
	-360, 17, -360, 91, -467, 313, 313, 245, 243, -184,
	86, 159, -184, 91, -579, 423, 101, 41, 101, 157,
	415, -502, -174, 95, -249, 32, -217, -583, 95, 127,
	656, 85, -356, -356, -356, -360, 86, 159, -356, -356,
	86, 86, 86, -269, 549, -480, 267, 101, 145, 101,
	145, 101, -358, -202, -360, -317, -572, 158, -317, -480,
	-454, 318, 101, -383, 85, -383, 85, -463, 315, 85,
	86, 159, -360, -336, -266, -265, -263, 106, 117, 41,
	401, -264, 95, 154, 301, 304, 303, 279, 302, -295,
	-376, 82, 407, 341, 342, -408, 613, 537, 252, 111,
	112, 389, -377, 85, 85, 83, 321, 85, 85, -543,
	86, -305, -336, 41, -308, 41, 354, 312, -306, -360,
	154, -271, 86, -549, 91, -554, -579, 91, -442, -584,
	91, -174, -249, -573, -208, -429, -514, -387, 85, -387,
	85, 68, 11, 19, -380, -387, -395, 641, 643, 644,
	251, -6, 623, 377, -286, 614, 91, 21, 91, -523,
	91, -430, -491, -142, -283, -348, 284, 86, -289, 137,
	549, 86, 86, -455, -455, -458, -457, -461, 453, 313,
	461, -395, 91, 91, 86, 86, 91, -360, 169, 91,
	656, 91, -467, -467, -360, -228, -254, -178, 549, -269,
	-242, -178, 21, 549, 361, 41, 101, 41, 416, 91,
	-182, 127, 107, 108, -344, -345, 91, -413, -271, -273,
	91, -313, -380, -380, -267, -184, 35, -268, -311, -408,
	549, -141, -140, -267, 549, 85, -481, 163, 101, 145,
	101, 101, -317, -317, -481, -470, 21, 86, -449, 86,
	-449, 85, 127, -383, -469, -472, 61, -263, 106, -383,
	91, -273, -274, 41, 300, 296, 127, 127, -275, 41,
	280, 281, -285, 85, 311, 15, 197, 85, 112, 112,
	-247, -413, -413, -544, 343, 344, 345, 349, 347, 348,
	346, -544, -413, -413, 85, -436, -435, -383, -356, -356,
	154, -583, -209, -212, -542, -360, 252, 21, 21, -500,
	549, 642, 85, 85, -360, -360, -340, 615, 101, 91,
	449, -286, -492, 616, -519, -462, -271, 127, 86, 75,
	547, 550, 86, -460, 119, 415, 419, -381, -384, 101,
	103, 189, 157, 86, 86, -360, -347, -346, 91, 91,
	91, 313, 548, -179, 60, 495, 91, 92, 410, 91,
	92, 361, -174, 91, 657, 159, 127, 86, -450, 268,
	-184, 159, -311, -348, -142, -450, -270, -312, -360, 91,
	-498, 172, 334, 549, 101, 145, 101, -208, -482, 172,
	334, -453, 86, 86, 86, -449, 101, 86, -476, -473,
	85, -311, 270, 137, 91, 91, 101, 85, -509, 31,
	91, -414, 85, 86, 86, 86, 86, -413, 101, -271,
	-356, 86, 86, 159, 644, 85, -395, -395, 85, 21,
	-340, -493, 617, 91, -528, 452, -522, -520, 447, 448,
	449, 450, 91, 548, 65, 551, -459, -460, 419, -381,
	-384, 611, 459, 459, 459, 657, 159, 127, -467, -230,
	-360, 311, 432, -345, 91, -416, -451, 320, 21, -311,
	-356, -451, 86, 159, -356, -356, 334, 101, 145, 101,
	-209, 334, -465, 319, 86, -476, -311, -475, -474, 318,
	271, 85, 86, -387, -399, -356, 86, -288, -287, 545,
	-413, -416, 83, -416, 83, -416, 83, -416, 83, 86,
	-271, -360, 252, -137, 85, 86, 86, -341, -360, -523,
	91, -530, 250, -526, -527, 451, -520, 21, 449, 21,
	21, -143, 159, 65, 116, 460, 460, 460, -346, 91,
	91, -229, 35, 454, 388, -417, 258, 354, 355, 95,
	549, 341, 342, 21, -452, -271, -312, -380, -380, 101,
	101, 86, 159, -360, 267, 85, -394, -388, -387, 267,
	86, -360, -294, -292, -293, 82, 466, 309, 310, 86,
	-544, -544, -544, -544, -295, 86, 159, -393, 86, 159,
	-537, 85, 101, -525, -524, -526, 21, -523, 21, -523,
	-523, 456, 549, -459, 91, -356, -356, 91, 91, 340,
	-336, 85, -464, -474, -473, -394, 86, 159, -435, -293,
	82, -292, 82, 16, 15, -416, -416, -416, -416, 85,
	86, -360, -540, 31, 86, -536, -535, -337, -531, -360,
	452, 453, 91, -523, 127, 550, -614, -613, 634, 101,
	101, -360, -449, -454, 86, -388, -291, 306, 307, 31,
	172, -291, -393, -539, -538, -338, 86, 159, 158, 91,
	551, 91, 86, -470, 106, 41, 308, 86, 159, 127,
	-535, -360, -538, 41, -387, 158, -360,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 0, 311, 312, 313, 314,
	315, 316, 975, 976, 977, 978, 979, 980, 981, 982,
	983, 0, 0, 0, 0, 0, 714, 715, 0, 678,
	0, 0, 0, 0, 0, 0, 550, 551, 552, 553,
	554, 555, 556, 557, 558, 559, 560, 561, 562, 563,
	564, 565, 566, 567, 568, 569, 570, 571, 572, 573,
	574, 575, 576, 577, 578, 579, 580, 581, 582, 583,
	584, 585, 586, 587, 425, 426, 427, 428, 429, 430,
	431, 432, 433, 434, 0, 345, 341, 253, 254, 255,
	256, 257, 258, 259, 352, 353, 527, 0, 0, 0,
	0, 797, -2, 97, 0, 0, 0, 0, 334, 0,
	325, 325, 0, 0, 984, 985, 986, 987, 988, 989,
	990, 991, 992, 993, 994, 995, 996, -2, 727, 0,
	679, 680, 681, 682, 683, 684, 685, 686, 687, 688,
	689, 690, 691, 692, 693, 694, 695, 409, 410, 411,
	405, 406, 408, 407, -2, 0, 0, 727, 0, 0,
	0, 805, 0, 0, 0, 848, 866, 23, 0, 7,
	9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
	0, 0, 19, 0, 19, 0, 0, 0, 1399, 1400,
	1401, 1402, 2200, 2170, -2, 1934, 1911, 2094, 2095, 1990,
	2002, 2237, 2238, 2239, 2240, 2241, 2242, 2243, 2244, 2245,
	2246, 2247, 2248, 2249, 2250, 2251, 2252, 2253, 2254, 2255,
	2256, 2257, 2258, 2259, 2260, 2261, 2262, 2263, 2264, 2265,
	2266, 2267, 2268, 2269, 2270, 2271, 2272, 2273, 2274, 2275,
	2276, 2277, 2278, 2279, 2280, 2281, 2282, 2283, 2284, 2285,
	2286, 1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876,
	1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886,
	1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896,
	1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906,
	1907, 1908, 1909, 1910, 1912, 1913, 1914, 1915, 1916, 1917,
	1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927,
	1928, 1929, 1930, 1931, 1932, 1933, 1935, 1936, 1937, 1938,
	1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948,
	1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958,
	1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968,
	1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978,
	1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988,
	1989, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
	2000, 2001, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011,
	2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021,
	2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031,
	2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041,
	2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050, 2051,
	2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061,
	2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071,
	2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081,
	2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091,
	2092, 2093, 2096, 2097, 2098, 2099, 2100, 2101, 2102, 2103,
	2104, 2105, 2106, 2107, 2108, 2109, 2110, 2111, 2112, 2113,
	2114, 2115, 2116, 2117, 2118, 2119, 2120, 2121, 2122, 2123,
	2124, 2125, 2126, -2, 2128, 2129, 2130, 2131, 2132, 2133,
	2134, 2135, 2136, 2137, 2138, 2139, 2140, 2141, 2142, 2143,
	2144, 2145, 2146, 2147, 2148, 2149, 2150, 2151, 2152, 2153,
	2154, 2155, 2156, 2157, 2158, 2159, 2160, 2161, 2162, 2163,
	2164, 2165, 2166, 2167, 2168, 2169, 2171, 2172, 2173, 2174,
	2175, 2176, 2177, 2178, 2179, 2180, 2181, 2182, 2183, 2184,
	2185, -2, -2, -2, 2189, 2190, 2191, 2192, 2193, 2194,
	2195, 2196, 2197, 2198, 2199, 2201, 2202, 2203, 2204, 2205,
	2206, 2207, 2208, 2209, 2210, 2211, 2212, 2213, 2214, 2215,
	2216, 2217, 2218, 2219, 2220, 2221, 2222, 2223, 2224, 2225,
	2226, 0, 309, 307, 1881, 1911, 1934, 1990, 2002, 2003,
	2042, 2094, 2095, 2127, 2170, 2186, 2187, 2188, 2200, 0,
	0, 1001, 0, 775, 0, 0, 780, 1348, 775, 346,
	716, 717, 805, 831, 676, 0, 383, 0, 1925, 387,
	2177, 0, 0, 0, 0, 673, 377, 378, 379, 380,
	381, 382, 0, 0, 974, 0, 0, 373, 0, 340,
	1992, 2199, 1403, 0, 0, 0, 0, 0, 196, 1125,
	198, 1127, 202, 210, 0, 0, 0, 215, 216, 219,
	220, 221, 222, 223, 0, 227, 0, 229, 232, 0,
	234, 235, 0, 238, 239, 240, 0, 250, 251, 252,
	1128, 1129, 1130, -2, 125, 999, 1839, 1725, 0, 1732,
	1745, 1756, 1485, 1486, 1487, 1488, 0, 0, 0, 0,
	0, 0, 1496, 1497, 0, 1527, 2241, 2282, 2283, 0,
	1505, 1506, 1507, 1508, 1509, 1510, 0, 136, 148, 149,
	1778, 1779, 1780, 1781, 1782, 1783, 1784, 0, 1786, 1787,
	1788, 1696, 1472, 1399, 0, 2250, 0, 2272, 2277, 2278,
	2279, 2280, 2271, 0, 0, 1680, 0, 1670, 0, 0,
	-2, -2, 0, 0, 2067, -2, 2284, 2285, 2286, 2247,
	2268, 2276, 2251, 2252, 2275, 2243, 2244, 2245, 2238, 2239,
	2240, 2242, 2254, 2256, 2267, 0, 2263, 2273, 2274, 2175,
	0, 0, 2222, 0, 0, 0, 2217, 150, 151, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 1691, -2, 1693, -2,
	1695, -2, 1698, -2, -2, -2, -2, 1703, 1704, -2,
	1706, -2, -2, -2, -2, -2, -2, -2, 1682, 1683,
	1684, 1685, 1674, 1675, 1676, 1677, 1678, 1679, -2, -2,
	-2, 831, 924, 0, 831, 0, 806, 853, 856, 859,
	862, 809, 0, 0, 98, 99, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 335, 336, 324, 326, 0,
	330, 0, 0, 326, 323, 317, 0, 1161, 1161, 1161,
	0, 0, 0, 0, 1161, 1161, 1161, 1161, 1161, 0,
	1161, 0, 0, 0, 0, 0, 1161, 0, 1034, 1132,
	1133, 1134, 1159, 1160, 1233, 0, 0, 0, 732, 728,
	729, 730, 731, 819, 0, 821, 824, 0, 0, 653,
	653, 891, 891, 0, 599, 0, 0, 0, 653, 0,
	613, 605, 0, 0, 0, 653, 0, 0, 826, 826,
	0, 656, 663, 653, 653, -2, 653, 653, 650, 653,
	0, 0, 1173, 619, 620, 621, 605, 605, 624, 625,
	626, 636, 637, 664, 1863, 0, 0, 527, 527, 0,
	527, 527, 0, 527, 527, 527, 0, 734, 1950, 2037,
	1932, 2008, 1891, 1992, 2199, 0, 282, 2067, 287, 0,
	1933, 1953, 0, 0, 1971, 0, -2, 0, 362, 831,
	0, 0, 805, 0, 0, 0, 0, 527, 527, 527,
	527, 527, 1232, 527, 527, 527, 527, 527, 0, 0,
	0, 527, 527, 527, 527, 0, 867, 868, 870, 871,
	872, 873, 874, 875, 876, 877, 878, 879, 5, 6,
	19, 0, 0, 0, 0, 0, 0, 104, 103, 0,
	1840, 1858, 1791, 1792, 1793, 1845, 1795, 1849, 1849, 1849,
	1849, 1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832,
	1833, 1849, 1849, 0, 0, 1838, 1815, 1847, 1847, 1847,
	1845, 1842, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803,
	1804, 1805, 1806, 1807, 1808, 1809, 1852, 1852, 1855, 1855,
	1852, 0, 423, 421, 422, 1721, 0, 0, 0, 0,
	775, 779, 1346, 0, 0, 0, 831, -2, 0, 0,
	677, 384, 1404, 0, 0, 388, 0, 389, 0, 0,
	391, 0, 0, 0, 412, 0, 415, 399, 400, 401,
	402, 395, 0, 176, 0, 375, 376, 0, 0, 342,
	0, 0, 0, 528, 0, 0, 0, 0, 0, 0,
	207, 203, 211, 214, 224, 231, 0, 243, 245, 248,
	204, 212, 217, 218, 225, 246, 205, 208, 209, 213,
	247, 249, 206, 226, 230, 244, 228, 233, 236, 237,
	242, 0, 177, 0, 0, 0, 0, 0, 1731, 0,
	0, 1764, 1765, 1766, 1767, 1768, 1769, 1770, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, -2, 1725, 0,
	0, 1491, 1492, 1493, 1494, 0, 1498, 0, 1528, 0,
	0, 0, 0, 0, 0, 1785, 1789, 0, 1721, 1721,
	0, 1721, 1717, 0, 0, 0, 0, 0, 0, 1721,
	1653, 0, 0, 1655, 1671, 0, 0, 1657, 1658, 0,
	1661, 1662, 1721, 0, 1721, 1666, 1721, 1721, 1721, 1649,
	1650, 0, 1717, 1717, 1717, 1717, 0, 0, 1717, 1717,
	1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717,
	1717, 1717, 1717, 0, 0, 0, 0, 826, 0, 832,
	0, -2, 0, 850, 852, 854, 855, 857, 858, 860,
	861, 863, 864, 811, 0, 0, 100, 0, 0, 0,
	0, 0, 0, 71, 73, 0, 0, 0, 0, 0,
	0, 328, 0, 333, 319, 2029, 0, 318, 0, 0,
	0, 0, 0, 998, 0, 0, 1161, 1161, 1161, 1035,
	0, 0, 0, 0, 0, 0, 0, 0, 1161, 1161,
	1161, 1161, 0, 1179, 0, 0, 0, 734, 733, 0,
	820, 0, 0, 70, 588, 589, 590, 891, 0, 0,
	592, 593, 0, 594, 0, 0, 605, 653, 653, 611,
	612, 607, 606, 659, 660, 656, 0, 656, 656, 891,
	0, 630, 631, 632, 653, 653, 638, 827, 0, 639,
	640, 656, 0, 661, 662, 891, 0, 0, 891, 891,
	0, 648, 649, 651, 653, 0, 0, 1161, 0, 669,
	607, 607, 1864, 1865, 0, 0, 1170, 0, 0, 0,
	0, 672, 0, 0, 0, 439, 440, 0, 0, 735,
	0, 261, 265, 0, 268, 0, 2037, 0, 2037, 0,
	0, 275, 0, 0, 0, 0, 0, 0, 305, 306,
	0, 0, 0, 0, 296, 299, 1340, 1341, 1122, 1123,
	300, 301, 354, 355, 0, 826, 849, 851, 845, 846,
	847, 0, 72, 0, 0, 0, 0, 0, 527, 0,
	0, 0, 0, 0, 710, 0, 1014, 712, 0, 0,
	0, 0, 0, 899, 893, 895, 969, 136, 869, 8,
	121, 118, 0, 19, 0, 0, 19, 19, 0, 19,
	310, 0, 1861, 1859, 1860, 1794, 1846, 0, 1820, 0,
	1821, 1822, 1823, 1834, 1835, 0, 0, 1816, 0, 1817,
	1818, 1819, 1810, 0, 1811, 1812, 0, 1813, 1814, 308,
	420, 0, 0, 1722, 1002, 0, 753, 767, 748, 0,
	756, 0, 0, 1348, 0, 0, 0, 736, 767, 738,
	0, 756, 826, 803, 0, 781, 0, 0, 385, 0,
	396, 390, 0, 397, 392, 393, 0, 0, 414, 416,
	417, 418, 403, 404, 674, 371, 372, 363, 364, 365,
	366, 367, 368, 369, 370, 0, 0, 374, 146, 0,
	343, 344, 0, 0, 0, 190, 191, 192, 193, 194,
	195, 197, 181, 699, 701, 1114, 1126, 0, 1117, 0,
	200, 241, 173, 0, 0, 0, 1726, 1727, 1728, 1729,
	1730, 1735, 0, 1737, 1739, 1741, 1743, 0, 1761, -2,
	-2, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481,
	1482, 1483, 1484, 1746, 1759, 1760, 0, 0, 0, 0,
	0, 0, 1757, 1757, 1752, 0, 1511, 1342, 1343, 1489,
	0, 0, 1525, 1529, 0, 0, 0, 0, 0, 0,
	1145, 1845, 0, 137, 1716, 1620, 1621, 1622, 1623, 1624,
	1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634,
	1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644,
	1645, 1646, 1647, 1648, 0, 0, 1725, 0, 0, 0,
	1718, 1719, 0, 0, 0, 1608, 0, 0, 1614, 1615,
	1616, 0, 762, 0, 1681, 1654, 1672, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 923, 925, 0, 771, 773,
	774, 800, 781, 807, 0, 0, 0, 96, 101, 0,
	1200, 0, 0, 0, 0, 0, 0, 0, 74, 1174,
	75, 1176, 337, 338, 0, 0, 332, 320, 2029, 322,
	0, 0, 0, 0, 0, -2, 0, 0, 0, 0,
	0, 1050, 1051, 525, 1108, 0, 0, 0, 1124, 1149,
	1157, 0, 0, 0, 0, 0, 1206, 1036, 1041, 1042,
	1043, 1037, 1038, 1044, 1045, 0, 822, 0, 0, 938,
	591, 654, 655, 892, 595, 0, 0, 602, 1992, 607,
	891, 891, 614, 608, 615, 658, 616, 617, 618, 656,
	891, 891, 828, 653, 656, 641, 657, 656, 1348, 645,
	0, 652, 1348, 670, 1348, 0, 668, 622, 623, 1208,
	824, 437, 438, 443, 445, 0, 494, 494, 494, 477,
	494, 0, 0, 465, 1866, 0, 0, 0, 0, 474,
	1866, 0, 0, 1866, 1866, 1866, 1866, 1866, 1866, 1866,
	0, 0, 1866, 1866, 1866, 1866, 1866, 1866, 1866, 1866,
	1866, 1866, 1866, 0, 1866, 1866, 1866, 1866, 1866, 1325,
	1866, 0, 493, 1171, 484, 485, 486, 487, 492, 0,
	0, 521, 0, 0, 1049, 0, 525, 0, 0, 1091,
	0, 0, 904, 0, 905, 906, 907, 902, 940, 964,
	964, 0, 964, 944, 1348, 0, 0, 0, 273, 274,
	262, 0, 263, 0, 0, 276, 277, 0, 279, 280,
	281, 288, 1932, 2008, 283, 285, 0, 0, 289, 302,
	303, 304, 0, 0, 294, 295, 0, 0, 357, 358,
	360, 0, 781, 1175, 696, 1344, 697, 698, 702, 0,
	0, 705, 706, 707, 708, 709, 1016, 0, 0, 1100,
	1101, 1102, 1103, 891, 0, 900, 0, 896, 970, 0,
	972, 0, 0, 119, 19, 0, 112, 109, 0, 0,
	0, 0, 0, 1841, 1790, 1862, 0, 0, 0, 1843,
	0, 0, 0, 0, 0, 102, 783, 743, 0, 747,
	764, 0, 768, 0, 0, 760, 752, 757, 0, 0,
	777, 744, 1347, 0, 0, 0, 737, 0, 0, 742,
	781, 0, 804, 833, 834, 837, 1405, 0, 398, 394,
	413, 0, 0, 0, 0, 184, 1111, 0, 185, 189,
	179, 0, 0, 0, 1116, 0, 1113, 1118, 0, 199,
	0, 0, 174, 175, 1191, 1200, 0, 0, 0, 1736,
	1738, 1740, 1742, 1744, 0, 1747, 1757, 1757, 1753, 0,
	1748, 0, 1750, 0, 1726, 1495, 0, 1530, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 837, 0, 0,
	1598, 1599, 0, 0, 1603, 0, 1605, 1606, 1607, 1609,
	0, 0, 0, 1613, 0, 1652, 1673, 1656, 1659, 0,
	1663, 0, 1665, 1667, 1668, 1669, 0, 831, 831, 0,
	0, 1569, 1569, 1569, 0, 0, 0, 0, 1569, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1514, 0, 1515, 1516, 0, 0, 0, 926, 801, 0,
	0, 0, 0, 0, 1198, 0, 86, 0, 0, 0,
	0, 91, 0, 0, 76, 339, 327, 329, 0, 321,
	0, 1162, 0, 0, 0, 0, 0, 1004, 1005, 1007,
	0, 1010, 1011, 1012, 1016, 824, 0, 824, 1061, 1866,
	529, 0, 0, 1110, 0, 1080, 0, 0, 0, -2,
	0, 0, 1157, 0, 0, 0, 1210, 0, 0, 0,
	721, 725, 23, 825, 0, 598, 596, 0, 600, 0,
	601, 653, 609, 610, 891, 633, 634, 0, 0, 891,
	653, 653, 644, 656, 665, 0, 666, 1348, 1210, 0,
	0, 1170, 1276, 1244, 455, 0, 1360, 1361, 495, 0,
	1367, 1376, 1161, 1437, 0, 1376, 0, 0, 1378, 1379,
	0, 0, 0, 0, 478, 479, 0, 464, 0, 0,
	0, 0, 0, 0, 463, 0, 0, 505, 0, 0,
	0, 0, 0, 1867, 1866, 1866, 0, 472, 473, 0,
	476, 0, 0, 0, 0, 0, 0, 0, 0, 1866,
	1866, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1316, 0, 0, 0, 0, 0, 0, 0,
	0, 1332, 1333, 0, 1061, 1866, 0, 0, 0, 0,
	529, 1105, 1078, 1096, 0, 441, 442, 502, 0, 0,
	0, 0, 0, 0, 0, 930, 0, 0, 0, 929,
	0, 0, 0, 0, 0, 0, 0, 824, 965, 0,
	967, 968, 942, -2, 0, 904, 947, 1721, 0, 266,
	267, 0, 0, 272, 290, 292, 264, 0, 0, 0,
	291, 293, 297, 298, 356, 359, 361, 843, 0, 0,
	1234, 0, 1017, 1018, 1020, 1021, 0, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	1916, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 1015, 713, 882, 894, 901, 971, 973, 137,
	897, 0, 122, 19, 121, 113, 114, 0, 19, 0,
	0, 0, 0, 1851, 1850, 1836, 0, 1837, 1848, 1853,
	0, 1856, 0, 424, 787, 0, 0, 767, 769, 0,
	0, 767, 0, 0, 776, 0, 0, 0, 0, 0,
	0, 767, 843, 783, 0, 840, 838, 839, 0, 0,
	675, 147, 419, 0, 0, 0, 0, 0, 700, 0,
	1115, 181, 0, 0, 201, 0, 0, 0, 1200, 1195,
	1720, 1749, 1751, 0, 1758, 1754, 1490, 1499, 1526, 0,
	0, 1532, 1544, 1544, 0, 0, 0, 1535, 1849, 1849,
	1538, 1845, 1847, 1845, 1544, 1544, 0, 1146, 0, 1147,
	837, 138, 0, 0, 1604, 0, 0, 0, 763, 0,
	0, 0, 1565, 1567, 1569, 1569, 1576, 1570, 1577, 1578,
	1569, 1569, 1569, 1569, 1583, 1569, 1569, 1569, 1569, 1569,
	1569, 1569, 1569, 1569, 1569, 1569, 1563, 0, 0, 1779,
	1780, 772, 0, 0, 814, 815, 816, 817, 818, 0,
	0, 61, 61, 1200, 0, 95, 87, 0, 0, 0,
	0, 0, 331, 0, 77, 78, 0, 0, 85, 0,
	0, 0, 0, 0, 1009, 0, 0, 0, 1353, 0,
	1065, 1062, 1063, 1064, 0, 1105, 530, 531, 532, 533,
	0, 0, 0, 1109, 0, 0, 1073, 0, 0, 0,
	1150, 1151, 1152, 1153, 1154, 1155, 1156, -2, 1165, 0,
	0, 0, 1353, 1184, 0, 0, 1189, 1353, 1353, 0,
	1218, 0, 1207, 775, 0, -2, 0, 0, 723, 0,
	0, 939, 597, 603, 891, 627, 829, 830, 1348, 891,
	891, 653, 671, 667, 1218, 1209, 0, 444, 494, 0,
	1264, 0, 0, 1270, 0, 1277, 448, 0, 496, 0,
	1366, 1393, 1377, 1393, 1438, 1393, 1393, 1161, 0, 496,
	0, 0, 466, 0, 0, 0, 0, 0, 462, 499,
	837, 449, 451, 452, 453, 503, 504, 506, 0, 508,
	509, 468, 480, 481, 482, 483, 0, 0, 0, 475,
	488, 489, 490, 491, 450, 1293, 1294, 1295, 1298, 1299,
	1300, 1301, 0, 0, 1304, 1305, 1306, 1307, 1308, 1390,
	1391, 1392, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1334,
	1335, 1336, 1337, 1338, 1339, 1317, 1318, 1319, 1320, 1321,
	1322, 1323, 1324, 0, 0, 1329, 0, 0, 0, 1065,
	0, 0, 0, 0, 0, 1105, 524, 0, 0, 1080,
	0, 1098, 0, 1092, 1093, 0, 0, 745, 891, 349,
	0, 934, 927, 0, 911, 0, 913, 931, 914, 932,
	933, 918, 0, 920, 0, 916, 917, 922, 915, 891,
	903, 941, 966, 943, 946, 948, 949, 955, 0, 0,
	0, 0, 260, 269, 270, 271, 278, 0, 549, 284,
	799, 0, 1345, 703, 704, 1235, 1236, 711, 0, 1022,
	880, 0, 0, 117, 120, 0, 115, 0, 0, 0,
	0, 107, 105, 1844, 0, 0, 789, 161, 0, 0,
	0, 765, 0, 770, 767, 751, 761, 750, 758, 759,
	778, 1349, 1350, 1351, 1352, 767, 741, 740, 802, 787,
	835, 836, 0, 1406, 386, 0, 1112, 181, 186, 187,
	188, 182, 180, 1119, 0, 1121, 0, 1193, 0, 0,
	1755, 1531, 1500, 1533, 1545, 1546, 1534, 0, 1502, 1503,
	1536, 1537, 1539, 1540, 1541, 1542, 1543, 1504, 0, 1148,
	1600, 0, 1602, 1610, 1611, 0, 1660, 1664, 0, 0,
	0, 0, 0, 1574, 1575, 1579, 1580, 1581, 1582, 1584,
	1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594,
	831, 1564, 0, 0, 0, 0, 0, 0, 0, 812,
	0, 0, 0, 63, 0, 63, 1199, 1201, 0, 969,
	0, 0, 92, 0, 0, 79, 80, 0, 0, 0,
	997, 1000, 1006, 1008, 0, 0, 0, 1354, 1355, 1357,
	1358, 1359, 0, 1033, 0, 0, 1053, 1054, 1055, 1067,
	0, 535, 536, 0, 0, 0, 548, 544, 545, 546,
	526, 1104, 1087, 0, 0, 1076, 0, 0, 1086, 0,
	1166, 1866, 1866, 1866, 0, 0, 1278, 1866, 1866, 0,
	1186, 1188, 0, 0, 1282, 1221, 0, 0, 1212, 0,
	964, 0, 0, 891, 722, 725, 726, 823, 604, 642,
	646, 643, 891, 1221, 436, 1242, 0, 0, 0, 0,
	0, 1274, 0, 0, 1246, 0, 467, 497, 0, -2,
	0, 1394, 0, 1380, 1394, 0, 0, 1393, 0, 456,
	496, 0, 0, 0, 510, 514, 515, 0, 512, 1433,
	0, 513, 0, 501, 0, 507, 1296, 1297, 0, 1302,
	1303, 0, 1327, 0, 0, 0, 447, 516, 0, 0,
	0, 517, 518, 523, 1106, 1107, 1073, 0, 1087, 0,
	1097, 0, 1094, 1095, 831, 0, 0, 908, 935, 0,
	0, 909, 0, 910, 912, 919, 921, 348, 950, 0,
	0, 952, 953, 954, 945, 286, 844, 1019, 0, 865,
	0, 0, 898, 0, 19, 0, 0, 110, 1854, 1857,
	791, 0, 788, 162, 0, 0, 0, 0, 755, 766,
	749, 739, 789, 841, 842, 183, 178, 1120, 1203, 0,
	1194, 0, 1457, 1513, 0, 1612, 0, 1569, 1566, 1569,
	1568, 1560, 0, 1517, 0, 1519, 1520, 1521, 0, 1523,
	1524, 0, 810, 0, 59, 0, 62, 60, 0, 94,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 1039,
	1282, 0, 1039, 1066, 1052, 0, 0, 537, 538, 0,
	541, 547, 1068, 0, 0, 1070, 1071, 1072, 0, 0,
	1084, 0, 0, 0, 0, 1158, 1172, 0, 0, 0,
	-2, 0, -2, 1183, 0, 1227, 0, 1219, 0, 1211,
	0, 1214, 891, 891, -2, 719, 724, 0, 647, 1227,
	1244, 0, 1265, 0, 0, 0, 0, 0, 0, 0,
	1245, 0, 1258, 498, 1395, -2, 1409, 1411, 0, 1171,
	1414, 1415, 0, 0, 0, 0, 0, 0, 1464, 1423,
	0, 0, 1427, 1428, 1429, 0, 0, 1432, 0, 1773,
	1774, 0, 1436, 0, 0, 0, 0, 0, 0, 0,
	1374, 457, 458, 0, 460, 461, 1866, 1434, 500, 454,
	1866, 470, 1326, 1330, 1331, 1328, 522, 519, 520, 1076,
	1079, 1090, 1099, 746, 826, 350, 351, 936, 0, 928,
	959, 956, 0, 0, 1023, 881, 889, 2222, 2224, 2221,
	111, 116, 0, 0, 793, 0, 790, 0, 784, 786,
	172, 754, 791, 132, 164, 0, 0, 1501, 0, 0,
	0, 1601, 1651, 1572, 1573, 0, 1561, 0, 1555, 1556,
	1557, 1562, 0, 0, 813, 808, 64, 90, 0, 93,
	68, 81, 0, 0, 0, 0, 1025, 1032, 1046, 1177,
	1356, 1031, 0, 0, 534, 539, 0, 542, 543, 1088,
	1087, 0, 1074, 1075, 0, 1082, 0, 0, 1167, 1168,
	1169, 1279, 1280, 1281, 1237, 1185, 0, -2, 1290, 0,
	0, 1181, 1203, 1237, 0, 0, 1215, 0, 1222, 0,
	1220, 1213, 831, 720, 1224, 446, 1276, 1266, 0, 1268,
	0, 0, 0, 0, 1247, -2, 0, 1410, 1412, 1413,
	1416, 1417, 1418, 1469, 1470, 1471, 0, 0, 1421, 1466,
	1467, 1468, 1422, 0, 0, 0, 0, 0, 1771, 1772,
	1462, 0, 0, 1381, 1383, 1384, 1385, 1386, 1387, 1388,
	1389, 1382, 0, 0, 0, 1373, 1375, 459, 0, 0,
	1866, 1089, 347, 0, 0, 960, 962, 957, 958, 883,
	0, 0, 0, 0, 106, 108, 123, 0, 792, 163,
	0, 793, 134, 0, 155, 0, 1204, 0, 1512, 0,
	0, 0, 1571, 1558, 0, 0, 0, 0, 0, 1775,
	1776, 1777, 0, 1518, 1522, 89, 0, 66, 0, 82,
	83, 0, 0, 0, 1047, 1048, 1056, 1057, 0, 1059,
	1060, 540, 1069, 1077, 1081, 1084, 0, 1136, 1239, 0,
	1187, 1170, 1292, 1866, 1190, 1239, 0, 1284, 1866, 1866,
	1205, 0, 1217, 0, 1229, 0, 1223, 826, 435, 0,
	1226, 1262, 1267, 1269, 1271, 0, 1275, 1273, 1248, -2,
	0, 1256, 0, 0, 1419, 1420, 0, 0, 1670, 1866,
	0, 1452, 0, 1136, 1136, 1136, 1136, 0, 511, 469,
	0, 937, 951, 0, 890, 0, 0, 0, 0, 0,
	782, 124, 0, 133, 152, 0, 165, 166, 0, 0,
	0, 0, 1196, 0, 1460, 1461, 0, 1547, 0, 0,
	0, 1551, 1552, 1553, 1554, 65, 68, 0, 0, 0,
	1024, 0, 1058, 1083, 1085, 1135, 1180, 0, 1276, 1291,
	0, 1182, 1283, 0, 0, 0, 1216, 1228, 0, 1231,
	718, 1225, 1243, 0, 1272, 1249, 1257, 0, 1252, 0,
	0, 0, 1465, 0, 1426, 0, 1431, 1440, 1453, 0,
	0, 1362, 0, 1364, 0, 1368, 0, 1370, 0, 0,
	471, 961, 963, 0, 1721, 885, 886, 0, 795, 785,
	135, 139, 0, 161, 158, 0, 167, 0, 0, 0,
	0, 1192, 0, 1458, 0, 1548, 1549, 1550, 67, 69,
	84, 0, 1026, 1027, 1040, 1137, 1866, 1866, 0, 0,
	0, 1143, 1144, 0, 1264, 1296, 1285, 1286, 1287, 1230,
	1263, 1251, 0, -2, 1259, 0, 0, 1723, 1733, 1734,
	1424, 1430, 1439, 1441, 1442, 0, 1454, 1455, 1456, 1463,
	1136, 1136, 1136, 1136, 1372, 884, 0, 0, 794, 0,
	126, 0, 0, 156, 157, 159, 0, 168, 0, 170,
	171, 0, 0, 1559, 1028, 0, 0, 1140, 1141, 0,
	1240, 0, 1242, 1253, -2, 0, 1261, 0, 1425, 1443,
	0, 1444, 0, 0, 0, 1363, 1365, 1369, 1371, 1721,
	887, 796, 1202, 0, 140, 0, 142, 144, 145, 1396,
	153, 154, 160, 169, 0, 0, 1013, 1029, 0, 1138,
	1139, 1142, 0, 1244, 1260, 1724, 1445, 1447, 1448, 0,
	0, 1446, 0, 127, 128, 0, 141, 0, 0, 1197,
	1459, 1030, 1241, 1238, 1449, 1451, 1450, 888, 0, 0,
	143, 1397, 129, 130, 131, 0, 1398,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 118, 3, 3, 3, 149, 141, 3,
	85, 86, 146, 144, 159, 145, 158, 147, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 658, 655,
	128, 127, 129, 3, 659, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 151, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 656, 140, 657, 152,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 119, 120, 121, 122, 123, 124,
	125, 126, 130, 131, 132, 133, 134, 135, 136, 137,
	138, 139, 142, 143, 148, 150, 153, 154, 155, 156,
	157, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 57956, 631, 57957, 632, 57958, 633, 57959, 634,
	57960, 635, 57961, 636, 57962, 637, 57963, 638, 57964, 639,
	57965, 640, 57966, 641, 57967, 642, 57968, 643, 57969, 644,
	57970, 645, 57971, 646, 57972, 647, 57973, 648, 57974, 649,
	57975, 650, 57976, 651, 57977, 652, 57978, 653, 57979, 654,
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:845
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:852
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:858
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:866
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:872
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:876
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:891
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:895
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:901
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:906
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:910
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:943
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:957
		{
			var timestamp = yyDollar[2].str
			var isS3 = false
			var dir = yyDollar[4].str
			var parallelism = yyDollar[6].str
			var option []string
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:968
		{
			var timestamp = yyDollar[2].str
			var isS3 = true
			var dir string
			var parallelism string
			var option = yyDollar[5].strsUnion()
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:980
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:984
		{
			yyVAL.str = yyDollar[2].str
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:989
		{
			yyVAL.str = ""
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:993
		{
			yyVAL.str = yyDollar[2].str
		}
	case 65:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:999
		{
			yyLOCAL = &tree.CreateCDC{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				TaskName:    tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				SourceUri:   yyDollar[5].str,
				SinkType:    yyDollar[6].str,
				SinkUri:     yyDollar[7].str,
				Tables:      yyDollar[8].str,
				Option:      yyDollar[10].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1013
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1017
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1021
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1025
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1032
		{
			yyLOCAL = &tree.ShowCDC{
				Option: yyDollar[3].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1040
		{
			yyLOCAL = &tree.PauseCDC{
				Option: yyDollar[3].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1048
		{
			yyLOCAL = tree.NewDropCDC(yyDollar[3].allCDCOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1054
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      true,
				TaskName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1061
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      false,
				TaskName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1070
		{
			yyLOCAL = &tree.ResumeCDC{
				TaskName: tree.Identifier(yyDollar[4].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1078
		{
			yyLOCAL = &tree.RestartCDC{
				TaskName: tree.Identifier(yyDollar[4].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1086
		{
			yyLOCAL = &tree.CreateSnapShot{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Object:      yyDollar[6].snapshotObjectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1096
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELCLUSTER,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1106
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1118
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				PitrValue:   yyDollar[6].int64ValUnion(),
				PitrUnit:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1128
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELCLUSTER,
				PitrValue:   yyDollar[8].int64ValUnion(),
				PitrUnit:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1138
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				AccountName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:   yyDollar[9].int64ValUnion(),
				PitrUnit:    yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1149
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:    yyDollar[9].int64ValUnion(),
				PitrUnit:     yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-12 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1160
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[9].cstrUnion().Compare()),
				PitrValue:    yyDollar[11].int64ValUnion(),
				PitrUnit:     yyDollar[12].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1174
		{
			yyLOCAL = yyDollar[1].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1182
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELCLUSTER,
				SnapShotName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}

		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1190
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELACCOUNT,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[6].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1198
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELDATABASE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1207
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELTABLE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[10].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1217
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELACCOUNT,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[9].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1229
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELACCOUNT,
				Name:      tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				TimeStamp: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1237
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1246
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				TimeStamp:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1256
		{
			yyLOCAL = &tree.RestorePitr{
				Level:          tree.RESTORELEVELACCOUNT,
				AccountName:    tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:           tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:      yyDollar[7].str,
				SrcAccountName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1266
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELCLUSTER,
				Name:      tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TimeStamp: yyDollar[6].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1276
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1296
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1302
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1309
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1317
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1323
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1332
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1342
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1350
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1358
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1366
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1376
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1384
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1394
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1401
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1410
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1420
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1424
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1430
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1434
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1440
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1449
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1459
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1463
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 120:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1469
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1478
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1482
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1488
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1509
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
			yyLOCAL.(*tree.Load).Param.Strict = yyDollar[11].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1523
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1530
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1534
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1540
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1544
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1550
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1557
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1565
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1569
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error strict flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1581
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1585
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1599
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1603
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1608
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1615
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1619
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1623
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1629
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1638
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1649
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1653
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1659
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1663
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1669
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1673
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1679
		{
			v := strings.ToLower(yyDollar[1].str)
			var isGlobal bool
			if strings.HasPrefix(v, "global.") {
				isGlobal = true
				v = strings.TrimPrefix(v, "global.")
			} else if strings.HasPrefix(v, "session.") {
				v = strings.TrimPrefix(v, "session.")
			} else if strings.HasPrefix(v, "local.") {
				v = strings.TrimPrefix(v, "local.")
			}
			yyLOCAL = &tree.VarExpr{
				Name:   v,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1699
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            goto ret1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1718
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1722
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1726
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1731
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1735
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1744
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1754
		{
			yyVAL.str = ""
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1761
		{
			yyVAL.str = yyDollar[3].str
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1766
		{
			yyVAL.str = "\n"
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1773
		{
			yyVAL.str = yyDollar[3].str
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1778
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1782
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1810
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1814
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1820
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1828
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1848
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1867
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1892
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1896
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1900
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1905
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1909
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1915
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1928
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1939
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1952
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1956
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1966
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1979
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1992
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1998
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2004
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2012
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  dbName,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2022
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2032
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2036
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2040
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2044
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2048
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2052
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2059
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2063
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2069
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2076
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2085
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2089
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2095
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2099
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2103
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2107
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2111
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPGRADE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2115
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2119
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2123
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2127
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2131
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2135
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2139
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2143
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2147
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2151
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2155
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2159
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2163
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2167
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2171
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2175
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2179
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2183
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2187
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2191
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2195
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2199
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2203
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2207
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2211
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2215
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2219
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2223
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2227
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2231
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2235
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2239
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2243
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2247
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2251
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2255
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2259
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2263
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2267
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2271
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2275
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2279
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2283
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2287
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2291
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2295
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 260:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2310
		{
			yyLOCAL = &tree.SetLogserviceSettings{
				Name:  yyDollar[4].str,
				Value: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2319
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2326
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2333
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 264:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2342
		{
			var connID uint32
			switch v := yyDollar[5].item.(type) {
			case uint64:
				connID = uint32(v)
			case int64:
				connID = uint32(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.SetConnectionID{
				ConnectionID: connID,
			}
		}
		yyVAL.union = yyLOCAL
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2360
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2364
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2370
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2377
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2385
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2389
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2393
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2397
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2403
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2407
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2413
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2420
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2427
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2436
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2466
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2470
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2474
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2480
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2486
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2490
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2497
		{
			yyVAL.str = yyDollar[3].str
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2503
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2507
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2513
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2521
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2530
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2539
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2547
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2555
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2578
		{
			v := strings.ToLower(yyDollar[1].str)
			var isGlobal bool
			if strings.HasPrefix(v, "global.") {
				isGlobal = true
				v = strings.TrimPrefix(v, "global.")
			} else if strings.HasPrefix(v, "session.") {
				v = strings.TrimPrefix(v, "session.")
			} else if strings.HasPrefix(v, "local.") {
				v = strings.TrimPrefix(v, "local.")
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   v,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2597
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2604
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2611
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2619
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2626
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2633
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2642
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2646
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2650
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2656
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2660
		{
			yyVAL.str = yyDollar[1].str
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2666
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2670
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2676
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2680
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2694
		{
			yyLOCAL = &tree.SavePoint{Name: tree.Identifier(yyDollar[2].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2700
		{
			yyLOCAL = &tree.ReleaseSavePoint{Name: tree.Identifier(yyDollar[3].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2706
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[3].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 320:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2711
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[4].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 321:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2716
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[5].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2721
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[4].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2727
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2733
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2738
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2742
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2746
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2750
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2754
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2758
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2762
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2766
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2770
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2776
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2780
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2784
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2788
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2793
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2798
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2804
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2817
		{
			name := yylex.(*Lexer).GetDbOrTblNameCStr("")
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2830
		{
			name := yylex.(*Lexer).GetDbOrTblNameCStr("")
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 343:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2843
		{
			name := yylex.(*Lexer).GetDbOrTblNameCStr("")
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 344:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2856
		{
			name := yylex.(*Lexer).GetDbOrTblNameCStr("")
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2872
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2879
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2890
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2901
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2905
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2911
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2921
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2927
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2931
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:2937
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2943
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2947
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2951
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2955
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2961
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2974
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 371:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2980
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 372:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2984
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2990
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 374:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2994
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3000
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3006
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3017
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3023
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3027
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 385:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3031
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 386:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3035
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3039
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3043
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3051
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 390:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3059
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3069
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("phyplan", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 392:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3077
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("phyplan", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 393:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3087
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("phyplan", "NULL")
			optionElem2 := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 394:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3097
		{
			if tree.IsContainPhyPlan(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainPhyPlan(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3113
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 396:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3117
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3125
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3133
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3173
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3177
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:3183
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3189
		{
			yyVAL.str = yyDollar[1].str
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3194
		{
			yyVAL.str = "true"
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3195
		{
			yyVAL.str = "false"
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3196
		{
			yyVAL.str = yyDollar[1].str
		}
	case 419:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3201
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 420:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3207
		{
			yyLOCAL = &tree.UpgradeStatement{
				Target: yyDollar[3].upgrade_targetUnion(),
				Retry:  yyDollar[4].int64ValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3216
		{
			yyLOCAL = &tree.Target{
				AccountName:  yyDollar[1].str,
				IsALLAccount: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3223
		{
			yyLOCAL = &tree.Target{
				AccountName:  "",
				IsALLAccount: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 423:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3231
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3235
		{
			res := yyDollar[3].item.(int64)
			if res <= 0 {
				yylex.Error("retry value can not less than 0")
				yyLOCAL = -1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 435:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3260
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 436:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3283
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 437:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3293
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 438:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3300
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3309
		{
			alterTables := yyDollar[3].renameTableOptionsUnion()
			renameTables := tree.NewRenameTable(alterTables)
			yyLOCAL = renameTables
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterTable
//line mysql_sql.y:3317
		{
			yyLOCAL = []*tree.AlterTable{yyDollar[1].renameTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterTable
//line mysql_sql.y:3321
		{
			yyLOCAL = append(yyDollar[1].renameTableOptionsUnion(), yyDollar[3].renameTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AlterTable
//line mysql_sql.y:3327
		{
			var table = yyDollar[1].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			opt := tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
			alterTable.Options = []tree.AlterTableOption{opt}
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3338
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3342
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3348
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3352
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()

			partitionDef := tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)

			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3376
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var pitrValue = yyDollar[6].int64ValUnion()
			var pitrUnit = yyDollar[7].str
			yyLOCAL = tree.NewAlterPitr(ifExists, name, pitrValue, pitrUnit)
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3386
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3396
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3412
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3430
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3434
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3440
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3444
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3450
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3456
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3464
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3474
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3482
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3492
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3502
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3512
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3519
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3523
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3527
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3531
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 467:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3535
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3542
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 469:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3548
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 470:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3552
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 471:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3556
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3560
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3564
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3568
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3572
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3576
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 477:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3581
		{
			yyVAL.str = ""
		}
	case 494:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3612
		{
			yyVAL.str = ""
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3616
		{
			yyVAL.str = string("COLUMN")
		}
	case 496:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3621
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3627
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3633
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3641
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3645
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3651
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3659
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterOptionTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3666
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3672
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3678
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3684
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3690
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3697
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3704
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3712
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 511:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3718
		{
			val := int64(yyDollar[6].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = val
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3730
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3736
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3744
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3748
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 516:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3755
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3773
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3788
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.UNIQUE_CHECK_ON_AUTOINCR,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 519:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3803
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 520:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3818
		{
			assignments := []*tree.VarAssignmentExpr{
				{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 521:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3831
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3837
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].exprUnion(),
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3848
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3860
		{
			ifExists := yyDollar[3].boolValUnion()
			var Username = yyDollar[4].usernameRecordUnion().Username
			var Hostname = yyDollar[4].usernameRecordUnion().Hostname
			user := tree.NewUser(Username, Hostname, nil)
			users := []*tree.User{user}
			miscOpt := tree.NewUserMiscOptionAccountUnlock()
			commentOrAttribute := yyDollar[6].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewAlterUser(ifExists, users, nil, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3873
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3877
		{
			var UserName = yyDollar[3].str
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3885
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3889
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 529:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3894
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3898
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3914
		{
			yyLOCAL = tree.NewUserMiscOptionAccountUnlock()
		}
		yyVAL.union = yyLOCAL
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3918
		{
			yyLOCAL = tree.NewUserMiscOptionAccountLock()
		}
		yyVAL.union = yyLOCAL
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3922
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNone()
		}
		yyVAL.union = yyLOCAL
	case 534:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3926
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireInterval(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3933
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNever()
		}
		yyVAL.union = yyLOCAL
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3937
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireDefault()
		}
		yyVAL.union = yyLOCAL
	case 537:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3941
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryDefault()
		}
		yyVAL.union = yyLOCAL
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3945
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 539:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3952
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalDefault()
		}
		yyVAL.union = yyLOCAL
	case 540:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3956
		{
			var Value = yyDollar[4].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3963
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentNone()
		}
		yyVAL.union = yyLOCAL
	case 542:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3967
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentDefault()
		}
		yyVAL.union = yyLOCAL
	case 543:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3971
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentOptional()
		}
		yyVAL.union = yyLOCAL
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3975
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionFailedLoginAttempts(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3982
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3989
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeUnbounded()
		}
		yyVAL.union = yyLOCAL
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:3995
		{
			yyVAL.item = nil
		}
	case 548:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4000
		{
			yyVAL.item = nil
		}
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4049
		{
			yyLOCAL = &tree.ShowLogserviceReplicas{}
		}
		yyVAL.union = yyLOCAL
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4055
		{
			yyLOCAL = &tree.ShowLogserviceStores{}
		}
		yyVAL.union = yyLOCAL
	case 590:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4061
		{
			yyLOCAL = &tree.ShowLogserviceSettings{}
		}
		yyVAL.union = yyLOCAL
	case 591:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4067
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 592:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4076
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4084
		{
			yyLOCAL = &tree.ShowSnapShots{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4092
		{
			yyLOCAL = &tree.ShowPitr{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 595:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4100
		{
			yyLOCAL = &tree.ShowRecoveryWindow{
				Level: tree.RECOVERYWINDOWLEVELACCOUNT,
			}
		}
		yyVAL.union = yyLOCAL
	case 596:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4106
		{
			yyLOCAL = &tree.ShowRecoveryWindow{
				Level:        tree.RECOVERYWINDOWLEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 597:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4113
		{
			yyLOCAL = &tree.ShowRecoveryWindow{
				Level:        tree.RECOVERYWINDOWLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[6].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 598:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4121
		{
			yyLOCAL = &tree.ShowRecoveryWindow{
				Level:       tree.RECOVERYWINDOWLEVELACCOUNT,
				AccountName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4130
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 600:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4134
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 601:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4138
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{
				{UserName: yyDollar[5].cstrUnion().Compare()},
			}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 602:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4149
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4153
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 604:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4159
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4164
		{
		}
	case 607:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4168
		{
		}
	case 609:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4173
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4183
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4193
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4201
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4207
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4213
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4219
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4225
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4231
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4237
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4246
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4250
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4254
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4258
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4262
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4266
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4270
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4274
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4280
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 628:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4289
		{
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4291
		{
		}
	case 633:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4300
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 634:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4310
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 635:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4319
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4323
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4327
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 638:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4333
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 639:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4339
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4345
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4351
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 642:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4360
		{
			yyLOCAL = &tree.ShowTables{
				Open:     false,
				Full:     yyDollar[2].fullOptUnion(),
				DBName:   yyDollar[4].str,
				Like:     yyDollar[5].comparisionExprUnion(),
				Where:    yyDollar[6].whereUnion(),
				AtTsExpr: yyDollar[7].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 643:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4371
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 644:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4383
		{
			yyLOCAL = &tree.ShowDatabases{
				Like:     yyDollar[3].comparisionExprUnion(),
				Where:    yyDollar[4].whereUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 645:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4391
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4397
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4409
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4423
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4429
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 650:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4435
		{
			yyLOCAL = &tree.ShowAccountUpgrade{}
		}
		yyVAL.union = yyLOCAL
	case 651:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4442
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4446
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4451
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 654:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4455
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 655:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4459
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 656:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4464
		{
			yyVAL.str = ""
		}
	case 657:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4468
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 658:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4474
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 663:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4489
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4493
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 665:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4499
		{
			yyLOCAL = &tree.ShowCreateTable{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 666:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4507
		{
			yyLOCAL = &tree.ShowCreateView{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 667:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4514
		{
			yyLOCAL = &tree.ShowCreateDatabase{
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Name:        yyDollar[5].str,
				AtTsExpr:    yyDollar[6].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 668:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4522
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 669:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4528
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4534
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 671:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4539
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4547
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4553
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4558
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 675:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4564
		{
			yyLOCAL = tree.NewUnresolvedObjectName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 676:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4570
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 677:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4574
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 696:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4602
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 697:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4610
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 698:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4618
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4626
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 700:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4630
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:4636
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption *tree.AccountIdentified
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 702:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4649
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 703:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4657
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 704:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4666
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 705:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4672
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 706:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4680
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4688
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4696
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 709:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4702
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4710
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4716
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4724
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4730
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4740
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4745
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4752
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4768
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4781
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4792
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4796
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4802
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4808
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4817
		{
		}
	case 726:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4819
		{
		}
	case 727:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4822
		{
		}
	case 732:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4831
		{
		}
	case 734:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4835
		{
		}
	case 736:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4840
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 737:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4849
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4856
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4862
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4870
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 741:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4877
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4884
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4904
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4912
		{
			ins := yyDollar[5].insertUnion()
			ins.Table = yyDollar[3].tableExprUnion()
			ins.PartitionNames = yyDollar[4].identifierListUnion()
			ins.OnDuplicateUpdate = []*tree.UpdateExpr{nil}
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4922
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4926
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4932
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4939
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4945
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4953
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4960
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4967
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4986
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4990
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4994
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4999
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:5003
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:5007
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:5013
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5022
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5026
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5032
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 763:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5036
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5042
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5046
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5052
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5057
		{
		}
	case 769:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5061
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5068
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5072
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5079
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5084
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 776:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5088
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5094
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5098
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5104
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5108
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:5113
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:5117
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5130
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5141
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5152
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5174
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5197
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5205
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5214
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5218
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5231
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5235
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5240
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5244
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5251
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5256
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5263
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5269
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5273
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5277
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5281
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5285
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5289
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5294
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5298
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5304
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:5314
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5329
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5333
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5347
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5351
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5357
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5366
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5370
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5374
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5378
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5382
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5388
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5395
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5404
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5408
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:5414
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5422
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5426
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5431
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5435
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5441
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5445
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5449
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5454
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5458
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5464
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5470
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5474
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:5480
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 837:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5485
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5489
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5493
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5498
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5502
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5506
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5511
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5515
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5523
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5527
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5531
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5545
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5549
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5559
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5569
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5579
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5591
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 854:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5599
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 855:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5607
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5616
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5624
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5632
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5640
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5648
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5656
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5664
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 863:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5672
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 864:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5680
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 865:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5690
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: tree.QuerySpecOptionDistinct&yyDollar[2].selectOptionsUnion() != 0,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].selectOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 866:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5703
		{
			yyLOCAL = tree.QuerySpecOptionNone
		}
		yyVAL.union = yyLOCAL
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5707
		{
			yyLOCAL = yyDollar[1].selectOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5713
		{
			yyLOCAL = yyDollar[1].selectOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 869:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5717
		{
			yyLOCAL = yyDollar[1].selectOptionsUnion() | yyDollar[2].selectOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5723
		{
			yyLOCAL = tree.QuerySpecOptionSqlSmallResult
		}
		yyVAL.union = yyLOCAL
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5727
		{
			yyLOCAL = tree.QuerySpecOptionSqlBigResult
		}
		yyVAL.union = yyLOCAL
	case 872:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5731
		{
			yyLOCAL = tree.QuerySpecOptionSqlBufferResult
		}
		yyVAL.union = yyLOCAL
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5735
		{
			yyLOCAL = tree.QuerySpecOptionStraightJoin
		}
		yyVAL.union = yyLOCAL
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5739
		{
			yyLOCAL = tree.QuerySpecOptionHighPriority
		}
		yyVAL.union = yyLOCAL
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5743
		{
			yyLOCAL = tree.QuerySpecOptionSqlCalcFoundRows
		}
		yyVAL.union = yyLOCAL
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5747
		{
			yyLOCAL = tree.QuerySpecOptionSqlNoCache
		}
		yyVAL.union = yyLOCAL
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5751
		{
			yyLOCAL = tree.QuerySpecOptionAll
		}
		yyVAL.union = yyLOCAL
	case 878:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5755
		{
			yyLOCAL = tree.QuerySpecOptionDistinct
		}
		yyVAL.union = yyLOCAL
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5759
		{
			yyLOCAL = tree.QuerySpecOptionDistinctRow
		}
		yyVAL.union = yyLOCAL
	case 880:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5781
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 881:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5785
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 882:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5790
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 883:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5794
		{
			exprsList := []tree.Exprs{yyDollar[3].exprsUnion()}
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: exprsList,
				Apart:            false,
				Cube:             false,
				Rollup:           yyDollar[4].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 884:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5804
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: yyDollar[6].rowsExprsUnion(),
				Apart:            false,
				Cube:             false,
				Rollup:           false,
			}
		}
		yyVAL.union = yyLOCAL
	case 885:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5813
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: []tree.Exprs{yyDollar[5].exprsUnion()},
				Apart:            false,
				Cube:             true,
				Rollup:           false,
			}
		}
		yyVAL.union = yyLOCAL
	case 886:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5822
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: []tree.Exprs{yyDollar[5].exprsUnion()},
				Apart:            false,
				Cube:             false,
				Rollup:           true,
			}
		}
		yyVAL.union = yyLOCAL
	case 887:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5833
		{
			yyLOCAL = []tree.Exprs{yyDollar[2].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 888:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5837
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[4].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 889:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5842
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 890:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5846
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 891:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5851
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 892:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5855
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5861
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 894:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5865
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5871
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 896:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5875
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 897:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5879
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 898:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5883
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion(), yyDollar[3].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 899:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5888
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix, nil)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5896
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 901:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5902
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5910
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else if t, ok := yyDollar[1].tableExprUnion().(*tree.ApplyTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5920
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5930
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5934
		{
			yyLOCAL = yyDollar[1].applyTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5940
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 909:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5949
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 910:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5958
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 911:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5967
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 912:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5975
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 913:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ApplyTableExpr
//line mysql_sql.y:5986
		{
			yyLOCAL = &tree.ApplyTableExpr{
				Left:      yyDollar[1].tableExprUnion(),
				ApplyType: yyDollar[2].str,
				Right:     yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 914:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5996
		{
			yyVAL.str = tree.APPLY_TYPE_CROSS
		}
	case 915:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6000
		{
			yyVAL.str = tree.APPLY_TYPE_OUTER
		}
	case 916:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6006
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 917:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6010
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 918:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6020
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 919:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6024
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 920:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6028
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 921:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6032
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 922:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6038
		{
			yyVAL.str = tree.JOIN_TYPE_DEDUP
		}
	case 923:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6044
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 924:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:6055
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 925:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:6059
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 926:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:6065
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 927:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6071
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 928:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6075
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 929:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6081
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 930:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6087
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 931:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6091
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 932:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6095
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 933:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6099
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS_L2
		}
	case 934:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6105
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 935:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6109
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 936:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6115
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 937:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6119
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:6125
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 939:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:6129
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 940:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6135
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 941:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6139
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 942:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6149
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 943:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6162
		{
			yyLOCAL = yyDollar[2].tableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:6168
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 945:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6174
		{
			name := tree.NewUnresolvedName(yyDollar[1].cstrUnion())
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:     tree.FuncName2ResolvableFunctionReference(name),
					FuncName: yyDollar[1].cstrUnion(),
					Exprs:    yyDollar[3].exprsUnion(),
					Type:     tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 946:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:6188
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 947:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6199
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 949:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6206
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 950:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6210
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 951:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:6216
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 952:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6226
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 953:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6230
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 954:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6234
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 955:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6239
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 956:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6243
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 957:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6247
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 958:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6251
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 959:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6256
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 960:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6260
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 961:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6264
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6268
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 963:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6272
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6277
		{
			yyVAL.str = ""
		}
	case 965:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6281
		{
			yyVAL.str = yyDollar[1].str
		}
	case 966:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6285
		{
			yyVAL.str = yyDollar[2].str
		}
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6291
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 968:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6295
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].str)
		}
	case 969:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6300
		{
			yyLOCAL = tree.NewCStr("", 1)
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6304
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 971:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6308
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 972:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6312
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6316
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6322
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 997:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6364
		{
			var Language = yyDollar[3].str
			var Name = tree.Identifier(yyDollar[5].str)
			var Filename = tree.Identifier(yyDollar[7].str)
			yyLOCAL = tree.NewCreateExtension(
				Language,
				Name,
				Filename,
			)
		}
		yyVAL.union = yyLOCAL
	case 998:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6377
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6383
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1000:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6389
		{
			var Name = yyDollar[3].procNameUnion()
			var Args = yyDollar[5].procArgsUnion()
			var Body = yyDollar[7].str
			yyLOCAL = tree.NewCreateProcedure(
				Name,
				Args,
				Body,
			)
		}
		yyVAL.union = yyLOCAL
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6402
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1002:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6407
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1003:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6414
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6421
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6425
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:6431
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:6437
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6442
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6446
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6450
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6454
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6461
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				goto ret1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				goto ret1
			}

			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[4].functionNameUnion()
			var Args = yyDollar[6].funcArgsUnion()
			var ReturnType = yyDollar[9].funcReturnUnion()
			var Language = yyDollar[11].str
			var Import = yyDollar[12].boolValUnion()
			var Body = yyDollar[13].str
			var Handler = yyDollar[14].str

			yyLOCAL = tree.NewCreateFunction(
				Replace,
				Name,
				Args,
				ReturnType,
				Language,
				Import,
				Body,
				Handler,
			)
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6494
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6499
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6506
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6513
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6517
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:6523
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6529
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6533
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6537
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6543
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1025:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:6549
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6555
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6559
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6565
		{
			yyVAL.str = ""
		}
	case 1030:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6572
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1031:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6578
		{
			var Replace bool
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6593
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 1033:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6610
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = yyDollar[4].exprUnion()
			var AuthOption = yyDollar[5].accountAuthOptionUnion()
			var StatusOption = yyDollar[6].accountStatusUnion()
			var Comment = yyDollar[7].accountCommentUnion()
			yyLOCAL = tree.NewCreateAccount(
				IfNotExists,
				Name,
				AuthOption,
				StatusOption,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1034:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6627
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1035:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6631
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 1036:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6637
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 1037:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6641
		{
			yyVAL.str = "DEFINER = "
		}
	case 1038:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6645
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 1039:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6650
		{
			yyVAL.str = ""
		}
	case 1040:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:6654
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 1046:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6668
		{
			yyVAL.str = ""
		}
	case 1049:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6676
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1050:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6682
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1051:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6687
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1052:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:6693
		{
			var Equal = yyDollar[2].str
			var AdminName = yyDollar[3].exprUnion()
			var IdentifiedType = yyDollar[4].accountIdentifiedUnion()
			yyLOCAL = *tree.NewAccountAuthOption(
				Equal,
				AdminName,
				IdentifiedType,
			)
		}
		yyVAL.union = yyLOCAL
	case 1053:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6706
		{
			var str = yyDollar[1].str
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1054:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6711
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1055:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6716
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1056:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6722
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6729
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6736
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByRandomPassword,
				nil,
			)
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6743
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6750
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6758
		{
			as := tree.NewAccountStatus()
			as.Exist = false
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6764
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusOpen
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6771
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusSuspend
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6778
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusRestricted
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6786
		{
			ac := tree.NewAccountComment()
			ac.Exist = false
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6792
		{
			ac := tree.NewAccountComment()
			ac.Exist = true
			ac.Comment = yyDollar[2].str
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6801
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Users = yyDollar[4].usersUnion()
			var Role = yyDollar[5].accountRoleUnion()
			var MiscOpt = yyDollar[6].userMiscOptionUnion()
			var CommentOrAttribute = yyDollar[7].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewCreateUser(
				IfNotExists,
				Users,
				Role,
				MiscOpt,
				CommentOrAttribute,
			)
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6818
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				nil,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6834
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var Table = yyDollar[8].tableNamesUnion()
			var AccountsSet = yyDollar[9].accountsSetOptionUnion()
			var Comment = yyDollar[10].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				Table,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6853
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6859
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6868
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Url = yyDollar[5].str
			var Credentials = yyDollar[6].stageCredentialsUnion()
			var Status = yyDollar[7].stageStatusUnion()
			var Comment = yyDollar[8].stageCommentUnion()
			yyLOCAL = tree.NewCreateStage(
				IfNotExists,
				Name,
				Url,
				Credentials,
				Status,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6886
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6892
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6899
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6907
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6913
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6921
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6927
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6935
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6941
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6950
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6954
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6959
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6963
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6970
		{
			yyVAL.str = yyDollar[3].str
		}
	case 1087:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6975
		{
			yyVAL.str = ""
		}
	case 1088:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6979
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1089:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6985
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6998
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var dbName = yyDollar[6].str
			var table = yyDollar[7].tableNamesUnion()
			var comment = yyDollar[8].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, dbName, table, comment)
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7009
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7013
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7019
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7025
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7031
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7038
		{
			yyVAL.str = ""
		}
	case 1097:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7042
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1098:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7047
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7051
		{
			yyLOCAL = yyDollar[2].tableNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7057
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1101:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7065
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1102:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7073
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropSnapShot(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1103:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7081
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPitr(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7089
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1105:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:7094
		{
			var Exist = false
			var IsComment bool
			var Str string
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)

		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:7106
		{
			var Exist = true
			var IsComment = true
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:7117
		{
			var Exist = true
			var IsComment = false
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7226
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7230
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:7236
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7249
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7253
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1113:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:7259
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1114:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7272
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 1115:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7276
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 1116:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7280
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7285
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7289
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7295
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7302
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 1121:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7308
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7317
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1124:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7324
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewCreateRole(
				IfNotExists,
				Roles,
			)
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7335
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1126:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7339
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:7345
		{
			var UserName = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7354
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7358
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7362
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7367
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 1132:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7371
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 1133:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7375
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7379
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7385
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = tree.NewIndexOption()
				io.IType = yyDollar[5].indexTypeUnion()
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = tree.NewIndexOption()
				io.IType = tree.INDEX_TYPE_INVALID
			}
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Table = yyDollar[7].tableNameUnion()
			var ifNotExists = false
			var IndexCat = yyDollar[2].indexCategoryUnion()
			var KeyParts = yyDollar[9].keyPartsUnion()
			var IndexOption = io
			var MiscOption []tree.MiscOption
			yyLOCAL = tree.NewCreateIndex(
				Name,
				Table,
				ifNotExists,
				IndexCat,
				KeyParts,
				IndexOption,
				MiscOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7416
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7420
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7446
		{
			io := tree.NewIndexOption()
			io.KeyBlockSize = uint64(yyDollar[3].item.(int64))
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1139:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7452
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}

			io := tree.NewIndexOption()
			io.AlgoParamList = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1140:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7464
		{
			io := tree.NewIndexOption()
			io.AlgoParamVectorOpType = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7470
		{
			io := tree.NewIndexOption()
			io.Comment = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7476
		{
			io := tree.NewIndexOption()
			io.ParserName = yyDollar[3].cstrUnion().Compare()
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7482
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_VISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7488
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_INVISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7496
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7500
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7506
		{
			// Order is parsed but just ignored as MySQL dtree.
			var ColName = yyDollar[1].unresolvedNameUnion()
			var Length = int(yyDollar[2].lengthOptUnion())
			var Direction = yyDollar[3].directionUnion()
			var Expr tree.Expr
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7520
		{
			var ColName *tree.UnresolvedName
			var Length int
			var Expr = yyDollar[2].exprUnion()
			var Direction = yyDollar[4].directionUnion()
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7534
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1150:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7538
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7542
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7546
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7550
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7554
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1155:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7558
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1156:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7564
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].str)
			var SubscriptionOption = yyDollar[5].subscriptionOptionUnion()
			var CreateOptions = yyDollar[6].createOptionsUnion()
			yyLOCAL = tree.NewCreateDatabase(
				IfNotExists,
				Name,
				SubscriptionOption,
				CreateOptions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7579
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7583
		{
			var From = tree.Identifier(yyDollar[2].str)
			var Publication = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewSubscriptionOption(From, Publication)
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7594
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1162:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7598
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7603
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7607
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1165:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7613
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7617
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7623
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Charset = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCharset(
				IsDefault,
				Charset,
			)
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7632
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Collate = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCollate(
				IsDefault,
				Collate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7641
		{
			var Encrypt = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionEncryption(Encrypt)
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7647
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7651
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7657
		{
			var TableName = yyDollar[4].tableNameUnion()
			var Options = yyDollar[7].connectorOptionsUnion()
			yyLOCAL = tree.NewCreateConnector(
				TableName,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7668
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7674
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1175:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7692
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7710
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7728
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			var SourceName = yyDollar[5].tableNameUnion()
			var Defs = yyDollar[7].tableDefsUnion()
			var Options = yyDollar[9].tableOptionsUnion()
			yyLOCAL = tree.NewCreateSource(
				Replace,
				IfNotExists,
				SourceName,
				Defs,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7744
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7748
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7757
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1181:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7769
		{
			t := tree.NewCreateTable()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Param = yyDollar[9].loadParamUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7778
		{
			t := tree.NewCreateTable()
			t.IsClusterTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7790
		{
			t := tree.NewCreateTable()
			t.IsDynamicTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			t.DTOptions = yyDollar[8].tableOptionsUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1184:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7800
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[6].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7810
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[9].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7821
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7831
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[10].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7842
		{
			t := tree.NewCreateTable()
			t.IsAsLike = true
			t.Table = *yyDollar[5].tableNameUnion()
			t.LikeTableName = *yyDollar[7].tableNameUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7850
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.SubscriptionOption = yyDollar[6].subscriptionOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7861
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7868
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7878
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7891
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1194:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7899
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7908
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7917
		{
			yyVAL.str = ""
		}
	case 1197:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:7921
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7927
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7931
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1200:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7936
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1201:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7940
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:7947
		{
			yyLOCAL = &tree.TailParameter{
				Charset:      yyDollar[1].str,
				Fields:       yyDollar[2].fieldsUnion(),
				Lines:        yyDollar[3].linesUnion(),
				IgnoredLines: uint64(yyDollar[4].int64ValUnion()),
				ColumnList:   yyDollar[5].loadColumnsUnion(),
				Assignments:  yyDollar[6].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7959
		{
			yyVAL.str = ""
		}
	case 1204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7963
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1205:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7969
		{
			var Name = yyDollar[4].tableNameUnion()
			var Type = yyDollar[5].columnTypeUnion()
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var IncrementBy = yyDollar[6].incrementByOptionUnion()
			var MinValue = yyDollar[7].minValueOptionUnion()
			var MaxValue = yyDollar[8].maxValueOptionUnion()
			var StartWith = yyDollar[9].startWithOptionUnion()
			var Cycle = yyDollar[10].boolValUnion()
			yyLOCAL = tree.NewCreateSequence(
				Name,
				Type,
				IfNotExists,
				IncrementBy,
				MinValue,
				MaxValue,
				StartWith,
				Cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7990
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1207:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8004
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1208:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:8008
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:8012
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1210:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8018
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1211:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8022
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1212:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8029
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1213:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8036
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1214:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8043
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1215:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8050
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8054
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8058
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:8062
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:8066
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1220:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:8073
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1221:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:8080
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1222:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:8084
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1223:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:8091
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1224:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:8098
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1225:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:8102
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:8108
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1227:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8114
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1228:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8118
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1229:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8125
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1230:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8132
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1231:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8139
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1232:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8146
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1233:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8150
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1234:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8155
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1235:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8159
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1236:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8163
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1237:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:8168
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1238:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:8172
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()
			yyLOCAL = tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1239:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8185
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1240:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8189
		{
			var ColumnList = []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)

		}
		yyVAL.union = yyLOCAL
	case 1241:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8197
		{
			var ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1242:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8205
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1243:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8209
		{
			var IsSubPartition = true
			var PType = yyDollar[3].partitionByUnion()
			var Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = tree.NewPartitionBy2(
				IsSubPartition,
				PType,
				Num,
			)
		}
		yyVAL.union = yyLOCAL
	case 1244:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8221
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1245:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8225
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1246:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8231
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1247:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8235
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1248:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:8241
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options []tree.TableOption
			var Subs = yyDollar[4].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1249:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:8254
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options = yyDollar[4].tableOptionsUnion()
			var Subs = yyDollar[5].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1250:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8268
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1251:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8272
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1252:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8278
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1253:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8282
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1254:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8288
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options []tree.TableOption
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1255:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8297
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options = yyDollar[3].tableOptionsUnion()
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1256:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8308
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1257:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8312
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1258:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8317
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1259:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8321
		{
			expr := tree.NewMaxValue()
			var valueList = tree.Exprs{expr}
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1260:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8327
		{
			var valueList = yyDollar[5].exprsUnion()
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1261:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8332
		{
			var valueList = yyDollar[4].exprsUnion()
			yyLOCAL = tree.NewValuesIn(
				valueList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1262:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8340
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1263:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8344
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1264:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8354
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1265:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8358
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1266:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8369
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1267:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8377
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1268:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8385
		{
			listTyp := tree.NewListType()
			listTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1269:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8393
		{
			listTyp := tree.NewListType()
			listTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8404
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8413
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			keyTyp.ColumnList = yyDollar[5].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8423
		{
			Linear := yyDollar[1].boolValUnion()
			Expr := yyDollar[4].exprUnion()
			hashTyp := tree.NewHashType(Linear, Expr)
			yyLOCAL = tree.NewPartitionBy(
				hashTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8433
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1275:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8437
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8442
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8446
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1278:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8452
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1279:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8456
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1280:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8462
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1281:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8471
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1282:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8481
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1283:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8485
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1284:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8491
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1285:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8495
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1286:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8501
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1287:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8510
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1288:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8520
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1289:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8524
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1290:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8530
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1291:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8534
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1292:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8538
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1293:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8544
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1294:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8548
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1295:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8552
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1296:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8556
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1297:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8560
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1298:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8564
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1299:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8568
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1300:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8573
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1301:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8577
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1302:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8581
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1303:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8585
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1304:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8589
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1305:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8593
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1306:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8597
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1307:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8601
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1308:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8605
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1309:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8609
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1310:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8613
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1311:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8617
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1312:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8621
		{
			t := tree.NewTableOptionPackKeys()
			t.Value = yyDollar[3].item.(int64)
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1313:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8627
		{
			t := tree.NewTableOptionPackKeys()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1314:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8633
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1315:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8637
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1316:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8641
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1317:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8645
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1318:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8649
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1319:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8655
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1320:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8661
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1321:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8667
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1322:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8673
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1323:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8679
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1324:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8685
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1325:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8689
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1326:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8693
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1327:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8697
		{
			var Preperties = yyDollar[3].propertiesUnion()
			yyLOCAL = tree.NewTableOptionProperties(Preperties)
		}
		yyVAL.union = yyLOCAL
	case 1328:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8702
		{
			var retentionPeriod = uint64(yyDollar[4].item.(int64))
			var retentionUnit = strings.ToLower(yyDollar[5].str)
			yyLOCAL = tree.NewRetentionOption(
				retentionPeriod,
				retentionUnit,
			)
		}
		yyVAL.union = yyLOCAL
	case 1329:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8713
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1330:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8717
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1331:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:8723
		{
			var Key = yyDollar[1].str
			var Value = yyDollar[3].str
			yyLOCAL = *tree.NewProperty(
				Key,
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 1332:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8734
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8738
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1334:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8744
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1335:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8748
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1336:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8752
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1337:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8756
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1338:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8760
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1339:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8764
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1344:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8778
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1345:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8782
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1346:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8791
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[2].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1347:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8797
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[4].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1348:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8805
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1349:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8809
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPTIME,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1350:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8816
		{
			var str = yyDollar[4].cstrUnion().Compare()
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yylex.(*Lexer).GetDbOrTblName(yyDollar[4].cstrUnion().Origin()),
				Expr:         tree.NewNumVal(str, str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1351:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8825
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yyDollar[4].str,
				Expr:         tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1352:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8833
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATMOTIMESTAMP,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1353:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8841
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1355:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8848
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1356:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8852
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1357:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8858
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1358:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8862
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1359:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8866
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1360:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8872
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1361:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8876
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1362:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8882
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1363:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8895
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1364:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8908
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid the type of index")
					goto ret1
				}
			}

			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1365:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8947
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid type of index")
					goto ret1
				}
			}
			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1366:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8987
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1367:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9001
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1368:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9007
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1369:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9020
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1370:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9033
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1371:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9046
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1372:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9059
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var KeyParts = yyDollar[6].keyPartsUnion()
			var Name = yyDollar[4].str
			var Refer = yyDollar[8].attributeReferenceUnion()
			var Empty = true
			yyLOCAL = tree.NewForeignKey(
				IfNotExists,
				KeyParts,
				Name,
				Refer,
				Empty,
			)
		}
		yyVAL.union = yyLOCAL
	case 1373:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9074
		{
			var Expr = yyDollar[3].exprUnion()
			var Enforced = yyDollar[5].boolValUnion()
			yyLOCAL = tree.NewCheckIndex(
				Expr,
				Enforced,
			)
		}
		yyVAL.union = yyLOCAL
	case 1374:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9084
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1376:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9090
		{
			yyVAL.str = ""
		}
	case 1377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9094
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1380:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:9104
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1381:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:9110
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1382:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:9116
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1393:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9137
		{
			yyVAL.str = ""
		}
	case 1394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9141
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1395:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:9147
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1396:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9153
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1397:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9157
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1398:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9162
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1399:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9170
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1400:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9174
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1401:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9178
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1402:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9182
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1403:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9188
		{
			yyLOCAL = yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
		}
		yyVAL.union = yyLOCAL
	case 1404:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9194
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1405:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9198
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1406:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9203
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1407:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9210
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1408:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9214
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1409:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9220
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1410:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9224
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1411:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9230
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1412:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9234
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1413:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9238
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1414:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9242
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1415:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9246
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1416:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9250
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumVal(str, str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1417:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9255
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1418:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9259
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1419:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9263
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1420:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9267
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1421:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9271
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1422:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9275
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1423:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9279
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1424:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9283
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1425:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9287
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1426:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9291
		{
			name := tree.NewUnresolvedColName(yyDollar[3].str)
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[3].str, 1),
				Exprs:    es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1427:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9305
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1428:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9309
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1429:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9313
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1430:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9317
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1431:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9321
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1432:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9325
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1433:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9331
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1434:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9335
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1435:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9340
		{
			yyVAL.str = ""
		}
	case 1436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9344
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9350
		{
			yyVAL.str = ""
		}
	case 1438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9354
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1439:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:9360
		{
			var TableName = yyDollar[2].tableNameUnion()
			var KeyParts = yyDollar[3].keyPartsUnion()
			var Match = yyDollar[4].matchTypeUnion()
			var OnDelete = yyDollar[5].referenceOnRecordUnion().OnDelete
			var OnUpdate = yyDollar[5].referenceOnRecordUnion().OnUpdate
			yyLOCAL = tree.NewAttributeReference(
				TableName,
				KeyParts,
				Match,
				OnDelete,
				OnUpdate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1440:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9377
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1441:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9384
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1442:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9391
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1443:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9398
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1444:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9405
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1445:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9414
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1446:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9420
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1447:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9426
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1448:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9430
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1449:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9434
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1450:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9438
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1451:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9442
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1452:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9447
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1454:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9454
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1455:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9458
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1456:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9462
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1457:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9467
		{
			yyLOCAL = tree.FULLTEXT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1458:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9471
		{
			yyLOCAL = tree.FULLTEXT_NL
		}
		yyVAL.union = yyLOCAL
	case 1459:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9475
		{
			yyLOCAL = tree.FULLTEXT_NL_QUERY_EXPANSION
		}
		yyVAL.union = yyLOCAL
	case 1460:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9479
		{
			yyLOCAL = tree.FULLTEXT_BOOLEAN
		}
		yyVAL.union = yyLOCAL
	case 1461:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9483
		{
			yyLOCAL = tree.FULLTEXT_QUERY_EXPANSION
		}
		yyVAL.union = yyLOCAL
	case 1462:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9488
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1463:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9492
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1464:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9497
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1465:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9501
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1472:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:9517
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1473:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9523
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1474:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9527
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1475:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9531
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1476:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9535
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1477:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9539
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1478:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9543
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1479:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9547
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1480:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9551
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1481:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9555
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1482:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9559
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1483:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9563
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1484:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9567
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1485:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9571
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1486:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9577
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1487:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9581
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1488:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9585
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1489:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9589
		{
			yyLOCAL = tree.NewParentExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1490:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9593
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1491:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9597
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1492:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9601
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1493:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9605
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1494:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9609
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1495:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9613
		{
			hint := strings.ToLower(yyDollar[2].cstrUnion().Compare())
			switch hint {
			case "d":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "DATETIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "t":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimeFamily,
						FamilyString: "TIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "ts":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "TIMESTAMP",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			default:
				yylex.Error("Invalid type")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1496:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9655
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1497:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9659
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1498:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9663
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1499:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9668
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1500:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9676
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1501:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9680
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1502:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9684
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1503:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9688
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1504:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9692
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1505:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9702
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1506:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9706
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1507:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9710
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1508:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9714
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1509:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9718
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1510:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9722
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1511:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9726
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1512:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9730
		{
			val, err := tree.NewFullTextMatchFuncExpression(yyDollar[3].keyPartsUnion(), yyDollar[7].str, yyDollar[8].fullTextSearchTypeUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9743
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1514:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9749
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1515:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9758
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1516:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9767
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1517:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9778
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1518:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9788
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1519:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9798
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1520:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9807
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1521:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9817
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1522:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9827
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1523:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9837
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1524:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9846
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1525:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9856
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1526:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9860
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1527:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9865
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1528:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9869
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1529:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9875
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1530:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9879
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1531:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:9885
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9894
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1533:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9906
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1534:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9923
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1536:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9940
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1537:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9953
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1538:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9966
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1539:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9978
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1540:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9992
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1541:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10007
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1542:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10022
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1543:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10039
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1544:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10054
		{
		}
	case 1548:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10061
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1549:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10065
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1550:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10069
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1551:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10075
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1552:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10079
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1553:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10083
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1554:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10087
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1555:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:10093
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1556:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:10097
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1557:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:10101
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1558:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10107
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1559:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10115
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1560:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10125
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1561:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10129
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1562:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10136
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1563:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10141
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1564:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10145
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1565:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10150
		{
			yyVAL.str = ","
		}
	case 1566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10154
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1567:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10159
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1568:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10163
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1569:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:10168
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1571:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:10175
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1572:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10201
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1573:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10213
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1574:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10225
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1575:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10236
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1576:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10247
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1577:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10258
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1578:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10268
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1579:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10278
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1580:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10289
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1581:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10300
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1582:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10311
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1583:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10322
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1584:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10333
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1585:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10344
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1586:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10355
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1587:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10366
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1588:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10377
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1589:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10388
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1590:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10399
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1591:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10410
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1592:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10421
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1593:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10432
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1594:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10443
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var columnList tree.Exprs
			for _, columnStr := range yyDollar[4].identifierListUnion() {
				column := tree.NewUnresolvedColName(string(columnStr))
				columnList = append(columnList, column)
			}

			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      columnList,
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1598:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10467
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1599:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10476
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1600:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10485
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1601:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10494
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1602:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10503
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1603:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10514
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1604:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10523
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[4].exprUnion()},
				Type:     yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1605:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10533
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1606:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10542
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1607:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10551
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1608:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10560
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1609:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10569
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1610:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10581
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1611:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10592
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1612:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10605
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1613:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10617
		{
			column := tree.NewUnresolvedColName(yyDollar[3].str)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10640
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1649:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10676
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1650:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10689
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1651:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10702
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1652:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10714
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1653:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10723
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1654:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10731
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1655:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10739
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1656:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10752
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1657:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10761
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1658:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10772
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1659:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10783
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1660:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10792
		{
			cn := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1661:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10804
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1662:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10814
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1663:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10824
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1664:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10833
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1665:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10844
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1666:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10853
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1667:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10863
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1668:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10872
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1669:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10881
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1670:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10891
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1671:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10895
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1672:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10901
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1673:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10905
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumVal(ival, str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1680:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10924
		{
		}
	case 1681:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10926
		{
		}
	case 1716:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10968
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1717:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10980
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1718:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10984
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1719:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10988
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1720:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:10994
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1721:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10999
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1722:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11003
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1723:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11009
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1724:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11013
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1725:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11019
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1726:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11023
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1727:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11030
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1728:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11034
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1729:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11038
		{
			name := tree.NewUnresolvedColName("concat")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr("concat", 1),
				Exprs:    tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1730:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11047
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1731:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11051
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1732:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11055
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1733:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11060
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1734:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11064
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1735:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11070
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1736:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11074
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1737:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11078
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1738:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11082
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1739:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11086
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1740:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11090
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1741:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11094
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1742:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11098
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1743:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11102
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1744:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11106
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1746:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11114
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1747:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11118
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1748:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11122
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1749:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11126
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1750:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11130
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1751:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11134
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1752:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11138
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1753:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11142
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1754:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11146
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1755:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11150
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1757:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11156
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1758:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11160
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1759:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11166
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1760:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11170
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1761:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11177
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1762:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11181
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1763:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11185
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1764:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11191
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1765:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11195
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1766:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11199
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1767:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11203
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1768:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11207
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1769:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11211
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1770:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11215
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1771:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11221
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1772:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11225
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1773:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11229
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1774:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11233
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1775:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11239
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1776:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11252
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1777:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11257
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1778:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11263
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1779:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11267
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1780:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11280
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1781:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11285
		{
			yyLOCAL = tree.NewNumVal(true, "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1782:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11289
		{
			yyLOCAL = tree.NewNumVal(false, "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1783:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11293
		{
			yyLOCAL = tree.NewNumVal("null", "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1784:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11297
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1785:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11301
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1786:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11308
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1787:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11312
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1788:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11316
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1789:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11320
		{
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1790:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11327
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1794:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11338
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1795:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11343
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1796:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11349
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1797:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11361
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1798:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11373
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1799:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11385
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1800:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11398
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1801:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11411
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1802:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11424
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1803:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11437
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1804:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11450
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1805:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11463
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1806:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11476
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1807:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11489
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1808:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11502
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1809:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11515
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1810:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11530
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1811:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11557
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1812:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11599
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1813:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11635
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1814:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11671
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1815:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11688
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1816:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11700
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1817:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11720
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1818:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11740
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1819:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11760
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1820:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11776
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1821:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11789
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1822:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11802
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1823:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11815
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1824:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11828
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1825:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11840
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1826:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11852
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1827:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11864
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1828:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11876
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1829:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11888
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1830:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11900
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1831:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11912
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1832:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11924
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1833:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11936
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1834:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11948
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1835:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11961
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1836:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11974
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1837:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11987
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1838:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12000
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1839:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:12015
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1840:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:12023
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumVal("null", "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1841:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:12032
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1842:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12042
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1843:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:12065
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1844:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:12070
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1845:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12076
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1847:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12083
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1848:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12087
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1849:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12092
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1850:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12096
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1851:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12102
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1852:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12108
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1853:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12115
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1854:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12122
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1855:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12131
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1856:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12138
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1857:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12145
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1858:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12154
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1859:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12158
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1860:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12162
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1861:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:12168
		{
		}
	case 1862:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12170
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1866:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:12180
		{
			yyVAL.str = ""
		}
	case 1867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:12184
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
